
autoBoat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005148  080001ac  080001ac  000081ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080052f4  080052f4  0000d2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000038  20000000  08005330  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .ccmram       00000000  10000000  10000000  00010038  2**0
                  CONTENTS
  5 .bss          00012e44  20000038  20000038  00010038  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  20012e7c  20012e7c  00010038  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00010038  2**0
                  CONTENTS, READONLY
  8 .debug_line   00005d2c  00000000  00000000  00010066  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000d77c  00000000  00000000  00015d92  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002977  00000000  00000000  0002350e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c28  00000000  00000000  00025e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000014b0  00000000  00000000  00026ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008474  00000000  00000000  00027f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000049a3  00000000  00000000  000303d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000020  00000000  00000000  00034d77  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001b18  00000000  00000000  00034d98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20030000 	andcs	r0, r3, r0
 8000004:	080002f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9}
 8000008:	08000551 	stmdaeq	r0, {r0, r4, r6, r8, sl}
 800000c:	08000555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl}
 8000010:	08000559 	stmdaeq	r0, {r0, r3, r4, r6, r8, sl}
 8000014:	0800055d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, sl}
 8000018:	08000561 	stmdaeq	r0, {r0, r5, r6, r8, sl}
	...
 800002c:	08003109 	stmdaeq	r0, {r0, r3, r8, ip, sp}
 8000030:	08000565 	stmdaeq	r0, {r0, r2, r5, r6, r8, sl}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	080031cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, ip, sp}
 800003c:	08003225 	stmdaeq	r0, {r0, r2, r5, r9, ip, sp}
 8000040:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000044:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000048:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800004c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000050:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000054:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000058:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800005c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000060:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000064:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000068:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800006c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000070:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000074:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000078:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800007c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000080:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000084:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000088:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800008c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000090:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000094:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000098:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800009c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000a0:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000a4:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000a8:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000ac:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000b0:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000b4:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000b8:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000bc:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000c0:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000c4:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000c8:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000cc:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000d0:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000d4:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000d8:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000dc:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000e0:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000e4:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000e8:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000ec:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000f0:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000f4:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000f8:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80000fc:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000100:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000104:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000108:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800010c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000110:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000114:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000118:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800011c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000120:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000124:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000128:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800012c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000130:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000134:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000138:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800013c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000140:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000144:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000148:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800014c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000150:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000154:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000158:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800015c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000160:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000164:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000168:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800016c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000170:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000174:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000178:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800017c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000180:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000184:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000188:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800018c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000190:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000194:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 8000198:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 800019c:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80001a0:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80001a4:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}
 80001a8:	08000339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9}

Disassembly of section .text:

080001ac <memcpy-0x14>:
 80001ac:	08005330 	stmdaeq	r0, {r4, r5, r8, r9, ip, lr}
 80001b0:	20000000 	andcs	r0, r0, r0
 80001b4:	20000038 	andcs	r0, r0, r8, lsr r0
 80001b8:	20000038 	andcs	r0, r0, r8, lsr r0
 80001bc:	20012e7c 	andcs	r2, r1, ip, ror lr

080001c0 <memcpy>:
 80001c0:	4684      	mov	ip, r0
 80001c2:	ea41 0300 	orr.w	r3, r1, r0
 80001c6:	f013 0303 	ands.w	r3, r3, #3
 80001ca:	d16d      	bne.n	80002a8 <memcpy+0xe8>
 80001cc:	3a40      	subs	r2, #64	; 0x40
 80001ce:	d341      	bcc.n	8000254 <memcpy+0x94>
 80001d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001d4:	f840 3b04 	str.w	r3, [r0], #4
 80001d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001dc:	f840 3b04 	str.w	r3, [r0], #4
 80001e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001e4:	f840 3b04 	str.w	r3, [r0], #4
 80001e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001ec:	f840 3b04 	str.w	r3, [r0], #4
 80001f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f4:	f840 3b04 	str.w	r3, [r0], #4
 80001f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001fc:	f840 3b04 	str.w	r3, [r0], #4
 8000200:	f851 3b04 	ldr.w	r3, [r1], #4
 8000204:	f840 3b04 	str.w	r3, [r0], #4
 8000208:	f851 3b04 	ldr.w	r3, [r1], #4
 800020c:	f840 3b04 	str.w	r3, [r0], #4
 8000210:	f851 3b04 	ldr.w	r3, [r1], #4
 8000214:	f840 3b04 	str.w	r3, [r0], #4
 8000218:	f851 3b04 	ldr.w	r3, [r1], #4
 800021c:	f840 3b04 	str.w	r3, [r0], #4
 8000220:	f851 3b04 	ldr.w	r3, [r1], #4
 8000224:	f840 3b04 	str.w	r3, [r0], #4
 8000228:	f851 3b04 	ldr.w	r3, [r1], #4
 800022c:	f840 3b04 	str.w	r3, [r0], #4
 8000230:	f851 3b04 	ldr.w	r3, [r1], #4
 8000234:	f840 3b04 	str.w	r3, [r0], #4
 8000238:	f851 3b04 	ldr.w	r3, [r1], #4
 800023c:	f840 3b04 	str.w	r3, [r0], #4
 8000240:	f851 3b04 	ldr.w	r3, [r1], #4
 8000244:	f840 3b04 	str.w	r3, [r0], #4
 8000248:	f851 3b04 	ldr.w	r3, [r1], #4
 800024c:	f840 3b04 	str.w	r3, [r0], #4
 8000250:	3a40      	subs	r2, #64	; 0x40
 8000252:	d2bd      	bcs.n	80001d0 <memcpy+0x10>
 8000254:	3230      	adds	r2, #48	; 0x30
 8000256:	d311      	bcc.n	800027c <memcpy+0xbc>
 8000258:	f851 3b04 	ldr.w	r3, [r1], #4
 800025c:	f840 3b04 	str.w	r3, [r0], #4
 8000260:	f851 3b04 	ldr.w	r3, [r1], #4
 8000264:	f840 3b04 	str.w	r3, [r0], #4
 8000268:	f851 3b04 	ldr.w	r3, [r1], #4
 800026c:	f840 3b04 	str.w	r3, [r0], #4
 8000270:	f851 3b04 	ldr.w	r3, [r1], #4
 8000274:	f840 3b04 	str.w	r3, [r0], #4
 8000278:	3a10      	subs	r2, #16
 800027a:	d2ed      	bcs.n	8000258 <memcpy+0x98>
 800027c:	320c      	adds	r2, #12
 800027e:	d305      	bcc.n	800028c <memcpy+0xcc>
 8000280:	f851 3b04 	ldr.w	r3, [r1], #4
 8000284:	f840 3b04 	str.w	r3, [r0], #4
 8000288:	3a04      	subs	r2, #4
 800028a:	d2f9      	bcs.n	8000280 <memcpy+0xc0>
 800028c:	3204      	adds	r2, #4
 800028e:	d008      	beq.n	80002a2 <memcpy+0xe2>
 8000290:	07d2      	lsls	r2, r2, #31
 8000292:	bf1c      	itt	ne
 8000294:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000298:	f800 3b01 	strbne.w	r3, [r0], #1
 800029c:	d301      	bcc.n	80002a2 <memcpy+0xe2>
 800029e:	880b      	ldrh	r3, [r1, #0]
 80002a0:	8003      	strh	r3, [r0, #0]
 80002a2:	4660      	mov	r0, ip
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	2a08      	cmp	r2, #8
 80002aa:	d313      	bcc.n	80002d4 <memcpy+0x114>
 80002ac:	078b      	lsls	r3, r1, #30
 80002ae:	d08d      	beq.n	80001cc <memcpy+0xc>
 80002b0:	f010 0303 	ands.w	r3, r0, #3
 80002b4:	d08a      	beq.n	80001cc <memcpy+0xc>
 80002b6:	f1c3 0304 	rsb	r3, r3, #4
 80002ba:	1ad2      	subs	r2, r2, r3
 80002bc:	07db      	lsls	r3, r3, #31
 80002be:	bf1c      	itt	ne
 80002c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002c4:	f800 3b01 	strbne.w	r3, [r0], #1
 80002c8:	d380      	bcc.n	80001cc <memcpy+0xc>
 80002ca:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002ce:	f820 3b02 	strh.w	r3, [r0], #2
 80002d2:	e77b      	b.n	80001cc <memcpy+0xc>
 80002d4:	3a04      	subs	r2, #4
 80002d6:	d3d9      	bcc.n	800028c <memcpy+0xcc>
 80002d8:	3a01      	subs	r2, #1
 80002da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002de:	f800 3b01 	strb.w	r3, [r0], #1
 80002e2:	d2f9      	bcs.n	80002d8 <memcpy+0x118>
 80002e4:	780b      	ldrb	r3, [r1, #0]
 80002e6:	7003      	strb	r3, [r0, #0]
 80002e8:	784b      	ldrb	r3, [r1, #1]
 80002ea:	7043      	strb	r3, [r0, #1]
 80002ec:	788b      	ldrb	r3, [r1, #2]
 80002ee:	7083      	strb	r3, [r0, #2]
 80002f0:	4660      	mov	r0, ip
 80002f2:	4770      	bx	lr

080002f4 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002f6:	e003      	b.n	8000300 <LoopCopyDataInit>

080002f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <LoopFillZerobss+0x10>)
  ldr  r3, [r3, r1]
 80002fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002fe:	3104      	adds	r1, #4

08000300 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <LoopFillZerobss+0x14>)
  ldr  r3, =_edata
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <LoopFillZerobss+0x18>)
  adds  r2, r0, r1
 8000304:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000306:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000308:	d3f6      	bcc.n	80002f8 <CopyDataInit>
  ldr  r2, =_sbss
 800030a:	4a09      	ldr	r2, [pc, #36]	; (8000330 <LoopFillZerobss+0x1c>)
  b  LoopFillZerobss
 800030c:	e002      	b.n	8000314 <LoopFillZerobss>

0800030e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800030e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000310:	f842 3b04 	str.w	r3, [r2], #4

08000314 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <LoopFillZerobss+0x20>)
  cmp  r2, r3
 8000316:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000318:	d3f9      	bcc.n	800030e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800031a:	f000 f861 	bl	80003e0 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 800031e:	f000 f841 	bl	80003a4 <main>
  bx  lr    
 8000322:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000324:	08005330 	stmdaeq	r0, {r4, r5, r8, r9, ip, lr}
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000328:	20000000 	andcs	r0, r0, r0
  ldr  r3, =_edata
 800032c:	20000038 	andcs	r0, r0, r8, lsr r0
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000330:	20000038 	andcs	r0, r0, r8, lsr r0
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000334:	20012e7c 	andcs	r2, r1, ip, ror lr

08000338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000338:	e7fe      	b.n	8000338 <ADC_IRQHandler>
	...

0800033c <Boat>:
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_Init(GPIOG, &GPIO_InitStructure);
}

void Boat( void* pvParameters )
{
 800033c:	b508      	push	{r3, lr}
	GPIO_ToggleBits(GPIOG, GPIO_Pin_14);
 800033e:	480a      	ldr	r0, [pc, #40]	; (8000368 <Boat+0x2c>)
 8000340:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000344:	f003 fa04 	bl	8003750 <GPIO_ToggleBits>
	while(1)
	{
		GPIO_ToggleBits(GPIOG, GPIO_Pin_13);
 8000348:	4807      	ldr	r0, [pc, #28]	; (8000368 <Boat+0x2c>)
 800034a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034e:	f003 f9ff 	bl	8003750 <GPIO_ToggleBits>
		GPIO_ToggleBits(GPIOG, GPIO_Pin_14);
 8000352:	4805      	ldr	r0, [pc, #20]	; (8000368 <Boat+0x2c>)
 8000354:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000358:	f003 f9fa 	bl	8003750 <GPIO_ToggleBits>

		vTaskDelay(1000);
 800035c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000360:	f001 ffae 	bl	80022c0 <vTaskDelay>
 8000364:	e7f0      	b.n	8000348 <Boat+0xc>
 8000366:	bf00      	nop
 8000368:	40021800 	andmi	r1, r2, r0, lsl #16

0800036c <RCC_Configuration>:
  * @retval None
  */
void RCC_Configuration(void)
{
   // RCC Configuration
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800036c:	2040      	movs	r0, #64	; 0x40
 800036e:	2101      	movs	r1, #1
 8000370:	f003 bbb4 	b.w	8003adc <RCC_AHB1PeriphClockCmd>

08000374 <GPIO_Configuration>:
  * @brief  configure the PD12~15 to Timers
  * @param  None
  * @retval None
  */
void GPIO_Configuration(void)
{
 8000374:	b500      	push	{lr}
 8000376:	b083      	sub	sp, #12
    // GPIO Configuration
	// LED3 (Green): GPIO_Pin_13, LED4 (Red): GPIO_Pin_14
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
 8000378:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800037c:	2300      	movs	r3, #0
{
    // GPIO Configuration
	// LED3 (Green): GPIO_Pin_13, LED4 (Red): GPIO_Pin_14
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800037e:	2201      	movs	r2, #1
void GPIO_Configuration(void)
{
    // GPIO Configuration
	// LED3 (Green): GPIO_Pin_13, LED4 (Red): GPIO_Pin_14
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
 8000380:	9100      	str	r1, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000382:	4807      	ldr	r0, [pc, #28]	; (80003a0 <GPIO_Configuration+0x2c>)
{
    // GPIO Configuration
	// LED3 (Green): GPIO_Pin_13, LED4 (Red): GPIO_Pin_14
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000384:	f88d 2004 	strb.w	r2, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000388:	4669      	mov	r1, sp
    // GPIO Configuration
	// LED3 (Green): GPIO_Pin_13, LED4 (Red): GPIO_Pin_14
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800038a:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800038e:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000392:	f88d 3005 	strb.w	r3, [sp, #5]
	GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000396:	f003 f941 	bl	800361c <GPIO_Init>
}
 800039a:	b003      	add	sp, #12
 800039c:	f85d fb04 	ldr.w	pc, [sp], #4
 80003a0:	40021800 	andmi	r1, r2, r0, lsl #16

080003a4 <main>:
void RCC_Configuration(void);
void GPIO_Configuration(void);
void Boat( void* pvParameters );

int main( void )
{	
 80003a4:	b510      	push	{r4, lr}
  * @retval None
  */
void RCC_Configuration(void)
{
   // RCC Configuration
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80003a6:	2040      	movs	r0, #64	; 0x40
void RCC_Configuration(void);
void GPIO_Configuration(void);
void Boat( void* pvParameters );

int main( void )
{	
 80003a8:	b084      	sub	sp, #16
  * @retval None
  */
void RCC_Configuration(void)
{
   // RCC Configuration
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80003aa:	2101      	movs	r1, #1
 80003ac:	f003 fb96 	bl	8003adc <RCC_AHB1PeriphClockCmd>
{	
	
	RCC_Configuration();
//	TIM_Configuration();
	GPIO_Configuration();
	xTaskCreate( Boat, (signed char*)"Boat", 128, NULL, tskIDLE_PRIORITY+1, NULL );
 80003b0:	2400      	movs	r4, #0
int main( void )
{	
	
	RCC_Configuration();
//	TIM_Configuration();
	GPIO_Configuration();
 80003b2:	f7ff ffdf 	bl	8000374 <GPIO_Configuration>
	xTaskCreate( Boat, (signed char*)"Boat", 128, NULL, tskIDLE_PRIORITY+1, NULL );
 80003b6:	2301      	movs	r3, #1
 80003b8:	e88d 0018 	stmia.w	sp, {r3, r4}
 80003bc:	4906      	ldr	r1, [pc, #24]	; (80003d8 <main+0x34>)
 80003be:	9402      	str	r4, [sp, #8]
 80003c0:	4623      	mov	r3, r4
 80003c2:	2280      	movs	r2, #128	; 0x80
 80003c4:	9403      	str	r4, [sp, #12]
 80003c6:	4805      	ldr	r0, [pc, #20]	; (80003dc <main+0x38>)
 80003c8:	f001 fa86 	bl	80018d8 <xTaskGenericCreate>
	vTaskStartScheduler();
 80003cc:	f001 fd3a 	bl	8001e44 <vTaskStartScheduler>
}
 80003d0:	4620      	mov	r0, r4
 80003d2:	b004      	add	sp, #16
 80003d4:	bd10      	pop	{r4, pc}
 80003d6:	bf00      	nop
 80003d8:	080052f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip, lr}
 80003dc:	0800033d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9}

080003e0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003e0:	4a39      	ldr	r2, [pc, #228]	; (80004c8 <SystemInit+0xe8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003e2:	4b3a      	ldr	r3, [pc, #232]	; (80004cc <SystemInit+0xec>)
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003e4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003e8:	4839      	ldr	r0, [pc, #228]	; (80004d0 <SystemInit+0xf0>)
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003ee:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003f2:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003f4:	2200      	movs	r2, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003f6:	f041 0101 	orr.w	r1, r1, #1
 80003fa:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003fe:	6819      	ldr	r1, [r3, #0]
 8000400:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000404:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000408:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800040a:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800040c:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800040e:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000410:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000414:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000416:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000418:	9200      	str	r2, [sp, #0]
 800041a:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000422:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000424:	461a      	mov	r2, r3
 8000426:	e003      	b.n	8000430 <SystemInit+0x50>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000428:	9b00      	ldr	r3, [sp, #0]
 800042a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800042e:	d009      	beq.n	8000444 <SystemInit+0x64>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000430:	6813      	ldr	r3, [r2, #0]
 8000432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000436:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 8000438:	9b00      	ldr	r3, [sp, #0]
 800043a:	3301      	adds	r3, #1
 800043c:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800043e:	9b01      	ldr	r3, [sp, #4]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d0f1      	beq.n	8000428 <SystemInit+0x48>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000444:	4b21      	ldr	r3, [pc, #132]	; (80004cc <SystemInit+0xec>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 800044c:	bf18      	it	ne
 800044e:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000450:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000452:	9b01      	ldr	r3, [sp, #4]
 8000454:	2b01      	cmp	r3, #1
 8000456:	d005      	beq.n	8000464 <SystemInit+0x84>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000458:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <SystemInit+0xe8>)
 800045a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800045e:	609a      	str	r2, [r3, #8]
#endif
}
 8000460:	b002      	add	sp, #8
 8000462:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000464:	4b19      	ldr	r3, [pc, #100]	; (80004cc <SystemInit+0xec>)
    PWR->CR |= PWR_CR_VOS;
 8000466:	4a1b      	ldr	r2, [pc, #108]	; (80004d4 <SystemInit+0xf4>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000468:	6c18      	ldr	r0, [r3, #64]	; 0x40
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800046a:	491b      	ldr	r1, [pc, #108]	; (80004d8 <SystemInit+0xf8>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800046c:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000470:	6418      	str	r0, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000472:	6810      	ldr	r0, [r2, #0]
 8000474:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000478:	6010      	str	r0, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800047a:	689a      	ldr	r2, [r3, #8]
 800047c:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800047e:	689a      	ldr	r2, [r3, #8]
 8000480:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000484:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000486:	689a      	ldr	r2, [r3, #8]
 8000488:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800048c:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800048e:	6059      	str	r1, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000496:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000498:	4619      	mov	r1, r3
 800049a:	680b      	ldr	r3, [r1, #0]
 800049c:	4a0b      	ldr	r2, [pc, #44]	; (80004cc <SystemInit+0xec>)
 800049e:	019b      	lsls	r3, r3, #6
 80004a0:	d5fb      	bpl.n	800049a <SystemInit+0xba>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <SystemInit+0xfc>)
 80004a4:	f240 6104 	movw	r1, #1540	; 0x604
 80004a8:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80004aa:	6893      	ldr	r3, [r2, #8]
 80004ac:	f023 0303 	bic.w	r3, r3, #3
 80004b0:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80004b2:	6893      	ldr	r3, [r2, #8]
 80004b4:	f043 0302 	orr.w	r3, r3, #2
 80004b8:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80004ba:	6893      	ldr	r3, [r2, #8]
 80004bc:	f003 030c 	and.w	r3, r3, #12
 80004c0:	2b08      	cmp	r3, #8
 80004c2:	d1fa      	bne.n	80004ba <SystemInit+0xda>
 80004c4:	e7c8      	b.n	8000458 <SystemInit+0x78>
 80004c6:	bf00      	nop
 80004c8:	e000ed00 	and	lr, r0, r0, lsl #26
 80004cc:	40023800 	andmi	r3, r2, r0, lsl #16
 80004d0:	24003010 	strcs	r3, [r0], #-16
 80004d4:	40007000 	andmi	r7, r0, r0
 80004d8:	07404b08 	strbeq	r4, [r0, -r8, lsl #22]
 80004dc:	40023c00 	andmi	r3, r2, r0, lsl #24

080004e0 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004e0:	4b16      	ldr	r3, [pc, #88]	; (800053c <SystemCoreClockUpdate+0x5c>)
 80004e2:	689a      	ldr	r2, [r3, #8]
 80004e4:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 80004e8:	2a04      	cmp	r2, #4
 80004ea:	d024      	beq.n	8000536 <SystemCoreClockUpdate+0x56>
 80004ec:	2a08      	cmp	r2, #8
 80004ee:	d00a      	beq.n	8000506 <SystemCoreClockUpdate+0x26>
 80004f0:	4a13      	ldr	r2, [pc, #76]	; (8000540 <SystemCoreClockUpdate+0x60>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80004f2:	4b12      	ldr	r3, [pc, #72]	; (800053c <SystemCoreClockUpdate+0x5c>)
 80004f4:	4813      	ldr	r0, [pc, #76]	; (8000544 <SystemCoreClockUpdate+0x64>)
 80004f6:	6899      	ldr	r1, [r3, #8]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80004f8:	4b13      	ldr	r3, [pc, #76]	; (8000548 <SystemCoreClockUpdate+0x68>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80004fa:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80004fe:	5c41      	ldrb	r1, [r0, r1]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000500:	40ca      	lsrs	r2, r1
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000506:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000508:	6859      	ldr	r1, [r3, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800050a:	685b      	ldr	r3, [r3, #4]
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 800050c:	0242      	lsls	r2, r0, #9
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800050e:	bf4c      	ite	mi
 8000510:	4a0e      	ldrmi	r2, [pc, #56]	; (800054c <SystemCoreClockUpdate+0x6c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000512:	4a0b      	ldrpl	r2, [pc, #44]	; (8000540 <SystemCoreClockUpdate+0x60>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000514:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000518:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800051c:	fbb2 f2f1 	udiv	r2, r2, r1
 8000520:	fb02 f203 	mul.w	r2, r2, r3
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <SystemCoreClockUpdate+0x5c>)
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800052c:	3301      	adds	r3, #1
 800052e:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 8000530:	fbb2 f2f3 	udiv	r2, r2, r3
      break;
 8000534:	e7dd      	b.n	80004f2 <SystemCoreClockUpdate+0x12>
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 8000536:	4a05      	ldr	r2, [pc, #20]	; (800054c <SystemCoreClockUpdate+0x6c>)
 8000538:	e7db      	b.n	80004f2 <SystemCoreClockUpdate+0x12>
 800053a:	bf00      	nop
 800053c:	40023800 	andmi	r3, r2, r0, lsl #16
 8000540:	00f42400 	rscseq	r2, r4, r0, lsl #8
 8000544:	20000000 	andcs	r0, r0, r0
 8000548:	20000010 	andcs	r0, r0, r0, lsl r0
 800054c:	007a1200 	rsbseq	r1, sl, r0, lsl #4

08000550 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000554:	e7fe      	b.n	8000554 <HardFault_Handler>
 8000556:	bf00      	nop

08000558 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000558:	e7fe      	b.n	8000558 <MemManage_Handler>
 800055a:	bf00      	nop

0800055c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800055c:	e7fe      	b.n	800055c <BusFault_Handler>
 800055e:	bf00      	nop

08000560 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000560:	e7fe      	b.n	8000560 <UsageFault_Handler>
 8000562:	bf00      	nop

08000564 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <PPP_IRQHandler>:
  * @brief  This function handles PPP interrupt request.
  * @param  None
  * @retval None
  */
void PPP_IRQHandler(void)
{
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )
{
 800056c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000570:	4607      	mov	r7, r0
BaseType_t xReturn;
CRCB_t *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
 8000572:	2038      	movs	r0, #56	; 0x38
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )
{
 8000574:	460e      	mov	r6, r1
 8000576:	4690      	mov	r8, r2
BaseType_t xReturn;
CRCB_t *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
 8000578:	f002 fef6 	bl	8003368 <pvPortMalloc>
	if( pxCoRoutine )
 800057c:	4604      	mov	r4, r0
 800057e:	2800      	cmp	r0, #0
 8000580:	d043      	beq.n	800060a <xCoRoutineCreate+0x9e>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
 8000582:	4b24      	ldr	r3, [pc, #144]	; (8000614 <xCoRoutineCreate+0xa8>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	b33a      	cbz	r2, 80005d8 <xCoRoutineCreate+0x6c>

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
		pxCoRoutine->uxPriority = uxPriority;
		pxCoRoutine->uxIndex = uxIndex;
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
 8000588:	4625      	mov	r5, r4
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
 800058a:	2300      	movs	r3, #0
 800058c:	2e01      	cmp	r6, #1
 800058e:	bf28      	it	cs
 8000590:	2601      	movcs	r6, #1
 8000592:	86a3      	strh	r3, [r4, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
 8000594:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
 8000596:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
 800059a:	f845 7b04 	str.w	r7, [r5], #4

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
 800059e:	4628      	mov	r0, r5
 80005a0:	f000 fb04 	bl	8000bac <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
 80005a4:	f104 0018 	add.w	r0, r4, #24
 80005a8:	f000 fb00 	bl	8000bac <vListInitialiseItem>
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 80005ac:	4a1a      	ldr	r2, [pc, #104]	; (8000618 <xCoRoutineCreate+0xac>)
 80005ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80005b0:	6811      	ldr	r1, [r2, #0]
 80005b2:	481a      	ldr	r0, [pc, #104]	; (800061c <xCoRoutineCreate+0xb0>)
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );

		/* Set the co-routine control block as a link back from the ListItem_t.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
 80005b4:	6124      	str	r4, [r4, #16]
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 80005b6:	428b      	cmp	r3, r1
 80005b8:	bf88      	it	hi
 80005ba:	6013      	strhi	r3, [r2, #0]
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );

		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
 80005bc:	f1c6 0602 	rsb	r6, r6, #2

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 80005c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80005c4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );

		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
 80005c8:	61a6      	str	r6, [r4, #24]

		/* Set the co-routine control block as a link back from the ListItem_t.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
 80005ca:	6264      	str	r4, [r4, #36]	; 0x24
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 80005cc:	4629      	mov	r1, r5
 80005ce:	f000 faf1 	bl	8000bb4 <vListInsertEnd>

		xReturn = pdPASS;
 80005d2:	2001      	movs	r0, #1
 80005d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
{
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
 80005d8:	4810      	ldr	r0, [pc, #64]	; (800061c <xCoRoutineCreate+0xb0>)
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
 80005da:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8000634 <xCoRoutineCreate+0xc8>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
		{
			pxCurrentCoRoutine = pxCoRoutine;
 80005de:	601c      	str	r4, [r3, #0]
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
 80005e0:	4d0f      	ldr	r5, [pc, #60]	; (8000620 <xCoRoutineCreate+0xb4>)
{
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
 80005e2:	f000 fad7 	bl	8000b94 <vListInitialise>
 80005e6:	480f      	ldr	r0, [pc, #60]	; (8000624 <xCoRoutineCreate+0xb8>)
 80005e8:	f000 fad4 	bl	8000b94 <vListInitialise>
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
 80005ec:	4648      	mov	r0, r9
 80005ee:	f000 fad1 	bl	8000b94 <vListInitialise>
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
 80005f2:	4628      	mov	r0, r5
 80005f4:	f000 face 	bl	8000b94 <vListInitialise>
	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
 80005f8:	480b      	ldr	r0, [pc, #44]	; (8000628 <xCoRoutineCreate+0xbc>)
 80005fa:	f000 facb 	bl	8000b94 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
 80005fe:	4a0b      	ldr	r2, [pc, #44]	; (800062c <xCoRoutineCreate+0xc0>)
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
 8000600:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <xCoRoutineCreate+0xc4>)
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
 8000602:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
 8000606:	601d      	str	r5, [r3, #0]
 8000608:	e7be      	b.n	8000588 <xCoRoutineCreate+0x1c>

		xReturn = pdPASS;
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800060a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return xReturn;
}
 800060e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000612:	bf00      	nop
 8000614:	20000064 	andcs	r0, r0, r4, rrx
 8000618:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800061c:	20000088 	andcs	r0, r0, r8, lsl #1
 8000620:	20000068 	andcs	r0, r0, r8, rrx
 8000624:	2000009c 	mulcs	r0, ip, r0
 8000628:	20000050 	andcs	r0, r0, r0, asr r0
 800062c:	20000084 	andcs	r0, r0, r4, lsl #1
 8000630:	200000b4 	strhcs	r0, [r0], -r4
 8000634:	20000038 	andcs	r0, r0, r8, lsr r0

08000638 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
{
 8000638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 800063a:	4e0e      	ldr	r6, [pc, #56]	; (8000674 <vCoRoutineAddToDelayedList+0x3c>)

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 800063c:	4c0e      	ldr	r4, [pc, #56]	; (8000678 <vCoRoutineAddToDelayedList+0x40>)
{
TickType_t xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 800063e:	6835      	ldr	r5, [r6, #0]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 8000640:	6823      	ldr	r3, [r4, #0]
{
TickType_t xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 8000642:	4405      	add	r5, r0

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 8000644:	1d18      	adds	r0, r3, #4
	return xReturn;
}
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
{
 8000646:	460f      	mov	r7, r1
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 8000648:	f000 fadc 	bl	8000c04 <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xCoRoutineTickCount )
 800064c:	6832      	ldr	r2, [r6, #0]
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
 800064e:	6821      	ldr	r1, [r4, #0]

	if( xTimeToWake < xCoRoutineTickCount )
 8000650:	4295      	cmp	r5, r2
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 8000652:	bf34      	ite	cc
 8000654:	4a09      	ldrcc	r2, [pc, #36]	; (800067c <vCoRoutineAddToDelayedList+0x44>)
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 8000656:	4a0a      	ldrcs	r2, [pc, #40]	; (8000680 <vCoRoutineAddToDelayedList+0x48>)
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
 8000658:	604d      	str	r5, [r1, #4]
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 800065a:	6810      	ldr	r0, [r2, #0]
 800065c:	3104      	adds	r1, #4
 800065e:	f000 fab7 	bl	8000bd0 <vListInsert>
	}

	if( pxEventList )
 8000662:	b137      	cbz	r7, 8000672 <vCoRoutineAddToDelayedList+0x3a>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
 8000664:	6821      	ldr	r1, [r4, #0]
 8000666:	4638      	mov	r0, r7
 8000668:	3118      	adds	r1, #24
	}
}
 800066a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	if( pxEventList )
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
 800066e:	f000 baaf 	b.w	8000bd0 <vListInsert>
 8000672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000674:	2000007c 	andcs	r0, r0, ip, ror r0
 8000678:	20000064 	andcs	r0, r0, r4, rrx
 800067c:	200000b4 	strhcs	r0, [r0], -r4
 8000680:	20000084 	andcs	r0, r0, r4, lsl #1

08000684 <vCoRoutineSchedule>:
	xLastTickCount = xCoRoutineTickCount;
}
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
 8000684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 8000688:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000834 <vCoRoutineSchedule+0x1b0>
 800068c:	4d62      	ldr	r5, [pc, #392]	; (8000818 <vCoRoutineSchedule+0x194>)
 800068e:	f8d8 3000 	ldr.w	r3, [r8]
 8000692:	4e62      	ldr	r6, [pc, #392]	; (800081c <vCoRoutineSchedule+0x198>)
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
		}
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
 8000694:	46a9      	mov	r9, r5
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 8000696:	b303      	cbz	r3, 80006da <vCoRoutineSchedule+0x56>
	{
		CRCB_t *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
 8000698:	f002 fd52 	bl	8003140 <ulPortSetInterruptMask>
		{
			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
 800069c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80006a0:	68dc      	ldr	r4, [r3, #12]
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 80006a2:	f104 0018 	add.w	r0, r4, #24
 80006a6:	f000 faad 	bl	8000c04 <uxListRemove>
		}
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
 80006aa:	1d27      	adds	r7, r4, #4
		portDISABLE_INTERRUPTS();
		{
			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
		}
		portENABLE_INTERRUPTS();
 80006ac:	2000      	movs	r0, #0
 80006ae:	f002 fd77 	bl	80031a0 <vPortClearInterruptMask>

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
 80006b2:	4638      	mov	r0, r7
 80006b4:	f000 faa6 	bl	8000c04 <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
 80006b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80006ba:	682a      	ldr	r2, [r5, #0]
 80006bc:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80006c0:	4293      	cmp	r3, r2
 80006c2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80006c6:	4639      	mov	r1, r7
 80006c8:	bf88      	it	hi
 80006ca:	f8c9 3000 	strhi.w	r3, [r9]
 80006ce:	f000 fa71 	bl	8000bb4 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 80006d2:	f8d8 3000 	ldr.w	r3, [r8]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1de      	bne.n	8000698 <vCoRoutineSchedule+0x14>

static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
 80006da:	f001 fc63 	bl	8001fa4 <xTaskGetTickCount>
 80006de:	4950      	ldr	r1, [pc, #320]	; (8000820 <vCoRoutineSchedule+0x19c>)
 80006e0:	4f50      	ldr	r7, [pc, #320]	; (8000824 <vCoRoutineSchedule+0x1a0>)
 80006e2:	680b      	ldr	r3, [r1, #0]
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
 80006e4:	f8df b150 	ldr.w	fp, [pc, #336]	; 8000838 <vCoRoutineSchedule+0x1b4>
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );
 80006e8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8000818 <vCoRoutineSchedule+0x194>
 80006ec:	683a      	ldr	r2, [r7, #0]

static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
 80006ee:	1ac0      	subs	r0, r0, r3
 80006f0:	4b4d      	ldr	r3, [pc, #308]	; (8000828 <vCoRoutineSchedule+0x1a4>)
 80006f2:	6018      	str	r0, [r3, #0]
 80006f4:	4603      	mov	r3, r0
	while( xPassedTicks )
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d046      	beq.n	8000788 <vCoRoutineSchedule+0x104>
	{
		xCoRoutineTickCount++;
		xPassedTicks--;
 80006fa:	494b      	ldr	r1, [pc, #300]	; (8000828 <vCoRoutineSchedule+0x1a4>)
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
 80006fc:	3201      	adds	r2, #1
		xPassedTicks--;
 80006fe:	1e58      	subs	r0, r3, #1
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
 8000700:	603a      	str	r2, [r7, #0]
		xPassedTicks--;
 8000702:	6008      	str	r0, [r1, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
 8000704:	2a00      	cmp	r2, #0
 8000706:	d05b      	beq.n	80007c0 <vCoRoutineSchedule+0x13c>
 8000708:	f8db 1000 	ldr.w	r1, [fp]
 800070c:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8000838 <vCoRoutineSchedule+0x1b4>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 8000710:	680b      	ldr	r3, [r1, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d060      	beq.n	80007d8 <vCoRoutineSchedule+0x154>
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
 8000716:	68cb      	ldr	r3, [r1, #12]
 8000718:	f8d3 a00c 	ldr.w	sl, [r3, #12]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
 800071c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8000720:	428a      	cmp	r2, r1
 8000722:	d208      	bcs.n	8000736 <vCoRoutineSchedule+0xb2>
 8000724:	e058      	b.n	80007d8 <vCoRoutineSchedule+0x154>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
 8000726:	68db      	ldr	r3, [r3, #12]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
 8000728:	683a      	ldr	r2, [r7, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
 800072a:	f8d3 a00c 	ldr.w	sl, [r3, #12]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
 800072e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8000732:	4291      	cmp	r1, r2
 8000734:	d852      	bhi.n	80007dc <vCoRoutineSchedule+0x158>
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				uxListRemove( &( pxCRCB->xGenericListItem ) );
 8000736:	f10a 0404 	add.w	r4, sl, #4
			{
				/* Timeout not yet expired. */
				break;
			}

			portDISABLE_INTERRUPTS();
 800073a:	f002 fd01 	bl	8003140 <ulPortSetInterruptMask>
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				uxListRemove( &( pxCRCB->xGenericListItem ) );
 800073e:	4620      	mov	r0, r4
 8000740:	f000 fa60 	bl	8000c04 <uxListRemove>

				/* Is the co-routine waiting on an event also? */
				if( pxCRCB->xEventListItem.pvContainer )
 8000744:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
				{
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
 8000748:	f10a 0018 	add.w	r0, sl, #24
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				uxListRemove( &( pxCRCB->xGenericListItem ) );

				/* Is the co-routine waiting on an event also? */
				if( pxCRCB->xEventListItem.pvContainer )
 800074c:	b10a      	cbz	r2, 8000752 <vCoRoutineSchedule+0xce>
				{
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
 800074e:	f000 fa59 	bl	8000c04 <uxListRemove>
				}
			}
			portENABLE_INTERRUPTS();
 8000752:	2000      	movs	r0, #0
 8000754:	f002 fd24 	bl	80031a0 <vPortClearInterruptMask>

			prvAddCoRoutineToReadyQueue( pxCRCB );
 8000758:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 800075c:	682a      	ldr	r2, [r5, #0]
 800075e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8000762:	4293      	cmp	r3, r2
 8000764:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8000768:	4621      	mov	r1, r4
 800076a:	bf88      	it	hi
 800076c:	f8c9 3000 	strhi.w	r3, [r9]
 8000770:	f000 fa20 	bl	8000bb4 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 8000774:	f8d8 3000 	ldr.w	r3, [r8]
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	2a00      	cmp	r2, #0
 800077c:	d1d3      	bne.n	8000726 <vCoRoutineSchedule+0xa2>
 800077e:	492a      	ldr	r1, [pc, #168]	; (8000828 <vCoRoutineSchedule+0x1a4>)
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	680b      	ldr	r3, [r1, #0]
static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
 8000784:	2b00      	cmp	r3, #0
 8000786:	d1b8      	bne.n	80006fa <vCoRoutineSchedule+0x76>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 8000788:	6829      	ldr	r1, [r5, #0]

			prvAddCoRoutineToReadyQueue( pxCRCB );
		}
	}

	xLastTickCount = xCoRoutineTickCount;
 800078a:	4825      	ldr	r0, [pc, #148]	; (8000820 <vCoRoutineSchedule+0x19c>)
 800078c:	6002      	str	r2, [r0, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 800078e:	008a      	lsls	r2, r1, #2
 8000790:	1854      	adds	r4, r2, r1
 8000792:	4822      	ldr	r0, [pc, #136]	; (800081c <vCoRoutineSchedule+0x198>)
 8000794:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 8000798:	bb34      	cbnz	r4, 80007e8 <vCoRoutineSchedule+0x164>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
 800079a:	2900      	cmp	r1, #0
 800079c:	d037      	beq.n	800080e <vCoRoutineSchedule+0x18a>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
 800079e:	1e4a      	subs	r2, r1, #1

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 80007a0:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 80007a4:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 80007a8:	b9dc      	cbnz	r4, 80007e2 <vCoRoutineSchedule+0x15e>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
 80007aa:	2a00      	cmp	r2, #0
 80007ac:	d031      	beq.n	8000812 <vCoRoutineSchedule+0x18e>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
 80007ae:	1e8a      	subs	r2, r1, #2

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 80007b0:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80007b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80007b8:	b99b      	cbnz	r3, 80007e2 <vCoRoutineSchedule+0x15e>
 80007ba:	602a      	str	r2, [r5, #0]
 80007bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 80007c0:	4c1a      	ldr	r4, [pc, #104]	; (800082c <vCoRoutineSchedule+0x1a8>)
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
 80007c2:	f8db 3000 	ldr.w	r3, [fp]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 80007c6:	6821      	ldr	r1, [r4, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
 80007c8:	6023      	str	r3, [r4, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 80007ca:	680b      	ldr	r3, [r1, #0]
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
 80007cc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8000838 <vCoRoutineSchedule+0x1b4>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 80007d0:	f8cb 1000 	str.w	r1, [fp]
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d19e      	bne.n	8000716 <vCoRoutineSchedule+0x92>
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
 80007d8:	4603      	mov	r3, r0
 80007da:	e78c      	b.n	80006f6 <vCoRoutineSchedule+0x72>
 80007dc:	4812      	ldr	r0, [pc, #72]	; (8000828 <vCoRoutineSchedule+0x1a4>)
 80007de:	6803      	ldr	r3, [r0, #0]
 80007e0:	e789      	b.n	80006f6 <vCoRoutineSchedule+0x72>
		if( uxTopCoRoutineReadyPriority == 0 )
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
 80007e2:	4611      	mov	r1, r2
 80007e4:	602a      	str	r2, [r5, #0]
 80007e6:	0092      	lsls	r2, r2, #2
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
 80007e8:	440a      	add	r2, r1
 80007ea:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 80007ee:	f106 0208 	add.w	r2, r6, #8
 80007f2:	6873      	ldr	r3, [r6, #4]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	6073      	str	r3, [r6, #4]
 80007f8:	4293      	cmp	r3, r2
 80007fa:	bf08      	it	eq
 80007fc:	685b      	ldreq	r3, [r3, #4]
 80007fe:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <vCoRoutineSchedule+0x1ac>)
 8000800:	68d8      	ldr	r0, [r3, #12]
 8000802:	bf08      	it	eq
 8000804:	6073      	streq	r3, [r6, #4]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
 8000806:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8000808:	6803      	ldr	r3, [r0, #0]
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
 800080a:	6010      	str	r0, [r2, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
 800080c:	4798      	blx	r3
 800080e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
 8000812:	461a      	mov	r2, r3
 8000814:	e7d1      	b.n	80007ba <vCoRoutineSchedule+0x136>
 8000816:	bf00      	nop
 8000818:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800081c:	20000088 	andcs	r0, r0, r8, lsl #1
 8000820:	20000080 	andcs	r0, r0, r0, lsl #1
 8000824:	2000007c 	andcs	r0, r0, ip, ror r0
 8000828:	2000004c 	andcs	r0, r0, ip, asr #32
 800082c:	200000b4 	strhcs	r0, [r0], -r4
 8000830:	20000064 	andcs	r0, r0, r4, rrx
 8000834:	20000050 	andcs	r0, r0, r0, asr r0
 8000838:	20000084 	andcs	r0, r0, r4, lsl #1

0800083c <xCoRoutineRemoveFromEventList>:
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
}
/*-----------------------------------------------------------*/

BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
{
 800083c:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800083e:	68c3      	ldr	r3, [r0, #12]
 8000840:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 8000842:	f104 0518 	add.w	r5, r4, #24
 8000846:	4628      	mov	r0, r5
 8000848:	f000 f9dc 	bl	8000c04 <uxListRemove>
	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
 800084c:	4629      	mov	r1, r5
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <xCoRoutineRemoveFromEventList+0x2c>)
 8000850:	f000 f9b0 	bl	8000bb4 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <xCoRoutineRemoveFromEventList+0x30>)
 8000856:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800085c:	4298      	cmp	r0, r3
 800085e:	bf34      	ite	cc
 8000860:	2000      	movcc	r0, #0
 8000862:	2001      	movcs	r0, #1
 8000864:	bd38      	pop	{r3, r4, r5, pc}
 8000866:	bf00      	nop
 8000868:	20000050 	andcs	r0, r0, r0, asr r0
 800086c:	20000064 	andcs	r0, r0, r4, rrx

08000870 <xEventGroupCreate>:
static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits );

/*-----------------------------------------------------------*/

EventGroupHandle_t xEventGroupCreate( void )
{
 8000870:	b510      	push	{r4, lr}
EventGroup_t *pxEventBits;

	pxEventBits = pvPortMalloc( sizeof( EventGroup_t ) );
 8000872:	201c      	movs	r0, #28
 8000874:	f002 fd78 	bl	8003368 <pvPortMalloc>
	if( pxEventBits != NULL )
 8000878:	4604      	mov	r4, r0
 800087a:	b120      	cbz	r0, 8000886 <xEventGroupCreate+0x16>
	{
		pxEventBits->uxEventBits = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	f840 3b04 	str.w	r3, [r0], #4
		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8000882:	f000 f987 	bl	8000b94 <vListInitialise>
	{
		traceEVENT_GROUP_CREATE_FAILED();
	}

	return ( EventGroupHandle_t ) pxEventBits;
}
 8000886:	4620      	mov	r0, r4
 8000888:	bd10      	pop	{r4, pc}
 800088a:	bf00      	nop

0800088c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800088c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000890:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8000894:	460c      	mov	r4, r1
 8000896:	4606      	mov	r6, r0
 8000898:	4617      	mov	r7, r2
 800089a:	4698      	mov	r8, r3
 800089c:	f8dd 9020 	ldr.w	r9, [sp, #32]
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80008a0:	d116      	bne.n	80008d0 <xEventGroupWaitBits+0x44>
	configASSERT( uxBitsToWaitFor != 0 );
 80008a2:	b911      	cbnz	r1, 80008aa <xEventGroupWaitBits+0x1e>
 80008a4:	f002 fc4c 	bl	8003140 <ulPortSetInterruptMask>
 80008a8:	e7fe      	b.n	80008a8 <xEventGroupWaitBits+0x1c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80008aa:	f002 f93b 	bl	8002b24 <xTaskGetSchedulerState>
 80008ae:	b910      	cbnz	r0, 80008b6 <xEventGroupWaitBits+0x2a>
 80008b0:	f1b9 0f00 	cmp.w	r9, #0
 80008b4:	d10f      	bne.n	80008d6 <xEventGroupWaitBits+0x4a>
	}
	#endif

	vTaskSuspendAll();
 80008b6:	f001 fb6d 	bl	8001f94 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80008ba:	6835      	ldr	r5, [r6, #0]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 80008bc:	f1b8 0f00 	cmp.w	r8, #0
 80008c0:	d10c      	bne.n	80008dc <xEventGroupWaitBits+0x50>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80008c2:	422c      	tst	r4, r5
 80008c4:	d00e      	beq.n	80008e4 <xEventGroupWaitBits+0x58>
			block. */
			uxReturn = uxCurrentEventBits;
			xTicksToWait = ( TickType_t ) 0;

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80008c6:	b187      	cbz	r7, 80008ea <xEventGroupWaitBits+0x5e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80008c8:	ea25 0404 	bic.w	r4, r5, r4
 80008cc:	6034      	str	r4, [r6, #0]
 80008ce:	e00c      	b.n	80008ea <xEventGroupWaitBits+0x5e>
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80008d0:	f002 fc36 	bl	8003140 <ulPortSetInterruptMask>
 80008d4:	e7fe      	b.n	80008d4 <xEventGroupWaitBits+0x48>
	configASSERT( uxBitsToWaitFor != 0 );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80008d6:	f002 fc33 	bl	8003140 <ulPortSetInterruptMask>
 80008da:	e7fe      	b.n	80008da <xEventGroupWaitBits+0x4e>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80008dc:	ea04 0305 	and.w	r3, r4, r5
 80008e0:	429c      	cmp	r4, r3
 80008e2:	d0f0      	beq.n	80008c6 <xEventGroupWaitBits+0x3a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80008e4:	f1b9 0f00 	cmp.w	r9, #0
 80008e8:	d104      	bne.n	80008f4 <xEventGroupWaitBits+0x68>
			uxReturn = 0;

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80008ea:	f001 fc1d 	bl	8002128 <xTaskResumeAll>
			uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
		}
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
	return uxReturn;
}
 80008ee:	4628      	mov	r0, r5
 80008f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80008f4:	2f00      	cmp	r7, #0
 80008f6:	bf14      	ite	ne
 80008f8:	f04f 61a0 	movne.w	r1, #83886080	; 0x5000000
 80008fc:	f04f 6180 	moveq.w	r1, #67108864	; 0x4000000
 8000900:	bf14      	ite	ne
 8000902:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000906:	2300      	moveq	r3, #0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8000908:	f1b8 0f00 	cmp.w	r8, #0
 800090c:	bf08      	it	eq
 800090e:	4619      	moveq	r1, r3
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8000910:	464a      	mov	r2, r9
 8000912:	4321      	orrs	r1, r4
 8000914:	1d30      	adds	r0, r6, #4
 8000916:	f001 ffaf 	bl	8002878 <vTaskPlaceOnUnorderedEventList>
			uxReturn = 0;

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800091a:	f001 fc05 	bl	8002128 <xTaskResumeAll>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
 800091e:	b908      	cbnz	r0, 8000924 <xEventGroupWaitBits+0x98>
		{
			portYIELD_WITHIN_API();
 8000920:	f002 fc02 	bl	8003128 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8000924:	f002 f96e 	bl	8002c04 <uxTaskResetEventItemValue>

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8000928:	0183      	lsls	r3, r0, #6
 800092a:	d502      	bpl.n	8000932 <xEventGroupWaitBits+0xa6>
		}
		else
		{
			/* The task unblocked because the bits were set.  Clear the control
			bits before returning the value. */
			uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800092c:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
 8000930:	e7dd      	b.n	80008ee <xEventGroupWaitBits+0x62>
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
		{
			taskENTER_CRITICAL();
 8000932:	f002 fc27 	bl	8003184 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8000936:	6835      	ldr	r5, [r6, #0]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 8000938:	f1b8 0f00 	cmp.w	r8, #0
 800093c:	d108      	bne.n	8000950 <xEventGroupWaitBits+0xc4>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800093e:	422c      	tst	r4, r5
 8000940:	d003      	beq.n	800094a <xEventGroupWaitBits+0xbe>

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
				{
					if( xClearOnExit != pdFALSE )
 8000942:	b117      	cbz	r7, 800094a <xEventGroupWaitBits+0xbe>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000944:	ea25 0404 	bic.w	r4, r5, r4
 8000948:	6034      	str	r4, [r6, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800094a:	f002 fc2d 	bl	80031a8 <vPortExitCritical>
 800094e:	e7ce      	b.n	80008ee <xEventGroupWaitBits+0x62>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000950:	ea04 0305 	and.w	r3, r4, r5
 8000954:	429c      	cmp	r4, r3
 8000956:	d1f8      	bne.n	800094a <xEventGroupWaitBits+0xbe>
 8000958:	e7f3      	b.n	8000942 <xEventGroupWaitBits+0xb6>
 800095a:	bf00      	nop

0800095c <xEventGroupClearBits>:
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800095c:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8000960:	b570      	push	{r4, r5, r6, lr}
 8000962:	460c      	mov	r4, r1
 8000964:	4606      	mov	r6, r0
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000966:	d002      	beq.n	800096e <xEventGroupClearBits+0x12>
 8000968:	f002 fbea 	bl	8003140 <ulPortSetInterruptMask>
 800096c:	e7fe      	b.n	800096c <xEventGroupClearBits+0x10>

	taskENTER_CRITICAL();
 800096e:	f002 fc09 	bl	8003184 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8000972:	6835      	ldr	r5, [r6, #0]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000974:	ea25 0404 	bic.w	r4, r5, r4
 8000978:	6034      	str	r4, [r6, #0]
	}
	taskEXIT_CRITICAL();
 800097a:	f002 fc15 	bl	80031a8 <vPortExitCritical>

	return uxReturn;
}
 800097e:	4628      	mov	r0, r5
 8000980:	bd70      	pop	{r4, r5, r6, pc}
 8000982:	bf00      	nop

08000984 <xEventGroupClearBitsFromISR>:
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000984:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	460e      	mov	r6, r1
 800098c:	4605      	mov	r5, r0
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800098e:	d002      	beq.n	8000996 <xEventGroupClearBitsFromISR+0x12>
 8000990:	f002 fbd6 	bl	8003140 <ulPortSetInterruptMask>
 8000994:	e7fe      	b.n	8000994 <xEventGroupClearBitsFromISR+0x10>

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000996:	f002 fbd3 	bl	8003140 <ulPortSetInterruptMask>
	{
		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800099a:	682c      	ldr	r4, [r5, #0]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800099c:	ea24 0606 	bic.w	r6, r4, r6
 80009a0:	602e      	str	r6, [r5, #0]
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80009a2:	f002 fbfd 	bl	80031a0 <vPortClearInterruptMask>

	return uxReturn;
}
 80009a6:	4620      	mov	r0, r4
 80009a8:	bd70      	pop	{r4, r5, r6, pc}
 80009aa:	bf00      	nop

080009ac <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80009ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
BaseType_t xMatchFound = pdFALSE;

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80009ae:	f011 457f 	ands.w	r5, r1, #4278190080	; 0xff000000
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80009b2:	460e      	mov	r6, r1
 80009b4:	4604      	mov	r4, r0
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
BaseType_t xMatchFound = pdFALSE;

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80009b6:	d002      	beq.n	80009be <xEventGroupSetBits+0x12>
 80009b8:	f002 fbc2 	bl	8003140 <ulPortSetInterruptMask>
 80009bc:	e7fe      	b.n	80009bc <xEventGroupSetBits+0x10>

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	vTaskSuspendAll();
 80009be:	f001 fae9 	bl	8001f94 <vTaskSuspendAll>
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80009c2:	6821      	ldr	r1, [r4, #0]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	vTaskSuspendAll();
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80009c4:	6920      	ldr	r0, [r4, #16]

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80009c6:	4331      	orrs	r1, r6
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009c8:	f104 060c 	add.w	r6, r4, #12

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80009cc:	4286      	cmp	r6, r0
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80009ce:	6021      	str	r1, [r4, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80009d0:	d10d      	bne.n	80009ee <xEventGroupSetBits+0x42>
 80009d2:	e020      	b.n	8000a16 <xEventGroupSetBits+0x6a>
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80009d4:	4219      	tst	r1, r3
 80009d6:	d007      	beq.n	80009e8 <xEventGroupSetBits+0x3c>
			}

			if( xMatchFound != pdFALSE )
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80009d8:	01d2      	lsls	r2, r2, #7
 80009da:	d500      	bpl.n	80009de <xEventGroupSetBits+0x32>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80009dc:	431d      	orrs	r5, r3
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80009de:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80009e2:	f002 f80b 	bl	80029fc <xTaskRemoveFromUnorderedEventList>
 80009e6:	6821      	ldr	r1, [r4, #0]

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80009e8:	42be      	cmp	r6, r7
 80009ea:	d00d      	beq.n	8000a08 <xEventGroupSetBits+0x5c>
 80009ec:	4638      	mov	r0, r7
		{
			pxNext = listGET_NEXT( pxListItem );
 80009ee:	e890 0084 	ldmia.w	r0, {r2, r7}

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80009f2:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
			xMatchFound = pdFALSE;

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80009f6:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80009fa:	d0eb      	beq.n	80009d4 <xEventGroupSetBits+0x28>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80009fc:	ea01 0e03 	and.w	lr, r1, r3
 8000a00:	459e      	cmp	lr, r3
 8000a02:	d0e9      	beq.n	80009d8 <xEventGroupSetBits+0x2c>

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000a04:	42be      	cmp	r6, r7
 8000a06:	d1f1      	bne.n	80009ec <xEventGroupSetBits+0x40>
 8000a08:	43ed      	mvns	r5, r5
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000a0a:	4029      	ands	r1, r5
 8000a0c:	6021      	str	r1, [r4, #0]
	}
	( void ) xTaskResumeAll();
 8000a0e:	f001 fb8b 	bl	8002128 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8000a12:	6820      	ldr	r0, [r4, #0]
 8000a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000a16:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000a1a:	e7f6      	b.n	8000a0a <xEventGroupSetBits+0x5e>

08000a1c <xEventGroupSync>:
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000a1c:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
	return ( EventGroupHandle_t ) pxEventBits;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
 8000a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a22:	4615      	mov	r5, r2
 8000a24:	4604      	mov	r4, r0
 8000a26:	460e      	mov	r6, r1
 8000a28:	461f      	mov	r7, r3
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000a2a:	d119      	bne.n	8000a60 <xEventGroupSync+0x44>
	configASSERT( uxBitsToWaitFor != 0 );
 8000a2c:	b912      	cbnz	r2, 8000a34 <xEventGroupSync+0x18>
 8000a2e:	f002 fb87 	bl	8003140 <ulPortSetInterruptMask>
 8000a32:	e7fe      	b.n	8000a32 <xEventGroupSync+0x16>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000a34:	f002 f876 	bl	8002b24 <xTaskGetSchedulerState>
 8000a38:	b9a8      	cbnz	r0, 8000a66 <xEventGroupSync+0x4a>
 8000a3a:	2f00      	cmp	r7, #0
 8000a3c:	d137      	bne.n	8000aae <xEventGroupSync+0x92>
	}
	#endif

	vTaskSuspendAll();
 8000a3e:	f001 faa9 	bl	8001f94 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
 8000a42:	6823      	ldr	r3, [r4, #0]

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8000a44:	4631      	mov	r1, r6
 8000a46:	4620      	mov	r0, r4

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000a48:	431e      	orrs	r6, r3

	vTaskSuspendAll();
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8000a4a:	f7ff ffaf 	bl	80009ac <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000a4e:	ea05 0106 	and.w	r1, r5, r6
 8000a52:	42a9      	cmp	r1, r5
 8000a54:	d027      	beq.n	8000aa6 <xEventGroupSync+0x8a>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8000a56:	6826      	ldr	r6, [r4, #0]
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8000a58:	f001 fb66 	bl	8002128 <xTaskResumeAll>
		}
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
	return uxReturn;
}
 8000a5c:	4630      	mov	r0, r6
 8000a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000a60:	f002 fb6e 	bl	8003140 <ulPortSetInterruptMask>
 8000a64:	e7fe      	b.n	8000a64 <xEventGroupSync+0x48>
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
 8000a66:	f001 fa95 	bl	8001f94 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
 8000a6a:	6823      	ldr	r3, [r4, #0]

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8000a6c:	4631      	mov	r1, r6
 8000a6e:	4620      	mov	r0, r4

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000a70:	431e      	orrs	r6, r3

	vTaskSuspendAll();
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8000a72:	f7ff ff9b 	bl	80009ac <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000a76:	ea05 0106 	and.w	r1, r5, r6
 8000a7a:	42a9      	cmp	r1, r5
 8000a7c:	d013      	beq.n	8000aa6 <xEventGroupSync+0x8a>

			xTicksToWait = 0;
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
 8000a7e:	2f00      	cmp	r7, #0
 8000a80:	d0e9      	beq.n	8000a56 <xEventGroupSync+0x3a>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 8000a82:	463a      	mov	r2, r7
 8000a84:	1d20      	adds	r0, r4, #4
 8000a86:	f045 61a0 	orr.w	r1, r5, #83886080	; 0x5000000
 8000a8a:	f001 fef5 	bl	8002878 <vTaskPlaceOnUnorderedEventList>
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8000a8e:	f001 fb4b 	bl	8002128 <xTaskResumeAll>

	if( xTicksToWait != ( TickType_t ) 0 )
	{
		if( xAlreadyYielded == pdFALSE )
 8000a92:	b908      	cbnz	r0, 8000a98 <xEventGroupSync+0x7c>
		{
			portYIELD_WITHIN_API();
 8000a94:	f002 fb48 	bl	8003128 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8000a98:	f002 f8b4 	bl	8002c04 <uxTaskResetEventItemValue>

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8000a9c:	0183      	lsls	r3, r0, #6
 8000a9e:	d509      	bpl.n	8000ab4 <xEventGroupSync+0x98>
		}
		else
		{
			/* The task unblocked because the bits were set.  Clear the control
			bits before returning the value. */
			uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000aa0:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
 8000aa4:	e7da      	b.n	8000a5c <xEventGroupSync+0x40>
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= uxBitsToWaitFor;
 8000aa6:	6823      	ldr	r3, [r4, #0]
 8000aa8:	400b      	ands	r3, r1
 8000aaa:	6023      	str	r3, [r4, #0]
 8000aac:	e7d4      	b.n	8000a58 <xEventGroupSync+0x3c>

	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
	configASSERT( uxBitsToWaitFor != 0 );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000aae:	f002 fb47 	bl	8003140 <ulPortSetInterruptMask>
 8000ab2:	e7fe      	b.n	8000ab2 <xEventGroupSync+0x96>
		uxReturn = uxTaskResetEventItemValue();

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
 8000ab4:	f002 fb66 	bl	8003184 <vPortEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
 8000ab8:	6826      	ldr	r6, [r4, #0]

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it may be required to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000aba:	ea05 0306 	and.w	r3, r5, r6
 8000abe:	42ab      	cmp	r3, r5
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000ac0:	bf04      	itt	eq
 8000ac2:	ea26 0505 	biceq.w	r5, r6, r5
 8000ac6:	6025      	streq	r5, [r4, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8000ac8:	f002 fb6e 	bl	80031a8 <vPortExitCritical>
 8000acc:	e7c6      	b.n	8000a5c <xEventGroupSync+0x40>
 8000ace:	bf00      	nop

08000ad0 <vEventGroupDelete>:
	return pxEventBits->uxEventBits;
}
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 8000ad0:	b538      	push	{r3, r4, r5, lr}
 8000ad2:	4604      	mov	r4, r0
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );

	vTaskSuspendAll();
 8000ad4:	f001 fa5e 	bl	8001f94 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8000ad8:	6863      	ldr	r3, [r4, #4]
 8000ada:	b17b      	cbz	r3, 8000afc <vEventGroupDelete+0x2c>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8000adc:	6920      	ldr	r0, [r4, #16]
 8000ade:	f104 050c 	add.w	r5, r4, #12
 8000ae2:	42a8      	cmp	r0, r5
 8000ae4:	d103      	bne.n	8000aee <vEventGroupDelete+0x1e>
 8000ae6:	e010      	b.n	8000b0a <vEventGroupDelete+0x3a>
 8000ae8:	6920      	ldr	r0, [r4, #16]
 8000aea:	42a8      	cmp	r0, r5
 8000aec:	d00d      	beq.n	8000b0a <vEventGroupDelete+0x3a>
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8000aee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000af2:	f001 ff83 	bl	80029fc <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8000af6:	6863      	ldr	r3, [r4, #4]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d1f5      	bne.n	8000ae8 <vEventGroupDelete+0x18>
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
		}

		vPortFree( pxEventBits );
 8000afc:	4620      	mov	r0, r4
 8000afe:	f002 fc61 	bl	80033c4 <vPortFree>
	}
	( void ) xTaskResumeAll();
}
 8000b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
		}

		vPortFree( pxEventBits );
	}
	( void ) xTaskResumeAll();
 8000b06:	f001 bb0f 	b.w	8002128 <xTaskResumeAll>

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8000b0a:	f002 fb19 	bl	8003140 <ulPortSetInterruptMask>
 8000b0e:	e7fe      	b.n	8000b0e <vEventGroupDelete+0x3e>

08000b10 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8000b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
BaseType_t xMatchFound = pdFALSE;

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000b12:	f011 457f 	ands.w	r5, r1, #4278190080	; 0xff000000
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8000b16:	460e      	mov	r6, r1
 8000b18:	4604      	mov	r4, r0
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
BaseType_t xMatchFound = pdFALSE;

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000b1a:	d002      	beq.n	8000b22 <vEventGroupSetBitsCallback+0x12>
 8000b1c:	f002 fb10 	bl	8003140 <ulPortSetInterruptMask>
 8000b20:	e7fe      	b.n	8000b20 <vEventGroupSetBitsCallback+0x10>

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	vTaskSuspendAll();
 8000b22:	f001 fa37 	bl	8001f94 <vTaskSuspendAll>
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8000b26:	6821      	ldr	r1, [r4, #0]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	vTaskSuspendAll();
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8000b28:	6920      	ldr	r0, [r4, #16]

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8000b2a:	4331      	orrs	r1, r6
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b2c:	f104 060c 	add.w	r6, r4, #12

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000b30:	4286      	cmp	r6, r0
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8000b32:	6021      	str	r1, [r4, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000b34:	d10d      	bne.n	8000b52 <vEventGroupSetBitsCallback+0x42>
 8000b36:	e020      	b.n	8000b7a <vEventGroupSetBitsCallback+0x6a>
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8000b38:	4219      	tst	r1, r3
 8000b3a:	d007      	beq.n	8000b4c <vEventGroupSetBitsCallback+0x3c>
			}

			if( xMatchFound != pdFALSE )
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8000b3c:	01d2      	lsls	r2, r2, #7
 8000b3e:	d500      	bpl.n	8000b42 <vEventGroupSetBitsCallback+0x32>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8000b40:	431d      	orrs	r5, r3
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8000b42:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8000b46:	f001 ff59 	bl	80029fc <xTaskRemoveFromUnorderedEventList>
 8000b4a:	6821      	ldr	r1, [r4, #0]

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000b4c:	42be      	cmp	r6, r7
 8000b4e:	d00d      	beq.n	8000b6c <vEventGroupSetBitsCallback+0x5c>
 8000b50:	4638      	mov	r0, r7
		{
			pxNext = listGET_NEXT( pxListItem );
 8000b52:	e890 0084 	ldmia.w	r0, {r2, r7}

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8000b56:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
			xMatchFound = pdFALSE;

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000b5a:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8000b5e:	d0eb      	beq.n	8000b38 <vEventGroupSetBitsCallback+0x28>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8000b60:	ea01 0c03 	and.w	ip, r1, r3
 8000b64:	4563      	cmp	r3, ip
 8000b66:	d0e9      	beq.n	8000b3c <vEventGroupSetBitsCallback+0x2c>

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000b68:	42be      	cmp	r6, r7
 8000b6a:	d1f1      	bne.n	8000b50 <vEventGroupSetBitsCallback+0x40>
 8000b6c:	43ed      	mvns	r5, r5
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000b6e:	4029      	ands	r1, r5
 8000b70:	6021      	str	r1, [r4, #0]
/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
}
 8000b72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
	}
	( void ) xTaskResumeAll();
 8000b76:	f001 bad7 	b.w	8002128 <xTaskResumeAll>

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8000b7a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000b7e:	4029      	ands	r1, r5
 8000b80:	6021      	str	r1, [r4, #0]
/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
}
 8000b82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
	}
	( void ) xTaskResumeAll();
 8000b86:	f001 bacf 	b.w	8002128 <xTaskResumeAll>
 8000b8a:	bf00      	nop

08000b8c <uxEventGroupGetNumber>:
	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
	{
	UBaseType_t xReturn;
	EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;

		if( xEventGroup == NULL )
 8000b8c:	b100      	cbz	r0, 8000b90 <uxEventGroupGetNumber+0x4>
		{
			xReturn = 0;
		}
		else
		{
			xReturn = pxEventBits->uxEventGroupNumber;
 8000b8e:	6980      	ldr	r0, [r0, #24]
		}

		return xReturn;
	}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b94:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000b98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000b9c:	2200      	movs	r2, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000b9e:	6081      	str	r1, [r0, #8]
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ba0:	e880 000c 	stmia.w	r0, {r2, r3}
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ba4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ba6:	6103      	str	r3, [r0, #16]
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	6103      	str	r3, [r0, #16]
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000bb4:	6843      	ldr	r3, [r0, #4]
	pxItem->pvContainer = NULL;
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000bb6:	b430      	push	{r4, r5}

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000bb8:	689a      	ldr	r2, [r3, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000bba:	6805      	ldr	r5, [r0, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000bbc:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000bbe:	689c      	ldr	r4, [r3, #8]
ListItem_t * const pxIndex = pxList->pxIndex;

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000bc0:	604b      	str	r3, [r1, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000bc2:	1c6a      	adds	r2, r5, #1
	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000bc4:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000bc6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 8000bc8:	bc30      	pop	{r4, r5}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000bca:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000bcc:	6002      	str	r2, [r0, #0]
}
 8000bce:	4770      	bx	lr

08000bd0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000bd0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000bd2:	680d      	ldr	r5, [r1, #0]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000bd4:	1c6b      	adds	r3, r5, #1
 8000bd6:	d011      	beq.n	8000bfc <vListInsert+0x2c>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bd8:	f100 0208 	add.w	r2, r0, #8
 8000bdc:	e000      	b.n	8000be0 <vListInsert+0x10>
 8000bde:	461a      	mov	r2, r3
 8000be0:	6853      	ldr	r3, [r2, #4]
 8000be2:	681c      	ldr	r4, [r3, #0]
 8000be4:	42a5      	cmp	r5, r4
 8000be6:	d2fa      	bcs.n	8000bde <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000be8:	6804      	ldr	r4, [r0, #0]
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000bea:	604b      	str	r3, [r1, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000bec:	3401      	adds	r4, #1
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000bee:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000bf0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000bf2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000bf4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000bf6:	6004      	str	r4, [r0, #0]
}
 8000bf8:	bc30      	pop	{r4, r5}
 8000bfa:	4770      	bx	lr
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000bfc:	6902      	ldr	r2, [r0, #16]
 8000bfe:	6853      	ldr	r3, [r2, #4]
 8000c00:	e7f2      	b.n	8000be8 <vListInsert+0x18>
 8000c02:	bf00      	nop

08000c04 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000c04:	6842      	ldr	r2, [r0, #4]
 8000c06:	6881      	ldr	r1, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000c08:	6903      	ldr	r3, [r0, #16]
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000c0a:	b410      	push	{r4}
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000c0c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000c0e:	6881      	ldr	r1, [r0, #8]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000c10:	685c      	ldr	r4, [r3, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000c12:	604a      	str	r2, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8000c14:	681a      	ldr	r2, [r3, #0]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000c16:	4284      	cmp	r4, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000c18:	bf08      	it	eq
 8000c1a:	6059      	streq	r1, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8000c1c:	3a01      	subs	r2, #1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000c1e:	2100      	movs	r1, #0
 8000c20:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8000c22:	f85d 4b04 	ldr.w	r4, [sp], #4
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8000c26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8000c28:	4610      	mov	r0, r2
 8000c2a:	4770      	bx	lr

08000c2c <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000c2c:	b430      	push	{r4, r5}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8000c2e:	6805      	ldr	r5, [r0, #0]
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000c30:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8000c32:	b165      	cbz	r5, 8000c4e <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000c34:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000c36:	68c4      	ldr	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000c38:	6840      	ldr	r0, [r0, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000c3a:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000c3c:	4284      	cmp	r4, r0

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000c3e:	60dc      	str	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8000c40:	bf28      	it	cs
 8000c42:	60dd      	strcs	r5, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8000c44:	4608      	mov	r0, r1
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000c46:	bc30      	pop	{r4, r5}
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8000c48:	68d9      	ldr	r1, [r3, #12]
 8000c4a:	f7ff bab9 	b.w	80001c0 <memcpy>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000c4e:	bc30      	pop	{r4, r5}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000c54:	b538      	push	{r3, r4, r5, lr}
 8000c56:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000c58:	f002 fa94 	bl	8003184 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8000c5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	dd14      	ble.n	8000c8c <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c64:	b193      	cbz	r3, 8000c8c <prvUnlockQueue+0x38>
 8000c66:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8000c6a:	e007      	b.n	8000c7c <prvUnlockQueue+0x28>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8000c6c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8000c72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	dd09      	ble.n	8000c8c <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c7a:	b13b      	cbz	r3, 8000c8c <prvUnlockQueue+0x38>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c7c:	4628      	mov	r0, r5
 8000c7e:	f001 fe7f 	bl	8002980 <xTaskRemoveFromEventList>
 8000c82:	2800      	cmp	r0, #0
 8000c84:	d0f2      	beq.n	8000c6c <prvUnlockQueue+0x18>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8000c86:	f001 ff39 	bl	8002afc <vTaskMissedYield>
 8000c8a:	e7ef      	b.n	8000c6c <prvUnlockQueue+0x18>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c90:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8000c92:	f002 fa89 	bl	80031a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8000c96:	f002 fa75 	bl	8003184 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8000c9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	dd14      	ble.n	8000cca <prvUnlockQueue+0x76>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ca0:	6923      	ldr	r3, [r4, #16]
 8000ca2:	b193      	cbz	r3, 8000cca <prvUnlockQueue+0x76>
 8000ca4:	f104 0510 	add.w	r5, r4, #16
 8000ca8:	e007      	b.n	8000cba <prvUnlockQueue+0x66>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 8000caa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000cac:	3b01      	subs	r3, #1
 8000cae:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8000cb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	dd09      	ble.n	8000cca <prvUnlockQueue+0x76>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000cb6:	6923      	ldr	r3, [r4, #16]
 8000cb8:	b13b      	cbz	r3, 8000cca <prvUnlockQueue+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000cba:	4628      	mov	r0, r5
 8000cbc:	f001 fe60 	bl	8002980 <xTaskRemoveFromEventList>
 8000cc0:	2800      	cmp	r0, #0
 8000cc2:	d0f2      	beq.n	8000caa <prvUnlockQueue+0x56>
				{
					vTaskMissedYield();
 8000cc4:	f001 ff1a 	bl	8002afc <vTaskMissedYield>
 8000cc8:	e7ef      	b.n	8000caa <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cce:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 8000cd4:	f002 ba68 	b.w	80031a8 <vPortExitCritical>

08000cd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000cd8:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8000cda:	4604      	mov	r4, r0
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000cdc:	460d      	mov	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8000cde:	b388      	cbz	r0, 8000d44 <xQueueGenericReset+0x6c>

	taskENTER_CRITICAL();
 8000ce0:	f002 fa50 	bl	8003184 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000ce4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000ce6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000ce8:	6823      	ldr	r3, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000cea:	60a3      	str	r3, [r4, #8]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000cec:	fb02 f200 	mul.w	r2, r2, r0
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000cf0:	1a10      	subs	r0, r2, r0
 8000cf2:	4418      	add	r0, r3
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000cf4:	2100      	movs	r1, #0

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000cf6:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000cfc:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000cfe:	60e0      	str	r0, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8000d00:	6462      	str	r2, [r4, #68]	; 0x44

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000d02:	6063      	str	r3, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
		pxQueue->xTxLock = queueUNLOCKED;
 8000d04:	64a2      	str	r2, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8000d06:	b98d      	cbnz	r5, 8000d2c <xQueueGenericReset+0x54>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d08:	6923      	ldr	r3, [r4, #16]
 8000d0a:	b91b      	cbnz	r3, 8000d14 <xQueueGenericReset+0x3c>
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
 8000d0c:	f002 fa4c 	bl	80031a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8000d10:	2001      	movs	r0, #1
 8000d12:	bd38      	pop	{r3, r4, r5, pc}
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8000d14:	f104 0010 	add.w	r0, r4, #16
 8000d18:	f001 fe32 	bl	8002980 <xTaskRemoveFromEventList>
 8000d1c:	2801      	cmp	r0, #1
 8000d1e:	d1f5      	bne.n	8000d0c <xQueueGenericReset+0x34>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000d20:	f002 fa02 	bl	8003128 <vPortYield>
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
 8000d24:	f002 fa40 	bl	80031a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8000d28:	2001      	movs	r0, #1
 8000d2a:	bd38      	pop	{r3, r4, r5, pc}
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000d2c:	f104 0010 	add.w	r0, r4, #16
 8000d30:	f7ff ff30 	bl	8000b94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000d34:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000d38:	f7ff ff2c 	bl	8000b94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000d3c:	f002 fa34 	bl	80031a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8000d40:	2001      	movs	r0, #1
 8000d42:	bd38      	pop	{r3, r4, r5, pc}

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8000d44:	f002 f9fc 	bl	8003140 <ulPortSetInterruptMask>
 8000d48:	e7fe      	b.n	8000d48 <xQueueGenericReset+0x70>
 8000d4a:	bf00      	nop

08000d4c <xQueueGenericCreate>:
	return pdPASS;
}
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8000d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
 8000d4e:	4605      	mov	r5, r0
	return pdPASS;
}
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8000d50:	460e      	mov	r6, r1
 8000d52:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
 8000d54:	2800      	cmp	r0, #0
 8000d56:	d031      	beq.n	8000dbc <xQueueGenericCreate+0x70>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 8000d58:	2054      	movs	r0, #84	; 0x54
 8000d5a:	f002 fb05 	bl	8003368 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8000d5e:	4604      	mov	r4, r0
 8000d60:	b360      	cbz	r0, 8000dbc <xQueueGenericCreate+0x70>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d62:	fb06 f005 	mul.w	r0, r6, r5

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
 8000d66:	3001      	adds	r0, #1
 8000d68:	f002 fafe 	bl	8003368 <pvPortMalloc>
 8000d6c:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
 8000d6e:	b310      	cbz	r0, 8000db6 <xQueueGenericCreate+0x6a>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8000d70:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8000d72:	6426      	str	r6, [r4, #64]	; 0x40
{
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8000d74:	f002 fa06 	bl	8003184 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000d78:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000d7a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000d7c:	6823      	ldr	r3, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000d7e:	60a3      	str	r3, [r4, #8]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000d80:	fb01 f100 	mul.w	r1, r1, r0
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000d84:	1a08      	subs	r0, r1, r0
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000d86:	2200      	movs	r2, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000d88:	4418      	add	r0, r3

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000d8a:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000d90:	63a2      	str	r2, [r4, #56]	; 0x38

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000d92:	6063      	str	r3, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8000d94:	6461      	str	r1, [r4, #68]	; 0x44
	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000d96:	60e0      	str	r0, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
		pxQueue->xTxLock = queueUNLOCKED;
 8000d98:	64a1      	str	r1, [r4, #72]	; 0x48
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000d9a:	f104 0010 	add.w	r0, r4, #16
 8000d9e:	f7ff fef9 	bl	8000b94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000da2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000da6:	f7ff fef5 	bl	8000b94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000daa:	f002 f9fd 	bl	80031a8 <vPortExitCritical>
				pxNewQueue->uxItemSize = uxItemSize;
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 8000dae:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
	}

	configASSERT( xReturn );

	return xReturn;
}
 8000db2:	4620      	mov	r0, r4
 8000db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8000db6:	4620      	mov	r0, r4
 8000db8:	f002 fb04 	bl	80033c4 <vPortFree>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8000dbc:	f002 f9c0 	bl	8003140 <ulPortSetInterruptMask>
 8000dc0:	e7fe      	b.n	8000dc0 <xQueueGenericCreate+0x74>
 8000dc2:	bf00      	nop

08000dc4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8000dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8000dc6:	4605      	mov	r5, r0
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8000dc8:	460e      	mov	r6, r1
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	d033      	beq.n	8000e36 <xQueueCreateCountingSemaphore+0x72>
		configASSERT( uxInitialCount <= uxMaxCount );
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d202      	bcs.n	8000dd8 <xQueueCreateCountingSemaphore+0x14>
 8000dd2:	f002 f9b5 	bl	8003140 <ulPortSetInterruptMask>
 8000dd6:	e7fe      	b.n	8000dd6 <xQueueCreateCountingSemaphore+0x12>
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 8000dd8:	2054      	movs	r0, #84	; 0x54
 8000dda:	f002 fac5 	bl	8003368 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8000dde:	4604      	mov	r4, r0
 8000de0:	b378      	cbz	r0, 8000e42 <xQueueCreateCountingSemaphore+0x7e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
 8000de2:	2001      	movs	r0, #1
 8000de4:	f002 fac0 	bl	8003368 <pvPortMalloc>
 8000de8:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
 8000dea:	b338      	cbz	r0, 8000e3c <xQueueCreateCountingSemaphore+0x78>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
				pxNewQueue->uxItemSize = uxItemSize;
 8000dec:	2700      	movs	r7, #0
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8000dee:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8000df0:	6427      	str	r7, [r4, #64]	; 0x40
{
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8000df2:	f002 f9c7 	bl	8003184 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000df6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000df8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000dfa:	6823      	ldr	r3, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000dfc:	60a3      	str	r3, [r4, #8]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000dfe:	fb02 f201 	mul.w	r2, r2, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000e02:	1a51      	subs	r1, r2, r1
 8000e04:	1858      	adds	r0, r3, r1

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000e06:	1899      	adds	r1, r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000e0c:	63a7      	str	r7, [r4, #56]	; 0x38

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000e0e:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8000e10:	6462      	str	r2, [r4, #68]	; 0x44
	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000e12:	60e0      	str	r0, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
		pxQueue->xTxLock = queueUNLOCKED;
 8000e14:	64a2      	str	r2, [r4, #72]	; 0x48
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000e16:	f104 0010 	add.w	r0, r4, #16
 8000e1a:	f7ff febb 	bl	8000b94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000e1e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8000e22:	f7ff feb7 	bl	8000b94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000e26:	f002 f9bf 	bl	80031a8 <vPortExitCritical>
				pxNewQueue->uxItemSize = uxItemSize;
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );

		if( xHandle != NULL )
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8000e30:	63a6      	str	r6, [r4, #56]	; 0x38
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( xHandle );
		return xHandle;
	}
 8000e32:	4620      	mov	r0, r4
 8000e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8000e36:	f002 f983 	bl	8003140 <ulPortSetInterruptMask>
 8000e3a:	e7fe      	b.n	8000e3a <xQueueCreateCountingSemaphore+0x76>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f002 fac1 	bl	80033c4 <vPortFree>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8000e42:	f002 f97d 	bl	8003140 <ulPortSetInterruptMask>
 8000e46:	e7fe      	b.n	8000e46 <xQueueCreateCountingSemaphore+0x82>

08000e48 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e4c:	b085      	sub	sp, #20
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8000e4e:	4604      	mov	r4, r0

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000e50:	460e      	mov	r6, r1
 8000e52:	9201      	str	r2, [sp, #4]
 8000e54:	461d      	mov	r5, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8000e56:	2800      	cmp	r0, #0
 8000e58:	f000 80f2 	beq.w	8001040 <xQueueGenericSend+0x1f8>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000e5c:	2900      	cmp	r1, #0
 8000e5e:	f000 812f 	beq.w	80010c0 <xQueueGenericSend+0x278>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000e62:	2d02      	cmp	r5, #2
 8000e64:	d055      	beq.n	8000f12 <xQueueGenericSend+0xca>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000e66:	f001 fe5d 	bl	8002b24 <xTaskGetSchedulerState>
 8000e6a:	b918      	cbnz	r0, 8000e74 <xQueueGenericSend+0x2c>
 8000e6c:	9b01      	ldr	r3, [sp, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f040 8123 	bne.w	80010ba <xQueueGenericSend+0x272>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000e74:	f002 f986 	bl	8003184 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000e78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000e7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000e7c:	f04f 0800 	mov.w	r8, #0
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000e80:	429a      	cmp	r2, r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8000e82:	4647      	mov	r7, r8
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000e84:	d379      	bcc.n	8000f7a <xQueueGenericSend+0x132>
 8000e86:	2d02      	cmp	r5, #2
 8000e88:	f000 80ec 	beq.w	8001064 <xQueueGenericSend+0x21c>
				function. */
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e8c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8000e90:	f1b9 0f00 	cmp.w	r9, #0
 8000e94:	f000 80e0 	beq.w	8001058 <xQueueGenericSend+0x210>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e98:	f1b8 0f00 	cmp.w	r8, #0
 8000e9c:	f000 80cc 	beq.w	8001038 <xQueueGenericSend+0x1f0>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000ea0:	f002 f982 	bl	80031a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000ea4:	f001 f876 	bl	8001f94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000ea8:	f002 f96c 	bl	8003184 <vPortEnterCritical>
 8000eac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000eae:	3301      	adds	r3, #1
 8000eb0:	bf08      	it	eq
 8000eb2:	6467      	streq	r7, [r4, #68]	; 0x44
 8000eb4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	bf08      	it	eq
 8000eba:	64a7      	streq	r7, [r4, #72]	; 0x48
 8000ebc:	f002 f974 	bl	80031a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ec0:	a802      	add	r0, sp, #8
 8000ec2:	a901      	add	r1, sp, #4
 8000ec4:	f001 fde2 	bl	8002a8c <xTaskCheckForTimeOut>
 8000ec8:	2800      	cmp	r0, #0
 8000eca:	f040 80bc 	bne.w	8001046 <xQueueGenericSend+0x1fe>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000ece:	f002 f959 	bl	8003184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000ed2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000ed4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d063      	beq.n	8000fa2 <xQueueGenericSend+0x15a>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8000eda:	f002 f965 	bl	80031a8 <vPortExitCritical>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000ede:	f002 f951 	bl	8003184 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8000ee2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	dd1a      	ble.n	8000f1e <xQueueGenericSend+0xd6>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000eea:	b1c3      	cbz	r3, 8000f1e <xQueueGenericSend+0xd6>
 8000eec:	f104 0824 	add.w	r8, r4, #36	; 0x24
 8000ef0:	e007      	b.n	8000f02 <xQueueGenericSend+0xba>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8000ef2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8000ef8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	dd0f      	ble.n	8000f1e <xQueueGenericSend+0xd6>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000efe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f00:	b16a      	cbz	r2, 8000f1e <xQueueGenericSend+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f02:	4640      	mov	r0, r8
 8000f04:	f001 fd3c 	bl	8002980 <xTaskRemoveFromEventList>
 8000f08:	2800      	cmp	r0, #0
 8000f0a:	d0f2      	beq.n	8000ef2 <xQueueGenericSend+0xaa>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8000f0c:	f001 fdf6 	bl	8002afc <vTaskMissedYield>
 8000f10:	e7ef      	b.n	8000ef2 <xQueueGenericSend+0xaa>
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000f12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d0a6      	beq.n	8000e66 <xQueueGenericSend+0x1e>
 8000f18:	f002 f912 	bl	8003140 <ulPortSetInterruptMask>
 8000f1c:	e7fe      	b.n	8000f1c <xQueueGenericSend+0xd4>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f22:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8000f24:	f002 f940 	bl	80031a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8000f28:	f002 f92c 	bl	8003184 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8000f2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	dd14      	ble.n	8000f5c <xQueueGenericSend+0x114>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f32:	6923      	ldr	r3, [r4, #16]
 8000f34:	b193      	cbz	r3, 8000f5c <xQueueGenericSend+0x114>
 8000f36:	f104 0810 	add.w	r8, r4, #16
 8000f3a:	e007      	b.n	8000f4c <xQueueGenericSend+0x104>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 8000f3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8000f42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	dd09      	ble.n	8000f5c <xQueueGenericSend+0x114>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f48:	6922      	ldr	r2, [r4, #16]
 8000f4a:	b13a      	cbz	r2, 8000f5c <xQueueGenericSend+0x114>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f4c:	4640      	mov	r0, r8
 8000f4e:	f001 fd17 	bl	8002980 <xTaskRemoveFromEventList>
 8000f52:	2800      	cmp	r0, #0
 8000f54:	d0f2      	beq.n	8000f3c <xQueueGenericSend+0xf4>
				{
					vTaskMissedYield();
 8000f56:	f001 fdd1 	bl	8002afc <vTaskMissedYield>
 8000f5a:	e7ef      	b.n	8000f3c <xQueueGenericSend+0xf4>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f60:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8000f62:	f002 f921 	bl	80031a8 <vPortExitCritical>
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
				( void ) xTaskResumeAll();
 8000f66:	f001 f8df 	bl	8002128 <xTaskResumeAll>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000f6a:	f002 f90b 	bl	8003184 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000f70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000f72:	429a      	cmp	r2, r3
 8000f74:	f04f 0801 	mov.w	r8, #1
 8000f78:	d285      	bcs.n	8000e86 <xQueueGenericSend+0x3e>
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000f7a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f7c:	2a00      	cmp	r2, #0
 8000f7e:	d073      	beq.n	8001068 <xQueueGenericSend+0x220>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000f80:	2d00      	cmp	r5, #0
 8000f82:	f040 8082 	bne.w	800108a <xQueueGenericSend+0x242>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8000f86:	4631      	mov	r1, r6
 8000f88:	68a0      	ldr	r0, [r4, #8]
 8000f8a:	f7ff f919 	bl	80001c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000f8e:	68a1      	ldr	r1, [r4, #8]
 8000f90:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f92:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000f94:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f96:	4293      	cmp	r3, r2
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000f98:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f9a:	d36b      	bcc.n	8001074 <xQueueGenericSend+0x22c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f9c:	6823      	ldr	r3, [r4, #0]
 8000f9e:	60a3      	str	r3, [r4, #8]
 8000fa0:	e068      	b.n	8001074 <xQueueGenericSend+0x22c>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000fa2:	f104 0810 	add.w	r8, r4, #16
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8000fa6:	f002 f8ff 	bl	80031a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000faa:	4640      	mov	r0, r8
 8000fac:	9901      	ldr	r1, [sp, #4]
 8000fae:	f001 fc21 	bl	80027f4 <vTaskPlaceOnEventList>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000fb2:	f002 f8e7 	bl	8003184 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8000fb6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	dd14      	ble.n	8000fe6 <xQueueGenericSend+0x19e>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fbe:	b193      	cbz	r3, 8000fe6 <xQueueGenericSend+0x19e>
 8000fc0:	f104 0924 	add.w	r9, r4, #36	; 0x24
 8000fc4:	e007      	b.n	8000fd6 <xQueueGenericSend+0x18e>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8000fc6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8000fcc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	dd09      	ble.n	8000fe6 <xQueueGenericSend+0x19e>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fd2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fd4:	b13a      	cbz	r2, 8000fe6 <xQueueGenericSend+0x19e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000fd6:	4648      	mov	r0, r9
 8000fd8:	f001 fcd2 	bl	8002980 <xTaskRemoveFromEventList>
 8000fdc:	2800      	cmp	r0, #0
 8000fde:	d0f2      	beq.n	8000fc6 <xQueueGenericSend+0x17e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8000fe0:	f001 fd8c 	bl	8002afc <vTaskMissedYield>
 8000fe4:	e7ef      	b.n	8000fc6 <xQueueGenericSend+0x17e>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fea:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8000fec:	f002 f8dc 	bl	80031a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8000ff0:	f002 f8c8 	bl	8003184 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8000ff4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	dd12      	ble.n	8001020 <xQueueGenericSend+0x1d8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ffa:	6923      	ldr	r3, [r4, #16]
 8000ffc:	b943      	cbnz	r3, 8001010 <xQueueGenericSend+0x1c8>
 8000ffe:	e00f      	b.n	8001020 <xQueueGenericSend+0x1d8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 8001000:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001002:	3b01      	subs	r3, #1
 8001004:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001006:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001008:	2b00      	cmp	r3, #0
 800100a:	dd09      	ble.n	8001020 <xQueueGenericSend+0x1d8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800100c:	6922      	ldr	r2, [r4, #16]
 800100e:	b13a      	cbz	r2, 8001020 <xQueueGenericSend+0x1d8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001010:	4640      	mov	r0, r8
 8001012:	f001 fcb5 	bl	8002980 <xTaskRemoveFromEventList>
 8001016:	2800      	cmp	r0, #0
 8001018:	d0f2      	beq.n	8001000 <xQueueGenericSend+0x1b8>
				{
					vTaskMissedYield();
 800101a:	f001 fd6f 	bl	8002afc <vTaskMissedYield>
 800101e:	e7ef      	b.n	8001000 <xQueueGenericSend+0x1b8>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8001020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001024:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001026:	f002 f8bf 	bl	80031a8 <vPortExitCritical>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800102a:	f001 f87d 	bl	8002128 <xTaskResumeAll>
 800102e:	2800      	cmp	r0, #0
 8001030:	d19b      	bne.n	8000f6a <xQueueGenericSend+0x122>
				{
					portYIELD_WITHIN_API();
 8001032:	f002 f879 	bl	8003128 <vPortYield>
 8001036:	e798      	b.n	8000f6a <xQueueGenericSend+0x122>
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001038:	a802      	add	r0, sp, #8
 800103a:	f001 fd17 	bl	8002a6c <vTaskSetTimeOutState>
 800103e:	e72f      	b.n	8000ea0 <xQueueGenericSend+0x58>
{
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001040:	f002 f87e 	bl	8003140 <ulPortSetInterruptMask>
 8001044:	e7fe      	b.n	8001044 <xQueueGenericSend+0x1fc>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001046:	4620      	mov	r0, r4
 8001048:	f7ff fe04 	bl	8000c54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800104c:	f001 f86c 	bl	8002128 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001050:	2000      	movs	r0, #0
		}
	}
}
 8001052:	b005      	add	sp, #20
 8001054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			{
				if( xTicksToWait == ( TickType_t ) 0 )
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001058:	f002 f8a6 	bl	80031a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800105c:	4648      	mov	r0, r9
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
 800105e:	b005      	add	sp, #20
 8001060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001064:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001066:	b982      	cbnz	r2, 800108a <xQueueGenericSend+0x242>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001068:	6825      	ldr	r5, [r4, #0]
 800106a:	b91d      	cbnz	r5, 8001074 <xQueueGenericSend+0x22c>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800106c:	6860      	ldr	r0, [r4, #4]
 800106e:	f001 fda1 	bl	8002bb4 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8001072:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8001074:	6ba2      	ldr	r2, [r4, #56]	; 0x38
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001076:	6a63      	ldr	r3, [r4, #36]	; 0x24
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8001078:	3201      	adds	r2, #1
 800107a:	63a2      	str	r2, [r4, #56]	; 0x38
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800107c:	bb3b      	cbnz	r3, 80010ce <xQueueGenericSend+0x286>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800107e:	f002 f893 	bl	80031a8 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8001082:	2001      	movs	r0, #1
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
 8001084:	b005      	add	sp, #20
 8001086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800108a:	4631      	mov	r1, r6
 800108c:	68e0      	ldr	r0, [r4, #12]
 800108e:	f7ff f897 	bl	80001c0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001092:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001094:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001096:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001098:	425b      	negs	r3, r3
 800109a:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800109c:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800109e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80010a0:	d202      	bcs.n	80010a8 <xQueueGenericSend+0x260>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80010a2:	6862      	ldr	r2, [r4, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80010a8:	2d02      	cmp	r5, #2
 80010aa:	d1e3      	bne.n	8001074 <xQueueGenericSend+0x22c>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80010ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0e0      	beq.n	8001074 <xQueueGenericSend+0x22c>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 80010b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010b4:	3b01      	subs	r3, #1
 80010b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80010b8:	e7dc      	b.n	8001074 <xQueueGenericSend+0x22c>
	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80010ba:	f002 f841 	bl	8003140 <ulPortSetInterruptMask>
 80010be:	e7fe      	b.n	80010be <xQueueGenericSend+0x276>
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80010c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f43f aecd 	beq.w	8000e62 <xQueueGenericSend+0x1a>
 80010c8:	f002 f83a 	bl	8003140 <ulPortSetInterruptMask>
 80010cc:	e7fe      	b.n	80010cc <xQueueGenericSend+0x284>
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 80010ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80010d2:	f001 fc55 	bl	8002980 <xTaskRemoveFromEventList>
 80010d6:	2801      	cmp	r0, #1
 80010d8:	d1d1      	bne.n	800107e <xQueueGenericSend+0x236>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80010da:	f002 f825 	bl	8003128 <vPortYield>
 80010de:	e7ce      	b.n	800107e <xQueueGenericSend+0x236>

080010e0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80010e0:	b570      	push	{r4, r5, r6, lr}
 80010e2:	4606      	mov	r6, r0
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 80010e4:	2054      	movs	r0, #84	; 0x54
 80010e6:	f002 f93f 	bl	8003368 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80010ea:	4604      	mov	r4, r0
 80010ec:	b1e8      	cbz	r0, 800112a <xQueueCreateMutex+0x4a>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80010ee:	2500      	movs	r5, #0
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 80010f4:	2201      	movs	r2, #1
			pxNewQueue->u.pcReadFrom = NULL;

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80010f6:	6385      	str	r5, [r0, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 80010f8:	63c2      	str	r2, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
 80010fa:	6443      	str	r3, [r0, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
 80010fc:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
			pxNewQueue->xTxLock = queueUNLOCKED;
 8001100:	6483      	str	r3, [r0, #72]	; 0x48
		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8001102:	6045      	str	r5, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001104:	6005      	str	r5, [r0, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 8001106:	6085      	str	r5, [r0, #8]
			pxNewQueue->u.pcReadFrom = NULL;
 8001108:	60c5      	str	r5, [r0, #12]
			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 800110a:	6405      	str	r5, [r0, #64]	; 0x40
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 800110c:	3010      	adds	r0, #16
 800110e:	f7ff fd41 	bl	8000b94 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8001112:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001116:	f7ff fd3d 	bl	8000b94 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800111a:	4620      	mov	r0, r4
 800111c:	4629      	mov	r1, r5
 800111e:	462a      	mov	r2, r5
 8001120:	462b      	mov	r3, r5
 8001122:	f7ff fe91 	bl	8000e48 <xQueueGenericSend>
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
 8001126:	4620      	mov	r0, r4
 8001128:	bd70      	pop	{r4, r5, r6, pc}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
 800112a:	f002 f809 	bl	8003140 <ulPortSetInterruptMask>
 800112e:	e7fe      	b.n	800112e <xQueueCreateMutex+0x4e>

08001130 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8001130:	b538      	push	{r3, r4, r5, lr}
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;

		configASSERT( pxMutex );
 8001132:	4604      	mov	r4, r0
 8001134:	b130      	cbz	r0, 8001144 <xQueueGiveMutexRecursive+0x14>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8001136:	6845      	ldr	r5, [r0, #4]
 8001138:	f001 fcee 	bl	8002b18 <xTaskGetCurrentTaskHandle>
 800113c:	4285      	cmp	r5, r0
 800113e:	d004      	beq.n	800114a <xQueueGiveMutexRecursive+0x1a>
			xReturn = pdPASS;
		}
		else
		{
			/* We cannot give the mutex because we are not the holder. */
			xReturn = pdFAIL;
 8001140:	2000      	movs	r0, #0
 8001142:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;

		configASSERT( pxMutex );
 8001144:	f001 fffc 	bl	8003140 <ulPortSetInterruptMask>
 8001148:	e7fe      	b.n	8001148 <xQueueGiveMutexRecursive+0x18>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 800114a:	68e1      	ldr	r1, [r4, #12]
 800114c:	3901      	subs	r1, #1
 800114e:	60e1      	str	r1, [r4, #12]

			/* Have we unwound the call count? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8001150:	b109      	cbz	r1, 8001156 <xQueueGiveMutexRecursive+0x26>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8001152:	2001      	movs	r0, #1

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
	}
 8001154:	bd38      	pop	{r3, r4, r5, pc}
			/* Have we unwound the call count? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8001156:	4620      	mov	r0, r4
 8001158:	460a      	mov	r2, r1
 800115a:	460b      	mov	r3, r1
 800115c:	f7ff fe74 	bl	8000e48 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8001160:	2001      	movs	r0, #1
 8001162:	bd38      	pop	{r3, r4, r5, pc}

08001164 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001168:	4604      	mov	r4, r0

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800116a:	460e      	mov	r6, r1
 800116c:	4690      	mov	r8, r2
 800116e:	461d      	mov	r5, r3
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001170:	2800      	cmp	r0, #0
 8001172:	d02e      	beq.n	80011d2 <xQueueGenericSendFromISR+0x6e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001174:	2900      	cmp	r1, #0
 8001176:	d07f      	beq.n	8001278 <xQueueGenericSendFromISR+0x114>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001178:	2d02      	cmp	r5, #2
 800117a:	d00f      	beq.n	800119c <xQueueGenericSendFromISR+0x38>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800117c:	f002 f8d2 	bl	8003324 <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001180:	f001 ffde 	bl	8003140 <ulPortSetInterruptMask>
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001184:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001186:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001188:	4293      	cmp	r3, r2
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800118a:	4607      	mov	r7, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800118c:	d80c      	bhi.n	80011a8 <xQueueGenericSendFromISR+0x44>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800118e:	2400      	movs	r4, #0
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001190:	4638      	mov	r0, r7
 8001192:	f002 f805 	bl	80031a0 <vPortClearInterruptMask>

	return xReturn;
}
 8001196:	4620      	mov	r0, r4
 8001198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800119c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d032      	beq.n	8001208 <xQueueGenericSendFromISR+0xa4>
 80011a2:	f001 ffcd 	bl	8003140 <ulPortSetInterruptMask>
 80011a6:	e7fe      	b.n	80011a6 <xQueueGenericSendFromISR+0x42>
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80011a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80011aa:	b9aa      	cbnz	r2, 80011d8 <xQueueGenericSendFromISR+0x74>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80011ac:	6825      	ldr	r5, [r4, #0]
 80011ae:	2d00      	cmp	r5, #0
 80011b0:	d05d      	beq.n	800126e <xQueueGenericSendFromISR+0x10a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 80011b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80011b4:	3301      	adds	r3, #1
 80011b6:	63a3      	str	r3, [r4, #56]	; 0x38

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 80011b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80011ba:	3301      	adds	r3, #1
 80011bc:	d01b      	beq.n	80011f6 <xQueueGenericSendFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 80011be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80011c0:	3301      	adds	r3, #1
 80011c2:	64a3      	str	r3, [r4, #72]	; 0x48
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80011c4:	4638      	mov	r0, r7
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
 80011c6:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80011c8:	f001 ffea 	bl	80031a0 <vPortClearInterruptMask>

	return xReturn;
}
 80011cc:	4620      	mov	r0, r4
 80011ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80011d2:	f001 ffb5 	bl	8003140 <ulPortSetInterruptMask>
 80011d6:	e7fe      	b.n	80011d6 <xQueueGenericSendFromISR+0x72>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80011d8:	b9fd      	cbnz	r5, 800121a <xQueueGenericSendFromISR+0xb6>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80011da:	4631      	mov	r1, r6
 80011dc:	68a0      	ldr	r0, [r4, #8]
 80011de:	f7fe ffef 	bl	80001c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80011e2:	68a1      	ldr	r1, [r4, #8]
 80011e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80011e6:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80011e8:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80011ea:	4293      	cmp	r3, r2
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80011ec:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80011ee:	d3e0      	bcc.n	80011b2 <xQueueGenericSendFromISR+0x4e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	60a3      	str	r3, [r4, #8]
 80011f4:	e7dd      	b.n	80011b2 <xQueueGenericSendFromISR+0x4e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80011f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011f8:	bb3b      	cbnz	r3, 800124a <xQueueGenericSendFromISR+0xe6>
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80011fa:	4638      	mov	r0, r7
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
 80011fc:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80011fe:	f001 ffcf 	bl	80031a0 <vPortClearInterruptMask>

	return xReturn;
}
 8001202:	4620      	mov	r0, r4
 8001204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001208:	f002 f88c 	bl	8003324 <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800120c:	f001 ff98 	bl	8003140 <ulPortSetInterruptMask>
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001210:	6ba2      	ldr	r2, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001212:	6c22      	ldr	r2, [r4, #64]	; 0x40
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001214:	4607      	mov	r7, r0
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001216:	2a00      	cmp	r2, #0
 8001218:	d0c8      	beq.n	80011ac <xQueueGenericSendFromISR+0x48>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800121a:	4631      	mov	r1, r6
 800121c:	68e0      	ldr	r0, [r4, #12]
 800121e:	f7fe ffcf 	bl	80001c0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001222:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001224:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001226:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001228:	425b      	negs	r3, r3
 800122a:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800122c:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800122e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001230:	d202      	bcs.n	8001238 <xQueueGenericSendFromISR+0xd4>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001232:	6862      	ldr	r2, [r4, #4]
 8001234:	4413      	add	r3, r2
 8001236:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001238:	2d02      	cmp	r5, #2
 800123a:	d1ba      	bne.n	80011b2 <xQueueGenericSendFromISR+0x4e>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800123c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0b7      	beq.n	80011b2 <xQueueGenericSendFromISR+0x4e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8001242:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001244:	3b01      	subs	r3, #1
 8001246:	63a3      	str	r3, [r4, #56]	; 0x38
 8001248:	e7b3      	b.n	80011b2 <xQueueGenericSendFromISR+0x4e>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800124a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800124e:	f001 fb97 	bl	8002980 <xTaskRemoveFromEventList>
 8001252:	2800      	cmp	r0, #0
 8001254:	d0d1      	beq.n	80011fa <xQueueGenericSendFromISR+0x96>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001256:	2401      	movs	r4, #1
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001258:	f1b8 0f00 	cmp.w	r8, #0
 800125c:	d098      	beq.n	8001190 <xQueueGenericSendFromISR+0x2c>
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800125e:	4638      	mov	r0, r7
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001260:	f8c8 4000 	str.w	r4, [r8]
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001264:	f001 ff9c 	bl	80031a0 <vPortClearInterruptMask>

	return xReturn;
}
 8001268:	4620      	mov	r0, r4
 800126a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800126e:	6860      	ldr	r0, [r4, #4]
 8001270:	f001 fca0 	bl	8002bb4 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8001274:	6065      	str	r5, [r4, #4]
 8001276:	e79c      	b.n	80011b2 <xQueueGenericSendFromISR+0x4e>
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001278:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800127a:	2b00      	cmp	r3, #0
 800127c:	f43f af7c 	beq.w	8001178 <xQueueGenericSendFromISR+0x14>
 8001280:	f001 ff5e 	bl	8003140 <ulPortSetInterruptMask>
 8001284:	e7fe      	b.n	8001284 <xQueueGenericSendFromISR+0x120>
 8001286:	bf00      	nop

08001288 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8001288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800128c:	b085      	sub	sp, #20
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800128e:	4604      	mov	r4, r0
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8001290:	460d      	mov	r5, r1
 8001292:	9201      	str	r2, [sp, #4]
 8001294:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001296:	2800      	cmp	r0, #0
 8001298:	f000 80eb 	beq.w	8001472 <xQueueGenericReceive+0x1ea>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800129c:	2900      	cmp	r1, #0
 800129e:	f000 8119 	beq.w	80014d4 <xQueueGenericReceive+0x24c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80012a2:	f001 fc3f 	bl	8002b24 <xTaskGetSchedulerState>
 80012a6:	b918      	cbnz	r0, 80012b0 <xQueueGenericReceive+0x28>
 80012a8:	9b01      	ldr	r3, [sp, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f040 810f 	bne.w	80014ce <xQueueGenericReceive+0x246>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80012b0:	f001 ff68 	bl	8003184 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 80012b6:	f04f 0800 	mov.w	r8, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 80012ba:	4646      	mov	r6, r8
	{
		taskENTER_CRITICAL();
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d179      	bne.n	80013b4 <xQueueGenericReceive+0x12c>
				taskEXIT_CRITICAL();
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80012c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80012c4:	f1b9 0f00 	cmp.w	r9, #0
 80012c8:	f000 80e7 	beq.w	800149a <xQueueGenericReceive+0x212>
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
 80012cc:	f1b8 0f00 	cmp.w	r8, #0
 80012d0:	f000 80cb 	beq.w	800146a <xQueueGenericReceive+0x1e2>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80012d4:	f001 ff68 	bl	80031a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80012d8:	f000 fe5c 	bl	8001f94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80012dc:	f001 ff52 	bl	8003184 <vPortEnterCritical>
 80012e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012e2:	3301      	adds	r3, #1
 80012e4:	bf08      	it	eq
 80012e6:	6466      	streq	r6, [r4, #68]	; 0x44
 80012e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80012ea:	3301      	adds	r3, #1
 80012ec:	bf08      	it	eq
 80012ee:	64a6      	streq	r6, [r4, #72]	; 0x48
 80012f0:	f001 ff5a 	bl	80031a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80012f4:	a802      	add	r0, sp, #8
 80012f6:	a901      	add	r1, sp, #4
 80012f8:	f001 fbc8 	bl	8002a8c <xTaskCheckForTimeOut>
 80012fc:	2800      	cmp	r0, #0
 80012fe:	f040 80c3 	bne.w	8001488 <xQueueGenericReceive+0x200>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001302:	f001 ff3f 	bl	8003184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001306:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001308:	2b00      	cmp	r3, #0
 800130a:	d16b      	bne.n	80013e4 <xQueueGenericReceive+0x15c>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800130c:	f001 ff4c 	bl	80031a8 <vPortExitCritical>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 80b0 	beq.w	8001478 <xQueueGenericReceive+0x1f0>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001318:	f104 0824 	add.w	r8, r4, #36	; 0x24
 800131c:	4640      	mov	r0, r8
 800131e:	9901      	ldr	r1, [sp, #4]
 8001320:	f001 fa68 	bl	80027f4 <vTaskPlaceOnEventList>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001324:	f001 ff2e 	bl	8003184 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8001328:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800132a:	2b00      	cmp	r3, #0
 800132c:	dd12      	ble.n	8001354 <xQueueGenericReceive+0xcc>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800132e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001330:	b943      	cbnz	r3, 8001344 <xQueueGenericReceive+0xbc>
 8001332:	e00f      	b.n	8001354 <xQueueGenericReceive+0xcc>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8001334:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001336:	3b01      	subs	r3, #1
 8001338:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800133a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800133c:	2b00      	cmp	r3, #0
 800133e:	dd09      	ble.n	8001354 <xQueueGenericReceive+0xcc>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001340:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001342:	b13a      	cbz	r2, 8001354 <xQueueGenericReceive+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001344:	4640      	mov	r0, r8
 8001346:	f001 fb1b 	bl	8002980 <xTaskRemoveFromEventList>
 800134a:	2800      	cmp	r0, #0
 800134c:	d0f2      	beq.n	8001334 <xQueueGenericReceive+0xac>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 800134e:	f001 fbd5 	bl	8002afc <vTaskMissedYield>
 8001352:	e7ef      	b.n	8001334 <xQueueGenericReceive+0xac>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8001354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001358:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800135a:	f001 ff25 	bl	80031a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800135e:	f001 ff11 	bl	8003184 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001362:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001364:	2b00      	cmp	r3, #0
 8001366:	dd14      	ble.n	8001392 <xQueueGenericReceive+0x10a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001368:	6923      	ldr	r3, [r4, #16]
 800136a:	b193      	cbz	r3, 8001392 <xQueueGenericReceive+0x10a>
 800136c:	f104 0810 	add.w	r8, r4, #16
 8001370:	e007      	b.n	8001382 <xQueueGenericReceive+0xfa>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 8001372:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001374:	3a01      	subs	r2, #1
 8001376:	6462      	str	r2, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001378:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800137a:	2a00      	cmp	r2, #0
 800137c:	dd09      	ble.n	8001392 <xQueueGenericReceive+0x10a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800137e:	6922      	ldr	r2, [r4, #16]
 8001380:	b13a      	cbz	r2, 8001392 <xQueueGenericReceive+0x10a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001382:	4640      	mov	r0, r8
 8001384:	f001 fafc 	bl	8002980 <xTaskRemoveFromEventList>
 8001388:	2800      	cmp	r0, #0
 800138a:	d0f2      	beq.n	8001372 <xQueueGenericReceive+0xea>
				{
					vTaskMissedYield();
 800138c:	f001 fbb6 	bl	8002afc <vTaskMissedYield>
 8001390:	e7ef      	b.n	8001372 <xQueueGenericReceive+0xea>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8001392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001396:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001398:	f001 ff06 	bl	80031a8 <vPortExitCritical>
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
 800139c:	f000 fec4 	bl	8002128 <xTaskResumeAll>
 80013a0:	b908      	cbnz	r0, 80013a6 <xQueueGenericReceive+0x11e>
				{
					portYIELD_WITHIN_API();
 80013a2:	f001 fec1 	bl	8003128 <vPortYield>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80013a6:	f001 feed 	bl	8003184 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80013aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80013ac:	f04f 0801 	mov.w	r8, #1
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d085      	beq.n	80012c0 <xQueueGenericReceive+0x38>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80013b4:	4629      	mov	r1, r5
 80013b6:	4620      	mov	r0, r4
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80013b8:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80013ba:	f7ff fc37 	bl	8000c2c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80013be:	2f00      	cmp	r7, #0
 80013c0:	d171      	bne.n	80014a6 <xQueueGenericReceive+0x21e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 80013c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80013c4:	6823      	ldr	r3, [r4, #0]
				if( xJustPeeking == pdFALSE )
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 80013c6:	3a01      	subs	r2, #1
 80013c8:	63a2      	str	r2, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80013ca:	b913      	cbnz	r3, 80013d2 <xQueueGenericReceive+0x14a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80013cc:	f001 fba4 	bl	8002b18 <xTaskGetCurrentTaskHandle>
 80013d0:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013d2:	6923      	ldr	r3, [r4, #16]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d173      	bne.n	80014c0 <xQueueGenericReceive+0x238>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80013d8:	f001 fee6 	bl	80031a8 <vPortExitCritical>
				return pdPASS;
 80013dc:	2001      	movs	r0, #1
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
 80013de:	b005      	add	sp, #20
 80013e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80013e4:	f001 fee0 	bl	80031a8 <vPortExitCritical>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80013e8:	f001 fecc 	bl	8003184 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80013ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	dd14      	ble.n	800141c <xQueueGenericReceive+0x194>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80013f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013f4:	b193      	cbz	r3, 800141c <xQueueGenericReceive+0x194>
 80013f6:	f104 0824 	add.w	r8, r4, #36	; 0x24
 80013fa:	e007      	b.n	800140c <xQueueGenericReceive+0x184>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 80013fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80013fe:	3b01      	subs	r3, #1
 8001400:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8001402:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001404:	2b00      	cmp	r3, #0
 8001406:	dd09      	ble.n	800141c <xQueueGenericReceive+0x194>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800140a:	b13b      	cbz	r3, 800141c <xQueueGenericReceive+0x194>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800140c:	4640      	mov	r0, r8
 800140e:	f001 fab7 	bl	8002980 <xTaskRemoveFromEventList>
 8001412:	2800      	cmp	r0, #0
 8001414:	d0f2      	beq.n	80013fc <xQueueGenericReceive+0x174>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8001416:	f001 fb71 	bl	8002afc <vTaskMissedYield>
 800141a:	e7ef      	b.n	80013fc <xQueueGenericReceive+0x174>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800141c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001420:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8001422:	f001 fec1 	bl	80031a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001426:	f001 fead 	bl	8003184 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800142a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800142c:	2b00      	cmp	r3, #0
 800142e:	dd14      	ble.n	800145a <xQueueGenericReceive+0x1d2>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001430:	6923      	ldr	r3, [r4, #16]
 8001432:	b193      	cbz	r3, 800145a <xQueueGenericReceive+0x1d2>
 8001434:	f104 0810 	add.w	r8, r4, #16
 8001438:	e007      	b.n	800144a <xQueueGenericReceive+0x1c2>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800143a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800143c:	3b01      	subs	r3, #1
 800143e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001440:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001442:	2b00      	cmp	r3, #0
 8001444:	dd09      	ble.n	800145a <xQueueGenericReceive+0x1d2>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001446:	6923      	ldr	r3, [r4, #16]
 8001448:	b13b      	cbz	r3, 800145a <xQueueGenericReceive+0x1d2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800144a:	4640      	mov	r0, r8
 800144c:	f001 fa98 	bl	8002980 <xTaskRemoveFromEventList>
 8001450:	2800      	cmp	r0, #0
 8001452:	d0f2      	beq.n	800143a <xQueueGenericReceive+0x1b2>
				{
					vTaskMissedYield();
 8001454:	f001 fb52 	bl	8002afc <vTaskMissedYield>
 8001458:	e7ef      	b.n	800143a <xQueueGenericReceive+0x1b2>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800145e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001460:	f001 fea2 	bl	80031a8 <vPortExitCritical>
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
				( void ) xTaskResumeAll();
 8001464:	f000 fe60 	bl	8002128 <xTaskResumeAll>
 8001468:	e79d      	b.n	80013a6 <xQueueGenericReceive+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800146a:	a802      	add	r0, sp, #8
 800146c:	f001 fafe 	bl	8002a6c <vTaskSetTimeOutState>
 8001470:	e730      	b.n	80012d4 <xQueueGenericReceive+0x4c>
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001472:	f001 fe65 	bl	8003140 <ulPortSetInterruptMask>
 8001476:	e7fe      	b.n	8001476 <xQueueGenericReceive+0x1ee>

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
					{
						taskENTER_CRITICAL();
 8001478:	f001 fe84 	bl	8003184 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800147c:	6860      	ldr	r0, [r4, #4]
 800147e:	f001 fb61 	bl	8002b44 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8001482:	f001 fe91 	bl	80031a8 <vPortExitCritical>
 8001486:	e747      	b.n	8001318 <xQueueGenericReceive+0x90>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8001488:	4620      	mov	r0, r4
 800148a:	f7ff fbe3 	bl	8000c54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800148e:	f000 fe4b 	bl	8002128 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8001492:	2000      	movs	r0, #0
		}
	}
}
 8001494:	b005      	add	sp, #20
 8001496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			{
				if( xTicksToWait == ( TickType_t ) 0 )
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800149a:	f001 fe85 	bl	80031a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800149e:	4648      	mov	r0, r9
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
 80014a0:	b005      	add	sp, #20
 80014a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80014a8:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d094      	beq.n	80013d8 <xQueueGenericReceive+0x150>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80014ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80014b2:	f001 fa65 	bl	8002980 <xTaskRemoveFromEventList>
 80014b6:	2800      	cmp	r0, #0
 80014b8:	d08e      	beq.n	80013d8 <xQueueGenericReceive+0x150>

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
						{
							queueYIELD_IF_USING_PREEMPTION();
 80014ba:	f001 fe35 	bl	8003128 <vPortYield>
 80014be:	e78b      	b.n	80013d8 <xQueueGenericReceive+0x150>
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80014c0:	f104 0010 	add.w	r0, r4, #16
 80014c4:	f001 fa5c 	bl	8002980 <xTaskRemoveFromEventList>
 80014c8:	2801      	cmp	r0, #1
 80014ca:	d185      	bne.n	80013d8 <xQueueGenericReceive+0x150>
 80014cc:	e7f5      	b.n	80014ba <xQueueGenericReceive+0x232>

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80014ce:	f001 fe37 	bl	8003140 <ulPortSetInterruptMask>
 80014d2:	e7fe      	b.n	80014d2 <xQueueGenericReceive+0x24a>
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80014d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f43f aee3 	beq.w	80012a2 <xQueueGenericReceive+0x1a>
 80014dc:	f001 fe30 	bl	8003140 <ulPortSetInterruptMask>
 80014e0:	e7fe      	b.n	80014e0 <xQueueGenericReceive+0x258>
 80014e2:	bf00      	nop

080014e4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80014e4:	b570      	push	{r4, r5, r6, lr}
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;

		configASSERT( pxMutex );
 80014e6:	4604      	mov	r4, r0
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80014e8:	460d      	mov	r5, r1
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;

		configASSERT( pxMutex );
 80014ea:	b1b0      	cbz	r0, 800151a <xQueueTakeMutexRecursive+0x36>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80014ec:	6846      	ldr	r6, [r0, #4]
 80014ee:	f001 fb13 	bl	8002b18 <xTaskGetCurrentTaskHandle>
 80014f2:	4286      	cmp	r6, r0
 80014f4:	d00c      	beq.n	8001510 <xQueueTakeMutexRecursive+0x2c>
			( pxMutex->u.uxRecursiveCallCount )++;
			xReturn = pdPASS;
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 80014f6:	2100      	movs	r1, #0
 80014f8:	462a      	mov	r2, r5
 80014fa:	460b      	mov	r3, r1
 80014fc:	4620      	mov	r0, r4
 80014fe:	f7ff fec3 	bl	8001288 <xQueueGenericReceive>

			/* pdPASS will only be returned if we successfully obtained the mutex,
			we may have blocked to reach here. */
			if( xReturn == pdPASS )
 8001502:	2801      	cmp	r0, #1
 8001504:	d000      	beq.n	8001508 <xQueueTakeMutexRecursive+0x24>
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
	}
 8001506:	bd70      	pop	{r4, r5, r6, pc}

			/* pdPASS will only be returned if we successfully obtained the mutex,
			we may have blocked to reach here. */
			if( xReturn == pdPASS )
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8001508:	68e3      	ldr	r3, [r4, #12]
 800150a:	3301      	adds	r3, #1
 800150c:	60e3      	str	r3, [r4, #12]
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
	}
 800150e:	bd70      	pop	{r4, r5, r6, pc}

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8001510:	68e3      	ldr	r3, [r4, #12]
 8001512:	3301      	adds	r3, #1
 8001514:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 8001516:	2001      	movs	r0, #1
 8001518:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;

		configASSERT( pxMutex );
 800151a:	f001 fe11 	bl	8003140 <ulPortSetInterruptMask>
 800151e:	e7fe      	b.n	800151e <xQueueTakeMutexRecursive+0x3a>

08001520 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001522:	4604      	mov	r4, r0
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001524:	460e      	mov	r6, r1
 8001526:	4615      	mov	r5, r2
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001528:	b168      	cbz	r0, 8001546 <xQueueReceiveFromISR+0x26>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800152a:	b311      	cbz	r1, 8001572 <xQueueReceiveFromISR+0x52>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800152c:	f001 fefa 	bl	8003324 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001530:	f001 fe06 	bl	8003140 <ulPortSetInterruptMask>
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001534:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001536:	4607      	mov	r7, r0
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001538:	b943      	cbnz	r3, 800154c <xQueueReceiveFromISR+0x2c>

			xReturn = pdPASS;
		}
		else
		{
			xReturn = pdFAIL;
 800153a:	461c      	mov	r4, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800153c:	4638      	mov	r0, r7
 800153e:	f001 fe2f 	bl	80031a0 <vPortClearInterruptMask>

	return xReturn;
}
 8001542:	4620      	mov	r0, r4
 8001544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001546:	f001 fdfb 	bl	8003140 <ulPortSetInterruptMask>
 800154a:	e7fe      	b.n	800154a <xQueueReceiveFromISR+0x2a>
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800154c:	4631      	mov	r1, r6
 800154e:	4620      	mov	r0, r4
 8001550:	f7ff fb6c 	bl	8000c2c <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 8001554:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001556:	3b01      	subs	r3, #1
 8001558:	63a3      	str	r3, [r4, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
 800155a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800155c:	3301      	adds	r3, #1
 800155e:	d00e      	beq.n	800157e <xQueueReceiveFromISR+0x5e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
 8001560:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001562:	3301      	adds	r3, #1
 8001564:	6463      	str	r3, [r4, #68]	; 0x44
		{
			xReturn = pdFAIL;
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001566:	4638      	mov	r0, r7
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
			}

			xReturn = pdPASS;
 8001568:	2401      	movs	r4, #1
		{
			xReturn = pdFAIL;
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800156a:	f001 fe19 	bl	80031a0 <vPortClearInterruptMask>

	return xReturn;
}
 800156e:	4620      	mov	r0, r4
 8001570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001572:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0d9      	beq.n	800152c <xQueueReceiveFromISR+0xc>
 8001578:	f001 fde2 	bl	8003140 <ulPortSetInterruptMask>
 800157c:	e7fe      	b.n	800157c <xQueueReceiveFromISR+0x5c>
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800157e:	6923      	ldr	r3, [r4, #16]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <xQueueReceiveFromISR+0x46>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001584:	f104 0010 	add.w	r0, r4, #16
 8001588:	f001 f9fa 	bl	8002980 <xTaskRemoveFromEventList>
 800158c:	2800      	cmp	r0, #0
 800158e:	d0ea      	beq.n	8001566 <xQueueReceiveFromISR+0x46>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8001590:	2d00      	cmp	r5, #0
 8001592:	d0e8      	beq.n	8001566 <xQueueReceiveFromISR+0x46>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8001594:	2401      	movs	r4, #1
		{
			xReturn = pdFAIL;
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001596:	4638      	mov	r0, r7
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8001598:	602c      	str	r4, [r5, #0]
		{
			xReturn = pdFAIL;
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800159a:	f001 fe01 	bl	80031a0 <vPortClearInterruptMask>

	return xReturn;
}
 800159e:	4620      	mov	r0, r4
 80015a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015a2:	bf00      	nop

080015a4 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 80015a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80015a6:	4604      	mov	r4, r0
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 80015a8:	460e      	mov	r6, r1
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80015aa:	b160      	cbz	r0, 80015c6 <xQueuePeekFromISR+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80015ac:	b1d1      	cbz	r1, 80015e4 <xQueuePeekFromISR+0x40>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80015ae:	f001 feb9 	bl	8003324 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80015b2:	f001 fdc5 	bl	8003140 <ulPortSetInterruptMask>
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80015b6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80015b8:	4607      	mov	r7, r0
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80015ba:	b93d      	cbnz	r5, 80015cc <xQueuePeekFromISR+0x28>
		{
			xReturn = pdFAIL;
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80015bc:	4638      	mov	r0, r7
 80015be:	f001 fdef 	bl	80031a0 <vPortClearInterruptMask>

	return xReturn;
}
 80015c2:	4628      	mov	r0, r5
 80015c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80015c6:	f001 fdbb 	bl	8003140 <ulPortSetInterruptMask>
 80015ca:	e7fe      	b.n	80015ca <xQueuePeekFromISR+0x26>
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80015cc:	4631      	mov	r1, r6
 80015ce:	4620      	mov	r0, r4
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80015d0:	68e6      	ldr	r6, [r4, #12]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;

			xReturn = pdPASS;
 80015d2:	2501      	movs	r5, #1
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80015d4:	f7ff fb2a 	bl	8000c2c <prvCopyDataFromQueue>
		{
			xReturn = pdFAIL;
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80015d8:	4638      	mov	r0, r7

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
			prvCopyDataFromQueue( pxQueue, pvBuffer );
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80015da:	60e6      	str	r6, [r4, #12]
		{
			xReturn = pdFAIL;
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80015dc:	f001 fde0 	bl	80031a0 <vPortClearInterruptMask>

	return xReturn;
}
 80015e0:	4628      	mov	r0, r5
 80015e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80015e4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0e1      	beq.n	80015ae <xQueuePeekFromISR+0xa>
 80015ea:	f001 fda9 	bl	8003140 <ulPortSetInterruptMask>
 80015ee:	e7fe      	b.n	80015ee <xQueuePeekFromISR+0x4a>

080015f0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80015f0:	b510      	push	{r4, lr}
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80015f2:	4604      	mov	r4, r0
 80015f4:	b130      	cbz	r0, 8001604 <uxQueueMessagesWaiting+0x14>

	taskENTER_CRITICAL();
 80015f6:	f001 fdc5 	bl	8003184 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80015fa:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	}
	taskEXIT_CRITICAL();
 80015fc:	f001 fdd4 	bl	80031a8 <vPortExitCritical>

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001600:	4620      	mov	r0, r4
 8001602:	bd10      	pop	{r4, pc}

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8001604:	f001 fd9c 	bl	8003140 <ulPortSetInterruptMask>
 8001608:	e7fe      	b.n	8001608 <uxQueueMessagesWaiting+0x18>
 800160a:	bf00      	nop

0800160c <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800160c:	b510      	push	{r4, lr}
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
	configASSERT( pxQueue );
 800160e:	4604      	mov	r4, r0
 8001610:	b140      	cbz	r0, 8001624 <uxQueueSpacesAvailable+0x18>

	taskENTER_CRITICAL();
 8001612:	f001 fdb7 	bl	8003184 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8001616:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001618:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800161a:	1ae4      	subs	r4, r4, r3
	}
	taskEXIT_CRITICAL();
 800161c:	f001 fdc4 	bl	80031a8 <vPortExitCritical>

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001620:	4620      	mov	r0, r4
 8001622:	bd10      	pop	{r4, pc}
{
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
	configASSERT( pxQueue );
 8001624:	f001 fd8c 	bl	8003140 <ulPortSetInterruptMask>
 8001628:	e7fe      	b.n	8001628 <uxQueueSpacesAvailable+0x1c>
 800162a:	bf00      	nop

0800162c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800162c:	b508      	push	{r3, lr}
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800162e:	b108      	cbz	r0, 8001634 <uxQueueMessagesWaitingFromISR+0x8>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8001630:	6b80      	ldr	r0, [r0, #56]	; 0x38

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001632:	bd08      	pop	{r3, pc}

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8001634:	f001 fd84 	bl	8003140 <ulPortSetInterruptMask>
 8001638:	e7fe      	b.n	8001638 <uxQueueMessagesWaitingFromISR+0xc>
 800163a:	bf00      	nop

0800163c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800163c:	b510      	push	{r4, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800163e:	4604      	mov	r4, r0
 8001640:	b368      	cbz	r0, 800169e <vQueueDelete+0x62>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001642:	4b22      	ldr	r3, [pc, #136]	; (80016cc <vQueueDelete+0x90>)
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	4290      	cmp	r0, r2
 8001648:	d02c      	beq.n	80016a4 <vQueueDelete+0x68>
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	4290      	cmp	r0, r2
 800164e:	d02e      	beq.n	80016ae <vQueueDelete+0x72>
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	4290      	cmp	r0, r2
 8001654:	d030      	beq.n	80016b8 <vQueueDelete+0x7c>
 8001656:	69da      	ldr	r2, [r3, #28]
 8001658:	4290      	cmp	r0, r2
 800165a:	d01b      	beq.n	8001694 <vQueueDelete+0x58>
 800165c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800165e:	4290      	cmp	r0, r2
 8001660:	d031      	beq.n	80016c6 <vQueueDelete+0x8a>
 8001662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001664:	4290      	cmp	r0, r2
 8001666:	d02c      	beq.n	80016c2 <vQueueDelete+0x86>
 8001668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800166a:	4290      	cmp	r0, r2
 800166c:	d00d      	beq.n	800168a <vQueueDelete+0x4e>
 800166e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001670:	4290      	cmp	r0, r2
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001672:	bf08      	it	eq
 8001674:	2207      	moveq	r2, #7
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001676:	d009      	beq.n	800168c <vQueueDelete+0x50>
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
	}
	#endif
	if( pxQueue->pcHead != NULL )
 8001678:	6820      	ldr	r0, [r4, #0]
 800167a:	b108      	cbz	r0, 8001680 <vQueueDelete+0x44>
	{
		vPortFree( pxQueue->pcHead );
 800167c:	f001 fea2 	bl	80033c4 <vPortFree>
	}
	vPortFree( pxQueue );
 8001680:	4620      	mov	r0, r4
}
 8001682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	#endif
	if( pxQueue->pcHead != NULL )
	{
		vPortFree( pxQueue->pcHead );
	}
	vPortFree( pxQueue );
 8001686:	f001 be9d 	b.w	80033c4 <vPortFree>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800168a:	2206      	movs	r2, #6
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800168c:	2100      	movs	r1, #0
 800168e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 8001692:	e7f1      	b.n	8001678 <vQueueDelete+0x3c>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001694:	2203      	movs	r2, #3
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8001696:	2100      	movs	r1, #0
 8001698:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800169c:	e7ec      	b.n	8001678 <vQueueDelete+0x3c>

void vQueueDelete( QueueHandle_t xQueue )
{
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800169e:	f001 fd4f 	bl	8003140 <ulPortSetInterruptMask>
 80016a2:	e7fe      	b.n	80016a2 <vQueueDelete+0x66>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80016a4:	2200      	movs	r2, #0
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80016a6:	2100      	movs	r1, #0
 80016a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 80016ac:	e7e4      	b.n	8001678 <vQueueDelete+0x3c>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80016ae:	2201      	movs	r2, #1
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80016b0:	2100      	movs	r1, #0
 80016b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 80016b6:	e7df      	b.n	8001678 <vQueueDelete+0x3c>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80016b8:	2202      	movs	r2, #2
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80016ba:	2100      	movs	r1, #0
 80016bc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 80016c0:	e7da      	b.n	8001678 <vQueueDelete+0x3c>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80016c2:	2205      	movs	r2, #5
 80016c4:	e7e2      	b.n	800168c <vQueueDelete+0x50>
 80016c6:	2204      	movs	r2, #4
 80016c8:	e7e0      	b.n	800168c <vQueueDelete+0x50>
 80016ca:	bf00      	nop
 80016cc:	200000b8 	strhcs	r0, [r0], -r8

080016d0 <uxQueueGetQueueNumber>:
#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
	}
 80016d0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80016d2:	4770      	bx	lr

080016d4 <vQueueSetQueueNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 80016d4:	64c1      	str	r1, [r0, #76]	; 0x4c
 80016d6:	4770      	bx	lr

080016d8 <ucQueueGetQueueType>:
#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
		return ( ( Queue_t * ) xQueue )->ucQueueType;
	}
 80016d8:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop

080016e0 <xQueueIsQueueEmptyFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 80016e0:	b508      	push	{r3, lr}
BaseType_t xReturn;

	configASSERT( xQueue );
 80016e2:	b128      	cbz	r0, 80016f0 <xQueueIsQueueEmptyFromISR+0x10>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80016e4:	6b80      	ldr	r0, [r0, #56]	; 0x38
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80016e6:	f1d0 0001 	rsbs	r0, r0, #1
 80016ea:	bf38      	it	cc
 80016ec:	2000      	movcc	r0, #0
 80016ee:	bd08      	pop	{r3, pc}

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
 80016f0:	f001 fd26 	bl	8003140 <ulPortSetInterruptMask>
 80016f4:	e7fe      	b.n	80016f4 <xQueueIsQueueEmptyFromISR+0x14>
 80016f6:	bf00      	nop

080016f8 <xQueueIsQueueFullFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80016f8:	b508      	push	{r3, lr}
BaseType_t xReturn;

	configASSERT( xQueue );
 80016fa:	b128      	cbz	r0, 8001708 <xQueueIsQueueFullFromISR+0x10>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 80016fc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80016fe:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001700:	1a13      	subs	r3, r2, r0
 8001702:	4258      	negs	r0, r3
 8001704:	4158      	adcs	r0, r3
 8001706:	bd08      	pop	{r3, pc}

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
 8001708:	f001 fd1a 	bl	8003140 <ulPortSetInterruptMask>
 800170c:	e7fe      	b.n	800170c <xQueueIsQueueFullFromISR+0x14>
 800170e:	bf00      	nop

08001710 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <vQueueAddToRegistry+0x54>)
 8001712:	681a      	ldr	r2, [r3, #0]
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001714:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001716:	b18a      	cbz	r2, 800173c <vQueueAddToRegistry+0x2c>
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	b1ba      	cbz	r2, 800174c <vQueueAddToRegistry+0x3c>
 800171c:	691a      	ldr	r2, [r3, #16]
 800171e:	b1ba      	cbz	r2, 8001750 <vQueueAddToRegistry+0x40>
 8001720:	699a      	ldr	r2, [r3, #24]
 8001722:	b1ba      	cbz	r2, 8001754 <vQueueAddToRegistry+0x44>
 8001724:	6a1a      	ldr	r2, [r3, #32]
 8001726:	b1ba      	cbz	r2, 8001758 <vQueueAddToRegistry+0x48>
 8001728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800172a:	b1ba      	cbz	r2, 800175c <vQueueAddToRegistry+0x4c>
 800172c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800172e:	b122      	cbz	r2, 800173a <vQueueAddToRegistry+0x2a>
 8001730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001732:	b1aa      	cbz	r2, 8001760 <vQueueAddToRegistry+0x50>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001734:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001738:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800173a:	2206      	movs	r2, #6
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
 800173c:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001740:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001744:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800174a:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800174c:	2201      	movs	r2, #1
 800174e:	e7f5      	b.n	800173c <vQueueAddToRegistry+0x2c>
 8001750:	2202      	movs	r2, #2
 8001752:	e7f3      	b.n	800173c <vQueueAddToRegistry+0x2c>
 8001754:	2203      	movs	r2, #3
 8001756:	e7f1      	b.n	800173c <vQueueAddToRegistry+0x2c>
 8001758:	2204      	movs	r2, #4
 800175a:	e7ef      	b.n	800173c <vQueueAddToRegistry+0x2c>
 800175c:	2205      	movs	r2, #5
 800175e:	e7ed      	b.n	800173c <vQueueAddToRegistry+0x2c>
 8001760:	2207      	movs	r2, #7
 8001762:	e7eb      	b.n	800173c <vQueueAddToRegistry+0x2c>
 8001764:	200000b8 	strhcs	r0, [r0], -r8

08001768 <vQueueUnregisterQueue>:

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001768:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <vQueueUnregisterQueue+0x5c>)
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	4282      	cmp	r2, r0
 800176e:	d01c      	beq.n	80017aa <vQueueUnregisterQueue+0x42>
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	4282      	cmp	r2, r0
 8001774:	d01b      	beq.n	80017ae <vQueueUnregisterQueue+0x46>
 8001776:	695a      	ldr	r2, [r3, #20]
 8001778:	4282      	cmp	r2, r0
 800177a:	d01a      	beq.n	80017b2 <vQueueUnregisterQueue+0x4a>
 800177c:	69da      	ldr	r2, [r3, #28]
 800177e:	4282      	cmp	r2, r0
 8001780:	d019      	beq.n	80017b6 <vQueueUnregisterQueue+0x4e>
 8001782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001784:	4282      	cmp	r2, r0
 8001786:	d018      	beq.n	80017ba <vQueueUnregisterQueue+0x52>
 8001788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800178a:	4282      	cmp	r2, r0
 800178c:	d017      	beq.n	80017be <vQueueUnregisterQueue+0x56>
 800178e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001790:	4282      	cmp	r2, r0
 8001792:	d005      	beq.n	80017a0 <vQueueUnregisterQueue+0x38>
 8001794:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001796:	4282      	cmp	r2, r0
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001798:	bf08      	it	eq
 800179a:	2207      	moveq	r2, #7
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800179c:	d001      	beq.n	80017a2 <vQueueUnregisterQueue+0x3a>
 800179e:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80017a0:	2206      	movs	r2, #6
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80017a2:	2100      	movs	r1, #0
 80017a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 80017a8:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80017aa:	2200      	movs	r2, #0
 80017ac:	e7f9      	b.n	80017a2 <vQueueUnregisterQueue+0x3a>
 80017ae:	2201      	movs	r2, #1
 80017b0:	e7f7      	b.n	80017a2 <vQueueUnregisterQueue+0x3a>
 80017b2:	2202      	movs	r2, #2
 80017b4:	e7f5      	b.n	80017a2 <vQueueUnregisterQueue+0x3a>
 80017b6:	2203      	movs	r2, #3
 80017b8:	e7f3      	b.n	80017a2 <vQueueUnregisterQueue+0x3a>
 80017ba:	2204      	movs	r2, #4
 80017bc:	e7f1      	b.n	80017a2 <vQueueUnregisterQueue+0x3a>
 80017be:	2205      	movs	r2, #5
 80017c0:	e7ef      	b.n	80017a2 <vQueueUnregisterQueue+0x3a>
 80017c2:	bf00      	nop
 80017c4:	200000b8 	strhcs	r0, [r0], -r8

080017c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 80017c8:	b538      	push	{r3, r4, r5, lr}
 80017ca:	4604      	mov	r4, r0
 80017cc:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80017ce:	f001 fcd9 	bl	8003184 <vPortEnterCritical>
 80017d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017d4:	3301      	adds	r3, #1
 80017d6:	bf04      	itt	eq
 80017d8:	2300      	moveq	r3, #0
 80017da:	6463      	streq	r3, [r4, #68]	; 0x44
 80017dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80017de:	3301      	adds	r3, #1
 80017e0:	bf04      	itt	eq
 80017e2:	2300      	moveq	r3, #0
 80017e4:	64a3      	streq	r3, [r4, #72]	; 0x48
 80017e6:	f001 fcdf 	bl	80031a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80017ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017ec:	b923      	cbnz	r3, 80017f8 <vQueueWaitForMessageRestricted+0x30>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80017ee:	4629      	mov	r1, r5
 80017f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80017f4:	f001 f88e 	bl	8002914 <vTaskPlaceOnEventListRestricted>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80017f8:	f001 fcc4 	bl	8003184 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80017fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80017fe:	2b00      	cmp	r3, #0
 8001800:	dd14      	ble.n	800182c <vQueueWaitForMessageRestricted+0x64>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001804:	b193      	cbz	r3, 800182c <vQueueWaitForMessageRestricted+0x64>
 8001806:	f104 0524 	add.w	r5, r4, #36	; 0x24
 800180a:	e007      	b.n	800181c <vQueueWaitForMessageRestricted+0x54>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800180c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800180e:	3b01      	subs	r3, #1
 8001810:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8001812:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001814:	2b00      	cmp	r3, #0
 8001816:	dd09      	ble.n	800182c <vQueueWaitForMessageRestricted+0x64>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800181a:	b13b      	cbz	r3, 800182c <vQueueWaitForMessageRestricted+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800181c:	4628      	mov	r0, r5
 800181e:	f001 f8af 	bl	8002980 <xTaskRemoveFromEventList>
 8001822:	2800      	cmp	r0, #0
 8001824:	d0f2      	beq.n	800180c <vQueueWaitForMessageRestricted+0x44>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8001826:	f001 f969 	bl	8002afc <vTaskMissedYield>
 800182a:	e7ef      	b.n	800180c <vQueueWaitForMessageRestricted+0x44>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800182c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001830:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8001832:	f001 fcb9 	bl	80031a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001836:	f001 fca5 	bl	8003184 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800183a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800183c:	2b00      	cmp	r3, #0
 800183e:	dd14      	ble.n	800186a <vQueueWaitForMessageRestricted+0xa2>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001840:	6923      	ldr	r3, [r4, #16]
 8001842:	b193      	cbz	r3, 800186a <vQueueWaitForMessageRestricted+0xa2>
 8001844:	f104 0510 	add.w	r5, r4, #16
 8001848:	e007      	b.n	800185a <vQueueWaitForMessageRestricted+0x92>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800184a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800184c:	3b01      	subs	r3, #1
 800184e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001850:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001852:	2b00      	cmp	r3, #0
 8001854:	dd09      	ble.n	800186a <vQueueWaitForMessageRestricted+0xa2>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001856:	6923      	ldr	r3, [r4, #16]
 8001858:	b13b      	cbz	r3, 800186a <vQueueWaitForMessageRestricted+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800185a:	4628      	mov	r0, r5
 800185c:	f001 f890 	bl	8002980 <xTaskRemoveFromEventList>
 8001860:	2800      	cmp	r0, #0
 8001862:	d0f2      	beq.n	800184a <vQueueWaitForMessageRestricted+0x82>
				{
					vTaskMissedYield();
 8001864:	f001 f94a 	bl	8002afc <vTaskMissedYield>
 8001868:	e7ef      	b.n	800184a <vQueueWaitForMessageRestricted+0x82>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800186e:	6463      	str	r3, [r4, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 8001870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 8001874:	f001 bc98 	b.w	80031a8 <vPortExitCritical>

08001878 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001878:	b538      	push	{r3, r4, r5, lr}
 800187a:	4d0f      	ldr	r5, [pc, #60]	; (80018b8 <prvInitialiseTaskLists+0x40>)
 800187c:	2400      	movs	r4, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800187e:	1928      	adds	r0, r5, r4
 8001880:	3414      	adds	r4, #20
 8001882:	f7ff f987 	bl	8000b94 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001886:	2c64      	cmp	r4, #100	; 0x64
 8001888:	d1f9      	bne.n	800187e <prvInitialiseTaskLists+0x6>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800188a:	4d0c      	ldr	r5, [pc, #48]	; (80018bc <prvInitialiseTaskLists+0x44>)
	vListInitialise( &xDelayedTaskList2 );
 800188c:	4c0c      	ldr	r4, [pc, #48]	; (80018c0 <prvInitialiseTaskLists+0x48>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800188e:	4628      	mov	r0, r5
 8001890:	f7ff f980 	bl	8000b94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001894:	4620      	mov	r0, r4
 8001896:	f7ff f97d 	bl	8000b94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800189a:	480a      	ldr	r0, [pc, #40]	; (80018c4 <prvInitialiseTaskLists+0x4c>)
 800189c:	f7ff f97a 	bl	8000b94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80018a0:	4809      	ldr	r0, [pc, #36]	; (80018c8 <prvInitialiseTaskLists+0x50>)
 80018a2:	f7ff f977 	bl	8000b94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80018a6:	4809      	ldr	r0, [pc, #36]	; (80018cc <prvInitialiseTaskLists+0x54>)
 80018a8:	f7ff f974 	bl	8000b94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80018ac:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <prvInitialiseTaskLists+0x58>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <prvInitialiseTaskLists+0x5c>)
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80018b0:	6015      	str	r5, [r2, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80018b2:	601c      	str	r4, [r3, #0]
 80018b4:	bd38      	pop	{r3, r4, r5, pc}
 80018b6:	bf00      	nop
 80018b8:	20000118 	andcs	r0, r0, r8, lsl r1
 80018bc:	200001ac 	andcs	r0, r0, ip, lsr #3
 80018c0:	200001c0 	andcs	r0, r0, r0, asr #3
 80018c4:	20000188 	andcs	r0, r0, r8, lsl #3
 80018c8:	20000104 	andcs	r0, r0, r4, lsl #2
 80018cc:	200001d8 	ldrdcs	r0, [r0], -r8
 80018d0:	200000f8 	strdcs	r0, [r0], -r8
 80018d4:	200001a4 	andcs	r0, r0, r4, lsr #3

080018d8 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80018d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018dc:	ae0a      	add	r6, sp, #40	; 0x28
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
 80018de:	4607      	mov	r7, r0
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80018e0:	460d      	mov	r5, r1
 80018e2:	4691      	mov	r9, r2
 80018e4:	469a      	mov	sl, r3
 80018e6:	e896 0940 	ldmia.w	r6, {r6, r8, fp}
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
 80018ea:	2800      	cmp	r0, #0
 80018ec:	f000 809b 	beq.w	8001a26 <xTaskGenericCreate+0x14e>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 80018f0:	2e04      	cmp	r6, #4
 80018f2:	d902      	bls.n	80018fa <xTaskGenericCreate+0x22>
 80018f4:	f001 fc24 	bl	8003140 <ulPortSetInterruptMask>
 80018f8:	e7fe      	b.n	80018f8 <xTaskGenericCreate+0x20>
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80018fa:	204c      	movs	r0, #76	; 0x4c
 80018fc:	f001 fd34 	bl	8003368 <pvPortMalloc>

	if( pxNewTCB != NULL )
 8001900:	4604      	mov	r4, r0
 8001902:	2800      	cmp	r0, #0
 8001904:	f000 80ab 	beq.w	8001a5e <xTaskGenericCreate+0x186>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001908:	f1bb 0f00 	cmp.w	fp, #0
 800190c:	f000 809b 	beq.w	8001a46 <xTaskGenericCreate+0x16e>
 8001910:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
 8001914:	4658      	mov	r0, fp
 8001916:	ea4f 0b89 	mov.w	fp, r9, lsl #2
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800191a:	465a      	mov	r2, fp
 800191c:	21a5      	movs	r1, #165	; 0xa5
 800191e:	f003 fc9f 	bl	8005260 <memset>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001922:	782a      	ldrb	r2, [r5, #0]
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 8001924:	6b23      	ldr	r3, [r4, #48]	; 0x30
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001926:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800192a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 800192e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
		pxTCB->pcTaskName[ x ] = pcName[ x ];

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001932:	782a      	ldrb	r2, [r5, #0]
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 8001934:	eb03 0389 	add.w	r3, r3, r9, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001938:	f023 0b07 	bic.w	fp, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800193c:	b32a      	cbz	r2, 800198a <xTaskGenericCreate+0xb2>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800193e:	786b      	ldrb	r3, [r5, #1]
 8001940:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001944:	786b      	ldrb	r3, [r5, #1]
 8001946:	b303      	cbz	r3, 800198a <xTaskGenericCreate+0xb2>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001948:	78ab      	ldrb	r3, [r5, #2]
 800194a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800194e:	78ab      	ldrb	r3, [r5, #2]
 8001950:	b1db      	cbz	r3, 800198a <xTaskGenericCreate+0xb2>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001952:	78eb      	ldrb	r3, [r5, #3]
 8001954:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001958:	78eb      	ldrb	r3, [r5, #3]
 800195a:	b1b3      	cbz	r3, 800198a <xTaskGenericCreate+0xb2>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800195c:	792b      	ldrb	r3, [r5, #4]
 800195e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001962:	792b      	ldrb	r3, [r5, #4]
 8001964:	b18b      	cbz	r3, 800198a <xTaskGenericCreate+0xb2>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001966:	796b      	ldrb	r3, [r5, #5]
 8001968:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800196c:	796b      	ldrb	r3, [r5, #5]
 800196e:	b163      	cbz	r3, 800198a <xTaskGenericCreate+0xb2>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001970:	79ab      	ldrb	r3, [r5, #6]
 8001972:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001976:	79ab      	ldrb	r3, [r5, #6]
 8001978:	b13b      	cbz	r3, 800198a <xTaskGenericCreate+0xb2>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800197a:	79eb      	ldrb	r3, [r5, #7]
 800197c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001980:	79eb      	ldrb	r3, [r5, #7]
 8001982:	b113      	cbz	r3, 800198a <xTaskGenericCreate+0xb2>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001984:	7a2b      	ldrb	r3, [r5, #8]
 8001986:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800198a:	2300      	movs	r3, #0
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800198c:	f104 0904 	add.w	r9, r4, #4
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001990:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001994:	4648      	mov	r0, r9
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8001996:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8001998:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800199a:	f7ff f907 	bl	8000bac <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800199e:	f104 0018 	add.w	r0, r4, #24
 80019a2:	f7ff f903 	bl	8000bac <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019a6:	f1c6 0305 	rsb	r3, r6, #5
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80019aa:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80019ac:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80019ae:	4658      	mov	r0, fp
 80019b0:	4639      	mov	r1, r7
 80019b2:	4652      	mov	r2, sl
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019b4:	61a3      	str	r3, [r4, #24]
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80019b6:	f001 fb91 	bl	80030dc <pxPortInitialiseStack>
 80019ba:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 80019bc:	f1b8 0f00 	cmp.w	r8, #0
 80019c0:	d001      	beq.n	80019c6 <xTaskGenericCreate+0xee>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80019c2:	f8c8 4000 	str.w	r4, [r8]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 80019c6:	f001 fbdd 	bl	8003184 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80019ca:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <xTaskGenericCreate+0x190>)
			if( pxCurrentTCB == NULL )
 80019cc:	4d27      	ldr	r5, [pc, #156]	; (8001a6c <xTaskGenericCreate+0x194>)

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	3201      	adds	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 80019d4:	682a      	ldr	r2, [r5, #0]
 80019d6:	b372      	cbz	r2, 8001a36 <xTaskGenericCreate+0x15e>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80019d8:	4f25      	ldr	r7, [pc, #148]	; (8001a70 <xTaskGenericCreate+0x198>)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	b923      	cbnz	r3, 80019e8 <xTaskGenericCreate+0x110>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80019de:	682b      	ldr	r3, [r5, #0]
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	429e      	cmp	r6, r3
					{
						pxCurrentTCB = pxNewTCB;
 80019e4:	bf28      	it	cs
 80019e6:	602c      	strcs	r4, [r5, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 80019e8:	4822      	ldr	r0, [pc, #136]	; (8001a74 <xTaskGenericCreate+0x19c>)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80019ea:	4a23      	ldr	r2, [pc, #140]	; (8001a78 <xTaskGenericCreate+0x1a0>)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 80019ec:	6801      	ldr	r1, [r0, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80019ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019f0:	f8d2 e000 	ldr.w	lr, [r2]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 80019f4:	3101      	adds	r1, #1
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80019f6:	4573      	cmp	r3, lr
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 80019f8:	6001      	str	r1, [r0, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80019fa:	4820      	ldr	r0, [pc, #128]	; (8001a7c <xTaskGenericCreate+0x1a4>)
 80019fc:	bf88      	it	hi
 80019fe:	6013      	strhi	r3, [r2, #0]
 8001a00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a04:	eb00 0083 	add.w	r0, r0, r3, lsl #2
			uxTaskNumber++;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001a08:	6421      	str	r1, [r4, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001a0a:	4649      	mov	r1, r9
 8001a0c:	f7ff f8d2 	bl	8000bb4 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8001a10:	f001 fbca 	bl	80031a8 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	b11b      	cbz	r3, 8001a20 <xTaskGenericCreate+0x148>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8001a18:	682b      	ldr	r3, [r5, #0]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	429e      	cmp	r6, r3
 8001a1e:	d805      	bhi.n	8001a2c <xTaskGenericCreate+0x154>
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
 8001a20:	2001      	movs	r0, #1
 8001a22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
 8001a26:	f001 fb8b 	bl	8003140 <ulPortSetInterruptMask>
 8001a2a:	e7fe      	b.n	8001a2a <xTaskGenericCreate+0x152>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
			{
				taskYIELD_IF_USING_PREEMPTION();
 8001a2c:	f001 fb7c 	bl	8003128 <vPortYield>
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
 8001a30:	2001      	movs	r0, #1
 8001a32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uxCurrentNumberOfTasks++;
			if( pxCurrentTCB == NULL )
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8001a36:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <xTaskGenericCreate+0x16a>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8001a3e:	f7ff ff1b 	bl	8001878 <prvInitialiseTaskLists>
 8001a42:	4f0b      	ldr	r7, [pc, #44]	; (8001a70 <xTaskGenericCreate+0x198>)
 8001a44:	e7d0      	b.n	80019e8 <xTaskGenericCreate+0x110>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a46:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8001a4a:	4658      	mov	r0, fp
 8001a4c:	f001 fc8c 	bl	8003368 <pvPortMalloc>
 8001a50:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8001a52:	2800      	cmp	r0, #0
 8001a54:	f47f af61 	bne.w	800191a <xTaskGenericCreate+0x42>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8001a58:	4620      	mov	r0, r4
 8001a5a:	f001 fcb3 	bl	80033c4 <vPortFree>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 8001a62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a66:	bf00      	nop
 8001a68:	20000180 	andcs	r0, r0, r0, lsl #3
 8001a6c:	20000184 	andcs	r0, r0, r4, lsl #3
 8001a70:	200000fc 	strdcs	r0, [r0], -ip
 8001a74:	200001a8 	andcs	r0, r0, r8, lsr #3
 8001a78:	200001ec 	andcs	r0, r0, ip, ror #3
 8001a7c:	20000118 	andcs	r0, r0, r8, lsl r1

08001a80 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8001a80:	b538      	push	{r3, r4, r5, lr}
 8001a82:	4604      	mov	r4, r0
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001a84:	f001 fb7e 	bl	8003184 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001a88:	2c00      	cmp	r4, #0
 8001a8a:	d038      	beq.n	8001afe <vTaskDelete+0x7e>

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001a8c:	1d25      	adds	r5, r4, #4
 8001a8e:	4628      	mov	r0, r5
 8001a90:	f7ff f8b8 	bl	8000c04 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a96:	b11b      	cbz	r3, 8001aa0 <vTaskDelete+0x20>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a98:	f104 0018 	add.w	r0, r4, #24
 8001a9c:	f7ff f8b2 	bl	8000c04 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	4818      	ldr	r0, [pc, #96]	; (8001b04 <vTaskDelete+0x84>)
 8001aa4:	f7ff f886 	bl	8000bb4 <vListInsertEnd>
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <vTaskDelete+0x88>)
			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8001aaa:	4a18      	ldr	r2, [pc, #96]	; (8001b0c <vTaskDelete+0x8c>)

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8001aac:	6819      	ldr	r1, [r3, #0]
			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8001aae:	6810      	ldr	r0, [r2, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8001ab0:	3101      	adds	r1, #1
			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8001ab2:	3001      	adds	r0, #1

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8001ab4:	6019      	str	r1, [r3, #0]
			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8001ab6:	6010      	str	r0, [r2, #0]
			can detect that the task lists need re-generating. */
			uxTaskNumber++;

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8001ab8:	f001 fb76 	bl	80031a8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <vTaskDelete+0x90>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	b193      	cbz	r3, 8001ae8 <vTaskDelete+0x68>
		{
			if( pxTCB == pxCurrentTCB )
 8001ac2:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <vTaskDelete+0x94>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	429c      	cmp	r4, r3
 8001ac8:	d00f      	beq.n	8001aea <vTaskDelete+0x6a>

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <vTaskDelete+0x98>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	b922      	cbnz	r2, 8001adc <vTaskDelete+0x5c>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <vTaskDelete+0x9c>)
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	bd38      	pop	{r3, r4, r5, pc}
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001adc:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <vTaskDelete+0x9c>)
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ae0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8001ae2:	68d2      	ldr	r2, [r2, #12]
 8001ae4:	6852      	ldr	r2, [r2, #4]
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	bd38      	pop	{r3, r4, r5, pc}
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
		{
			if( pxTCB == pxCurrentTCB )
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8001aea:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <vTaskDelete+0xa0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	b113      	cbz	r3, 8001af6 <vTaskDelete+0x76>
 8001af0:	f001 fb26 	bl	8003140 <ulPortSetInterruptMask>
 8001af4:	e7fe      	b.n	8001af4 <vTaskDelete+0x74>
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
			}
		}
	}
 8001af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
 8001afa:	f001 bb15 	b.w	8003128 <vPortYield>

		taskENTER_CRITICAL();
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <vTaskDelete+0x94>)
 8001b00:	681c      	ldr	r4, [r3, #0]
 8001b02:	e7c3      	b.n	8001a8c <vTaskDelete+0xc>
 8001b04:	20000104 	andcs	r0, r0, r4, lsl #2
 8001b08:	200001a8 	andcs	r0, r0, r8, lsr #3
 8001b0c:	20000100 	andcs	r0, r0, r0, lsl #2
 8001b10:	200000fc 	strdcs	r0, [r0], -ip
 8001b14:	20000184 	andcs	r0, r0, r4, lsl #3
 8001b18:	200000f8 	strdcs	r0, [r0], -r8
 8001b1c:	20000014 	andcs	r0, r0, r4, lsl r0
 8001b20:	2000017c 	andcs	r0, r0, ip, ror r1

08001b24 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 8001b24:	b510      	push	{r4, lr}
 8001b26:	4604      	mov	r4, r0
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8001b28:	f001 fb2c 	bl	8003184 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001b2c:	b124      	cbz	r4, 8001b38 <uxTaskPriorityGet+0x14>
			uxReturn = pxTCB->uxPriority;
 8001b2e:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		}
		taskEXIT_CRITICAL();
 8001b30:	f001 fb3a 	bl	80031a8 <vPortExitCritical>

		return uxReturn;
	}
 8001b34:	4620      	mov	r0, r4
 8001b36:	bd10      	pop	{r4, pc}

		taskENTER_CRITICAL();
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <uxTaskPriorityGet+0x24>)
 8001b3a:	681c      	ldr	r4, [r3, #0]
			uxReturn = pxTCB->uxPriority;
 8001b3c:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		}
		taskEXIT_CRITICAL();
 8001b3e:	f001 fb33 	bl	80031a8 <vPortExitCritical>

		return uxReturn;
	}
 8001b42:	4620      	mov	r0, r4
 8001b44:	bd10      	pop	{r4, pc}
 8001b46:	bf00      	nop
 8001b48:	20000184 	andcs	r0, r0, r4, lsl #3

08001b4c <vTaskPrioritySet>:
	{
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8001b4c:	2904      	cmp	r1, #4
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8001b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b50:	460d      	mov	r5, r1
 8001b52:	4604      	mov	r4, r0
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8001b54:	d82f      	bhi.n	8001bb6 <vTaskPrioritySet+0x6a>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8001b56:	f001 fb15 	bl	8003184 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001b5a:	2c00      	cmp	r4, #0
 8001b5c:	d02e      	beq.n	8001bbc <vTaskPrioritySet+0x70>

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8001b5e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8001b60:	4295      	cmp	r5, r2
 8001b62:	d01f      	beq.n	8001ba4 <vTaskPrioritySet+0x58>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
				{
					if( pxTCB != pxCurrentTCB )
 8001b64:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <vTaskPrioritySet+0xac>)

			if( uxCurrentBasePriority != uxNewPriority )
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8001b66:	d921      	bls.n	8001bac <vTaskPrioritySet+0x60>
				{
					if( pxTCB != pxCurrentTCB )
 8001b68:	6819      	ldr	r1, [r3, #0]
 8001b6a:	428c      	cmp	r4, r1
 8001b6c:	d041      	beq.n	8001bf2 <vTaskPrioritySet+0xa6>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8001b72:	42b5      	cmp	r5, r6
 8001b74:	bf34      	ite	cc
 8001b76:	2600      	movcc	r6, #0
 8001b78:	2601      	movcs	r6, #1
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001b7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001b7c:	4f1f      	ldr	r7, [pc, #124]	; (8001bfc <vTaskPrioritySet+0xb0>)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8001b7e:	64a5      	str	r5, [r4, #72]	; 0x48

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8001b80:	429a      	cmp	r2, r3
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001b82:	69a2      	ldr	r2, [r4, #24]
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
					{
						pxTCB->uxPriority = uxNewPriority;
 8001b84:	bf08      	it	eq
 8001b86:	62e5      	streq	r5, [r4, #44]	; 0x2c

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001b88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001b8c:	2a00      	cmp	r2, #0

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001b8e:	6962      	ldr	r2, [r4, #20]

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b90:	bfa8      	it	ge
 8001b92:	f1c5 0505 	rsbge	r5, r5, #5

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001b96:	eb07 0383 	add.w	r3, r7, r3, lsl #2

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b9a:	bfa8      	it	ge
 8001b9c:	61a5      	strge	r5, [r4, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d015      	beq.n	8001bce <vTaskPrioritySet+0x82>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired == pdTRUE )
 8001ba2:	b976      	cbnz	r6, 8001bc2 <vTaskPrioritySet+0x76>
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
	}
 8001ba4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8001ba8:	f001 bafe 	b.w	80031a8 <vPortExitCritical>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8001bac:	681e      	ldr	r6, [r3, #0]
 8001bae:	1ba3      	subs	r3, r4, r6
 8001bb0:	425e      	negs	r6, r3
 8001bb2:	415e      	adcs	r6, r3
 8001bb4:	e7e1      	b.n	8001b7a <vTaskPrioritySet+0x2e>
	{
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8001bb6:	f001 fac3 	bl	8003140 <ulPortSetInterruptMask>
 8001bba:	e7fe      	b.n	8001bba <vTaskPrioritySet+0x6e>

		taskENTER_CRITICAL();
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <vTaskPrioritySet+0xac>)
 8001bbe:	681c      	ldr	r4, [r3, #0]
 8001bc0:	e7cd      	b.n	8001b5e <vTaskPrioritySet+0x12>
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired == pdTRUE )
				{
					taskYIELD_IF_USING_PREEMPTION();
 8001bc2:	f001 fab1 	bl	8003128 <vPortYield>
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
	}
 8001bc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8001bca:	f001 baed 	b.w	80031a8 <vPortExitCritical>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001bce:	1d25      	adds	r5, r4, #4
 8001bd0:	4628      	mov	r0, r5
 8001bd2:	f7ff f817 	bl	8000c04 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <vTaskPrioritySet+0xb4>)
 8001bd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001bda:	6811      	ldr	r1, [r2, #0]
 8001bdc:	428b      	cmp	r3, r1
 8001bde:	d900      	bls.n	8001be2 <vTaskPrioritySet+0x96>
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8001be6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8001bea:	4629      	mov	r1, r5
 8001bec:	f7fe ffe2 	bl	8000bb4 <vListInsertEnd>
 8001bf0:	e7d7      	b.n	8001ba2 <vTaskPrioritySet+0x56>

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8001bf2:	2600      	movs	r6, #0
 8001bf4:	e7c1      	b.n	8001b7a <vTaskPrioritySet+0x2e>
 8001bf6:	bf00      	nop
 8001bf8:	20000184 	andcs	r0, r0, r4, lsl #3
 8001bfc:	20000118 	andcs	r0, r0, r8, lsl r1
 8001c00:	200001ec 	andcs	r0, r0, ip, ror #3

08001c04 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8001c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c06:	4604      	mov	r4, r0

		taskENTER_CRITICAL();
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001c08:	4d3b      	ldr	r5, [pc, #236]	; (8001cf8 <vTaskSuspend+0xf4>)

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001c0a:	f001 fabb 	bl	8003184 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001c0e:	2c00      	cmp	r4, #0
 8001c10:	d02f      	beq.n	8001c72 <vTaskSuspend+0x6e>

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001c12:	1d26      	adds	r6, r4, #4
 8001c14:	4630      	mov	r0, r6
 8001c16:	f7fe fff5 	bl	8000c04 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001c1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c1c:	b11b      	cbz	r3, 8001c26 <vTaskSuspend+0x22>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c1e:	f104 0018 	add.w	r0, r4, #24
 8001c22:	f7fe ffef 	bl	8000c04 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 8001c26:	4f35      	ldr	r7, [pc, #212]	; (8001cfc <vTaskSuspend+0xf8>)
 8001c28:	4631      	mov	r1, r6
 8001c2a:	4638      	mov	r0, r7
 8001c2c:	f7fe ffc2 	bl	8000bb4 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8001c30:	f001 faba 	bl	80031a8 <vPortExitCritical>

		if( pxTCB == pxCurrentTCB )
 8001c34:	682b      	ldr	r3, [r5, #0]
 8001c36:	4a30      	ldr	r2, [pc, #192]	; (8001cf8 <vTaskSuspend+0xf4>)
 8001c38:	429c      	cmp	r4, r3
		{
			if( xSchedulerRunning != pdFALSE )
 8001c3a:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <vTaskSuspend+0xfc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
		}
		taskEXIT_CRITICAL();

		if( pxTCB == pxCurrentTCB )
 8001c3e:	d011      	beq.n	8001c64 <vTaskSuspend+0x60>
				}
			}
		}
		else
		{
			if( xSchedulerRunning != pdFALSE )
 8001c40:	b903      	cbnz	r3, 8001c44 <vTaskSuspend+0x40>
 8001c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c44:	4b2f      	ldr	r3, [pc, #188]	; (8001d04 <vTaskSuspend+0x100>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	b922      	cbnz	r2, 8001c56 <vTaskSuspend+0x52>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001c4c:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <vTaskSuspend+0x104>)
 8001c4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c56:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8001c58:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <vTaskSuspend+0x104>)
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c5a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8001c5c:	68d2      	ldr	r2, [r2, #12]
 8001c5e:	6852      	ldr	r2, [r2, #4]
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		taskEXIT_CRITICAL();

		if( pxTCB == pxCurrentTCB )
		{
			if( xSchedulerRunning != pdFALSE )
 8001c64:	b13b      	cbz	r3, 8001c76 <vTaskSuspend+0x72>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8001c66:	4b29      	ldr	r3, [pc, #164]	; (8001d0c <vTaskSuspend+0x108>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	b15b      	cbz	r3, 8001c84 <vTaskSuspend+0x80>
 8001c6c:	f001 fa68 	bl	8003140 <ulPortSetInterruptMask>
 8001c70:	e7fe      	b.n	8001c70 <vTaskSuspend+0x6c>

		taskENTER_CRITICAL();
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001c72:	682c      	ldr	r4, [r5, #0]
 8001c74:	e7cd      	b.n	8001c12 <vTaskSuspend+0xe>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8001c76:	4926      	ldr	r1, [pc, #152]	; (8001d10 <vTaskSuspend+0x10c>)
 8001c78:	6838      	ldr	r0, [r7, #0]
 8001c7a:	6809      	ldr	r1, [r1, #0]
 8001c7c:	4288      	cmp	r0, r1
 8001c7e:	d105      	bne.n	8001c8c <vTaskSuspend+0x88>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001c84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		{
			if( xSchedulerRunning != pdFALSE )
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 8001c88:	f001 ba4e 	b.w	8003128 <vPortYield>
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <vTaskSuspend+0x108>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2a00      	cmp	r2, #0
 8001c92:	d12a      	bne.n	8001cea <vTaskSuspend+0xe6>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8001c94:	491f      	ldr	r1, [pc, #124]	; (8001d14 <vTaskSuspend+0x110>)
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001c96:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <vTaskSuspend+0x114>)
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8001c98:	600a      	str	r2, [r1, #0]
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	491f      	ldr	r1, [pc, #124]	; (8001d1c <vTaskSuspend+0x118>)
 8001c9e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001ca2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ca6:	b97a      	cbnz	r2, 8001cc8 <vTaskSuspend+0xc4>
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	b912      	cbnz	r2, 8001cb4 <vTaskSuspend+0xb0>
 8001cae:	e020      	b.n	8001cf2 <vTaskSuspend+0xee>
 8001cb0:	6802      	ldr	r2, [r0, #0]
 8001cb2:	b1f2      	cbz	r2, 8001cf2 <vTaskSuspend+0xee>
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	3a01      	subs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001cc0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001cc4:	2a00      	cmp	r2, #0
 8001cc6:	d0f3      	beq.n	8001cb0 <vTaskSuspend+0xac>
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001cce:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001cd2:	f102 0108 	add.w	r1, r2, #8
 8001cd6:	6853      	ldr	r3, [r2, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	6053      	str	r3, [r2, #4]
 8001cdc:	428b      	cmp	r3, r1
 8001cde:	d101      	bne.n	8001ce4 <vTaskSuspend+0xe0>
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	6053      	str	r3, [r2, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	602b      	str	r3, [r5, #0]
 8001ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <vTaskSuspend+0x110>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001cf2:	f001 fa25 	bl	8003140 <ulPortSetInterruptMask>
 8001cf6:	e7fe      	b.n	8001cf6 <vTaskSuspend+0xf2>
 8001cf8:	20000184 	andcs	r0, r0, r4, lsl #3
 8001cfc:	200001d8 	ldrdcs	r0, [r0], -r8
 8001d00:	200000fc 	strdcs	r0, [r0], -ip
 8001d04:	200000f8 	strdcs	r0, [r0], -r8
 8001d08:	20000014 	andcs	r0, r0, r4, lsl r0
 8001d0c:	2000017c 	andcs	r0, r0, ip, ror r1
 8001d10:	20000180 	andcs	r0, r0, r0, lsl #3
 8001d14:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8001d18:	200001ec 	andcs	r0, r0, ip, ror #3
 8001d1c:	20000118 	andcs	r0, r0, r8, lsl r1

08001d20 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8001d20:	b570      	push	{r4, r5, r6, lr}
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8001d22:	4604      	mov	r4, r0
 8001d24:	b170      	cbz	r0, 8001d44 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8001d26:	4d19      	ldr	r5, [pc, #100]	; (8001d8c <vTaskResume+0x6c>)
 8001d28:	682b      	ldr	r3, [r5, #0]
 8001d2a:	4298      	cmp	r0, r3
 8001d2c:	d009      	beq.n	8001d42 <vTaskResume+0x22>
		{
			taskENTER_CRITICAL();
 8001d2e:	f001 fa29 	bl	8003184 <vPortEnterCritical>

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001d32:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <vTaskResume+0x70>)
 8001d34:	6963      	ldr	r3, [r4, #20]
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d007      	beq.n	8001d4a <vTaskResume+0x2a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001d3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8001d3e:	f001 ba33 	b.w	80031a8 <vPortExitCritical>
 8001d42:	bd70      	pop	{r4, r5, r6, pc}
	void vTaskResume( TaskHandle_t xTaskToResume )
	{
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8001d44:	f001 f9fc 	bl	8003140 <ulPortSetInterruptMask>
 8001d48:	e7fe      	b.n	8001d48 <vTaskResume+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001d4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d4c:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <vTaskResume+0x74>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d0f3      	beq.n	8001d3a <vTaskResume+0x1a>
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
		{
			taskENTER_CRITICAL();
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f1      	bne.n	8001d3a <vTaskResume+0x1a>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 8001d56:	1d26      	adds	r6, r4, #4
 8001d58:	4630      	mov	r0, r6
 8001d5a:	f7fe ff53 	bl	8000c04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001d5e:	4a0e      	ldr	r2, [pc, #56]	; (8001d98 <vTaskResume+0x78>)
 8001d60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d62:	6811      	ldr	r1, [r2, #0]
 8001d64:	480d      	ldr	r0, [pc, #52]	; (8001d9c <vTaskResume+0x7c>)
 8001d66:	428b      	cmp	r3, r1
 8001d68:	bf88      	it	hi
 8001d6a:	6013      	strhi	r3, [r2, #0]
 8001d6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d70:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001d74:	4631      	mov	r1, r6
 8001d76:	f7fe ff1d 	bl	8000bb4 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d7a:	682b      	ldr	r3, [r5, #0]
 8001d7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d3da      	bcc.n	8001d3a <vTaskResume+0x1a>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8001d84:	f001 f9d0 	bl	8003128 <vPortYield>
 8001d88:	e7d7      	b.n	8001d3a <vTaskResume+0x1a>
 8001d8a:	bf00      	nop
 8001d8c:	20000184 	andcs	r0, r0, r4, lsl #3
 8001d90:	200001d8 	ldrdcs	r0, [r0], -r8
 8001d94:	20000188 	andcs	r0, r0, r8, lsl #3
 8001d98:	200001ec 	andcs	r0, r0, ip, ror #3
 8001d9c:	20000118 	andcs	r0, r0, r8, lsl r1

08001da0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8001da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BaseType_t xYieldRequired = pdFALSE;
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8001da2:	4604      	mov	r4, r0
 8001da4:	b170      	cbz	r0, 8001dc4 <xTaskResumeFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001da6:	f001 fabd 	bl	8003324 <vPortValidateInterruptPriority>

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001daa:	f001 f9c9 	bl	8003140 <ulPortSetInterruptMask>

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001dae:	4a1f      	ldr	r2, [pc, #124]	; (8001e2c <xTaskResumeFromISR+0x8c>)
 8001db0:	6963      	ldr	r3, [r4, #20]
 8001db2:	4293      	cmp	r3, r2
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001db4:	4607      	mov	r7, r0

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001db6:	d008      	beq.n	8001dca <xTaskResumeFromISR+0x2a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001db8:	4638      	mov	r0, r7

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
 8001dba:	2500      	movs	r5, #0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001dbc:	f001 f9f0 	bl	80031a0 <vPortClearInterruptMask>

		return xYieldRequired;
	}
 8001dc0:	4628      	mov	r0, r5
 8001dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{
	BaseType_t xYieldRequired = pdFALSE;
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8001dc4:	f001 f9bc 	bl	8003140 <ulPortSetInterruptMask>
 8001dc8:	e7fe      	b.n	8001dc8 <xTaskResumeFromISR+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001dca:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001dcc:	4818      	ldr	r0, [pc, #96]	; (8001e30 <xTaskResumeFromISR+0x90>)
 8001dce:	4285      	cmp	r5, r0
 8001dd0:	d0f2      	beq.n	8001db8 <xTaskResumeFromISR+0x18>
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8001dd2:	2d00      	cmp	r5, #0
 8001dd4:	d1f0      	bne.n	8001db8 <xTaskResumeFromISR+0x18>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001dd6:	4a17      	ldr	r2, [pc, #92]	; (8001e34 <xTaskResumeFromISR+0x94>)
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	b9f2      	cbnz	r2, 8001e1a <xTaskResumeFromISR+0x7a>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ddc:	4a16      	ldr	r2, [pc, #88]	; (8001e38 <xTaskResumeFromISR+0x98>)
 8001dde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 8001de4:	1d26      	adds	r6, r4, #4
				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001de6:	42ab      	cmp	r3, r5
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 8001de8:	4630      	mov	r0, r6
				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001dea:	bf34      	ite	cc
 8001dec:	2500      	movcc	r5, #0
 8001dee:	2501      	movcs	r5, #1
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 8001df0:	f7fe ff08 	bl	8000c04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001df4:	4a11      	ldr	r2, [pc, #68]	; (8001e3c <xTaskResumeFromISR+0x9c>)
 8001df6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001df8:	6811      	ldr	r1, [r2, #0]
 8001dfa:	4811      	ldr	r0, [pc, #68]	; (8001e40 <xTaskResumeFromISR+0xa0>)
 8001dfc:	428b      	cmp	r3, r1
 8001dfe:	bf88      	it	hi
 8001e00:	6013      	strhi	r3, [r2, #0]
 8001e02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e06:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001e0a:	4631      	mov	r1, r6
 8001e0c:	f7fe fed2 	bl	8000bb4 <vListInsertEnd>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001e10:	4638      	mov	r0, r7
 8001e12:	f001 f9c5 	bl	80031a0 <vPortClearInterruptMask>

		return xYieldRequired;
	}
 8001e16:	4628      	mov	r0, r5
 8001e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8001e1a:	f104 0118 	add.w	r1, r4, #24
 8001e1e:	f7fe fec9 	bl	8000bb4 <vListInsertEnd>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001e22:	4638      	mov	r0, r7
 8001e24:	f001 f9bc 	bl	80031a0 <vPortClearInterruptMask>

		return xYieldRequired;
	}
 8001e28:	4628      	mov	r0, r5
 8001e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e2c:	200001d8 	ldrdcs	r0, [r0], -r8
 8001e30:	20000188 	andcs	r0, r0, r8, lsl #3
 8001e34:	2000017c 	andcs	r0, r0, ip, ror r1
 8001e38:	20000184 	andcs	r0, r0, r4, lsl #3
 8001e3c:	200001ec 	andcs	r0, r0, ip, ror #3
 8001e40:	20000118 	andcs	r0, r0, r8, lsl r1

08001e44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8001e48:	204c      	movs	r0, #76	; 0x4c
 8001e4a:	f001 fa8d 	bl	8003368 <pvPortMalloc>

	if( pxNewTCB != NULL )
 8001e4e:	4604      	mov	r4, r0
 8001e50:	2800      	cmp	r0, #0
 8001e52:	d070      	beq.n	8001f36 <vTaskStartScheduler+0xf2>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e54:	f44f 7002 	mov.w	r0, #520	; 0x208
 8001e58:	f001 fa86 	bl	8003368 <pvPortMalloc>
 8001e5c:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8001e5e:	2800      	cmp	r0, #0
 8001e60:	d06e      	beq.n	8001f40 <vTaskStartScheduler+0xfc>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8001e62:	21a5      	movs	r1, #165	; 0xa5
 8001e64:	f44f 7202 	mov.w	r2, #520	; 0x208
 8001e68:	f003 f9fa 	bl	8005260 <memset>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 8001e6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
			if( pxCurrentTCB == NULL )
 8001e6e:	4d3b      	ldr	r5, [pc, #236]	; (8001f5c <vTaskStartScheduler+0x118>)
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001e70:	f04f 0e49 	mov.w	lr, #73	; 0x49
 8001e74:	2600      	movs	r6, #0
 8001e76:	214c      	movs	r1, #76	; 0x4c
 8001e78:	2245      	movs	r2, #69	; 0x45
 8001e7a:	2044      	movs	r0, #68	; 0x44
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001e7c:	1d27      	adds	r7, r4, #4
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 8001e7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001e82:	f884 e034 	strb.w	lr, [r4, #52]	; 0x34
 8001e86:	f884 1036 	strb.w	r1, [r4, #54]	; 0x36
 8001e8a:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
 8001e8e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8001e92:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001e96:	4638      	mov	r0, r7
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e98:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8001e9c:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8001e9e:	64a6      	str	r6, [r4, #72]	; 0x48
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001ea0:	f023 0807 	bic.w	r8, r3, #7
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001ea4:	f7fe fe82 	bl	8000bac <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8001ea8:	f104 0018 	add.w	r0, r4, #24
 8001eac:	f7fe fe7e 	bl	8000bac <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001eb0:	2305      	movs	r3, #5
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001eb2:	4632      	mov	r2, r6
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001eb4:	61a3      	str	r3, [r4, #24]
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001eb6:	492a      	ldr	r1, [pc, #168]	; (8001f60 <vTaskStartScheduler+0x11c>)
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8001eb8:	6124      	str	r4, [r4, #16]
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001eba:	4640      	mov	r0, r8
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8001ebc:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ebe:	f001 f90d 	bl	80030dc <pxPortInitialiseStack>
 8001ec2:	6020      	str	r0, [r4, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8001ec4:	f001 f95e 	bl	8003184 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8001ec8:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <vTaskStartScheduler+0x120>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	3201      	adds	r2, #1
 8001ece:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8001ed0:	682a      	ldr	r2, [r5, #0]
 8001ed2:	2a00      	cmp	r2, #0
 8001ed4:	d039      	beq.n	8001f4a <vTaskStartScheduler+0x106>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8001ed6:	4e24      	ldr	r6, [pc, #144]	; (8001f68 <vTaskStartScheduler+0x124>)
 8001ed8:	6833      	ldr	r3, [r6, #0]
 8001eda:	b91b      	cbnz	r3, 8001ee4 <vTaskStartScheduler+0xa0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8001edc:	682b      	ldr	r3, [r5, #0]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	b903      	cbnz	r3, 8001ee4 <vTaskStartScheduler+0xa0>
					{
						pxCurrentTCB = pxNewTCB;
 8001ee2:	602c      	str	r4, [r5, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8001ee4:	4821      	ldr	r0, [pc, #132]	; (8001f6c <vTaskStartScheduler+0x128>)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001ee6:	4a22      	ldr	r2, [pc, #136]	; (8001f70 <vTaskStartScheduler+0x12c>)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8001ee8:	6801      	ldr	r1, [r0, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001eea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001eec:	f8d2 e000 	ldr.w	lr, [r2]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8001ef0:	3101      	adds	r1, #1
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001ef2:	4573      	cmp	r3, lr
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8001ef4:	6001      	str	r1, [r0, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001ef6:	481f      	ldr	r0, [pc, #124]	; (8001f74 <vTaskStartScheduler+0x130>)
 8001ef8:	bf88      	it	hi
 8001efa:	6013      	strhi	r3, [r2, #0]
 8001efc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f00:	eb00 0083 	add.w	r0, r0, r3, lsl #2
			uxTaskNumber++;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001f04:	6421      	str	r1, [r4, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001f06:	4639      	mov	r1, r7
 8001f08:	f7fe fe54 	bl	8000bb4 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8001f0c:	f001 f94c 	bl	80031a8 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 8001f10:	6833      	ldr	r3, [r6, #0]
 8001f12:	b103      	cbz	r3, 8001f16 <vTaskStartScheduler+0xd2>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8001f14:	682b      	ldr	r3, [r5, #0]

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
		{
			xReturn = xTimerCreateTimerTask();
 8001f16:	f000 fe81 	bl	8002c1c <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001f1a:	2801      	cmp	r0, #1

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
		{
			xReturn = xTimerCreateTimerTask();
 8001f1c:	4604      	mov	r4, r0
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001f1e:	d109      	bne.n	8001f34 <vTaskStartScheduler+0xf0>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8001f20:	f001 f90e 	bl	8003140 <ulPortSetInterruptMask>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
		xTickCount = ( TickType_t ) 0U;
 8001f24:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <vTaskStartScheduler+0x134>)
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 8001f26:	6034      	str	r4, [r6, #0]
		xTickCount = ( TickType_t ) 0U;
 8001f28:	2200      	movs	r2, #0
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8001f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
		xTickCount = ( TickType_t ) 0U;
 8001f2e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001f30:	f001 b9a2 	b.w	8003278 <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8001f34:	b10c      	cbz	r4, 8001f3a <vTaskStartScheduler+0xf6>
 8001f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f3a:	f001 f901 	bl	8003140 <ulPortSetInterruptMask>
 8001f3e:	e7fe      	b.n	8001f3e <vTaskStartScheduler+0xfa>
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

		if( pxNewTCB->pxStack == NULL )
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8001f40:	4620      	mov	r0, r4
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8001f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

		if( pxNewTCB->pxStack == NULL )
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8001f46:	f001 ba3d 	b.w	80033c4 <vPortFree>
			uxCurrentNumberOfTasks++;
			if( pxCurrentTCB == NULL )
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8001f4a:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <vTaskStartScheduler+0x112>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8001f52:	f7ff fc91 	bl	8001878 <prvInitialiseTaskLists>
 8001f56:	4e04      	ldr	r6, [pc, #16]	; (8001f68 <vTaskStartScheduler+0x124>)
 8001f58:	e7c4      	b.n	8001ee4 <vTaskStartScheduler+0xa0>
 8001f5a:	bf00      	nop
 8001f5c:	20000184 	andcs	r0, r0, r4, lsl #3
 8001f60:	08002341 	stmdaeq	r0, {r0, r6, r8, r9, sp}
 8001f64:	20000180 	andcs	r0, r0, r0, lsl #3
 8001f68:	200000fc 	strdcs	r0, [r0], -ip
 8001f6c:	200001a8 	andcs	r0, r0, r8, lsr #3
 8001f70:	200001ec 	andcs	r0, r0, ip, ror #3
 8001f74:	20000118 	andcs	r0, r0, r8, lsl r1
 8001f78:	200001a0 	andcs	r0, r0, r0, lsr #3

08001f7c <vTaskEndScheduler>:
	}
}
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8001f7c:	b508      	push	{r3, lr}
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
 8001f7e:	f001 f8df 	bl	8003140 <ulPortSetInterruptMask>
	xSchedulerRunning = pdFALSE;
 8001f82:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <vTaskEndScheduler+0x14>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
}
 8001f88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
	vPortEndScheduler();
 8001f8c:	f001 b8ee 	b.w	800316c <vPortEndScheduler>
 8001f90:	200000fc 	strdcs	r0, [r0], -ip

08001f94 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001f94:	4b02      	ldr	r3, [pc, #8]	; (8001fa0 <vTaskSuspendAll+0xc>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	3201      	adds	r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	2000017c 	andcs	r0, r0, ip, ror r1

08001fa4 <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001fa4:	b510      	push	{r4, lr}
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8001fa6:	f001 f8ed 	bl	8003184 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8001faa:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <xTaskGetTickCount+0x14>)
 8001fac:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8001fae:	f001 f8fb 	bl	80031a8 <vPortExitCritical>

	return xTicks;
}
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	bd10      	pop	{r4, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200001a0 	andcs	r0, r0, r0, lsr #3

08001fbc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001fbc:	b510      	push	{r4, lr}
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001fbe:	f001 f9b1 	bl	8003324 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001fc2:	f001 f8bd 	bl	8003140 <ulPortSetInterruptMask>
	{
		xReturn = xTickCount;
 8001fc6:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <xTaskGetTickCountFromISR+0x18>)
 8001fc8:	681c      	ldr	r4, [r3, #0]
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001fca:	f001 f8e9 	bl	80031a0 <vPortClearInterruptMask>

	return xReturn;
}
 8001fce:	4620      	mov	r0, r4
 8001fd0:	bd10      	pop	{r4, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200001a0 	andcs	r0, r0, r0, lsr #3

08001fd8 <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 8001fd8:	4b01      	ldr	r3, [pc, #4]	; (8001fe0 <uxTaskGetNumberOfTasks+0x8>)
 8001fda:	6818      	ldr	r0, [r3, #0]
}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000180 	andcs	r0, r0, r0, lsl #3

08001fe4 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001fe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fe8:	4b44      	ldr	r3, [pc, #272]	; (80020fc <xTaskIncrementTick+0x118>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d150      	bne.n	8002092 <xTaskIncrementTick+0xae>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8001ff0:	4b43      	ldr	r3, [pc, #268]	; (8002100 <xTaskIncrementTick+0x11c>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	3201      	adds	r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8001ff8:	681f      	ldr	r7, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
 8001ffa:	2f00      	cmp	r7, #0
 8001ffc:	d056      	beq.n	80020ac <xTaskIncrementTick+0xc8>
 8001ffe:	f8df b120 	ldr.w	fp, [pc, #288]	; 8002120 <xTaskIncrementTick+0x13c>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8002002:	f8db 2000 	ldr.w	r2, [fp]
 8002006:	4d3f      	ldr	r5, [pc, #252]	; (8002104 <xTaskIncrementTick+0x120>)
 8002008:	4e3f      	ldr	r6, [pc, #252]	; (8002108 <xTaskIncrementTick+0x124>)
 800200a:	4297      	cmp	r7, r2
 800200c:	d355      	bcc.n	80020ba <xTaskIncrementTick+0xd6>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 800200e:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8002124 <xTaskIncrementTick+0x140>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8002012:	2400      	movs	r4, #0
 8002014:	e02a      	b.n	800206c <xTaskIncrementTick+0x88>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002016:	4b3d      	ldr	r3, [pc, #244]	; (800210c <xTaskIncrementTick+0x128>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68d2      	ldr	r2, [r2, #12]
 800201c:	f8d2 800c 	ldr.w	r8, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8002020:	f8d8 1004 	ldr.w	r1, [r8, #4]
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002024:	f108 0a04 	add.w	sl, r8, #4
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );

						if( xConstTickCount < xItemValue )
 8002028:	428f      	cmp	r7, r1
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800202a:	4650      	mov	r0, sl
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );

						if( xConstTickCount < xItemValue )
 800202c:	d35c      	bcc.n	80020e8 <xTaskIncrementTick+0x104>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800202e:	f7fe fde9 	bl	8000c04 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002032:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002036:	f108 0018 	add.w	r0, r8, #24
						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800203a:	b109      	cbz	r1, 8002040 <xTaskIncrementTick+0x5c>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800203c:	f7fe fde2 	bl	8000c04 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8002040:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8002044:	f8d9 2000 	ldr.w	r2, [r9]
 8002048:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800204c:	4293      	cmp	r3, r2
 800204e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8002052:	4651      	mov	r1, sl
 8002054:	bf88      	it	hi
 8002056:	f8c9 3000 	strhi.w	r3, [r9]
 800205a:	f7fe fdab 	bl	8000bb4 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800205e:	6830      	ldr	r0, [r6, #0]
 8002060:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8002064:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 8002066:	4291      	cmp	r1, r2
 8002068:	bf28      	it	cs
 800206a:	2401      	movcs	r4, #1
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800206c:	4b27      	ldr	r3, [pc, #156]	; (800210c <xTaskIncrementTick+0x128>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	2a00      	cmp	r2, #0
 8002074:	d1cf      	bne.n	8002016 <xTaskIncrementTick+0x32>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8002076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800207a:	f8cb 2000 	str.w	r2, [fp]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800207e:	6833      	ldr	r3, [r6, #0]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002086:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
 800208a:	2b02      	cmp	r3, #2
 800208c:	bf28      	it	cs
 800208e:	2401      	movcs	r4, #1
 8002090:	e004      	b.n	800209c <xTaskIncrementTick+0xb8>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002092:	4b1f      	ldr	r3, [pc, #124]	; (8002110 <xTaskIncrementTick+0x12c>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	3201      	adds	r2, #1
 8002098:	601a      	str	r2, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800209a:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800209c:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <xTaskIncrementTick+0x130>)
 800209e:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf18      	it	ne
 80020a4:	2401      	movne	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 80020a6:	4620      	mov	r0, r4
 80020a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			block. */
			const TickType_t xConstTickCount = xTickCount;

			if( xConstTickCount == ( TickType_t ) 0U )
			{
				taskSWITCH_DELAYED_LISTS();
 80020ac:	4b17      	ldr	r3, [pc, #92]	; (800210c <xTaskIncrementTick+0x128>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	b122      	cbz	r2, 80020be <xTaskIncrementTick+0xda>
 80020b4:	f001 f844 	bl	8003140 <ulPortSetInterruptMask>
 80020b8:	e7fe      	b.n	80020b8 <xTaskIncrementTick+0xd4>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80020ba:	2400      	movs	r4, #0
 80020bc:	e7df      	b.n	800207e <xTaskIncrementTick+0x9a>
			block. */
			const TickType_t xConstTickCount = xTickCount;

			if( xConstTickCount == ( TickType_t ) 0U )
			{
				taskSWITCH_DELAYED_LISTS();
 80020be:	4916      	ldr	r1, [pc, #88]	; (8002118 <xTaskIncrementTick+0x134>)
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	4a16      	ldr	r2, [pc, #88]	; (800211c <xTaskIncrementTick+0x138>)
 80020c4:	680c      	ldr	r4, [r1, #0]
 80020c6:	601c      	str	r4, [r3, #0]
 80020c8:	6008      	str	r0, [r1, #0]
 80020ca:	6811      	ldr	r1, [r2, #0]
 80020cc:	3101      	adds	r1, #1
 80020ce:	6011      	str	r1, [r2, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	b15a      	cbz	r2, 80020ee <xTaskIncrementTick+0x10a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80020d6:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 80020d8:	f8df b044 	ldr.w	fp, [pc, #68]	; 8002120 <xTaskIncrementTick+0x13c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80020dc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 80020de:	68d2      	ldr	r2, [r2, #12]
 80020e0:	6852      	ldr	r2, [r2, #4]
 80020e2:	f8cb 2000 	str.w	r2, [fp]
 80020e6:	e78c      	b.n	8002002 <xTaskIncrementTick+0x1e>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 80020e8:	f8cb 1000 	str.w	r1, [fp]
							break;
 80020ec:	e7c7      	b.n	800207e <xTaskIncrementTick+0x9a>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80020ee:	f8df b030 	ldr.w	fp, [pc, #48]	; 8002120 <xTaskIncrementTick+0x13c>
 80020f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020f6:	f8cb 2000 	str.w	r2, [fp]
 80020fa:	e782      	b.n	8002002 <xTaskIncrementTick+0x1e>
 80020fc:	2000017c 	andcs	r0, r0, ip, ror r1
 8002100:	200001a0 	andcs	r0, r0, r0, lsr #3
 8002104:	20000118 	andcs	r0, r0, r8, lsl r1
 8002108:	20000184 	andcs	r0, r0, r4, lsl #3
 800210c:	200000f8 	strdcs	r0, [r0], -r8
 8002110:	200001d4 	ldrdcs	r0, [r0], -r4
 8002114:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8002118:	200001a4 	andcs	r0, r0, r4, lsr #3
 800211c:	2000019c 	mulcs	r0, ip, r1
 8002120:	20000014 	andcs	r0, r0, r4, lsl r0
 8002124:	200001ec 	andcs	r0, r0, ip, ror #3

08002128 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800212c:	4c30      	ldr	r4, [pc, #192]	; (80021f0 <xTaskResumeAll+0xc8>)
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	b913      	cbnz	r3, 8002138 <xTaskResumeAll+0x10>
 8002132:	f001 f805 	bl	8003140 <ulPortSetInterruptMask>
 8002136:	e7fe      	b.n	8002136 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002138:	f001 f824 	bl	8003184 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800213c:	6823      	ldr	r3, [r4, #0]
 800213e:	3b01      	subs	r3, #1
 8002140:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d136      	bne.n	80021b6 <xTaskResumeAll+0x8e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002148:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <xTaskResumeAll+0xcc>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d032      	beq.n	80021b6 <xTaskResumeAll+0x8e>
 8002150:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8002204 <xTaskResumeAll+0xdc>
 8002154:	4d28      	ldr	r5, [pc, #160]	; (80021f8 <xTaskResumeAll+0xd0>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8002156:	4e29      	ldr	r6, [pc, #164]	; (80021fc <xTaskResumeAll+0xd4>)
 8002158:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8002208 <xTaskResumeAll+0xe0>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800215c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800220c <xTaskResumeAll+0xe4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002160:	46d8      	mov	r8, fp
 8002162:	e01e      	b.n	80021a2 <xTaskResumeAll+0x7a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002164:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8002168:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800216a:	1d27      	adds	r7, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800216c:	f104 0018 	add.w	r0, r4, #24
 8002170:	f7fe fd48 	bl	8000c04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002174:	4638      	mov	r0, r7
 8002176:	f7fe fd45 	bl	8000c04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800217a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800217c:	6832      	ldr	r2, [r6, #0]
 800217e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002182:	4293      	cmp	r3, r2
 8002184:	4639      	mov	r1, r7
 8002186:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800218a:	bf88      	it	hi
 800218c:	6033      	strhi	r3, [r6, #0]
 800218e:	f7fe fd11 	bl	8000bb4 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002192:	f8d9 3000 	ldr.w	r3, [r9]
 8002196:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	429a      	cmp	r2, r3
					{
						xYieldPending = pdTRUE;
 800219c:	bf24      	itt	cs
 800219e:	2301      	movcs	r3, #1
 80021a0:	602b      	strcs	r3, [r5, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80021a2:	f8db 3000 	ldr.w	r3, [fp]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1dc      	bne.n	8002164 <xTaskResumeAll+0x3c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 80021aa:	4c15      	ldr	r4, [pc, #84]	; (8002200 <xTaskResumeAll+0xd8>)
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	b943      	cbnz	r3, 80021c2 <xTaskResumeAll+0x9a>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 80021b0:	682c      	ldr	r4, [r5, #0]
 80021b2:	2c01      	cmp	r4, #1
 80021b4:	d014      	beq.n	80021e0 <xTaskResumeAll+0xb8>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 80021b6:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80021b8:	f000 fff6 	bl	80031a8 <vPortExitCritical>

	return xAlreadyYielded;
}
 80021bc:	4620      	mov	r0, r4
 80021be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f3      	beq.n	80021b0 <xTaskResumeAll+0x88>
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 80021c8:	2601      	movs	r6, #1
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
 80021ca:	f7ff ff0b 	bl	8001fe4 <xTaskIncrementTick>
 80021ce:	b100      	cbz	r0, 80021d2 <xTaskResumeAll+0xaa>
						{
							xYieldPending = pdTRUE;
 80021d0:	602e      	str	r6, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 80021d2:	6823      	ldr	r3, [r4, #0]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 80021d8:	6823      	ldr	r3, [r4, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f5      	bne.n	80021ca <xTaskResumeAll+0xa2>
 80021de:	e7e7      	b.n	80021b0 <xTaskResumeAll+0x88>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80021e0:	f000 ffa2 	bl	8003128 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80021e4:	f000 ffe0 	bl	80031a8 <vPortExitCritical>

	return xAlreadyYielded;
}
 80021e8:	4620      	mov	r0, r4
 80021ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021ee:	bf00      	nop
 80021f0:	2000017c 	andcs	r0, r0, ip, ror r1
 80021f4:	20000180 	andcs	r0, r0, r0, lsl #3
 80021f8:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 80021fc:	200001ec 	andcs	r0, r0, ip, ror #3
 8002200:	200001d4 	ldrdcs	r0, [r0], -r4
 8002204:	20000188 	andcs	r0, r0, r8, lsl #3
 8002208:	20000118 	andcs	r0, r0, r8, lsl r1
 800220c:	20000184 	andcs	r0, r0, r4, lsl #3

08002210 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8002210:	b570      	push	{r4, r5, r6, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
 8002212:	2800      	cmp	r0, #0
 8002214:	d03e      	beq.n	8002294 <vTaskDelayUntil+0x84>
		configASSERT( ( xTimeIncrement > 0U ) );
 8002216:	2900      	cmp	r1, #0
 8002218:	d039      	beq.n	800228e <vTaskDelayUntil+0x7e>
		configASSERT( uxSchedulerSuspended == 0 );
 800221a:	4a23      	ldr	r2, [pc, #140]	; (80022a8 <vTaskDelayUntil+0x98>)
 800221c:	6813      	ldr	r3, [r2, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d132      	bne.n	8002288 <vTaskDelayUntil+0x78>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002222:	6814      	ldr	r4, [r2, #0]

		vTaskSuspendAll();
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8002224:	4e21      	ldr	r6, [pc, #132]	; (80022ac <vTaskDelayUntil+0x9c>)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002226:	6803      	ldr	r3, [r0, #0]
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002228:	3401      	adds	r4, #1
 800222a:	6014      	str	r4, [r2, #0]

		vTaskSuspendAll();
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800222c:	6832      	ldr	r2, [r6, #0]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;

			if( xConstTickCount < *pxPreviousWakeTime )
 800222e:	429a      	cmp	r2, r3
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002230:	eb03 0401 	add.w	r4, r3, r1

			if( xConstTickCount < *pxPreviousWakeTime )
 8002234:	d31d      	bcc.n	8002272 <vTaskDelayUntil+0x62>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002236:	42a3      	cmp	r3, r4
 8002238:	d801      	bhi.n	800223e <vTaskDelayUntil+0x2e>
 800223a:	42a2      	cmp	r2, r4
 800223c:	d21b      	bcs.n	8002276 <vTaskDelayUntil+0x66>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800223e:	4d1c      	ldr	r5, [pc, #112]	; (80022b0 <vTaskDelayUntil+0xa0>)
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8002240:	6004      	str	r4, [r0, #0]
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002242:	6828      	ldr	r0, [r5, #0]
 8002244:	3004      	adds	r0, #4
 8002246:	f7fe fcdd 	bl	8000c04 <uxListRemove>
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800224a:	682a      	ldr	r2, [r5, #0]

	if( xTimeToWake < xTickCount )
 800224c:	6833      	ldr	r3, [r6, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800224e:	6054      	str	r4, [r2, #4]

	if( xTimeToWake < xTickCount )
 8002250:	429c      	cmp	r4, r3
 8002252:	d322      	bcc.n	800229a <vTaskDelayUntil+0x8a>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002254:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <vTaskDelayUntil+0xa4>)
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	6829      	ldr	r1, [r5, #0]
 800225a:	3104      	adds	r1, #4
 800225c:	f7fe fcb8 	bl	8000bd0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8002260:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <vTaskDelayUntil+0xa8>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 8002266:	bf38      	it	cc
 8002268:	601c      	strcc	r4, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800226a:	f7ff ff5d 	bl	8002128 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800226e:	b138      	cbz	r0, 8002280 <vTaskDelayUntil+0x70>
 8002270:	bd70      	pop	{r4, r5, r6, pc}
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002272:	42a3      	cmp	r3, r4
 8002274:	d8e1      	bhi.n	800223a <vTaskDelayUntil+0x2a>
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8002276:	6004      	str	r4, [r0, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8002278:	f7ff ff56 	bl	8002128 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800227c:	2800      	cmp	r0, #0
 800227e:	d1f7      	bne.n	8002270 <vTaskDelayUntil+0x60>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 8002284:	f000 bf50 	b.w	8003128 <vPortYield>
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );
 8002288:	f000 ff5a 	bl	8003140 <ulPortSetInterruptMask>
 800228c:	e7fe      	b.n	800228c <vTaskDelayUntil+0x7c>
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
 800228e:	f000 ff57 	bl	8003140 <ulPortSetInterruptMask>
 8002292:	e7fe      	b.n	8002292 <vTaskDelayUntil+0x82>
	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
 8002294:	f000 ff54 	bl	8003140 <ulPortSetInterruptMask>
 8002298:	e7fe      	b.n	8002298 <vTaskDelayUntil+0x88>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <vTaskDelayUntil+0xac>)
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	6829      	ldr	r1, [r5, #0]
 80022a0:	3104      	adds	r1, #4
 80022a2:	f7fe fc95 	bl	8000bd0 <vListInsert>
 80022a6:	e7e0      	b.n	800226a <vTaskDelayUntil+0x5a>
 80022a8:	2000017c 	andcs	r0, r0, ip, ror r1
 80022ac:	200001a0 	andcs	r0, r0, r0, lsr #3
 80022b0:	20000184 	andcs	r0, r0, r4, lsl #3
 80022b4:	200000f8 	strdcs	r0, [r0], -r8
 80022b8:	20000014 	andcs	r0, r0, r4, lsl r0
 80022bc:	200001a4 	andcs	r0, r0, r4, lsr #3

080022c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80022c0:	b570      	push	{r4, r5, r6, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80022c2:	4602      	mov	r2, r0
 80022c4:	b918      	cbnz	r0, 80022ce <vTaskDelay+0xe>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80022c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 80022ca:	f000 bf2d 	b.w	8003128 <vPortYield>


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80022ce:	4b16      	ldr	r3, [pc, #88]	; (8002328 <vTaskDelay+0x68>)
 80022d0:	6819      	ldr	r1, [r3, #0]
 80022d2:	b9f9      	cbnz	r1, 8002314 <vTaskDelay+0x54>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80022d4:	6819      	ldr	r1, [r3, #0]
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80022d6:	4e15      	ldr	r6, [pc, #84]	; (800232c <vTaskDelay+0x6c>)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80022d8:	4d15      	ldr	r5, [pc, #84]	; (8002330 <vTaskDelay+0x70>)
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80022da:	3101      	adds	r1, #1
 80022dc:	6019      	str	r1, [r3, #0]
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80022de:	6834      	ldr	r4, [r6, #0]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80022e0:	6828      	ldr	r0, [r5, #0]
 80022e2:	3004      	adds	r0, #4
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80022e4:	4414      	add	r4, r2

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80022e6:	f7fe fc8d 	bl	8000c04 <uxListRemove>
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80022ea:	682a      	ldr	r2, [r5, #0]

	if( xTimeToWake < xTickCount )
 80022ec:	6833      	ldr	r3, [r6, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80022ee:	6054      	str	r4, [r2, #4]

	if( xTimeToWake < xTickCount )
 80022f0:	429c      	cmp	r4, r3
 80022f2:	d312      	bcc.n	800231a <vTaskDelay+0x5a>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <vTaskDelay+0x74>)
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	6829      	ldr	r1, [r5, #0]
 80022fa:	3104      	adds	r1, #4
 80022fc:	f7fe fc68 	bl	8000bd0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8002300:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <vTaskDelay+0x78>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 8002306:	bf38      	it	cc
 8002308:	601c      	strcc	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
			}
			xAlreadyYielded = xTaskResumeAll();
 800230a:	f7ff ff0d 	bl	8002128 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800230e:	2800      	cmp	r0, #0
 8002310:	d0d9      	beq.n	80022c6 <vTaskDelay+0x6>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002312:	bd70      	pop	{r4, r5, r6, pc}


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002314:	f000 ff14 	bl	8003140 <ulPortSetInterruptMask>
 8002318:	e7fe      	b.n	8002318 <vTaskDelay+0x58>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <vTaskDelay+0x7c>)
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	6829      	ldr	r1, [r5, #0]
 8002320:	3104      	adds	r1, #4
 8002322:	f7fe fc55 	bl	8000bd0 <vListInsert>
 8002326:	e7f0      	b.n	800230a <vTaskDelay+0x4a>
 8002328:	2000017c 	andcs	r0, r0, ip, ror r1
 800232c:	200001a0 	andcs	r0, r0, r0, lsr #3
 8002330:	20000184 	andcs	r0, r0, r4, lsl #3
 8002334:	200000f8 	strdcs	r0, [r0], -r8
 8002338:	20000014 	andcs	r0, r0, r4, lsl r0
 800233c:	200001a4 	andcs	r0, r0, r4, lsr #3

08002340 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002340:	4e1c      	ldr	r6, [pc, #112]	; (80023b4 <prvIdleTask+0x74>)
 8002342:	4d1d      	ldr	r5, [pc, #116]	; (80023b8 <prvIdleTask+0x78>)
 8002344:	4c1d      	ldr	r4, [pc, #116]	; (80023bc <prvIdleTask+0x7c>)
 8002346:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80023c0 <prvIdleTask+0x80>
 800234a:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80023c4 <prvIdleTask+0x84>
 800234e:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002352:	46b2      	mov	sl, r6
 8002354:	e006      	b.n	8002364 <prvIdleTask+0x24>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002356:	6823      	ldr	r3, [r4, #0]
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002358:	6837      	ldr	r7, [r6, #0]
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800235a:	3301      	adds	r3, #1
 800235c:	6023      	str	r3, [r4, #0]
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			}
			( void ) xTaskResumeAll();
 800235e:	f7ff fee3 	bl	8002128 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002362:	b94f      	cbnz	r7, 8002378 <prvIdleTask+0x38>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8002364:	682b      	ldr	r3, [r5, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f5      	bne.n	8002356 <prvIdleTask+0x16>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800236a:	f8d9 3000 	ldr.w	r3, [r9]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d9f8      	bls.n	8002364 <prvIdleTask+0x24>
			{
				taskYIELD();
 8002372:	f000 fed9 	bl	8003128 <vPortYield>
 8002376:	e7f5      	b.n	8002364 <prvIdleTask+0x24>

			if( xListIsEmpty == pdFALSE )
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8002378:	f000 ff04 	bl	8003184 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800237c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8002380:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002384:	f10b 0004 	add.w	r0, fp, #4
 8002388:	f7fe fc3c 	bl	8000c04 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800238c:	f8d8 3000 	ldr.w	r3, [r8]
					--uxTasksDeleted;
 8002390:	4a09      	ldr	r2, [pc, #36]	; (80023b8 <prvIdleTask+0x78>)

				taskENTER_CRITICAL();
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					--uxCurrentNumberOfTasks;
 8002392:	3b01      	subs	r3, #1
 8002394:	f8c8 3000 	str.w	r3, [r8]
					--uxTasksDeleted;
 8002398:	6813      	ldr	r3, [r2, #0]
 800239a:	3b01      	subs	r3, #1
 800239c:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800239e:	f000 ff03 	bl	80031a8 <vPortExitCritical>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 80023a2:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 80023a6:	f001 f80d 	bl	80033c4 <vPortFree>
		vPortFree( pxTCB );
 80023aa:	4658      	mov	r0, fp
 80023ac:	f001 f80a 	bl	80033c4 <vPortFree>
 80023b0:	e7d8      	b.n	8002364 <prvIdleTask+0x24>
 80023b2:	bf00      	nop
 80023b4:	20000104 	andcs	r0, r0, r4, lsl #2
 80023b8:	20000100 	andcs	r0, r0, r0, lsl #2
 80023bc:	2000017c 	andcs	r0, r0, ip, ror r1
 80023c0:	20000180 	andcs	r0, r0, r0, lsl #3
 80023c4:	20000118 	andcs	r0, r0, r8, lsl r1

080023c8 <uxTaskGetSystemState>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80023c8:	4b73      	ldr	r3, [pc, #460]	; (8002598 <uxTaskGetSystemState+0x1d0>)
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80023ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80023ce:	681d      	ldr	r5, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;

		vTaskSuspendAll();
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80023d0:	4c72      	ldr	r4, [pc, #456]	; (800259c <uxTaskGetSystemState+0x1d4>)
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80023d2:	3501      	adds	r5, #1
 80023d4:	601d      	str	r5, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;

		vTaskSuspendAll();
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80023d6:	6823      	ldr	r3, [r4, #0]
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80023d8:	b085      	sub	sp, #20
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;

		vTaskSuspendAll();
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80023da:	428b      	cmp	r3, r1
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80023dc:	9001      	str	r0, [sp, #4]
 80023de:	9202      	str	r2, [sp, #8]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;

		vTaskSuspendAll();
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80023e0:	f200 8082 	bhi.w	80024e8 <uxTaskGetSystemState+0x120>
 80023e4:	4a6e      	ldr	r2, [pc, #440]	; (80025a0 <uxTaskGetSystemState+0x1d8>)
 80023e6:	f04f 0900 	mov.w	r9, #0
 80023ea:	f1a2 0a0c 	sub.w	sl, r2, #12
 80023ee:	f102 0658 	add.w	r6, r2, #88	; 0x58
#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80023f2:	46c8      	mov	r8, r9
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 80023f4:	f04f 0c01 	mov.w	ip, #1
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80023f8:	f856 0c08 	ldr.w	r0, [r6, #-8]
 80023fc:	bb68      	cbnz	r0, 800245a <uxTaskGetSystemState+0x92>
 80023fe:	3e14      	subs	r6, #20
				do
				{
					uxQueue--;
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002400:	4556      	cmp	r6, sl
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8002402:	4481      	add	r9, r0

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002404:	d1f8      	bne.n	80023f8 <uxTaskGetSystemState+0x30>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8002406:	4b67      	ldr	r3, [pc, #412]	; (80025a4 <uxTaskGetSystemState+0x1dc>)
 8002408:	681e      	ldr	r6, [r3, #0]
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800240a:	6837      	ldr	r7, [r6, #0]
 800240c:	2f00      	cmp	r7, #0
 800240e:	f040 80d1 	bne.w	80025b4 <uxTaskGetSystemState+0x1ec>
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8002412:	4b65      	ldr	r3, [pc, #404]	; (80025a8 <uxTaskGetSystemState+0x1e0>)
 8002414:	f8d3 e000 	ldr.w	lr, [r3]
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8002418:	f8de 6000 	ldr.w	r6, [lr]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800241c:	44b9      	add	r9, r7
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800241e:	2e00      	cmp	r6, #0
 8002420:	f040 810c 	bne.w	800263c <uxTaskGetSystemState+0x274>
 8002424:	f8df e188 	ldr.w	lr, [pc, #392]	; 80025b0 <uxTaskGetSystemState+0x1e8>
 8002428:	f8de 7000 	ldr.w	r7, [lr]
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800242c:	44b1      	add	r9, r6
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800242e:	2f00      	cmp	r7, #0
 8002430:	f040 814b 	bne.w	80026ca <uxTaskGetSystemState+0x302>
 8002434:	f8df e174 	ldr.w	lr, [pc, #372]	; 80025ac <uxTaskGetSystemState+0x1e4>
 8002438:	f8de 6000 	ldr.w	r6, [lr]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800243c:	eb07 0a09 	add.w	sl, r7, r9
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8002440:	2e00      	cmp	r6, #0
 8002442:	d158      	bne.n	80024f6 <uxTaskGetSystemState+0x12e>
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8002444:	9a02      	ldr	r2, [sp, #8]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8002446:	4456      	add	r6, sl
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8002448:	b10a      	cbz	r2, 800244e <uxTaskGetSystemState+0x86>
					{
						*pulTotalRunTime = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	6013      	str	r3, [r2, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800244e:	f7ff fe6b 	bl	8002128 <xTaskResumeAll>

		return uxTask;
	}
 8002452:	4630      	mov	r0, r6
 8002454:	b005      	add	sp, #20
 8002456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800245a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800245e:	6859      	ldr	r1, [r3, #4]
 8002460:	4b4f      	ldr	r3, [pc, #316]	; (80025a0 <uxTaskGetSystemState+0x1d8>)
 8002462:	f846 1c04 	str.w	r1, [r6, #-4]
 8002466:	42b1      	cmp	r1, r6
 8002468:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800246c:	bf04      	itt	eq
 800246e:	6871      	ldreq	r1, [r6, #4]
 8002470:	f846 1c04 	streq.w	r1, [r6, #-4]
 8002474:	1af7      	subs	r7, r6, r3
 8002476:	4417      	add	r7, r2
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8002478:	9a01      	ldr	r2, [sp, #4]
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800247a:	68cd      	ldr	r5, [r1, #12]
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800247c:	eb02 1349 	add.w	r3, r2, r9, lsl #5
#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8002480:	2000      	movs	r0, #0
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8002482:	6849      	ldr	r1, [r1, #4]
 8002484:	f846 1c04 	str.w	r1, [r6, #-4]
 8002488:	42b1      	cmp	r1, r6
 800248a:	bf04      	itt	eq
 800248c:	f857 1c54 	ldreq.w	r1, [r7, #-84]
 8002490:	f846 1c04 	streq.w	r1, [r6, #-4]
 8002494:	68ca      	ldr	r2, [r1, #12]

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 8002496:	601a      	str	r2, [r3, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 8002498:	f102 0434 	add.w	r4, r2, #52	; 0x34
 800249c:	605c      	str	r4, [r3, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800249e:	6c14      	ldr	r4, [r2, #64]	; 0x40
 80024a0:	609c      	str	r4, [r3, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 80024a2:	f883 c00c 	strb.w	ip, [r3, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 80024a6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80024a8:	611c      	str	r4, [r3, #16]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 80024aa:	6c94      	ldr	r4, [r2, #72]	; 0x48
 80024ac:	615c      	str	r4, [r3, #20]
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 80024ae:	f8c3 8018 	str.w	r8, [r3, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 80024b2:	6b14      	ldr	r4, [r2, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 80024b4:	f894 e000 	ldrb.w	lr, [r4]
 80024b8:	f1be 0fa5 	cmp.w	lr, #165	; 0xa5
 80024bc:	d112      	bne.n	80024e4 <uxTaskGetSystemState+0x11c>
 80024be:	46a6      	mov	lr, r4

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 80024c0:	2400      	movs	r4, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 80024c2:	f81e bf01 	ldrb.w	fp, [lr, #1]!
 80024c6:	f1bb 0fa5 	cmp.w	fp, #165	; 0xa5
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 80024ca:	f104 0401 	add.w	r4, r4, #1

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 80024ce:	d0f8      	beq.n	80024c2 <uxTaskGetSystemState+0xfa>
 80024d0:	f3c4 048f 	ubfx	r4, r4, #2, #16
				}
				#endif

				uxTask++;

			} while( pxNextTCB != pxFirstTCB );
 80024d4:	4295      	cmp	r5, r2
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 80024d6:	839c      	strh	r4, [r3, #28]
				}
				#endif

				uxTask++;
 80024d8:	f100 0001 	add.w	r0, r0, #1
 80024dc:	f103 0320 	add.w	r3, r3, #32

			} while( pxNextTCB != pxFirstTCB );
 80024e0:	d1cf      	bne.n	8002482 <uxTaskGetSystemState+0xba>
 80024e2:	e78c      	b.n	80023fe <uxTaskGetSystemState+0x36>

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 80024e4:	2400      	movs	r4, #0
 80024e6:	e7f5      	b.n	80024d4 <uxTaskGetSystemState+0x10c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 80024e8:	f7ff fe1e 	bl	8002128 <xTaskResumeAll>

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80024ec:	2600      	movs	r6, #0
			}
		}
		( void ) xTaskResumeAll();

		return uxTask;
	}
 80024ee:	4630      	mov	r0, r6
 80024f0:	b005      	add	sp, #20
 80024f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80024f6:	f8de 3004 	ldr.w	r3, [lr, #4]
 80024fa:	685d      	ldr	r5, [r3, #4]
 80024fc:	f8ce 5004 	str.w	r5, [lr, #4]
 8002500:	f10e 0c08 	add.w	ip, lr, #8
 8002504:	4565      	cmp	r5, ip
 8002506:	bf08      	it	eq
 8002508:	f8de 500c 	ldreq.w	r5, [lr, #12]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800250c:	f8de 300c 	ldr.w	r3, [lr, #12]
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8002510:	f8d5 900c 	ldr.w	r9, [r5, #12]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8002514:	686d      	ldr	r5, [r5, #4]
 8002516:	9303      	str	r3, [sp, #12]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8002518:	9b01      	ldr	r3, [sp, #4]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800251a:	f8ce 5004 	str.w	r5, [lr, #4]
#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800251e:	2600      	movs	r6, #0
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8002520:	4565      	cmp	r5, ip

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8002522:	eb03 104a 	add.w	r0, r3, sl, lsl #5
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 8002526:	4637      	mov	r7, r6
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 8002528:	f04f 0803 	mov.w	r8, #3
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800252c:	f04f 0b02 	mov.w	fp, #2
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8002530:	d02c      	beq.n	800258c <uxTaskGetSystemState+0x1c4>
 8002532:	68ec      	ldr	r4, [r5, #12]

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 8002534:	6004      	str	r4, [r0, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 8002536:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800253a:	6043      	str	r3, [r0, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800253c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800253e:	6083      	str	r3, [r0, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 8002540:	f880 800c 	strb.w	r8, [r0, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 8002544:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002546:	6103      	str	r3, [r0, #16]
					/* If the task is in the suspended list then there is a chance
					it is actually just blocked indefinitely - so really it should
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 8002548:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800254a:	b10b      	cbz	r3, 8002550 <uxTaskGetSystemState+0x188>
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800254c:	f880 b00c 	strb.w	fp, [r0, #12]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 8002550:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002552:	6143      	str	r3, [r0, #20]
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 8002554:	6187      	str	r7, [r0, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 8002556:	6b22      	ldr	r2, [r4, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 8002558:	7813      	ldrb	r3, [r2, #0]
 800255a:	2ba5      	cmp	r3, #165	; 0xa5

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 800255c:	f04f 0300 	mov.w	r3, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 8002560:	d107      	bne.n	8002572 <uxTaskGetSystemState+0x1aa>
 8002562:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8002566:	29a5      	cmp	r1, #165	; 0xa5
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 8002568:	f103 0301 	add.w	r3, r3, #1

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 800256c:	d0f9      	beq.n	8002562 <uxTaskGetSystemState+0x19a>
 800256e:	f3c3 038f 	ubfx	r3, r3, #2, #16
				}
				#endif

				uxTask++;

			} while( pxNextTCB != pxFirstTCB );
 8002572:	45a1      	cmp	r9, r4
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 8002574:	8383      	strh	r3, [r0, #28]
				}
				#endif

				uxTask++;
 8002576:	f106 0601 	add.w	r6, r6, #1
 800257a:	f100 0020 	add.w	r0, r0, #32

			} while( pxNextTCB != pxFirstTCB );
 800257e:	f43f af61 	beq.w	8002444 <uxTaskGetSystemState+0x7c>
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8002582:	686d      	ldr	r5, [r5, #4]
 8002584:	f8ce 5004 	str.w	r5, [lr, #4]
 8002588:	4565      	cmp	r5, ip
 800258a:	d1d2      	bne.n	8002532 <uxTaskGetSystemState+0x16a>
 800258c:	9a03      	ldr	r2, [sp, #12]
 800258e:	4b07      	ldr	r3, [pc, #28]	; (80025ac <uxTaskGetSystemState+0x1e4>)
 8002590:	4615      	mov	r5, r2
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	e7cd      	b.n	8002532 <uxTaskGetSystemState+0x16a>
 8002596:	bf00      	nop
 8002598:	2000017c 	andcs	r0, r0, ip, ror r1
 800259c:	20000180 	andcs	r0, r0, r0, lsl #3
 80025a0:	20000118 	andcs	r0, r0, r8, lsl r1
 80025a4:	200000f8 	strdcs	r0, [r0], -r8
 80025a8:	200001a4 	andcs	r0, r0, r4, lsr #3
 80025ac:	200001d8 	ldrdcs	r0, [r0], -r8
 80025b0:	20000104 	andcs	r0, r0, r4, lsl #2
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80025b4:	6873      	ldr	r3, [r6, #4]
 80025b6:	685d      	ldr	r5, [r3, #4]
 80025b8:	6075      	str	r5, [r6, #4]
 80025ba:	f106 0e08 	add.w	lr, r6, #8
 80025be:	4575      	cmp	r5, lr
 80025c0:	bf08      	it	eq
 80025c2:	686d      	ldreq	r5, [r5, #4]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80025c4:	9b01      	ldr	r3, [sp, #4]
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80025c6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80025ca:	2700      	movs	r7, #0
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 80025cc:	46b8      	mov	r8, r7

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80025ce:	eb03 1049 	add.w	r0, r3, r9, lsl #5
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 80025d2:	f04f 0c02 	mov.w	ip, #2
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 80025d6:	686d      	ldr	r5, [r5, #4]
 80025d8:	6075      	str	r5, [r6, #4]
 80025da:	45ae      	cmp	lr, r5
 80025dc:	bf04      	itt	eq
 80025de:	68f5      	ldreq	r5, [r6, #12]
 80025e0:	6075      	streq	r5, [r6, #4]
 80025e2:	68ea      	ldr	r2, [r5, #12]

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 80025e4:	6002      	str	r2, [r0, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 80025e6:	f102 0334 	add.w	r3, r2, #52	; 0x34
 80025ea:	6043      	str	r3, [r0, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 80025ec:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80025ee:	6083      	str	r3, [r0, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 80025f0:	f880 c00c 	strb.w	ip, [r0, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 80025f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80025f6:	6103      	str	r3, [r0, #16]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 80025f8:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80025fa:	6143      	str	r3, [r0, #20]
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 80025fc:	f8c0 8018 	str.w	r8, [r0, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 8002600:	6b11      	ldr	r1, [r2, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 8002602:	780b      	ldrb	r3, [r1, #0]
 8002604:	2ba5      	cmp	r3, #165	; 0xa5

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 8002606:	f04f 0300 	mov.w	r3, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 800260a:	d107      	bne.n	800261c <uxTaskGetSystemState+0x254>
 800260c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002610:	2ca5      	cmp	r4, #165	; 0xa5
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 8002612:	f103 0301 	add.w	r3, r3, #1

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 8002616:	d0f9      	beq.n	800260c <uxTaskGetSystemState+0x244>
 8002618:	f3c3 038f 	ubfx	r3, r3, #2, #16
				}
				#endif

				uxTask++;

			} while( pxNextTCB != pxFirstTCB );
 800261c:	4592      	cmp	sl, r2
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800261e:	8383      	strh	r3, [r0, #28]
				}
				#endif

				uxTask++;
 8002620:	f107 0701 	add.w	r7, r7, #1
 8002624:	f100 0020 	add.w	r0, r0, #32

			} while( pxNextTCB != pxFirstTCB );
 8002628:	d1d5      	bne.n	80025d6 <uxTaskGetSystemState+0x20e>
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800262a:	4b4d      	ldr	r3, [pc, #308]	; (8002760 <uxTaskGetSystemState+0x398>)
 800262c:	f8d3 e000 	ldr.w	lr, [r3]
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8002630:	f8de 6000 	ldr.w	r6, [lr]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8002634:	44b9      	add	r9, r7
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8002636:	2e00      	cmp	r6, #0
 8002638:	f43f aef4 	beq.w	8002424 <uxTaskGetSystemState+0x5c>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800263c:	f8de 3004 	ldr.w	r3, [lr, #4]
 8002640:	685d      	ldr	r5, [r3, #4]
 8002642:	f8ce 5004 	str.w	r5, [lr, #4]
 8002646:	f10e 0c08 	add.w	ip, lr, #8
 800264a:	4565      	cmp	r5, ip
 800264c:	bf08      	it	eq
 800264e:	686d      	ldreq	r5, [r5, #4]
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8002650:	9b01      	ldr	r3, [sp, #4]
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8002652:	f8d5 a00c 	ldr.w	sl, [r5, #12]
#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8002656:	2600      	movs	r6, #0
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 8002658:	4637      	mov	r7, r6
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800265a:	eb03 1049 	add.w	r0, r3, r9, lsl #5
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800265e:	f04f 0802 	mov.w	r8, #2
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8002662:	686d      	ldr	r5, [r5, #4]
 8002664:	f8ce 5004 	str.w	r5, [lr, #4]
 8002668:	45ac      	cmp	ip, r5
 800266a:	bf04      	itt	eq
 800266c:	f8de 500c 	ldreq.w	r5, [lr, #12]
 8002670:	f8ce 5004 	streq.w	r5, [lr, #4]
 8002674:	68ea      	ldr	r2, [r5, #12]

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 8002676:	6002      	str	r2, [r0, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 8002678:	f102 0334 	add.w	r3, r2, #52	; 0x34
 800267c:	6043      	str	r3, [r0, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800267e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002680:	6083      	str	r3, [r0, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 8002682:	f880 800c 	strb.w	r8, [r0, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 8002686:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002688:	6103      	str	r3, [r0, #16]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800268a:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800268c:	6143      	str	r3, [r0, #20]
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 800268e:	6187      	str	r7, [r0, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 8002690:	6b11      	ldr	r1, [r2, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 8002692:	780b      	ldrb	r3, [r1, #0]
 8002694:	2ba5      	cmp	r3, #165	; 0xa5

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 8002696:	f04f 0300 	mov.w	r3, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 800269a:	d107      	bne.n	80026ac <uxTaskGetSystemState+0x2e4>
 800269c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80026a0:	2ca5      	cmp	r4, #165	; 0xa5
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 80026a2:	f103 0301 	add.w	r3, r3, #1

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 80026a6:	d0f9      	beq.n	800269c <uxTaskGetSystemState+0x2d4>
 80026a8:	f3c3 038f 	ubfx	r3, r3, #2, #16
				}
				#endif

				uxTask++;

			} while( pxNextTCB != pxFirstTCB );
 80026ac:	4592      	cmp	sl, r2
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 80026ae:	8383      	strh	r3, [r0, #28]
				}
				#endif

				uxTask++;
 80026b0:	f106 0601 	add.w	r6, r6, #1
 80026b4:	f100 0020 	add.w	r0, r0, #32

			} while( pxNextTCB != pxFirstTCB );
 80026b8:	d1d3      	bne.n	8002662 <uxTaskGetSystemState+0x29a>
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80026ba:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 8002764 <uxTaskGetSystemState+0x39c>
 80026be:	f8de 7000 	ldr.w	r7, [lr]
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80026c2:	44b1      	add	r9, r6
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80026c4:	2f00      	cmp	r7, #0
 80026c6:	f43f aeb5 	beq.w	8002434 <uxTaskGetSystemState+0x6c>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80026ca:	f8de 3004 	ldr.w	r3, [lr, #4]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 80026ce:	f8de b00c 	ldr.w	fp, [lr, #12]
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80026d2:	685d      	ldr	r5, [r3, #4]
 80026d4:	f8ce 5004 	str.w	r5, [lr, #4]
 80026d8:	f10e 0c08 	add.w	ip, lr, #8
 80026dc:	4565      	cmp	r5, ip
 80026de:	bf08      	it	eq
 80026e0:	f8de 500c 	ldreq.w	r5, [lr, #12]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 80026e4:	9b01      	ldr	r3, [sp, #4]
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 80026e6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 80026ea:	686d      	ldr	r5, [r5, #4]
 80026ec:	f8ce 5004 	str.w	r5, [lr, #4]
#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80026f0:	2700      	movs	r7, #0
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 80026f2:	4565      	cmp	r5, ip
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 80026f4:	463e      	mov	r6, r7

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 80026f6:	eb03 1049 	add.w	r0, r3, r9, lsl #5
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 80026fa:	f04f 0804 	mov.w	r8, #4
 80026fe:	4659      	mov	r1, fp
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8002700:	d029      	beq.n	8002756 <uxTaskGetSystemState+0x38e>
 8002702:	68eb      	ldr	r3, [r5, #12]

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 8002704:	6003      	str	r3, [r0, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 8002706:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800270a:	6042      	str	r2, [r0, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800270c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800270e:	6082      	str	r2, [r0, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 8002710:	f880 800c 	strb.w	r8, [r0, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 8002714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002716:	6102      	str	r2, [r0, #16]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 8002718:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800271a:	6142      	str	r2, [r0, #20]
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 800271c:	6186      	str	r6, [r0, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800271e:	6b1c      	ldr	r4, [r3, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 8002720:	7822      	ldrb	r2, [r4, #0]
 8002722:	2aa5      	cmp	r2, #165	; 0xa5

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 8002724:	f04f 0200 	mov.w	r2, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 8002728:	d108      	bne.n	800273c <uxTaskGetSystemState+0x374>
 800272a:	f814 bf01 	ldrb.w	fp, [r4, #1]!
 800272e:	f1bb 0fa5 	cmp.w	fp, #165	; 0xa5
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 8002732:	f102 0201 	add.w	r2, r2, #1

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
 8002736:	d0f8      	beq.n	800272a <uxTaskGetSystemState+0x362>
 8002738:	f3c2 028f 	ubfx	r2, r2, #2, #16
				}
				#endif

				uxTask++;

			} while( pxNextTCB != pxFirstTCB );
 800273c:	459a      	cmp	sl, r3
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800273e:	8382      	strh	r2, [r0, #28]
				}
				#endif

				uxTask++;
 8002740:	f107 0701 	add.w	r7, r7, #1
 8002744:	f100 0020 	add.w	r0, r0, #32

			} while( pxNextTCB != pxFirstTCB );
 8002748:	f43f ae74 	beq.w	8002434 <uxTaskGetSystemState+0x6c>
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800274c:	686d      	ldr	r5, [r5, #4]
 800274e:	f8ce 5004 	str.w	r5, [lr, #4]
 8002752:	4565      	cmp	r5, ip
 8002754:	d1d5      	bne.n	8002702 <uxTaskGetSystemState+0x33a>
 8002756:	4a03      	ldr	r2, [pc, #12]	; (8002764 <uxTaskGetSystemState+0x39c>)
 8002758:	460d      	mov	r5, r1
 800275a:	6051      	str	r1, [r2, #4]
 800275c:	e7d1      	b.n	8002702 <uxTaskGetSystemState+0x33a>
 800275e:	bf00      	nop
 8002760:	200001a4 	andcs	r0, r0, r4, lsr #3
 8002764:	20000104 	andcs	r0, r0, r4, lsl #2

08002768 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002768:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800276a:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <vTaskSwitchContext+0x78>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	bb4a      	cbnz	r2, 80027c4 <vTaskSwitchContext+0x5c>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8002770:	491c      	ldr	r1, [pc, #112]	; (80027e4 <vTaskSwitchContext+0x7c>)
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002772:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <vTaskSwitchContext+0x80>)
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8002774:	600a      	str	r2, [r1, #0]
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	491c      	ldr	r1, [pc, #112]	; (80027ec <vTaskSwitchContext+0x84>)
 800277a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800277e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002782:	b97a      	cbnz	r2, 80027a4 <vTaskSwitchContext+0x3c>
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	b912      	cbnz	r2, 8002790 <vTaskSwitchContext+0x28>
 800278a:	e01f      	b.n	80027cc <vTaskSwitchContext+0x64>
 800278c:	6802      	ldr	r2, [r0, #0]
 800278e:	b1ea      	cbz	r2, 80027cc <vTaskSwitchContext+0x64>
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	3a01      	subs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800279c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80027a0:	2a00      	cmp	r2, #0
 80027a2:	d0f3      	beq.n	800278c <vTaskSwitchContext+0x24>
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80027aa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80027ae:	f102 0108 	add.w	r1, r2, #8
 80027b2:	6853      	ldr	r3, [r2, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	6053      	str	r3, [r2, #4]
 80027b8:	428b      	cmp	r3, r1
 80027ba:	d00a      	beq.n	80027d2 <vTaskSwitchContext+0x6a>
 80027bc:	4a0c      	ldr	r2, [pc, #48]	; (80027f0 <vTaskSwitchContext+0x88>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	bd08      	pop	{r3, pc}
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80027c4:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <vTaskSwitchContext+0x7c>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	bd08      	pop	{r3, pc}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
 80027cc:	f000 fcb8 	bl	8003140 <ulPortSetInterruptMask>
 80027d0:	e7fe      	b.n	80027d0 <vTaskSwitchContext+0x68>
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	6053      	str	r3, [r2, #4]
 80027d6:	4a06      	ldr	r2, [pc, #24]	; (80027f0 <vTaskSwitchContext+0x88>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	bd08      	pop	{r3, pc}
 80027de:	bf00      	nop
 80027e0:	2000017c 	andcs	r0, r0, ip, ror r1
 80027e4:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 80027e8:	200001ec 	andcs	r0, r0, ip, ror #3
 80027ec:	20000118 	andcs	r0, r0, r8, lsl r1
 80027f0:	20000184 	andcs	r0, r0, r4, lsl #3

080027f4 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80027f4:	b538      	push	{r3, r4, r5, lr}
 80027f6:	460d      	mov	r5, r1
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 80027f8:	2800      	cmp	r0, #0
 80027fa:	d02d      	beq.n	8002858 <vTaskPlaceOnEventList+0x64>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80027fc:	4c18      	ldr	r4, [pc, #96]	; (8002860 <vTaskPlaceOnEventList+0x6c>)
 80027fe:	6821      	ldr	r1, [r4, #0]
 8002800:	3118      	adds	r1, #24
 8002802:	f7fe f9e5 	bl	8000bd0 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002806:	6820      	ldr	r0, [r4, #0]
 8002808:	3004      	adds	r0, #4
 800280a:	f7fe f9fb 	bl	8000c04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 800280e:	1c6b      	adds	r3, r5, #1
 8002810:	d01b      	beq.n	800284a <vTaskPlaceOnEventList+0x56>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 8002812:	4b14      	ldr	r3, [pc, #80]	; (8002864 <vTaskPlaceOnEventList+0x70>)
 8002814:	6819      	ldr	r1, [r3, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002816:	6822      	ldr	r2, [r4, #0]

	if( xTimeToWake < xTickCount )
 8002818:	681b      	ldr	r3, [r3, #0]
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 800281a:	440d      	add	r5, r1
static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 800281c:	429d      	cmp	r5, r3
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800281e:	6055      	str	r5, [r2, #4]

	if( xTimeToWake < xTickCount )
 8002820:	d30b      	bcc.n	800283a <vTaskPlaceOnEventList+0x46>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <vTaskPlaceOnEventList+0x74>)
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	6821      	ldr	r1, [r4, #0]
 8002828:	3104      	adds	r1, #4
 800282a:	f7fe f9d1 	bl	8000bd0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 800282e:	4b0f      	ldr	r3, [pc, #60]	; (800286c <vTaskPlaceOnEventList+0x78>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	4295      	cmp	r5, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 8002834:	bf38      	it	cc
 8002836:	601d      	strcc	r5, [r3, #0]
 8002838:	bd38      	pop	{r3, r4, r5, pc}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <vTaskPlaceOnEventList+0x7c>)
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	6821      	ldr	r1, [r4, #0]
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002844:	3104      	adds	r1, #4
 8002846:	f7fe b9c3 	b.w	8000bd0 <vListInsert>
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800284a:	6821      	ldr	r1, [r4, #0]
 800284c:	4809      	ldr	r0, [pc, #36]	; (8002874 <vTaskPlaceOnEventList+0x80>)
 800284e:	3104      	adds	r1, #4
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002854:	f7fe b9ae 	b.w	8000bb4 <vListInsertEnd>

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 8002858:	f000 fc72 	bl	8003140 <ulPortSetInterruptMask>
 800285c:	e7fe      	b.n	800285c <vTaskPlaceOnEventList+0x68>
 800285e:	bf00      	nop
 8002860:	20000184 	andcs	r0, r0, r4, lsl #3
 8002864:	200001a0 	andcs	r0, r0, r0, lsr #3
 8002868:	200000f8 	strdcs	r0, [r0], -r8
 800286c:	20000014 	andcs	r0, r0, r4, lsl r0
 8002870:	200001a4 	andcs	r0, r0, r4, lsr #3
 8002874:	200001d8 	ldrdcs	r0, [r0], -r8

08002878 <vTaskPlaceOnUnorderedEventList>:
	#endif /* INCLUDE_vTaskSuspend */
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8002878:	b538      	push	{r3, r4, r5, lr}
 800287a:	4615      	mov	r5, r2
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 800287c:	b348      	cbz	r0, 80028d2 <vTaskPlaceOnUnorderedEventList+0x5a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800287e:	4b1e      	ldr	r3, [pc, #120]	; (80028f8 <vTaskPlaceOnUnorderedEventList+0x80>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	b913      	cbnz	r3, 800288a <vTaskPlaceOnUnorderedEventList+0x12>
 8002884:	f000 fc5c 	bl	8003140 <ulPortSetInterruptMask>
 8002888:	e7fe      	b.n	8002888 <vTaskPlaceOnUnorderedEventList+0x10>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800288a:	4c1c      	ldr	r4, [pc, #112]	; (80028fc <vTaskPlaceOnUnorderedEventList+0x84>)
 800288c:	6822      	ldr	r2, [r4, #0]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800288e:	6823      	ldr	r3, [r4, #0]
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8002890:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8002894:	6191      	str	r1, [r2, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002896:	f103 0118 	add.w	r1, r3, #24
 800289a:	f7fe f98b 	bl	8000bb4 <vListInsertEnd>

	/* The task must be removed from the ready list before it is added to the
	blocked list.  Exclusive access can be assured to the ready list as the
	scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800289e:	6820      	ldr	r0, [r4, #0]
 80028a0:	3004      	adds	r0, #4
 80028a2:	f7fe f9af 	bl	8000c04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 80028a6:	1c6b      	adds	r3, r5, #1
 80028a8:	d01e      	beq.n	80028e8 <vTaskPlaceOnUnorderedEventList+0x70>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <vTaskPlaceOnUnorderedEventList+0x88>)
 80028ac:	6819      	ldr	r1, [r3, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80028ae:	6822      	ldr	r2, [r4, #0]

	if( xTimeToWake < xTickCount )
 80028b0:	681b      	ldr	r3, [r3, #0]
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
 80028b2:	440d      	add	r5, r1
static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 80028b4:	429d      	cmp	r5, r3
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80028b6:	6055      	str	r5, [r2, #4]

	if( xTimeToWake < xTickCount )
 80028b8:	d30e      	bcc.n	80028d8 <vTaskPlaceOnUnorderedEventList+0x60>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <vTaskPlaceOnUnorderedEventList+0x8c>)
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	6821      	ldr	r1, [r4, #0]
 80028c0:	3104      	adds	r1, #4
 80028c2:	f7fe f985 	bl	8000bd0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <vTaskPlaceOnUnorderedEventList+0x90>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4295      	cmp	r5, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 80028cc:	bf38      	it	cc
 80028ce:	601d      	strcc	r5, [r3, #0]
 80028d0:	bd38      	pop	{r3, r4, r5, pc}

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 80028d2:	f000 fc35 	bl	8003140 <ulPortSetInterruptMask>
 80028d6:	e7fe      	b.n	80028d6 <vTaskPlaceOnUnorderedEventList+0x5e>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <vTaskPlaceOnUnorderedEventList+0x94>)
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	6821      	ldr	r1, [r4, #0]
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80028de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80028e2:	3104      	adds	r1, #4
 80028e4:	f7fe b974 	b.w	8000bd0 <vListInsert>
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80028e8:	6821      	ldr	r1, [r4, #0]
 80028ea:	4809      	ldr	r0, [pc, #36]	; (8002910 <vTaskPlaceOnUnorderedEventList+0x98>)
 80028ec:	3104      	adds	r1, #4
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80028ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80028f2:	f7fe b95f 	b.w	8000bb4 <vListInsertEnd>
 80028f6:	bf00      	nop
 80028f8:	2000017c 	andcs	r0, r0, ip, ror r1
 80028fc:	20000184 	andcs	r0, r0, r4, lsl #3
 8002900:	200001a0 	andcs	r0, r0, r0, lsr #3
 8002904:	200000f8 	strdcs	r0, [r0], -r8
 8002908:	20000014 	andcs	r0, r0, r4, lsl r0
 800290c:	200001a4 	andcs	r0, r0, r4, lsr #3
 8002910:	200001d8 	ldrdcs	r0, [r0], -r8

08002914 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
 8002914:	b538      	push	{r3, r4, r5, lr}
 8002916:	460d      	mov	r5, r1
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
 8002918:	b1e0      	cbz	r0, 8002954 <vTaskPlaceOnEventListRestricted+0x40>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800291a:	4c14      	ldr	r4, [pc, #80]	; (800296c <vTaskPlaceOnEventListRestricted+0x58>)
 800291c:	6821      	ldr	r1, [r4, #0]
 800291e:	3118      	adds	r1, #24
 8002920:	f7fe f948 	bl	8000bb4 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002924:	6820      	ldr	r0, [r4, #0]
 8002926:	3004      	adds	r0, #4
 8002928:	f7fe f96c 	bl	8000c04 <uxListRemove>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 800292c:	4b10      	ldr	r3, [pc, #64]	; (8002970 <vTaskPlaceOnEventListRestricted+0x5c>)
 800292e:	6819      	ldr	r1, [r3, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002930:	6822      	ldr	r2, [r4, #0]

	if( xTimeToWake < xTickCount )
 8002932:	681b      	ldr	r3, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8002934:	440d      	add	r5, r1
static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 8002936:	429d      	cmp	r5, r3
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002938:	6055      	str	r5, [r2, #4]

	if( xTimeToWake < xTickCount )
 800293a:	d30e      	bcc.n	800295a <vTaskPlaceOnEventListRestricted+0x46>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800293c:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <vTaskPlaceOnEventListRestricted+0x60>)
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	6821      	ldr	r1, [r4, #0]
 8002942:	3104      	adds	r1, #4
 8002944:	f7fe f944 	bl	8000bd0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <vTaskPlaceOnEventListRestricted+0x64>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4295      	cmp	r5, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 800294e:	bf38      	it	cc
 8002950:	601d      	strcc	r5, [r3, #0]
 8002952:	bd38      	pop	{r3, r4, r5, pc}

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
 8002954:	f000 fbf4 	bl	8003140 <ulPortSetInterruptMask>
 8002958:	e7fe      	b.n	8002958 <vTaskPlaceOnEventListRestricted+0x44>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <vTaskPlaceOnEventListRestricted+0x68>)
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	6821      	ldr	r1, [r4, #0]
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
 8002960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002964:	3104      	adds	r1, #4
 8002966:	f7fe b933 	b.w	8000bd0 <vListInsert>
 800296a:	bf00      	nop
 800296c:	20000184 	andcs	r0, r0, r4, lsl #3
 8002970:	200001a0 	andcs	r0, r0, r0, lsr #3
 8002974:	200000f8 	strdcs	r0, [r0], -r8
 8002978:	20000014 	andcs	r0, r0, r4, lsl r0
 800297c:	200001a4 	andcs	r0, r0, r4, lsr #3

08002980 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002980:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002982:	68c3      	ldr	r3, [r0, #12]
 8002984:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002986:	2c00      	cmp	r4, #0
 8002988:	d029      	beq.n	80029de <xTaskRemoveFromEventList+0x5e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800298a:	f104 0518 	add.w	r5, r4, #24
 800298e:	4628      	mov	r0, r5
 8002990:	f7fe f938 	bl	8000c04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002994:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <xTaskRemoveFromEventList+0x64>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	b9e3      	cbnz	r3, 80029d4 <xTaskRemoveFromEventList+0x54>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800299a:	1d25      	adds	r5, r4, #4
 800299c:	4628      	mov	r0, r5
 800299e:	f7fe f931 	bl	8000c04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80029a2:	4a11      	ldr	r2, [pc, #68]	; (80029e8 <xTaskRemoveFromEventList+0x68>)
 80029a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029a6:	6811      	ldr	r1, [r2, #0]
 80029a8:	4810      	ldr	r0, [pc, #64]	; (80029ec <xTaskRemoveFromEventList+0x6c>)
 80029aa:	428b      	cmp	r3, r1
 80029ac:	bf88      	it	hi
 80029ae:	6013      	strhi	r3, [r2, #0]
 80029b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80029b4:	4629      	mov	r1, r5
 80029b6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80029ba:	f7fe f8fb 	bl	8000bb4 <vListInsertEnd>
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80029be:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <xTaskRemoveFromEventList+0x70>)
 80029c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80029c8:	bf83      	ittte	hi
 80029ca:	4b0a      	ldrhi	r3, [pc, #40]	; (80029f4 <xTaskRemoveFromEventList+0x74>)
 80029cc:	2001      	movhi	r0, #1
 80029ce:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
 80029d0:	2000      	movls	r0, #0
	}

	return xReturn;
}
 80029d2:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80029d4:	4629      	mov	r1, r5
 80029d6:	4808      	ldr	r0, [pc, #32]	; (80029f8 <xTaskRemoveFromEventList+0x78>)
 80029d8:	f7fe f8ec 	bl	8000bb4 <vListInsertEnd>
 80029dc:	e7ef      	b.n	80029be <xTaskRemoveFromEventList+0x3e>
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
	configASSERT( pxUnblockedTCB );
 80029de:	f000 fbaf 	bl	8003140 <ulPortSetInterruptMask>
 80029e2:	e7fe      	b.n	80029e2 <xTaskRemoveFromEventList+0x62>
 80029e4:	2000017c 	andcs	r0, r0, ip, ror r1
 80029e8:	200001ec 	andcs	r0, r0, ip, ror #3
 80029ec:	20000118 	andcs	r0, r0, r8, lsl r1
 80029f0:	20000184 	andcs	r0, r0, r4, lsl #3
 80029f4:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 80029f8:	20000188 	andcs	r0, r0, r8, lsl #3

080029fc <xTaskRemoveFromUnorderedEventList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80029fc:	b538      	push	{r3, r4, r5, lr}
TCB_t *pxUnblockedTCB;
BaseType_t xReturn;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80029fe:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <xTaskRemoveFromUnorderedEventList+0x5c>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	b31a      	cbz	r2, 8002a4c <xTaskRemoveFromUnorderedEventList+0x50>
	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8002a04:	68c4      	ldr	r4, [r0, #12]
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8002a06:	f041 4200 	orr.w	r2, r1, #2147483648	; 0x80000000
 8002a0a:	6002      	str	r2, [r0, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
	configASSERT( pxUnblockedTCB );
 8002a0c:	b30c      	cbz	r4, 8002a52 <xTaskRemoveFromUnorderedEventList+0x56>
	( void ) uxListRemove( pxEventListItem );

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8002a0e:	1d25      	adds	r5, r4, #4

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
 8002a10:	f7fe f8f8 	bl	8000c04 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8002a14:	4628      	mov	r0, r5
 8002a16:	f7fe f8f5 	bl	8000c04 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8002a1a:	4a10      	ldr	r2, [pc, #64]	; (8002a5c <xTaskRemoveFromUnorderedEventList+0x60>)
 8002a1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a1e:	6811      	ldr	r1, [r2, #0]
 8002a20:	480f      	ldr	r0, [pc, #60]	; (8002a60 <xTaskRemoveFromUnorderedEventList+0x64>)
 8002a22:	428b      	cmp	r3, r1
 8002a24:	bf88      	it	hi
 8002a26:	6013      	strhi	r3, [r2, #0]
 8002a28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a2c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002a30:	4629      	mov	r1, r5
 8002a32:	f7fe f8bf 	bl	8000bb4 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <xTaskRemoveFromUnorderedEventList+0x68>)
 8002a38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	429a      	cmp	r2, r3
		switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002a40:	bf83      	ittte	hi
 8002a42:	4b09      	ldrhi	r3, [pc, #36]	; (8002a68 <xTaskRemoveFromUnorderedEventList+0x6c>)
 8002a44:	2001      	movhi	r0, #1
 8002a46:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
 8002a48:	2000      	movls	r0, #0
	}

	return xReturn;
}
 8002a4a:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxUnblockedTCB;
BaseType_t xReturn;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8002a4c:	f000 fb78 	bl	8003140 <ulPortSetInterruptMask>
 8002a50:	e7fe      	b.n	8002a50 <xTaskRemoveFromUnorderedEventList+0x54>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
	configASSERT( pxUnblockedTCB );
 8002a52:	f000 fb75 	bl	8003140 <ulPortSetInterruptMask>
 8002a56:	e7fe      	b.n	8002a56 <xTaskRemoveFromUnorderedEventList+0x5a>
 8002a58:	2000017c 	andcs	r0, r0, ip, ror r1
 8002a5c:	200001ec 	andcs	r0, r0, ip, ror #3
 8002a60:	20000118 	andcs	r0, r0, r8, lsl r1
 8002a64:	20000184 	andcs	r0, r0, r4, lsl #3
 8002a68:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

08002a6c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002a6c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8002a6e:	b130      	cbz	r0, 8002a7e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002a70:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <vTaskSetTimeOutState+0x18>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <vTaskSetTimeOutState+0x1c>)
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002a74:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	e880 000c 	stmia.w	r0, {r2, r3}
 8002a7c:	bd08      	pop	{r3, pc}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
 8002a7e:	f000 fb5f 	bl	8003140 <ulPortSetInterruptMask>
 8002a82:	e7fe      	b.n	8002a82 <vTaskSetTimeOutState+0x16>
 8002a84:	2000019c 	mulcs	r0, ip, r1
 8002a88:	200001a0 	andcs	r0, r0, r0, lsr #3

08002a8c <xTaskCheckForTimeOut>:
	pxTimeOut->xTimeOnEntering = xTickCount;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002a8e:	4604      	mov	r4, r0
	pxTimeOut->xTimeOnEntering = xTickCount;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002a90:	460d      	mov	r5, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002a92:	b358      	cbz	r0, 8002aec <xTaskCheckForTimeOut+0x60>
	configASSERT( pxTicksToWait );
 8002a94:	b339      	cbz	r1, 8002ae6 <xTaskCheckForTimeOut+0x5a>

	taskENTER_CRITICAL();
 8002a96:	f000 fb75 	bl	8003184 <vPortEnterCritical>

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8002a9a:	6829      	ldr	r1, [r5, #0]
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002a9c:	4815      	ldr	r0, [pc, #84]	; (8002af4 <xTaskCheckForTimeOut+0x68>)

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8002a9e:	1c4b      	adds	r3, r1, #1
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002aa0:	6802      	ldr	r2, [r0, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8002aa2:	d01b      	beq.n	8002adc <xTaskCheckForTimeOut+0x50>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002aa4:	4e14      	ldr	r6, [pc, #80]	; (8002af8 <xTaskCheckForTimeOut+0x6c>)
 8002aa6:	6823      	ldr	r3, [r4, #0]
 8002aa8:	6837      	ldr	r7, [r6, #0]
 8002aaa:	42bb      	cmp	r3, r7
 8002aac:	6863      	ldr	r3, [r4, #4]
 8002aae:	d001      	beq.n	8002ab4 <xTaskCheckForTimeOut+0x28>
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d20e      	bcs.n	8002ad2 <xTaskCheckForTimeOut+0x46>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8002ab4:	1ad7      	subs	r7, r2, r3
 8002ab6:	42b9      	cmp	r1, r7
 8002ab8:	d90b      	bls.n	8002ad2 <xTaskCheckForTimeOut+0x46>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8002aba:	1a8a      	subs	r2, r1, r2
 8002abc:	4413      	add	r3, r2
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002abe:	6831      	ldr	r1, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002ac0:	6802      	ldr	r2, [r0, #0]
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8002ac2:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
 8002ac4:	2500      	movs	r5, #0

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002ac6:	e884 0006 	stmia.w	r4, {r1, r2}
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8002aca:	f000 fb6d 	bl	80031a8 <vPortExitCritical>

	return xReturn;
}
 8002ace:	4628      	mov	r0, r5
 8002ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8002ad2:	2501      	movs	r5, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8002ad4:	f000 fb68 	bl	80031a8 <vPortExitCritical>

	return xReturn;
}
 8002ad8:	4628      	mov	r0, r5
 8002ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
 8002adc:	2500      	movs	r5, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8002ade:	f000 fb63 	bl	80031a8 <vPortExitCritical>

	return xReturn;
}
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );
 8002ae6:	f000 fb2b 	bl	8003140 <ulPortSetInterruptMask>
 8002aea:	e7fe      	b.n	8002aea <xTaskCheckForTimeOut+0x5e>

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002aec:	f000 fb28 	bl	8003140 <ulPortSetInterruptMask>
 8002af0:	e7fe      	b.n	8002af0 <xTaskCheckForTimeOut+0x64>
 8002af2:	bf00      	nop
 8002af4:	200001a0 	andcs	r0, r0, r0, lsr #3
 8002af8:	2000019c 	mulcs	r0, ip, r1

08002afc <vTaskMissedYield>:
}
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 8002afc:	4b01      	ldr	r3, [pc, #4]	; (8002b04 <vTaskMissedYield+0x8>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	4770      	bx	lr
 8002b04:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

08002b08 <uxTaskGetTaskNumber>:
	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
 8002b08:	b100      	cbz	r0, 8002b0c <uxTaskGetTaskNumber+0x4>
		{
			pxTCB = ( TCB_t * ) xTask;
			uxReturn = pxTCB->uxTaskNumber;
 8002b0a:	6c40      	ldr	r0, [r0, #68]	; 0x44
		{
			uxReturn = 0U;
		}

		return uxReturn;
	}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop

08002b10 <vTaskSetTaskNumber>:

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
	TCB_t *pxTCB;

		if( xTask != NULL )
 8002b10:	b100      	cbz	r0, 8002b14 <vTaskSetTaskNumber+0x4>
		{
			pxTCB = ( TCB_t * ) xTask;
			pxTCB->uxTaskNumber = uxHandle;
 8002b12:	6441      	str	r1, [r0, #68]	; 0x44
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop

08002b18 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8002b18:	4b01      	ldr	r3, [pc, #4]	; (8002b20 <xTaskGetCurrentTaskHandle+0x8>)
 8002b1a:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000184 	andcs	r0, r0, r4, lsl #3

08002b24 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002b24:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <xTaskGetSchedulerState+0x18>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	b133      	cbz	r3, 8002b38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b2a:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <xTaskGetSchedulerState+0x1c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002b30:	bf14      	ite	ne
 8002b32:	2000      	movne	r0, #0
 8002b34:	2002      	moveq	r0, #2
 8002b36:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002b38:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 8002b3a:	4770      	bx	lr
 8002b3c:	200000fc 	strdcs	r0, [r0], -ip
 8002b40:	2000017c 	andcs	r0, r0, ip, ror r1

08002b44 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002b46:	4604      	mov	r4, r0
 8002b48:	b1c0      	cbz	r0, 8002b7c <vTaskPriorityInherit+0x38>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002b4a:	4d17      	ldr	r5, [pc, #92]	; (8002ba8 <vTaskPriorityInherit+0x64>)
 8002b4c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b4e:	682a      	ldr	r2, [r5, #0]
 8002b50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d212      	bcs.n	8002b7c <vTaskPriorityInherit+0x38>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002b56:	6982      	ldr	r2, [r0, #24]
 8002b58:	2a00      	cmp	r2, #0
 8002b5a:	db04      	blt.n	8002b66 <vTaskPriorityInherit+0x22>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b5c:	682a      	ldr	r2, [r5, #0]
 8002b5e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b60:	f1c2 0205 	rsb	r2, r2, #5
 8002b64:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8002b66:	4e11      	ldr	r6, [pc, #68]	; (8002bac <vTaskPriorityInherit+0x68>)
 8002b68:	6962      	ldr	r2, [r4, #20]
 8002b6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b6e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d003      	beq.n	8002b7e <vTaskPriorityInherit+0x3a>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002b76:	682b      	ldr	r3, [r5, #0]
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002b7e:	1d27      	adds	r7, r4, #4
 8002b80:	4638      	mov	r0, r7
 8002b82:	f7fe f83f 	bl	8000c04 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002b86:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8002b88:	4a09      	ldr	r2, [pc, #36]	; (8002bb0 <vTaskPriorityInherit+0x6c>)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002b8c:	6811      	ldr	r1, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002b8e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002b90:	428b      	cmp	r3, r1
 8002b92:	d900      	bls.n	8002b96 <vTaskPriorityInherit+0x52>
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002b9a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8002b9e:	4639      	mov	r1, r7
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ba0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 8002ba4:	f7fe b806 	b.w	8000bb4 <vListInsertEnd>
 8002ba8:	20000184 	andcs	r0, r0, r4, lsl #3
 8002bac:	20000118 	andcs	r0, r0, r8, lsl r1
 8002bb0:	200001ec 	andcs	r0, r0, ip, ror #3

08002bb4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002bb4:	b538      	push	{r3, r4, r5, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	b1f0      	cbz	r0, 8002bf8 <vTaskPriorityDisinherit+0x44>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002bba:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002bbc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d01a      	beq.n	8002bf8 <vTaskPriorityDisinherit+0x44>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002bc2:	1d05      	adds	r5, r0, #4
 8002bc4:	4628      	mov	r0, r5
 8002bc6:	f7fe f81d 	bl	8000c04 <uxListRemove>
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002bca:	69a2      	ldr	r2, [r4, #24]
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002bcc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
 8002bce:	480b      	ldr	r0, [pc, #44]	; (8002bfc <vTaskPriorityDisinherit+0x48>)
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002bd0:	62e3      	str	r3, [r4, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002bd2:	2a00      	cmp	r2, #0
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bd4:	bfa4      	itt	ge
 8002bd6:	f1c3 0205 	rsbge	r2, r3, #5
 8002bda:	61a2      	strge	r2, [r4, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
 8002bdc:	4a08      	ldr	r2, [pc, #32]	; (8002c00 <vTaskPriorityDisinherit+0x4c>)
 8002bde:	6811      	ldr	r1, [r2, #0]
 8002be0:	428b      	cmp	r3, r1
 8002be2:	bf88      	it	hi
 8002be4:	6013      	strhi	r3, [r2, #0]
 8002be6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002bea:	4629      	mov	r1, r5
 8002bec:	eb00 0083 	add.w	r0, r0, r3, lsl #2
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
 8002bf4:	f7fd bfde 	b.w	8000bb4 <vListInsertEnd>
 8002bf8:	bd38      	pop	{r3, r4, r5, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000118 	andcs	r0, r0, r8, lsl r1
 8002c00:	200001ec 	andcs	r0, r0, ip, ror #3

08002c04 <uxTaskResetEventItemValue>:

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8002c04:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <uxTaskResetEventItemValue+0x14>)
 8002c06:	6819      	ldr	r1, [r3, #0]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8002c0c:	6988      	ldr	r0, [r1, #24]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	f1c3 0305 	rsb	r3, r3, #5
 8002c14:	6193      	str	r3, [r2, #24]

	return uxReturn;
}
 8002c16:	4770      	bx	lr
 8002c18:	20000184 	andcs	r0, r0, r4, lsl #3

08002c1c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8002c1e:	4c1d      	ldr	r4, [pc, #116]	; (8002c94 <xTimerCreateTimerTask+0x78>)
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002c20:	b085      	sub	sp, #20
static void prvCheckForValidListAndQueue( void )
{
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002c22:	f000 faaf 	bl	8003184 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002c26:	6826      	ldr	r6, [r4, #0]
 8002c28:	b196      	cbz	r6, 8002c50 <xTimerCreateTimerTask+0x34>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c2a:	f000 fabd 	bl	80031a8 <vPortExitCritical>
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();

	if( xTimerQueue != NULL )
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	b34b      	cbz	r3, 8002c86 <xTimerCreateTimerTask+0x6a>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8002c32:	2300      	movs	r3, #0
 8002c34:	2202      	movs	r2, #2
 8002c36:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002c3a:	9302      	str	r3, [sp, #8]
 8002c3c:	9303      	str	r3, [sp, #12]
 8002c3e:	4816      	ldr	r0, [pc, #88]	; (8002c98 <xTimerCreateTimerTask+0x7c>)
 8002c40:	4916      	ldr	r1, [pc, #88]	; (8002c9c <xTimerCreateTimerTask+0x80>)
 8002c42:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c46:	f7fe fe47 	bl	80018d8 <xTaskGenericCreate>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002c4a:	b1e0      	cbz	r0, 8002c86 <xTimerCreateTimerTask+0x6a>
	return xReturn;
}
 8002c4c:	b005      	add	sp, #20
 8002c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 8002c50:	4f13      	ldr	r7, [pc, #76]	; (8002ca0 <xTimerCreateTimerTask+0x84>)
			vListInitialise( &xActiveTimerList2 );
 8002c52:	4d14      	ldr	r5, [pc, #80]	; (8002ca4 <xTimerCreateTimerTask+0x88>)
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 8002c54:	4638      	mov	r0, r7
 8002c56:	f7fd ff9d 	bl	8000b94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002c5a:	4628      	mov	r0, r5
 8002c5c:	f7fd ff9a 	bl	8000b94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002c60:	4a11      	ldr	r2, [pc, #68]	; (8002ca8 <xTimerCreateTimerTask+0x8c>)
			pxOverflowTimerList = &xActiveTimerList2;
 8002c62:	4b12      	ldr	r3, [pc, #72]	; (8002cac <xTimerCreateTimerTask+0x90>)
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
 8002c64:	6017      	str	r7, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002c66:	200a      	movs	r0, #10
 8002c68:	4632      	mov	r2, r6
 8002c6a:	210c      	movs	r1, #12
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
 8002c6c:	601d      	str	r5, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002c6e:	f7fe f86d 	bl	8000d4c <xQueueGenericCreate>
 8002c72:	6020      	str	r0, [r4, #0]
			configASSERT( xTimerQueue );
 8002c74:	b150      	cbz	r0, 8002c8c <xTimerCreateTimerTask+0x70>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002c76:	490e      	ldr	r1, [pc, #56]	; (8002cb0 <xTimerCreateTimerTask+0x94>)
 8002c78:	f7fe fd4a 	bl	8001710 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c7c:	f000 fa94 	bl	80031a8 <vPortExitCritical>
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();

	if( xTimerQueue != NULL )
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1d5      	bne.n	8002c32 <xTimerCreateTimerTask+0x16>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002c86:	f000 fa5b 	bl	8003140 <ulPortSetInterruptMask>
 8002c8a:	e7fe      	b.n	8002c8a <xTimerCreateTimerTask+0x6e>
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
			configASSERT( xTimerQueue );
 8002c8c:	f000 fa58 	bl	8003140 <ulPortSetInterruptMask>
 8002c90:	e7fe      	b.n	8002c90 <xTimerCreateTimerTask+0x74>
 8002c92:	bf00      	nop
 8002c94:	20000224 	andcs	r0, r0, r4, lsr #4
 8002c98:	08002db5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, sl, fp, sp}
 8002c9c:	08005304 	stmdaeq	r0, {r2, r8, r9, ip, lr}
 8002ca0:	200001f8 	strdcs	r0, [r0], -r8
 8002ca4:	2000020c 	andcs	r0, r0, ip, lsl #4
 8002ca8:	200001f4 	strdcs	r0, [r0], -r4
 8002cac:	20000228 	andcs	r0, r0, r8, lsr #4
 8002cb0:	080052fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, ip, lr}

08002cb4 <xTimerCreate>:
	return xReturn;
}
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 8002cb8:	460d      	mov	r5, r1
	return xReturn;
}
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002cba:	b083      	sub	sp, #12
 8002cbc:	4683      	mov	fp, r0
 8002cbe:	4692      	mov	sl, r2
 8002cc0:	461f      	mov	r7, r3
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 8002cc2:	b1e9      	cbz	r1, 8002d00 <xTimerCreate+0x4c>
	{
		pxNewTimer = NULL;
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8002cc4:	202c      	movs	r0, #44	; 0x2c
 8002cc6:	f000 fb4f 	bl	8003368 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8002cca:	4604      	mov	r4, r0
 8002ccc:	b1a0      	cbz	r0, 8002cf8 <xTimerCreate+0x44>
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8002cce:	4e1d      	ldr	r6, [pc, #116]	; (8002d44 <xTimerCreate+0x90>)
static void prvCheckForValidListAndQueue( void )
{
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002cd0:	f000 fa58 	bl	8003184 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002cd4:	f8d6 9000 	ldr.w	r9, [r6]
 8002cd8:	f1b9 0f00 	cmp.w	r9, #0
 8002cdc:	d013      	beq.n	8002d06 <xTimerCreate+0x52>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002cde:	f000 fa63 	bl	80031a8 <vPortExitCritical>
			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
			pxNewTimer->uxAutoReload = uxAutoReload;
			pxNewTimer->pvTimerID = pvTimerID;
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002ce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
 8002ce4:	f8c4 b000 	str.w	fp, [r4]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002ce8:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8002cea:	f8c4 a01c 	str.w	sl, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 8002cee:	6227      	str	r7, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002cf0:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002cf2:	1d20      	adds	r0, r4, #4
 8002cf4:	f7fd ff5a 	bl	8000bac <vListInitialiseItem>

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	return ( TimerHandle_t ) pxNewTimer;
}
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	b003      	add	sp, #12
 8002cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			traceTIMER_CREATE_FAILED();
		}
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002d00:	f000 fa1e 	bl	8003140 <ulPortSetInterruptMask>
 8002d04:	e7fe      	b.n	8002d04 <xTimerCreate+0x50>
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 8002d06:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <xTimerCreate+0x94>)
			vListInitialise( &xActiveTimerList2 );
 8002d08:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8002d54 <xTimerCreate+0xa0>
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd ff40 	bl	8000b94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002d14:	4640      	mov	r0, r8
 8002d16:	f7fd ff3d 	bl	8000b94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002d1a:	490c      	ldr	r1, [pc, #48]	; (8002d4c <xTimerCreate+0x98>)
 8002d1c:	9b01      	ldr	r3, [sp, #4]
			pxOverflowTimerList = &xActiveTimerList2;
 8002d1e:	f8df e038 	ldr.w	lr, [pc, #56]	; 8002d58 <xTimerCreate+0xa4>
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
 8002d22:	600b      	str	r3, [r1, #0]
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002d24:	464a      	mov	r2, r9
 8002d26:	200a      	movs	r0, #10
 8002d28:	210c      	movs	r1, #12
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
 8002d2a:	f8ce 8000 	str.w	r8, [lr]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002d2e:	f7fe f80d 	bl	8000d4c <xQueueGenericCreate>
 8002d32:	6030      	str	r0, [r6, #0]
			configASSERT( xTimerQueue );
 8002d34:	b118      	cbz	r0, 8002d3e <xTimerCreate+0x8a>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002d36:	4906      	ldr	r1, [pc, #24]	; (8002d50 <xTimerCreate+0x9c>)
 8002d38:	f7fe fcea 	bl	8001710 <vQueueAddToRegistry>
 8002d3c:	e7cf      	b.n	8002cde <xTimerCreate+0x2a>
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
			configASSERT( xTimerQueue );
 8002d3e:	f000 f9ff 	bl	8003140 <ulPortSetInterruptMask>
 8002d42:	e7fe      	b.n	8002d42 <xTimerCreate+0x8e>
 8002d44:	20000224 	andcs	r0, r0, r4, lsr #4
 8002d48:	200001f8 	strdcs	r0, [r0], -r8
 8002d4c:	200001f4 	strdcs	r0, [r0], -r4
 8002d50:	080052fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, ip, lr}
 8002d54:	2000020c 	andcs	r0, r0, ip, lsl #4
 8002d58:	20000228 	andcs	r0, r0, r8, lsr #4

08002d5c <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002d5c:	b530      	push	{r4, r5, lr}
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002d5e:	4d14      	ldr	r5, [pc, #80]	; (8002db0 <xTimerGenericCommand+0x54>)
 8002d60:	682c      	ldr	r4, [r5, #0]
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002d62:	b085      	sub	sp, #20
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002d64:	b304      	cbz	r4, 8002da8 <xTimerGenericCommand+0x4c>
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002d66:	2905      	cmp	r1, #5
	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002d68:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002d6a:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002d6c:	9003      	str	r0, [sp, #12]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002d6e:	dc0b      	bgt.n	8002d88 <xTimerGenericCommand+0x2c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002d70:	f7ff fed8 	bl	8002b24 <xTaskGetSchedulerState>
 8002d74:	2802      	cmp	r0, #2
 8002d76:	d00f      	beq.n	8002d98 <xTimerGenericCommand+0x3c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002d78:	2200      	movs	r2, #0
 8002d7a:	6828      	ldr	r0, [r5, #0]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	a901      	add	r1, sp, #4
 8002d80:	f7fe f862 	bl	8000e48 <xQueueGenericSend>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8002d84:	b005      	add	sp, #20
 8002d86:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	a901      	add	r1, sp, #4
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f7fe f9e8 	bl	8001164 <xQueueGenericSendFromISR>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8002d94:	b005      	add	sp, #20
 8002d96:	bd30      	pop	{r4, r5, pc}

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002d98:	6828      	ldr	r0, [r5, #0]
 8002d9a:	9a08      	ldr	r2, [sp, #32]
 8002d9c:	a901      	add	r1, sp, #4
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f7fe f852 	bl	8000e48 <xQueueGenericSend>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8002da4:	b005      	add	sp, #20
 8002da6:	bd30      	pop	{r4, r5, pc}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
 8002da8:	4620      	mov	r0, r4
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8002daa:	b005      	add	sp, #20
 8002dac:	bd30      	pop	{r4, r5, pc}
 8002dae:	bf00      	nop
 8002db0:	20000224 	andcs	r0, r0, r4, lsr #4

08002db4 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db8:	4da4      	ldr	r5, [pc, #656]	; (800304c <prvTimerTask+0x298>)
 8002dba:	4ca5      	ldr	r4, [pc, #660]	; (8003050 <prvTimerTask+0x29c>)
 8002dbc:	f8df 8294 	ldr.w	r8, [pc, #660]	; 8003054 <prvTimerTask+0x2a0>
 8002dc0:	b089      	sub	sp, #36	; 0x24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002dc2:	682b      	ldr	r3, [r5, #0]
 8002dc4:	681e      	ldr	r6, [r3, #0]
 8002dc6:	f1d6 0601 	rsbs	r6, r6, #1
 8002dca:	bf38      	it	cc
 8002dcc:	2600      	movcc	r6, #0
	if( *pxListWasEmpty == pdFALSE )
 8002dce:	2e00      	cmp	r6, #0
 8002dd0:	d163      	bne.n	8002e9a <prvTimerTask+0xe6>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f8d3 9000 	ldr.w	r9, [r3]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002dd8:	f7ff f8dc 	bl	8001f94 <vTaskSuspendAll>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002ddc:	f7ff f8e2 	bl	8001fa4 <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 8002de0:	f8d8 3000 	ldr.w	r3, [r8]
 8002de4:	4a9b      	ldr	r2, [pc, #620]	; (8003054 <prvTimerTask+0x2a0>)
 8002de6:	4298      	cmp	r0, r3
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002de8:	4607      	mov	r7, r0

	if( xTimeNow < xLastTime )
 8002dea:	d359      	bcc.n	8002ea0 <prvTimerTask+0xec>
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 8002dec:	6010      	str	r0, [r2, #0]
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002dee:	b916      	cbnz	r6, 8002df6 <prvTimerTask+0x42>
 8002df0:	45b9      	cmp	r9, r7
 8002df2:	f240 8091 	bls.w	8002f18 <prvTimerTask+0x164>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8002df6:	ebc7 0109 	rsb	r1, r7, r9
 8002dfa:	6820      	ldr	r0, [r4, #0]
 8002dfc:	f7fe fce4 	bl	80017c8 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8002e00:	f7ff f992 	bl	8002128 <xTaskResumeAll>
 8002e04:	2800      	cmp	r0, #0
 8002e06:	f000 8084 	beq.w	8002f12 <prvTimerTask+0x15e>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	6820      	ldr	r0, [r4, #0]
 8002e10:	a902      	add	r1, sp, #8
 8002e12:	f7fe fa39 	bl	8001288 <xQueueGenericReceive>
 8002e16:	2800      	cmp	r0, #0
 8002e18:	d0d3      	beq.n	8002dc2 <prvTimerTask+0xe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002e1a:	9b02      	ldr	r3, [sp, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	dbf4      	blt.n	8002e0a <prvTimerTask+0x56>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002e20:	9f04      	ldr	r7, [sp, #16]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	b113      	cbz	r3, 8002e2c <prvTimerTask+0x78>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002e26:	1d38      	adds	r0, r7, #4
 8002e28:	f7fd feec 	bl	8000c04 <uxListRemove>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002e2c:	f7ff f8ba 	bl	8001fa4 <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 8002e30:	f8d8 3000 	ldr.w	r3, [r8]
 8002e34:	4298      	cmp	r0, r3
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002e36:	4681      	mov	r9, r0

	if( xTimeNow < xLastTime )
 8002e38:	d324      	bcc.n	8002e84 <prvTimerTask+0xd0>
 8002e3a:	9b02      	ldr	r3, [sp, #8]
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 8002e3c:	f8c8 9000 	str.w	r9, [r8]
 8002e40:	2b09      	cmp	r3, #9
 8002e42:	d8e2      	bhi.n	8002e0a <prvTimerTask+0x56>
 8002e44:	2201      	movs	r2, #1
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	f413 7f04 	tst.w	r3, #528	; 0x210
 8002e4e:	f040 80ec 	bne.w	800302a <prvTimerTask+0x276>
 8002e52:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 8002e56:	f040 80c7 	bne.w	8002fe8 <prvTimerTask+0x234>
 8002e5a:	069b      	lsls	r3, r3, #26
 8002e5c:	d5d5      	bpl.n	8002e0a <prvTimerTask+0x56>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
 8002e5e:	4638      	mov	r0, r7
 8002e60:	f000 fab0 	bl	80033c4 <vPortFree>
 8002e64:	e7d1      	b.n	8002e0a <prvTimerTask+0x56>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002e66:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002e68:	68de      	ldr	r6, [r3, #12]
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002e6a:	f8d3 b000 	ldr.w	fp, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002e6e:	f106 0a04 	add.w	sl, r6, #4
 8002e72:	4650      	mov	r0, sl
 8002e74:	f7fd fec6 	bl	8000c04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002e78:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002e7a:	4630      	mov	r0, r6
 8002e7c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002e7e:	69f3      	ldr	r3, [r6, #28]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d03a      	beq.n	8002efa <prvTimerTask+0x146>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002e84:	682b      	ldr	r3, [r5, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	2a00      	cmp	r2, #0
 8002e8a:	d1ec      	bne.n	8002e66 <prvTimerTask+0xb2>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8002e8c:	4972      	ldr	r1, [pc, #456]	; (8003058 <prvTimerTask+0x2a4>)
 8002e8e:	680a      	ldr	r2, [r1, #0]
 8002e90:	496e      	ldr	r1, [pc, #440]	; (800304c <prvTimerTask+0x298>)
 8002e92:	600a      	str	r2, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8002e94:	4a70      	ldr	r2, [pc, #448]	; (8003058 <prvTimerTask+0x2a4>)
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	e7cf      	b.n	8002e3a <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002e9a:	f04f 0900 	mov.w	r9, #0
 8002e9e:	e79b      	b.n	8002dd8 <prvTimerTask+0x24>
	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002ea0:	f04f 0900 	mov.w	r9, #0
 8002ea4:	e00e      	b.n	8002ec4 <prvTimerTask+0x110>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ea6:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ea8:	68de      	ldr	r6, [r3, #12]
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002eaa:	f8d3 b000 	ldr.w	fp, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002eae:	f106 0a04 	add.w	sl, r6, #4
 8002eb2:	4650      	mov	r0, sl
 8002eb4:	f7fd fea6 	bl	8000c04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002eb8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002eba:	4630      	mov	r0, r6
 8002ebc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002ebe:	69f3      	ldr	r3, [r6, #28]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d00e      	beq.n	8002ee2 <prvTimerTask+0x12e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002ec4:	682b      	ldr	r3, [r5, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d1ec      	bne.n	8002ea6 <prvTimerTask+0xf2>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8002ecc:	4962      	ldr	r1, [pc, #392]	; (8003058 <prvTimerTask+0x2a4>)
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 8002ece:	f8c8 7000 	str.w	r7, [r8]
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8002ed2:	680a      	ldr	r2, [r1, #0]
 8002ed4:	495d      	ldr	r1, [pc, #372]	; (800304c <prvTimerTask+0x298>)
 8002ed6:	600a      	str	r2, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8002ed8:	4a5f      	ldr	r2, [pc, #380]	; (8003058 <prvTimerTask+0x2a4>)
 8002eda:	6013      	str	r3, [r2, #0]
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8002edc:	f7ff f924 	bl	8002128 <xTaskResumeAll>
 8002ee0:	e793      	b.n	8002e0a <prvTimerTask+0x56>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002ee2:	69b3      	ldr	r3, [r6, #24]
 8002ee4:	445b      	add	r3, fp
			if( xReloadTime > xNextExpireTime )
 8002ee6:	455b      	cmp	r3, fp
 8002ee8:	d92a      	bls.n	8002f40 <prvTimerTask+0x18c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002eea:	4958      	ldr	r1, [pc, #352]	; (800304c <prvTimerTask+0x298>)
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
			if( xReloadTime > xNextExpireTime )
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002eec:	6073      	str	r3, [r6, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002eee:	6808      	ldr	r0, [r1, #0]
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
			if( xReloadTime > xNextExpireTime )
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002ef0:	6136      	str	r6, [r6, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002ef2:	4651      	mov	r1, sl
 8002ef4:	f7fd fe6c 	bl	8000bd0 <vListInsert>
 8002ef8:	e7e4      	b.n	8002ec4 <prvTimerTask+0x110>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002efa:	69b3      	ldr	r3, [r6, #24]
 8002efc:	445b      	add	r3, fp
			if( xReloadTime > xNextExpireTime )
 8002efe:	455b      	cmp	r3, fp
 8002f00:	d933      	bls.n	8002f6a <prvTimerTask+0x1b6>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002f02:	4a52      	ldr	r2, [pc, #328]	; (800304c <prvTimerTask+0x298>)
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
			if( xReloadTime > xNextExpireTime )
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002f04:	6073      	str	r3, [r6, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002f06:	6136      	str	r6, [r6, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002f08:	6810      	ldr	r0, [r2, #0]
 8002f0a:	4651      	mov	r1, sl
 8002f0c:	f7fd fe60 	bl	8000bd0 <vListInsert>
 8002f10:	e7b8      	b.n	8002e84 <prvTimerTask+0xd0>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8002f12:	f000 f909 	bl	8003128 <vPortYield>
 8002f16:	e778      	b.n	8002e0a <prvTimerTask+0x56>
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
			{
				( void ) xTaskResumeAll();
 8002f18:	f7ff f906 	bl	8002128 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f1c:	682b      	ldr	r3, [r5, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f8d3 a00c 	ldr.w	sl, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f24:	f10a 0b04 	add.w	fp, sl, #4
 8002f28:	4658      	mov	r0, fp
 8002f2a:	f7fd fe6b 	bl	8000c04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002f2e:	f8da 301c 	ldr.w	r3, [sl, #28]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d02f      	beq.n	8002f96 <prvTimerTask+0x1e2>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f36:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8002f3a:	4650      	mov	r0, sl
 8002f3c:	4798      	blx	r3
 8002f3e:	e764      	b.n	8002e0a <prvTimerTask+0x56>
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	b17b      	cbz	r3, 8002f64 <prvTimerTask+0x1b0>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002f44:	f8cd 9014 	str.w	r9, [sp, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002f48:	f8cd b018 	str.w	fp, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002f4c:	9607      	str	r6, [sp, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002f4e:	f7ff fde9 	bl	8002b24 <xTaskGetSchedulerState>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002f52:	493f      	ldr	r1, [pc, #252]	; (8003050 <prvTimerTask+0x29c>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	6808      	ldr	r0, [r1, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	a905      	add	r1, sp, #20
 8002f5c:	f7fd ff74 	bl	8000e48 <xQueueGenericSend>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
				configASSERT( xResult );
 8002f60:	2800      	cmp	r0, #0
 8002f62:	d1af      	bne.n	8002ec4 <prvTimerTask+0x110>
 8002f64:	f000 f8ec 	bl	8003140 <ulPortSetInterruptMask>
 8002f68:	e7fe      	b.n	8002f68 <prvTimerTask+0x1b4>
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002f6a:	6823      	ldr	r3, [r4, #0]
 8002f6c:	b183      	cbz	r3, 8002f90 <prvTimerTask+0x1dc>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	9305      	str	r3, [sp, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002f72:	f8cd b018 	str.w	fp, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002f76:	9607      	str	r6, [sp, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002f78:	f7ff fdd4 	bl	8002b24 <xTaskGetSchedulerState>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002f7c:	4934      	ldr	r1, [pc, #208]	; (8003050 <prvTimerTask+0x29c>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	6808      	ldr	r0, [r1, #0]
 8002f82:	4613      	mov	r3, r2
 8002f84:	a905      	add	r1, sp, #20
 8002f86:	f7fd ff5f 	bl	8000e48 <xQueueGenericSend>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
				configASSERT( xResult );
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	f47f af7a 	bne.w	8002e84 <prvTimerTask+0xd0>
 8002f90:	f000 f8d6 	bl	8003140 <ulPortSetInterruptMask>
 8002f94:	e7fe      	b.n	8002f94 <prvTimerTask+0x1e0>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8002f96:	f8da 3018 	ldr.w	r3, [sl, #24]
static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002f9a:	f8ca a010 	str.w	sl, [sl, #16]
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8002f9e:	eb09 0203 	add.w	r2, r9, r3
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8002fa2:	4297      	cmp	r7, r2

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002fa4:	f8ca 2004 	str.w	r2, [sl, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8002fa8:	d205      	bcs.n	8002fb6 <prvTimerTask+0x202>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002faa:	4a28      	ldr	r2, [pc, #160]	; (800304c <prvTimerTask+0x298>)
 8002fac:	4659      	mov	r1, fp
 8002fae:	6810      	ldr	r0, [r2, #0]
 8002fb0:	f7fd fe0e 	bl	8000bd0 <vListInsert>
 8002fb4:	e7bf      	b.n	8002f36 <prvTimerTask+0x182>

	if( xNextExpiryTime <= xTimeNow )
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8002fb6:	ebc9 0707 	rsb	r7, r9, r7
 8002fba:	42bb      	cmp	r3, r7
 8002fbc:	d84e      	bhi.n	800305c <prvTimerTask+0x2a8>
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	b17b      	cbz	r3, 8002fe2 <prvTimerTask+0x22e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002fc2:	9605      	str	r6, [sp, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002fc4:	f8cd 9018 	str.w	r9, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002fc8:	f8cd a01c 	str.w	sl, [sp, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002fcc:	f7ff fdaa 	bl	8002b24 <xTaskGetSchedulerState>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002fd0:	491f      	ldr	r1, [pc, #124]	; (8003050 <prvTimerTask+0x29c>)
 8002fd2:	4632      	mov	r2, r6
 8002fd4:	6808      	ldr	r0, [r1, #0]
 8002fd6:	4633      	mov	r3, r6
 8002fd8:	a905      	add	r1, sp, #20
 8002fda:	f7fd ff35 	bl	8000e48 <xQueueGenericSend>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
			configASSERT( xResult );
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	d1a9      	bne.n	8002f36 <prvTimerTask+0x182>
 8002fe2:	f000 f8ad 	bl	8003140 <ulPortSetInterruptMask>
 8002fe6:	e7fe      	b.n	8002fe6 <prvTimerTask+0x232>
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8002fe8:	9b03      	ldr	r3, [sp, #12]
 8002fea:	69b9      	ldr	r1, [r7, #24]
static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002fec:	613f      	str	r7, [r7, #16]
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8002fee:	18ca      	adds	r2, r1, r3
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8002ff0:	454a      	cmp	r2, r9

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002ff2:	607a      	str	r2, [r7, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8002ff4:	d838      	bhi.n	8003068 <prvTimerTask+0x2b4>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8002ff6:	ebc3 0309 	rsb	r3, r3, r9
 8002ffa:	4299      	cmp	r1, r3
 8002ffc:	d83d      	bhi.n	800307a <prvTimerTask+0x2c6>
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	4638      	mov	r0, r7
 8003002:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	2b01      	cmp	r3, #1
 8003008:	f47f aeff 	bne.w	8002e0a <prvTimerTask+0x56>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	9b03      	ldr	r3, [sp, #12]
 8003010:	2100      	movs	r1, #0
 8003012:	441a      	add	r2, r3
 8003014:	9100      	str	r1, [sp, #0]
 8003016:	4638      	mov	r0, r7
 8003018:	460b      	mov	r3, r1
 800301a:	f7ff fe9f 	bl	8002d5c <xTimerGenericCommand>
							configASSERT( xResult );
 800301e:	2800      	cmp	r0, #0
 8003020:	f47f aef3 	bne.w	8002e0a <prvTimerTask+0x56>
 8003024:	f000 f88c 	bl	8003140 <ulPortSetInterruptMask>
 8003028:	e7fe      	b.n	8003028 <prvTimerTask+0x274>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800302a:	9b03      	ldr	r3, [sp, #12]
 800302c:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800302e:	b353      	cbz	r3, 8003086 <prvTimerTask+0x2d2>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003030:	444b      	add	r3, r9
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8003032:	454b      	cmp	r3, r9
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003034:	bf98      	it	ls
 8003036:	4a08      	ldrls	r2, [pc, #32]	; (8003058 <prvTimerTask+0x2a4>)

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003038:	607b      	str	r3, [r7, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800303a:	613f      	str	r7, [r7, #16]
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800303c:	f107 0104 	add.w	r1, r7, #4
 8003040:	bf94      	ite	ls
 8003042:	6810      	ldrls	r0, [r2, #0]
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003044:	6828      	ldrhi	r0, [r5, #0]
 8003046:	f7fd fdc3 	bl	8000bd0 <vListInsert>
 800304a:	e6de      	b.n	8002e0a <prvTimerTask+0x56>
 800304c:	200001f4 	strdcs	r0, [r0], -r4
 8003050:	20000224 	andcs	r0, r0, r4, lsr #4
 8003054:	20000220 	andcs	r0, r0, r0, lsr #4
 8003058:	20000228 	andcs	r0, r0, r8, lsr #4
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <prvTimerTask+0x2d8>)
 800305e:	4659      	mov	r1, fp
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	f7fd fdb5 	bl	8000bd0 <vListInsert>
 8003066:	e766      	b.n	8002f36 <prvTimerTask+0x182>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003068:	454b      	cmp	r3, r9
 800306a:	d901      	bls.n	8003070 <prvTimerTask+0x2bc>
 800306c:	4293      	cmp	r3, r2
 800306e:	d9c6      	bls.n	8002ffe <prvTimerTask+0x24a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003070:	1d39      	adds	r1, r7, #4
 8003072:	6828      	ldr	r0, [r5, #0]
 8003074:	f7fd fdac 	bl	8000bd0 <vListInsert>
 8003078:	e6c7      	b.n	8002e0a <prvTimerTask+0x56>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800307a:	4b04      	ldr	r3, [pc, #16]	; (800308c <prvTimerTask+0x2d8>)
 800307c:	1d39      	adds	r1, r7, #4
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	f7fd fda6 	bl	8000bd0 <vListInsert>
 8003084:	e6c1      	b.n	8002e0a <prvTimerTask+0x56>
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003086:	f000 f85b 	bl	8003140 <ulPortSetInterruptMask>
 800308a:	e7fe      	b.n	800308a <prvTimerTask+0x2d6>
 800308c:	20000228 	andcs	r0, r0, r8, lsr #4

08003090 <xTimerIsTimerActive>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8003090:	b510      	push	{r4, lr}
 8003092:	4604      	mov	r4, r0
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8003094:	f000 f876 	bl	8003184 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 8003098:	6964      	ldr	r4, [r4, #20]
 800309a:	3400      	adds	r4, #0
 800309c:	bf18      	it	ne
 800309e:	2401      	movne	r4, #1
	}
	taskEXIT_CRITICAL();
 80030a0:	f000 f882 	bl	80031a8 <vPortExitCritical>

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80030a4:	4620      	mov	r0, r4
 80030a6:	bd10      	pop	{r4, pc}

080030a8 <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = ( Timer_t * ) xTimer;

	return pxTimer->pvTimerID;
}
 80030a8:	6a00      	ldr	r0, [r0, #32]
 80030aa:	4770      	bx	lr

080030ac <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80030ac:	4805      	ldr	r0, [pc, #20]	; (80030c4 <prvPortStartFirstTask+0x18>)
 80030ae:	6800      	ldr	r0, [r0, #0]
 80030b0:	6800      	ldr	r0, [r0, #0]
 80030b2:	f380 8808 	msr	MSP, r0
 80030b6:	b662      	cpsie	i
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	df00      	svc	0
 80030c2:	bf00      	nop
 80030c4:	e000ed08 	and	lr, r0, r8, lsl #26

080030c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80030c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80030d8 <vPortEnableVFP+0x10>
 80030cc:	6801      	ldr	r1, [r0, #0]
 80030ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80030d2:	6001      	str	r1, [r0, #0]
 80030d4:	4770      	bx	lr
 80030d6:	0000      	movs	r0, r0
 80030d8:	e000ed88 	and	lr, r0, r8, lsl #27

080030dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80030dc:	b410      	push	{r4}

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <pxPortInitialiseStack+0x28>)
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80030e0:	f840 1c08 	str.w	r1, [r0, #-8]

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80030e4:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80030e8:	f06f 0102 	mvn.w	r1, #2

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80030ec:	f840 4c04 	str.w	r4, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80030f0:	f840 2c20 	str.w	r2, [r0, #-32]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80030f4:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80030f8:	f840 1c24 	str.w	r1, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 80030fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003100:	3844      	subs	r0, #68	; 0x44
 8003102:	4770      	bx	lr
 8003104:	08003151 	stmdaeq	r0, {r0, r4, r6, r8, ip, sp}

08003108 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <pxCurrentTCBConst2>)
 800310a:	6819      	ldr	r1, [r3, #0]
 800310c:	6808      	ldr	r0, [r1, #0]
 800310e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003112:	f380 8809 	msr	PSP, r0
 8003116:	f3bf 8f6f 	isb	sy
 800311a:	f04f 0000 	mov.w	r0, #0
 800311e:	f380 8811 	msr	BASEPRI, r0
 8003122:	4770      	bx	lr

08003124 <pxCurrentTCBConst2>:
 8003124:	20000184 	andcs	r0, r0, r4, lsl #3

08003128 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003128:	4b04      	ldr	r3, [pc, #16]	; (800313c <vPortYield+0x14>)
 800312a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800312e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8003130:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003134:	f3bf 8f6f 	isb	sy
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	e000ed04 	and	lr, r0, r4, lsl #26

08003140 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8003140:	f3ef 8011 	mrs	r0, BASEPRI
 8003144:	f04f 0150 	mov.w	r1, #80	; 0x50
 8003148:	f381 8811 	msr	BASEPRI, r1
 800314c:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
 800314e:	2000      	movs	r0, #0

08003150 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003150:	b508      	push	{r3, lr}
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <prvTaskExitError+0x18>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3301      	adds	r3, #1
 8003158:	d002      	beq.n	8003160 <prvTaskExitError+0x10>
 800315a:	f7ff fff1 	bl	8003140 <ulPortSetInterruptMask>
 800315e:	e7fe      	b.n	800315e <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
 8003160:	f7ff ffee 	bl	8003140 <ulPortSetInterruptMask>
 8003164:	e7fe      	b.n	8003164 <prvTaskExitError+0x14>
 8003166:	bf00      	nop
 8003168:	20000018 	andcs	r0, r0, r8, lsl r0

0800316c <vPortEndScheduler>:
	return 0;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 800316c:	b508      	push	{r3, lr}
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
 800316e:	4b04      	ldr	r3, [pc, #16]	; (8003180 <vPortEndScheduler+0x14>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003176:	d002      	beq.n	800317e <vPortEndScheduler+0x12>
 8003178:	f7ff ffe2 	bl	8003140 <ulPortSetInterruptMask>
 800317c:	e7fe      	b.n	800317c <vPortEndScheduler+0x10>
 800317e:	bd08      	pop	{r3, pc}
 8003180:	20000018 	andcs	r0, r0, r8, lsl r0

08003184 <vPortEnterCritical>:
	__asm volatile( "isb" );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003184:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
 8003186:	f7ff ffdb 	bl	8003140 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 800318a:	4b04      	ldr	r3, [pc, #16]	; (800319c <vPortEnterCritical+0x18>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	3201      	adds	r2, #1
 8003190:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8003192:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	bd08      	pop	{r3, pc}
 800319c:	20000018 	andcs	r0, r0, r8, lsl r0

080031a0 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
 80031a0:	f380 8811 	msr	BASEPRI, r0
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop

080031a8 <vPortExitCritical>:
	__asm volatile( "isb" );
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80031a8:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting );
 80031aa:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <vPortExitCritical+0x20>)
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	b118      	cbz	r0, 80031b8 <vPortExitCritical+0x10>
	uxCriticalNesting--;
 80031b0:	3801      	subs	r0, #1
 80031b2:	6018      	str	r0, [r3, #0]
	if( uxCriticalNesting == 0 )
 80031b4:	b118      	cbz	r0, 80031be <vPortExitCritical+0x16>
 80031b6:	bd08      	pop	{r3, pc}
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80031b8:	f7ff ffc2 	bl	8003140 <ulPortSetInterruptMask>
 80031bc:	e7fe      	b.n	80031bc <vPortExitCritical+0x14>
	uxCriticalNesting--;
	if( uxCriticalNesting == 0 )
	{
		portENABLE_INTERRUPTS();
	}
}
 80031be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
	if( uxCriticalNesting == 0 )
	{
		portENABLE_INTERRUPTS();
 80031c2:	f7ff bfed 	b.w	80031a0 <vPortClearInterruptMask>
 80031c6:	bf00      	nop
 80031c8:	20000018 	andcs	r0, r0, r8, lsl r0

080031cc <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80031cc:	f3ef 8009 	mrs	r0, PSP
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	4b12      	ldr	r3, [pc, #72]	; (8003220 <pxCurrentTCBConst>)
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	f01e 0f10 	tst.w	lr, #16
 80031dc:	bf08      	it	eq
 80031de:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80031e2:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031e6:	6010      	str	r0, [r2, #0]
 80031e8:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80031ec:	f04f 0050 	mov.w	r0, #80	; 0x50
 80031f0:	f380 8811 	msr	BASEPRI, r0
 80031f4:	f7ff fab8 	bl	8002768 <vTaskSwitchContext>
 80031f8:	f04f 0000 	mov.w	r0, #0
 80031fc:	f380 8811 	msr	BASEPRI, r0
 8003200:	bc08      	pop	{r3}
 8003202:	6819      	ldr	r1, [r3, #0]
 8003204:	6808      	ldr	r0, [r1, #0]
 8003206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800320a:	f01e 0f10 	tst.w	lr, #16
 800320e:	bf08      	it	eq
 8003210:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003214:	f380 8809 	msr	PSP, r0
 8003218:	f3bf 8f6f 	isb	sy
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop

08003220 <pxCurrentTCBConst>:
 8003220:	20000184 	andcs	r0, r0, r4, lsl #3

08003224 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003224:	b508      	push	{r3, lr}
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8003226:	f7ff ff8b 	bl	8003140 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800322a:	f7fe fedb 	bl	8001fe4 <xTaskIncrementTick>
 800322e:	b118      	cbz	r0, 8003238 <SysTick_Handler+0x14>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003230:	4b04      	ldr	r3, [pc, #16]	; (8003244 <SysTick_Handler+0x20>)
 8003232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003236:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8003238:	2000      	movs	r0, #0
}
 800323a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 800323e:	f7ff bfaf 	b.w	80031a0 <vPortClearInterruptMask>
 8003242:	bf00      	nop
 8003244:	e000ed04 	and	lr, r0, r4, lsl #26

08003248 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003248:	4b07      	ldr	r3, [pc, #28]	; (8003268 <vPortSetupTimerInterrupt+0x20>)
 800324a:	4a08      	ldr	r2, [pc, #32]	; (800326c <vPortSetupTimerInterrupt+0x24>)
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	4908      	ldr	r1, [pc, #32]	; (8003270 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <vPortSetupTimerInterrupt+0x2c>)
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003252:	b410      	push	{r4}
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003254:	fba2 4000 	umull	r4, r0, r2, r0
 8003258:	0980      	lsrs	r0, r0, #6
 800325a:	3801      	subs	r0, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800325c:	2207      	movs	r2, #7
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800325e:	6008      	str	r0, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
}
 8003260:	f85d 4b04 	ldr.w	r4, [sp], #4
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003264:	601a      	str	r2, [r3, #0]
}
 8003266:	4770      	bx	lr
 8003268:	20000010 	andcs	r0, r0, r0, lsl r0
 800326c:	10624dd3 	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
 8003270:	e000e014 	and	lr, r0, r4, lsl r0
 8003274:	e000e010 	and	lr, r0, r0, lsl r0

08003278 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003278:	b510      	push	{r4, lr}
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800327a:	4b24      	ldr	r3, [pc, #144]	; (800330c <xPortStartScheduler+0x94>)

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800327c:	4924      	ldr	r1, [pc, #144]	; (8003310 <xPortStartScheduler+0x98>)
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800327e:	781c      	ldrb	r4, [r3, #0]
		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003280:	4824      	ldr	r0, [pc, #144]	; (8003314 <xPortStartScheduler+0x9c>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003282:	b082      	sub	sp, #8
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003284:	b2e4      	uxtb	r4, r4

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003286:	22ff      	movs	r2, #255	; 0xff
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003288:	9401      	str	r4, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800328a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003294:	f89d 4003 	ldrb.w	r4, [sp, #3]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003298:	f89d 2003 	ldrb.w	r2, [sp, #3]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800329c:	f004 0450 	and.w	r4, r4, #80	; 0x50

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80032a0:	2307      	movs	r3, #7

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80032a2:	700c      	strb	r4, [r1, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032a4:	0611      	lsls	r1, r2, #24
		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80032a6:	6003      	str	r3, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032a8:	d50e      	bpl.n	80032c8 <xPortStartScheduler+0x50>
 80032aa:	2306      	movs	r3, #6
 80032ac:	e000      	b.n	80032b0 <xPortStartScheduler+0x38>
 80032ae:	460b      	mov	r3, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80032b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80032b4:	0052      	lsls	r2, r2, #1
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	f88d 2003 	strb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80032c0:	0612      	lsls	r2, r2, #24
 80032c2:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 80032c6:	d4f2      	bmi.n	80032ae <xPortStartScheduler+0x36>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80032c8:	9c01      	ldr	r4, [sp, #4]
 80032ca:	4910      	ldr	r1, [pc, #64]	; (800330c <xPortStartScheduler+0x94>)
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80032cc:	4a12      	ldr	r2, [pc, #72]	; (8003318 <xPortStartScheduler+0xa0>)
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80032ce:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80032d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80032d4:	b2e4      	uxtb	r4, r4
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80032d6:	6003      	str	r3, [r0, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80032d8:	700c      	strb	r4, [r1, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80032da:	6813      	ldr	r3, [r2, #0]
 80032dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80032e2:	6813      	ldr	r3, [r2, #0]
 80032e4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80032e8:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80032ea:	f7ff ffad 	bl	8003248 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80032ee:	4b0b      	ldr	r3, [pc, #44]	; (800331c <xPortStartScheduler+0xa4>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80032f4:	f7ff fee8 	bl	80030c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80032f8:	4b09      	ldr	r3, [pc, #36]	; (8003320 <xPortStartScheduler+0xa8>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8003300:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003302:	f7ff fed3 	bl	80030ac <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8003306:	f7ff ff23 	bl	8003150 <prvTaskExitError>
 800330a:	bf00      	nop
 800330c:	e000e400 	and	lr, r0, r0, lsl #8
 8003310:	2000022c 	andcs	r0, r0, ip, lsr #4
 8003314:	20000230 	andcs	r0, r0, r0, lsr r2
 8003318:	e000ed20 	and	lr, r0, r0, lsr #26
 800331c:	20000018 	andcs	r0, r0, r8, lsl r0
 8003320:	e000ef34 	and	lr, r0, r4, lsr pc

08003324 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003324:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8003326:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800332a:	2b0f      	cmp	r3, #15
 800332c:	d905      	bls.n	800333a <vPortValidateInterruptPriority+0x16>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800332e:	490a      	ldr	r1, [pc, #40]	; (8003358 <vPortValidateInterruptPriority+0x34>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003330:	4a0a      	ldr	r2, [pc, #40]	; (800335c <vPortValidateInterruptPriority+0x38>)

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003332:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003334:	7812      	ldrb	r2, [r2, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d80b      	bhi.n	8003352 <vPortValidateInterruptPriority+0x2e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800333a:	4a09      	ldr	r2, [pc, #36]	; (8003360 <vPortValidateInterruptPriority+0x3c>)
 800333c:	4b09      	ldr	r3, [pc, #36]	; (8003364 <vPortValidateInterruptPriority+0x40>)
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003346:	429a      	cmp	r2, r3
 8003348:	d800      	bhi.n	800334c <vPortValidateInterruptPriority+0x28>
 800334a:	bd08      	pop	{r3, pc}
 800334c:	f7ff fef8 	bl	8003140 <ulPortSetInterruptMask>
 8003350:	e7fe      	b.n	8003350 <vPortValidateInterruptPriority+0x2c>
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003352:	f7ff fef5 	bl	8003140 <ulPortSetInterruptMask>
 8003356:	e7fe      	b.n	8003356 <vPortValidateInterruptPriority+0x32>
 8003358:	e000e3f0 	strd	lr, [r0], -r0
 800335c:	2000022c 	andcs	r0, r0, ip, lsr #4
 8003360:	e000ed0c 	and	lr, r0, ip, lsl #26
 8003364:	20000230 	andcs	r0, r0, r0, lsr r2

08003368 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003368:	b538      	push	{r3, r4, r5, lr}
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800336a:	0743      	lsls	r3, r0, #29
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800336c:	4604      	mov	r4, r0
	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800336e:	bf1c      	itt	ne
 8003370:	f020 0407 	bicne.w	r4, r0, #7
 8003374:	3408      	addne	r4, #8
		}
	#endif

	vTaskSuspendAll();
 8003376:	f7fe fe0d 	bl	8001f94 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 800337a:	4a0e      	ldr	r2, [pc, #56]	; (80033b4 <pvPortMalloc+0x4c>)
 800337c:	6813      	ldr	r3, [r2, #0]
 800337e:	b19b      	cbz	r3, 80033a8 <pvPortMalloc+0x40>
 8003380:	461d      	mov	r5, r3
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8003382:	4a0d      	ldr	r2, [pc, #52]	; (80033b8 <pvPortMalloc+0x50>)
 8003384:	490d      	ldr	r1, [pc, #52]	; (80033bc <pvPortMalloc+0x54>)
 8003386:	6813      	ldr	r3, [r2, #0]
 8003388:	441c      	add	r4, r3
 800338a:	428c      	cmp	r4, r1
 800338c:	d807      	bhi.n	800339e <pvPortMalloc+0x36>
 800338e:	42a3      	cmp	r3, r4
 8003390:	d205      	bcs.n	800339e <pvPortMalloc+0x36>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8003392:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
 8003394:	6014      	str	r4, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}	
	xTaskResumeAll();
 8003396:	f7fe fec7 	bl	8002128 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 800339a:	4628      	mov	r0, r5
 800339c:	bd38      	pop	{r3, r4, r5, pc}

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 800339e:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}	
	xTaskResumeAll();
 80033a0:	f7fe fec2 	bl	8002128 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 80033a4:	4628      	mov	r0, r5
 80033a6:	bd38      	pop	{r3, r4, r5, pc}
	vTaskSuspendAll();
	{
		if( pucAlignedHeap == NULL )
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 80033a8:	4d05      	ldr	r5, [pc, #20]	; (80033c0 <pvPortMalloc+0x58>)
 80033aa:	f025 0507 	bic.w	r5, r5, #7
 80033ae:	6015      	str	r5, [r2, #0]
 80033b0:	e7e7      	b.n	8003382 <pvPortMalloc+0x1a>
 80033b2:	bf00      	nop
 80033b4:	20012e38 	andcs	r2, r1, r8, lsr lr
 80033b8:	20000234 	andcs	r0, r0, r4, lsr r2
 80033bc:	00012bf7 	strdeq	r2, [r1], -r7
 80033c0:	20000240 	andcs	r0, r0, r0, asr #4

080033c4 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80033c4:	b508      	push	{r3, lr}
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 80033c6:	b110      	cbz	r0, 80033ce <vPortFree+0xa>
 80033c8:	f7ff feba 	bl	8003140 <ulPortSetInterruptMask>
 80033cc:	e7fe      	b.n	80033cc <vPortFree+0x8>
 80033ce:	bd08      	pop	{r3, pc}

080033d0 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
 80033d0:	4b01      	ldr	r3, [pc, #4]	; (80033d8 <vPortInitialiseBlocks+0x8>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	4770      	bx	lr
 80033d8:	20000234 	andcs	r0, r0, r4, lsr r2

080033dc <xPortGetFreeHeapSize>:
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 80033dc:	4b03      	ldr	r3, [pc, #12]	; (80033ec <xPortGetFreeHeapSize+0x10>)
 80033de:	6818      	ldr	r0, [r3, #0]
}
 80033e0:	f5c0 3095 	rsb	r0, r0, #76288	; 0x12a00
 80033e4:	f500 70fc 	add.w	r0, r0, #504	; 0x1f8
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000234 	andcs	r0, r0, r4, lsr r2

080033f0 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80033f0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80033f4:	4b02      	ldr	r3, [pc, #8]	; (8003400 <NVIC_PriorityGroupConfig+0x10>)
 80033f6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80033fa:	60d8      	str	r0, [r3, #12]
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	e000ed00 	and	lr, r0, r0, lsl #26

08003404 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003404:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003406:	b4f0      	push	{r4, r5, r6, r7}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003408:	b963      	cbnz	r3, 8003424 <NVIC_Init+0x20>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800340a:	7803      	ldrb	r3, [r0, #0]
 800340c:	4a19      	ldr	r2, [pc, #100]	; (8003474 <NVIC_Init+0x70>)
 800340e:	0959      	lsrs	r1, r3, #5
 8003410:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003412:	f003 031f 	and.w	r3, r3, #31
 8003416:	2001      	movs	r0, #1
 8003418:	fa00 f303 	lsl.w	r3, r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800341c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003420:	bcf0      	pop	{r4, r5, r6, r7}
 8003422:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8003424:	4b14      	ldr	r3, [pc, #80]	; (8003478 <NVIC_Init+0x74>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003426:	7847      	ldrb	r7, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8003428:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800342a:	7885      	ldrb	r5, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800342c:	7803      	ldrb	r3, [r0, #0]
 800342e:	4911      	ldr	r1, [pc, #68]	; (8003474 <NVIC_Init+0x70>)
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8003430:	43d2      	mvns	r2, r2
 8003432:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 8003436:	f1c2 0404 	rsb	r4, r2, #4
    tmpsub = tmpsub >> tmppriority;
 800343a:	260f      	movs	r6, #15

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800343c:	b2e4      	uxtb	r4, r4
 800343e:	fa07 f404 	lsl.w	r4, r7, r4
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8003442:	fa46 f202 	asr.w	r2, r6, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003446:	b2e4      	uxtb	r4, r4
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8003448:	402a      	ands	r2, r5
 800344a:	4322      	orrs	r2, r4
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800344c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8003450:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 8003454:	0112      	lsls	r2, r2, #4
 8003456:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800345c:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800345e:	2001      	movs	r0, #1
 8003460:	f003 021f 	and.w	r2, r3, #31
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003464:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003466:	fa00 f202 	lsl.w	r2, r0, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800346a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800346e:	bcf0      	pop	{r4, r5, r6, r7}
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	e000e100 	and	lr, r0, r0, lsl #2
 8003478:	e000ed00 	and	lr, r0, r0, lsl #26

0800347c <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 800347c:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8003480:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8003484:	4b01      	ldr	r3, [pc, #4]	; (800348c <NVIC_SetVectorTable+0x10>)
 8003486:	4308      	orrs	r0, r1
 8003488:	6098      	str	r0, [r3, #8]
 800348a:	4770      	bx	lr
 800348c:	e000ed00 	and	lr, r0, r0, lsl #26

08003490 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8003490:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <NVIC_SystemLPConfig+0x14>)
 8003492:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8003494:	b919      	cbnz	r1, 800349e <NVIC_SystemLPConfig+0xe>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8003496:	ea22 0000 	bic.w	r0, r2, r0
 800349a:	6118      	str	r0, [r3, #16]
 800349c:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 800349e:	4310      	orrs	r0, r2
 80034a0:	6118      	str	r0, [r3, #16]
 80034a2:	4770      	bx	lr
 80034a4:	e000ed00 	and	lr, r0, r0, lsl #26

080034a8 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <SysTick_CLKSourceConfig+0x14>)
 80034aa:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80034ac:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80034ae:	bf0c      	ite	eq
 80034b0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80034b4:	f022 0204 	bicne.w	r2, r2, #4
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	4770      	bx	lr
 80034bc:	e000e010 	and	lr, r0, r0, lsl r0

080034c0 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80034c0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 80034c2:	4b4b      	ldr	r3, [pc, #300]	; (80035f0 <GPIO_DeInit+0x130>)
 80034c4:	4298      	cmp	r0, r3
 80034c6:	d02a      	beq.n	800351e <GPIO_DeInit+0x5e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 80034c8:	4b4a      	ldr	r3, [pc, #296]	; (80035f4 <GPIO_DeInit+0x134>)
 80034ca:	4298      	cmp	r0, r3
 80034cc:	d031      	beq.n	8003532 <GPIO_DeInit+0x72>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 80034ce:	4b4a      	ldr	r3, [pc, #296]	; (80035f8 <GPIO_DeInit+0x138>)
 80034d0:	4298      	cmp	r0, r3
 80034d2:	d038      	beq.n	8003546 <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 80034d4:	4b49      	ldr	r3, [pc, #292]	; (80035fc <GPIO_DeInit+0x13c>)
 80034d6:	4298      	cmp	r0, r3
 80034d8:	d03f      	beq.n	800355a <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 80034da:	4b49      	ldr	r3, [pc, #292]	; (8003600 <GPIO_DeInit+0x140>)
 80034dc:	4298      	cmp	r0, r3
 80034de:	d046      	beq.n	800356e <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 80034e0:	4b48      	ldr	r3, [pc, #288]	; (8003604 <GPIO_DeInit+0x144>)
 80034e2:	4298      	cmp	r0, r3
 80034e4:	d04d      	beq.n	8003582 <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 80034e6:	4b48      	ldr	r3, [pc, #288]	; (8003608 <GPIO_DeInit+0x148>)
 80034e8:	4298      	cmp	r0, r3
 80034ea:	d054      	beq.n	8003596 <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 80034ec:	4b47      	ldr	r3, [pc, #284]	; (800360c <GPIO_DeInit+0x14c>)
 80034ee:	4298      	cmp	r0, r3
 80034f0:	d05b      	beq.n	80035aa <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }

  else if (GPIOx == GPIOI)
 80034f2:	4b47      	ldr	r3, [pc, #284]	; (8003610 <GPIO_DeInit+0x150>)
 80034f4:	4298      	cmp	r0, r3
 80034f6:	d062      	beq.n	80035be <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
 80034f8:	4b46      	ldr	r3, [pc, #280]	; (8003614 <GPIO_DeInit+0x154>)
 80034fa:	4298      	cmp	r0, r3
 80034fc:	d06b      	beq.n	80035d6 <GPIO_DeInit+0x116>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOK)
 80034fe:	4b46      	ldr	r3, [pc, #280]	; (8003618 <GPIO_DeInit+0x158>)
 8003500:	4298      	cmp	r0, r3
 8003502:	d000      	beq.n	8003506 <GPIO_DeInit+0x46>
 8003504:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 8003506:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800350a:	2101      	movs	r1, #1
 800350c:	f000 fb22 	bl	8003b54 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 8003510:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003514:	2100      	movs	r1, #0
    }
  }
}
 8003516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOK)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 800351a:	f000 bb1b 	b.w	8003b54 <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800351e:	2001      	movs	r0, #1
 8003520:	4601      	mov	r1, r0
 8003522:	f000 fb17 	bl	8003b54 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8003526:	2001      	movs	r0, #1
 8003528:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800352a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800352e:	f000 bb11 	b.w	8003b54 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8003532:	2002      	movs	r0, #2
 8003534:	2101      	movs	r1, #1
 8003536:	f000 fb0d 	bl	8003b54 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800353a:	2002      	movs	r0, #2
 800353c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800353e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8003542:	f000 bb07 	b.w	8003b54 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8003546:	2004      	movs	r0, #4
 8003548:	2101      	movs	r1, #1
 800354a:	f000 fb03 	bl	8003b54 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800354e:	2004      	movs	r0, #4
 8003550:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8003552:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8003556:	f000 bafd 	b.w	8003b54 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800355a:	2008      	movs	r0, #8
 800355c:	2101      	movs	r1, #1
 800355e:	f000 faf9 	bl	8003b54 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8003562:	2008      	movs	r0, #8
 8003564:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8003566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800356a:	f000 baf3 	b.w	8003b54 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800356e:	2010      	movs	r0, #16
 8003570:	2101      	movs	r1, #1
 8003572:	f000 faef 	bl	8003b54 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8003576:	2010      	movs	r0, #16
 8003578:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800357a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800357e:	f000 bae9 	b.w	8003b54 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8003582:	2020      	movs	r0, #32
 8003584:	2101      	movs	r1, #1
 8003586:	f000 fae5 	bl	8003b54 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800358a:	2020      	movs	r0, #32
 800358c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800358e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8003592:	f000 badf 	b.w	8003b54 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8003596:	2040      	movs	r0, #64	; 0x40
 8003598:	2101      	movs	r1, #1
 800359a:	f000 fadb 	bl	8003b54 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800359e:	2040      	movs	r0, #64	; 0x40
 80035a0:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80035a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80035a6:	f000 bad5 	b.w	8003b54 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80035aa:	2080      	movs	r0, #128	; 0x80
 80035ac:	2101      	movs	r1, #1
 80035ae:	f000 fad1 	bl	8003b54 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80035b2:	2080      	movs	r0, #128	; 0x80
 80035b4:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80035b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80035ba:	f000 bacb 	b.w	8003b54 <RCC_AHB1PeriphResetCmd>
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80035be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80035c2:	2101      	movs	r1, #1
 80035c4:	f000 fac6 	bl	8003b54 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80035c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80035cc:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80035ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80035d2:	f000 babf 	b.w	8003b54 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 80035d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80035da:	2101      	movs	r1, #1
 80035dc:	f000 faba 	bl	8003b54 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 80035e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80035e4:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80035e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 80035ea:	f000 bab3 	b.w	8003b54 <RCC_AHB1PeriphResetCmd>
 80035ee:	bf00      	nop
 80035f0:	40020000 	andmi	r0, r2, r0
 80035f4:	40020400 	andmi	r0, r2, r0, lsl #8
 80035f8:	40020800 	andmi	r0, r2, r0, lsl #16
 80035fc:	40020c00 	andmi	r0, r2, r0, lsl #24
 8003600:	40021000 	andmi	r1, r2, r0
 8003604:	40021400 	andmi	r1, r2, r0, lsl #8
 8003608:	40021800 	andmi	r1, r2, r0, lsl #16
 800360c:	40021c00 	andmi	r1, r2, r0, lsl #24
 8003610:	40022000 	andmi	r2, r2, r0
 8003614:	40022400 	andmi	r2, r2, r0, lsl #8
 8003618:	40022800 	andmi	r2, r2, r0, lsl #16

0800361c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800361c:	2200      	movs	r2, #0
 800361e:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003622:	4613      	mov	r3, r2
 8003624:	680e      	ldr	r6, [r1, #0]
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003626:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003628:	f04f 0803 	mov.w	r8, #3
 800362c:	e004      	b.n	8003638 <GPIO_Init+0x1c>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800362e:	3301      	adds	r3, #1
 8003630:	2b10      	cmp	r3, #16
 8003632:	f102 0202 	add.w	r2, r2, #2
 8003636:	d02c      	beq.n	8003692 <GPIO_Init+0x76>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003638:	fa07 f403 	lsl.w	r4, r7, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800363c:	ea04 0506 	and.w	r5, r4, r6

    if (currentpin == pos)
 8003640:	42a5      	cmp	r5, r4
 8003642:	d1f4      	bne.n	800362e <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003644:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003648:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800364c:	fa08 f402 	lsl.w	r4, r8, r2
 8003650:	43e4      	mvns	r4, r4
 8003652:	ea04 0909 	and.w	r9, r4, r9
 8003656:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800365a:	f8d0 9000 	ldr.w	r9, [r0]
 800365e:	fa0c fa02 	lsl.w	sl, ip, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003662:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003666:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800366a:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800366e:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003672:	d911      	bls.n	8003698 <GPIO_Init+0x7c>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003674:	68c5      	ldr	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003676:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800367a:	402c      	ands	r4, r5
 800367c:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800367e:	68c5      	ldr	r5, [r0, #12]
 8003680:	fa0c f402 	lsl.w	r4, ip, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003684:	3301      	adds	r3, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003686:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003688:	2b10      	cmp	r3, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800368a:	60c4      	str	r4, [r0, #12]
 800368c:	f102 0202 	add.w	r2, r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003690:	d1d2      	bne.n	8003638 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8003692:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8003696:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8003698:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800369c:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80036a0:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80036a4:	ea04 0a0a 	and.w	sl, r4, sl
 80036a8:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80036ac:	f8d0 a008 	ldr.w	sl, [r0, #8]
 80036b0:	fa09 f902 	lsl.w	r9, r9, r2
 80036b4:	ea49 090a 	orr.w	r9, r9, sl
 80036b8:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80036bc:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80036c0:	ea29 0505 	bic.w	r5, r9, r5
 80036c4:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80036c6:	6845      	ldr	r5, [r0, #4]
 80036c8:	fa0c fc03 	lsl.w	ip, ip, r3
 80036cc:	fa1f fc8c 	uxth.w	ip, ip
 80036d0:	ea4c 0505 	orr.w	r5, ip, r5
 80036d4:	6045      	str	r5, [r0, #4]
 80036d6:	e7cd      	b.n	8003674 <GPIO_Init+0x58>

080036d8 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80036d8:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80036da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036de:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80036e0:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80036e2:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80036e4:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80036e6:	71c3      	strb	r3, [r0, #7]
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop

080036ec <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036ec:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 80036ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036f2:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 80036f4:	9b01      	ldr	r3, [sp, #4]
 80036f6:	430b      	orrs	r3, r1
 80036f8:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80036fa:	9b01      	ldr	r3, [sp, #4]
 80036fc:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80036fe:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8003700:	9b01      	ldr	r3, [sp, #4]
 8003702:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8003704:	69c3      	ldr	r3, [r0, #28]
 8003706:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8003708:	69c3      	ldr	r3, [r0, #28]
 800370a:	9301      	str	r3, [sp, #4]
}
 800370c:	b002      	add	sp, #8
 800370e:	4770      	bx	lr

08003710 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8003710:	6903      	ldr	r3, [r0, #16]
 8003712:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8003714:	bf0c      	ite	eq
 8003716:	2000      	moveq	r0, #0
 8003718:	2001      	movne	r0, #1
 800371a:	4770      	bx	lr

0800371c <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800371c:	6900      	ldr	r0, [r0, #16]
}
 800371e:	b280      	uxth	r0, r0
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop

08003724 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 8003724:	6943      	ldr	r3, [r0, #20]
 8003726:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8003728:	bf0c      	ite	eq
 800372a:	2000      	moveq	r0, #0
 800372c:	2001      	movne	r0, #1
 800372e:	4770      	bx	lr

08003730 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8003730:	6940      	ldr	r0, [r0, #20]
}
 8003732:	b280      	uxth	r0, r0
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop

08003738 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8003738:	8301      	strh	r1, [r0, #24]
 800373a:	4770      	bx	lr

0800373c <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800373c:	8341      	strh	r1, [r0, #26]
 800373e:	4770      	bx	lr

08003740 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8003740:	b90a      	cbnz	r2, 8003746 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8003742:	8341      	strh	r1, [r0, #26]
 8003744:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 8003746:	8301      	strh	r1, [r0, #24]
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop

0800374c <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 800374c:	6141      	str	r1, [r0, #20]
 800374e:	4770      	bx	lr

08003750 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8003750:	6943      	ldr	r3, [r0, #20]
 8003752:	4059      	eors	r1, r3
 8003754:	6141      	str	r1, [r0, #20]
 8003756:	4770      	bx	lr

08003758 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8003758:	08cb      	lsrs	r3, r1, #3
 800375a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800375e:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8003762:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003764:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003766:	6a04      	ldr	r4, [r0, #32]
 8003768:	230f      	movs	r3, #15
 800376a:	408b      	lsls	r3, r1
 800376c:	ea24 0303 	bic.w	r3, r4, r3
 8003770:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8003772:	6a03      	ldr	r3, [r0, #32]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 8003774:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003778:	408a      	lsls	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800377a:	4313      	orrs	r3, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800377c:	6203      	str	r3, [r0, #32]
}
 800377e:	4770      	bx	lr

08003780 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003780:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <RCC_DeInit+0x40>)

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8003782:	4810      	ldr	r0, [pc, #64]	; (80037c4 <RCC_DeInit+0x44>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003784:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003786:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003788:	f041 0101 	orr.w	r1, r1, #1
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800378c:	b430      	push	{r4, r5}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800378e:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003790:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8003792:	6819      	ldr	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003794:	4d0c      	ldr	r5, [pc, #48]	; (80037c8 <RCC_DeInit+0x48>)

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8003796:	4c0d      	ldr	r4, [pc, #52]	; (80037cc <RCC_DeInit+0x4c>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8003798:	f021 51a8 	bic.w	r1, r1, #352321536	; 0x15000000
 800379c:	f421 2110 	bic.w	r1, r1, #589824	; 0x90000
 80037a0:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80037a2:	605d      	str	r5, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80037a4:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80037a8:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80037ac:	6819      	ldr	r1, [r3, #0]
 80037ae:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80037b2:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 

}
 80037b4:	bc30      	pop	{r4, r5}
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80037b6:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 
 80037b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

}
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40023800 	andmi	r3, r2, r0, lsl #16
 80037c4:	24003000 	strcs	r3, [r0], #-0
 80037c8:	24003010 	strcs	r3, [r0], #-16
 80037cc:	20003000 	andcs	r3, r0, r0

080037d0 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80037d0:	4b02      	ldr	r3, [pc, #8]	; (80037dc <RCC_HSEConfig+0xc>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80037d6:	7018      	strb	r0, [r3, #0]
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40023802 	andmi	r3, r2, r2, lsl #16

080037e0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80037e0:	b082      	sub	sp, #8
  __IO uint32_t startupcounter = 0;
 80037e2:	2300      	movs	r3, #0

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80037e4:	4a0b      	ldr	r2, [pc, #44]	; (8003814 <RCC_WaitForHSEStartUp+0x34>)
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 80037e6:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80037e8:	6813      	ldr	r3, [r2, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80037ea:	039b      	lsls	r3, r3, #14
 80037ec:	d40c      	bmi.n	8003808 <RCC_WaitForHSEStartUp+0x28>
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 80037ee:	9b01      	ldr	r3, [sp, #4]
 80037f0:	3301      	adds	r3, #1
 80037f2:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 80037f4:	9b01      	ldr	r3, [sp, #4]
 80037f6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80037fa:	d1f5      	bne.n	80037e8 <RCC_WaitForHSEStartUp+0x8>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80037fc:	4b05      	ldr	r3, [pc, #20]	; (8003814 <RCC_WaitForHSEStartUp+0x34>)
 80037fe:	6818      	ldr	r0, [r3, #0]
  }
  else
  {
    status = ERROR;
  }
  return (status);
 8003800:	f3c0 4040 	ubfx	r0, r0, #17, #1
}
 8003804:	b002      	add	sp, #8
 8003806:	4770      	bx	lr
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8003808:	9b01      	ldr	r3, [sp, #4]
 800380a:	3301      	adds	r3, #1
 800380c:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800380e:	9b01      	ldr	r3, [sp, #4]
 8003810:	e7f4      	b.n	80037fc <RCC_WaitForHSEStartUp+0x1c>
 8003812:	bf00      	nop
 8003814:	40023800 	andmi	r3, r2, r0, lsl #16

08003818 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8003818:	4b03      	ldr	r3, [pc, #12]	; (8003828 <RCC_AdjustHSICalibrationValue+0x10>)
 800381a:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 800381c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8003820:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8003824:	6018      	str	r0, [r3, #0]
 8003826:	4770      	bx	lr
 8003828:	40023800 	andmi	r3, r2, r0, lsl #16

0800382c <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800382c:	4b01      	ldr	r3, [pc, #4]	; (8003834 <RCC_HSICmd+0x8>)
 800382e:	6018      	str	r0, [r3, #0]
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	42470000 	submi	r0, r7, #0

08003838 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8003838:	4b06      	ldr	r3, [pc, #24]	; (8003854 <RCC_LSEConfig+0x1c>)
 800383a:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 800383c:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800383e:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8003840:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8003842:	d005      	beq.n	8003850 <RCC_LSEConfig+0x18>
 8003844:	2804      	cmp	r0, #4
 8003846:	d102      	bne.n	800384e <RCC_LSEConfig+0x16>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8003848:	2205      	movs	r2, #5
 800384a:	701a      	strb	r2, [r3, #0]
 800384c:	4770      	bx	lr
 800384e:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8003850:	7018      	strb	r0, [r3, #0]
      break;
 8003852:	4770      	bx	lr
 8003854:	40023870 	andmi	r3, r2, r0, ror r8

08003858 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8003858:	4b01      	ldr	r3, [pc, #4]	; (8003860 <RCC_LSICmd+0x8>)
 800385a:	6018      	str	r0, [r3, #0]
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	42470e80 	submi	r0, r7, #128, 28	; 0x800

08003864 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8003864:	b430      	push	{r4, r5}
 8003866:	9c02      	ldr	r4, [sp, #8]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8003868:	4d06      	ldr	r5, [pc, #24]	; (8003884 <RCC_PLLConfig+0x20>)
 800386a:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800386e:	085b      	lsrs	r3, r3, #1
 8003870:	4301      	orrs	r1, r0
 8003872:	3b01      	subs	r3, #1
 8003874:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8003878:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800387c:	606b      	str	r3, [r5, #4]
                 (PLLQ << 24);
}
 800387e:	bc30      	pop	{r4, r5}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40023800 	andmi	r3, r2, r0, lsl #16

08003888 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8003888:	4b01      	ldr	r3, [pc, #4]	; (8003890 <RCC_PLLCmd+0x8>)
 800388a:	6018      	str	r0, [r3, #0]
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	42470060 	submi	r0, r7, #96	; 0x60

08003894 <RCC_PLLI2SConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 8003894:	0712      	lsls	r2, r2, #28
 8003896:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 800389a:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <RCC_PLLI2SConfig+0x14>)
 800389c:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 80038a0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40023800 	andmi	r3, r2, r0, lsl #16

080038ac <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 80038ac:	4b01      	ldr	r3, [pc, #4]	; (80038b4 <RCC_PLLI2SCmd+0x8>)
 80038ae:	6018      	str	r0, [r3, #0]
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	42470068 	submi	r0, r7, #104	; 0x68

080038b8 <RCC_PLLSAIConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 80038b8:	0712      	lsls	r2, r2, #28
 80038ba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80038be:	4b03      	ldr	r3, [pc, #12]	; (80038cc <RCC_PLLSAIConfig+0x14>)
 80038c0:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 80038c4:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40023800 	andmi	r3, r2, r0, lsl #16

080038d0 <RCC_PLLSAICmd>:
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 80038d0:	4b01      	ldr	r3, [pc, #4]	; (80038d8 <RCC_PLLSAICmd+0x8>)
 80038d2:	6018      	str	r0, [r3, #0]
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	42470070 	submi	r0, r7, #112	; 0x70

080038dc <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 80038dc:	4b01      	ldr	r3, [pc, #4]	; (80038e4 <RCC_ClockSecuritySystemCmd+0x8>)
 80038de:	6018      	str	r0, [r3, #0]
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	4247004c 	submi	r0, r7, #76	; 0x4c

080038e8 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 80038e8:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <RCC_MCO1Config+0x10>)
 80038ea:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 80038ec:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 80038f0:	4311      	orrs	r1, r2
 80038f2:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80038f4:	6098      	str	r0, [r3, #8]
 80038f6:	4770      	bx	lr
 80038f8:	40023800 	andmi	r3, r2, r0, lsl #16

080038fc <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 80038fc:	4b03      	ldr	r3, [pc, #12]	; (800390c <RCC_MCO2Config+0x10>)
 80038fe:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8003900:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8003904:	4311      	orrs	r1, r2
 8003906:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8003908:	6098      	str	r0, [r3, #8]
 800390a:	4770      	bx	lr
 800390c:	40023800 	andmi	r3, r2, r0, lsl #16

08003910 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8003910:	4b03      	ldr	r3, [pc, #12]	; (8003920 <RCC_SYSCLKConfig+0x10>)
 8003912:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8003914:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8003918:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800391a:	6098      	str	r0, [r3, #8]
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40023800 	andmi	r3, r2, r0, lsl #16

08003924 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8003924:	4b02      	ldr	r3, [pc, #8]	; (8003930 <RCC_GetSYSCLKSource+0xc>)
 8003926:	6898      	ldr	r0, [r3, #8]
}
 8003928:	f000 000c 	and.w	r0, r0, #12
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40023800 	andmi	r3, r2, r0, lsl #16

08003934 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8003934:	4b03      	ldr	r3, [pc, #12]	; (8003944 <RCC_HCLKConfig+0x10>)
 8003936:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8003938:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800393c:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800393e:	6098      	str	r0, [r3, #8]
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40023800 	andmi	r3, r2, r0, lsl #16

08003948 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8003948:	4b03      	ldr	r3, [pc, #12]	; (8003958 <RCC_PCLK1Config+0x10>)
 800394a:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800394c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8003950:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003952:	6098      	str	r0, [r3, #8]
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40023800 	andmi	r3, r2, r0, lsl #16

0800395c <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800395c:	4b03      	ldr	r3, [pc, #12]	; (800396c <RCC_PCLK2Config+0x10>)
 800395e:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8003960:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8003964:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003968:	6098      	str	r0, [r3, #8]
 800396a:	4770      	bx	lr
 800396c:	40023800 	andmi	r3, r2, r0, lsl #16

08003970 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003970:	4a1f      	ldr	r2, [pc, #124]	; (80039f0 <RCC_GetClocksFreq+0x80>)
 8003972:	6893      	ldr	r3, [r2, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8003978:	2b04      	cmp	r3, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800397a:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 800397c:	d01b      	beq.n	80039b6 <RCC_GetClocksFreq+0x46>
 800397e:	2b08      	cmp	r3, #8
 8003980:	d01c      	beq.n	80039bc <RCC_GetClocksFreq+0x4c>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003982:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <RCC_GetClocksFreq+0x84>)
 8003984:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8003986:	491a      	ldr	r1, [pc, #104]	; (80039f0 <RCC_GetClocksFreq+0x80>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8003988:	4a1b      	ldr	r2, [pc, #108]	; (80039f8 <RCC_GetClocksFreq+0x88>)
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800398a:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 4;
 800398c:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8003990:	5d14      	ldrb	r4, [r2, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8003992:	40e3      	lsrs	r3, r4
 8003994:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8003996:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 8003998:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 800399c:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800399e:	fa23 f404 	lsr.w	r4, r3, r4
 80039a2:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80039a4:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
  presc = APBAHBPrescTable[tmp];
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
}
 80039a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
  tmp = tmp >> 13;
 80039aa:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 80039ae:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80039b0:	40d3      	lsrs	r3, r2
 80039b2:	60c3      	str	r3, [r0, #12]
}
 80039b4:	4770      	bx	lr
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80039b6:	4b11      	ldr	r3, [pc, #68]	; (80039fc <RCC_GetClocksFreq+0x8c>)
 80039b8:	6003      	str	r3, [r0, #0]
      break;
 80039ba:	e7e4      	b.n	8003986 <RCC_GetClocksFreq+0x16>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80039bc:	6854      	ldr	r4, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039be:	6851      	ldr	r1, [r2, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80039c0:	6852      	ldr	r2, [r2, #4]
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 80039c2:	0263      	lsls	r3, r4, #9
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80039c4:	bf4c      	ite	mi
 80039c6:	4b0d      	ldrmi	r3, [pc, #52]	; (80039fc <RCC_GetClocksFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80039c8:	4b0a      	ldrpl	r3, [pc, #40]	; (80039f4 <RCC_GetClocksFreq+0x84>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039ca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80039ce:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80039d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80039d6:	fb03 f302 	mul.w	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80039da:	4a05      	ldr	r2, [pc, #20]	; (80039f0 <RCC_GetClocksFreq+0x80>)
 80039dc:	6852      	ldr	r2, [r2, #4]
 80039de:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80039e2:	3201      	adds	r2, #1
 80039e4:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80039e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80039ea:	6003      	str	r3, [r0, #0]
      break;
 80039ec:	e7cb      	b.n	8003986 <RCC_GetClocksFreq+0x16>
 80039ee:	bf00      	nop
 80039f0:	40023800 	andmi	r3, r2, r0, lsl #16
 80039f4:	00f42400 	rscseq	r2, r4, r0, lsl #8
 80039f8:	2000001c 	andcs	r0, r0, ip, lsl r0
 80039fc:	007a1200 	rsbseq	r1, sl, r0, lsl #4

08003a00 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8003a00:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8003a04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a08:	d109      	bne.n	8003a1e <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8003a0a:	4a08      	ldr	r2, [pc, #32]	; (8003a2c <RCC_RTCCLKConfig+0x2c>)
 8003a0c:	6891      	ldr	r1, [r2, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8003a0e:	f020 4370 	bic.w	r3, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8003a12:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8003a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a1a:	430b      	orrs	r3, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8003a1c:	6093      	str	r3, [r2, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8003a1e:	4b03      	ldr	r3, [pc, #12]	; (8003a2c <RCC_RTCCLKConfig+0x2c>)
 8003a20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a22:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8003a26:	4310      	orrs	r0, r2
 8003a28:	6718      	str	r0, [r3, #112]	; 0x70
 8003a2a:	4770      	bx	lr
 8003a2c:	40023800 	andmi	r3, r2, r0, lsl #16

08003a30 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8003a30:	4b01      	ldr	r3, [pc, #4]	; (8003a38 <RCC_RTCCLKCmd+0x8>)
 8003a32:	6018      	str	r0, [r3, #0]
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

08003a3c <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8003a3c:	4b01      	ldr	r3, [pc, #4]	; (8003a44 <RCC_BackupResetCmd+0x8>)
 8003a3e:	6018      	str	r0, [r3, #0]
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	42470e40 	submi	r0, r7, #64, 28	; 0x400

08003a48 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8003a48:	4b01      	ldr	r3, [pc, #4]	; (8003a50 <RCC_I2SCLKConfig+0x8>)
 8003a4a:	6018      	str	r0, [r3, #0]
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	4247015c 	submi	r0, r7, #92, 2

08003a54 <RCC_SAIPLLI2SClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8003a54:	4b04      	ldr	r3, [pc, #16]	; (8003a68 <RCC_SAIPLLI2SClkDivConfig+0x14>)
 8003a56:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8003a5a:	3801      	subs	r0, #1
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 8003a5c:	f022 021f 	bic.w	r2, r2, #31

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8003a60:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8003a62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003a66:	4770      	bx	lr
 8003a68:	40023800 	andmi	r3, r2, r0, lsl #16

08003a6c <RCC_SAIPLLSAIClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <RCC_SAIPLLSAIClkDivConfig+0x18>)
 8003a6e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8003a72:	3801      	subs	r0, #1
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 8003a74:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8003a78:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8003a7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40023800 	andmi	r3, r2, r0, lsl #16

08003a88 <RCC_SAIBlockACLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8003a88:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <RCC_SAIBlockACLKConfig+0x14>)
 8003a8a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 8003a8e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 8003a92:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8003a94:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	andmi	r3, r2, r0, lsl #16

08003aa0 <RCC_SAIBlockBCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8003aa0:	4b04      	ldr	r3, [pc, #16]	; (8003ab4 <RCC_SAIBlockBCLKConfig+0x14>)
 8003aa2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 8003aa6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 8003aaa:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8003aac:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40023800 	andmi	r3, r2, r0, lsl #16

08003ab8 <RCC_LTDCCLKDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 8003ab8:	4b04      	ldr	r3, [pc, #16]	; (8003acc <RCC_LTDCCLKDivConfig+0x14>)
 8003aba:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 8003abe:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 8003ac2:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8003ac4:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40023800 	andmi	r3, r2, r0, lsl #16

08003ad0 <RCC_TIMCLKPresConfig>:
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 8003ad0:	4b01      	ldr	r3, [pc, #4]	; (8003ad8 <RCC_TIMCLKPresConfig+0x8>)
 8003ad2:	6018      	str	r0, [r3, #0]
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	424711e0 	submi	r1, r7, #224, 2	; 0x38

08003adc <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8003adc:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <RCC_AHB1PeriphClockCmd+0x14>)
 8003ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003ae0:	b919      	cbnz	r1, 8003aea <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8003ae2:	ea22 0000 	bic.w	r0, r2, r0
 8003ae6:	6318      	str	r0, [r3, #48]	; 0x30
 8003ae8:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8003aea:	4310      	orrs	r0, r2
 8003aec:	6318      	str	r0, [r3, #48]	; 0x30
 8003aee:	4770      	bx	lr
 8003af0:	40023800 	andmi	r3, r2, r0, lsl #16

08003af4 <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8003af4:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <RCC_AHB2PeriphClockCmd+0x14>)
 8003af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003af8:	b919      	cbnz	r1, 8003b02 <RCC_AHB2PeriphClockCmd+0xe>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8003afa:	ea22 0000 	bic.w	r0, r2, r0
 8003afe:	6358      	str	r0, [r3, #52]	; 0x34
 8003b00:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8003b02:	4310      	orrs	r0, r2
 8003b04:	6358      	str	r0, [r3, #52]	; 0x34
 8003b06:	4770      	bx	lr
 8003b08:	40023800 	andmi	r3, r2, r0, lsl #16

08003b0c <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8003b0c:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <RCC_AHB3PeriphClockCmd+0x14>)
 8003b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003b10:	b919      	cbnz	r1, 8003b1a <RCC_AHB3PeriphClockCmd+0xe>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8003b12:	ea22 0000 	bic.w	r0, r2, r0
 8003b16:	6398      	str	r0, [r3, #56]	; 0x38
 8003b18:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8003b1a:	4310      	orrs	r0, r2
 8003b1c:	6398      	str	r0, [r3, #56]	; 0x38
 8003b1e:	4770      	bx	lr
 8003b20:	40023800 	andmi	r3, r2, r0, lsl #16

08003b24 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8003b24:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <RCC_APB1PeriphClockCmd+0x14>)
 8003b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003b28:	b919      	cbnz	r1, 8003b32 <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8003b2a:	ea22 0000 	bic.w	r0, r2, r0
 8003b2e:	6418      	str	r0, [r3, #64]	; 0x40
 8003b30:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8003b32:	4310      	orrs	r0, r2
 8003b34:	6418      	str	r0, [r3, #64]	; 0x40
 8003b36:	4770      	bx	lr
 8003b38:	40023800 	andmi	r3, r2, r0, lsl #16

08003b3c <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003b3c:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <RCC_APB2PeriphClockCmd+0x14>)
 8003b3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003b40:	b919      	cbnz	r1, 8003b4a <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8003b42:	ea22 0000 	bic.w	r0, r2, r0
 8003b46:	6458      	str	r0, [r3, #68]	; 0x44
 8003b48:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003b4a:	4310      	orrs	r0, r2
 8003b4c:	6458      	str	r0, [r3, #68]	; 0x44
 8003b4e:	4770      	bx	lr
 8003b50:	40023800 	andmi	r3, r2, r0, lsl #16

08003b54 <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8003b54:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <RCC_AHB1PeriphResetCmd+0x14>)
 8003b56:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003b58:	b919      	cbnz	r1, 8003b62 <RCC_AHB1PeriphResetCmd+0xe>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8003b5a:	ea22 0000 	bic.w	r0, r2, r0
 8003b5e:	6118      	str	r0, [r3, #16]
 8003b60:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8003b62:	4310      	orrs	r0, r2
 8003b64:	6118      	str	r0, [r3, #16]
 8003b66:	4770      	bx	lr
 8003b68:	40023800 	andmi	r3, r2, r0, lsl #16

08003b6c <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8003b6c:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <RCC_AHB2PeriphResetCmd+0x14>)
 8003b6e:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003b70:	b919      	cbnz	r1, 8003b7a <RCC_AHB2PeriphResetCmd+0xe>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8003b72:	ea22 0000 	bic.w	r0, r2, r0
 8003b76:	6158      	str	r0, [r3, #20]
 8003b78:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8003b7a:	4310      	orrs	r0, r2
 8003b7c:	6158      	str	r0, [r3, #20]
 8003b7e:	4770      	bx	lr
 8003b80:	40023800 	andmi	r3, r2, r0, lsl #16

08003b84 <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8003b84:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <RCC_AHB3PeriphResetCmd+0x14>)
 8003b86:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003b88:	b919      	cbnz	r1, 8003b92 <RCC_AHB3PeriphResetCmd+0xe>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8003b8a:	ea22 0000 	bic.w	r0, r2, r0
 8003b8e:	6198      	str	r0, [r3, #24]
 8003b90:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8003b92:	4310      	orrs	r0, r2
 8003b94:	6198      	str	r0, [r3, #24]
 8003b96:	4770      	bx	lr
 8003b98:	40023800 	andmi	r3, r2, r0, lsl #16

08003b9c <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8003b9c:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <RCC_APB1PeriphResetCmd+0x14>)
 8003b9e:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003ba0:	b919      	cbnz	r1, 8003baa <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8003ba2:	ea22 0000 	bic.w	r0, r2, r0
 8003ba6:	6218      	str	r0, [r3, #32]
 8003ba8:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8003baa:	4310      	orrs	r0, r2
 8003bac:	6218      	str	r0, [r3, #32]
 8003bae:	4770      	bx	lr
 8003bb0:	40023800 	andmi	r3, r2, r0, lsl #16

08003bb4 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <RCC_APB2PeriphResetCmd+0x14>)
 8003bb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003bb8:	b919      	cbnz	r1, 8003bc2 <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8003bba:	ea22 0000 	bic.w	r0, r2, r0
 8003bbe:	6258      	str	r0, [r3, #36]	; 0x24
 8003bc0:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8003bc2:	4310      	orrs	r0, r2
 8003bc4:	6258      	str	r0, [r3, #36]	; 0x24
 8003bc6:	4770      	bx	lr
 8003bc8:	40023800 	andmi	r3, r2, r0, lsl #16

08003bcc <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
 8003bce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003bd0:	b919      	cbnz	r1, 8003bda <RCC_AHB1PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8003bd2:	ea22 0000 	bic.w	r0, r2, r0
 8003bd6:	6518      	str	r0, [r3, #80]	; 0x50
 8003bd8:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8003bda:	4310      	orrs	r0, r2
 8003bdc:	6518      	str	r0, [r3, #80]	; 0x50
 8003bde:	4770      	bx	lr
 8003be0:	40023800 	andmi	r3, r2, r0, lsl #16

08003be4 <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8003be4:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
 8003be6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003be8:	b919      	cbnz	r1, 8003bf2 <RCC_AHB2PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8003bea:	ea22 0000 	bic.w	r0, r2, r0
 8003bee:	6558      	str	r0, [r3, #84]	; 0x54
 8003bf0:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8003bf2:	4310      	orrs	r0, r2
 8003bf4:	6558      	str	r0, [r3, #84]	; 0x54
 8003bf6:	4770      	bx	lr
 8003bf8:	40023800 	andmi	r3, r2, r0, lsl #16

08003bfc <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8003bfc:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
 8003bfe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003c00:	b919      	cbnz	r1, 8003c0a <RCC_AHB3PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8003c02:	ea22 0000 	bic.w	r0, r2, r0
 8003c06:	6598      	str	r0, [r3, #88]	; 0x58
 8003c08:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8003c0a:	4310      	orrs	r0, r2
 8003c0c:	6598      	str	r0, [r3, #88]	; 0x58
 8003c0e:	4770      	bx	lr
 8003c10:	40023800 	andmi	r3, r2, r0, lsl #16

08003c14 <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8003c14:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <RCC_APB1PeriphClockLPModeCmd+0x14>)
 8003c16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003c18:	b919      	cbnz	r1, 8003c22 <RCC_APB1PeriphClockLPModeCmd+0xe>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8003c1a:	ea22 0000 	bic.w	r0, r2, r0
 8003c1e:	6618      	str	r0, [r3, #96]	; 0x60
 8003c20:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8003c22:	4310      	orrs	r0, r2
 8003c24:	6618      	str	r0, [r3, #96]	; 0x60
 8003c26:	4770      	bx	lr
 8003c28:	40023800 	andmi	r3, r2, r0, lsl #16

08003c2c <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8003c2c:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <RCC_APB2PeriphClockLPModeCmd+0x14>)
 8003c2e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003c30:	b919      	cbnz	r1, 8003c3a <RCC_APB2PeriphClockLPModeCmd+0xe>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8003c32:	ea22 0000 	bic.w	r0, r2, r0
 8003c36:	6658      	str	r0, [r3, #100]	; 0x64
 8003c38:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8003c3a:	4310      	orrs	r0, r2
 8003c3c:	6658      	str	r0, [r3, #100]	; 0x64
 8003c3e:	4770      	bx	lr
 8003c40:	40023800 	andmi	r3, r2, r0, lsl #16

08003c44 <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8003c44:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <RCC_ITConfig+0x14>)
 8003c46:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003c48:	b919      	cbnz	r1, 8003c52 <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8003c4a:	ea22 0000 	bic.w	r0, r2, r0
 8003c4e:	7018      	strb	r0, [r3, #0]
 8003c50:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8003c52:	4310      	orrs	r0, r2
 8003c54:	7018      	strb	r0, [r3, #0]
 8003c56:	4770      	bx	lr
 8003c58:	4002380d 	andmi	r3, r2, sp, lsl #16

08003c5c <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8003c5c:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d00b      	beq.n	8003c7a <RCC_GetFlagStatus+0x1e>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8003c62:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <RCC_GetFlagStatus+0x30>)
 8003c66:	bf0c      	ite	eq
 8003c68:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8003c6a:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8003c6c:	f000 001f 	and.w	r0, r0, #31
 8003c70:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8003c74:	f000 0001 	and.w	r0, r0, #1
 8003c78:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8003c7a:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <RCC_GetFlagStatus+0x30>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8003c7e:	f000 001f 	and.w	r0, r0, #31
 8003c82:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8003c86:	f000 0001 	and.w	r0, r0, #1
 8003c8a:	4770      	bx	lr
 8003c8c:	40023800 	andmi	r3, r2, r0, lsl #16

08003c90 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8003c90:	4b02      	ldr	r3, [pc, #8]	; (8003c9c <RCC_ClearFlag+0xc>)
 8003c92:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003c94:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003c98:	675a      	str	r2, [r3, #116]	; 0x74
 8003c9a:	4770      	bx	lr
 8003c9c:	40023800 	andmi	r3, r2, r0, lsl #16

08003ca0 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8003ca0:	4b03      	ldr	r3, [pc, #12]	; (8003cb0 <RCC_GetITStatus+0x10>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2000      	moveq	r0, #0
 8003caa:	2001      	movne	r0, #1
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40023800 	andmi	r3, r2, r0, lsl #16

08003cb4 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8003cb4:	4b01      	ldr	r3, [pc, #4]	; (8003cbc <RCC_ClearITPendingBit+0x8>)
 8003cb6:	7018      	strb	r0, [r3, #0]
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	4002380e 	andmi	r3, r2, lr, lsl #16

08003cc0 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8003cc0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8003cc2:	4b3a      	ldr	r3, [pc, #232]	; (8003dac <USART_DeInit+0xec>)
 8003cc4:	4298      	cmp	r0, r3
 8003cc6:	d021      	beq.n	8003d0c <USART_DeInit+0x4c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 8003cc8:	4b39      	ldr	r3, [pc, #228]	; (8003db0 <USART_DeInit+0xf0>)
 8003cca:	4298      	cmp	r0, r3
 8003ccc:	d028      	beq.n	8003d20 <USART_DeInit+0x60>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 8003cce:	4b39      	ldr	r3, [pc, #228]	; (8003db4 <USART_DeInit+0xf4>)
 8003cd0:	4298      	cmp	r0, r3
 8003cd2:	d031      	beq.n	8003d38 <USART_DeInit+0x78>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 8003cd4:	4b38      	ldr	r3, [pc, #224]	; (8003db8 <USART_DeInit+0xf8>)
 8003cd6:	4298      	cmp	r0, r3
 8003cd8:	d03a      	beq.n	8003d50 <USART_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 8003cda:	4b38      	ldr	r3, [pc, #224]	; (8003dbc <USART_DeInit+0xfc>)
 8003cdc:	4298      	cmp	r0, r3
 8003cde:	d043      	beq.n	8003d68 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }  
  else if (USARTx == USART6)
 8003ce0:	4b37      	ldr	r3, [pc, #220]	; (8003dc0 <USART_DeInit+0x100>)
 8003ce2:	4298      	cmp	r0, r3
 8003ce4:	d04c      	beq.n	8003d80 <USART_DeInit+0xc0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
  }
  else if (USARTx == UART7)
 8003ce6:	4b37      	ldr	r3, [pc, #220]	; (8003dc4 <USART_DeInit+0x104>)
 8003ce8:	4298      	cmp	r0, r3
 8003cea:	d053      	beq.n	8003d94 <USART_DeInit+0xd4>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
  }     
  else
  {
    if (USARTx == UART8)
 8003cec:	4b36      	ldr	r3, [pc, #216]	; (8003dc8 <USART_DeInit+0x108>)
 8003cee:	4298      	cmp	r0, r3
 8003cf0:	d000      	beq.n	8003cf4 <USART_DeInit+0x34>
 8003cf2:	bd08      	pop	{r3, pc}
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 8003cf4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	f7ff ff4f 	bl	8003b9c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8003cfe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003d02:	2100      	movs	r1, #0
    }
  }
}
 8003d04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == UART8)
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8003d08:	f7ff bf48 	b.w	8003b9c <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8003d0c:	2010      	movs	r0, #16
 8003d0e:	2101      	movs	r1, #1
 8003d10:	f7ff ff50 	bl	8003bb4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8003d14:	2010      	movs	r0, #16
 8003d16:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8003d18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8003d1c:	f7ff bf4a 	b.w	8003bb4 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8003d20:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003d24:	2101      	movs	r1, #1
 8003d26:	f7ff ff39 	bl	8003b9c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8003d2a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003d2e:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8003d30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8003d34:	f7ff bf32 	b.w	8003b9c <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8003d38:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	f7ff ff2d 	bl	8003b9c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8003d42:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003d46:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8003d48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8003d4c:	f7ff bf26 	b.w	8003b9c <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8003d50:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003d54:	2101      	movs	r1, #1
 8003d56:	f7ff ff21 	bl	8003b9c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8003d5a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003d5e:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8003d60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8003d64:	f7ff bf1a 	b.w	8003b9c <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8003d68:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	f7ff ff15 	bl	8003b9c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8003d72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003d76:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8003d78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8003d7c:	f7ff bf0e 	b.w	8003b9c <RCC_APB1PeriphResetCmd>
  }  
  else if (USARTx == USART6)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8003d80:	2020      	movs	r0, #32
 8003d82:	2101      	movs	r1, #1
 8003d84:	f7ff ff16 	bl	8003bb4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8003d88:	2020      	movs	r0, #32
 8003d8a:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8003d8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }  
  else if (USARTx == USART6)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8003d90:	f7ff bf10 	b.w	8003bb4 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == UART7)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 8003d94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003d98:	2101      	movs	r1, #1
 8003d9a:	f7ff feff 	bl	8003b9c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8003d9e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003da2:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8003da4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
  }
  else if (USARTx == UART7)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8003da8:	f7ff bef8 	b.w	8003b9c <RCC_APB1PeriphResetCmd>
 8003dac:	40011000 	andmi	r1, r1, r0
 8003db0:	40004400 	andmi	r4, r0, r0, lsl #8
 8003db4:	40004800 	andmi	r4, r0, r0, lsl #16
 8003db8:	40004c00 	andmi	r4, r0, r0, lsl #24
 8003dbc:	40005000 	andmi	r5, r0, r0
 8003dc0:	40011400 	andmi	r1, r1, r0, lsl #8
 8003dc4:	40007800 	andmi	r7, r0, r0, lsl #16
 8003dc8:	40007c00 	andmi	r7, r0, r0, lsl #24

08003dcc <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8003dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dce:	460d      	mov	r5, r1
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8003dd0:	8a01      	ldrh	r1, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8003dd2:	88ef      	ldrh	r7, [r5, #6]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8003dd4:	892e      	ldrh	r6, [r5, #8]
 8003dd6:	88ab      	ldrh	r3, [r5, #4]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8003dd8:	89aa      	ldrh	r2, [r5, #12]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8003dda:	b289      	uxth	r1, r1
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8003ddc:	4604      	mov	r4, r0

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003dde:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8003de2:	4339      	orrs	r1, r7

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8003de4:	8968      	ldrh	r0, [r5, #10]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8003de6:	8221      	strh	r1, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8003de8:	89a1      	ldrh	r1, [r4, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8003dea:	4333      	orrs	r3, r6
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8003dec:	b289      	uxth	r1, r1

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8003dee:	4303      	orrs	r3, r0

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8003df0:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8003df4:	f021 010c 	bic.w	r1, r1, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8003df8:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8003dfe:	8aa3      	ldrh	r3, [r4, #20]
 8003e00:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8003e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8003e06:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8003e08:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8003e0a:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8003e0c:	4668      	mov	r0, sp
 8003e0e:	f7ff fdaf 	bl	8003970 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8003e12:	4b1d      	ldr	r3, [pc, #116]	; (8003e88 <USART_Init+0xbc>)
 8003e14:	429c      	cmp	r4, r3
 8003e16:	d029      	beq.n	8003e6c <USART_Init+0xa0>
 8003e18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e1c:	429c      	cmp	r4, r3
 8003e1e:	d025      	beq.n	8003e6c <USART_Init+0xa0>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8003e20:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003e22:	89a2      	ldrh	r2, [r4, #12]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8003e24:	6829      	ldr	r1, [r5, #0]

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003e26:	89a0      	ldrh	r0, [r4, #12]
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003e28:	b212      	sxth	r2, r2
 8003e2a:	2a00      	cmp	r2, #0
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8003e2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e30:	bfb4      	ite	lt
 8003e32:	0049      	lsllt	r1, r1, #1
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8003e34:	0089      	lslge	r1, r1, #2
 8003e36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e3a:	fbb3 f2f1 	udiv	r2, r3, r1
  }
  tmpreg = (integerdivider / 100) << 4;
 8003e3e:	4913      	ldr	r1, [pc, #76]	; (8003e8c <USART_Init+0xc0>)

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003e40:	b200      	sxth	r0, r0
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8003e42:	fba1 5302 	umull	r5, r3, r1, r2
 8003e46:	095b      	lsrs	r3, r3, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8003e48:	2564      	movs	r5, #100	; 0x64

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003e4a:	2800      	cmp	r0, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8003e4c:	fb03 2215 	mls	r2, r3, r5, r2
 8003e50:	ea4f 1303 	mov.w	r3, r3, lsl #4

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003e54:	db0c      	blt.n	8003e70 <USART_Init+0xa4>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8003e56:	0112      	lsls	r2, r2, #4
 8003e58:	3232      	adds	r2, #50	; 0x32
 8003e5a:	fba1 5102 	umull	r5, r1, r1, r2
 8003e5e:	f3c1 1143 	ubfx	r1, r1, #5, #4
 8003e62:	430b      	orrs	r3, r1
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	8123      	strh	r3, [r4, #8]
}
 8003e68:	b005      	add	sp, #20
 8003e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8003e6c:	9b03      	ldr	r3, [sp, #12]
 8003e6e:	e7d8      	b.n	8003e22 <USART_Init+0x56>
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8003e70:	00d2      	lsls	r2, r2, #3
 8003e72:	3232      	adds	r2, #50	; 0x32
 8003e74:	fba1 0102 	umull	r0, r1, r1, r2
 8003e78:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8003e7c:	430b      	orrs	r3, r1
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	8123      	strh	r3, [r4, #8]
}
 8003e82:	b005      	add	sp, #20
 8003e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40011000 	andmi	r1, r1, r0
 8003e8c:	51eb851f 	mvnpl	r8, pc, lsl r5

08003e90 <USART_StructInit>:
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8003e90:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8003e92:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003e96:	220c      	movs	r2, #12
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8003e98:	6001      	str	r1, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003e9a:	8142      	strh	r2, [r0, #10]
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8003e9c:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8003e9e:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8003ea0:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8003ea2:	8183      	strh	r3, [r0, #12]
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop

08003ea8 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8003ea8:	b430      	push	{r4, r5}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8003eaa:	880a      	ldrh	r2, [r1, #0]
 8003eac:	884d      	ldrh	r5, [r1, #2]
 8003eae:	888c      	ldrh	r4, [r1, #4]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8003eb0:	8a03      	ldrh	r3, [r0, #16]
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8003eb2:	88c9      	ldrh	r1, [r1, #6]
 8003eb4:	432a      	orrs	r2, r5
 8003eb6:	4322      	orrs	r2, r4
 8003eb8:	430a      	orrs	r2, r1
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8003eba:	b29b      	uxth	r3, r3
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8003ebc:	b292      	uxth	r2, r2
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8003ebe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	8203      	strh	r3, [r0, #16]
}
 8003ec6:	bc30      	pop	{r4, r5}
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop

08003ecc <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8003ed0:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8003ed2:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8003ed4:	80c3      	strh	r3, [r0, #6]
 8003ed6:	4770      	bx	lr

08003ed8 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8003ed8:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003eda:	b929      	cbnz	r1, 8003ee8 <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8003edc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ee0:	041b      	lsls	r3, r3, #16
 8003ee2:	0c1b      	lsrs	r3, r3, #16
 8003ee4:	8183      	strh	r3, [r0, #12]
 8003ee6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003eee:	8183      	strh	r3, [r0, #12]
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop

08003ef4 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8003ef4:	8b03      	ldrh	r3, [r0, #24]
 8003ef6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003efa:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8003efc:	8b03      	ldrh	r3, [r0, #24]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	4319      	orrs	r1, r3
 8003f02:	8301      	strh	r1, [r0, #24]
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop

08003f08 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8003f08:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003f0a:	b919      	cbnz	r1, 8003f14 <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8003f0c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003f10:	8183      	strh	r3, [r0, #12]
 8003f12:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8003f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	8183      	strh	r3, [r0, #12]
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop

08003f24 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8003f24:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003f26:	b929      	cbnz	r1, 8003f34 <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8003f28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f2c:	041b      	lsls	r3, r3, #16
 8003f2e:	0c1b      	lsrs	r3, r3, #16
 8003f30:	8283      	strh	r3, [r0, #20]
 8003f32:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f3a:	8283      	strh	r3, [r0, #20]
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop

08003f40 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8003f40:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003f44:	8081      	strh	r1, [r0, #4]
 8003f46:	4770      	bx	lr

08003f48 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8003f48:	8880      	ldrh	r0, [r0, #4]
}
 8003f4a:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8003f4e:	4770      	bx	lr

08003f50 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8003f50:	8a03      	ldrh	r3, [r0, #16]
 8003f52:	f023 030f 	bic.w	r3, r3, #15
 8003f56:	041b      	lsls	r3, r3, #16
 8003f58:	0c1b      	lsrs	r3, r3, #16
 8003f5a:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8003f5c:	8a03      	ldrh	r3, [r0, #16]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	4319      	orrs	r1, r3
 8003f62:	8201      	strh	r1, [r0, #16]
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop

08003f68 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8003f68:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8003f6a:	b929      	cbnz	r1, 8003f78 <USART_ReceiverWakeUpCmd+0x10>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8003f6c:	f023 0302 	bic.w	r3, r3, #2
 8003f70:	041b      	lsls	r3, r3, #16
 8003f72:	0c1b      	lsrs	r3, r3, #16
 8003f74:	8183      	strh	r3, [r0, #12]
 8003f76:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f043 0302 	orr.w	r3, r3, #2
 8003f7e:	8183      	strh	r3, [r0, #12]
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop

08003f84 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8003f84:	8983      	ldrh	r3, [r0, #12]
 8003f86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f8a:	041b      	lsls	r3, r3, #16
 8003f8c:	0c1b      	lsrs	r3, r3, #16
 8003f8e:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8003f90:	8983      	ldrh	r3, [r0, #12]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	4319      	orrs	r1, r3
 8003f96:	8181      	strh	r1, [r0, #12]
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop

08003f9c <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8003f9c:	8a03      	ldrh	r3, [r0, #16]
 8003f9e:	f023 0320 	bic.w	r3, r3, #32
 8003fa2:	041b      	lsls	r3, r3, #16
 8003fa4:	0c1b      	lsrs	r3, r3, #16
 8003fa6:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8003fa8:	8a03      	ldrh	r3, [r0, #16]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	4319      	orrs	r1, r3
 8003fae:	8201      	strh	r1, [r0, #16]
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop

08003fb4 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8003fb4:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003fb6:	b929      	cbnz	r1, 8003fc4 <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8003fb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fbc:	041b      	lsls	r3, r3, #16
 8003fbe:	0c1b      	lsrs	r3, r3, #16
 8003fc0:	8203      	strh	r3, [r0, #16]
 8003fc2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fca:	8203      	strh	r3, [r0, #16]
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop

08003fd0 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8003fd0:	8983      	ldrh	r3, [r0, #12]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	8183      	strh	r3, [r0, #12]
 8003fda:	4770      	bx	lr

08003fdc <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8003fdc:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003fde:	b929      	cbnz	r1, 8003fec <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8003fe0:	f023 0308 	bic.w	r3, r3, #8
 8003fe4:	041b      	lsls	r3, r3, #16
 8003fe6:	0c1b      	lsrs	r3, r3, #16
 8003fe8:	8283      	strh	r3, [r0, #20]
 8003fea:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	f043 0308 	orr.w	r3, r3, #8
 8003ff2:	8283      	strh	r3, [r0, #20]
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop

08003ff8 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8003ff8:	8b03      	ldrh	r3, [r0, #24]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8003ffe:	8b03      	ldrh	r3, [r0, #24]
 8004000:	b29b      	uxth	r3, r3
 8004002:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004006:	8301      	strh	r1, [r0, #24]
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop

0800400c <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800400c:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800400e:	b929      	cbnz	r1, 800401c <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8004010:	f023 0320 	bic.w	r3, r3, #32
 8004014:	041b      	lsls	r3, r3, #16
 8004016:	0c1b      	lsrs	r3, r3, #16
 8004018:	8283      	strh	r3, [r0, #20]
 800401a:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800401c:	b29b      	uxth	r3, r3
 800401e:	f043 0320 	orr.w	r3, r3, #32
 8004022:	8283      	strh	r3, [r0, #20]
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop

08004028 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8004028:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800402a:	b929      	cbnz	r1, 8004038 <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 800402c:	f023 0310 	bic.w	r3, r3, #16
 8004030:	041b      	lsls	r3, r3, #16
 8004032:	0c1b      	lsrs	r3, r3, #16
 8004034:	8283      	strh	r3, [r0, #20]
 8004036:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8004038:	b29b      	uxth	r3, r3
 800403a:	f043 0310 	orr.w	r3, r3, #16
 800403e:	8283      	strh	r3, [r0, #20]
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop

08004044 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8004044:	8a83      	ldrh	r3, [r0, #20]
 8004046:	f023 0304 	bic.w	r3, r3, #4
 800404a:	041b      	lsls	r3, r3, #16
 800404c:	0c1b      	lsrs	r3, r3, #16
 800404e:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8004050:	8a83      	ldrh	r3, [r0, #20]
 8004052:	b29b      	uxth	r3, r3
 8004054:	4319      	orrs	r1, r3
 8004056:	8281      	strh	r1, [r0, #20]
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop

0800405c <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800405c:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800405e:	b929      	cbnz	r1, 800406c <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8004060:	f023 0302 	bic.w	r3, r3, #2
 8004064:	041b      	lsls	r3, r3, #16
 8004066:	0c1b      	lsrs	r3, r3, #16
 8004068:	8283      	strh	r3, [r0, #20]
 800406a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800406c:	b29b      	uxth	r3, r3
 800406e:	f043 0302 	orr.w	r3, r3, #2
 8004072:	8283      	strh	r3, [r0, #20]
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop

08004078 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8004078:	8a83      	ldrh	r3, [r0, #20]
 800407a:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800407c:	b91a      	cbnz	r2, 8004086 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800407e:	ea23 0101 	bic.w	r1, r3, r1
 8004082:	8281      	strh	r1, [r0, #20]
 8004084:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8004086:	4319      	orrs	r1, r3
 8004088:	8281      	strh	r1, [r0, #20]
 800408a:	4770      	bx	lr

0800408c <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 800408c:	f001 031f 	and.w	r3, r1, #31
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8004090:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8004092:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8004096:	2401      	movs	r4, #1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8004098:	42a1      	cmp	r1, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 800409a:	fa04 f303 	lsl.w	r3, r4, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800409e:	d010      	beq.n	80040c2 <USART_ITConfig+0x36>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80040a0:	2902      	cmp	r1, #2
  {
    usartxbase += 0x10;
 80040a2:	bf0c      	ite	eq
 80040a4:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80040a6:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80040a8:	6804      	ldr	r4, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 80040aa:	b92a      	cbnz	r2, 80040b8 <USART_ITConfig+0x2c>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80040ac:	ea24 0303 	bic.w	r3, r4, r3
 80040b0:	6003      	str	r3, [r0, #0]
  }
}
 80040b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040b6:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80040b8:	4323      	orrs	r3, r4
 80040ba:	6003      	str	r3, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80040bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040c0:	4770      	bx	lr
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 80040c2:	300c      	adds	r0, #12
 80040c4:	e7f0      	b.n	80040a8 <USART_ITConfig+0x1c>
 80040c6:	bf00      	nop

080040c8 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80040c8:	8803      	ldrh	r3, [r0, #0]
 80040ca:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80040cc:	bf0c      	ite	eq
 80040ce:	2000      	moveq	r0, #0
 80040d0:	2001      	movne	r0, #1
 80040d2:	4770      	bx	lr

080040d4 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 80040d4:	43c9      	mvns	r1, r1
 80040d6:	b289      	uxth	r1, r1
 80040d8:	8001      	strh	r1, [r0, #0]
 80040da:	4770      	bx	lr

080040dc <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80040dc:	b410      	push	{r4}
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80040de:	f3c1 1342 	ubfx	r3, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 80040e2:	2401      	movs	r4, #1
 80040e4:	f001 021f 	and.w	r2, r1, #31
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80040e8:	42a3      	cmp	r3, r4
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 80040ea:	fa04 f202 	lsl.w	r2, r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80040ee:	d017      	beq.n	8004120 <USART_GetITStatus+0x44>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80040f0:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 80040f2:	bf0c      	ite	eq
 80040f4:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80040f6:	8a83      	ldrhne	r3, [r0, #20]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 80040fc:	8802      	ldrh	r2, [r0, #0]
 80040fe:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8004100:	b153      	cbz	r3, 8004118 <USART_GetITStatus+0x3c>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8004102:	0a09      	lsrs	r1, r1, #8
 8004104:	2301      	movs	r3, #1
 8004106:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800410a:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 800410c:	bf0c      	ite	eq
 800410e:	2000      	moveq	r0, #0
 8004110:	2001      	movne	r0, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 8004112:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004116:	4770      	bx	lr
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8004118:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 800411a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800411e:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 8004120:	8983      	ldrh	r3, [r0, #12]
 8004122:	b29b      	uxth	r3, r3
 8004124:	4013      	ands	r3, r2
 8004126:	e7e9      	b.n	80040fc <USART_GetITStatus+0x20>

08004128 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8004128:	0a09      	lsrs	r1, r1, #8
 800412a:	2301      	movs	r3, #1
 800412c:	fa03 f101 	lsl.w	r1, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8004130:	43c9      	mvns	r1, r1
 8004132:	b289      	uxth	r1, r1
 8004134:	8001      	strh	r1, [r0, #0]
 8004136:	4770      	bx	lr

08004138 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 8004138:	b508      	push	{r3, lr}
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800413a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800413e:	2101      	movs	r1, #1
 8004140:	f7ff fd38 	bl	8003bb4 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8004144:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004148:	2100      	movs	r1, #0
}
 800414a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SYSCFG_DeInit(void)
{
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 800414e:	f7ff bd31 	b.w	8003bb4 <RCC_APB2PeriphResetCmd>
 8004152:	bf00      	nop

08004154 <SYSCFG_MemoryRemapConfig>:
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 8004154:	4b01      	ldr	r3, [pc, #4]	; (800415c <SYSCFG_MemoryRemapConfig+0x8>)
 8004156:	6018      	str	r0, [r3, #0]
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40013800 	andmi	r3, r1, r0, lsl #16

08004160 <SYSCFG_MemorySwappingBank>:
void SYSCFG_MemorySwappingBank(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) UFB_MODE_BB = (uint32_t)NewState;
 8004160:	4b01      	ldr	r3, [pc, #4]	; (8004168 <SYSCFG_MemorySwappingBank+0x8>)
 8004162:	6018      	str	r0, [r3, #0]
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	42270020 	eormi	r0, r7, #32

0800416c <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800416c:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8004170:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004174:	f503 339c 	add.w	r3, r3, #79872	; 0x13800

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8004178:	f001 0103 	and.w	r1, r1, #3
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800417c:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800417e:	0089      	lsls	r1, r1, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8004180:	689c      	ldr	r4, [r3, #8]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8004182:	220f      	movs	r2, #15
 8004184:	408a      	lsls	r2, r1
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8004186:	ea24 0202 	bic.w	r2, r4, r2
 800418a:	609a      	str	r2, [r3, #8]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800418c:	689a      	ldr	r2, [r3, #8]
}
 800418e:	f85d 4b04 	ldr.w	r4, [sp], #4
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8004192:	4088      	lsls	r0, r1
 8004194:	4302      	orrs	r2, r0
 8004196:	609a      	str	r2, [r3, #8]
}
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop

0800419c <SYSCFG_ETH_MediaInterfaceConfig>:
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 800419c:	4b01      	ldr	r3, [pc, #4]	; (80041a4 <SYSCFG_ETH_MediaInterfaceConfig+0x8>)
 800419e:	6018      	str	r0, [r3, #0]
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	422700dc 	eormi	r0, r7, #220	; 0xdc

080041a8 <SYSCFG_CompensationCellCmd>:
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 80041a8:	4b01      	ldr	r3, [pc, #4]	; (80041b0 <SYSCFG_CompensationCellCmd+0x8>)
 80041aa:	6018      	str	r0, [r3, #0]
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	42270400 	eormi	r0, r7, #0, 8

080041b4 <SYSCFG_GetCompensationCellStatus>:
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 80041b4:	4b02      	ldr	r3, [pc, #8]	; (80041c0 <SYSCFG_GetCompensationCellStatus+0xc>)
 80041b6:	6a18      	ldr	r0, [r3, #32]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80041b8:	f3c0 2000 	ubfx	r0, r0, #8, #1
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40013800 	andmi	r3, r1, r0, lsl #16

080041c4 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80041c4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80041c6:	4b17      	ldr	r3, [pc, #92]	; (8004224 <I2C_DeInit+0x60>)
 80041c8:	4298      	cmp	r0, r3
 80041ca:	d012      	beq.n	80041f2 <I2C_DeInit+0x2e>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 80041cc:	4b16      	ldr	r3, [pc, #88]	; (8004228 <I2C_DeInit+0x64>)
 80041ce:	4298      	cmp	r0, r3
 80041d0:	d01b      	beq.n	800420a <I2C_DeInit+0x46>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 80041d2:	4b16      	ldr	r3, [pc, #88]	; (800422c <I2C_DeInit+0x68>)
 80041d4:	4298      	cmp	r0, r3
 80041d6:	d000      	beq.n	80041da <I2C_DeInit+0x16>
 80041d8:	bd08      	pop	{r3, pc}
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 80041da:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80041de:	2101      	movs	r1, #1
 80041e0:	f7ff fcdc 	bl	8003b9c <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80041e4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80041e8:	2100      	movs	r1, #0
    }
  }
}
 80041ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80041ee:	f7ff bcd5 	b.w	8003b9c <RCC_APB1PeriphResetCmd>
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80041f2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80041f6:	2101      	movs	r1, #1
 80041f8:	f7ff fcd0 	bl	8003b9c <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80041fc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004200:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8004202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8004206:	f7ff bcc9 	b.w	8003b9c <RCC_APB1PeriphResetCmd>
  }
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800420a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800420e:	2101      	movs	r1, #1
 8004210:	f7ff fcc4 	bl	8003b9c <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8004214:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004218:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 800421a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800421e:	f7ff bcbd 	b.w	8003b9c <RCC_APB1PeriphResetCmd>
 8004222:	bf00      	nop
 8004224:	40005400 	andmi	r5, r0, r0, lsl #8
 8004228:	40005800 	andmi	r5, r0, r0, lsl #16
 800422c:	40005c00 	andmi	r5, r0, r0, lsl #24

08004230 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8004230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004232:	4604      	mov	r4, r0
 8004234:	b085      	sub	sp, #20
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8004236:	4668      	mov	r0, sp
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8004238:	460d      	mov	r5, r1
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800423a:	88a6      	ldrh	r6, [r4, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800423c:	f7ff fb98 	bl	8003970 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8004240:	9902      	ldr	r1, [sp, #8]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8004242:	4830      	ldr	r0, [pc, #192]	; (8004304 <I2C_Init+0xd4>)
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8004244:	682a      	ldr	r2, [r5, #0]
 8004246:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 800430c <I2C_Init+0xdc>
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800424a:	fba0 3001 	umull	r3, r0, r0, r1

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800424e:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8004252:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8004254:	0c80      	lsrs	r0, r0, #18

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8004256:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8004258:	b287      	uxth	r7, r0
  tmpreg |= freqrange;
 800425a:	433e      	orrs	r6, r7
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800425c:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800425e:	8823      	ldrh	r3, [r4, #0]
 8004260:	f023 0301 	bic.w	r3, r3, #1
 8004264:	041b      	lsls	r3, r3, #16
 8004266:	0c1b      	lsrs	r3, r3, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8004268:	4562      	cmp	r2, ip
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800426a:	8023      	strh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800426c:	d823      	bhi.n	80042b6 <I2C_Init+0x86>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800426e:	0053      	lsls	r3, r2, #1
 8004270:	fbb1 f3f3 	udiv	r3, r1, r3
 8004274:	b29b      	uxth	r3, r3
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8004276:	2b03      	cmp	r3, #3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8004278:	f107 0701 	add.w	r7, r7, #1
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800427c:	bf98      	it	ls
 800427e:	2304      	movls	r3, #4
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8004280:	8427      	strh	r7, [r4, #32]
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8004282:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8004284:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8004286:	896e      	ldrh	r6, [r5, #10]
 8004288:	88a8      	ldrh	r0, [r5, #4]
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800428a:	8929      	ldrh	r1, [r5, #8]
 800428c:	89aa      	ldrh	r2, [r5, #12]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800428e:	b29b      	uxth	r3, r3
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8004296:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8004298:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800429c:	f023 0302 	bic.w	r3, r3, #2
 80042a0:	041b      	lsls	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80042a2:	4330      	orrs	r0, r6

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80042a4:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80042a6:	4303      	orrs	r3, r0
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80042a8:	430a      	orrs	r2, r1
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80042aa:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80042ac:	b292      	uxth	r2, r2
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80042ae:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80042b0:	8122      	strh	r2, [r4, #8]
}
 80042b2:	b005      	add	sp, #20
 80042b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80042b6:	88ee      	ldrh	r6, [r5, #6]
 80042b8:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80042bc:	429e      	cmp	r6, r3
 80042be:	d01a      	beq.n	80042f6 <I2C_Init+0xc6>
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80042c0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80042c4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80042c8:	fbb1 f3f2 	udiv	r3, r1, r2
 80042cc:	b29b      	uxth	r3, r3
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80042ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 80042d2:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80042d6:	b90a      	cbnz	r2, 80042dc <I2C_Init+0xac>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80042d8:	f043 0301 	orr.w	r3, r3, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80042dc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80042e0:	4a09      	ldr	r2, [pc, #36]	; (8004308 <I2C_Init+0xd8>)
 80042e2:	fb01 f000 	mul.w	r0, r1, r0
 80042e6:	fb82 1000 	smull	r1, r0, r2, r0
 80042ea:	0980      	lsrs	r0, r0, #6
 80042ec:	3001      	adds	r0, #1
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80042ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80042f2:	8420      	strh	r0, [r4, #32]
 80042f4:	e7c5      	b.n	8004282 <I2C_Init+0x52>
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80042f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80042fa:	fbb1 f3f2 	udiv	r3, r1, r2
 80042fe:	b29b      	uxth	r3, r3
 8004300:	e7e7      	b.n	80042d2 <I2C_Init+0xa2>
 8004302:	bf00      	nop
 8004304:	431bde83 	tstmi	fp, #2096	; 0x830
 8004308:	10624dd3 	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
 800430c:	000186a0 	andeq	r8, r1, r0, lsr #13

08004310 <I2C_StructInit>:
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8004310:	2300      	movs	r3, #0
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 8004312:	b410      	push	{r4}
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8004314:	f64b 71ff 	movw	r1, #49151	; 0xbfff
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8004318:	f241 3488 	movw	r4, #5000	; 0x1388
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800431c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8004320:	6004      	str	r4, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8004322:	80c1      	strh	r1, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8004324:	8182      	strh	r2, [r0, #12]
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8004326:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8004328:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800432a:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
}
 800432c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop

08004334 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8004334:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004336:	b929      	cbnz	r1, 8004344 <I2C_Cmd+0x10>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	041b      	lsls	r3, r3, #16
 800433e:	0c1b      	lsrs	r3, r3, #16
 8004340:	8003      	strh	r3, [r0, #0]
 8004342:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8004344:	b29b      	uxth	r3, r3
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	8003      	strh	r3, [r0, #0]
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop

08004350 <I2C_AnalogFilterCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the analog filter */
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 8004350:	8c83      	ldrh	r3, [r0, #36]	; 0x24
void I2C_AnalogFilterCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004352:	b921      	cbnz	r1, 800435e <I2C_AnalogFilterCmd+0xe>
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
  }
  else
  {
    /* Disable the analog filter */
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
 8004354:	b29b      	uxth	r3, r3
 8004356:	f043 0310 	orr.w	r3, r3, #16
 800435a:	8483      	strh	r3, [r0, #36]	; 0x24
 800435c:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the analog filter */
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 800435e:	f023 0310 	bic.w	r3, r3, #16
 8004362:	041b      	lsls	r3, r3, #16
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	8483      	strh	r3, [r0, #36]	; 0x24
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop

0800436c <I2C_DigitalFilterConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIGITAL_FILTER(I2C_DigitalFilter));
  
  /* Get the old register value */
  tmpreg = I2Cx->FLTR;
 800436c:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 800436e:	b29b      	uxth	r3, r3
  
  /* Reset I2Cx DNF bit [3:0] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_FLTR_DNF);
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= (uint16_t)((uint16_t)I2C_DigitalFilter & I2C_FLTR_DNF);
 8004370:	f001 010f 	and.w	r1, r1, #15
  
  /* Get the old register value */
  tmpreg = I2Cx->FLTR;
  
  /* Reset I2Cx DNF bit [3:0] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_FLTR_DNF);
 8004374:	f023 030f 	bic.w	r3, r3, #15
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= (uint16_t)((uint16_t)I2C_DigitalFilter & I2C_FLTR_DNF);
 8004378:	4319      	orrs	r1, r3
  
  /* Store the new register value */
  I2Cx->FLTR = tmpreg;
 800437a:	8481      	strh	r1, [r0, #36]	; 0x24
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop

08004380 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8004380:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004382:	b929      	cbnz	r1, 8004390 <I2C_GenerateSTART+0x10>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8004384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004388:	041b      	lsls	r3, r3, #16
 800438a:	0c1b      	lsrs	r3, r3, #16
 800438c:	8003      	strh	r3, [r0, #0]
 800438e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8004390:	b29b      	uxth	r3, r3
 8004392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004396:	8003      	strh	r3, [r0, #0]
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop

0800439c <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800439c:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800439e:	b929      	cbnz	r1, 80043ac <I2C_GenerateSTOP+0x10>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80043a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	0c1b      	lsrs	r3, r3, #16
 80043a8:	8003      	strh	r3, [r0, #0]
 80043aa:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043b2:	8003      	strh	r3, [r0, #0]
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop

080043b8 <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80043b8:	b91a      	cbnz	r2, 80043c2 <I2C_Send7bitAddress+0xa>
    Address |= I2C_OAR1_ADD0;
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 80043ba:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 80043be:	8201      	strh	r1, [r0, #16]
 80043c0:	4770      	bx	lr
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 80043c2:	f041 0101 	orr.w	r1, r1, #1
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
  }
  /* Send the address */
  I2Cx->DR = Address;
 80043c6:	8201      	strh	r1, [r0, #16]
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop

080043cc <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80043cc:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80043ce:	b929      	cbnz	r1, 80043dc <I2C_AcknowledgeConfig+0x10>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 80043d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043d4:	041b      	lsls	r3, r3, #16
 80043d6:	0c1b      	lsrs	r3, r3, #16
 80043d8:	8003      	strh	r3, [r0, #0]
 80043da:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80043dc:	b29b      	uxth	r3, r3
 80043de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043e2:	8003      	strh	r3, [r0, #0]
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop

080043e8 <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 80043e8:	8983      	ldrh	r3, [r0, #12]
 80043ea:	b29b      	uxth	r3, r3

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80043ec:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 80043f0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80043f4:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 80043f6:	8181      	strh	r1, [r0, #12]
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop

080043fc <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 80043fc:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80043fe:	b929      	cbnz	r1, 800440c <I2C_DualAddressCmd+0x10>
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	041b      	lsls	r3, r3, #16
 8004406:	0c1b      	lsrs	r3, r3, #16
 8004408:	8183      	strh	r3, [r0, #12]
 800440a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800440c:	b29b      	uxth	r3, r3
 800440e:	f043 0301 	orr.w	r3, r3, #1
 8004412:	8183      	strh	r3, [r0, #12]
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop

08004418 <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8004418:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800441a:	b929      	cbnz	r1, 8004428 <I2C_GeneralCallCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENGC;
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 800441c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004420:	041b      	lsls	r3, r3, #16
 8004422:	0c1b      	lsrs	r3, r3, #16
 8004424:	8003      	strh	r3, [r0, #0]
 8004426:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8004428:	b29b      	uxth	r3, r3
 800442a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800442e:	8003      	strh	r3, [r0, #0]
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop

08004434 <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8004434:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004436:	b919      	cbnz	r1, 8004440 <I2C_SoftwareResetCmd+0xc>
    I2Cx->CR1 |= I2C_CR1_SWRST;
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 8004438:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800443c:	8003      	strh	r3, [r0, #0]
 800443e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8004440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004448:	b29b      	uxth	r3, r3
 800444a:	8003      	strh	r3, [r0, #0]
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop

08004450 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8004450:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8004452:	b129      	cbz	r1, 8004460 <I2C_StretchClockCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 8004454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004458:	041b      	lsls	r3, r3, #16
 800445a:	0c1b      	lsrs	r3, r3, #16
 800445c:	8003      	strh	r3, [r0, #0]
 800445e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8004460:	b29b      	uxth	r3, r3
 8004462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004466:	8003      	strh	r3, [r0, #0]
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop

0800446c <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 800446c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8004470:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8004472:	d005      	beq.n	8004480 <I2C_FastModeDutyCycleConfig+0x14>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8004474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004478:	041b      	lsls	r3, r3, #16
 800447a:	0c1b      	lsrs	r3, r3, #16
 800447c:	8383      	strh	r3, [r0, #28]
 800447e:	4770      	bx	lr
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 8004480:	b29b      	uxth	r3, r3
 8004482:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004486:	8383      	strh	r3, [r0, #28]
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop

0800448c <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 800448c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8004490:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 8004492:	d005      	beq.n	80044a0 <I2C_NACKPositionConfig+0x14>
    I2Cx->CR1 |= I2C_NACKPosition_Next;
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8004494:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004498:	041b      	lsls	r3, r3, #16
 800449a:	0c1b      	lsrs	r3, r3, #16
 800449c:	8003      	strh	r3, [r0, #0]
 800449e:	4770      	bx	lr
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044a6:	8003      	strh	r3, [r0, #0]
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop

080044ac <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80044ac:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80044b0:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80044b2:	d005      	beq.n	80044c0 <I2C_SMBusAlertConfig+0x14>
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 80044b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044b8:	041b      	lsls	r3, r3, #16
 80044ba:	0c1b      	lsrs	r3, r3, #16
 80044bc:	8003      	strh	r3, [r0, #0]
 80044be:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044c6:	8003      	strh	r3, [r0, #0]
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop

080044cc <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 80044cc:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80044ce:	b929      	cbnz	r1, 80044dc <I2C_ARPCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENARP;
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 80044d0:	f023 0310 	bic.w	r3, r3, #16
 80044d4:	041b      	lsls	r3, r3, #16
 80044d6:	0c1b      	lsrs	r3, r3, #16
 80044d8:	8003      	strh	r3, [r0, #0]
 80044da:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 80044dc:	b29b      	uxth	r3, r3
 80044de:	f043 0310 	orr.w	r3, r3, #16
 80044e2:	8003      	strh	r3, [r0, #0]
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop

080044e8 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80044e8:	8201      	strh	r1, [r0, #16]
 80044ea:	4770      	bx	lr

080044ec <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80044ec:	8a00      	ldrh	r0, [r0, #16]
}
 80044ee:	b2c0      	uxtb	r0, r0
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop

080044f4 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 80044f4:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80044f6:	b929      	cbnz	r1, 8004504 <I2C_TransmitPEC+0x10>
    I2Cx->CR1 |= I2C_CR1_PEC;
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 80044f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044fc:	041b      	lsls	r3, r3, #16
 80044fe:	0c1b      	lsrs	r3, r3, #16
 8004500:	8003      	strh	r3, [r0, #0]
 8004502:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8004504:	b29b      	uxth	r3, r3
 8004506:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800450a:	8003      	strh	r3, [r0, #0]
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop

08004510 <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8004510:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8004514:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8004516:	d005      	beq.n	8004524 <I2C_PECPositionConfig+0x14>
    I2Cx->CR1 |= I2C_PECPosition_Next;
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8004518:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800451c:	041b      	lsls	r3, r3, #16
 800451e:	0c1b      	lsrs	r3, r3, #16
 8004520:	8003      	strh	r3, [r0, #0]
 8004522:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8004524:	b29b      	uxth	r3, r3
 8004526:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800452a:	8003      	strh	r3, [r0, #0]
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop

08004530 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8004530:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004532:	b929      	cbnz	r1, 8004540 <I2C_CalculatePEC+0x10>
    I2Cx->CR1 |= I2C_CR1_ENPEC;
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8004534:	f023 0320 	bic.w	r3, r3, #32
 8004538:	041b      	lsls	r3, r3, #16
 800453a:	0c1b      	lsrs	r3, r3, #16
 800453c:	8003      	strh	r3, [r0, #0]
 800453e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8004540:	b29b      	uxth	r3, r3
 8004542:	f043 0320 	orr.w	r3, r3, #32
 8004546:	8003      	strh	r3, [r0, #0]
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop

0800454c <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 800454c:	8b00      	ldrh	r0, [r0, #24]
}
 800454e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004552:	4770      	bx	lr

08004554 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8004554:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004556:	b929      	cbnz	r1, 8004564 <I2C_DMACmd+0x10>
    I2Cx->CR2 |= I2C_CR2_DMAEN;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8004558:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800455c:	041b      	lsls	r3, r3, #16
 800455e:	0c1b      	lsrs	r3, r3, #16
 8004560:	8083      	strh	r3, [r0, #4]
 8004562:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8004564:	b29b      	uxth	r3, r3
 8004566:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800456a:	8083      	strh	r3, [r0, #4]
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop

08004570 <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8004570:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004572:	b929      	cbnz	r1, 8004580 <I2C_DMALastTransferCmd+0x10>
    I2Cx->CR2 |= I2C_CR2_LAST;
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8004574:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004578:	041b      	lsls	r3, r3, #16
 800457a:	0c1b      	lsrs	r3, r3, #16
 800457c:	8083      	strh	r3, [r0, #4]
 800457e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8004580:	b29b      	uxth	r3, r3
 8004582:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004586:	8083      	strh	r3, [r0, #4]
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop

0800458c <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 800458c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800458e:	2300      	movs	r3, #0
 8004590:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8004592:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 8004594:	9b01      	ldr	r3, [sp, #4]
 8004596:	4419      	add	r1, r3
 8004598:	9101      	str	r1, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800459a:	9b01      	ldr	r3, [sp, #4]
 800459c:	8818      	ldrh	r0, [r3, #0]
}
 800459e:	b280      	uxth	r0, r0
 80045a0:	b002      	add	sp, #8
 80045a2:	4770      	bx	lr

080045a4 <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80045a4:	8883      	ldrh	r3, [r0, #4]
 80045a6:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80045a8:	b91a      	cbnz	r2, 80045b2 <I2C_ITConfig+0xe>
    I2Cx->CR2 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 80045aa:	ea23 0101 	bic.w	r1, r3, r1
 80045ae:	8081      	strh	r1, [r0, #4]
 80045b0:	4770      	bx	lr
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80045b2:	4319      	orrs	r1, r3
 80045b4:	8081      	strh	r1, [r0, #4]
 80045b6:	4770      	bx	lr

080045b8 <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80045b8:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 80045ba:	8b03      	ldrh	r3, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80045bc:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80045be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80045c2:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80045c6:	4018      	ands	r0, r3
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 80045c8:	1a0b      	subs	r3, r1, r0
 80045ca:	4258      	negs	r0, r3
 80045cc:	4158      	adcs	r0, r3
 80045ce:	4770      	bx	lr

080045d0 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80045d0:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 80045d2:	8b03      	ldrh	r3, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80045d4:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80045d6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

  /* Return status */
  return lastevent;
}
 80045da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80045de:	4770      	bx	lr

080045e0 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80045e0:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80045e2:	2300      	movs	r3, #0

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80045e4:	0f0a      	lsrs	r2, r1, #28
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80045ea:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80045ec:	9200      	str	r2, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 80045ee:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80045f0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 80045f4:	b153      	cbz	r3, 800460c <I2C_GetFlagStatus+0x2c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80045f6:	9b01      	ldr	r3, [sp, #4]
 80045f8:	3314      	adds	r3, #20
 80045fa:	9301      	str	r3, [sp, #4]
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80045fc:	9b01      	ldr	r3, [sp, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 8004602:	bf0c      	ite	eq
 8004604:	2000      	moveq	r0, #0
 8004606:	2001      	movne	r0, #1
 8004608:	b002      	add	sp, #8
 800460a:	4770      	bx	lr
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800460c:	9b01      	ldr	r3, [sp, #4]
 800460e:	3318      	adds	r3, #24
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8004610:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8004612:	9301      	str	r3, [sp, #4]
 8004614:	e7f2      	b.n	80045fc <I2C_GetFlagStatus+0x1c>
 8004616:	bf00      	nop

08004618 <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8004618:	43c9      	mvns	r1, r1
 800461a:	b289      	uxth	r1, r1
 800461c:	8281      	strh	r1, [r0, #20]
 800461e:	4770      	bx	lr

08004620 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8004620:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8004622:	8a80      	ldrh	r0, [r0, #20]
 8004624:	b280      	uxth	r0, r0
 8004626:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8004628:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800462a:	d006      	beq.n	800463a <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800462c:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8004630:	ea13 4111 	ands.w	r1, r3, r1, lsr #16
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8004634:	bf0c      	ite	eq
 8004636:	2000      	moveq	r0, #0
 8004638:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 800463a:	4770      	bx	lr

0800463c <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800463c:	43c9      	mvns	r1, r1
 800463e:	b289      	uxth	r1, r1
 8004640:	8281      	strh	r1, [r0, #20]
 8004642:	4770      	bx	lr

08004644 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8004644:	b410      	push	{r4}

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8004646:	4a37      	ldr	r2, [pc, #220]	; (8004724 <DMA_DeInit+0xe0>)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8004648:	6804      	ldr	r4, [r0, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 800464a:	2300      	movs	r3, #0
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 800464c:	f024 0401 	bic.w	r4, r4, #1

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8004650:	2121      	movs	r1, #33	; 0x21

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8004652:	4290      	cmp	r0, r2
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8004654:	6004      	str	r4, [r0, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8004656:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8004658:	6043      	str	r3, [r0, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 800465a:	6083      	str	r3, [r0, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800465c:	60c3      	str	r3, [r0, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 800465e:	6103      	str	r3, [r0, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8004660:	6141      	str	r1, [r0, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8004662:	d04d      	beq.n	8004700 <DMA_DeInit+0xbc>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8004664:	4b30      	ldr	r3, [pc, #192]	; (8004728 <DMA_DeInit+0xe4>)
 8004666:	4298      	cmp	r0, r3
 8004668:	d035      	beq.n	80046d6 <DMA_DeInit+0x92>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 800466a:	4b30      	ldr	r3, [pc, #192]	; (800472c <DMA_DeInit+0xe8>)
 800466c:	4298      	cmp	r0, r3
 800466e:	d039      	beq.n	80046e4 <DMA_DeInit+0xa0>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8004670:	4b2f      	ldr	r3, [pc, #188]	; (8004730 <DMA_DeInit+0xec>)
 8004672:	4298      	cmp	r0, r3
 8004674:	d03d      	beq.n	80046f2 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8004676:	4b2f      	ldr	r3, [pc, #188]	; (8004734 <DMA_DeInit+0xf0>)
 8004678:	4298      	cmp	r0, r3
 800467a:	d047      	beq.n	800470c <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 800467c:	4b2e      	ldr	r3, [pc, #184]	; (8004738 <DMA_DeInit+0xf4>)
 800467e:	4298      	cmp	r0, r3
 8004680:	d048      	beq.n	8004714 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8004682:	4b2e      	ldr	r3, [pc, #184]	; (800473c <DMA_DeInit+0xf8>)
 8004684:	4298      	cmp	r0, r3
 8004686:	d01d      	beq.n	80046c4 <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8004688:	4b2d      	ldr	r3, [pc, #180]	; (8004740 <DMA_DeInit+0xfc>)
 800468a:	4298      	cmp	r0, r3
 800468c:	d01e      	beq.n	80046cc <DMA_DeInit+0x88>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 800468e:	4b2d      	ldr	r3, [pc, #180]	; (8004744 <DMA_DeInit+0x100>)
 8004690:	4298      	cmp	r0, r3
 8004692:	d043      	beq.n	800471c <DMA_DeInit+0xd8>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8004694:	4b2c      	ldr	r3, [pc, #176]	; (8004748 <DMA_DeInit+0x104>)
 8004696:	4298      	cmp	r0, r3
 8004698:	d01d      	beq.n	80046d6 <DMA_DeInit+0x92>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800469a:	4b2c      	ldr	r3, [pc, #176]	; (800474c <DMA_DeInit+0x108>)
 800469c:	4298      	cmp	r0, r3
 800469e:	d021      	beq.n	80046e4 <DMA_DeInit+0xa0>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 80046a0:	4b2b      	ldr	r3, [pc, #172]	; (8004750 <DMA_DeInit+0x10c>)
 80046a2:	4298      	cmp	r0, r3
 80046a4:	d025      	beq.n	80046f2 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 80046a6:	4b2b      	ldr	r3, [pc, #172]	; (8004754 <DMA_DeInit+0x110>)
 80046a8:	4298      	cmp	r0, r3
 80046aa:	d02f      	beq.n	800470c <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 80046ac:	4b2a      	ldr	r3, [pc, #168]	; (8004758 <DMA_DeInit+0x114>)
 80046ae:	4298      	cmp	r0, r3
 80046b0:	d030      	beq.n	8004714 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 80046b2:	4b2a      	ldr	r3, [pc, #168]	; (800475c <DMA_DeInit+0x118>)
 80046b4:	4298      	cmp	r0, r3
 80046b6:	d005      	beq.n	80046c4 <DMA_DeInit+0x80>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 80046b8:	4b29      	ldr	r3, [pc, #164]	; (8004760 <DMA_DeInit+0x11c>)
 80046ba:	4298      	cmp	r0, r3
 80046bc:	d006      	beq.n	80046cc <DMA_DeInit+0x88>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80046be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046c2:	4770      	bx	lr
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80046c4:	4a27      	ldr	r2, [pc, #156]	; (8004764 <DMA_DeInit+0x120>)
 80046c6:	f843 2c94 	str.w	r2, [r3, #-148]
 80046ca:	e7f8      	b.n	80046be <DMA_DeInit+0x7a>
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80046cc:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80046d0:	f843 2cac 	str.w	r2, [r3, #-172]
 80046d4:	e7f3      	b.n	80046be <DMA_DeInit+0x7a>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 80046d6:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80046da:	f843 2c20 	str.w	r2, [r3, #-32]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80046de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046e2:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 80046e4:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80046e8:	f843 2c38 	str.w	r2, [r3, #-56]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80046ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046f0:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80046f2:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80046f6:	f843 2c50 	str.w	r2, [r3, #-80]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80046fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046fe:	4770      	bx	lr

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8004700:	4b19      	ldr	r3, [pc, #100]	; (8004768 <DMA_DeInit+0x124>)
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8004702:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8004706:	223d      	movs	r2, #61	; 0x3d
 8004708:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800470a:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800470c:	4a17      	ldr	r2, [pc, #92]	; (800476c <DMA_DeInit+0x128>)
 800470e:	f843 2c64 	str.w	r2, [r3, #-100]
 8004712:	e7d4      	b.n	80046be <DMA_DeInit+0x7a>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8004714:	4a16      	ldr	r2, [pc, #88]	; (8004770 <DMA_DeInit+0x12c>)
 8004716:	f843 2c7c 	str.w	r2, [r3, #-124]
 800471a:	e7d0      	b.n	80046be <DMA_DeInit+0x7a>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 800471c:	223d      	movs	r2, #61	; 0x3d
 800471e:	f843 2c08 	str.w	r2, [r3, #-8]
 8004722:	e7cc      	b.n	80046be <DMA_DeInit+0x7a>
 8004724:	40026010 	andmi	r6, r2, r0, lsl r0
 8004728:	40026028 	andmi	r6, r2, r8, lsr #32
 800472c:	40026040 	andmi	r6, r2, r0, asr #32
 8004730:	40026058 	andmi	r6, r2, r8, asr r0
 8004734:	40026070 	andmi	r6, r2, r0, ror r0
 8004738:	40026088 	andmi	r6, r2, r8, lsl #1
 800473c:	400260a0 	andmi	r6, r2, r0, lsr #1
 8004740:	400260b8 	strhmi	r6, [r2], -r8
 8004744:	40026410 	andmi	r6, r2, r0, lsl r4
 8004748:	40026428 	andmi	r6, r2, r8, lsr #8
 800474c:	40026440 	andmi	r6, r2, r0, asr #8
 8004750:	40026458 	andmi	r6, r2, r8, asr r4
 8004754:	40026470 	andmi	r6, r2, r0, ror r4
 8004758:	40026488 	andmi	r6, r2, r8, lsl #9
 800475c:	400264a0 	andmi	r6, r2, r0, lsr #9
 8004760:	400264b8 			; <UNDEFINED> instruction: 0x400264b8
 8004764:	203d0000 	eorscs	r0, sp, r0
 8004768:	40026000 	andmi	r6, r2, r0
 800476c:	2000003d 	andcs	r0, r0, sp, lsr r0
 8004770:	20000f40 	andcs	r0, r0, r0, asr #30

08004774 <DMA_Init>:
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8004774:	68ca      	ldr	r2, [r1, #12]
 8004776:	680b      	ldr	r3, [r1, #0]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8004778:	f8d0 c000 	ldr.w	ip, [r0]
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800477c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8004780:	694f      	ldr	r7, [r1, #20]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004782:	698e      	ldr	r6, [r1, #24]
 8004784:	69cd      	ldr	r5, [r1, #28]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8004786:	6a0c      	ldr	r4, [r1, #32]
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8004788:	f8d1 9034 	ldr.w	r9, [r1, #52]	; 0x34
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800478c:	f8d1 8038 	ldr.w	r8, [r1, #56]	; 0x38
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8004790:	ea42 0a03 	orr.w	sl, r2, r3
 8004794:	ea4a 0707 	orr.w	r7, sl, r7
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8004798:	433e      	orrs	r6, r7
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800479a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800479c:	684f      	ldr	r7, [r1, #4]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800479e:	4335      	orrs	r5, r6
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80047a0:	432c      	orrs	r4, r5
 80047a2:	ea44 0203 	orr.w	r2, r4, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80047a6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047a8:	4e0d      	ldr	r6, [pc, #52]	; (80047e0 <DMA_Init+0x6c>)
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80047aa:	6acc      	ldr	r4, [r1, #44]	; 0x2c
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80047ac:	690d      	ldr	r5, [r1, #16]
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80047ae:	431a      	orrs	r2, r3
 80047b0:	ea42 0909 	orr.w	r9, r2, r9
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80047b4:	ea49 0808 	orr.w	r8, r9, r8
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047b8:	ea0c 0606 	and.w	r6, ip, r6
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80047bc:	ea48 0606 	orr.w	r6, r8, r6
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80047c0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80047c2:	6889      	ldr	r1, [r1, #8]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80047c4:	6006      	str	r6, [r0, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80047c6:	6942      	ldr	r2, [r0, #20]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80047c8:	4323      	orrs	r3, r4
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047ca:	f022 0207 	bic.w	r2, r2, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80047ce:	4313      	orrs	r3, r2

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80047d0:	6143      	str	r3, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80047d2:	6045      	str	r5, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80047d4:	6087      	str	r7, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80047d6:	60c1      	str	r1, [r0, #12]
}
 80047d8:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	f01c803f 			; <UNDEFINED> instruction: 0xf01c803f

080047e4 <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	6003      	str	r3, [r0, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80047e8:	6043      	str	r3, [r0, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 80047ea:	6083      	str	r3, [r0, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 80047ec:	60c3      	str	r3, [r0, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 80047ee:	6103      	str	r3, [r0, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80047f0:	6143      	str	r3, [r0, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 80047f2:	6183      	str	r3, [r0, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80047f4:	61c3      	str	r3, [r0, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80047f6:	6203      	str	r3, [r0, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 80047f8:	6243      	str	r3, [r0, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 80047fa:	6283      	str	r3, [r0, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 80047fc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 80047fe:	6303      	str	r3, [r0, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8004800:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8004802:	6383      	str	r3, [r0, #56]	; 0x38
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop

08004808 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8004808:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800480a:	b919      	cbnz	r1, 8004814 <DMA_Cmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800480c:	f023 0301 	bic.w	r3, r3, #1
 8004810:	6003      	str	r3, [r0, #0]
 8004812:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	6003      	str	r3, [r0, #0]
 800481a:	4770      	bx	lr

0800481c <DMA_PeriphIncOffsetSizeConfig>:

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 800481c:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 800481e:	b919      	cbnz	r1, 8004828 <DMA_PeriphIncOffsetSizeConfig+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 8004820:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004824:	6003      	str	r3, [r0, #0]
 8004826:	4770      	bx	lr

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 8004828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800482c:	6003      	str	r3, [r0, #0]
 800482e:	4770      	bx	lr

08004830 <DMA_FlowControllerConfig>:

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 8004830:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 8004832:	b919      	cbnz	r1, 800483c <DMA_FlowControllerConfig+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 8004834:	f023 0320 	bic.w	r3, r3, #32
 8004838:	6003      	str	r3, [r0, #0]
 800483a:	4770      	bx	lr

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 800483c:	f043 0320 	orr.w	r3, r3, #32
 8004840:	6003      	str	r3, [r0, #0]
 8004842:	4770      	bx	lr

08004844 <DMA_SetCurrDataCounter>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8004844:	6041      	str	r1, [r0, #4]
 8004846:	4770      	bx	lr

08004848 <DMA_GetCurrDataCounter>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8004848:	6840      	ldr	r0, [r0, #4]
}
 800484a:	b280      	uxth	r0, r0
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop

08004850 <DMA_DoubleBufferModeConfig>:
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8004850:	6803      	ldr	r3, [r0, #0]
{  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 8004852:	b922      	cbnz	r2, 800485e <DMA_DoubleBufferModeConfig+0xe>
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 8004854:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004858:	6003      	str	r3, [r0, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 800485a:	6101      	str	r1, [r0, #16]
 800485c:	4770      	bx	lr
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 800485e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004862:	6003      	str	r3, [r0, #0]
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8004864:	6101      	str	r1, [r0, #16]
 8004866:	4770      	bx	lr

08004868 <DMA_DoubleBufferModeCmd>:

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8004868:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 800486a:	b919      	cbnz	r1, 8004874 <DMA_DoubleBufferModeCmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 800486c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004870:	6003      	str	r3, [r0, #0]
 8004872:	4770      	bx	lr

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8004874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004878:	6003      	str	r3, [r0, #0]
 800487a:	4770      	bx	lr

0800487c <DMA_MemoryTargetConfig>:
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 800487c:	b90a      	cbnz	r2, 8004882 <DMA_MemoryTargetConfig+0x6>
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 800487e:	60c1      	str	r1, [r0, #12]
 8004880:	4770      	bx	lr
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 8004882:	6101      	str	r1, [r0, #16]
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop

08004888 <DMA_GetCurrentMemoryTarget>:
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8004888:	6800      	ldr	r0, [r0, #0]
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
  }
  return tmp;
}
 800488a:	f3c0 40c0 	ubfx	r0, r0, #19, #1
 800488e:	4770      	bx	lr

08004890 <DMA_GetCmdStatus>:
  FunctionalState state = DISABLE;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8004890:	6800      	ldr	r0, [r0, #0]
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
  }
  return state;
}
 8004892:	f000 0001 	and.w	r0, r0, #1
 8004896:	4770      	bx	lr

08004898 <DMA_GetFIFOStatus>:
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 8004898:	6940      	ldr	r0, [r0, #20]
  
  return tmpreg;
}
 800489a:	f000 0038 	and.w	r0, r0, #56	; 0x38
 800489e:	4770      	bx	lr

080048a0 <DMA_GetFlagStatus>:

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80048a0:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <DMA_GetFlagStatus+0x30>)
 80048a2:	4a0c      	ldr	r2, [pc, #48]	; (80048d4 <DMA_GetFlagStatus+0x34>)
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80048a4:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80048a6:	4c0c      	ldr	r4, [pc, #48]	; (80048d8 <DMA_GetFlagStatus+0x38>)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80048a8:	42a0      	cmp	r0, r4
 80048aa:	bf8c      	ite	hi
 80048ac:	4610      	movhi	r0, r2
 80048ae:	4618      	movls	r0, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80048b0:	008b      	lsls	r3, r1, #2
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80048b2:	bf4c      	ite	mi
 80048b4:	6843      	ldrmi	r3, [r0, #4]
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80048b6:	6803      	ldrpl	r3, [r0, #0]
    bitstatus = RESET;
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
}
 80048b8:	f85d 4b04 	ldr.w	r4, [sp], #4
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80048bc:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 80048c0:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80048c4:	4219      	tst	r1, r3
    bitstatus = RESET;
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
}
 80048c6:	bf0c      	ite	eq
 80048c8:	2000      	moveq	r0, #0
 80048ca:	2001      	movne	r0, #1
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40026000 	andmi	r6, r2, r0
 80048d4:	40026400 	andmi	r6, r2, r0, lsl #8
 80048d8:	4002640f 	andmi	r6, r2, pc, lsl #8

080048dc <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80048dc:	b410      	push	{r4}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80048de:	4a09      	ldr	r2, [pc, #36]	; (8004904 <DMA_ClearFlag+0x28>)
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80048e0:	4c09      	ldr	r4, [pc, #36]	; (8004908 <DMA_ClearFlag+0x2c>)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80048e2:	4b0a      	ldr	r3, [pc, #40]	; (800490c <DMA_ClearFlag+0x30>)
 80048e4:	42a0      	cmp	r0, r4
 80048e6:	bf8c      	ite	hi
 80048e8:	4610      	movhi	r0, r2
 80048ea:	4618      	movls	r0, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80048ec:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80048f0:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 80048f4:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 80048f8:	bf14      	ite	ne
 80048fa:	60c1      	strne	r1, [r0, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80048fc:	6081      	streq	r1, [r0, #8]
  }    
}
 80048fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	40026400 	andmi	r6, r2, r0, lsl #8
 8004908:	4002640f 	andmi	r6, r2, pc, lsl #8
 800490c:	40026000 	andmi	r6, r2, r0

08004910 <DMA_ITConfig>:
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8004910:	060b      	lsls	r3, r1, #24
 8004912:	d50c      	bpl.n	800492e <DMA_ITConfig+0x1e>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8004914:	6943      	ldr	r3, [r0, #20]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
 8004916:	b1aa      	cbz	r2, 8004944 <DMA_ITConfig+0x34>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8004918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 800491c:	2980      	cmp	r1, #128	; 0x80
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 800491e:	6143      	str	r3, [r0, #20]
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8004920:	d00f      	beq.n	8004942 <DMA_ITConfig+0x32>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8004922:	6803      	ldr	r3, [r0, #0]
 8004924:	f001 011e 	and.w	r1, r1, #30
 8004928:	4319      	orrs	r1, r3
 800492a:	6001      	str	r1, [r0, #0]
 800492c:	4770      	bx	lr
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 800492e:	2980      	cmp	r1, #128	; 0x80
 8004930:	d007      	beq.n	8004942 <DMA_ITConfig+0x32>
  {
    if (NewState != DISABLE)
 8004932:	2a00      	cmp	r2, #0
 8004934:	d1f5      	bne.n	8004922 <DMA_ITConfig+0x12>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8004936:	6803      	ldr	r3, [r0, #0]
 8004938:	f001 011e 	and.w	r1, r1, #30
 800493c:	ea23 0101 	bic.w	r1, r3, r1
 8004940:	6001      	str	r1, [r0, #0]
 8004942:	4770      	bx	lr
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8004944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8004948:	2980      	cmp	r1, #128	; 0x80
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 800494a:	6143      	str	r3, [r0, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 800494c:	d1f3      	bne.n	8004936 <DMA_ITConfig+0x26>
 800494e:	4770      	bx	lr

08004950 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8004950:	b470      	push	{r4, r5, r6}
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004952:	4a11      	ldr	r2, [pc, #68]	; (8004998 <DMA_GetITStatus+0x48>)
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8004954:	4d11      	ldr	r5, [pc, #68]	; (800499c <DMA_GetITStatus+0x4c>)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004956:	4c12      	ldr	r4, [pc, #72]	; (80049a0 <DMA_GetITStatus+0x50>)
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8004958:	f021 23f0 	bic.w	r3, r1, #4026593280	; 0xf000f000
 800495c:	f023 16c3 	bic.w	r6, r3, #12779715	; 0xc300c3
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004960:	42a8      	cmp	r0, r5
 8004962:	bf88      	it	hi
 8004964:	4622      	movhi	r2, r4
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8004966:	b196      	cbz	r6, 800498e <DMA_GetITStatus+0x3e>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8004968:	6804      	ldr	r4, [r0, #0]

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 800496a:	f004 041e 	and.w	r4, r4, #30
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 800496e:	ea04 24d1 	and.w	r4, r4, r1, lsr #11
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8004972:	0089      	lsls	r1, r1, #2
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8004974:	bf4c      	ite	mi
 8004976:	6852      	ldrmi	r2, [r2, #4]
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8004978:	6812      	ldrpl	r2, [r2, #0]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800497a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800497e:	ea13 0002 	ands.w	r0, r3, r2
 8004982:	d002      	beq.n	800498a <DMA_GetITStatus+0x3a>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8004984:	1c20      	adds	r0, r4, #0
 8004986:	bf18      	it	ne
 8004988:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the DMA_IT status */
  return  bitstatus;
}
 800498a:	bc70      	pop	{r4, r5, r6}
 800498c:	4770      	bx	lr
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 800498e:	6944      	ldr	r4, [r0, #20]
 8004990:	f004 0480 	and.w	r4, r4, #128	; 0x80
 8004994:	e7ed      	b.n	8004972 <DMA_GetITStatus+0x22>
 8004996:	bf00      	nop
 8004998:	40026000 	andmi	r6, r2, r0
 800499c:	4002640f 	andmi	r6, r2, pc, lsl #8
 80049a0:	40026400 	andmi	r6, r2, r0, lsl #8

080049a4 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80049a4:	b410      	push	{r4}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80049a6:	4a09      	ldr	r2, [pc, #36]	; (80049cc <DMA_ClearITPendingBit+0x28>)
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80049a8:	4c09      	ldr	r4, [pc, #36]	; (80049d0 <DMA_ClearITPendingBit+0x2c>)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80049aa:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <DMA_ClearITPendingBit+0x30>)
 80049ac:	42a0      	cmp	r0, r4
 80049ae:	bf8c      	ite	hi
 80049b0:	4610      	movhi	r0, r2
 80049b2:	4618      	movls	r0, r3
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80049b4:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80049b8:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 80049bc:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 80049c0:	bf14      	ite	ne
 80049c2:	60c1      	strne	r1, [r0, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80049c4:	6081      	streq	r1, [r0, #8]
  }   
}
 80049c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	40026400 	andmi	r6, r2, r0, lsl #8
 80049d0:	4002640f 	andmi	r6, r2, pc, lsl #8
 80049d4:	40026000 	andmi	r6, r2, r0

080049d8 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 80049d8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80049da:	4b2d      	ldr	r3, [pc, #180]	; (8004a90 <SPI_I2S_DeInit+0xb8>)
 80049dc:	4298      	cmp	r0, r3
 80049de:	d01b      	beq.n	8004a18 <SPI_I2S_DeInit+0x40>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 80049e0:	4b2c      	ldr	r3, [pc, #176]	; (8004a94 <SPI_I2S_DeInit+0xbc>)
 80049e2:	4298      	cmp	r0, r3
 80049e4:	d024      	beq.n	8004a30 <SPI_I2S_DeInit+0x58>
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else if (SPIx == SPI3)
 80049e6:	4b2c      	ldr	r3, [pc, #176]	; (8004a98 <SPI_I2S_DeInit+0xc0>)
 80049e8:	4298      	cmp	r0, r3
 80049ea:	d02d      	beq.n	8004a48 <SPI_I2S_DeInit+0x70>
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  }
  else if (SPIx == SPI4)
 80049ec:	4b2b      	ldr	r3, [pc, #172]	; (8004a9c <SPI_I2S_DeInit+0xc4>)
 80049ee:	4298      	cmp	r0, r3
 80049f0:	d036      	beq.n	8004a60 <SPI_I2S_DeInit+0x88>
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
  }
  else if (SPIx == SPI5)
 80049f2:	4b2b      	ldr	r3, [pc, #172]	; (8004aa0 <SPI_I2S_DeInit+0xc8>)
 80049f4:	4298      	cmp	r0, r3
 80049f6:	d03f      	beq.n	8004a78 <SPI_I2S_DeInit+0xa0>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
  }
  else 
  {
    if (SPIx == SPI6)
 80049f8:	4b2a      	ldr	r3, [pc, #168]	; (8004aa4 <SPI_I2S_DeInit+0xcc>)
 80049fa:	4298      	cmp	r0, r3
 80049fc:	d000      	beq.n	8004a00 <SPI_I2S_DeInit+0x28>
 80049fe:	bd08      	pop	{r3, pc}
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8004a00:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004a04:	2101      	movs	r1, #1
 8004a06:	f7ff f8d5 	bl	8003bb4 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8004a0a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004a0e:	2100      	movs	r1, #0
    }
  }
}
 8004a10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI6)
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8004a14:	f7ff b8ce 	b.w	8003bb4 <RCC_APB2PeriphResetCmd>
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8004a18:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	f7ff f8c9 	bl	8003bb4 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8004a22:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004a26:	2100      	movs	r1, #0
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8004a28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8004a2c:	f7ff b8c2 	b.w	8003bb4 <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8004a30:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004a34:	2101      	movs	r1, #1
 8004a36:	f7ff f8b1 	bl	8003b9c <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8004a3a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004a3e:	2100      	movs	r1, #0
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8004a40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8004a44:	f7ff b8aa 	b.w	8003b9c <RCC_APB1PeriphResetCmd>
  }
  else if (SPIx == SPI3)
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8004a48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	f7ff f8a5 	bl	8003b9c <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8004a52:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004a56:	2100      	movs	r1, #0
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8004a58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI3)
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8004a5c:	f7ff b89e 	b.w	8003b9c <RCC_APB1PeriphResetCmd>
  }
  else if (SPIx == SPI4)
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 8004a60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004a64:	2101      	movs	r1, #1
 8004a66:	f7ff f8a5 	bl	8003bb4 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8004a6a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004a6e:	2100      	movs	r1, #0
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8004a70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI4)
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8004a74:	f7ff b89e 	b.w	8003bb4 <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI5)
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8004a78:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	f7ff f899 	bl	8003bb4 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8004a82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004a86:	2100      	movs	r1, #0
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8004a88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI5)
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8004a8c:	f7ff b892 	b.w	8003bb4 <RCC_APB2PeriphResetCmd>
 8004a90:	40013000 	andmi	r3, r1, r0
 8004a94:	40003800 	andmi	r3, r0, r0, lsl #16
 8004a98:	40003c00 	andmi	r3, r0, r0, lsl #24
 8004a9c:	40013400 	andmi	r3, r1, r0, lsl #8
 8004aa0:	40015000 	andmi	r5, r1, r0
 8004aa4:	40015400 	andmi	r5, r1, r0, lsl #8

08004aa8 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8004aa8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004aac:	f8b1 a002 	ldrh.w	sl, [r1, #2]
 8004ab0:	f8b1 9000 	ldrh.w	r9, [r1]
 8004ab4:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8004ab8:	890f      	ldrh	r7, [r1, #8]
 8004aba:	894e      	ldrh	r6, [r1, #10]
 8004abc:	898d      	ldrh	r5, [r1, #12]
 8004abe:	89cc      	ldrh	r4, [r1, #14]
 8004ac0:	f8b1 c006 	ldrh.w	ip, [r1, #6]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8004ac4:	8a0a      	ldrh	r2, [r1, #16]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8004ac6:	8803      	ldrh	r3, [r0, #0]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004ac8:	ea4a 0109 	orr.w	r1, sl, r9
 8004acc:	ea41 0108 	orr.w	r1, r1, r8
 8004ad0:	ea41 010c 	orr.w	r1, r1, ip
 8004ad4:	4339      	orrs	r1, r7
 8004ad6:	4331      	orrs	r1, r6
 8004ad8:	4329      	orrs	r1, r5
 8004ada:	4321      	orrs	r1, r4

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8004adc:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004ae0:	430b      	orrs	r3, r1
 8004ae2:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8004ae4:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8004ae6:	8b83      	ldrh	r3, [r0, #28]
 8004ae8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aec:	041b      	lsls	r3, r3, #16
 8004aee:	0c1b      	lsrs	r3, r3, #16
 8004af0:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
}
 8004af2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8004af6:	8202      	strh	r2, [r0, #16]
}
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop

08004afc <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8004afc:	8b83      	ldrh	r3, [r0, #28]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8004afe:	688a      	ldr	r2, [r1, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8004b00:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b04:	f023 030f 	bic.w	r3, r3, #15
 8004b08:	041b      	lsls	r3, r3, #16
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8004b0a:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8004b0e:	0c1b      	lsrs	r3, r3, #16
  SPIx->I2SPR = 0x0002;
 8004b10:	2402      	movs	r4, #2
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8004b12:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 8004b14:	8404      	strh	r4, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8004b16:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8004b1a:	42a2      	cmp	r2, r4
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8004b1c:	fa1f fc8c 	uxth.w	ip, ip
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8004b20:	d04f      	beq.n	8004bc2 <I2S_Init+0xc6>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8004b22:	4b2e      	ldr	r3, [pc, #184]	; (8004bdc <I2S_Init+0xe0>)
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8004b24:	888c      	ldrh	r4, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8004b26:	689d      	ldr	r5, [r3, #8]
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8004b28:	2c00      	cmp	r4, #0
 8004b2a:	bf0c      	ite	eq
 8004b2c:	f04f 0920 	moveq.w	r9, #32
 8004b30:	f04f 0940 	movne.w	r9, #64	; 0x40
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8004b34:	022d      	lsls	r5, r5, #8
 8004b36:	d43f      	bmi.n	8004bb8 <I2S_Init+0xbc>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8004b38:	4b28      	ldr	r3, [pc, #160]	; (8004bdc <I2S_Init+0xe0>)
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8004b3a:	4f29      	ldr	r7, [pc, #164]	; (8004be0 <I2S_Init+0xe4>)
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8004b3c:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8004b40:	f8d3 6084 	ldr.w	r6, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8004b44:	f8d3 a004 	ldr.w	sl, [r3, #4]
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8004b48:	88cb      	ldrh	r3, [r1, #6]
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8004b4a:	f00a 0a3f 	and.w	sl, sl, #63	; 0x3f
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8004b4e:	f3c5 1888 	ubfx	r8, r5, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8004b52:	fbb7 f7fa 	udiv	r7, r7, sl
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8004b56:	f3c6 7602 	ubfx	r6, r6, #28, #3
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8004b5a:	fb08 f707 	mul.w	r7, r8, r7
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8004b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8004b62:	fbb7 f6f6 	udiv	r6, r7, r6
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8004b66:	d02f      	beq.n	8004bc8 <I2S_Init+0xcc>
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004b68:	fbb6 f5f9 	udiv	r5, r6, r9
 8004b6c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004b70:	006d      	lsls	r5, r5, #1
 8004b72:	fbb5 f2f2 	udiv	r2, r5, r2
 8004b76:	3205      	adds	r2, #5
 8004b78:	b292      	uxth	r2, r2
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8004b7a:	4d1a      	ldr	r5, [pc, #104]	; (8004be4 <I2S_Init+0xe8>)
 8004b7c:	fba5 6202 	umull	r6, r2, r5, r2
 8004b80:	08d2      	lsrs	r2, r2, #3
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8004b82:	0855      	lsrs	r5, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8004b84:	1eae      	subs	r6, r5, #2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8004b86:	f002 0201 	and.w	r2, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8004b8a:	2efd      	cmp	r6, #253	; 0xfd
 8004b8c:	bf94      	ite	ls
 8004b8e:	ea45 2202 	orrls.w	r2, r5, r2, lsl #8
 8004b92:	2202      	movhi	r2, #2
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8004b94:	880f      	ldrh	r7, [r1, #0]

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8004b96:	884e      	ldrh	r6, [r1, #2]
 8004b98:	898d      	ldrh	r5, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8004b9a:	ea4c 0107 	orr.w	r1, ip, r7
 8004b9e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8004ba2:	4331      	orrs	r1, r6
 8004ba4:	4329      	orrs	r1, r5
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8004ba6:	4313      	orrs	r3, r2
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8004ba8:	b289      	uxth	r1, r1
 8004baa:	430c      	orrs	r4, r1
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	8403      	strh	r3, [r0, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8004bb0:	8384      	strh	r4, [r0, #28]
}
 8004bb2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8004bb6:	4770      	bx	lr

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8004bb8:	689d      	ldr	r5, [r3, #8]
 8004bba:	f425 0500 	bic.w	r5, r5, #8388608	; 0x800000
 8004bbe:	609d      	str	r5, [r3, #8]
 8004bc0:	e7ba      	b.n	8004b38 <I2S_Init+0x3c>
 8004bc2:	888c      	ldrh	r4, [r1, #4]
 8004bc4:	88cb      	ldrh	r3, [r1, #6]
 8004bc6:	e7e5      	b.n	8004b94 <I2S_Init+0x98>
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004bc8:	0a36      	lsrs	r6, r6, #8
 8004bca:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8004bce:	0076      	lsls	r6, r6, #1
 8004bd0:	fbb6 f2f2 	udiv	r2, r6, r2
 8004bd4:	3205      	adds	r2, #5
 8004bd6:	b292      	uxth	r2, r2
 8004bd8:	e7cf      	b.n	8004b7a <I2S_Init+0x7e>
 8004bda:	bf00      	nop
 8004bdc:	40023800 	andmi	r3, r2, r0, lsl #16
 8004be0:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8004be4:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd

08004be8 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8004be8:	2300      	movs	r3, #0
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8004bea:	2207      	movs	r2, #7
 8004bec:	8202      	strh	r2, [r0, #16]
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8004bee:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8004bf0:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8004bf2:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8004bf4:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8004bf6:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8004bf8:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8004bfa:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8004bfc:	81c3      	strh	r3, [r0, #14]
 8004bfe:	4770      	bx	lr

08004c00 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8004c00:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8004c02:	2202      	movs	r2, #2
 8004c04:	6082      	str	r2, [r0, #8]
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8004c06:	6003      	str	r3, [r0, #0]
 8004c08:	6043      	str	r3, [r0, #4]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8004c0a:	8183      	strh	r3, [r0, #12]
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop

08004c10 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8004c10:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004c12:	b929      	cbnz	r1, 8004c20 <SPI_Cmd+0x10>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8004c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c18:	041b      	lsls	r3, r3, #16
 8004c1a:	0c1b      	lsrs	r3, r3, #16
 8004c1c:	8003      	strh	r3, [r0, #0]
 8004c1e:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c26:	8003      	strh	r3, [r0, #0]
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop

08004c2c <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8004c2c:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004c2e:	b929      	cbnz	r1, 8004c3c <I2S_Cmd+0x10>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8004c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c34:	041b      	lsls	r3, r3, #16
 8004c36:	0c1b      	lsrs	r3, r3, #16
 8004c38:	8383      	strh	r3, [r0, #28]
 8004c3a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c42:	8383      	strh	r3, [r0, #28]
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop

08004c48 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8004c48:	8803      	ldrh	r3, [r0, #0]
 8004c4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c4e:	041b      	lsls	r3, r3, #16
 8004c50:	0c1b      	lsrs	r3, r3, #16
 8004c52:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8004c54:	8803      	ldrh	r3, [r0, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	4319      	orrs	r1, r3
 8004c5a:	8001      	strh	r1, [r0, #0]
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop

08004c60 <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8004c60:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8004c64:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8004c66:	d005      	beq.n	8004c74 <SPI_BiDirectionalLineConfig+0x14>
    SPIx->CR1 |= SPI_Direction_Tx;
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8004c68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c6c:	041b      	lsls	r3, r3, #16
 8004c6e:	0c1b      	lsrs	r3, r3, #16
 8004c70:	8003      	strh	r3, [r0, #0]
 8004c72:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c7a:	8003      	strh	r3, [r0, #0]
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop

08004c80 <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8004c80:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8004c84:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8004c86:	8803      	ldrh	r3, [r0, #0]
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8004c88:	d004      	beq.n	8004c94 <SPI_NSSInternalSoftwareConfig+0x14>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c90:	8003      	strh	r3, [r0, #0]
 8004c92:	4770      	bx	lr
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8004c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c98:	041b      	lsls	r3, r3, #16
 8004c9a:	0c1b      	lsrs	r3, r3, #16
 8004c9c:	8003      	strh	r3, [r0, #0]
 8004c9e:	4770      	bx	lr

08004ca0 <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8004ca0:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004ca2:	b929      	cbnz	r1, 8004cb0 <SPI_SSOutputCmd+0x10>
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8004ca4:	f023 0304 	bic.w	r3, r3, #4
 8004ca8:	041b      	lsls	r3, r3, #16
 8004caa:	0c1b      	lsrs	r3, r3, #16
 8004cac:	8083      	strh	r3, [r0, #4]
 8004cae:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	f043 0304 	orr.w	r3, r3, #4
 8004cb6:	8083      	strh	r3, [r0, #4]
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop

08004cbc <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8004cbc:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004cbe:	b929      	cbnz	r1, 8004ccc <SPI_TIModeCmd+0x10>
    SPIx->CR2 |= SPI_CR2_FRF;
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 8004cc0:	f023 0310 	bic.w	r3, r3, #16
 8004cc4:	041b      	lsls	r3, r3, #16
 8004cc6:	0c1b      	lsrs	r3, r3, #16
 8004cc8:	8083      	strh	r3, [r0, #4]
 8004cca:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	f043 0310 	orr.w	r3, r3, #16
 8004cd2:	8083      	strh	r3, [r0, #4]
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop

08004cd8 <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8004cd8:	8b83      	ldrh	r3, [r0, #28]
 8004cda:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004cde:	f023 030f 	bic.w	r3, r3, #15
 8004ce2:	041b      	lsls	r3, r3, #16
  I2Sxext->I2SPR = 0x0002;
 8004ce4:	2202      	movs	r2, #2
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8004ce6:	0c1b      	lsrs	r3, r3, #16
 8004ce8:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 8004cea:	8402      	strh	r2, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8004cec:	8b83      	ldrh	r3, [r0, #28]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8004cee:	880a      	ldrh	r2, [r1, #0]
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8004cf0:	b430      	push	{r4, r5}
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8004cf2:	884d      	ldrh	r5, [r1, #2]
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004cf4:	888c      	ldrh	r4, [r1, #4]
 8004cf6:	8989      	ldrh	r1, [r1, #12]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8004cf8:	b29b      	uxth	r3, r3
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8004cfa:	432b      	orrs	r3, r5
 8004cfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8004d00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004d04:	4323      	orrs	r3, r4
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8004d06:	b292      	uxth	r2, r2
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004d08:	430b      	orrs	r3, r1
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8004d0a:	2a00      	cmp	r2, #0
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004d0c:	b29b      	uxth	r3, r3
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
  {
    tmp = I2S_Mode_SlaveRx;
 8004d0e:	bf14      	ite	ne
 8004d10:	2200      	movne	r2, #0
 8004d12:	f44f 7280 	moveq.w	r2, #256	; 0x100
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004d16:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 8004d18:	8383      	strh	r3, [r0, #28]
}
 8004d1a:	bc30      	pop	{r4, r5}
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop

08004d20 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8004d20:	8980      	ldrh	r0, [r0, #12]
}
 8004d22:	b280      	uxth	r0, r0
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop

08004d28 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8004d28:	8181      	strh	r1, [r0, #12]
 8004d2a:	4770      	bx	lr

08004d2c <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8004d2c:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004d2e:	b929      	cbnz	r1, 8004d3c <SPI_CalculateCRC+0x10>
    SPIx->CR1 |= SPI_CR1_CRCEN;
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8004d30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d34:	041b      	lsls	r3, r3, #16
 8004d36:	0c1b      	lsrs	r3, r3, #16
 8004d38:	8003      	strh	r3, [r0, #0]
 8004d3a:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d42:	8003      	strh	r3, [r0, #0]
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop

08004d48 <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8004d48:	8803      	ldrh	r3, [r0, #0]
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d50:	8003      	strh	r3, [r0, #0]
 8004d52:	4770      	bx	lr

08004d54 <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8004d54:	2901      	cmp	r1, #1
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8004d56:	bf14      	ite	ne
 8004d58:	8b00      	ldrhne	r0, [r0, #24]
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8004d5a:	8a80      	ldrheq	r0, [r0, #20]
 8004d5c:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8004d5e:	4770      	bx	lr

08004d60 <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8004d60:	8a00      	ldrh	r0, [r0, #16]
}
 8004d62:	b280      	uxth	r0, r0
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop

08004d68 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8004d68:	8883      	ldrh	r3, [r0, #4]
 8004d6a:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8004d6c:	b91a      	cbnz	r2, 8004d76 <SPI_I2S_DMACmd+0xe>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8004d6e:	ea23 0101 	bic.w	r1, r3, r1
 8004d72:	8081      	strh	r1, [r0, #4]
 8004d74:	4770      	bx	lr
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8004d76:	4319      	orrs	r1, r3
 8004d78:	8081      	strh	r1, [r0, #4]
 8004d7a:	4770      	bx	lr

08004d7c <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	0909      	lsrs	r1, r1, #4
 8004d80:	fa03 f101 	lsl.w	r1, r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8004d84:	8883      	ldrh	r3, [r0, #4]

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8004d86:	b289      	uxth	r1, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8004d88:	b29b      	uxth	r3, r3
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
 8004d8a:	b91a      	cbnz	r2, 8004d94 <SPI_I2S_ITConfig+0x18>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8004d8c:	ea23 0101 	bic.w	r1, r3, r1
 8004d90:	8081      	strh	r1, [r0, #4]
 8004d92:	4770      	bx	lr
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8004d94:	4319      	orrs	r1, r3
 8004d96:	8081      	strh	r1, [r0, #4]
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop

08004d9c <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8004d9c:	8903      	ldrh	r3, [r0, #8]
 8004d9e:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 8004da0:	bf0c      	ite	eq
 8004da2:	2000      	moveq	r0, #0
 8004da4:	2001      	movne	r0, #1
 8004da6:	4770      	bx	lr

08004da8 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8004da8:	43c9      	mvns	r1, r1
 8004daa:	b289      	uxth	r1, r1
 8004dac:	8101      	strh	r1, [r0, #8]
 8004dae:	4770      	bx	lr

08004db0 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8004db0:	b410      	push	{r4}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8004db2:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8004db4:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8004db6:	f001 030f 	and.w	r3, r1, #15
 8004dba:	2201      	movs	r2, #1

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8004dbc:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8004dc2:	4018      	ands	r0, r3

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8004dc4:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8004dc6:	d005      	beq.n	8004dd4 <SPI_I2S_GetITStatus+0x24>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8004dc8:	0909      	lsrs	r1, r1, #4
 8004dca:	408a      	lsls	r2, r1

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8004dcc:	4214      	tst	r4, r2
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8004dce:	bf0c      	ite	eq
 8004dd0:	2000      	moveq	r0, #0
 8004dd2:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8004dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop

08004ddc <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8004ddc:	f001 010f 	and.w	r1, r1, #15
 8004de0:	2301      	movs	r3, #1
 8004de2:	fa03 f101 	lsl.w	r1, r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8004de6:	43c9      	mvns	r1, r1
 8004de8:	b289      	uxth	r1, r1
 8004dea:	8101      	strh	r1, [r0, #8]
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop

08004df0 <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 8004df0:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <EXTI_DeInit+0x14>)
  EXTI->EMR = 0x00000000;
  EXTI->RTSR = 0x00000000;
  EXTI->FTSR = 0x00000000;
  EXTI->PR = 0x007FFFFF;
 8004df2:	4905      	ldr	r1, [pc, #20]	; (8004e08 <EXTI_DeInit+0x18>)
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8004df8:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8004dfa:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8004dfc:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8004dfe:	6159      	str	r1, [r3, #20]
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40013c00 	andmi	r3, r1, r0, lsl #24
 8004e08:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>

08004e0c <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8004e0c:	7983      	ldrb	r3, [r0, #6]
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8004e0e:	b470      	push	{r4, r5, r6}
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8004e10:	b32b      	cbz	r3, 8004e5e <EXTI_Init+0x52>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8004e12:	4b1d      	ldr	r3, [pc, #116]	; (8004e88 <EXTI_Init+0x7c>)
 8004e14:	6801      	ldr	r1, [r0, #0]
 8004e16:	681e      	ldr	r6, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8004e18:	7902      	ldrb	r2, [r0, #4]
    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8004e1a:	7945      	ldrb	r5, [r0, #5]
  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8004e1c:	43cc      	mvns	r4, r1
 8004e1e:	4026      	ands	r6, r4
 8004e20:	601e      	str	r6, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8004e22:	685e      	ldr	r6, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8004e24:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004e28:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8004e2c:	4034      	ands	r4, r6
 8004e2e:	605c      	str	r4, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8004e30:	6814      	ldr	r4, [r2, #0]
 8004e32:	4321      	orrs	r1, r4
 8004e34:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8004e36:	6802      	ldr	r2, [r0, #0]
 8004e38:	6898      	ldr	r0, [r3, #8]
 8004e3a:	43d1      	mvns	r1, r2
 8004e3c:	4008      	ands	r0, r1
 8004e3e:	6098      	str	r0, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8004e40:	68d8      	ldr	r0, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8004e42:	2d10      	cmp	r5, #16

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8004e44:	ea01 0100 	and.w	r1, r1, r0
 8004e48:	60d9      	str	r1, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8004e4a:	d014      	beq.n	8004e76 <EXTI_Init+0x6a>
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8004e4c:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8004e50:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8004e54:	bc70      	pop	{r4, r5, r6}
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8004e56:	6819      	ldr	r1, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8004e5c:	4770      	bx	lr
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8004e5e:	7903      	ldrb	r3, [r0, #4]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8004e60:	6801      	ldr	r1, [r0, #0]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8004e62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e66:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8004e6a:	bc70      	pop	{r4, r5, r6}
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	ea22 0201 	bic.w	r2, r2, r1
 8004e72:	601a      	str	r2, [r3, #0]
  }
}
 8004e74:	4770      	bx	lr
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8004e76:	6899      	ldr	r1, [r3, #8]
 8004e78:	4311      	orrs	r1, r2
 8004e7a:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8004e7c:	68d9      	ldr	r1, [r3, #12]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	60da      	str	r2, [r3, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8004e82:	bc70      	pop	{r4, r5, r6}
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40013c00 	andmi	r3, r1, r0, lsl #24

08004e8c <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8004e8c:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8004e8e:	220c      	movs	r2, #12
 8004e90:	7142      	strb	r2, [r0, #5]
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8004e92:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8004e94:	7103      	strb	r3, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8004e96:	7183      	strb	r3, [r0, #6]
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop

08004e9c <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8004e9c:	4b02      	ldr	r3, [pc, #8]	; (8004ea8 <EXTI_GenerateSWInterrupt+0xc>)
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	4310      	orrs	r0, r2
 8004ea2:	6118      	str	r0, [r3, #16]
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40013c00 	andmi	r3, r1, r0, lsl #24

08004eac <EXTI_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8004eac:	4b03      	ldr	r3, [pc, #12]	; (8004ebc <EXTI_GetFlagStatus+0x10>)
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004eb2:	bf0c      	ite	eq
 8004eb4:	2000      	moveq	r0, #0
 8004eb6:	2001      	movne	r0, #1
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40013c00 	andmi	r3, r1, r0, lsl #24

08004ec0 <EXTI_ClearFlag>:
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8004ec0:	4b01      	ldr	r3, [pc, #4]	; (8004ec8 <EXTI_ClearFlag+0x8>)
 8004ec2:	6158      	str	r0, [r3, #20]
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40013c00 	andmi	r3, r1, r0, lsl #24

08004ecc <EXTI_GetITStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8004ecc:	4b03      	ldr	r3, [pc, #12]	; (8004edc <EXTI_GetITStatus+0x10>)
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  return bitstatus;
  
}
 8004ed2:	bf0c      	ite	eq
 8004ed4:	2000      	moveq	r0, #0
 8004ed6:	2001      	movne	r0, #1
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40013c00 	andmi	r3, r1, r0, lsl #24

08004ee0 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8004ee0:	4b01      	ldr	r3, [pc, #4]	; (8004ee8 <EXTI_ClearITPendingBit+0x8>)
 8004ee2:	6158      	str	r0, [r3, #20]
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	40013c00 	andmi	r3, r1, r0, lsl #24

08004eec <STM_EVAL_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8004eec:	b510      	push	{r4, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8004eee:	4b0f      	ldr	r3, [pc, #60]	; (8004f2c <STM_EVAL_LEDInit+0x40>)
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	4604      	mov	r4, r0
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004efa:	f7fe fdef 	bl	8003adc <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8004efe:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <STM_EVAL_LEDInit+0x44>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8004f00:	4a0c      	ldr	r2, [pc, #48]	; (8004f34 <STM_EVAL_LEDInit+0x48>)
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8004f02:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8004f06:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8004f0a:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004f0c:	2202      	movs	r2, #2
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004f0e:	2301      	movs	r3, #1
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8004f10:	2400      	movs	r4, #0
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8004f12:	4669      	mov	r1, sp
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004f14:	f88d 3004 	strb.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8004f18:	f88d 3007 	strb.w	r3, [sp, #7]
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8004f1c:	f88d 4006 	strb.w	r4, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004f20:	f88d 2005 	strb.w	r2, [sp, #5]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8004f24:	f7fe fb7a 	bl	800361c <GPIO_Init>
}
 8004f28:	b002      	add	sp, #8
 8004f2a:	bd10      	pop	{r4, pc}
 8004f2c:	08005314 	stmdaeq	r0, {r2, r4, r8, r9, ip, lr}
 8004f30:	0800531c 	stmdaeq	r0, {r2, r3, r4, r8, r9, ip, lr}
 8004f34:	2000002c 	andcs	r0, r0, ip, lsr #32

08004f38 <STM_EVAL_LEDOn>:
  *     @arg LED4 
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8004f38:	4b03      	ldr	r3, [pc, #12]	; (8004f48 <STM_EVAL_LEDOn+0x10>)
 8004f3a:	4a04      	ldr	r2, [pc, #16]	; (8004f4c <STM_EVAL_LEDOn+0x14>)
 8004f3c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004f40:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8004f44:	831a      	strh	r2, [r3, #24]
 8004f46:	4770      	bx	lr
 8004f48:	2000002c 	andcs	r0, r0, ip, lsr #32
 8004f4c:	0800531c 	stmdaeq	r0, {r2, r3, r4, r8, r9, ip, lr}

08004f50 <STM_EVAL_LEDOff>:
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8004f50:	4b03      	ldr	r3, [pc, #12]	; (8004f60 <STM_EVAL_LEDOff+0x10>)
 8004f52:	4a04      	ldr	r2, [pc, #16]	; (8004f64 <STM_EVAL_LEDOff+0x14>)
 8004f54:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004f58:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8004f5c:	835a      	strh	r2, [r3, #26]
 8004f5e:	4770      	bx	lr
 8004f60:	2000002c 	andcs	r0, r0, ip, lsr #32
 8004f64:	0800531c 	stmdaeq	r0, {r2, r3, r4, r8, r9, ip, lr}

08004f68 <STM_EVAL_LEDToggle>:
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8004f68:	4b04      	ldr	r3, [pc, #16]	; (8004f7c <STM_EVAL_LEDToggle+0x14>)
 8004f6a:	4a05      	ldr	r2, [pc, #20]	; (8004f80 <STM_EVAL_LEDToggle+0x18>)
 8004f6c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004f70:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 8004f74:	695a      	ldr	r2, [r3, #20]
 8004f76:	404a      	eors	r2, r1
 8004f78:	615a      	str	r2, [r3, #20]
 8004f7a:	4770      	bx	lr
 8004f7c:	2000002c 	andcs	r0, r0, ip, lsr #32
 8004f80:	0800531c 	stmdaeq	r0, {r2, r3, r4, r8, r9, ip, lr}

08004f84 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8004f84:	b530      	push	{r4, r5, lr}
 8004f86:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8004f88:	2001      	movs	r0, #1
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	460c      	mov	r4, r1
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8004f8e:	4601      	mov	r1, r0
 8004f90:	f7fe fda4 	bl	8003adc <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8004f94:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004f98:	2101      	movs	r1, #1
 8004f9a:	f7fe fdcf 	bl	8003b3c <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8004f9e:	ab06      	add	r3, sp, #24
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	f843 1d10 	str.w	r1, [r3, #-16]!
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8004fa6:	4a17      	ldr	r2, [pc, #92]	; (8005004 <STM_EVAL_PBInit+0x80>)
 8004fa8:	4619      	mov	r1, r3
 8004faa:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8004fae:	2302      	movs	r3, #2
  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8004fb0:	2500      	movs	r5, #0
 8004fb2:	f88d 500c 	strb.w	r5, [sp, #12]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8004fb6:	f88d 300f 	strb.w	r3, [sp, #15]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8004fba:	f7fe fb2f 	bl	800361c <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8004fbe:	2c01      	cmp	r4, #1
 8004fc0:	d001      	beq.n	8004fc6 <STM_EVAL_PBInit+0x42>
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

    NVIC_Init(&NVIC_InitStructure); 
  }
}
 8004fc2:	b007      	add	sp, #28
 8004fc4:	bd30      	pop	{r4, r5, pc}
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);

  if (Button_Mode == BUTTON_MODE_EXTI)
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	4628      	mov	r0, r5
 8004fca:	f7ff f8cf 	bl	800416c <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8004fce:	2308      	movs	r3, #8
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure);
 8004fd0:	a804      	add	r0, sp, #16
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8004fd2:	f88d 3015 	strb.w	r3, [sp, #21]
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8004fd6:	9404      	str	r4, [sp, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8004fd8:	f88d 5014 	strb.w	r5, [sp, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8004fdc:	f88d 4016 	strb.w	r4, [sp, #22]
    EXTI_Init(&EXTI_InitStructure);
 8004fe0:	f7ff ff14 	bl	8004e0c <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8004fe4:	230f      	movs	r3, #15
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure);

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8004fe6:	2206      	movs	r2, #6
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

    NVIC_Init(&NVIC_InitStructure); 
 8004fe8:	a801      	add	r0, sp, #4

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004fea:	f88d 4007 	strb.w	r4, [sp, #7]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    EXTI_Init(&EXTI_InitStructure);

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8004fee:	f88d 2004 	strb.w	r2, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8004ff2:	f88d 3005 	strb.w	r3, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8004ff6:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

    NVIC_Init(&NVIC_InitStructure); 
 8004ffa:	f7fe fa03 	bl	8003404 <NVIC_Init>
  }
}
 8004ffe:	b007      	add	sp, #28
 8005000:	bd30      	pop	{r4, r5, pc}
 8005002:	bf00      	nop
 8005004:	20000034 	andcs	r0, r0, r4, lsr r0

08005008 <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 8005008:	b508      	push	{r3, lr}
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800500a:	4b03      	ldr	r3, [pc, #12]	; (8005018 <STM_EVAL_PBGetState+0x10>)
 800500c:	2101      	movs	r1, #1
 800500e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005012:	f7fe fb7d 	bl	8003710 <GPIO_ReadInputDataBit>
}
 8005016:	bd08      	pop	{r3, pc}
 8005018:	20000034 	andcs	r0, r0, r4, lsr r0

0800501c <sEE_LowLevel_DeInit>:
  * @brief  DeInitializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DeInit(void)
{
 800501c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /* sEE_I2C Peripheral Disable */
  I2C_Cmd(sEE_I2C, DISABLE);
 800501e:	4c21      	ldr	r4, [pc, #132]	; (80050a4 <sEE_LowLevel_DeInit+0x88>)
  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);

  /* Configure and enable I2C DMA TX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 8005020:	4d21      	ldr	r5, [pc, #132]	; (80050a8 <sEE_LowLevel_DeInit+0x8c>)
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
  NVIC_Init(&NVIC_InitStructure);   
  
  /* Disable and Deinitialize the DMA Streams */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 8005022:	4f22      	ldr	r7, [pc, #136]	; (80050ac <sEE_LowLevel_DeInit+0x90>)
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 8005024:	4e22      	ldr	r6, [pc, #136]	; (80050b0 <sEE_LowLevel_DeInit+0x94>)
  * @brief  DeInitializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DeInit(void)
{
 8005026:	b083      	sub	sp, #12
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /* sEE_I2C Peripheral Disable */
  I2C_Cmd(sEE_I2C, DISABLE);
 8005028:	4620      	mov	r0, r4
 800502a:	2100      	movs	r1, #0
 800502c:	f7ff f982 	bl	8004334 <I2C_Cmd>
 
  /* sEE_I2C DeInit */
  I2C_DeInit(sEE_I2C);
 8005030:	4620      	mov	r0, r4
 8005032:	f7ff f8c7 	bl	80041c4 <I2C_DeInit>

  /*!< sEE_I2C Periph clock disable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
 8005036:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800503a:	2100      	movs	r1, #0
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800503c:	2400      	movs	r4, #0
 
  /* sEE_I2C DeInit */
  I2C_DeInit(sEE_I2C);

  /*!< sEE_I2C Periph clock disable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
 800503e:	f7fe fd71 	bl	8003b24 <RCC_APB1PeriphClockCmd>
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8005042:	4669      	mov	r1, sp
  /*!< sEE_I2C Periph clock disable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 8005044:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8005048:	481a      	ldr	r0, [pc, #104]	; (80050b4 <sEE_LowLevel_DeInit+0x98>)
  /*!< sEE_I2C Periph clock disable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 800504a:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800504c:	f88d 4004 	strb.w	r4, [sp, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8005050:	f88d 4007 	strb.w	r4, [sp, #7]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8005054:	f7fe fae2 	bl	800361c <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 8005058:	4669      	mov	r1, sp
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 800505a:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 800505e:	4816      	ldr	r0, [pc, #88]	; (80050b8 <sEE_LowLevel_DeInit+0x9c>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 8005060:	9300      	str	r3, [sp, #0]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 8005062:	f7fe fadb 	bl	800361c <GPIO_Init>

  /* Configure and enable I2C DMA TX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 8005066:	230f      	movs	r3, #15
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
  NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
  NVIC_Init(&NVIC_InitStructure);
 8005068:	4628      	mov	r0, r5
  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);

  /* Configure and enable I2C DMA TX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 800506a:	702b      	strb	r3, [r5, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 800506c:	706c      	strb	r4, [r5, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 800506e:	70ac      	strb	r4, [r5, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
 8005070:	70ec      	strb	r4, [r5, #3]
  NVIC_Init(&NVIC_InitStructure);
 8005072:	f7fe f9c7 	bl	8003404 <NVIC_Init>

  /* Configure and enable I2C DMA RX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 8005076:	230d      	movs	r3, #13
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
  NVIC_Init(&NVIC_InitStructure);   
 8005078:	4628      	mov	r0, r5
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
  NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
  NVIC_Init(&NVIC_InitStructure);

  /* Configure and enable I2C DMA RX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 800507a:	702b      	strb	r3, [r5, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 800507c:	706c      	strb	r4, [r5, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 800507e:	70ac      	strb	r4, [r5, #2]
  NVIC_Init(&NVIC_InitStructure);   
 8005080:	f7fe f9c0 	bl	8003404 <NVIC_Init>
  
  /* Disable and Deinitialize the DMA Streams */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 8005084:	4621      	mov	r1, r4
 8005086:	4638      	mov	r0, r7
 8005088:	f7ff fbbe 	bl	8004808 <DMA_Cmd>
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 800508c:	4621      	mov	r1, r4
 800508e:	4630      	mov	r0, r6
 8005090:	f7ff fbba 	bl	8004808 <DMA_Cmd>
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
 8005094:	4638      	mov	r0, r7
 8005096:	f7ff fad5 	bl	8004644 <DMA_DeInit>
  DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
 800509a:	4630      	mov	r0, r6
 800509c:	f7ff fad2 	bl	8004644 <DMA_DeInit>
}
 80050a0:	b003      	add	sp, #12
 80050a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050a4:	40005c00 	andmi	r5, r0, r0, lsl #24
 80050a8:	20012e3c 	andcs	r2, r1, ip, lsr lr
 80050ac:	40026070 	andmi	r6, r2, r0, ror r0
 80050b0:	40026040 	andmi	r6, r2, r0, asr #32
 80050b4:	40020000 	andmi	r0, r2, r0
 80050b8:	40020800 	andmi	r0, r2, r0, lsl #16

080050bc <sEE_LowLevel_Init>:
  * @brief  Initializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_Init(void)
{
 80050bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /*!< sEE_I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
 80050c0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
  * @brief  Initializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_Init(void)
{
 80050c4:	b083      	sub	sp, #12
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /*!< sEE_I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
 80050c6:	2101      	movs	r1, #1
 80050c8:	f7fe fd2c 	bl	8003b24 <RCC_APB1PeriphClockCmd>
  
  /*!< sEE_I2C_SCL_GPIO_CLK and sEE_I2C_SDA_GPIO_CLK Periph clock enable */
  RCC_AHB1PeriphClockCmd(sEE_I2C_SCL_GPIO_CLK | sEE_I2C_SDA_GPIO_CLK, ENABLE);
 80050cc:	2005      	movs	r0, #5
 80050ce:	2101      	movs	r1, #1
 80050d0:	f7fe fd04 	bl	8003adc <RCC_AHB1PeriphClockCmd>
  
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80050d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80050d8:	2101      	movs	r1, #1
 80050da:	f7fe fd2f 	bl	8003b3c <RCC_APB2PeriphClockCmd>
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 80050de:	f8df b140 	ldr.w	fp, [pc, #320]	; 8005220 <sEE_LowLevel_Init+0x164>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 80050e2:	f8df a140 	ldr.w	sl, [pc, #320]	; 8005224 <sEE_LowLevel_Init+0x168>

  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);  
  
  /* Configure and enable I2C DMA TX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 80050e6:	4e4a      	ldr	r6, [pc, #296]	; (8005210 <sEE_LowLevel_Init+0x154>)
  /*!< I2C DMA TX and RX channels configuration */
  /* Enable the DMA clock */
  RCC_AHB1PeriphClockCmd(sEE_I2C_DMA_CLK, ENABLE);
  
  /* Clear any pending flag on Rx Stream  */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_FEIF | sEE_TX_DMA_FLAG_DMEIF | sEE_TX_DMA_FLAG_TEIF | \
 80050e8:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8005228 <sEE_LowLevel_Init+0x16c>
                                       sEE_TX_DMA_FLAG_HTIF | sEE_TX_DMA_FLAG_TCIF);
  /* Disable the EE I2C Tx DMA stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
  /* Configure the DMA stream for the EE I2C peripheral TX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
  sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
 80050ec:	4c49      	ldr	r4, [pc, #292]	; (8005214 <sEE_LowLevel_Init+0x158>)
  sEEDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
  sEEDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
  DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);

  /* Clear any pending flag on Rx Stream */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_FEIF | sEE_RX_DMA_FLAG_DMEIF | sEE_RX_DMA_FLAG_TEIF | \
 80050ee:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800522c <sEE_LowLevel_Init+0x170>
  RCC_AHB1PeriphClockCmd(sEE_I2C_SCL_GPIO_CLK | sEE_I2C_SDA_GPIO_CLK, ENABLE);
  
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
  
  /* Reset sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, ENABLE);  
 80050f2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80050f6:	2101      	movs	r1, #1
 80050f8:	f7fe fd50 	bl	8003b9c <RCC_APB1PeriphResetCmd>
  /* Release reset signal of sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
 80050fc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005100:	2100      	movs	r1, #0
  /*!< Configure sEE_I2C pins: SCL */   
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8005102:	2500      	movs	r5, #0
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
  
  /* Reset sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, ENABLE);  
  /* Release reset signal of sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
 8005104:	f7fe fd4a 	bl	8003b9c <RCC_APB1PeriphResetCmd>
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */   
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8005108:	2701      	movs	r7, #1
  /* Release reset signal of sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */   
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 800510a:	f44f 7280 	mov.w	r2, #256	; 0x100
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800510e:	2302      	movs	r3, #2
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8005110:	4658      	mov	r0, fp
 8005112:	4669      	mov	r1, sp
  /* Release reset signal of sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */   
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 8005114:	9200      	str	r2, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8005116:	f88d 3004 	strb.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800511a:	f88d 3005 	strb.w	r3, [sp, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800511e:	f88d 7006 	strb.w	r7, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8005122:	f88d 5007 	strb.w	r5, [sp, #7]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8005126:	f7fe fa79 	bl	800361c <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 800512a:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 800512e:	4669      	mov	r1, sp
 8005130:	4650      	mov	r0, sl
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 8005132:	9300      	str	r3, [sp, #0]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 8005134:	f7fe fa72 	bl	800361c <GPIO_Init>

  /* Connect PXx to I2C_SCL*/
  GPIO_PinAFConfig(sEE_I2C_SCL_GPIO_PORT, sEE_I2C_SCL_SOURCE, sEE_I2C_SCL_AF);
 8005138:	4658      	mov	r0, fp
 800513a:	2108      	movs	r1, #8
 800513c:	2204      	movs	r2, #4
 800513e:	f7fe fb0b 	bl	8003758 <GPIO_PinAFConfig>

  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);  
 8005142:	2204      	movs	r2, #4
 8005144:	2109      	movs	r1, #9
 8005146:	4650      	mov	r0, sl
 8005148:	f7fe fb06 	bl	8003758 <GPIO_PinAFConfig>
  
  /* Configure and enable I2C DMA TX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 800514c:	230f      	movs	r3, #15
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 800514e:	4630      	mov	r0, r6
  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);  
  
  /* Configure and enable I2C DMA TX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8005150:	7075      	strb	r5, [r6, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 8005152:	70b5      	strb	r5, [r6, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8005154:	70f7      	strb	r7, [r6, #3]

  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);  
  
  /* Configure and enable I2C DMA TX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 8005156:	7033      	strb	r3, [r6, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 8005158:	f7fe f954 	bl	8003404 <NVIC_Init>

  /* Configure and enable I2C DMA RX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 800515c:	230d      	movs	r3, #13
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
  NVIC_Init(&NVIC_InitStructure);  
 800515e:	4630      	mov	r0, r6
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);

  /* Configure and enable I2C DMA RX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 8005160:	7033      	strb	r3, [r6, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8005162:	7075      	strb	r5, [r6, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 8005164:	70b5      	strb	r5, [r6, #2]
  NVIC_Init(&NVIC_InitStructure);  
 8005166:	f7fe f94d 	bl	8003404 <NVIC_Init>
  
  /*!< I2C DMA TX and RX channels configuration */
  /* Enable the DMA clock */
  RCC_AHB1PeriphClockCmd(sEE_I2C_DMA_CLK, ENABLE);
 800516a:	4639      	mov	r1, r7
 800516c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005170:	f7fe fcb4 	bl	8003adc <RCC_AHB1PeriphClockCmd>
  
  /* Clear any pending flag on Rx Stream  */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_FEIF | sEE_TX_DMA_FLAG_DMEIF | sEE_TX_DMA_FLAG_TEIF | \
 8005174:	4648      	mov	r0, r9
 8005176:	4928      	ldr	r1, [pc, #160]	; (8005218 <sEE_LowLevel_Init+0x15c>)
 8005178:	f7ff fbb0 	bl	80048dc <DMA_ClearFlag>
                                       sEE_TX_DMA_FLAG_HTIF | sEE_TX_DMA_FLAG_TCIF);
  /* Disable the EE I2C Tx DMA stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 800517c:	4629      	mov	r1, r5
 800517e:	4648      	mov	r0, r9
 8005180:	f7ff fb42 	bl	8004808 <DMA_Cmd>
  /* Configure the DMA stream for the EE I2C peripheral TX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
 8005184:	4648      	mov	r0, r9
 8005186:	f7ff fa5d 	bl	8004644 <DMA_DeInit>
  sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
  sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
 800518a:	f5ab 3bd1 	sub.w	fp, fp, #107008	; 0x1a200
                                       sEE_TX_DMA_FLAG_HTIF | sEE_TX_DMA_FLAG_TCIF);
  /* Disable the EE I2C Tx DMA stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
  /* Configure the DMA stream for the EE I2C peripheral TX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
  sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
 800518e:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
  sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
  sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;    /* This parameter will be configured durig communication */;
  sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; /* This parameter will be configured durig communication */
  sEEDMA_InitStructure.DMA_BufferSize = 0xFFFF;              /* This parameter will be configured durig communication */
 8005192:	f64f 7cff 	movw	ip, #65535	; 0xffff
  sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8005196:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  sEEDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 800519a:	2303      	movs	r3, #3
  sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 800519c:	2204      	movs	r2, #4
  sEEDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  sEEDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
  sEEDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
  DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);
 800519e:	4648      	mov	r0, r9
                                       sEE_TX_DMA_FLAG_HTIF | sEE_TX_DMA_FLAG_TCIF);
  /* Disable the EE I2C Tx DMA stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
  /* Configure the DMA stream for the EE I2C peripheral TX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
  sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
 80051a0:	6021      	str	r1, [r4, #0]
  sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
 80051a2:	f5ab 7bf8 	sub.w	fp, fp, #496	; 0x1f0
  sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  sEEDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  sEEDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
  sEEDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
  DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);
 80051a6:	4621      	mov	r1, r4
  /* Configure the DMA stream for the EE I2C peripheral TX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
  sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
  sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
  sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;    /* This parameter will be configured durig communication */;
  sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; /* This parameter will be configured durig communication */
 80051a8:	f04f 0a40 	mov.w	sl, #64	; 0x40
  sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 80051ac:	f44f 3640 	mov.w	r6, #196608	; 0x30000
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
  sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
  sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
  sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;    /* This parameter will be configured durig communication */;
  sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; /* This parameter will be configured durig communication */
  sEEDMA_InitStructure.DMA_BufferSize = 0xFFFF;              /* This parameter will be configured durig communication */
 80051b0:	f8c4 c010 	str.w	ip, [r4, #16]
  sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80051b4:	f8c4 e018 	str.w	lr, [r4, #24]
  sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  sEEDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 80051b8:	6323      	str	r3, [r4, #48]	; 0x30
  sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 80051ba:	62e2      	str	r2, [r4, #44]	; 0x2c
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
  /* Configure the DMA stream for the EE I2C peripheral TX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
  sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
  sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
  sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;    /* This parameter will be configured durig communication */;
 80051bc:	60a5      	str	r5, [r4, #8]
  sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; /* This parameter will be configured durig communication */
  sEEDMA_InitStructure.DMA_BufferSize = 0xFFFF;              /* This parameter will be configured durig communication */
  sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80051be:	6165      	str	r5, [r4, #20]
  sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80051c0:	61e5      	str	r5, [r4, #28]
  sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80051c2:	6225      	str	r5, [r4, #32]
  sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 80051c4:	6265      	str	r5, [r4, #36]	; 0x24
  sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
  sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  sEEDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  sEEDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80051c6:	6365      	str	r5, [r4, #52]	; 0x34
  sEEDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80051c8:	63a5      	str	r5, [r4, #56]	; 0x38
  /* Disable the EE I2C Tx DMA stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
  /* Configure the DMA stream for the EE I2C peripheral TX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
  sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
  sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
 80051ca:	f8c4 b004 	str.w	fp, [r4, #4]
  sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;    /* This parameter will be configured durig communication */;
  sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; /* This parameter will be configured durig communication */
 80051ce:	f8c4 a00c 	str.w	sl, [r4, #12]
  sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
  sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 80051d2:	62a6      	str	r6, [r4, #40]	; 0x28
  sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
  sEEDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
  sEEDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
  sEEDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
  DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);
 80051d4:	f7ff face 	bl	8004774 <DMA_Init>

  /* Clear any pending flag on Rx Stream */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_FEIF | sEE_RX_DMA_FLAG_DMEIF | sEE_RX_DMA_FLAG_TEIF | \
 80051d8:	4640      	mov	r0, r8
 80051da:	4910      	ldr	r1, [pc, #64]	; (800521c <sEE_LowLevel_Init+0x160>)
 80051dc:	f7ff fb7e 	bl	80048dc <DMA_ClearFlag>
                                       sEE_RX_DMA_FLAG_HTIF | sEE_RX_DMA_FLAG_TCIF);
  /* Disable the EE I2C DMA Rx stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 80051e0:	4629      	mov	r1, r5
 80051e2:	4640      	mov	r0, r8
 80051e4:	f7ff fb10 	bl	8004808 <DMA_Cmd>
  /* Configure the DMA stream for the EE I2C peripheral RX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
 80051e8:	4640      	mov	r0, r8
 80051ea:	f7ff fa2b 	bl	8004644 <DMA_DeInit>
  DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);
 80051ee:	4640      	mov	r0, r8
 80051f0:	4621      	mov	r1, r4
 80051f2:	f7ff fabf 	bl	8004774 <DMA_Init>
  
  /* Enable the DMA Channels Interrupts */
  DMA_ITConfig(sEE_I2C_DMA_STREAM_TX, DMA_IT_TC, ENABLE);
 80051f6:	4648      	mov	r0, r9
 80051f8:	463a      	mov	r2, r7
 80051fa:	2110      	movs	r1, #16
 80051fc:	f7ff fb88 	bl	8004910 <DMA_ITConfig>
  DMA_ITConfig(sEE_I2C_DMA_STREAM_RX, DMA_IT_TC, ENABLE);      
 8005200:	4640      	mov	r0, r8
 8005202:	463a      	mov	r2, r7
 8005204:	2110      	movs	r1, #16
 8005206:	f7ff fb83 	bl	8004910 <DMA_ITConfig>
}
 800520a:	b003      	add	sp, #12
 800520c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005210:	20012e3c 	andcs	r2, r1, ip, lsr lr
 8005214:	20012e40 	andcs	r2, r1, r0, asr #28
 8005218:	2000003d 	andcs	r0, r0, sp, lsr r0
 800521c:	103d0000 	eorsne	r0, sp, r0
 8005220:	40020000 	andmi	r0, r2, r0
 8005224:	40020800 	andmi	r0, r2, r0, lsl #16
 8005228:	40026070 	andmi	r6, r2, r0, ror r0
 800522c:	40026040 	andmi	r6, r2, r0, asr #32

08005230 <sEE_LowLevel_DMAConfig>:
  * @brief  Initializes DMA channel used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DMAConfig(uint32_t pBuffer, uint32_t BufferSize, uint32_t Direction)
{ 
 8005230:	b430      	push	{r4, r5}
  /* Initialize the DMA with the new parameters */
  if (Direction == sEE_DIRECTION_TX)
  {
    /* Configure the DMA Tx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 8005232:	4b08      	ldr	r3, [pc, #32]	; (8005254 <sEE_LowLevel_DMAConfig+0x24>)
  * @brief  Initializes DMA channel used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DMAConfig(uint32_t pBuffer, uint32_t BufferSize, uint32_t Direction)
{ 
 8005234:	4605      	mov	r5, r0
 8005236:	460c      	mov	r4, r1
  /* Initialize the DMA with the new parameters */
  if (Direction == sEE_DIRECTION_TX)
 8005238:	b142      	cbz	r2, 800524c <sEE_LowLevel_DMAConfig+0x1c>
  { 
    /* Configure the DMA Rx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
    DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);    
 800523a:	4807      	ldr	r0, [pc, #28]	; (8005258 <sEE_LowLevel_DMAConfig+0x28>)
    DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);  
  }
  else
  { 
    /* Configure the DMA Rx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 800523c:	609d      	str	r5, [r3, #8]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 800523e:	2200      	movs	r2, #0
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
 8005240:	611c      	str	r4, [r3, #16]
    DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);    
 8005242:	4619      	mov	r1, r3
  }
}
 8005244:	bc30      	pop	{r4, r5}
  }
  else
  { 
    /* Configure the DMA Rx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8005246:	60da      	str	r2, [r3, #12]
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
    DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);    
 8005248:	f7ff ba94 	b.w	8004774 <DMA_Init>
  {
    /* Configure the DMA Tx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;    
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;  
    DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);  
 800524c:	4803      	ldr	r0, [pc, #12]	; (800525c <sEE_LowLevel_DMAConfig+0x2c>)
{ 
  /* Initialize the DMA with the new parameters */
  if (Direction == sEE_DIRECTION_TX)
  {
    /* Configure the DMA Tx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 800524e:	609d      	str	r5, [r3, #8]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;    
 8005250:	2240      	movs	r2, #64	; 0x40
 8005252:	e7f5      	b.n	8005240 <sEE_LowLevel_DMAConfig+0x10>
 8005254:	20012e40 	andcs	r2, r1, r0, asr #28
 8005258:	40026040 	andmi	r6, r2, r0, asr #32
 800525c:	40026070 	andmi	r6, r2, r0, ror r0

08005260 <memset>:
 8005260:	b4f0      	push	{r4, r5, r6, r7}
 8005262:	0784      	lsls	r4, r0, #30
 8005264:	d043      	beq.n	80052ee <memset+0x8e>
 8005266:	1e54      	subs	r4, r2, #1
 8005268:	2a00      	cmp	r2, #0
 800526a:	d03e      	beq.n	80052ea <memset+0x8a>
 800526c:	b2cd      	uxtb	r5, r1
 800526e:	4603      	mov	r3, r0
 8005270:	e003      	b.n	800527a <memset+0x1a>
 8005272:	1e62      	subs	r2, r4, #1
 8005274:	2c00      	cmp	r4, #0
 8005276:	d038      	beq.n	80052ea <memset+0x8a>
 8005278:	4614      	mov	r4, r2
 800527a:	f803 5b01 	strb.w	r5, [r3], #1
 800527e:	079a      	lsls	r2, r3, #30
 8005280:	d1f7      	bne.n	8005272 <memset+0x12>
 8005282:	2c03      	cmp	r4, #3
 8005284:	d92a      	bls.n	80052dc <memset+0x7c>
 8005286:	b2cd      	uxtb	r5, r1
 8005288:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800528c:	2c0f      	cmp	r4, #15
 800528e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005292:	d915      	bls.n	80052c0 <memset+0x60>
 8005294:	f1a4 0710 	sub.w	r7, r4, #16
 8005298:	093f      	lsrs	r7, r7, #4
 800529a:	f103 0610 	add.w	r6, r3, #16
 800529e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 80052a2:	461a      	mov	r2, r3
 80052a4:	6015      	str	r5, [r2, #0]
 80052a6:	6055      	str	r5, [r2, #4]
 80052a8:	6095      	str	r5, [r2, #8]
 80052aa:	60d5      	str	r5, [r2, #12]
 80052ac:	3210      	adds	r2, #16
 80052ae:	42b2      	cmp	r2, r6
 80052b0:	d1f8      	bne.n	80052a4 <memset+0x44>
 80052b2:	f004 040f 	and.w	r4, r4, #15
 80052b6:	3701      	adds	r7, #1
 80052b8:	2c03      	cmp	r4, #3
 80052ba:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80052be:	d90d      	bls.n	80052dc <memset+0x7c>
 80052c0:	461e      	mov	r6, r3
 80052c2:	4622      	mov	r2, r4
 80052c4:	3a04      	subs	r2, #4
 80052c6:	2a03      	cmp	r2, #3
 80052c8:	f846 5b04 	str.w	r5, [r6], #4
 80052cc:	d8fa      	bhi.n	80052c4 <memset+0x64>
 80052ce:	1f22      	subs	r2, r4, #4
 80052d0:	f022 0203 	bic.w	r2, r2, #3
 80052d4:	3204      	adds	r2, #4
 80052d6:	4413      	add	r3, r2
 80052d8:	f004 0403 	and.w	r4, r4, #3
 80052dc:	b12c      	cbz	r4, 80052ea <memset+0x8a>
 80052de:	b2c9      	uxtb	r1, r1
 80052e0:	441c      	add	r4, r3
 80052e2:	f803 1b01 	strb.w	r1, [r3], #1
 80052e6:	42a3      	cmp	r3, r4
 80052e8:	d1fb      	bne.n	80052e2 <memset+0x82>
 80052ea:	bcf0      	pop	{r4, r5, r6, r7}
 80052ec:	4770      	bx	lr
 80052ee:	4614      	mov	r4, r2
 80052f0:	4603      	mov	r3, r0
 80052f2:	e7c6      	b.n	8005282 <memset+0x22>

Disassembly of section .rodata:

080052f4 <BUTTON_IRQn-0x18>:
 80052f4:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
 80052f8:	00000000 	andeq	r0, r0, r0
 80052fc:	51726d54 	cmnpl	r2, r4, asr sp
 8005300:	00000000 	andeq	r0, r0, r0
 8005304:	20726d54 	rsbscs	r6, r2, r4, asr sp
 8005308:	00637653 	rsbeq	r7, r3, r3, asr r6

0800530c <BUTTON_IRQn>:
 800530c:	00000006 	andeq	r0, r0, r6

08005310 <BUTTON_PIN>:
 8005310:	00000001 	andeq	r0, r0, r1

08005314 <GPIO_CLK>:
 8005314:	00000040 	andeq	r0, r0, r0, asr #32
 8005318:	00000040 	andeq	r0, r0, r0, asr #32

0800531c <GPIO_PIN>:
 800531c:	40002000 	andmi	r2, r0, r0

08005320 <BUTTON_CLK>:
 8005320:	00000001 	andeq	r0, r0, r1

08005324 <BUTTON_PORT_SOURCE>:
 8005324:	00000000 	andeq	r0, r0, r0

08005328 <BUTTON_PIN_SOURCE>:
 8005328:	00000000 	andeq	r0, r0, r0

0800532c <BUTTON_EXTI_LINE>:
 800532c:	00000001 	andeq	r0, r0, r1

Disassembly of section .data:

20000000 <AHBPrescTable>:
	...
20000008:	04030201 	streq	r0, [r3], #-513	; 0x201
2000000c:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20000010 <SystemCoreClock>:
20000010:	08f0d180 	ldmeq	r0!, {r7, r8, ip, lr, pc}^

20000014 <xNextTaskUnblockTime>:
20000014:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000018 <uxCriticalNesting>:
20000018:	aaaaaaaa 	bge	1eaaaac8 <_eccmram+0xeaaaac8>

2000001c <APBAHBPrescTable>:
2000001c:	00000000 	andeq	r0, r0, r0
20000020:	04030201 	streq	r0, [r3], #-513	; 0x201
20000024:	04030201 	streq	r0, [r3], #-513	; 0x201
20000028:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

2000002c <GPIO_PORT>:
2000002c:	40021800 	andmi	r1, r2, r0, lsl #16
20000030:	40021800 	andmi	r1, r2, r0, lsl #16

20000034 <BUTTON_PORT>:
20000034:	40020000 	andmi	r0, r2, r0

Disassembly of section .bss:

20000038 <__bss_start__>:
	...

2000004c <xPassedTicks>:
2000004c:	00000000 	andeq	r0, r0, r0

20000050 <xPendingReadyCoRoutineList>:
	...

20000064 <pxCurrentCoRoutine>:
20000064:	00000000 	andeq	r0, r0, r0

20000068 <xDelayedCoRoutineList2>:
	...

2000007c <xCoRoutineTickCount>:
2000007c:	00000000 	andeq	r0, r0, r0

20000080 <xLastTickCount>:
20000080:	00000000 	andeq	r0, r0, r0

20000084 <pxDelayedCoRoutineList>:
20000084:	00000000 	andeq	r0, r0, r0

20000088 <pxReadyCoRoutineLists>:
	...

200000b0 <uxTopCoRoutineReadyPriority>:
200000b0:	00000000 	andeq	r0, r0, r0

200000b4 <pxOverflowDelayedCoRoutineList>:
200000b4:	00000000 	andeq	r0, r0, r0

200000b8 <xQueueRegistry>:
	...

200000f8 <pxDelayedTaskList>:
200000f8:	00000000 	andeq	r0, r0, r0

200000fc <xSchedulerRunning>:
200000fc:	00000000 	andeq	r0, r0, r0

20000100 <uxTasksDeleted>:
20000100:	00000000 	andeq	r0, r0, r0

20000104 <xTasksWaitingTermination>:
	...

20000118 <pxReadyTasksLists>:
	...

2000017c <uxSchedulerSuspended>:
2000017c:	00000000 	andeq	r0, r0, r0

20000180 <uxCurrentNumberOfTasks>:
20000180:	00000000 	andeq	r0, r0, r0

20000184 <pxCurrentTCB>:
20000184:	00000000 	andeq	r0, r0, r0

20000188 <xPendingReadyList>:
	...

2000019c <xNumOfOverflows>:
2000019c:	00000000 	andeq	r0, r0, r0

200001a0 <xTickCount>:
200001a0:	00000000 	andeq	r0, r0, r0

200001a4 <pxOverflowDelayedTaskList>:
200001a4:	00000000 	andeq	r0, r0, r0

200001a8 <uxTaskNumber>:
200001a8:	00000000 	andeq	r0, r0, r0

200001ac <xDelayedTaskList1>:
	...

200001c0 <xDelayedTaskList2>:
	...

200001d4 <uxPendedTicks>:
200001d4:	00000000 	andeq	r0, r0, r0

200001d8 <xSuspendedTaskList>:
	...

200001ec <uxTopReadyPriority>:
200001ec:	00000000 	andeq	r0, r0, r0

200001f0 <xYieldPending>:
200001f0:	00000000 	andeq	r0, r0, r0

200001f4 <pxCurrentTimerList>:
200001f4:	00000000 	andeq	r0, r0, r0

200001f8 <xActiveTimerList1>:
	...

2000020c <xActiveTimerList2>:
	...

20000220 <xLastTime.4803>:
20000220:	00000000 	andeq	r0, r0, r0

20000224 <xTimerQueue>:
20000224:	00000000 	andeq	r0, r0, r0

20000228 <pxOverflowTimerList>:
20000228:	00000000 	andeq	r0, r0, r0

2000022c <ucMaxSysCallPriority>:
2000022c:	00000000 	andeq	r0, r0, r0

20000230 <ulMaxPRIGROUPValue>:
20000230:	00000000 	andeq	r0, r0, r0

20000234 <xNextFreeByte>:
20000234:	00000000 	andeq	r0, r0, r0

20000238 <ucHeap>:
	...

20012e38 <pucAlignedHeap.4560>:
20012e38:	00000000 	andeq	r0, r0, r0

20012e3c <NVIC_InitStructure>:
20012e3c:	00000000 	andeq	r0, r0, r0

20012e40 <sEEDMA_InitStructure>:
	...

Disassembly of section ._user_heap_stack:

20012e7c <._user_heap_stack>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002d41 	andeq	r2, r0, r1, asr #26
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000023 	andeq	r0, r0, r3, lsr #32
  10:	2d453705 	stclcs	7, cr3, [r5, #-20]	; 0xffffffec
  14:	0d06004d 	stceq	0, cr0, [r6, #-308]	; 0xfffffecc
  18:	02094d07 	andeq	r4, r9, #448	; 0x1c0
  1c:	0412060a 	ldreq	r0, [r2], #-1546	; 0x60a
  20:	01150114 	tsteq	r5, r4, lsl r1
  24:	01180317 	tsteq	r8, r7, lsl r3
  28:	031b011a 	tsteq	fp, #-2147483642	; 0x80000006
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000000c4 	andeq	r0, r0, r4, asr #1
       4:	00830002 	addeq	r0, r3, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
      20:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
      24:	442f616c 	strtmi	r6, [pc], #-364	; 2c <_Min_Heap_Size+0x2c>
      28:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
      2c:	662f706f 	strtvs	r7, [pc], -pc, rrx
      30:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
      34:	6f72705f 	svcvs	0x0072705f
      38:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
      3c:	3130325f 	teqcc	r0, pc, asr r2
      40:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
      44:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
      48:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
      4c:	6f426f74 	svcvs	0x00426f74
      50:	432f7461 	teqmi	pc, #1627389952	; 0x61000000
      54:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
      58:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
      5c:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
      60:	5f32334d 	svcpl	0x0032334d
      64:	43534944 	cmpmi	r3, #68, 18	; 0x110000
      68:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
      6c:	73000059 	movwvc	r0, #89	; 0x59
      70:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
      74:	735f7075 	cmpvc	pc, #117	; 0x75
      78:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      7c:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
      80:	3933345f 	ldmdbcc	r3!, {r0, r1, r2, r3, r4, r6, sl, ip, sp}
      84:	532e7878 	teqpl	lr, #120, 16	; 0x780000
      88:	00000100 	andeq	r0, r0, r0, lsl #2
      8c:	02050000 	andeq	r0, r5, #0
      90:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
      94:	0100ca03 	tsteq	r0, r3, lsl #20
      98:	21212321 	teqcs	r1, r1, lsr #6
      9c:	21212321 	teqcs	r1, r1, lsr #6
      a0:	21212121 	teqcs	r1, r1, lsr #2
      a4:	21312123 	teqcs	r1, r3, lsr #2
      a8:	2f302321 	svccs	0x00302321
      ac:	34206503 	strtcc	r6, [r0], #-1283	; 0x503
      b0:	0236322f 	eorseq	r3, r6, #-268435454	; 0xf0000002
      b4:	01010002 	tsteq	r1, r2
      b8:	38020500 	stmdacc	r2, {r8, sl}
      bc:	03080003 	movweq	r0, #32771	; 0x8003
      c0:	020100f6 	andeq	r0, r1, #246	; 0xf6
      c4:	01010001 	tsteq	r1, r1
      c8:	00000390 	muleq	r0, r0, r3
      cc:	031f0002 	tsteq	pc, #2
      d0:	01020000 	mrseq	r0, (UNDEF: 2)
      d4:	000d0efb 	strdeq	r0, [sp], -fp
      d8:	01010101 	tsteq	r1, r1, lsl #2
      dc:	01000000 	mrseq	r0, (UNDEF: 0)
      e0:	2f010000 	svccs	0x00010000
      e4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
      e8:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
      ec:	442f616c 	strtmi	r6, [pc], #-364	; f4 <_Min_Heap_Size+0xf4>
      f0:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
      f4:	662f706f 	strtvs	r7, [pc], -pc, rrx
      f8:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
      fc:	6f72705f 	svcvs	0x0072705f
     100:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
     104:	3130325f 	teqcc	r0, pc, asr r2
     108:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
     10c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     110:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
     114:	6f426f74 	svcvs	0x00426f74
     118:	432f7461 	teqmi	pc, #1627389952	; 0x61000000
     11c:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
     120:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
     124:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
     128:	5f32334d 	svcpl	0x0032334d
     12c:	43534944 	cmpmi	r3, #68, 18	; 0x110000
     130:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
     134:	752f0059 	strvc	r0, [pc, #-89]!	; e3 <_Min_Heap_Size+0xe3>
     138:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     13c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     140:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     144:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     148:	616d2f62 	cmnvs	sp, r2, ror #30
     14c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     150:	752f0065 	strvc	r0, [pc, #-101]!	; f3 <_Min_Heap_Size+0xf3>
     154:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     158:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     15c:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     160:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     164:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
     168:	2f656d6f 	svccs	0x00656d6f
     16c:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
     170:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
     174:	6f746b73 	svcvs	0x00746b73
     178:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
     17c:	5f6c616e 	svcpl	0x006c616e
     180:	6a6f7270 	bvs	1bdcb48 <_Min_Stack_Size+0x1bdc748>
     184:	5f746365 	svcpl	0x00746365
     188:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
     18c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     190:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     194:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
     198:	616f426f 	cmnvs	pc, pc, ror #4
     19c:	4f432f74 	svcmi	0x00432f74
     1a0:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     1a4:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     1a8:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     1ac:	445f3233 	ldrbmi	r3, [pc], #-563	; 1b4 <_Min_Heap_Size+0x1b4>
     1b0:	4f435349 	svcmi	0x00435349
     1b4:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
     1b8:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     1bc:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     1c0:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
     1c4:	5349534d 	movtpl	r5, #37709	; 0x934d
     1c8:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
     1cc:	2f656369 	svccs	0x00656369
     1d0:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
     1d4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     1d8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     1dc:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     1e0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     1e4:	6f682f00 	svcvs	0x00682f00
     1e8:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 3c <_Min_Heap_Size+0x3c>
     1ec:	616c6965 	cmnvs	ip, r5, ror #18
     1f0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     1f4:	706f746b 	rsbvc	r7, pc, fp, ror #8
     1f8:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
     1fc:	705f6c61 	subsvc	r6, pc, r1, ror #24
     200:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
     204:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
     208:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
     20c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
     210:	2f646564 	svccs	0x00646564
     214:	6f747561 	svcvs	0x00747561
     218:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
     21c:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     220:	5f584554 	svcpl	0x00584554
     224:	5f46344d 	svcpl	0x0046344d
     228:	334d5453 	movtcc	r5, #54355	; 0xd453
     22c:	49445f32 	stmdbmi	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     230:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
     234:	2f595245 	svccs	0x00595245
     238:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     23c:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     240:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     244:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     248:	5f787834 	svcpl	0x00787834
     24c:	50647453 	rsbpl	r7, r4, r3, asr r4
     250:	70697265 	rsbvc	r7, r9, r5, ror #4
     254:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     258:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     25c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     260:	6f682f00 	svcvs	0x00682f00
     264:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; b8 <_Min_Heap_Size+0xb8>
     268:	616c6965 	cmnvs	ip, r5, ror #18
     26c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     270:	706f746b 	rsbvc	r7, pc, fp, ror #8
     274:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
     278:	705f6c61 	subsvc	r6, pc, r1, ror #24
     27c:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
     280:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
     284:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
     288:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
     28c:	2f646564 	svccs	0x00646564
     290:	6f747561 	svcvs	0x00747561
     294:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
     298:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     29c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     2a0:	6f682f00 	svcvs	0x00682f00
     2a4:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; f8 <_Min_Heap_Size+0xf8>
     2a8:	616c6965 	cmnvs	ip, r5, ror #18
     2ac:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     2b0:	706f746b 	rsbvc	r7, pc, fp, ror #8
     2b4:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
     2b8:	705f6c61 	subsvc	r6, pc, r1, ror #24
     2bc:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
     2c0:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
     2c4:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
     2c8:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
     2cc:	2f646564 	svccs	0x00646564
     2d0:	6f747561 	svcvs	0x00747561
     2d4:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
     2d8:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
     2dc:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     2e0:	43472f65 	movtmi	r2, #32613	; 0x7f65
     2e4:	52412f43 	subpl	r2, r1, #268	; 0x10c
     2e8:	4d435f4d 	stclmi	15, cr5, [r3, #-308]	; 0xfffffecc
     2ec:	2f004634 	svccs	0x00004634
     2f0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
     2f4:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
     2f8:	442f616c 	strtmi	r6, [pc], #-364	; 300 <_Min_Heap_Size+0x300>
     2fc:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     300:	662f706f 	strtvs	r7, [pc], -pc, rrx
     304:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
     308:	6f72705f 	svcvs	0x0072705f
     30c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
     310:	3130325f 	teqcc	r0, pc, asr r2
     314:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
     318:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     31c:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
     320:	6f426f74 	svcvs	0x00426f74
     324:	432f7461 	teqmi	pc, #1627389952	; 0x61000000
     328:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
     32c:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
     330:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
     334:	5f32334d 	svcpl	0x0032334d
     338:	43534944 	cmpmi	r3, #68, 18	; 0x110000
     33c:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
     340:	694c2f59 	stmdbvs	ip, {r0, r3, r4, r6, r8, r9, sl, fp, sp}^
     344:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
     348:	2f736569 	svccs	0x00736569
     34c:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     350:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
     354:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     358:	6d000065 	stcvs	0, cr0, [r0, #-404]	; 0xfffffe6c
     35c:	2e6e6961 	cdpcs	9, 6, cr6, cr14, cr1, {3}
     360:	00010063 	andeq	r0, r1, r3, rrx
     364:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
     368:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     36c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     370:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     374:	00020068 	andeq	r0, r2, r8, rrx
     378:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     37c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     380:	00030068 	andeq	r0, r3, r8, rrx
     384:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     388:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     38c:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     390:	00000400 	andeq	r0, r0, r0, lsl #8
     394:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     398:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     39c:	70675f78 	rsbvc	r5, r7, r8, ror pc
     3a0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     3a4:	00000500 	andeq	r0, r0, r0, lsl #10
     3a8:	6a6f7270 	bvs	1bdcd70 <_Min_Stack_Size+0x1bdc970>
     3ac:	73666564 	cmnvc	r6, #100, 10	; 0x19000000
     3b0:	0600682e 	streq	r6, [r0], -lr, lsr #16
     3b4:	6f700000 	svcvs	0x00700000
     3b8:	616d7472 	smcvs	55106	; 0xd742
     3bc:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     3c0:	00070068 	andeq	r0, r7, r8, rrx
     3c4:	73617400 	cmnvc	r1, #0, 8
     3c8:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     3cc:	73000006 	movwvc	r0, #6
     3d0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     3d4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     3d8:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
     3dc:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
     3e0:	6f630000 	svcvs	0x00630000
     3e4:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     3e8:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     3ec:	00000800 	andeq	r0, r0, r0, lsl #16
     3f0:	02050000 	andeq	r0, r5, #0
     3f4:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
     3f8:	0100d203 	tsteq	r0, r3, lsl #4
     3fc:	04020021 	streq	r0, [r2], #-33	; 0x21
     400:	02005b01 	andeq	r5, r0, #1024	; 0x400
     404:	00590104 	subseq	r0, r9, r4, lsl #2
     408:	5a010402 	bpl	41418 <_Min_Stack_Size+0x41018>
     40c:	01000802 	tsteq	r0, r2, lsl #16
     410:	02050001 	andeq	r0, r5, #1
     414:	0800036c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9}
     418:	14013a03 	strne	r3, [r1], #-2563	; 0xa03
     41c:	01000402 	tsteq	r0, r2, lsl #8
     420:	02050001 	andeq	r0, r5, #1
     424:	08000374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9}
     428:	0100c503 	tsteq	r0, r3, lsl #10
     42c:	1f1f3032 	svcne	0x001f3032
     430:	1d321c25 	ldcne	12, cr1, [r2, #-148]!	; 0xffffff6c
     434:	2f2f2f2f 	svccs	0x002f2f2f
     438:	01000502 	tsteq	r0, r2, lsl #10
     43c:	02050001 	andeq	r0, r5, #1
     440:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
     444:	03012b03 	movweq	r2, #6915	; 0x1b03
     448:	6f032011 	svcvs	0x00032011
     44c:	20110320 	andscs	r0, r1, r0, lsr #6
     450:	1f3c7403 	svcne	0x003c7403
     454:	022fad2f 	eoreq	sl, pc, #3008	; 0xbc0
     458:	01010008 	tsteq	r1, r8
     45c:	0000025e 	andeq	r0, r0, lr, asr r2
     460:	01db0002 	bicseq	r0, fp, r2
     464:	01020000 	mrseq	r0, (UNDEF: 2)
     468:	000d0efb 	strdeq	r0, [sp], -fp
     46c:	01010101 	tsteq	r1, r1, lsl #2
     470:	01000000 	mrseq	r0, (UNDEF: 0)
     474:	2f010000 	svccs	0x00010000
     478:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
     47c:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
     480:	442f616c 	strtmi	r6, [pc], #-364	; 488 <_Min_Stack_Size+0x88>
     484:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     488:	662f706f 	strtvs	r7, [pc], -pc, rrx
     48c:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
     490:	6f72705f 	svcvs	0x0072705f
     494:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
     498:	3130325f 	teqcc	r0, pc, asr r2
     49c:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
     4a0:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     4a4:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
     4a8:	6f426f74 	svcvs	0x00426f74
     4ac:	432f7461 	teqmi	pc, #1627389952	; 0x61000000
     4b0:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
     4b4:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
     4b8:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
     4bc:	5f32334d 	svcpl	0x0032334d
     4c0:	43534944 	cmpmi	r3, #68, 18	; 0x110000
     4c4:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
     4c8:	74732f59 	ldrbtvc	r2, [r3], #-3929	; 0xf59
     4cc:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0x261
     4d0:	752f0070 	strvc	r0, [pc, #-112]!	; 468 <_Min_Stack_Size+0x68>
     4d4:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     4d8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     4dc:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     4e0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     4e4:	616d2f62 	cmnvs	sp, r2, ror #30
     4e8:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     4ec:	752f0065 	strvc	r0, [pc, #-101]!	; 48f <_Min_Stack_Size+0x8f>
     4f0:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     4f4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     4f8:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     4fc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     500:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
     504:	2f656d6f 	svccs	0x00656d6f
     508:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
     50c:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
     510:	6f746b73 	svcvs	0x00746b73
     514:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
     518:	5f6c616e 	svcpl	0x006c616e
     51c:	6a6f7270 	bvs	1bdcee4 <_Min_Stack_Size+0x1bdcae4>
     520:	5f746365 	svcpl	0x00746365
     524:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
     528:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     52c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     530:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
     534:	616f426f 	cmnvs	pc, pc, ror #4
     538:	4f432f74 	svcmi	0x00432f74
     53c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     540:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     544:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     548:	445f3233 	ldrbmi	r3, [pc], #-563	; 550 <_Min_Stack_Size+0x150>
     54c:	4f435349 	svcmi	0x00435349
     550:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
     554:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     558:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     55c:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
     560:	5349534d 	movtpl	r5, #37709	; 0x934d
     564:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     568:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     56c:	6f682f00 	svcvs	0x00682f00
     570:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 3c4 <_Min_Heap_Size+0x3c4>
     574:	616c6965 	cmnvs	ip, r5, ror #18
     578:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     57c:	706f746b 	rsbvc	r7, pc, fp, ror #8
     580:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
     584:	705f6c61 	subsvc	r6, pc, r1, ror #24
     588:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
     58c:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
     590:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
     594:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
     598:	2f646564 	svccs	0x00646564
     59c:	6f747561 	svcvs	0x00747561
     5a0:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
     5a4:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     5a8:	5f584554 	svcpl	0x00584554
     5ac:	5f46344d 	svcpl	0x0046344d
     5b0:	334d5453 	movtcc	r5, #54355	; 0xd453
     5b4:	49445f32 	stmdbmi	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     5b8:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
     5bc:	2f595245 	svccs	0x00595245
     5c0:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     5c4:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     5c8:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     5cc:	2f534953 	svccs	0x00534953
     5d0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     5d4:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
     5d8:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
     5dc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     5e0:	2f787834 	svccs	0x00787834
     5e4:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     5e8:	00656475 	rsbeq	r6, r5, r5, ror r4
     5ec:	73797300 	cmnvc	r9, #0, 6
     5f0:	5f6d6574 	svcpl	0x006d6574
     5f4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     5f8:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     5fc:	00632e78 	rsbeq	r2, r3, r8, ror lr
     600:	5f000001 	svcpl	0x00000001
     604:	61666564 	cmnvs	r6, r4, ror #10
     608:	5f746c75 	svcpl	0x00746c75
     60c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     610:	00682e73 	rsbeq	r2, r8, r3, ror lr
     614:	73000002 	movwvc	r0, #2
     618:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     61c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     620:	63000003 	movwvs	r0, #3
     624:	5f65726f 	svcpl	0x0065726f
     628:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     62c:	00040068 	andeq	r0, r4, r8, rrx
     630:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     634:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     638:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     63c:	00000500 	andeq	r0, r0, r0, lsl #10
     640:	02050000 	andeq	r0, r5, #0
     644:	080003e0 	stmdaeq	r0, {r5, r6, r7, r8, r9}
     648:	0101d003 	tsteq	r1, r3
     64c:	031c2415 	tsteq	ip, #352321536	; 0x15000000
     650:	73032e0d 	movwvc	r2, #15885	; 0x3e0d
     654:	1d234e20 	stcne	14, cr4, [r3, #-128]!	; 0xffffff80
     658:	2369233f 	cmncs	r9, #-67108864	; 0xfc000000
     65c:	03206d03 	teqeq	r0, #3, 26	; 0xc0
     660:	033f2013 	teqeq	pc, #19
     664:	312000f3 	strdcc	r0, [r0, -r3]!
     668:	4b48304f 	blmi	120c7ac <_Min_Stack_Size+0x120c3ac>
     66c:	324c3e3d 	subcc	r3, ip, #976	; 0x3d0
     670:	7f860323 	svcvc	0x00860323
     674:	fb034c3c 	blx	d376e <_Min_Stack_Size+0xd336e>
     678:	1f212e00 	svcne	0x00212e00
     67c:	03200d03 	teqeq	r0, #3, 26	; 0xc0
     680:	4d3d2073 	ldcmi	0, cr2, [sp, #-460]!	; 0xfffffe34
     684:	244d4d31 	strbcs	r4, [sp], #-3377	; 0xd31
     688:	4b4d5d4d 	blmi	1357bc4 <_Min_Stack_Size+0x13577c4>
     68c:	0013024d 	andseq	r0, r3, sp, asr #4
     690:	05000101 	streq	r0, [r0, #-257]	; 0x101
     694:	0004e002 	andeq	lr, r4, r2
     698:	029d0308 	addseq	r0, sp, #8, 6	; 0x20000000
     69c:	034c1601 	movteq	r1, #50689	; 0xc601
     6a0:	1e3e5824 	cdpne	8, 3, cr5, cr14, cr4, {1}
     6a4:	3c67033e 	stclcc	3, cr0, [r7], #-248	; 0xffffff08
     6a8:	231d2521 	tstcs	sp, #138412032	; 0x8400000
     6ac:	20760333 	rsbscs	r0, r6, r3, lsr r3
     6b0:	692e0a03 	stmdbvs	lr!, {r0, r1, r9, fp}
     6b4:	6a032f67 	bvs	cc458 <_Min_Stack_Size+0xcc058>
     6b8:	000d0220 	andeq	r0, sp, r0, lsr #4
     6bc:	01b50101 			; <UNDEFINED> instruction: 0x01b50101
     6c0:	00020000 	andeq	r0, r2, r0
     6c4:	00000141 	andeq	r0, r0, r1, asr #2
     6c8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     6cc:	0101000d 	tsteq	r1, sp
     6d0:	00000101 	andeq	r0, r0, r1, lsl #2
     6d4:	00000100 	andeq	r0, r0, r0, lsl #2
     6d8:	6f682f01 	svcvs	0x00682f01
     6dc:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 530 <_Min_Stack_Size+0x130>
     6e0:	616c6965 	cmnvs	ip, r5, ror #18
     6e4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     6e8:	706f746b 	rsbvc	r7, pc, fp, ror #8
     6ec:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
     6f0:	705f6c61 	subsvc	r6, pc, r1, ror #24
     6f4:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
     6f8:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
     6fc:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
     700:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
     704:	2f646564 	svccs	0x00646564
     708:	6f747561 	svcvs	0x00747561
     70c:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
     710:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
     714:	5f584554 	svcpl	0x00584554
     718:	5f46344d 	svcpl	0x0046344d
     71c:	334d5453 	movtcc	r5, #54355	; 0xd453
     720:	49445f32 	stmdbmi	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     724:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
     728:	00595245 	subseq	r5, r9, r5, asr #4
     72c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     730:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     734:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     738:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
     73c:	2f62696c 	svccs	0x0062696c
     740:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     744:	00656e69 	rsbeq	r6, r5, r9, ror #28
     748:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     74c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     750:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     754:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
     758:	0062696c 	rsbeq	r6, r2, ip, ror #18
     75c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6a8 <_Min_Stack_Size+0x2a8>
     760:	656c2f65 	strbvs	r2, [ip, #-3941]!	; 0xf65
     764:	2f616c69 	svccs	0x00616c69
     768:	6b736544 	blvs	1cd9c80 <_Min_Stack_Size+0x1cd9880>
     76c:	2f706f74 	svccs	0x00706f74
     770:	616e6966 	cmnvs	lr, r6, ror #18
     774:	72705f6c 	rsbsvc	r5, r0, #108, 30	; 0x1b0
     778:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
     77c:	30325f74 	eorscc	r5, r2, r4, ror pc
     780:	6d653531 	cfstr64vs	mvdx3, [r5, #-196]!	; 0xffffff3c
     784:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
     788:	612f6465 	teqvs	pc, r5, ror #8
     78c:	426f7475 	rsbmi	r7, pc, #1962934272	; 0x75000000
     790:	2f74616f 	svccs	0x0074616f
     794:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     798:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 68c <_Min_Stack_Size+0x28c>
     79c:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     7a0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     7a4:	5349445f 	movtpl	r4, #37983	; 0x945f
     7a8:	45564f43 	ldrbmi	r4, [r6, #-3907]	; 0xf43
     7ac:	4c2f5952 	stcmi	9, cr5, [pc], #-328	; 66c <_Min_Stack_Size+0x26c>
     7b0:	61726269 	cmnvs	r2, r9, ror #4
     7b4:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     7b8:	534d432f 	movtpl	r4, #54063	; 0xd32f
     7bc:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     7c0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     7c4:	00006564 	andeq	r6, r0, r4, ror #10
     7c8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     7cc:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     7d0:	74695f78 	strbtvc	r5, [r9], #-3960	; 0xf78
     7d4:	0100632e 	tsteq	r0, lr, lsr #6
     7d8:	645f0000 	ldrbvs	r0, [pc], #-0	; 7e0 <_Min_Stack_Size+0x3e0>
     7dc:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
     7e0:	745f746c 	ldrbvc	r7, [pc], #-1132	; 7e8 <_Min_Stack_Size+0x3e8>
     7e4:	73657079 	cmnvc	r5, #121	; 0x79
     7e8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     7ec:	74730000 	ldrbtvc	r0, [r3], #-0
     7f0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
     7f4:	0300682e 	movweq	r6, #2094	; 0x82e
     7f8:	6f630000 	svcvs	0x00630000
     7fc:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     800:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     804:	00000400 	andeq	r0, r0, r0, lsl #8
     808:	02050000 	andeq	r0, r5, #0
     80c:	08000550 	stmdaeq	r0, {r4, r6, r8, sl}
     810:	02013603 	andeq	r3, r1, #3145728	; 0x300000
     814:	01010001 	tsteq	r1, r1
     818:	54020500 	strpl	r0, [r2], #-1280	; 0x500
     81c:	03080005 	movweq	r0, #32773	; 0x8005
     820:	0102013f 	tsteq	r2, pc, lsr r1
     824:	00010100 	andeq	r0, r1, r0, lsl #2
     828:	05580205 	ldrbeq	r0, [r8, #-517]	; 0x205
     82c:	cc030800 	stcgt	8, cr0, [r3], {-0}
     830:	01020100 	mrseq	r0, (UNDEF: 18)
     834:	00010100 	andeq	r0, r1, r0, lsl #2
     838:	055c0205 	ldrbeq	r0, [ip, #-517]	; 0x205
     83c:	d9030800 	stmdble	r3, {fp}
     840:	01020100 	mrseq	r0, (UNDEF: 18)
     844:	00010100 	andeq	r0, r1, r0, lsl #2
     848:	05600205 	strbeq	r0, [r0, #-517]!	; 0x205
     84c:	e6030800 	str	r0, [r3], -r0, lsl #16
     850:	01020100 	mrseq	r0, (UNDEF: 18)
     854:	00010100 	andeq	r0, r1, r0, lsl #2
     858:	05640205 	strbeq	r0, [r4, #-517]!	; 0x205
     85c:	fc030800 	stc2	8, cr0, [r3], {-0}
     860:	01020100 	mrseq	r0, (UNDEF: 18)
     864:	00010100 	andeq	r0, r1, r0, lsl #2
     868:	05680205 	strbeq	r0, [r8, #-517]!	; 0x205
     86c:	96030800 	strls	r0, [r3], -r0, lsl #16
     870:	01020101 	tsteq	r2, r1, lsl #2
     874:	b4010100 	strlt	r0, [r1], #-256	; 0x100
     878:	02000002 	andeq	r0, r0, #2
     87c:	0001a900 	andeq	sl, r1, r0, lsl #18
     880:	fb010200 	blx	4108a <_Min_Stack_Size+0x40c8a>
     884:	01000d0e 	tsteq	r0, lr, lsl #26
     888:	00010101 	andeq	r0, r1, r1, lsl #2
     88c:	00010000 	andeq	r0, r1, r0
     890:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     894:	2f656d6f 	svccs	0x00656d6f
     898:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
     89c:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
     8a0:	6f746b73 	svcvs	0x00746b73
     8a4:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
     8a8:	5f6c616e 	svcpl	0x006c616e
     8ac:	6a6f7270 	bvs	1bdd274 <_Min_Stack_Size+0x1bdce74>
     8b0:	5f746365 	svcpl	0x00746365
     8b4:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
     8b8:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     8bc:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     8c0:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
     8c4:	616f426f 	cmnvs	pc, pc, ror #4
     8c8:	752f0074 	strvc	r0, [pc, #-116]!	; 85c <_Min_Stack_Size+0x45c>
     8cc:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 708 <_Min_Stack_Size+0x308>
     8d0:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     8d4:	612f6363 	teqvs	pc, r3, ror #6
     8d8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     8dc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     8e0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     8e4:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     8e8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     8ec:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     8f0:	73752f00 	cmnvc	r5, #0, 30
     8f4:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     8f8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     8fc:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     900:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     904:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
     908:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
     90c:	73752f00 	cmnvc	r5, #0, 30
     910:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     914:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     918:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     91c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     920:	6f682f00 	svcvs	0x00682f00
     924:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 778 <_Min_Stack_Size+0x378>
     928:	616c6965 	cmnvs	ip, r5, ror #18
     92c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     930:	706f746b 	rsbvc	r7, pc, fp, ror #8
     934:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
     938:	705f6c61 	subsvc	r6, pc, r1, ror #24
     93c:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
     940:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
     944:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
     948:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
     94c:	2f646564 	svccs	0x00646564
     950:	6f747561 	svcvs	0x00747561
     954:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
     958:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
     95c:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     960:	43472f65 	movtmi	r2, #32613	; 0x7f65
     964:	52412f43 	subpl	r2, r1, #268	; 0x10c
     968:	4d435f4d 	stclmi	15, cr5, [r3, #-308]	; 0xfffffecc
     96c:	2f004634 	svccs	0x00004634
     970:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
     974:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
     978:	442f616c 	strtmi	r6, [pc], #-364	; 980 <_Min_Stack_Size+0x580>
     97c:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     980:	662f706f 	strtvs	r7, [pc], -pc, rrx
     984:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
     988:	6f72705f 	svcvs	0x0072705f
     98c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
     990:	3130325f 	teqcc	r0, pc, asr r2
     994:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
     998:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     99c:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
     9a0:	6f426f74 	svcvs	0x00426f74
     9a4:	692f7461 	stmdbvs	pc!, {r0, r5, r6, sl, ip, sp, lr}	; <UNPREDICTABLE>
     9a8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     9ac:	00006564 	andeq	r6, r0, r4, ror #10
     9b0:	756f7263 	strbvc	r7, [pc, #-611]!	; 755 <_Min_Stack_Size+0x355>
     9b4:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     9b8:	0100632e 	tsteq	r0, lr, lsr #6
     9bc:	74730000 	ldrbtvc	r0, [r3], #-0
     9c0:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     9c4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     9c8:	645f0000 	ldrbvs	r0, [pc], #-0	; 9d0 <_Min_Stack_Size+0x5d0>
     9cc:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
     9d0:	745f746c 	ldrbvc	r7, [pc], #-1132	; 9d8 <_Min_Stack_Size+0x5d8>
     9d4:	73657079 	cmnvc	r5, #121	; 0x79
     9d8:	0300682e 	movweq	r6, #2094	; 0x82e
     9dc:	74730000 	ldrbtvc	r0, [r3], #-0
     9e0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
     9e4:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     9e8:	6f700000 	svcvs	0x00700000
     9ec:	616d7472 	smcvs	55106	; 0xd742
     9f0:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     9f4:	00050068 	andeq	r0, r5, r8, rrx
     9f8:	73696c00 	cmnvc	r9, #0, 24
     9fc:	00682e74 	rsbeq	r2, r8, r4, ror lr
     a00:	63000006 	movwvs	r0, #6
     a04:	74756f72 	ldrbtvc	r6, [r5], #-3954	; 0xf72
     a08:	2e656e69 	cdpcs	14, 6, cr6, cr5, cr9, {3}
     a0c:	00060068 	andeq	r0, r6, r8, rrx
     a10:	726f7000 	rsbvc	r7, pc, #0
     a14:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     a18:	00682e65 	rsbeq	r2, r8, r5, ror #28
     a1c:	74000006 	strvc	r0, [r0], #-6
     a20:	2e6b7361 	cdpcs	3, 6, cr7, cr11, cr1, {3}
     a24:	00060068 	andeq	r0, r6, r8, rrx
     a28:	05000000 	streq	r0, [r0, #-0]
     a2c:	00056c02 	andeq	r6, r5, r2, lsl #24
     a30:	01890308 	orreq	r0, r9, r8, lsl #6
     a34:	1b252e01 	blne	94c240 <_Min_Stack_Size+0x94be40>
     a38:	03402f33 	movteq	r2, #3891	; 0xf33
     a3c:	591d3c10 	ldmdbpl	sp, {r4, sl, fp, ip, sp}
     a40:	3d312f21 	ldccc	15, cr2, [r1, #-132]!	; 0xffffff7c
     a44:	034a0d03 	movteq	r0, #44291	; 0xad03
     a48:	38284a78 	stmdacc	r8!, {r3, r4, r5, r6, r9, fp, lr}
     a4c:	271d4632 			; <UNDEFINED> instruction: 0x271d4632
     a50:	01a6033e 			; <UNDEFINED> instruction: 0x01a6033e
     a54:	b603233c 			; <UNDEFINED> instruction: 0xb603233c
     a58:	cb032e7e 	blgt	cc458 <_Min_Stack_Size+0xcc058>
     a5c:	5b1c2001 	blpl	708a68 <_Min_Stack_Size+0x708668>
     a60:	21403d3d 	cmpcs	r0, sp, lsr sp
     a64:	d4032f1f 	strle	r2, [r3], #-3871	; 0xf1f
     a68:	02322e7e 	eorseq	r2, r2, #2016	; 0x7e0
     a6c:	01010015 	tsteq	r1, r5, lsl r0
     a70:	38020500 	stmdacc	r2, {r8, sl}
     a74:	03080006 	movweq	r0, #32774	; 0x8006
     a78:	250101c2 	strcs	r0, [r1, #-450]	; 0x1c2
     a7c:	1b251b25 	blne	947718 <_Min_Stack_Size+0x947318>
     a80:	20760325 	rsbscs	r0, r6, r5, lsr #6
     a84:	33200a03 	teqcc	r0, #12288	; 0x3000
     a88:	3424221e 	strtcc	r2, [r4], #-542	; 0x21e
     a8c:	03207403 	teqeq	r0, #50331648	; 0x3000000
     a90:	244d200c 	strbcs	r2, [sp], #-12
     a94:	0b022c3e 	bleq	8bb94 <_Min_Stack_Size+0x8b794>
     a98:	00010100 	andeq	r0, r1, r0, lsl #2
     a9c:	06840205 	streq	r0, [r4], r5, lsl #4
     aa0:	b9030800 	stmdblt	r3, {fp}
     aa4:	b3030102 	movwlt	r0, #12546	; 0x3102
     aa8:	0d032e7f 	stceq	14, cr2, [r3, #-508]	; 0xfffffe04
     aac:	20730366 	rsbscs	r0, r3, r6, ror #6
     ab0:	4e3d3025 	cdpmi	0, 3, cr3, cr13, cr5, {1}
     ab4:	033d3e1e 	teqeq	sp, #480	; 0x1e0
     ab8:	1603c873 			; <UNDEFINED> instruction: 0x1603c873
     abc:	580d034a 	stmdapl	sp, {r1, r3, r6, r8, r9}
     ac0:	032e2103 	teqeq	lr, #-1073741824	; 0xc0000000
     ac4:	314b3c52 	cmpcc	fp, r2, asr ip
     ac8:	211f211f 	tstcs	pc, pc, lsl r1	; <UNPREDICTABLE>
     acc:	660c0323 	strvs	r0, [ip], -r3, lsr #6
     ad0:	22563e3e 	subscs	r3, r6, #992	; 0x3e0
     ad4:	0d03301e 	stceq	0, cr3, [r3, #-120]	; 0xffffff88
     ad8:	2e79034a 	cdpcs	3, 7, cr0, cr9, cr10, {2}
     adc:	2c303f35 	ldccs	15, cr3, [r0], #-212	; 0xffffff2c
     ae0:	033e3122 	teqeq	lr, #-2147483640	; 0x80000008
     ae4:	6e03d665 	cfmadd32vs	mvax3, mvfx13, mvfx3, mvfx5
     ae8:	2e3e0382 	cdpcs	3, 3, cr0, cr14, cr2, {4}
     aec:	03207303 	teqeq	r0, #201326592	; 0xc000000
     af0:	33682e0d 	cmncc	r8, #13, 28	; 0xd0
     af4:	5a207903 	bpl	81ef08 <_Min_Stack_Size+0x81eb08>
     af8:	20790333 	rsbscs	r0, r9, r3, lsr r3
     afc:	1f824f03 	svcne	0x00824f03
     b00:	0324212f 	teqeq	r4, #-1073741813	; 0xc000000b
     b04:	332f207a 	teqcc	pc, #122	; 0x7a
     b08:	582f0332 	stmdapl	pc!, {r1, r4, r5, r8, r9}	; <UNPREDICTABLE>
     b0c:	232be741 	teqcs	fp, #17039360	; 0x1040000
     b10:	023c7303 	eorseq	r7, ip, #201326592	; 0xc000000
     b14:	01010015 	tsteq	r1, r5, lsl r0
     b18:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
     b1c:	03080008 	movweq	r0, #32776	; 0x8008
     b20:	270102eb 	strcs	r0, [r1, -fp, ror #5]
     b24:	034c592f 	movteq	r5, #51503	; 0xc92f
     b28:	0a024a0a 	beq	93358 <_Min_Stack_Size+0x92f58>
     b2c:	bd010100 	stflts	f0, [r1, #-0]
     b30:	02000003 	andeq	r0, r0, #3
     b34:	0001b100 	andeq	fp, r1, r0, lsl #2
     b38:	fb010200 	blx	41342 <_Min_Stack_Size+0x40f42>
     b3c:	01000d0e 	tsteq	r0, lr, lsl #26
     b40:	00010101 	andeq	r0, r1, r1, lsl #2
     b44:	00010000 	andeq	r0, r1, r0
     b48:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     b4c:	2f656d6f 	svccs	0x00656d6f
     b50:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
     b54:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
     b58:	6f746b73 	svcvs	0x00746b73
     b5c:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
     b60:	5f6c616e 	svcpl	0x006c616e
     b64:	6a6f7270 	bvs	1bdd52c <_Min_Stack_Size+0x1bdd12c>
     b68:	5f746365 	svcpl	0x00746365
     b6c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
     b70:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     b74:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     b78:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
     b7c:	616f426f 	cmnvs	pc, pc, ror #4
     b80:	752f0074 	strvc	r0, [pc, #-116]!	; b14 <_Min_Stack_Size+0x714>
     b84:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 9c0 <_Min_Stack_Size+0x5c0>
     b88:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     b8c:	612f6363 	teqvs	pc, r3, ror #6
     b90:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     b94:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     b98:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     b9c:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
     ba0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     ba4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     ba8:	73752f00 	cmnvc	r5, #0, 30
     bac:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     bb0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     bb4:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     bb8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     bbc:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
     bc0:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
     bc4:	73752f00 	cmnvc	r5, #0, 30
     bc8:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     bcc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     bd0:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
     bd4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     bd8:	6f682f00 	svcvs	0x00682f00
     bdc:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; a30 <_Min_Stack_Size+0x630>
     be0:	616c6965 	cmnvs	ip, r5, ror #18
     be4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     be8:	706f746b 	rsbvc	r7, pc, fp, ror #8
     bec:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
     bf0:	705f6c61 	subsvc	r6, pc, r1, ror #24
     bf4:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
     bf8:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
     bfc:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
     c00:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
     c04:	2f646564 	svccs	0x00646564
     c08:	6f747561 	svcvs	0x00747561
     c0c:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
     c10:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
     c14:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     c18:	43472f65 	movtmi	r2, #32613	; 0x7f65
     c1c:	52412f43 	subpl	r2, r1, #268	; 0x10c
     c20:	4d435f4d 	stclmi	15, cr5, [r3, #-308]	; 0xfffffecc
     c24:	2f004634 	svccs	0x00004634
     c28:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
     c2c:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
     c30:	442f616c 	strtmi	r6, [pc], #-364	; c38 <_Min_Stack_Size+0x838>
     c34:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     c38:	662f706f 	strtvs	r7, [pc], -pc, rrx
     c3c:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
     c40:	6f72705f 	svcvs	0x0072705f
     c44:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
     c48:	3130325f 	teqcc	r0, pc, asr r2
     c4c:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
     c50:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     c54:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
     c58:	6f426f74 	svcvs	0x00426f74
     c5c:	692f7461 	stmdbvs	pc!, {r0, r5, r6, sl, ip, sp, lr}	; <UNPREDICTABLE>
     c60:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     c64:	00006564 	andeq	r6, r0, r4, ror #10
     c68:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     c6c:	72675f74 	rsbvc	r5, r7, #116, 30	; 0x1d0
     c70:	7370756f 	cmnvc	r0, #465567744	; 0x1bc00000
     c74:	0100632e 	tsteq	r0, lr, lsr #6
     c78:	74730000 	ldrbtvc	r0, [r3], #-0
     c7c:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     c80:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     c84:	645f0000 	ldrbvs	r0, [pc], #-0	; c8c <_Min_Stack_Size+0x88c>
     c88:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
     c8c:	745f746c 	ldrbvc	r7, [pc], #-1132	; c94 <_Min_Stack_Size+0x894>
     c90:	73657079 	cmnvc	r5, #121	; 0x79
     c94:	0300682e 	movweq	r6, #2094	; 0x82e
     c98:	74730000 	ldrbtvc	r0, [r3], #-0
     c9c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
     ca0:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     ca4:	6f700000 	svcvs	0x00700000
     ca8:	616d7472 	smcvs	55106	; 0xd742
     cac:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     cb0:	00050068 	andeq	r0, r5, r8, rrx
     cb4:	73696c00 	cmnvc	r9, #0, 24
     cb8:	00682e74 	rsbeq	r2, r8, r4, ror lr
     cbc:	65000006 	strvs	r0, [r0, #-6]
     cc0:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     cc4:	6f72675f 	svcvs	0x0072675f
     cc8:	2e737075 	mrccs	0, 3, r7, cr3, cr5, {3}
     ccc:	00060068 	andeq	r0, r6, r8, rrx
     cd0:	726f7000 	rsbvc	r7, pc, #0
     cd4:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     cd8:	00682e65 	rsbeq	r2, r8, r5, ror #28
     cdc:	74000006 	strvc	r0, [r0], #-6
     ce0:	2e6b7361 	cdpcs	3, 6, cr7, cr11, cr1, {3}
     ce4:	00060068 	andeq	r0, r6, r8, rrx
     ce8:	05000000 	streq	r0, [r0, #-0]
     cec:	00087002 	andeq	r7, r8, r2
     cf0:	01860308 	orreq	r0, r6, r8, lsl #6
     cf4:	303d2301 	eorscc	r2, sp, r1, lsl #6
     cf8:	2e09033d 	mcrcs	3, 0, r0, cr9, cr13, {1}
     cfc:	01000202 	tsteq	r0, r2, lsl #4
     d00:	02050001 	andeq	r0, r5, #1
     d04:	0800088c 	stmdaeq	r0, {r2, r3, r7, fp}
     d08:	01028b03 	tsteq	r2, r3, lsl #22
     d0c:	2e780336 	mrccs	3, 3, r0, cr8, cr6, {1}
     d10:	0200216e 	andeq	r2, r0, #-2147483621	; 0x8000001b
     d14:	20060104 	andcs	r0, r6, r4, lsl #2
     d18:	02003f06 	andeq	r3, r0, #6, 30
     d1c:	3c060204 	sfmcc	f0, 4, [r6], {4}
     d20:	03304006 	teqeq	r0, #6
     d24:	402002b2 	strhtmi	r0, [r0], -r2
     d28:	2e7dd703 	cdpcs	7, 7, cr13, cr13, cr3, {0}
     d2c:	04020022 	streq	r0, [r2], #-34	; 0x22
     d30:	4a670301 	bmi	19c193c <_Min_Stack_Size+0x19c153c>
     d34:	02c90340 	sbceq	r0, r9, #64, 6
     d38:	7dd3033c 	ldclvc	3, cr0, [r3, #240]	; 0xf0
     d3c:	3c2b034a 	stccc	3, cr0, [fp], #-296	; 0xfffffed8
     d40:	032e3903 	teqeq	lr, #49152	; 0xc000
     d44:	033c7fa8 	teqeq	ip, #168, 30	; 0x2a0
     d48:	0c039e09 	stceq	14, cr9, [r3], {9}
     d4c:	580a034a 	stmdapl	sl, {r1, r3, r6, r8, r9}
     d50:	0b032232 	bleq	c9620 <_Min_Stack_Size+0xc9220>
     d54:	2103302e 	tstcs	r3, lr, lsr #32
     d58:	3c61032e 	stclcc	3, cr0, [r1], #-184	; 0xffffff48
     d5c:	01d90331 	bicseq	r0, r9, r1, lsr r3
     d60:	a9034020 	stmdbge	r3, {r5, lr}
     d64:	00222e7e 	eoreq	r2, r2, lr, ror lr
     d68:	03020402 	movweq	r0, #9218	; 0x2402
     d6c:	d6033c0c 	strle	r3, [r3], -ip, lsl #24
     d70:	05023c01 	streq	r3, [r2, #-3073]	; 0xc01
     d74:	00010100 	andeq	r0, r1, r0, lsl #2
     d78:	095c0205 	ldmdbeq	ip, {r0, r2, r9}^
     d7c:	9b030800 	blls	c2d84 <_Min_Stack_Size+0xc2984>
     d80:	03180103 	tsteq	r8, #-1073741824	; 0xc0000000
     d84:	34202e7a 	strtcc	r2, [r0], #-3706	; 0xe7a
     d88:	01040200 	mrseq	r0, R12_usr
     d8c:	3e062006 	cdpcc	0, 0, cr2, cr6, cr6, {0}
     d90:	313e2334 	teqcc	lr, r4, lsr r3
     d94:	01000202 	tsteq	r0, r2, lsl #4
     d98:	02050001 	andeq	r0, r5, #1
     d9c:	08000984 	stmdaeq	r0, {r2, r7, r8, fp}
     da0:	0103b503 	tsteq	r3, r3, lsl #10
     da4:	2e790319 	mrccs	3, 3, r0, cr9, cr9, {0}
     da8:	02003520 	andeq	r3, r0, #32, 10	; 0x8000000
     dac:	20060104 	andcs	r0, r6, r4, lsl #2
     db0:	23343e06 	teqcs	r4, #6, 28	; 0x60
     db4:	0202313e 	andeq	r3, r2, #-2147483633	; 0x8000000f
     db8:	00010100 	andeq	r0, r1, r0, lsl #2
     dbc:	09ac0205 	stmibeq	ip!, {r0, r2, r9}
     dc0:	d0030800 	andle	r0, r3, r0, lsl #16
     dc4:	0a030103 	beq	c11d8 <_Min_Stack_Size+0xc0dd8>
     dc8:	2e760320 	cdpcs	3, 7, cr0, cr6, cr0, {1}
     dcc:	002e0a03 	eoreq	r0, lr, r3, lsl #20
     dd0:	06010402 	streq	r0, [r1], -r2, lsl #8
     dd4:	35400620 	strbcc	r0, [r0, #-1568]	; 0x620
     dd8:	7803231d 	stmdavc	r3, {r0, r2, r3, r4, r8, r9, sp}
     ddc:	2e0b0320 	cdpcs	3, 0, cr0, cr11, cr0, {1}
     de0:	0d03231d 	stceq	3, cr2, [r3, #-116]	; 0xffffff8c
     de4:	2e16032e 	cdpcs	3, 1, cr0, cr6, cr14, {1}
     de8:	200c0330 	andcs	r0, ip, r0, lsr r3
     dec:	01040200 	mrseq	r0, R12_usr
     df0:	06584f03 	ldrbeq	r4, [r8], -r3, lsl #30
     df4:	3622062e 	strtcc	r0, [r2], -lr, lsr #12
     df8:	0c03302c 	stceq	0, cr3, [r3], {44}	; 0x2c
     dfc:	4a6a0320 	bmi	1a81a84 <_Min_Stack_Size+0x1a81684>
     e00:	303c3c03 	eorscc	r3, ip, r3, lsl #24
     e04:	2e400330 	mcrcs	3, 2, r0, cr0, cr0, {1}
     e08:	01000302 	tsteq	r0, r2, lsl #6
     e0c:	02050001 	andeq	r0, r5, #1
     e10:	08000a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp}
     e14:	01019a03 	tsteq	r1, r3, lsl #20
     e18:	2e7a0318 	mrccs	3, 3, r0, cr10, cr8, {0}
     e1c:	00215020 	eoreq	r5, r1, r0, lsr #32
     e20:	06010402 	streq	r0, [r1], -r2, lsl #8
     e24:	003f0620 	eorseq	r0, pc, r0, lsr #12
     e28:	06020402 	streq	r0, [r2], -r2, lsl #8
     e2c:	3032063c 	eorscc	r0, r2, ip, lsr r6
     e30:	301e3022 	andscc	r3, lr, r2, lsr #32
     e34:	244a2003 	strbcs	r2, [sl], #-3
     e38:	002e3503 	eoreq	r3, lr, r3, lsl #10
     e3c:	03010402 	movweq	r0, #5122	; 0x1402
     e40:	442e7f99 	strtmi	r7, [lr], #-3993	; 0xf99
     e44:	1e302230 	mrcne	2, 1, r2, cr0, cr0, {1}
     e48:	4a0d0330 	bmi	341b10 <_Min_Stack_Size+0x341710>
     e4c:	66100335 			; <UNDEFINED> instruction: 0x66100335
     e50:	0b032232 	bleq	c9720 <_Min_Stack_Size+0xc9320>
     e54:	1c03302e 	stcne	0, cr3, [r3], {46}	; 0x2e
     e58:	7fb4032e 	svcvc	0x00b4032e
     e5c:	4a6f033c 	bmi	1bc1b54 <_Min_Stack_Size+0x1bc1754>
     e60:	3c00c403 	cfstrscc	mvf12, [r0], {3}
     e64:	513e2630 	teqpl	lr, r0, lsr r6
     e68:	01000302 	tsteq	r0, r2, lsl #6
     e6c:	02050001 	andeq	r0, r5, #1
     e70:	08000ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp}
     e74:	0104ad03 	tsteq	r4, r3, lsl #26
     e78:	32322420 	eorscc	r2, r2, #32, 8	; 0x20000000
     e7c:	3f444591 	svccc	0x00444591
     e80:	2e7a032d 	cdpcs	3, 7, cr0, cr10, cr13, {1}
     e84:	01000302 	tsteq	r0, r2, lsl #6
     e88:	02050001 	andeq	r0, r5, #1
     e8c:	08000b10 	stmdaeq	r0, {r4, r8, r9, fp}
     e90:	0104c603 	tsteq	r4, r3, lsl #12
     e94:	207f9403 	rsbscs	r9, pc, r3, lsl #8
     e98:	2e00ec03 	cdpcs	12, 0, cr14, cr0, cr3, {0}
     e9c:	2e7f9403 	cdpcs	4, 7, cr9, cr15, cr3, {0}
     ea0:	231d354e 	tstcs	sp, #327155712	; 0x13800000
     ea4:	03207803 	teqeq	r0, #196608	; 0x30000
     ea8:	231d2e0b 	tstcs	sp, #11, 28	; 0xb0
     eac:	032e0d03 	teqeq	lr, #3, 26	; 0xc0
     eb0:	03302e16 	teqeq	r0, #352	; 0x160
     eb4:	4f03200c 	svcmi	0x0003200c
     eb8:	2c363e58 	ldccs	14, cr3, [r6], #-352	; 0xfffffea0
     ebc:	200c0330 	andcs	r0, ip, r0, lsr r3
     ec0:	034a6a03 	movteq	r6, #43523	; 0xaa03
     ec4:	24033c3c 	strcs	r3, [r3], #-3132	; 0xc3c
     ec8:	2e5e032e 	cdpcs	3, 5, cr0, cr14, cr14, {1}
     ecc:	032e4203 	teqeq	lr, #805306368	; 0x30000000
     ed0:	24032e3c 	strcs	r2, [r3], #-3644	; 0xe3c
     ed4:	2e5e032e 	cdpcs	3, 5, cr0, cr14, cr14, {1}
     ed8:	01000202 	tsteq	r0, r2, lsl #4
     edc:	02050001 	andeq	r0, r5, #1
     ee0:	08000b8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, fp}
     ee4:	0104fd03 	tsteq	r4, r3, lsl #26
     ee8:	02242616 	eoreq	r2, r4, #23068672	; 0x1600000
     eec:	01010001 	tsteq	r1, r1
     ef0:	000001f3 	strdeq	r0, [r0], -r3
     ef4:	014c0002 	cmpeq	ip, r2
     ef8:	01020000 	mrseq	r0, (UNDEF: 2)
     efc:	000d0efb 	strdeq	r0, [sp], -fp
     f00:	01010101 	tsteq	r1, r1, lsl #2
     f04:	01000000 	mrseq	r0, (UNDEF: 0)
     f08:	2f010000 	svccs	0x00010000
     f0c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
     f10:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
     f14:	442f616c 	strtmi	r6, [pc], #-364	; f1c <_Min_Stack_Size+0xb1c>
     f18:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     f1c:	662f706f 	strtvs	r7, [pc], -pc, rrx
     f20:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
     f24:	6f72705f 	svcvs	0x0072705f
     f28:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
     f2c:	3130325f 	teqcc	r0, pc, asr r2
     f30:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
     f34:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     f38:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
     f3c:	6f426f74 	svcvs	0x00426f74
     f40:	2f007461 	svccs	0x00007461
     f44:	2f727375 	svccs	0x00727375
     f48:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     f4c:	2f656475 	svccs	0x00656475
     f50:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     f54:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; db8 <_Min_Stack_Size+0x9b8>
     f58:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     f5c:	2f00656e 	svccs	0x0000656e
     f60:	2f727375 	svccs	0x00727375
     f64:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     f68:	2f656475 	svccs	0x00656475
     f6c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
     f70:	2f006269 	svccs	0x00006269
     f74:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
     f78:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
     f7c:	442f616c 	strtmi	r6, [pc], #-364	; f84 <_Min_Stack_Size+0xb84>
     f80:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     f84:	662f706f 	strtvs	r7, [pc], -pc, rrx
     f88:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
     f8c:	6f72705f 	svcvs	0x0072705f
     f90:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
     f94:	3130325f 	teqcc	r0, pc, asr r2
     f98:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
     f9c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     fa0:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
     fa4:	6f426f74 	svcvs	0x00426f74
     fa8:	702f7461 	eorvc	r7, pc, r1, ror #8
     fac:	6174726f 	cmnvs	r4, pc, ror #4
     fb0:	2f656c62 	svccs	0x00656c62
     fb4:	2f434347 	svccs	0x00434347
     fb8:	5f4d5241 	svcpl	0x004d5241
     fbc:	46344d43 	ldrtmi	r4, [r4], -r3, asr #26
     fc0:	6f682f00 	svcvs	0x00682f00
     fc4:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; e18 <_Min_Stack_Size+0xa18>
     fc8:	616c6965 	cmnvs	ip, r5, ror #18
     fcc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     fd0:	706f746b 	rsbvc	r7, pc, fp, ror #8
     fd4:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
     fd8:	705f6c61 	subsvc	r6, pc, r1, ror #24
     fdc:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
     fe0:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
     fe4:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
     fe8:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
     fec:	2f646564 	svccs	0x00646564
     ff0:	6f747561 	svcvs	0x00747561
     ff4:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
     ff8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     ffc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1000:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    1004:	632e7473 	teqvs	lr, #1929379840	; 0x73000000
    1008:	00000100 	andeq	r0, r0, r0, lsl #2
    100c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    1010:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    1014:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1018:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    101c:	00000200 	andeq	r0, r0, r0, lsl #4
    1020:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1024:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1028:	00000300 	andeq	r0, r0, r0, lsl #6
    102c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
    1030:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
    1034:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    1038:	6c000004 	stcvs	0, cr0, [r0], {4}
    103c:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
    1040:	00050068 	andeq	r0, r5, r8, rrx
    1044:	05000000 	streq	r0, [r0, #-0]
    1048:	000b9402 	andeq	r9, fp, r2, lsl #8
    104c:	00cb0308 	sbceq	r0, fp, r8, lsl #6
    1050:	35321601 	ldrcc	r1, [r2, #-1537]!	; 0x601
    1054:	1c207903 	stcne	9, cr7, [r0], #-12
    1058:	02022136 	andeq	r2, r2, #-2147483635	; 0x8000000d
    105c:	00010100 	andeq	r0, r1, r0, lsl #2
    1060:	0bac0205 	bleq	feb0187c <_estack+0xdead187c>
    1064:	df030800 	svcle	0x00030800
    1068:	02140100 	andseq	r0, r4, #0, 2
    106c:	01010003 	tsteq	r1, r3
    1070:	b4020500 	strlt	r0, [r2], #-1280	; 0x500
    1074:	0308000b 	movweq	r0, #32779	; 0x800b
    1078:	130100e6 	movwne	r0, #4326	; 0x10e6
    107c:	0327271f 	teqeq	r7, #8126464	; 0x7c0000
    1080:	1e212079 	mcrne	0, 1, r2, cr1, cr9, {3}
    1084:	207a0328 	rsbscs	r0, sl, r8, lsr #6
    1088:	221d2621 	andscs	r2, sp, #34603008	; 0x2100000
    108c:	00010221 	andeq	r0, r1, r1, lsr #4
    1090:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1094:	000bd002 	andeq	sp, fp, r2
    1098:	00f90308 	rscseq	r0, r9, r8, lsl #6
    109c:	0b032201 	bleq	c98a8 <_Min_Stack_Size+0xc94a8>
    10a0:	2e180320 	cdpcs	3, 1, cr0, cr8, cr0, {1}
    10a4:	01040200 	mrseq	r0, R12_usr
    10a8:	03064a06 	movweq	r4, #27142	; 0x6a06
    10ac:	77034a10 	smladvc	r3, r0, sl, r4
    10b0:	20090320 	andcs	r0, r9, r0, lsr #6
    10b4:	21207803 	teqcs	r0, r3, lsl #16
    10b8:	21222421 	teqcs	r2, r1, lsr #8
    10bc:	022e5903 	eoreq	r5, lr, #49152	; 0xc000
    10c0:	01010003 	tsteq	r1, r3
    10c4:	04020500 	streq	r0, [r2], #-1280	; 0x500
    10c8:	0308000c 	movweq	r0, #32780	; 0x800c
    10cc:	170101b3 			; <UNDEFINED> instruction: 0x170101b3
    10d0:	21251d2c 	teqcs	r5, ip, lsr #26
    10d4:	0d031d23 	stceq	13, cr1, [r3, #-140]	; 0xffffff74
    10d8:	20760320 	rsbscs	r0, r6, r0, lsr #6
    10dc:	321f3622 	andscc	r3, pc, #35651584	; 0x2200000
    10e0:	0202232b 	andeq	r2, r2, #-1409286144	; 0xac000000
    10e4:	13010100 	movwne	r0, #4352	; 0x1100
    10e8:	02000008 	andeq	r0, r0, #8
    10ec:	0001a300 	andeq	sl, r1, r0, lsl #6
    10f0:	fb010200 	blx	418fa <_Min_Stack_Size+0x414fa>
    10f4:	01000d0e 	tsteq	r0, lr, lsl #26
    10f8:	00010101 	andeq	r0, r1, r1, lsl #2
    10fc:	00010000 	andeq	r0, r1, r0
    1100:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    1104:	2f656d6f 	svccs	0x00656d6f
    1108:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
    110c:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
    1110:	6f746b73 	svcvs	0x00746b73
    1114:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    1118:	5f6c616e 	svcpl	0x006c616e
    111c:	6a6f7270 	bvs	1bddae4 <_Min_Stack_Size+0x1bdd6e4>
    1120:	5f746365 	svcpl	0x00746365
    1124:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
    1128:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    112c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    1130:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
    1134:	616f426f 	cmnvs	pc, pc, ror #4
    1138:	752f0074 	strvc	r0, [pc, #-116]!	; 10cc <_Min_Stack_Size+0xccc>
    113c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; f78 <_Min_Stack_Size+0xb78>
    1140:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    1144:	612f6363 	teqvs	pc, r3, ror #6
    1148:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    114c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1150:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1154:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
    1158:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    115c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1160:	73752f00 	cmnvc	r5, #0, 30
    1164:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1168:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    116c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    1170:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1174:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    1178:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    117c:	73752f00 	cmnvc	r5, #0, 30
    1180:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1184:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1188:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    118c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1190:	6f682f00 	svcvs	0x00682f00
    1194:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; fe8 <_Min_Stack_Size+0xbe8>
    1198:	616c6965 	cmnvs	ip, r5, ror #18
    119c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    11a0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    11a4:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
    11a8:	705f6c61 	subsvc	r6, pc, r1, ror #24
    11ac:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    11b0:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
    11b4:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
    11b8:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    11bc:	2f646564 	svccs	0x00646564
    11c0:	6f747561 	svcvs	0x00747561
    11c4:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
    11c8:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
    11cc:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    11d0:	43472f65 	movtmi	r2, #32613	; 0x7f65
    11d4:	52412f43 	subpl	r2, r1, #268	; 0x10c
    11d8:	4d435f4d 	stclmi	15, cr5, [r3, #-308]	; 0xfffffecc
    11dc:	2f004634 	svccs	0x00004634
    11e0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
    11e4:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
    11e8:	442f616c 	strtmi	r6, [pc], #-364	; 11f0 <_Min_Stack_Size+0xdf0>
    11ec:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    11f0:	662f706f 	strtvs	r7, [pc], -pc, rrx
    11f4:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
    11f8:	6f72705f 	svcvs	0x0072705f
    11fc:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    1200:	3130325f 	teqcc	r0, pc, asr r2
    1204:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
    1208:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    120c:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
    1210:	6f426f74 	svcvs	0x00426f74
    1214:	692f7461 	stmdbvs	pc!, {r0, r5, r6, sl, ip, sp, lr}	; <UNPREDICTABLE>
    1218:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    121c:	00006564 	andeq	r6, r0, r4, ror #10
    1220:	75657571 	strbvc	r7, [r5, #-1393]!	; 0x571
    1224:	00632e65 	rsbeq	r2, r3, r5, ror #28
    1228:	73000001 	movwvc	r0, #1
    122c:	65646474 	strbvs	r6, [r4, #-1140]!	; 0x474
    1230:	00682e66 	rsbeq	r2, r8, r6, ror #28
    1234:	5f000002 	svcpl	0x00000002
    1238:	61666564 	cmnvs	r6, r4, ror #10
    123c:	5f746c75 	svcpl	0x00746c75
    1240:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    1244:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1248:	73000003 	movwvc	r0, #3
    124c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1250:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1254:	70000004 	andvc	r0, r0, r4
    1258:	6d74726f 	lfmvs	f7, 2, [r4, #-444]!	; 0xfffffe44
    125c:	6f726361 	svcvs	0x00726361
    1260:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    1264:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    1268:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    126c:	00000600 	andeq	r0, r0, r0, lsl #12
    1270:	6b736174 	blvs	1cd9848 <_Min_Stack_Size+0x1cd9448>
    1274:	0600682e 	streq	r6, [r0], -lr, lsr #16
    1278:	75710000 	ldrbvc	r0, [r1, #-0]!
    127c:	2e657565 	cdpcs	5, 6, cr7, cr5, cr5, {3}
    1280:	00060068 	andeq	r0, r6, r8, rrx
    1284:	726f7000 	rsbvc	r7, pc, #0
    1288:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    128c:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1290:	00000006 	andeq	r0, r0, r6
    1294:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    1298:	0308000c 	movweq	r0, #32780	; 0x800c
    129c:	21010d80 	smlabbcs	r1, r0, sp, r0
    12a0:	2f22211f 	svccs	0x0022211f
    12a4:	231f211f 	tstcs	pc, #-1073741817	; 0xc0000007
    12a8:	7a032634 	bvc	cab80 <_Min_Stack_Size+0xca780>
    12ac:	02024220 	andeq	r4, r2, #32, 4
    12b0:	00010100 	andeq	r0, r1, r0, lsl #2
    12b4:	0c540205 	lfmeq	f0, 2, [r4], {5}
    12b8:	96030800 	strls	r0, [r3], -r0, lsl #16
    12bc:	2720010d 	strcs	r0, [r0, -sp, lsl #2]!
    12c0:	3c2f0331 	stccc	3, cr0, [pc], #-196	; 1204 <_Min_Stack_Size+0xe04>
    12c4:	03581403 	cmpeq	r8, #50331648	; 0x3000000
    12c8:	033c7fbd 	teqeq	ip, #756	; 0x2f4
    12cc:	5c303c2f 	ldcpl	12, cr3, [r0], #-188	; 0xffffff44
    12d0:	3e3c1103 	rsfcce	f1, f4, f3
    12d4:	033e3031 	teqeq	lr, #49	; 0x31
    12d8:	7303580b 	movwvc	r5, #14347	; 0x380b
    12dc:	5a303e3c 	bpl	c10bd4 <_Min_Stack_Size+0xc107d4>
    12e0:	3f3c0f03 	svccc	0x003c0f03
    12e4:	0002022d 	andeq	r0, r2, sp, lsr #4
    12e8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    12ec:	000cd802 	andeq	sp, ip, r2, lsl #16
    12f0:	01ff0308 	mvnseq	r0, r8, lsl #6
    12f4:	231d2301 	tstcs	sp, #67108864	; 0x4000000
    12f8:	1e3e3022 	cdpne	0, 3, cr3, cr14, cr2, {1}
    12fc:	241f2c31 	ldrcs	r2, [pc], #-3121	; 1304 <_Min_Stack_Size+0xf04>
    1300:	1c21222b 	sfmne	f2, 4, [r1], #-172	; 0xffffff54
    1304:	03272225 	teqeq	r7, #1342177282	; 0x50000002
    1308:	03332e17 	teqeq	r3, #368	; 0x170
    130c:	03682e66 	cmneq	r8, #1632	; 0x660
    1310:	03332e13 	teqeq	r3, #304	; 0x130
    1314:	4d4b2e77 	stclmi	14, cr2, [fp, #-476]	; 0xfffffe24
    1318:	04020033 	streq	r0, [r2], #-51	; 0x33
    131c:	2e520301 	cdpcs	3, 5, cr0, cr2, cr1, {0}
    1320:	01000302 	tsteq	r0, r2, lsl #6
    1324:	02050001 	andeq	r0, r5, #1
    1328:	08000d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp}
    132c:	0102b403 	tsteq	r2, r3, lsl #8
    1330:	03200a03 	teqeq	r0, #12288	; 0x3000
    1334:	0a032076 	beq	c9514 <_Min_Stack_Size+0xc9114>
    1338:	323d302e 	eorscc	r3, sp, #46	; 0x2e
    133c:	21244b30 	teqcs	r4, r0, lsr fp
    1340:	207fb703 	rsbscs	fp, pc, r3, lsl #14
    1344:	311e3e30 	tstcc	lr, r0, lsr lr
    1348:	241d221e 	ldrcs	r2, [sp], #-542	; 0x21e
    134c:	1f241f2b 	svcne	0x00241f2b
    1350:	201c0322 	andscs	r0, ip, r2, lsr #6
    1354:	27034d4b 	strcs	r4, [r3, -fp, asr #26]
    1358:	2e20032e 	cdpcs	3, 2, cr0, cr0, cr14, {1}
    135c:	032e7003 	teqeq	lr, #3
    1360:	03023c0d 	movweq	r3, #11277	; 0x2c0d
    1364:	00010100 	andeq	r0, r1, r0, lsl #2
    1368:	0dc40205 	sfmeq	f0, 2, [r4, #20]
    136c:	b6030800 	strlt	r0, [r3], -r0, lsl #16
    1370:	1d230104 	stfnes	f0, [r3, #-16]!
    1374:	02002f23 	andeq	r2, r0, #35, 30	; 0x8c
    1378:	2e060104 	adfcss	f0, f6, f4
    137c:	7e860306 	cdpvc	3, 8, cr0, cr6, cr6, {0}
    1380:	4b343d3c 	blmi	d10878 <_Min_Stack_Size+0xd10478>
    1384:	03211f25 	teqeq	r1, #37, 30	; 0x94
    1388:	30207fb7 	strhtcc	r7, [r0], -r7
    138c:	2b311e3e 	blcs	c48c8c <_Min_Stack_Size+0xc4888c>
    1390:	241f2b24 	ldrcs	r2, [pc], #-2852	; 1398 <_Min_Stack_Size+0xf98>
    1394:	1c03221f 	sfmne	f2, 4, [r3], {31}
    1398:	034d4b20 	movteq	r4, #56096	; 0xdb20
    139c:	ee032e27 	cdp	14, 0, cr2, cr3, cr7, {1}
    13a0:	0b033c01 	bleq	d03ac <_Min_Stack_Size+0xcffac>
    13a4:	04020020 	streq	r0, [r2], #-32
    13a8:	2e6e0301 	cdpcs	3, 6, cr0, cr14, cr1, {0}
    13ac:	3c7ea903 	ldclcc	9, cr10, [lr], #-12
    13b0:	023c0d03 	eorseq	r0, ip, #3, 26	; 0xc0
    13b4:	01010003 	tsteq	r1, r3
    13b8:	48020500 	stmdami	r2, {r8, sl}
    13bc:	0308000e 	movweq	r0, #32782	; 0x800e
    13c0:	410104d1 	ldrdmi	r0, [r1, -r1]
    13c4:	3d3d411b 	ldfccs	f4, [sp, #-108]!	; 0xffffff94
    13c8:	04020031 	streq	r0, [r2], #-49	; 0x31
    13cc:	063c0602 	ldrteq	r0, [ip], -r2, lsl #12
    13d0:	344a0a03 	strbcc	r0, [sl], #-2563	; 0xa03
    13d4:	032e6603 	teqeq	lr, #3145728	; 0x300000
    13d8:	ef032e1a 	svc	0x00032e1a
    13dc:	91032000 	mrsls	r2, (UNDEF: 3)
    13e0:	0200207f 	andeq	r2, r0, #127	; 0x7f
    13e4:	20060104 	andcs	r0, r6, r4, lsl #2
    13e8:	00d00306 	sbcseq	r0, r0, r6, lsl #6
    13ec:	660b033c 			; <UNDEFINED> instruction: 0x660b033c
    13f0:	334a0e03 	movtcc	r0, #44547	; 0xae03
    13f4:	d603bd2f 	strle	fp, [r3], -pc, lsr #26
    13f8:	03307408 	teqeq	r0, #8, 8	; 0x8000000
    13fc:	df034a09 	svcle	0x00034a09
    1400:	03312e7e 	teqeq	r1, #2016	; 0x7e0
    1404:	14033c2f 	strne	r3, [r3], #-3119	; 0xc2f
    1408:	7fbd0358 	svcvc	0x00bd0358
    140c:	3c2f033c 	stccc	3, cr0, [pc], #-240	; 1324 <_Min_Stack_Size+0xf24>
    1410:	02005c30 	andeq	r5, r0, #48, 24	; 0x3000
    1414:	83030204 	movwhi	r0, #12804	; 0x3204
    1418:	3c063c77 	stccc	12, cr3, [r6], {119}	; 0x77
    141c:	098e0306 	stmibeq	lr, {r1, r2, r8, r9}
    1420:	30313e3c 	eorscc	r3, r1, ip, lsr lr
    1424:	580b033e 	stmdapl	fp, {r1, r2, r3, r4, r5, r8, r9}
    1428:	3e3c7303 	cdpcc	3, 3, cr7, cr12, cr3, {0}
    142c:	0f035a30 	svceq	0x00035a30
    1430:	f5033e3c 			; <UNDEFINED> instruction: 0xf5033e3c
    1434:	ec032e77 	stc	14, cr2, [r3], {119}	; 0x77
    1438:	03342e7e 	teqeq	r4, #2016	; 0x7e0
    143c:	036607d0 	cmneq	r6, #208, 14	; 0x3400000
    1440:	4b3e3c11 	blmi	f9048c <_Min_Stack_Size+0xf9008c>
    1444:	1f211f2f 	svcne	0x00211f2f
    1448:	90032221 	andls	r2, r3, r1, lsr #4
    144c:	dc033c79 	stcle	12, cr3, [r3], {121}	; 0x79
    1450:	a4032e08 	strge	r2, [r3], #-3592	; 0xe08
    1454:	bb032e77 	bllt	cce38 <_Min_Stack_Size+0xcca38>
    1458:	03314a07 	teqeq	r1, #28672	; 0x7000
    145c:	14033c2f 	strne	r3, [r3], #-3119	; 0xc2f
    1460:	7fbd0358 	svcvc	0x00bd0358
    1464:	3c2f033c 	stccc	3, cr0, [pc], #-240	; 137c <_Min_Stack_Size+0xf7c>
    1468:	11035c30 	tstne	r3, r0, lsr ip
    146c:	30313e3c 	eorscc	r3, r1, ip, lsr lr
    1470:	3c0b033e 	stccc	3, cr0, [fp], {62}	; 0x3e
    1474:	3e3c7303 	cdpcc	3, 3, cr7, cr12, cr3, {0}
    1478:	0f035a30 	svceq	0x00035a30
    147c:	ec033e3c 	stc	14, cr3, [r3], {60}	; 0x3c
    1480:	034c2e77 	movteq	r2, #52855	; 0xce77
    1484:	02003c58 	andeq	r3, r0, #88, 24	; 0x5800
    1488:	8c030104 	stfhis	f0, [r3], {4}
    148c:	a9034a7f 	stmdbge	r3, {r0, r1, r2, r3, r4, r5, r6, r9, fp, lr}
    1490:	333d3c01 	teqcc	sp, #256	; 0x100
    1494:	7fb70323 	svcvc	0x00b70323
    1498:	c403333c 	strgt	r3, [r3], #-828	; 0x33c
    149c:	b3032000 	movwlt	r2, #12288	; 0x3000
    14a0:	31323c06 	teqcc	r2, r6, lsl #24
    14a4:	2038033d 	eorscs	r0, r8, sp, lsr r3
    14a8:	2078a203 	rsbscs	sl, r8, r3, lsl #4
    14ac:	2007de03 	andcs	sp, r7, r3, lsl #28
    14b0:	2e78a203 	cdpcs	2, 7, cr10, cr8, cr3, {0}
    14b4:	32201603 	eorcc	r1, r0, #3145728	; 0x300000
    14b8:	2000d103 	andcs	sp, r0, r3, lsl #2
    14bc:	3c06d303 	stccc	3, cr13, [r6], {3}
    14c0:	2f1f2f4b 	svccs	0x001f2f4b
    14c4:	4322211f 	teqmi	r2, #-1073741817	; 0xc0000007
    14c8:	ed034230 	sfm	f4, 4, [r3, #-192]	; 0xffffff40
    14cc:	02004a77 	andeq	r4, r0, #487424	; 0x77000
    14d0:	06380204 	ldrteq	r0, [r8], -r4, lsl #4
    14d4:	c803064a 	stmdagt	r3, {r1, r3, r6, r9, sl}
    14d8:	026c3c00 	rsbeq	r3, ip, #0, 24
    14dc:	01010003 	tsteq	r1, r3
    14e0:	e0020500 	and	r0, r2, r0, lsl #10
    14e4:	03080010 	movweq	r0, #32784	; 0x8010
    14e8:	200102f8 	strdcs	r0, [r1], -r8
    14ec:	03313d28 	teqeq	r1, #40, 26	; 0xa00
    14f0:	1f2c200e 	svcne	0x002c200e
    14f4:	2a252221 	bcs	949d80 <_Min_Stack_Size+0x949980>
    14f8:	21207103 	teqcs	r0, r3, lsl #2
    14fc:	03272124 	teqeq	r7, #36, 2
    1500:	4f3d2011 	svcmi	0x003d2011
    1504:	2c660903 	stclcs	9, cr0, [r6], #-12
    1508:	01000302 	tsteq	r0, r2, lsl #6
    150c:	02050001 	andeq	r0, r5, #1
    1510:	08001130 	stmdaeq	r0, {r4, r5, r8, ip}
    1514:	0103d703 	tsteq	r3, r3, lsl #14
    1518:	1c033624 	stcne	6, cr3, [r3], {36}	; 0x24
    151c:	04020058 	streq	r0, [r2], #-88	; 0x58
    1520:	2e5c0301 	cdpcs	3, 5, cr0, cr12, cr1, {0}
    1524:	3f3c1103 	svccc	0x003c1103
    1528:	03200b03 	teqeq	r0, #3072	; 0xc00
    152c:	6e03200b 	cdpvs	0, 0, cr2, cr3, cr11, {0}
    1530:	02025f20 	andeq	r5, r2, #32, 30	; 0x80
    1534:	00010100 	andeq	r0, r1, r0, lsl #2
    1538:	11640205 	cmnne	r4, r5, lsl #4
    153c:	81030800 	tsthi	r3, r0, lsl #16
    1540:	1b330108 	blne	cc1968 <_Min_Stack_Size+0xcc1568>
    1544:	032f2f41 	teqeq	pc, #260	; 0x104
    1548:	30352e10 	eorscc	r2, r5, r0, lsl lr
    154c:	e603223a 			; <UNDEFINED> instruction: 0xe603223a
    1550:	3f232000 	svccc	0x00232000
    1554:	02040200 	andeq	r0, r4, #0, 4
    1558:	3c7efb03 	ldclcc	11, cr15, [lr], #-12
    155c:	03063c06 	movweq	r3, #27654	; 0x6c06
    1560:	323c04b3 	eorscc	r0, ip, #-1291845632	; 0xb3000000
    1564:	033c3c03 	teqeq	ip, #768	; 0x300
    1568:	033c7bae 	teqeq	ip, #178176	; 0x2b800
    156c:	033c00d6 	teqeq	ip, #214	; 0xd6
    1570:	78033c0b 	stmdavc	r3, {r0, r1, r3, sl, fp, ip, sp}
    1574:	00312820 	eorseq	r2, r1, r0, lsr #16
    1578:	03010402 	movweq	r0, #5122	; 0x1402
    157c:	033c7ef9 	teqeq	ip, #3984	; 0xf90
    1580:	223c04c6 	eorscs	r0, ip, #-973078528	; 0xc6000000
    1584:	211f2f4b 	tstcs	pc, fp, asr #30
    1588:	0322211f 	teqeq	r2, #-1073741817	; 0xc0000007
    158c:	033c7c8e 	teqeq	ip, #36352	; 0x8e00
    1590:	78032e2a 	stmdavc	r3, {r1, r3, r5, r9, sl, fp, sp}
    1594:	03312820 	teqeq	r1, #32, 16	; 0x200000
    1598:	353c7f8b 	ldrcc	r7, [ip, #-3979]!	; 0xf8b
    159c:	049a0330 	ldreq	r0, [sl], #816	; 0x330
    15a0:	7be40320 	blvc	ff902228 <_estack+0xdf8d2228>
    15a4:	049c0320 	ldreq	r0, [ip], #800	; 0x320
    15a8:	2e200320 	cdpcs	3, 2, cr0, cr0, cr0, {1}
    15ac:	2f1f2f4b 	svccs	0x001f2f4b
    15b0:	4322211f 	teqmi	r2, #-1073741817	; 0xc0000007
    15b4:	f4034230 	vst1.8	{d4-d7}, [r3 :256], r0
    15b8:	1e6c4a7b 	mcrne	10, 3, r4, cr12, cr11, {3}
    15bc:	033c2403 	teqeq	ip, #50331648	; 0x3000000
    15c0:	2203205e 	andcs	r2, r3, #94	; 0x5e
    15c4:	b503312e 	strlt	r3, [r3, #-302]	; 0x12e
    15c8:	003d3c03 	eorseq	r3, sp, r3, lsl #24
    15cc:	03020402 	movweq	r0, #9218	; 0x2402
    15d0:	062e7bc4 	strteq	r7, [lr], -r4, asr #23
    15d4:	0003024a 	andeq	r0, r3, sl, asr #4
    15d8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    15dc:	00128802 	andseq	r8, r2, r2, lsl #16
    15e0:	09910308 	ldmibeq	r1, {r3, r8, r9}
    15e4:	7a034201 	bvc	d1df0 <_Min_Stack_Size+0xd19f0>
    15e8:	3f3d4220 	svccc	0x003d4220
    15ec:	02040200 	andeq	r0, r4, #0, 4
    15f0:	03063c06 	movweq	r3, #27654	; 0x6c06
    15f4:	03324a0a 	teqeq	r2, #40960	; 0xa000
    15f8:	85032068 	strhi	r2, [r3, #-104]	; 0x68
    15fc:	93032e01 	movwls	r2, #15873	; 0x3e01
    1600:	d103207f 	tstle	r3, pc, ror r0
    1604:	036e2e00 	cmneq	lr, #0, 28
    1608:	2f334a0e 	svccs	0x00334a0e
    160c:	03f303bd 	mvnseq	r0, #-201326590	; 0xf4000002
    1610:	09033074 	stmdbeq	r3, {r2, r4, r5, r6, ip, sp}
    1614:	7c8a033c 	stcvc	3, cr0, [sl], {60}	; 0x3c
    1618:	4a0f032e 	bmi	3c22d8 <_Min_Stack_Size+0x3c1ed8>
    161c:	6602ed03 	strvs	lr, [r2], -r3, lsl #26
    1620:	3c2f0331 	stccc	3, cr0, [pc], #-196	; 1564 <_Min_Stack_Size+0x1164>
    1624:	033c1403 	teqeq	ip, #50331648	; 0x3000000
    1628:	033c7fbd 	teqeq	ip, #756	; 0x2f4
    162c:	5c303c2f 	ldcpl	12, cr3, [r0], #-188	; 0xffffff44
    1630:	3e3c1103 	rsfcce	f1, f4, f3
    1634:	033e3031 	teqeq	lr, #49	; 0x31
    1638:	7303580b 	movwvc	r5, #14347	; 0x380b
    163c:	5a303e3c 	bpl	c10f34 <_Min_Stack_Size+0xc10b34>
    1640:	3e3c0f03 	cdpcc	15, 3, cr0, cr12, cr3, {0}
    1644:	2e7cae03 	cdpcs	14, 7, cr10, cr12, cr3, {0}
    1648:	7ef1033e 	mrcvc	3, 7, r0, cr1, cr14, {1}
    164c:	2c5e322e 	lfmcs	f3, 2, [lr], {46}	; 0x2e
    1650:	24333022 	ldrtcs	r3, [r3], #-34	; 0x22
    1654:	0324321c 	teqeq	r4, #28, 4	; 0xc0000001
    1658:	2e033c09 	cdpcs	12, 0, cr3, cr3, cr9, {0}
    165c:	d4032f3c 	strle	r2, [r3], #-3900	; 0xf3c
    1660:	cd032000 	stcgt	0, cr2, [r3, #-0]
    1664:	86033c03 	strhi	r3, [r3], -r3, lsl #24
    1668:	03312e7f 	teqeq	r1, #2032	; 0x7f0
    166c:	14033c2f 	strne	r3, [r3], #-3119	; 0xc2f
    1670:	7fbd0358 	svcvc	0x00bd0358
    1674:	3c2f033c 	stccc	3, cr0, [pc], #-240	; 158c <_Min_Stack_Size+0x118c>
    1678:	11035c30 	tstne	r3, r0, lsr ip
    167c:	30313e3c 	eorscc	r3, r1, ip, lsr lr
    1680:	580b033e 	stmdapl	fp, {r1, r2, r3, r4, r5, r8, r9}
    1684:	3e3c7303 	cdpcc	3, 3, cr7, cr12, cr3, {0}
    1688:	0f035a30 	svceq	0x00035a30
    168c:	bb033e3c 	bllt	d0f84 <_Min_Stack_Size+0xd0b84>
    1690:	47032e7c 	smlsdxmi	r3, ip, lr, r2
    1694:	0402003c 	streq	r0, [r2], #-60	; 0x3c
    1698:	7f910301 	svcvc	0x00910301
    169c:	018c034a 	orreq	r0, ip, sl, asr #6
    16a0:	033e303c 	teqeq	lr, #60	; 0x3c
    16a4:	303d3c1d 	eorscc	r3, sp, sp, lsl ip
    16a8:	7fb40323 	svcvc	0x00b40323
    16ac:	ca03303c 	bgt	cd7a4 <_Min_Stack_Size+0xcd3a4>
    16b0:	97032000 	strls	r2, [r3, -r0]
    16b4:	241c3c7f 	ldrcs	r3, [ip], #-3199	; 0xc7f
    16b8:	66660332 			; <UNDEFINED> instruction: 0x66660332
    16bc:	7452033a 	ldrbvc	r0, [r2], #-826	; 0x33a
    16c0:	02040200 	andeq	r0, r4, #0, 4
    16c4:	024a0639 	subeq	r0, sl, #59768832	; 0x3900000
    16c8:	01010003 	tsteq	r1, r3
    16cc:	e4020500 	str	r0, [r2], #-1280	; 0x500
    16d0:	03080014 	movweq	r0, #32788	; 0x8014
    16d4:	2401048d 	strcs	r0, [r1], #-1165	; 0x48d
    16d8:	5f27241c 	svcpl	0x0027241c
    16dc:	2e0b036a 	cdpcs	3, 0, cr0, cr11, cr10, {3}
    16e0:	03207703 	teqeq	r0, #786432	; 0xc0000
    16e4:	6c033c09 	stcvs	12, cr3, [r3], {9}
    16e8:	02003d20 	andeq	r3, r0, #32, 26	; 0x800
    16ec:	76030104 	strvc	r0, [r3], -r4, lsl #2
    16f0:	0003022e 	andeq	r0, r3, lr, lsr #4
    16f4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    16f8:	00152002 	andseq	r2, r5, r2
    16fc:	0ace0308 	beq	ff382324 <_estack+0xdf352324>
    1700:	331b2501 	tstcc	fp, #4194304	; 0x400000
    1704:	20100321 	andscs	r0, r0, r1, lsr #6
    1708:	231d3130 	tstcs	sp, #48, 2
    170c:	24203103 	strtcs	r3, [r0], #-259	; 0x103
    1710:	0402003f 	streq	r0, [r2], #-63	; 0x3f
    1714:	7fb20301 	svcvc	0x00b20301
    1718:	3c1a032e 	ldccc	3, cr0, [sl], {46}	; 0x2e
    171c:	1f03424b 	svcne	0x0003424b
    1720:	3c0b033c 	stccc	3, cr0, [fp], {60}	; 0x3c
    1724:	28207803 	stmdacs	r0!, {r0, r1, fp, ip, sp, lr}
    1728:	04020031 	streq	r0, [r2], #-49	; 0x31
    172c:	7fb30302 	svcvc	0x00b30302
    1730:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    1734:	3e3c2203 	cdpcc	2, 3, cr2, cr12, cr3, {0}
    1738:	2003306a 	andcs	r3, r3, sl, rrx
    173c:	20600320 	rsbcs	r0, r0, r0, lsr #6
    1740:	31202003 	teqcc	r0, r3
    1744:	01000202 	tsteq	r0, r2, lsl #4
    1748:	02050001 	andeq	r0, r5, #1
    174c:	080015a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip}
    1750:	010ba503 	tsteq	fp, r3, lsl #10
    1754:	207a0326 	rsbscs	r0, sl, r6, lsr #6
    1758:	10032126 	andne	r2, r3, r6, lsr #2
    175c:	1d313020 	ldcne	0, cr3, [r1, #-128]!	; 0xffffff80
    1760:	20120323 	andscs	r0, r2, r3, lsr #6
    1764:	0402003f 	streq	r0, [r2], #-63	; 0x3f
    1768:	2e550301 	cdpcs	3, 5, cr0, cr5, cr1, {0}
    176c:	2d3c1d03 	ldccs	13, cr1, [ip, #-12]!
    1770:	0b031d24 	bleq	c8c08 <_Min_Stack_Size+0xc8808>
    1774:	2076032e 	rsbscs	r0, r6, lr, lsr #6
    1778:	31200a03 	teqcc	r0, r3, lsl #20
    177c:	02040200 	andeq	r0, r4, #0, 4
    1780:	062e5603 	strteq	r5, [lr], -r3, lsl #12
    1784:	0003023c 	andeq	r0, r3, ip, lsr r2
    1788:	05000101 	streq	r0, [r0, #-257]	; 0x101
    178c:	0015f002 	andseq	pc, r5, r2
    1790:	0bda0308 	bleq	ff6823b8 <_estack+0xdf6523b8>
    1794:	30302301 	eorscc	r2, r0, r1, lsl #6
    1798:	02003122 	andeq	r3, r0, #-2147483640	; 0x80000008
    179c:	77030104 	strvc	r0, [r3, -r4, lsl #2]
    17a0:	0003022e 	andeq	r0, r3, lr, lsr #4
    17a4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    17a8:	00160c02 	andseq	r0, r6, r2, lsl #24
    17ac:	0bea0308 	bleq	ffa823d4 <_estack+0xdfa523d4>
    17b0:	30302501 	eorscc	r2, r0, r1, lsl #10
    17b4:	0200313e 	andeq	r3, r0, #-2147483633	; 0x8000000f
    17b8:	77030104 	strvc	r0, [r3, -r4, lsl #2]
    17bc:	0003022e 	andeq	r0, r3, lr, lsr #4
    17c0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    17c4:	00162c02 	andseq	r2, r6, r2, lsl #24
    17c8:	0bfc0308 	bleq	fff023f0 <_estack+0xdfed23f0>
    17cc:	23222301 	teqcs	r2, #67108864	; 0x4000000
    17d0:	01040200 	mrseq	r0, R12_usr
    17d4:	0003021b 	andeq	r0, r3, fp, lsl r2
    17d8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    17dc:	00163c02 	andseq	r3, r6, r2, lsl #24
    17e0:	0c880308 	stceq	3, cr0, [r8], {8}
    17e4:	85032301 	strhi	r2, [r3, #-769]	; 0x301
    17e8:	72082e05 	andvc	r2, r8, #5, 28	; 0x50
    17ec:	7b830330 	blvc	fe0c24b4 <_estack+0xde0924b4>
    17f0:	21303020 	teqcs	r0, r0, lsr #32
    17f4:	04f7032d 	ldrbteq	r0, [r7], #813	; 0x32d
    17f8:	2545252e 	strbcs	r2, [r5, #-1326]	; 0x52e
    17fc:	01040200 	mrseq	r0, R12_usr
    1800:	4a7af803 	bmi	1ebf814 <_Min_Stack_Size+0x1ebf414>
    1804:	3c058503 	cfstr32cc	mvfx8, [r5], {3}
    1808:	45254523 	strmi	r4, [r5, #-1315]!	; 0x523
    180c:	07024525 	streq	r4, [r2, -r5, lsr #10]
    1810:	00010100 	andeq	r0, r1, r0, lsl #2
    1814:	16d00205 	ldrbne	r0, [r0], r5, lsl #4
    1818:	9e030800 	cdpls	8, 0, cr0, cr3, cr0, {0}
    181c:	0214010c 	andseq	r0, r4, #12, 2
    1820:	01010002 	tsteq	r1, r2
    1824:	d4020500 	strle	r0, [r2], #-1280	; 0x500
    1828:	03080016 	movweq	r0, #32790	; 0x8016
    182c:	13010ca8 	movwne	r0, #7336	; 0x1ca8
    1830:	01000202 	tsteq	r0, r2, lsl #4
    1834:	02050001 	andeq	r0, r5, #1
    1838:	080016d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip}
    183c:	010cb203 	tsteq	ip, r3, lsl #4
    1840:	00030214 	andeq	r0, r3, r4, lsl r2
    1844:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1848:	0016e002 	andseq	lr, r6, r2
    184c:	0e9e0308 	cdpeq	3, 9, cr0, cr14, cr8, {0}
    1850:	03212301 	teqeq	r1, #67108864	; 0x4000000
    1854:	0200200a 	andeq	r2, r0, #10
    1858:	75030104 	strvc	r0, [r3, #-260]	; 0x104
    185c:	00030258 	andeq	r0, r3, r8, asr r2
    1860:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1864:	0016f802 	andseq	pc, r6, r2, lsl #16
    1868:	0ec50308 	cdpeq	3, 12, cr0, cr5, cr8, {0}
    186c:	03212301 	teqeq	r1, #67108864	; 0x4000000
    1870:	02002e0a 	andeq	r2, r0, #10, 28	; 0xa0
    1874:	75030104 	strvc	r0, [r3, #-260]	; 0x104
    1878:	0003024a 	andeq	r0, r3, sl, asr #4
    187c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1880:	00171002 	andseq	r1, r7, r2
    1884:	10ec0308 	rscne	r0, ip, r8, lsl #6
    1888:	79031901 	stmdbvc	r3, {r0, r8, fp, ip}
    188c:	0e03272e 	cdpeq	7, 0, cr2, cr3, cr14, {1}
    1890:	3c7003e4 	ldclcc	3, cr0, [r0], #-912	; 0xfffffc70
    1894:	032f2d26 	teqeq	pc, #2432	; 0x980
    1898:	7003200a 	andvc	r2, r3, sl
    189c:	000e023c 	andeq	r0, lr, ip, lsr r2
    18a0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    18a4:	00176802 	andseq	r6, r7, r2, lsl #16
    18a8:	11890308 	orrne	r0, r9, r8, lsl #6
    18ac:	72081901 	andvc	r1, r8, #16384	; 0x4000
    18b0:	45252c30 	strmi	r2, [r5, #-3120]!	; 0xc30
    18b4:	01000f02 	tsteq	r0, r2, lsl #30
    18b8:	02050001 	andeq	r0, r5, #1
    18bc:	080017c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip}
    18c0:	0111a403 	tsteq	r1, r3, lsl #8
    18c4:	2e110320 	cdpcs	3, 1, cr0, cr1, cr0, {1}
    18c8:	e40331d7 	str	r3, [r3], #-471	; 0x1d7
    18cc:	0331587b 	teqeq	r1, #8060928	; 0x7b0000
    18d0:	14033c2f 	strne	r3, [r3], #-3119	; 0xc2f
    18d4:	7fbd0358 	svcvc	0x00bd0358
    18d8:	3c2f033c 	stccc	3, cr0, [pc], #-240	; 17f0 <_Min_Stack_Size+0x13f0>
    18dc:	11035c30 	tstne	r3, r0, lsr ip
    18e0:	30313e3c 	eorscc	r3, r1, ip, lsr lr
    18e4:	580b033e 	stmdapl	fp, {r1, r2, r3, r4, r5, r8, r9}
    18e8:	3e3c7303 	cdpcc	3, 3, cr7, cr12, cr3, {0}
    18ec:	0f035a30 	svceq	0x00035a30
    18f0:	03be033c 			; <UNDEFINED> instruction: 0x03be033c
    18f4:	7cc4033c 	stclvc	3, cr0, [r4], {60}	; 0x3c
    18f8:	0002022e 	andeq	r0, r2, lr, lsr #4
    18fc:	0c0f0101 	stfeqs	f0, [pc], {1}
    1900:	00020000 	andeq	r0, r2, r0
    1904:	000001be 			; <UNDEFINED> instruction: 0x000001be
    1908:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    190c:	0101000d 	tsteq	r1, sp
    1910:	00000101 	andeq	r0, r0, r1, lsl #2
    1914:	00000100 	andeq	r0, r0, r0, lsl #2
    1918:	6f682f01 	svcvs	0x00682f01
    191c:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 1770 <_Min_Stack_Size+0x1370>
    1920:	616c6965 	cmnvs	ip, r5, ror #18
    1924:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1928:	706f746b 	rsbvc	r7, pc, fp, ror #8
    192c:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
    1930:	705f6c61 	subsvc	r6, pc, r1, ror #24
    1934:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    1938:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
    193c:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
    1940:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    1944:	2f646564 	svccs	0x00646564
    1948:	6f747561 	svcvs	0x00747561
    194c:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
    1950:	73752f00 	cmnvc	r5, #0, 30
    1954:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1958:	63672f62 	cmnvs	r7, #392	; 0x188
    195c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    1960:	6f6e2d6d 	svcvs	0x006e2d6d
    1964:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    1968:	2f696261 	svccs	0x00696261
    196c:	2f382e34 	svccs	0x00382e34
    1970:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1974:	00656475 	rsbeq	r6, r5, r5, ror r4
    1978:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    197c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1980:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1984:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1988:	2f62696c 	svccs	0x0062696c
    198c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1990:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1994:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1998:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    199c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    19a0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    19a4:	0062696c 	rsbeq	r6, r2, ip, ror #18
    19a8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 18f4 <_Min_Stack_Size+0x14f4>
    19ac:	656c2f65 	strbvs	r2, [ip, #-3941]!	; 0xf65
    19b0:	2f616c69 	svccs	0x00616c69
    19b4:	6b736544 	blvs	1cdaecc <_Min_Stack_Size+0x1cdaacc>
    19b8:	2f706f74 	svccs	0x00706f74
    19bc:	616e6966 	cmnvs	lr, r6, ror #18
    19c0:	72705f6c 	rsbsvc	r5, r0, #108, 30	; 0x1b0
    19c4:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
    19c8:	30325f74 	eorscc	r5, r2, r4, ror pc
    19cc:	6d653531 	cfstr64vs	mvdx3, [r5, #-196]!	; 0xffffff3c
    19d0:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    19d4:	612f6465 	teqvs	pc, r5, ror #8
    19d8:	426f7475 	rsbmi	r7, pc, #1962934272	; 0x75000000
    19dc:	2f74616f 	svccs	0x0074616f
    19e0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    19e4:	00656475 	rsbeq	r6, r5, r5, ror r4
    19e8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1934 <_Min_Stack_Size+0x1534>
    19ec:	656c2f65 	strbvs	r2, [ip, #-3941]!	; 0xf65
    19f0:	2f616c69 	svccs	0x00616c69
    19f4:	6b736544 	blvs	1cdaf0c <_Min_Stack_Size+0x1cdab0c>
    19f8:	2f706f74 	svccs	0x00706f74
    19fc:	616e6966 	cmnvs	lr, r6, ror #18
    1a00:	72705f6c 	rsbsvc	r5, r0, #108, 30	; 0x1b0
    1a04:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
    1a08:	30325f74 	eorscc	r5, r2, r4, ror pc
    1a0c:	6d653531 	cfstr64vs	mvdx3, [r5, #-196]!	; 0xffffff3c
    1a10:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    1a14:	612f6465 	teqvs	pc, r5, ror #8
    1a18:	426f7475 	rsbmi	r7, pc, #1962934272	; 0x75000000
    1a1c:	2f74616f 	svccs	0x0074616f
    1a20:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
    1a24:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    1a28:	4343472f 	movtmi	r4, #14127	; 0x372f
    1a2c:	4d52412f 	ldfmie	f4, [r2, #-188]	; 0xffffff44
    1a30:	344d435f 	strbcc	r4, [sp], #-863	; 0x35f
    1a34:	74000046 	strvc	r0, [r0], #-70	; 0x46
    1a38:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
    1a3c:	0100632e 	tsteq	r0, lr, lsr #6
    1a40:	74730000 	ldrbtvc	r0, [r3], #-0
    1a44:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    1a48:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1a4c:	645f0000 	ldrbvs	r0, [pc], #-0	; 1a54 <_Min_Stack_Size+0x1654>
    1a50:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    1a54:	745f746c 	ldrbvc	r7, [pc], #-1132	; 1a5c <_Min_Stack_Size+0x165c>
    1a58:	73657079 	cmnvc	r5, #121	; 0x79
    1a5c:	0300682e 	movweq	r6, #2094	; 0x82e
    1a60:	74730000 	ldrbtvc	r0, [r3], #-0
    1a64:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    1a68:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    1a6c:	72700000 	rsbsvc	r0, r0, #0
    1a70:	65646a6f 	strbvs	r6, [r4, #-2671]!	; 0xa6f
    1a74:	682e7366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
    1a78:	00000500 	andeq	r0, r0, r0, lsl #10
    1a7c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
    1a80:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
    1a84:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    1a88:	6c000006 	stcvs	0, cr0, [r0], {6}
    1a8c:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
    1a90:	00050068 	andeq	r0, r5, r8, rrx
    1a94:	73617400 	cmnvc	r1, #0, 8
    1a98:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    1a9c:	70000005 	andvc	r0, r0, r5
    1aa0:	6174726f 	cmnvs	r4, pc, ror #4
    1aa4:	2e656c62 	cdpcs	12, 6, cr6, cr5, cr2, {3}
    1aa8:	00050068 	andeq	r0, r5, r8, rrx
    1aac:	72747300 	rsbsvc	r7, r4, #0, 6
    1ab0:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    1ab4:	00040068 	andeq	r0, r4, r8, rrx
    1ab8:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    1abc:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
    1ac0:	00050068 	andeq	r0, r5, r8, rrx
    1ac4:	05000000 	streq	r0, [r0, #-0]
    1ac8:	00187802 	andseq	r7, r8, r2, lsl #16
    1acc:	15ef0308 	strbne	r0, [pc, #776]!	; 1ddc <_Min_Stack_Size+0x19dc>
    1ad0:	02002e01 	andeq	r2, r0, #1, 28
    1ad4:	00250204 	eoreq	r0, r5, r4, lsl #4
    1ad8:	48020402 	stmdami	r2, {r1, sl}
    1adc:	3d1f2133 	ldfccs	f2, [pc, #-204]	; 1a18 <_Min_Stack_Size+0x1618>
    1ae0:	4242403d 	submi	r4, r2, #61	; 0x3d
    1ae4:	02211f21 	eoreq	r1, r1, #33, 30	; 0x84
    1ae8:	01010013 	tsteq	r1, r3, lsl r0
    1aec:	d8020500 	stmdale	r2, {r8, sl}
    1af0:	03080018 	movweq	r0, #32792	; 0x8018
    1af4:	2e010483 	cdpcs	4, 0, cr0, cr1, cr3, {4}
    1af8:	3d5c1c24 	ldclcc	12, cr1, [ip, #-144]	; 0xffffff70
    1afc:	01040200 	mrseq	r0, R12_usr
    1b00:	03062e06 	movweq	r2, #28166	; 0x6e06
    1b04:	3e3c12d3 	mrccc	2, 1, r1, cr12, cr3, {6}
    1b08:	900e034f 	andls	r0, lr, pc, asr #6
    1b0c:	4a7e9903 	bmi	1fa7f20 <_Min_Stack_Size+0x1fa7b20>
    1b10:	206f9d03 	rsbcs	r9, pc, r3, lsl #26
    1b14:	2010e303 	andscs	lr, r0, r3, lsl #6
    1b18:	2e6f9d03 	cdpcs	13, 6, cr9, cr15, cr3, {0}
    1b1c:	4a10e803 	bmi	43bb30 <_Min_Stack_Size+0x43b730>
    1b20:	206f9803 	rsbcs	r9, pc, r3, lsl #16
    1b24:	10e7032f 	rscne	r0, r7, pc, lsr #6
    1b28:	29411b2e 	stmdbcs	r1, {r1, r2, r3, r5, r8, r9, fp, ip}^
    1b2c:	29412941 	stmdbcs	r1, {r0, r6, r8, fp, sp}^
    1b30:	29412941 	stmdbcs	r1, {r0, r6, r8, fp, sp}^
    1b34:	29412941 	stmdbcs	r1, {r0, r6, r8, fp, sp}^
    1b38:	033c1103 	teqeq	ip, #-1073741824	; 0xc0000000
    1b3c:	6c032014 	stcvs	0, cr2, [r3], {20}
    1b40:	2e14032e 	cdpcs	3, 1, cr0, cr4, cr14, {1}
    1b44:	23207903 	teqcs	r0, #49152	; 0xc000
    1b48:	2b512f24 	blcs	144d7e0 <_Min_Stack_Size+0x144d3e0>
    1b4c:	6f900324 	svcvs	0x00900324
    1b50:	10ef0320 	rscne	r0, pc, r0, lsr #6
    1b54:	6f91033c 	svcvs	0x0091033c
    1b58:	03414020 	movteq	r4, #4128	; 0x1020
    1b5c:	21302e09 	teqcs	r0, r9, lsl #28
    1b60:	17033d1f 	smladne	r3, pc, sp, r3	; <UNPREDICTABLE>
    1b64:	033e3e2e 	teqeq	lr, #736	; 0x2e0
    1b68:	0a032e0d 	beq	cd3a4 <_Min_Stack_Size+0xccfa4>
    1b6c:	20760320 	rsbscs	r0, r6, r0, lsr #6
    1b70:	03200a03 	teqeq	r0, #12288	; 0x3000
    1b74:	0a033c76 	beq	d0d54 <_Min_Stack_Size+0xd0954>
    1b78:	20760320 	rsbscs	r0, r6, r0, lsr #6
    1b7c:	6f200a03 	svcvs	0x00200a03
    1b80:	0a034125 	beq	d201c <_Min_Stack_Size+0xd1c1c>
    1b84:	6f03322e 	svcvs	0x0003322e
    1b88:	0402004a 	streq	r0, [r2], #-74	; 0x4a
    1b8c:	7ef70301 	cdpvc	3, 15, cr0, cr7, cr1, {0}
    1b90:	019c033c 	orrseq	r0, ip, ip, lsr r3
    1b94:	2e6d033c 	mcrcs	3, 3, r0, cr13, cr12, {1}
    1b98:	223c5003 	eorscs	r5, ip, #3
    1b9c:	11fb0341 	mvnsne	r0, r1, asr #6
    1ba0:	033f684a 	teqeq	pc, #4849664	; 0x4a0000
    1ba4:	033c6eb0 	teqeq	ip, #176, 28	; 0xb00
    1ba8:	0f022e1a 	svceq	0x00022e1a
    1bac:	00010100 	andeq	r0, r1, r0, lsl #2
    1bb0:	1a800205 	bne	fe0023cc <_estack+0xddfd23cc>
    1bb4:	b7030800 	strlt	r0, [r3, -r0, lsl #16]
    1bb8:	23200105 	teqcs	r0, #1073741825	; 0x40000001
    1bbc:	04020032 	streq	r0, [r2], #-50	; 0x32
    1bc0:	02003403 	andeq	r3, r0, #50331648	; 0x3000000
    1bc4:	0a030304 	beq	c27dc <_Min_Stack_Size+0xc23dc>
    1bc8:	0351304a 	cmpeq	r1, #74	; 0x4a
    1bcc:	241c4a09 	ldrcs	r4, [ip], #-2569	; 0xa09
    1bd0:	241c241c 	ldrcs	r2, [ip], #-1052	; 0x41c
    1bd4:	3e32281c 	mrccc	8, 1, r2, cr2, cr12, {0}
    1bd8:	4a12ab03 	bmi	4ac7ec <_Min_Stack_Size+0x4ac3ec>
    1bdc:	1f216051 	svcne	0x00216051
    1be0:	6dc70321 	stclvs	3, cr0, [r7, #132]	; 0x84
    1be4:	0402004a 	streq	r0, [r2], #-74	; 0x4a
    1be8:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
    1bec:	033c1103 	teqeq	ip, #-1073741824	; 0xc0000000
    1bf0:	02002e77 	andeq	r2, r0, #1904	; 0x770
    1bf4:	4a030104 	bmi	c200c <_Min_Stack_Size+0xc1c0c>
    1bf8:	0013022e 	andseq	r0, r3, lr, lsr #4
    1bfc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1c00:	001b2402 	andseq	r2, fp, r2, lsl #8
    1c04:	07ed0308 	strbeq	r0, [sp, r8, lsl #6]!
    1c08:	32242001 	eorcc	r2, r4, #1
    1c0c:	03040200 	movweq	r0, #16896	; 0x4200
    1c10:	04020021 	streq	r0, [r2], #-33	; 0x21
    1c14:	02002203 	andeq	r2, r0, #805306368	; 0x30000000
    1c18:	00310304 	eorseq	r0, r1, r4, lsl #6
    1c1c:	03010402 	movweq	r0, #5122	; 0x1402
    1c20:	02002e7a 	andeq	r2, r0, #1952	; 0x7a0
    1c24:	002f0104 	eoreq	r0, pc, r4, lsl #2
    1c28:	22010402 	andcs	r0, r1, #33554432	; 0x2000000
    1c2c:	01040200 	mrseq	r0, R12_usr
    1c30:	00050231 	andeq	r0, r5, r1, lsr r2
    1c34:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1c38:	001b4c02 	andseq	r4, fp, r2, lsl #24
    1c3c:	08830308 	stmeq	r3, {r3, r8, r9}
    1c40:	201b1701 	andscs	r1, fp, r1, lsl #14
    1c44:	200c0333 	andcs	r0, ip, r3, lsr r3
    1c48:	04020032 	streq	r0, [r2], #-50	; 0x32
    1c4c:	02003403 	andeq	r3, r0, #50331648	; 0x3000000
    1c50:	34280304 	strtcc	r0, [r8], #-772	; 0x304
    1c54:	0341221e 	movteq	r2, #4638	; 0x121e
    1c58:	27036621 	strcs	r6, [r3, -r1, lsr #12]
    1c5c:	20690320 	rsbcs	r0, r9, r0, lsr #6
    1c60:	03207603 	teqeq	r0, #3145728	; 0x300000
    1c64:	6e032014 	mcrvs	0, 0, r2, cr3, cr4, {0}
    1c68:	2e1f0320 	cdpcs	3, 1, cr0, cr15, cr0, {1}
    1c6c:	032e7303 	teqeq	lr, #201326592	; 0xc000000
    1c70:	7503200d 	strvc	r2, [r3, #-13]
    1c74:	3c0b0320 	stccc	3, cr0, [fp], {32}
    1c78:	032e7503 	teqeq	lr, #12582912	; 0xc00000
    1c7c:	17032e0b 	strne	r2, [r3, -fp, lsl #28]
    1c80:	200f032e 	andcs	r0, pc, lr, lsr #6
    1c84:	7fa3032d 	svcvc	0x00a3032d
    1c88:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    1c8c:	58470301 	stmdapl	r7, {r0, r8, r9}^
    1c90:	01040200 	mrseq	r0, R12_usr
    1c94:	033c1003 	teqeq	ip, #3
    1c98:	033c00fa 	teqeq	ip, #250	; 0xfa
    1c9c:	032d2e0d 	teqeq	sp, #13, 28	; 0xd0
    1ca0:	0b032e60 	bleq	cd628 <_Min_Stack_Size+0xcd228>
    1ca4:	0402004a 	streq	r0, [r2], #-74	; 0x4a
    1ca8:	00580601 	subseq	r0, r8, r1, lsl #12
    1cac:	20020402 	andcs	r0, r2, r2, lsl #8
    1cb0:	7efd0306 	cdpvc	3, 15, cr0, cr13, cr6, {0}
    1cb4:	00090282 	andeq	r0, r9, r2, lsl #5
    1cb8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1cbc:	001c0402 	andseq	r0, ip, r2, lsl #8
    1cc0:	09a70308 	stmibeq	r7!, {r3, r8, r9}
    1cc4:	1c272001 	stcne	0, cr2, [r7], #-4
    1cc8:	04020032 	streq	r0, [r2], #-50	; 0x32
    1ccc:	02003403 	andeq	r3, r0, #50331648	; 0x3000000
    1cd0:	0a030304 	beq	c28e8 <_Min_Stack_Size+0xc24e8>
    1cd4:	5a51304a 	bpl	144de04 <_Min_Stack_Size+0x144da04>
    1cd8:	032c3e30 	teqeq	ip, #48, 28	; 0x300
    1cdc:	ad03201d 	stcge	0, cr2, [r3, #-116]	; 0xffffff8c
    1ce0:	60512e0e 	subsvs	r2, r1, lr, lsl #28
    1ce4:	03211f21 	teqeq	r1, #33, 30	; 0x84
    1ce8:	234a71a8 	movtcs	r7, #41384	; 0xa1a8
    1cec:	01040200 	mrseq	r0, R12_usr
    1cf0:	02003c06 	andeq	r3, r0, #1536	; 0x600
    1cf4:	03060104 	movweq	r0, #24836	; 0x6104
    1cf8:	2a033c5e 	bcs	d0e78 <_Min_Stack_Size+0xd0a78>
    1cfc:	16035e2e 	strne	r5, [r3], -lr, lsr #28
    1d00:	2e5d032e 	cdpcs	3, 5, cr0, cr13, cr14, {1}
    1d04:	2e06e903 	cdpcs	9, 0, cr14, cr6, cr3, {0}
    1d08:	20210352 	eorcs	r0, r1, r2, asr r3
    1d0c:	03205f03 	teqeq	r0, #3, 30
    1d10:	5b032021 	blpl	c9d9c <_Min_Stack_Size+0xc999c>
    1d14:	03012802 	movweq	r2, #6146	; 0x1802
    1d18:	17024a25 	strne	r4, [r2, -r5, lsr #20]
    1d1c:	00010100 	andeq	r0, r1, r0, lsl #2
    1d20:	1d200205 	sfmne	f0, 4, [r0, #-20]!	; 0xffffffec
    1d24:	aa030800 	bge	c3d2c <_Min_Stack_Size+0xc392c>
    1d28:	0024010a 	eoreq	r0, r4, sl, lsl #2
    1d2c:	32010402 	andcc	r0, r1, #33554432	; 0x2000000
    1d30:	2e53034c 	cdpcs	3, 5, cr0, cr3, cr12, {2}
    1d34:	02040200 	andeq	r0, r4, #0, 4
    1d38:	4a00d003 	bmi	35d4c <_Min_Stack_Size+0x3594c>
    1d3c:	02040200 	andeq	r0, r4, #0, 4
    1d40:	002e7a03 	eoreq	r7, lr, r3, lsl #20
    1d44:	03010402 	movweq	r0, #5122	; 0x1402
    1d48:	5c033c5d 	stcpl	12, cr3, [r3], {93}	; 0x5d
    1d4c:	4a2c033c 	bmi	b02a44 <_Min_Stack_Size+0xb02644>
    1d50:	5dd94b34 	vldrpl	d20, [r9, #208]	; 0xd0
    1d54:	01000e02 	tsteq	r0, r2, lsl #28
    1d58:	02050001 	andeq	r0, r5, #1
    1d5c:	08001da0 	stmdaeq	r0, {r5, r7, r8, sl, fp, ip}
    1d60:	010ae003 	tsteq	sl, r3
    1d64:	2e120325 	cdpcs	3, 1, cr0, cr2, cr5, {1}
    1d68:	7f8e0330 	svcvc	0x008e0330
    1d6c:	00f2032e 	rscseq	r0, r2, lr, lsr #6
    1d70:	7f8e033c 	svcvc	0x008e033c
    1d74:	01960320 	orrseq	r0, r6, r0, lsr #6
    1d78:	20440320 	subcs	r0, r4, r0, lsr #6
    1d7c:	31203c03 	teqcc	r0, r3, lsl #24
    1d80:	01040200 	mrseq	r0, R12_usr
    1d84:	032e4503 	teqeq	lr, #12582912	; 0xc00000
    1d88:	033c7fa5 	teqeq	ip, #660	; 0x294
    1d8c:	334a00f1 	movtcc	r0, #41201	; 0xa0f1
    1d90:	4a090340 	bmi	242a98 <_Min_Stack_Size+0x242698>
    1d94:	03207703 	teqeq	r0, #786432	; 0xc0000
    1d98:	77032009 	strvc	r2, [r3, -r9]
    1d9c:	3c090320 	stccc	3, cr0, [r9], {32}
    1da0:	d60f032f 	strle	r0, [pc], -pc, lsr #6
    1da4:	2e75033f 	mrccs	3, 3, r0, cr5, cr15, {1}
    1da8:	0e023f52 	mcreq	15, 0, r3, cr2, cr2, {2}
    1dac:	00010100 	andeq	r0, r1, r0, lsl #2
    1db0:	1e440205 	cdpne	2, 4, cr0, cr4, cr5, {0}
    1db4:	a6030800 	strge	r0, [r3], -r0, lsl #16
    1db8:	b503010b 	strlt	r0, [r3, #-267]	; 0x10b
    1dbc:	413e2e0b 	teqmi	lr, fp, lsl #28
    1dc0:	2e0c035a 	mcrcs	3, 0, r0, cr12, cr10, {2}
    1dc4:	586db603 	stmdapl	sp!, {r0, r1, r9, sl, ip, sp, pc}^
    1dc8:	03203603 	teqeq	r0, #3145728	; 0x300000
    1dcc:	032010ad 	teqeq	r0, #173	; 0xad
    1dd0:	f8036625 			; <UNDEFINED> instruction: 0xf8036625
    1dd4:	e303206e 	movw	r2, #12398	; 0x306e
    1dd8:	25032e10 	strcs	r2, [r3, #-3600]	; 0xe10
    1ddc:	206c039e 	mlscs	ip, lr, r3, r0
    1de0:	232e0d03 	teqcs	lr, #3, 26	; 0xc0
    1de4:	206efd03 	rsbcs	pc, lr, r3, lsl #26
    1de8:	2e118703 	cdpcs	7, 1, cr8, cr1, cr3, {0}
    1dec:	9103512f 	tstls	r3, pc, lsr #2
    1df0:	ef03206f 	svc	0x0003206f
    1df4:	91032010 	tstls	r3, r0, lsl r0
    1df8:	ec03206f 	stc	0, cr2, [r3], {111}	; 0x6f
    1dfc:	94032010 	strls	r2, [r3], #-16
    1e00:	f003206f 			; <UNDEFINED> instruction: 0xf003206f
    1e04:	90032010 	andls	r2, r3, r0, lsl r0
    1e08:	1203206f 	andne	r2, r3, #111	; 0x6f
    1e0c:	034b303c 	movteq	r3, #45116	; 0xb03c
    1e10:	3e3e3c17 	mrccc	12, 1, r3, cr14, cr7, {0}
    1e14:	03200d03 	teqeq	r0, #3, 26	; 0xc0
    1e18:	7603200a 	strvc	r2, [r3], -sl
    1e1c:	200a0320 	andcs	r0, sl, r0, lsr #6
    1e20:	033c7603 	teqeq	ip, #3145728	; 0x300000
    1e24:	7603200a 	strvc	r2, [r3], -sl
    1e28:	200a0320 	andcs	r0, sl, r0, lsr #6
    1e2c:	0341256f 	movteq	r2, #5487	; 0x156f
    1e30:	03322e0a 	teqeq	r2, #10, 28	; 0xa0
    1e34:	0320069a 	teqeq	r0, #161480704	; 0x9a00000
    1e38:	77032e09 	strvc	r2, [r3, -r9, lsl #28]
    1e3c:	20090320 	andcs	r0, r9, r0, lsr #6
    1e40:	2e0b0327 	cdpcs	3, 0, cr0, cr11, cr7, {1}
    1e44:	1a03211f 	bne	ca2c8 <_Min_Stack_Size+0xc9ec8>
    1e48:	2e660320 	cdpcs	3, 6, cr0, cr6, cr0, {1}
    1e4c:	03200903 	teqeq	r0, #49152	; 0xc000
    1e50:	02002e0f 	andeq	r2, r0, #15, 28	; 0xf0
    1e54:	3c060104 	stfccs	f0, [r6], {4}
    1e58:	0af90306 	beq	ffe42a78 <_estack+0xdfe12a78>
    1e5c:	7589033c 	strvc	r0, [r9, #828]	; 0x33c
    1e60:	0af70320 	beq	ffdc2ae8 <_estack+0xdfd92ae8>
    1e64:	6df9032e 	ldclvs	3, cr0, [r9, #184]!	; 0xb8
    1e68:	0241222e 	subeq	r2, r1, #-536870910	; 0xe0000002
    1e6c:	01010015 	tsteq	r1, r5, lsl r0
    1e70:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
    1e74:	0308001f 	movweq	r0, #32799	; 0x801f
    1e78:	24010bf4 	strcs	r0, [r1], #-3060	; 0xbf4
    1e7c:	022d3e2f 	eoreq	r3, sp, #752	; 0x2f0
    1e80:	01010004 	tsteq	r1, r4
    1e84:	94020500 	strls	r0, [r2], #-1280	; 0x500
    1e88:	0308001f 	movweq	r0, #32799	; 0x801f
    1e8c:	17010bff 			; <UNDEFINED> instruction: 0x17010bff
    1e90:	01000802 	tsteq	r0, r2, lsl #16
    1e94:	02050001 	andeq	r0, r5, #1
    1e98:	08001fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip}
    1e9c:	010d8203 	tsteq	sp, r3, lsl #4
    1ea0:	31303024 	teqcc	r0, r4, lsr #32
    1ea4:	01000502 	tsteq	r0, r2, lsl #10
    1ea8:	02050001 	andeq	r0, r5, #1
    1eac:	08001fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip}
    1eb0:	010d9103 	tsteq	sp, r3, lsl #2
    1eb4:	30201203 	eorcc	r1, r0, r3, lsl #4
    1eb8:	02313030 	eorseq	r3, r1, #48	; 0x30
    1ebc:	01010005 	tsteq	r1, r5
    1ec0:	d8020500 	stmdale	r2, {r8, sl}
    1ec4:	0308001f 	movweq	r0, #32799	; 0x801f
    1ec8:	15010db0 	strne	r0, [r1, #-3504]	; 0xdb0
    1ecc:	0004022f 	andeq	r0, r4, pc, lsr #4
    1ed0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1ed4:	001fe402 	andseq	lr, pc, r2, lsl #8
    1ed8:	0eb10308 	cdpeq	3, 11, cr0, cr1, cr8, {0}
    1edc:	2e090301 	cdpcs	3, 0, cr0, cr9, cr1, {0}
    1ee0:	03224f4e 	teqeq	r2, #312	; 0x138
    1ee4:	36034a0d 	strcc	r4, [r3], -sp, lsl #20
    1ee8:	2e4a0366 	cdpcs	3, 4, cr0, cr10, cr6, {3}
    1eec:	592e1403 	stmdbpl	lr!, {r0, r1, sl, ip}
    1ef0:	032e1203 	teqeq	lr, #805306368	; 0x30000000
    1ef4:	10032e70 	andne	r2, r3, r0, ror lr
    1ef8:	20700320 	rsbscs	r0, r0, r0, lsr #6
    1efc:	32201003 	eorcc	r1, r0, #3
    1f00:	03222c30 	teqeq	r2, #48, 24	; 0x3000
    1f04:	0a032e09 	beq	cd730 <_Min_Stack_Size+0xcd330>
    1f08:	42034ce4 	andmi	r4, r3, #228, 24	; 0xe400
    1f0c:	c9035f3c 	stmdbgt	r3, {r2, r3, r4, r5, r8, r9, sl, fp, ip, lr}
    1f10:	03684a00 	cmneq	r8, #0, 20
    1f14:	f2034a1a 	vpmin.s8	d4, d3, d10
    1f18:	9b034a7e 	blls	d4918 <_Min_Stack_Size+0xd4518>
    1f1c:	03302001 	teqeq	r0, #1
    1f20:	ec033c0a 	stc	12, cr3, [r3], {10}
    1f24:	02003c7e 	andeq	r3, r0, #32256	; 0x7e00
    1f28:	4a060104 	bmi	182340 <_Min_Stack_Size+0x181f40>
    1f2c:	3c6d0306 	stclcc	3, cr0, [sp], #-24	; 0xffffffe8
    1f30:	02040200 	andeq	r0, r4, #0, 4
    1f34:	002e1303 	eoreq	r1, lr, r3, lsl #6
    1f38:	03020402 	movweq	r0, #9218	; 0x2402
    1f3c:	039009ce 	orrseq	r0, r0, #3375104	; 0x338000
    1f40:	2d213c0f 	stccs	12, cr3, [r1, #-60]!	; 0xffffffc4
    1f44:	76cb0321 	strbvc	r0, [fp], r1, lsr #6
    1f48:	ab032f58 	blge	cdcb0 <_Min_Stack_Size+0xcd8b0>
    1f4c:	1d022009 	stcne	0, cr2, [r2, #-36]	; 0xffffffdc
    1f50:	00010100 	andeq	r0, r1, r0, lsl #2
    1f54:	21280205 	teqcs	r8, r5, lsl #4
    1f58:	a5030800 	strge	r0, [r3, #-2048]	; 0x800
    1f5c:	0034010c 	eorseq	r0, r4, ip, lsl #2
    1f60:	06010402 	streq	r0, [r1], -r2, lsl #8
    1f64:	3043063c 	subcc	r0, r3, ip, lsr r6
    1f68:	09033e3e 	stmdbeq	r3, {r1, r2, r3, r4, r5, r9, sl, fp, ip, sp}
    1f6c:	77034074 	smlsdxvc	r3, r4, r0, r4
    1f70:	1f3e302e 	svcne	0x003e302e
    1f74:	5abe3d4b 	bpl	fef914a8 <_estack+0xdef614a8>
    1f78:	01040200 	mrseq	r0, R12_usr
    1f7c:	033c7503 	teqeq	ip, #12582912	; 0xc00000
    1f80:	14034a17 	strne	r4, [r3], #-2583	; 0xa17
    1f84:	3c40033c 	mcrrcc	3, 3, r0, r0, cr12
    1f88:	2000d403 	andcs	sp, r0, r3, lsl #8
    1f8c:	04020031 	streq	r0, [r2], #-49	; 0x31
    1f90:	3c570301 	mrrccc	3, 0, r0, r7, cr1
    1f94:	263e1e40 	ldrtcs	r1, [lr], -r0, asr #28
    1f98:	033c7603 	teqeq	ip, #3145728	; 0x300000
    1f9c:	0d034a19 	vstreq	s8, [r3, #-100]	; 0xffffff9c
    1fa0:	1402312e 	strne	r3, [r2], #-302	; 0x12e
    1fa4:	00010100 	andeq	r0, r1, r0, lsl #2
    1fa8:	22100205 	andscs	r0, r0, #1342177280	; 0x50000000
    1fac:	85030800 	strhi	r0, [r3, #-2048]	; 0x800
    1fb0:	2f240106 	svccs	0x00240106
    1fb4:	05f9032f 	ldrbeq	r0, [r9, #815]!	; 0x32f
    1fb8:	7a8d034a 	bvc	fe342ce8 <_estack+0xde312ce8>
    1fbc:	f0032320 			; <UNDEFINED> instruction: 0xf0032320
    1fc0:	8d032005 	stchi	0, cr2, [r3, #-20]	; 0xffffffec
    1fc4:	1e252e7a 	mcrne	14, 1, r2, cr5, cr10, {3}
    1fc8:	20150330 	andscs	r0, r5, r0, lsr r3
    1fcc:	01040200 	mrseq	r0, R12_usr
    1fd0:	03062e06 	movweq	r2, #28166	; 0x6e06
    1fd4:	78032e13 	stmdavc	r3, {r0, r1, r4, r9, sl, fp, sp}
    1fd8:	fc032820 	stc2	8, cr2, [r3], {32}
    1fdc:	1e224a0f 	vmulne.f32	s8, s4, s30
    1fe0:	3e6b3622 	cdpcc	6, 6, cr3, cr11, cr2, {1}
    1fe4:	2e708603 	cdpcs	6, 7, cr8, cr0, cr3, {0}
    1fe8:	2e480332 	mcrcs	3, 2, r0, cr8, cr2, {1}
    1fec:	032e1903 	teqeq	lr, #49152	; 0xc000
    1ff0:	3632201b 			; <UNDEFINED> instruction: 0x3632201b
    1ff4:	002e7a03 	eoreq	r7, lr, r3, lsl #20
    1ff8:	03010402 	movweq	r0, #5122	; 0x1402
    1ffc:	002e7fb4 	strhteq	r7, [lr], -r4
    2000:	3b010402 	blcc	43010 <_Min_Stack_Size+0x42c10>
    2004:	01040200 	mrseq	r0, R12_usr
    2008:	10b6033b 	adcsne	r0, r6, fp, lsr r3
    200c:	0013023c 	andseq	r0, r3, ip, lsr r2
    2010:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2014:	0022c002 	eoreq	ip, r2, r2
    2018:	06e50308 	strbteq	r0, [r5], r8, lsl #6
    201c:	34032601 	strcc	r2, [r3], #-1537	; 0x601
    2020:	2e7a032e 	cdpcs	3, 7, cr0, cr10, cr14, {1}
    2024:	032e5403 	teqeq	lr, #50331648	; 0x3000000
    2028:	033c0597 	teqeq	ip, #633339904	; 0x25c00000
    202c:	25207af8 	strcs	r7, [r0, #-2808]!	; 0xaf8
    2030:	20058303 	andcs	r8, r5, r3, lsl #6
    2034:	2e7af803 	cdpcs	8, 7, cr15, cr10, cr3, {0}
    2038:	03252925 	teqeq	r5, #606208	; 0x94000
    203c:	222e0fb9 	eorcs	r0, lr, #740	; 0x2e4
    2040:	6b36221e 	blvs	d8a8c0 <_Min_Stack_Size+0xd8a4c0>
    2044:	70c3033e 	sbcvc	r0, r3, lr, lsr r3
    2048:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
    204c:	04020036 	streq	r0, [r2], #-54	; 0x36
    2050:	204e0301 	subcs	r0, lr, r1, lsl #6
    2054:	3c0fd203 	sfmcc	f5, 1, [pc], {3}
    2058:	01001302 	tsteq	r0, r2, lsl #6
    205c:	02050001 	andeq	r0, r5, #1
    2060:	08002340 	stmdaeq	r0, {r6, r8, r9, sp}
    2064:	0113f003 	tsteq	r3, r3
    2068:	9002aa03 	andls	sl, r2, r3, lsl #20
    206c:	2e75ea03 	vaddcs.f32	s29, s10, s6
    2070:	200a9603 	andcs	r9, sl, r3, lsl #12
    2074:	2075ea03 	rsbscs	lr, r5, r3, lsl #20
    2078:	2e0a9803 	cdpcs	8, 0, cr9, cr10, cr3, {0}
    207c:	20780330 	rsbscs	r0, r8, r0, lsr r3
    2080:	3c7df803 	ldclcc	8, cr15, [sp], #-12
    2084:	0292034c 	addseq	r0, r2, #76, 6	; 0x30000001
    2088:	4b4b303c 	blmi	12ce180 <_Min_Stack_Size+0x12cdd80>
    208c:	3e3d1f2f 	cdpcc	15, 3, cr1, cr13, cr15, {1}
    2090:	2e01e103 	mvfcss	f6, f3
    2094:	000f024b 	andeq	r0, pc, fp, asr #4
    2098:	05000101 	streq	r0, [r0, #-257]	; 0x101
    209c:	0023c802 	eoreq	ip, r3, r2, lsl #16
    20a0:	0dc90308 	stcleq	3, cr0, [r9, #32]
    20a4:	7ebb0301 	cdpvc	3, 11, cr0, cr11, cr1, {0}
    20a8:	01c50301 	biceq	r0, r5, r1, lsl #6
    20ac:	7ebb0320 	cdpvc	3, 11, cr0, cr11, cr0, {1}
    20b0:	01cb032e 	biceq	r0, fp, lr, lsr #6
    20b4:	7eb50320 	cdpvc	3, 11, cr0, cr5, cr0, {1}
    20b8:	01cb0320 	biceq	r0, fp, r0, lsr #6
    20bc:	207a032e 	rsbscs	r0, sl, lr, lsr #6
    20c0:	207a0326 	rsbscs	r0, sl, r6, lsr #6
    20c4:	09b00334 	ldmibeq	r0!, {r2, r4, r5, r8, r9}
    20c8:	20110390 	mulscs	r1, r0, r3
    20cc:	01040200 	mrseq	r0, R12_usr
    20d0:	032e7103 	teqeq	lr, #-1073741824	; 0xc0000000
    20d4:	1e4a76d7 	mcrne	6, 2, r7, cr10, cr7, {6}
    20d8:	a5032422 	strge	r2, [r3, #-1058]	; 0x422
    20dc:	dc032e09 	stcle	14, cr2, [r3], {9}
    20e0:	a4034a76 	strge	r4, [r3], #-2678	; 0xa76
    20e4:	db033c09 	blle	d1110 <_Min_Stack_Size+0xd0d10>
    20e8:	a5032e76 	strge	r2, [r3, #-3702]	; 0xe76
    20ec:	dc032009 	stcle	0, cr2, [r3], {9}
    20f0:	a4037476 	strge	r7, [r3], #-1142	; 0x476
    20f4:	e2032009 	and	r2, r3, #9
    20f8:	9e037476 	mcrls	4, 0, r7, cr3, cr6, {3}
    20fc:	fb032e09 	blx	cd92a <_Min_Stack_Size+0xcd52a>
    2100:	6f032e76 	svcvs	0x00032e76
    2104:	20110320 	andscs	r0, r1, r0, lsr #6
    2108:	2e0a0322 	cdpcs	3, 0, cr0, cr10, cr2, {1}
    210c:	08f80331 	ldmeq	r8!, {r0, r4, r5, r8, r9}^
    2110:	76d3034a 	ldrbvc	r0, [r3], sl, asr #6
    2114:	09ad03e4 	stmibeq	sp!, {r2, r5, r6, r7, r8, r9}
    2118:	76d30320 	ldrbvc	r0, [r3], r0, lsr #6
    211c:	09a90320 	stmibeq	r9!, {r5, r8, r9}
    2120:	200c032e 	andcs	r0, ip, lr, lsr #6
    2124:	2f3d21a0 	svccs	0x003d21a0
    2128:	2e13032f 	cdpcs	3, 1, cr0, cr3, cr15, {1}
    212c:	032e0e03 	teqeq	lr, #3, 28	; 0x30
    2130:	19032e0a 	stmdbne	r3, {r1, r3, r9, sl, fp, sp}
    2134:	4d226420 	cfstrsmi	mvf6, [r2, #-128]!	; 0xffffff80
    2138:	3c6d032b 	stclcc	3, cr0, [sp], #-172	; 0xffffff54
    213c:	24207a03 	strtcs	r7, [r0], #-2563	; 0xa03
    2140:	2e13034c 	cdpcs	3, 1, cr0, cr3, cr12, {2}
    2144:	2e76b303 	cdpcs	3, 7, cr11, cr6, cr3, {0}
    2148:	032e4203 	teqeq	lr, #805306368	; 0x30000000
    214c:	032000c1 	teqeq	r0, #193	; 0xc1
    2150:	b44a08f8 	strblt	r0, [sl], #-2296	; 0x8f8
    2154:	362e7803 	strtcc	r7, [lr], -r3, lsl #16
    2158:	2e76e003 	cdpcs	0, 7, cr14, cr6, cr3, {0}
    215c:	2009a003 	andcs	sl, r9, r3
    2160:	032e7403 	teqeq	lr, #50331648	; 0x3000000
    2164:	e003200c 	and	r2, r3, ip
    2168:	c7032076 	smlsdxgt	r3, r6, r0, r2
    216c:	5e032e09 	cdppl	14, 0, cr2, cr3, cr9, {0}
    2170:	2e0c0320 	cdpcs	3, 0, cr0, cr12, cr0, {1}
    2174:	302e6f03 	eorcc	r6, lr, r3, lsl #30
    2178:	2f2f3d21 	svccs	0x002f3d21
    217c:	302e0903 	eorcc	r0, lr, r3, lsl #18
    2180:	2e0e0336 	mcrcs	3, 0, r0, cr14, cr6, {1}
    2184:	03200a03 	teqeq	r0, #12288	; 0x3000
    2188:	302c2019 	eorcc	r2, ip, r9, lsl r0
    218c:	6d032b4d 	vstrvs	d2, [r3, #-308]	; 0xfffffecc
    2190:	207a033c 	rsbscs	r0, sl, ip, lsr r3
    2194:	49034c24 	stmdbmi	r3, {r2, r5, sl, fp, lr}
    2198:	0878032e 	ldmdaeq	r8!, {r1, r2, r3, r5, r8, r9}^
    219c:	76d90382 	ldrbvc	r0, [r9], r2, lsl #7
    21a0:	09a70382 	stmibeq	r7!, {r1, r7, r8, r9}
    21a4:	33032a20 	movwcc	r2, #14880	; 0x3a20
    21a8:	76aa0320 	strtvc	r0, [sl], r0, lsr #6
    21ac:	09b40320 	ldmibeq	r4!, {r5, r8, r9}
    21b0:	2176292e 	cmncs	r6, lr, lsr #18
    21b4:	032f2f3d 	teqeq	pc, #61, 30	; 0xf4
    21b8:	0e032e13 	mcreq	14, 0, r2, cr3, cr3, {0}
    21bc:	2e0a032e 	cdpcs	3, 0, cr0, cr10, cr14, {1}
    21c0:	2c201903 	stccs	9, cr1, [r0], #-12
    21c4:	032b4d30 	teqeq	fp, #48, 26	; 0xc00
    21c8:	7a033c6d 	bvc	d1384 <_Min_Stack_Size+0xd0f84>
    21cc:	034c2420 	movteq	r2, #50208	; 0xc420
    21d0:	0320769b 	teqeq	r0, #162529280	; 0x9b00000
    21d4:	033c09a4 	teqeq	ip, #164, 18	; 0x290000
    21d8:	032e76db 	teqeq	lr, #229638144	; 0xdb00000
    21dc:	3e2009a5 	cdpcc	9, 2, cr0, cr0, cr5, {5}
    21e0:	9e76da03 	vaddls.f32	s27, s12, s6
    21e4:	2009a603 	andcs	sl, r9, r3, lsl #12
    21e8:	2033032a 	eorscs	r0, r3, sl, lsr #6
    21ec:	2076ab03 	rsbscs	sl, r6, r3, lsl #22
    21f0:	2e09b303 	cdpcs	3, 0, cr11, cr9, cr3, {0}
    21f4:	3d21a029 	stccc	0, cr10, [r1, #-164]!	; 0xffffff5c
    21f8:	13032f2f 	movwne	r2, #16175	; 0x3f2f
    21fc:	2e0e032e 	cdpcs	3, 0, cr0, cr14, cr14, {1}
    2200:	03200a03 	teqeq	r0, #12288	; 0x3000
    2204:	302c2019 	eorcc	r2, ip, r9, lsl r0
    2208:	6d032b4d 	vstrvs	d2, [r3, #-308]	; 0xfffffecc
    220c:	207a033c 	rsbscs	r0, sl, ip, lsr r3
    2210:	bf034c24 	svclt	0x00034c24
    2214:	dc03207f 	stcle	0, cr2, [r3], {127}	; 0x7f
    2218:	a4034a76 	strge	r4, [r3], #-2678	; 0xa76
    221c:	363e2009 	ldrtcc	r2, [lr], -r9
    2220:	032e7803 	teqeq	lr, #196608	; 0x30000
    2224:	039076e0 	orrseq	r7, r0, #224, 12	; 0xe000000
    2228:	362009a0 	strtcc	r0, [r0], -r0, lsr #19
    222c:	033c7403 	teqeq	ip, #50331648	; 0x3000000
    2230:	2703200c 	strcs	r2, [r3, -ip]
    2234:	76b10320 	ldrtvc	r0, [r1], r0, lsr #6
    2238:	09ad0320 	stmibeq	sp!, {r5, r8, r9}
    223c:	2130372e 	teqcs	r0, lr, lsr #14
    2240:	032f2f3d 	teqeq	pc, #61, 30	; 0xf4
    2244:	0e032e13 	mcreq	14, 0, r2, cr3, cr3, {0}
    2248:	200a032e 	andcs	r0, sl, lr, lsr #6
    224c:	2c201903 	stccs	9, cr1, [r0], #-12
    2250:	032b5b30 	teqeq	fp, #48, 22	; 0xc000
    2254:	7a033c6d 	bvc	d1410 <_Min_Stack_Size+0xd1010>
    2258:	034c2420 	movteq	r2, #50208	; 0xc420
    225c:	0e022e49 	cdpeq	14, 0, cr2, cr2, cr9, {2}
    2260:	00010100 	andeq	r0, r1, r0, lsl #2
    2264:	27680205 	strbcs	r0, [r8, -r5, lsl #4]!
    2268:	b9030800 	stmdblt	r3, {fp}
    226c:	44210110 	strtmi	r0, [r1], #-272	; 0x110
    2270:	03202103 	teqeq	r0, #-1073741824	; 0xc0000000
    2274:	2103205f 	qaddcs	r2, pc, r3	; <UNPREDICTABLE>
    2278:	04020020 	streq	r0, [r2], #-32
    227c:	baac0602 	blt	feb03a8c <_estack+0xdead3a8c>
    2280:	02040200 	andeq	r0, r4, #0, 4
    2284:	5b0306ba 	blpl	c3d74 <_Min_Stack_Size+0xc3974>
    2288:	4a25034a 	bmi	942fb8 <_Min_Stack_Size+0x942bb8>
    228c:	01040200 	mrseq	r0, R12_usr
    2290:	00083c06 	andeq	r3, r8, r6, lsl #24
    2294:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2298:	0027f402 	eoreq	pc, r7, r2, lsl #8
    229c:	10f30308 	rscsne	r0, r3, r8, lsl #6
    22a0:	03232001 	teqeq	r3, #1
    22a4:	035d2e09 	cmpeq	sp, #9, 28	; 0x90
    22a8:	0c034a0d 	stceq	10, cr4, [r3], {13}
    22ac:	059d032e 	ldreq	r0, [sp, #814]	; 0x32e
    22b0:	e103222e 	tst	r3, lr, lsr #4
    22b4:	9f03207a 	svcls	0x0003207a
    22b8:	221e2005 	andscs	r2, lr, #5
    22bc:	033e6b28 	teqeq	lr, #40, 22	; 0xa000
    22c0:	eb033c74 	bl	d1498 <_Min_Stack_Size+0xd1098>
    22c4:	95033c7a 	strls	r3, [r3, #-3194]	; 0xc7a
    22c8:	d7032e05 	strle	r2, [r3, -r5, lsl #28]
    22cc:	14033c7a 	strne	r3, [r3], #-3194	; 0xc7a
    22d0:	2e6c033c 	mcrcs	3, 3, r0, cr12, cr12, {1}
    22d4:	01040200 	mrseq	r0, R12_usr
    22d8:	022e6003 	eoreq	r6, lr, #3
    22dc:	01010010 	tsteq	r1, r0, lsl r0
    22e0:	78020500 	stmdavc	r2, {r8, sl}
    22e4:	03080028 	movweq	r0, #32808	; 0x8028
    22e8:	200111ae 	andcs	r1, r1, lr, lsr #3
    22ec:	02002423 	andeq	r2, r0, #587202560	; 0x23000000
    22f0:	3c060104 	stfccs	f0, [r6], {4}
    22f4:	03354106 	teqeq	r5, #-2147483647	; 0x80000001
    22f8:	4f432079 	svcmi	0x00432079
    22fc:	034a0d03 	movteq	r0, #44291	; 0xad03
    2300:	db032e0c 	blle	cdb38 <_Min_Stack_Size+0xcd738>
    2304:	03222e04 	teqeq	r2, #4, 28	; 0x40
    2308:	03207ba3 	teqeq	r0, #166912	; 0x28c00
    230c:	1e2004dd 	mcrne	4, 1, r0, cr0, cr13, {6}
    2310:	3e6b2822 	cdpcc	8, 6, cr2, cr11, cr2, {1}
    2314:	01040200 	mrseq	r0, R12_usr
    2318:	3c7ae603 	ldclcc	6, cr14, [sl], #-12
    231c:	3c058e03 	stccc	14, cr8, [r5], {3}
    2320:	3c7bad03 	ldclcc	13, cr10, [fp], #-12
    2324:	2e04d303 	cdpcs	3, 0, cr13, cr4, cr3, {0}
    2328:	3c7b9903 	ldclcc	9, cr9, [fp], #-12
    232c:	033c1403 	teqeq	ip, #50331648	; 0x3000000
    2330:	00082e6c 	andeq	r2, r8, ip, ror #28
    2334:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2338:	00291402 	eoreq	r1, r9, r2, lsl #8
    233c:	11f20308 	mvnsne	r0, r8, lsl #6
    2340:	03232001 	teqeq	r3, #1
    2344:	035d200c 	cmpeq	sp, #12
    2348:	a7034a0d 	strge	r4, [r3, -sp, lsl #20]
    234c:	03222e04 	teqeq	r2, #4, 28	; 0x40
    2350:	03207bd7 	teqeq	r0, #220160	; 0x35c00
    2354:	1e2004a9 	cdpne	4, 2, cr0, cr0, cr9, {5}
    2358:	3e6b2822 	cdpcc	8, 6, cr2, cr11, cr2, {1}
    235c:	01040200 	mrseq	r0, R12_usr
    2360:	3c7baa03 	ldclcc	10, cr10, [fp], #-12
    2364:	3c04ca03 	stccc	10, cr12, [r4], {3}
    2368:	3c7bd803 	ldclcc	8, cr13, [fp], #-12
    236c:	2e04a803 	cdpcs	8, 0, cr10, cr4, cr3, {0}
    2370:	01000e02 	tsteq	r0, r2, lsl #28
    2374:	02050001 	andeq	r0, r5, #1
    2378:	08002980 	stmdaeq	r0, {r7, r8, fp, sp}
    237c:	01129d03 	tsteq	r2, r3, lsl #26
    2380:	2f201103 	svccs	0x00201103
    2384:	4b3e5a2f 	blmi	f98c48 <_Min_Stack_Size+0xf98848>
    2388:	03d60903 	bicseq	r0, r6, #49152	; 0xc000
    238c:	244e5809 	strbcs	r5, [lr], #-2057	; 0x809
    2390:	00206c03 	eoreq	r6, r0, r3, lsl #24
    2394:	03010402 	movweq	r0, #5122	; 0x1402
    2398:	0f025874 	svceq	0x00025874
    239c:	00010100 	andeq	r0, r1, r0, lsl #2
    23a0:	29fc0205 	ldmibcs	ip!, {r0, r2, r9}^
    23a4:	d3030800 	movwle	r0, #14336	; 0x3800
    23a8:	43260112 	teqmi	r6, #-2147483644	; 0x80000004
    23ac:	1b26411c 	blne	992824 <_Min_Stack_Size+0x992424>
    23b0:	03d83d33 	bicseq	r3, r8, #3264	; 0xcc0
    23b4:	244e580a 	strbcs	r5, [lr], #-2058	; 0x80a
    23b8:	01040200 	mrseq	r0, R12_usr
    23bc:	00205d03 	eoreq	r5, r0, r3, lsl #26
    23c0:	44010402 	strmi	r0, [r1], #-1026	; 0x402
    23c4:	01000d02 	tsteq	r0, r2, lsl #26
    23c8:	02050001 	andeq	r0, r5, #1
    23cc:	08002a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, sp}
    23d0:	01138003 	tsteq	r3, r3
    23d4:	1f212121 	svcne	0x00212121
    23d8:	04020021 	streq	r0, [r2], #-33	; 0x21
    23dc:	07024801 	streq	r4, [r2, -r1, lsl #16]
    23e0:	00010100 	andeq	r0, r1, r0, lsl #2
    23e4:	2a8c0205 	bcs	fe302c00 <_estack+0xde2d2c00>
    23e8:	88030800 	stmdahi	r3, {fp}
    23ec:	1d230113 	stfnes	f0, [r3, #-76]!	; 0xffffffb4
    23f0:	03222123 	teqeq	r2, #-1073741816	; 0xc0000008
    23f4:	7a032e09 	bvc	cdc20 <_Min_Stack_Size+0xcd820>
    23f8:	7a032620 	bvc	cbc80 <_Min_Stack_Size+0xcb880>
    23fc:	00272620 	eoreq	r2, r7, r0, lsr #12
    2400:	06010402 	streq	r0, [r1], -r2, lsl #8
    2404:	3f360666 	svccc	0x00360666
    2408:	212e5903 	teqcs	lr, r3, lsl #18
    240c:	22202603 	eorcs	r2, r0, #3145728	; 0x300000
    2410:	03205803 	teqeq	r0, #196608	; 0x30000
    2414:	03312e2f 	teqeq	r1, #752	; 0x2f0
    2418:	0e032e6f 	cdpeq	14, 0, cr2, cr3, cr15, {3}
    241c:	64033120 	strvs	r3, [r3], #-288	; 0x120
    2420:	2019032e 	andscs	r0, r9, lr, lsr #6
    2424:	04020031 	streq	r0, [r2], #-49	; 0x31
    2428:	2e570301 	cdpcs	3, 5, cr0, cr7, cr1, {0}
    242c:	01040200 	mrseq	r0, R12_usr
    2430:	0008023b 	andeq	r0, r8, fp, lsr r2
    2434:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2438:	002afc02 	eoreq	pc, sl, r2, lsl #24
    243c:	13b90308 			; <UNDEFINED> instruction: 0x13b90308
    2440:	06021301 	streq	r1, [r2], -r1, lsl #6
    2444:	00010100 	andeq	r0, r1, r0, lsl #2
    2448:	2b080205 	blcs	202c64 <_Min_Stack_Size+0x202864>
    244c:	c1030800 	tstgt	r3, r0, lsl #16
    2450:	23160113 	tstcs	r6, #-1073741820	; 0xc0000004
    2454:	00010228 	andeq	r0, r1, r8, lsr #4
    2458:	05000101 	streq	r0, [r0, #-257]	; 0x101
    245c:	002b1002 	eoreq	r1, fp, r2
    2460:	13d80308 	bicsne	r0, r8, #8, 6	; 0x20000000
    2464:	02231501 	eoreq	r1, r3, #4194304	; 0x400000
    2468:	01010002 	tsteq	r1, r2
    246c:	18020500 	stmdane	r2, {r8, sl}
    2470:	0308002b 	movweq	r0, #32811	; 0x802b
    2474:	180118ad 	stmdane	r1, {r0, r2, r3, r5, r7, fp, ip}
    2478:	00040231 	andeq	r0, r4, r1, lsr r2
    247c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2480:	002b2402 	eoreq	r2, fp, r2, lsl #8
    2484:	18be0308 	ldmne	lr!, {r3, r8, r9}
    2488:	3e421501 	cdpcc	5, 4, cr1, cr2, cr1, {0}
    248c:	034a7a03 	movteq	r7, #43523	; 0xaa03
    2490:	0502200f 	streq	r2, [r2, #-15]
    2494:	00010100 	andeq	r0, r1, r0, lsl #2
    2498:	2b440205 	blcs	1102cb4 <_Min_Stack_Size+0x11028b4>
    249c:	da030800 	ble	c44a4 <_Min_Stack_Size+0xc40a4>
    24a0:	30250118 	eorcc	r0, r5, r8, lsl r1
    24a4:	09033e6b 	stmdbeq	r3, {r0, r1, r3, r5, r6, r9, sl, fp, ip, sp}
    24a8:	82120358 	andshi	r0, r2, #88, 6	; 0x60000001
    24ac:	034a7003 	movteq	r7, #40963	; 0xa003
    24b0:	1f214a0a 	svcne	0x00214a0a
    24b4:	00211f21 	eoreq	r1, r1, r1, lsr #30
    24b8:	06010402 	streq	r0, [r1], -r2, lsl #8
    24bc:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    24c0:	02002002 	andeq	r2, r0, #2
    24c4:	03060204 	movweq	r0, #25092	; 0x6204
    24c8:	02005813 	andeq	r5, r0, #1245184	; 0x130000
    24cc:	6d030204 	sfmvs	f0, 4, [r3, #-16]
    24d0:	0008022e 	andeq	r0, r8, lr, lsr #4
    24d4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    24d8:	002bb402 	eoreq	fp, fp, r2, lsl #8
    24dc:	19990308 	ldmibne	r9, {r3, r8, r9}
    24e0:	4e302301 	cdpmi	3, 3, cr2, cr0, cr1, {0}
    24e4:	1c4a1003 	mcrrne	0, 0, r1, sl, cr3
    24e8:	03200c03 	teqeq	r0, #768	; 0x300
    24ec:	22242074 	eorcs	r2, r4, #116	; 0x74
    24f0:	9e0b0350 	mcrls	3, 0, r0, cr11, cr0, {2}
    24f4:	022e7503 	eoreq	r7, lr, #12582912	; 0xc00000
    24f8:	01010008 	tsteq	r1, r8
    24fc:	04020500 	streq	r0, [r2], #-1280	; 0x500
    2500:	0308002c 	movweq	r0, #32812	; 0x802c
    2504:	15011bcd 	strne	r1, [r1, #-3021]	; 0xbcd
    2508:	4d242a32 	vstmdbmi	r4!, {s4-s53}
    250c:	01000302 	tsteq	r0, r2, lsl #6
    2510:	0003bd01 	andeq	fp, r3, r1, lsl #26
    2514:	be000200 	cdplt	2, 0, cr0, cr0, cr0, {0}
    2518:	02000001 	andeq	r0, r0, #1
    251c:	0d0efb01 	vstreq	d15, [lr, #-4]
    2520:	01010100 	mrseq	r0, (UNDEF: 17)
    2524:	00000001 	andeq	r0, r0, r1
    2528:	01000001 	tsteq	r0, r1
    252c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2478 <_Min_Stack_Size+0x2078>
    2530:	656c2f65 	strbvs	r2, [ip, #-3941]!	; 0xf65
    2534:	2f616c69 	svccs	0x00616c69
    2538:	6b736544 	blvs	1cdba50 <_Min_Stack_Size+0x1cdb650>
    253c:	2f706f74 	svccs	0x00706f74
    2540:	616e6966 	cmnvs	lr, r6, ror #18
    2544:	72705f6c 	rsbsvc	r5, r0, #108, 30	; 0x1b0
    2548:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
    254c:	30325f74 	eorscc	r5, r2, r4, ror pc
    2550:	6d653531 	cfstr64vs	mvdx3, [r5, #-196]!	; 0xffffff3c
    2554:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    2558:	612f6465 	teqvs	pc, r5, ror #8
    255c:	426f7475 	rsbmi	r7, pc, #1962934272	; 0x75000000
    2560:	0074616f 	rsbseq	r6, r4, pc, ror #2
    2564:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    2568:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    256c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    2570:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    2574:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    2578:	61652d65 	cmnvs	r5, r5, ror #26
    257c:	342f6962 	strtcc	r6, [pc], #-2402	; 2584 <_Min_Stack_Size+0x2184>
    2580:	692f382e 	stmdbvs	pc!, {r1, r2, r3, r5, fp, ip, sp}	; <UNPREDICTABLE>
    2584:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2588:	2f006564 	svccs	0x00006564
    258c:	2f727375 	svccs	0x00727375
    2590:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2594:	2f656475 	svccs	0x00656475
    2598:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    259c:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 2400 <_Min_Stack_Size+0x2000>
    25a0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    25a4:	2f00656e 	svccs	0x0000656e
    25a8:	2f727375 	svccs	0x00727375
    25ac:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    25b0:	2f656475 	svccs	0x00656475
    25b4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    25b8:	2f006269 	svccs	0x00006269
    25bc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
    25c0:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
    25c4:	442f616c 	strtmi	r6, [pc], #-364	; 25cc <_Min_Stack_Size+0x21cc>
    25c8:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    25cc:	662f706f 	strtvs	r7, [pc], -pc, rrx
    25d0:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
    25d4:	6f72705f 	svcvs	0x0072705f
    25d8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    25dc:	3130325f 	teqcc	r0, pc, asr r2
    25e0:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
    25e4:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    25e8:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
    25ec:	6f426f74 	svcvs	0x00426f74
    25f0:	692f7461 	stmdbvs	pc!, {r0, r5, r6, sl, ip, sp, lr}	; <UNPREDICTABLE>
    25f4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    25f8:	2f006564 	svccs	0x00006564
    25fc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
    2600:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
    2604:	442f616c 	strtmi	r6, [pc], #-364	; 260c <_Min_Stack_Size+0x220c>
    2608:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    260c:	662f706f 	strtvs	r7, [pc], -pc, rrx
    2610:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
    2614:	6f72705f 	svcvs	0x0072705f
    2618:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    261c:	3130325f 	teqcc	r0, pc, asr r2
    2620:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
    2624:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    2628:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
    262c:	6f426f74 	svcvs	0x00426f74
    2630:	702f7461 	eorvc	r7, pc, r1, ror #8
    2634:	6174726f 	cmnvs	r4, pc, ror #4
    2638:	2f656c62 	svccs	0x00656c62
    263c:	2f434347 	svccs	0x00434347
    2640:	5f4d5241 	svcpl	0x004d5241
    2644:	46344d43 	ldrtmi	r4, [r4], -r3, asr #26
    2648:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
    264c:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
    2650:	0100632e 	tsteq	r0, lr, lsr #6
    2654:	74730000 	ldrbtvc	r0, [r3], #-0
    2658:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    265c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2660:	645f0000 	ldrbvs	r0, [pc], #-0	; 2668 <_Min_Stack_Size+0x2268>
    2664:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    2668:	745f746c 	ldrbvc	r7, [pc], #-1132	; 2670 <_Min_Stack_Size+0x2270>
    266c:	73657079 	cmnvc	r5, #121	; 0x79
    2670:	0300682e 	movweq	r6, #2094	; 0x82e
    2674:	74730000 	ldrbtvc	r0, [r3], #-0
    2678:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    267c:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    2680:	72700000 	rsbsvc	r0, r0, #0
    2684:	65646a6f 	strbvs	r6, [r4, #-2671]!	; 0xa6f
    2688:	682e7366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
    268c:	00000500 	andeq	r0, r0, r0, lsl #10
    2690:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
    2694:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
    2698:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    269c:	6c000006 	stcvs	0, cr0, [r0], {6}
    26a0:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
    26a4:	00050068 	andeq	r0, r5, r8, rrx
    26a8:	73617400 	cmnvc	r1, #0, 8
    26ac:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    26b0:	71000005 	tstvc	r0, r5
    26b4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    26b8:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    26bc:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
    26c0:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
    26c4:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    26c8:	6f700000 	svcvs	0x00700000
    26cc:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
    26d0:	682e656c 	stmdavs	lr!, {r2, r3, r5, r6, r8, sl, sp, lr}
    26d4:	00000500 	andeq	r0, r0, r0, lsl #10
    26d8:	02050000 	andeq	r0, r5, #0
    26dc:	08002c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, sp}
    26e0:	0101ec03 	tsteq	r1, r3, lsl #24
    26e4:	20049003 	andcs	r9, r4, r3
    26e8:	207bf003 	rsbscs	pc, fp, r3
    26ec:	20048e03 	andcs	r8, r4, r3, lsl #28
    26f0:	2e1b0330 	mrccs	3, 0, r0, cr11, cr0, {1}
    26f4:	2e7bde03 	cdpcs	14, 7, cr13, cr11, cr3, {0}
    26f8:	032e0b03 	teqeq	lr, #3072	; 0xc00
    26fc:	0322ba09 	teqeq	r2, #36864	; 0x9000
    2700:	212e03f3 	strdcs	r0, [lr, -r3]!
    2704:	213d3d1f 	teqcs	sp, pc, lsl sp
    2708:	213b221f 	teqcs	fp, pc, lsl r2
    270c:	0e03263d 	mcreq	6, 0, r2, cr3, cr13, {1}
    2710:	7bde033c 	blvc	ff783408 <_estack+0xdf753408>
    2714:	3c14032e 	ldccc	3, cr0, [r4], {46}	; 0x2e
    2718:	3c03fa03 	stccc	10, cr15, [r3], {3}
    271c:	01001402 	tsteq	r0, r2, lsl #8
    2720:	02050001 	andeq	r0, r5, #1
    2724:	08002cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, sp}
    2728:	01028f03 	tsteq	r2, r3, lsl #30
    272c:	40201c32 	eormi	r1, r0, r2, lsr ip
    2730:	e2033d26 	and	r3, r3, #2432	; 0x980
    2734:	301e2e03 	andscc	r2, lr, r3, lsl #28
    2738:	03581b03 	cmpeq	r8, #3072	; 0xc00
    273c:	1c2e7c8e 	stcne	12, cr7, [lr], #-568	; 0xfffffdc8
    2740:	212f212f 	teqcs	pc, pc, lsr #2
    2744:	3c0e0321 	stccc	3, cr0, [lr], {33}	; 0x21
    2748:	03cd0347 	biceq	r0, sp, #469762049	; 0x1c000001
    274c:	4b2d213c 	blmi	b4ac44 <_Min_Stack_Size+0xb4a844>
    2750:	222d2f3d 	eorcs	r2, sp, #61, 30	; 0xf4
    2754:	263d2f3b 	shasxcs	r2, sp, fp
    2758:	024a7a03 	subeq	r7, sl, #12288	; 0x3000
    275c:	0101000f 	tsteq	r1, pc
    2760:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    2764:	0308002d 	movweq	r0, #32813	; 0x802d
    2768:	260102b8 			; <UNDEFINED> instruction: 0x260102b8
    276c:	262e7a03 	strtcs	r7, [lr], -r3, lsl #20
    2770:	21211c27 	teqcs	r1, r7, lsr #24
    2774:	03502222 	cmpeq	r0, #536870914	; 0x20000002
    2778:	75036610 	strvc	r6, [r3, #-1552]	; 0x610
    277c:	660b032e 	strvs	r0, [fp], -lr, lsr #6
    2780:	032e6c03 	teqeq	lr, #768	; 0x300
    2784:	5c036614 	stcpl	6, cr6, [r3], {20}
    2788:	2024032e 	eorcs	r0, r4, lr, lsr #6
    278c:	01000502 	tsteq	r0, r2, lsl #10
    2790:	02050001 	andeq	r0, r5, #1
    2794:	08002db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, sp}
    2798:	01039603 	tsteq	r3, r3, lsl #12
    279c:	01040200 	mrseq	r0, R12_usr
    27a0:	7400d703 	strvc	sp, [r0], #-1795	; 0x703
    27a4:	01040200 	mrseq	r0, R12_usr
    27a8:	42033067 	andmi	r3, r3, #103	; 0x67
    27ac:	00cf033c 	sbceq	r0, pc, ip, lsr r3	; <UNPREDICTABLE>
    27b0:	2248302e 	subcs	r3, r8, #46	; 0x2e
    27b4:	03200a03 	teqeq	r0, #12288	; 0x3000
    27b8:	03207fb0 	teqeq	r0, #176, 30	; 0x2c0
    27bc:	035a4a0d 	cmpeq	sl, #53248	; 0xd000
    27c0:	035800f7 	cmpeq	r8, #247	; 0xf7
    27c4:	2240821a 	subcs	r8, r0, #-1610612735	; 0xa0000001
    27c8:	7f9b0331 	svcvc	0x009b0331
    27cc:	223a303c 	eorscs	r3, sl, #60	; 0x3c
    27d0:	032e0a03 	teqeq	lr, #12288	; 0x3000
    27d4:	120801a1 	andne	r0, r8, #1073741864	; 0x40000028
    27d8:	234a1903 	movtcs	r1, #43267	; 0xa903
    27dc:	3e5e321d 	mrccc	2, 2, r3, cr14, cr13, {0}
    27e0:	033c7203 	teqeq	ip, #805306368	; 0x30000000
    27e4:	034b4a2b 	movteq	r4, #47659	; 0xba2b
    27e8:	033c7e84 	teqeq	ip, #132, 28	; 0x840
    27ec:	033c7ecc 	teqeq	ip, #204, 28	; 0xcc0
    27f0:	233c0386 	teqcs	ip, #402653186	; 0x18000002
    27f4:	3e5e321d 	mrccc	2, 2, r3, cr14, cr13, {0}
    27f8:	033c7203 	teqeq	ip, #805306368	; 0x30000000
    27fc:	9d034a2b 	vstrls	s8, [r3, #-172]	; 0xffffff54
    2800:	e303207e 	movw	r2, #12414	; 0x307e
    2804:	033d2e01 	teqeq	sp, #1, 28
    2808:	032e7deb 	teqeq	lr, #15040	; 0x3ac0
    280c:	2f3c01ff 	svccs	0x003c01ff
    2810:	1f221e32 	svcne	0x00221e32
    2814:	322f4521 	eorcc	r4, pc, #138412032	; 0x8400000
    2818:	0321211e 	teqeq	r1, #-2147483641	; 0x80000007
    281c:	03587df2 	cmpeq	r8, #15488	; 0x3c80
    2820:	b1033c6d 	tstlt	r3, sp, ror #24
    2824:	5d4e2e7f 	stclpl	14, cr2, [lr, #-508]	; 0xfffffe04
    2828:	034a1803 	movteq	r1, #43011	; 0xa803
    282c:	31587fad 	cmpcc	r8, sp, lsr #31
    2830:	30242f2f 	eorcc	r2, r4, pc, lsr #30
    2834:	74039c03 	strvc	r9, [r3], #-3075	; 0xc03
    2838:	587cd903 	ldmdapl	ip!, {r0, r1, r8, fp, ip, lr, pc}^
    283c:	242f2f31 	strtcs	r2, [pc], #-3889	; 2844 <_Min_Stack_Size+0x2444>
    2840:	039c0330 	orrseq	r0, ip, #48, 6	; 0xc0000000
    2844:	7d990374 	ldcvc	3, cr0, [r9, #464]	; 0x1d0
    2848:	019a0366 	orrseq	r0, sl, r6, ror #6
    284c:	7ee6032e 	cdpvc	3, 14, cr0, cr6, cr14, {1}
    2850:	019c032e 	orrseq	r0, ip, lr, lsr #6
    2854:	03311d2e 	teqeq	r1, #2944	; 0xb80
    2858:	6a03201a 	bvs	ca8c8 <_Min_Stack_Size+0xca4c8>
    285c:	7ea00366 	cdpvc	3, 10, cr0, cr0, cr6, {3}
    2860:	2f21314a 	svccs	0x0021314a
    2864:	3a033032 	bcc	ce934 <_Min_Stack_Size+0xce534>
    2868:	01fc0374 	mvnseq	r0, r4, ror r3
    286c:	7f990358 	svcvc	0x00990358
    2870:	00e7032e 	rsceq	r0, r7, lr, lsr #6
    2874:	7f9b0320 	svcvc	0x009b0320
    2878:	24231d20 	strtcs	r1, [r3], #-3360	; 0xd20
    287c:	4a00e503 	bmi	3bc90 <_Min_Stack_Size+0x3b890>
    2880:	03914c3f 	orrseq	r4, r1, #16128	; 0x3f00
    2884:	282f6616 	stmdacs	pc!, {r1, r2, r4, r9, sl, sp, lr}	; <UNPREDICTABLE>
    2888:	207ef203 	rsbscs	pc, lr, r3, lsl #4
    288c:	03200c03 	teqeq	r0, #768	; 0x300
    2890:	03212e71 	teqeq	r1, #1808	; 0x710
    2894:	0e03200e 	cdpeq	0, 0, cr2, cr3, cr14, {0}
    2898:	ba72034a 	blt	1c835c8 <_Min_Stack_Size+0x1c831c8>
    289c:	4a09036b 	bmi	243650 <_Min_Stack_Size+0x243250>
    28a0:	03587203 	cmpeq	r8, #805306368	; 0x30000000
    28a4:	026600fa 	rsbeq	r0, r6, #250	; 0xfa
    28a8:	01010005 	tsteq	r1, r5
    28ac:	90020500 	andls	r0, r2, r0, lsl #10
    28b0:	03080030 	movweq	r0, #32816	; 0x8030
    28b4:	2001069c 	mulcs	r1, ip, r6
    28b8:	314c3325 	cmpcc	ip, r5, lsr #6
    28bc:	01000202 	tsteq	r0, r2, lsl #4
    28c0:	02050001 	andeq	r0, r5, #1
    28c4:	080030a8 	stmdaeq	r0, {r3, r5, r7, ip, sp}
    28c8:	0106af03 	tsteq	r6, r3, lsl #30
    28cc:	00020216 	andeq	r0, r2, r6, lsl r2
    28d0:	02d80101 	sbcseq	r0, r8, #1073741824	; 0x40000000
    28d4:	00020000 	andeq	r0, r2, r0
    28d8:	00000122 	andeq	r0, r0, r2, lsr #2
    28dc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    28e0:	0101000d 	tsteq	r1, sp
    28e4:	00000101 	andeq	r0, r0, r1, lsl #2
    28e8:	00000100 	andeq	r0, r0, r0, lsl #2
    28ec:	6f682f01 	svcvs	0x00682f01
    28f0:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 2744 <_Min_Stack_Size+0x2344>
    28f4:	616c6965 	cmnvs	ip, r5, ror #18
    28f8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    28fc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2900:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
    2904:	705f6c61 	subsvc	r6, pc, r1, ror #24
    2908:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    290c:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
    2910:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
    2914:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    2918:	2f646564 	svccs	0x00646564
    291c:	6f747561 	svcvs	0x00747561
    2920:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
    2924:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
    2928:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    292c:	43472f65 	movtmi	r2, #32613	; 0x7f65
    2930:	52412f43 	subpl	r2, r1, #268	; 0x10c
    2934:	4d435f4d 	stclmi	15, cr5, [r3, #-308]	; 0xfffffecc
    2938:	2f004634 	svccs	0x00004634
    293c:	2f727375 	svccs	0x00727375
    2940:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2944:	2f656475 	svccs	0x00656475
    2948:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    294c:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 27b0 <_Min_Stack_Size+0x23b0>
    2950:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    2954:	2f00656e 	svccs	0x0000656e
    2958:	2f727375 	svccs	0x00727375
    295c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    2960:	2f656475 	svccs	0x00656475
    2964:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    2968:	2f006269 	svccs	0x00006269
    296c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
    2970:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
    2974:	442f616c 	strtmi	r6, [pc], #-364	; 297c <_Min_Stack_Size+0x257c>
    2978:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    297c:	662f706f 	strtvs	r7, [pc], -pc, rrx
    2980:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
    2984:	6f72705f 	svcvs	0x0072705f
    2988:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    298c:	3130325f 	teqcc	r0, pc, asr r2
    2990:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
    2994:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    2998:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
    299c:	6f426f74 	svcvs	0x00426f74
    29a0:	692f7461 	stmdbvs	pc!, {r0, r5, r6, sl, ip, sp, lr}	; <UNPREDICTABLE>
    29a4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    29a8:	00006564 	andeq	r6, r0, r4, ror #10
    29ac:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
    29b0:	0100632e 	tsteq	r0, lr, lsr #6
    29b4:	645f0000 	ldrbvs	r0, [pc], #-0	; 29bc <_Min_Stack_Size+0x25bc>
    29b8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    29bc:	745f746c 	ldrbvc	r7, [pc], #-1132	; 29c4 <_Min_Stack_Size+0x25c4>
    29c0:	73657079 	cmnvc	r5, #121	; 0x79
    29c4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    29c8:	74730000 	ldrbtvc	r0, [r3], #-0
    29cc:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    29d0:	0300682e 	movweq	r6, #2094	; 0x82e
    29d4:	72700000 	rsbsvc	r0, r0, #0
    29d8:	65646a6f 	strbvs	r6, [r4, #-2671]!	; 0xa6f
    29dc:	682e7366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
    29e0:	00000400 	andeq	r0, r0, r0, lsl #8
    29e4:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
    29e8:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
    29ec:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    29f0:	74000001 	strvc	r0, [r0], #-1
    29f4:	2e6b7361 	cdpcs	3, 6, cr7, cr11, cr1, {3}
    29f8:	00040068 	andeq	r0, r4, r8, rrx
    29fc:	05000000 	streq	r0, [r0, #-0]
    2a00:	0030ac02 	eorseq	sl, r0, r2, lsl #24
    2a04:	02970308 	addseq	r0, r7, #8, 6	; 0x20000000
    2a08:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
    2a0c:	00010100 	andeq	r0, r1, r0, lsl #2
    2a10:	30c80205 	sbccc	r0, r8, r5, lsl #4
    2a14:	a3030800 	movwge	r0, #14336	; 0x3800
    2a18:	99030102 	stmdbls	r3, {r1, r8}
    2a1c:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
    2a20:	0101000a 	tsteq	r1, sl
    2a24:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    2a28:	03080030 	movweq	r0, #32816	; 0x8030
    2a2c:	030105c6 	movweq	r0, #5574	; 0x15c6
    2a30:	03017c92 	movweq	r7, #7314	; 0x1c92
    2a34:	2c1e200c 	ldccs	0, cr2, [lr], {12}
    2a38:	032e0d03 	teqeq	lr, #3, 26	; 0xc0
    2a3c:	2a362e73 	bcs	d8e410 <_Min_Stack_Size+0xd8e010>
    2a40:	332e0903 	teqcc	lr, #49152	; 0xc000
    2a44:	01000602 	tsteq	r0, r2, lsl #12
    2a48:	02050001 	andeq	r0, r5, #1
    2a4c:	08003108 	stmdaeq	r0, {r3, r8, ip, sp}
    2a50:	01028403 	tsteq	r2, r3, lsl #8
    2a54:	00100213 	andseq	r0, r0, r3, lsl r2
    2a58:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2a5c:	00312802 	eorseq	r2, r1, r2, lsl #16
    2a60:	02930308 	addseq	r0, r3, #8, 6	; 0x20000000
    2a64:	00f00301 	rscseq	r0, r0, r1, lsl #6
    2a68:	2f4e1401 	svccs	0x004e1401
    2a6c:	01000602 	tsteq	r0, r2, lsl #12
    2a70:	02050001 	andeq	r0, r5, #1
    2a74:	08003140 	stmdaeq	r0, {r6, r8, ip, sp}
    2a78:	0103a303 	tsteq	r3, r3, lsl #6
    2a7c:	740c0313 	strvc	r0, [ip], #-787	; 0x313
    2a80:	01000102 	tsteq	r0, r2, lsl #2
    2a84:	02050001 	andeq	r0, r5, #1
    2a88:	08003150 	stmdaeq	r0, {r4, r6, r8, ip, sp}
    2a8c:	0101f603 	tsteq	r1, r3, lsl #12
    2a90:	04020027 	streq	r0, [r2], #-39	; 0x27
    2a94:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    2a98:	0006023d 	andeq	r0, r6, sp, lsr r2
    2a9c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2aa0:	00316c02 	eorseq	r6, r1, r2, lsl #24
    2aa4:	02fb0308 	rscseq	r0, fp, #8, 6	; 0x20000000
    2aa8:	02002301 	andeq	r2, r0, #67108864	; 0x4000000
    2aac:	58060104 	stmdapl	r6, {r2, r8}
    2ab0:	01000602 	tsteq	r0, r2, lsl #12
    2ab4:	02050001 	andeq	r0, r5, #1
    2ab8:	08003184 	stmdaeq	r0, {r2, r7, r8, ip, sp}
    2abc:	01038f03 	tsteq	r3, r3, lsl #30
    2ac0:	2f4b2f21 	svccs	0x004b2f21
    2ac4:	01000502 	tsteq	r0, r2, lsl #10
    2ac8:	02050001 	andeq	r0, r5, #1
    2acc:	080031a0 	stmdaeq	r0, {r5, r7, r8, ip, sp}
    2ad0:	0103b403 	tsteq	r3, r3, lsl #8
    2ad4:	00030213 	andeq	r0, r3, r3, lsl r2
    2ad8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2adc:	0031a802 	eorseq	sl, r1, r2, lsl #16
    2ae0:	03be0308 			; <UNDEFINED> instruction: 0x03be0308
    2ae4:	015a0301 	cmpeq	sl, r1, lsl #6
    2ae8:	002f3d21 	eoreq	r3, pc, r1, lsr #26
    2aec:	2c010402 	cfstrscs	mvf0, [r1], {2}
    2af0:	05022c42 	streq	r2, [r2, #-3138]	; 0xc42
    2af4:	00010100 	andeq	r0, r1, r0, lsl #2
    2af8:	31cc0205 	biccc	r0, ip, r5, lsl #4
    2afc:	c2030800 	andgt	r0, r3, #0, 16
    2b00:	02150103 	andseq	r0, r5, #-1073741824	; 0xc0000000
    2b04:	0101002c 	tsteq	r1, ip, lsr #32
    2b08:	24020500 	strcs	r0, [r2], #-1280	; 0x500
    2b0c:	03080032 	movweq	r0, #32818	; 0x8032
    2b10:	160103f6 			; <UNDEFINED> instruction: 0x160103f6
    2b14:	4d403125 	stfmie	f3, [r0, #-148]	; 0xffffff6c
    2b18:	05022d21 	streq	r2, [r2, #-3361]	; 0xd21
    2b1c:	00010100 	andeq	r0, r1, r0, lsl #2
    2b20:	32480205 	subcc	r0, r8, #1342177280	; 0x50000000
    2b24:	aa030800 	bge	c4b2c <_Min_Stack_Size+0xc472c>
    2b28:	0b030105 	bleq	c2f44 <_Min_Stack_Size+0xc2b44>
    2b2c:	74034b01 	strvc	r4, [r3], #-2817	; 0xb01
    2b30:	200b0320 	andcs	r0, fp, r0, lsr #6
    2b34:	2d221f4b 	stccs	15, cr1, [r2, #-300]!	; 0xfffffed4
    2b38:	00090221 	andeq	r0, r9, r1, lsr #4
    2b3c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2b40:	00327802 	eorseq	r7, r2, r2, lsl #16
    2b44:	02aa0308 	adceq	r0, sl, #8, 6	; 0x20000000
    2b48:	20110301 	andscs	r0, r1, r1, lsl #6
    2b4c:	03200a03 	teqeq	r0, #12288	; 0x3000
    2b50:	0e032076 	mcreq	0, 0, r2, cr3, cr6, {3}
    2b54:	20610320 	rsbcs	r0, r1, r0, lsr #6
    2b58:	24201103 	strtcs	r1, [r0], #-259	; 0x103
    2b5c:	4d23241c 	cfstrsmi	mvf2, [r3, #-112]!	; 0xffffff90
    2b60:	1c322933 	ldcne	9, cr2, [r2], #-204	; 0xffffff34
    2b64:	4d211f25 	stcmi	15, cr1, [r1, #-148]!	; 0xffffff6c
    2b68:	660d0363 	strvs	r0, [sp], -r3, ror #6
    2b6c:	20760333 	rsbscs	r0, r6, r3, lsr r3
    2b70:	241c3221 	ldrcs	r3, [ip], #-545	; 0x221
    2b74:	314e4b25 	cmpcc	lr, r5, lsr #22
    2b78:	345b313f 	ldrbcc	r3, [fp], #-319	; 0x13f
    2b7c:	01000f02 	tsteq	r0, r2, lsl #30
    2b80:	02050001 	andeq	r0, r5, #1
    2b84:	08003324 	stmdaeq	r0, {r2, r5, r8, r9, ip, sp}
    2b88:	0105cc03 	tsteq	r5, r3, lsl #24
    2b8c:	03313125 	teqeq	r1, #1073741833	; 0x40000009
    2b90:	67032019 	smladvs	r3, r9, r0, r2
    2b94:	20190320 	andscs	r0, r9, r0, lsr #6
    2b98:	003c1003 	eorseq	r1, ip, r3
    2b9c:	06010402 	streq	r0, [r1], -r2, lsl #8
    2ba0:	04020090 	streq	r0, [r2], #-144	; 0x90
    2ba4:	70030601 	andvc	r0, r3, r1, lsl #12
    2ba8:	000b023c 	andeq	r0, fp, ip, lsr r2
    2bac:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    2bb0:	00020000 	andeq	r0, r2, r0
    2bb4:	00000192 	muleq	r0, r2, r1
    2bb8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2bbc:	0101000d 	tsteq	r1, sp
    2bc0:	00000101 	andeq	r0, r0, r1, lsl #2
    2bc4:	00000100 	andeq	r0, r0, r0, lsl #2
    2bc8:	6f682f01 	svcvs	0x00682f01
    2bcc:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 2a20 <_Min_Stack_Size+0x2620>
    2bd0:	616c6965 	cmnvs	ip, r5, ror #18
    2bd4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2bd8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2bdc:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
    2be0:	705f6c61 	subsvc	r6, pc, r1, ror #24
    2be4:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    2be8:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
    2bec:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
    2bf0:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    2bf4:	2f646564 	svccs	0x00646564
    2bf8:	6f747561 	svcvs	0x00747561
    2bfc:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
    2c00:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
    2c04:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    2c08:	654d2f65 	strbvs	r2, [sp, #-3941]	; 0xf65
    2c0c:	6e614d6d 	cdpvs	13, 6, cr4, cr1, cr13, {3}
    2c10:	752f0067 	strvc	r0, [pc, #-103]!	; 2bb1 <_Min_Stack_Size+0x27b1>
    2c14:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 2a50 <_Min_Stack_Size+0x2650>
    2c18:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    2c1c:	612f6363 	teqvs	pc, r3, ror #6
    2c20:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    2c24:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    2c28:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    2c2c:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
    2c30:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2c34:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2c38:	73752f00 	cmnvc	r5, #0, 30
    2c3c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    2c40:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    2c44:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    2c48:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2c4c:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    2c50:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    2c54:	73752f00 	cmnvc	r5, #0, 30
    2c58:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    2c5c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    2c60:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    2c64:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2c68:	6f682f00 	svcvs	0x00682f00
    2c6c:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 2ac0 <_Min_Stack_Size+0x26c0>
    2c70:	616c6965 	cmnvs	ip, r5, ror #18
    2c74:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2c78:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2c7c:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
    2c80:	705f6c61 	subsvc	r6, pc, r1, ror #24
    2c84:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    2c88:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
    2c8c:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
    2c90:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    2c94:	2f646564 	svccs	0x00646564
    2c98:	6f747561 	svcvs	0x00747561
    2c9c:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
    2ca0:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
    2ca4:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    2ca8:	43472f65 	movtmi	r2, #32613	; 0x7f65
    2cac:	52412f43 	subpl	r2, r1, #268	; 0x10c
    2cb0:	4d435f4d 	stclmi	15, cr5, [r3, #-308]	; 0xfffffecc
    2cb4:	2f004634 	svccs	0x00004634
    2cb8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
    2cbc:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
    2cc0:	442f616c 	strtmi	r6, [pc], #-364	; 2cc8 <_Min_Stack_Size+0x28c8>
    2cc4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    2cc8:	662f706f 	strtvs	r7, [pc], -pc, rrx
    2ccc:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
    2cd0:	6f72705f 	svcvs	0x0072705f
    2cd4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    2cd8:	3130325f 	teqcc	r0, pc, asr r2
    2cdc:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
    2ce0:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    2ce4:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
    2ce8:	6f426f74 	svcvs	0x00426f74
    2cec:	692f7461 	stmdbvs	pc!, {r0, r5, r6, sl, ip, sp, lr}	; <UNPREDICTABLE>
    2cf0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2cf4:	00006564 	andeq	r6, r0, r4, ror #10
    2cf8:	70616568 	rsbvc	r6, r1, r8, ror #10
    2cfc:	632e315f 	teqvs	lr, #-1073741801	; 0xc0000017
    2d00:	00000100 	andeq	r0, r0, r0, lsl #2
    2d04:	64647473 	strbtvs	r7, [r4], #-1139	; 0x473
    2d08:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    2d0c:	00000200 	andeq	r0, r0, r0, lsl #4
    2d10:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    2d14:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    2d18:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    2d1c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    2d20:	00000300 	andeq	r0, r0, r0, lsl #6
    2d24:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2d28:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2d2c:	00000400 	andeq	r0, r0, r0, lsl #8
    2d30:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
    2d34:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
    2d38:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    2d3c:	74000005 	strvc	r0, [r0], #-5
    2d40:	2e6b7361 	cdpcs	3, 6, cr7, cr11, cr1, {3}
    2d44:	00060068 	andeq	r0, r6, r8, rrx
    2d48:	05000000 	streq	r0, [r0, #-0]
    2d4c:	00336802 	eorseq	r6, r3, r2, lsl #16
    2d50:	00df0308 	sbcseq	r0, pc, r8, lsl #6
    2d54:	7a032601 	bvc	cc560 <_Min_Stack_Size+0xcc160>
    2d58:	20090320 	andcs	r0, r9, r0, lsr #6
    2d5c:	0051304e 	subseq	r3, r1, lr, asr #32
    2d60:	06010402 	streq	r0, [r1], -r2, lsl #8
    2d64:	21330666 	teqcs	r3, r6, ror #12
    2d68:	2e0d0325 	cdpcs	3, 0, cr0, cr13, cr5, {1}
    2d6c:	032e5303 	teqeq	lr, #201326592	; 0xc000000
    2d70:	0d032020 	stceq	0, cr2, [r3, #-128]	; 0xffffff80
    2d74:	2e64032e 	cdpcs	3, 6, cr0, cr4, cr14, {1}
    2d78:	01000e02 	tsteq	r0, r2, lsl #28
    2d7c:	02050001 	andeq	r0, r5, #1
    2d80:	080033c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, ip, sp}
    2d84:	01019103 	tsteq	r1, r3, lsl #2
    2d88:	04020027 	streq	r0, [r2], #-39	; 0x27
    2d8c:	02200601 	eoreq	r0, r0, #1048576	; 0x100000
    2d90:	01010004 	tsteq	r1, r4
    2d94:	d0020500 	andle	r0, r2, r0, lsl #10
    2d98:	03080033 	movweq	r0, #32819	; 0x8033
    2d9c:	1401019d 	strne	r0, [r1], #-413	; 0x19d
    2da0:	01000602 	tsteq	r0, r2, lsl #12
    2da4:	02050001 	andeq	r0, r5, #1
    2da8:	080033dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, ip, sp}
    2dac:	0101a403 	tsteq	r1, r3, lsl #8
    2db0:	08022f13 	stmdaeq	r2, {r0, r1, r4, r8, r9, sl, fp, sp}
    2db4:	fc010100 	stc2	1, cr0, [r1], {-0}
    2db8:	02000002 	andeq	r0, r0, #2
    2dbc:	00027600 	andeq	r7, r2, r0, lsl #12
    2dc0:	fb010200 	blx	435ca <_Min_Stack_Size+0x431ca>
    2dc4:	01000d0e 	tsteq	r0, lr, lsl #26
    2dc8:	00010101 	andeq	r0, r1, r1, lsl #2
    2dcc:	00010000 	andeq	r0, r1, r0
    2dd0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    2dd4:	2f656d6f 	svccs	0x00656d6f
    2dd8:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
    2ddc:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
    2de0:	6f746b73 	svcvs	0x00746b73
    2de4:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    2de8:	5f6c616e 	svcpl	0x006c616e
    2dec:	6a6f7270 	bvs	1bdf7b4 <_Min_Stack_Size+0x1bdf3b4>
    2df0:	5f746365 	svcpl	0x00746365
    2df4:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
    2df8:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    2dfc:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    2e00:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
    2e04:	616f426f 	cmnvs	pc, pc, ror #4
    2e08:	4f432f74 	svcmi	0x00432f74
    2e0c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    2e10:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2e14:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2e18:	445f3233 	ldrbmi	r3, [pc], #-563	; 2e20 <_Min_Stack_Size+0x2a20>
    2e1c:	4f435349 	svcmi	0x00435349
    2e20:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
    2e24:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    2e28:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2e2c:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    2e30:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2e34:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    2e38:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    2e3c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2e40:	445f6870 	ldrbmi	r6, [pc], #-2160	; 2e48 <_Min_Stack_Size+0x2a48>
    2e44:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    2e48:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    2e4c:	752f0063 	strvc	r0, [pc, #-99]!	; 2df1 <_Min_Stack_Size+0x29f1>
    2e50:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    2e54:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2e58:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    2e5c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2e60:	616d2f62 	cmnvs	sp, r2, ror #30
    2e64:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    2e68:	752f0065 	strvc	r0, [pc, #-101]!	; 2e0b <_Min_Stack_Size+0x2a0b>
    2e6c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    2e70:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    2e74:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    2e78:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2e7c:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
    2e80:	2f656d6f 	svccs	0x00656d6f
    2e84:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
    2e88:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
    2e8c:	6f746b73 	svcvs	0x00746b73
    2e90:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    2e94:	5f6c616e 	svcpl	0x006c616e
    2e98:	6a6f7270 	bvs	1bdf860 <_Min_Stack_Size+0x1bdf460>
    2e9c:	5f746365 	svcpl	0x00746365
    2ea0:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
    2ea4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    2ea8:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    2eac:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
    2eb0:	616f426f 	cmnvs	pc, pc, ror #4
    2eb4:	4f432f74 	svcmi	0x00432f74
    2eb8:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    2ebc:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2ec0:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2ec4:	445f3233 	ldrbmi	r3, [pc], #-563	; 2ecc <_Min_Stack_Size+0x2acc>
    2ec8:	4f435349 	svcmi	0x00435349
    2ecc:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
    2ed0:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    2ed4:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2ed8:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    2edc:	5349534d 	movtpl	r5, #37709	; 0x934d
    2ee0:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    2ee4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2ee8:	6f682f00 	svcvs	0x00682f00
    2eec:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 2d40 <_Min_Stack_Size+0x2940>
    2ef0:	616c6965 	cmnvs	ip, r5, ror #18
    2ef4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2ef8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2efc:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
    2f00:	705f6c61 	subsvc	r6, pc, r1, ror #24
    2f04:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    2f08:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
    2f0c:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
    2f10:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    2f14:	2f646564 	svccs	0x00646564
    2f18:	6f747561 	svcvs	0x00747561
    2f1c:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
    2f20:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    2f24:	5f584554 	svcpl	0x00584554
    2f28:	5f46344d 	svcpl	0x0046344d
    2f2c:	334d5453 	movtcc	r5, #54355	; 0xd453
    2f30:	49445f32 	stmdbmi	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    2f34:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
    2f38:	2f595245 	svccs	0x00595245
    2f3c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    2f40:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    2f44:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    2f48:	2f534953 	svccs	0x00534953
    2f4c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    2f50:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
    2f54:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
    2f58:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2f5c:	2f787834 	svccs	0x00787834
    2f60:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    2f64:	00656475 	rsbeq	r6, r5, r5, ror r4
    2f68:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2eb4 <_Min_Stack_Size+0x2ab4>
    2f6c:	656c2f65 	strbvs	r2, [ip, #-3941]!	; 0xf65
    2f70:	2f616c69 	svccs	0x00616c69
    2f74:	6b736544 	blvs	1cdc48c <_Min_Stack_Size+0x1cdc08c>
    2f78:	2f706f74 	svccs	0x00706f74
    2f7c:	616e6966 	cmnvs	lr, r6, ror #18
    2f80:	72705f6c 	rsbsvc	r5, r0, #108, 30	; 0x1b0
    2f84:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
    2f88:	30325f74 	eorscc	r5, r2, r4, ror pc
    2f8c:	6d653531 	cfstr64vs	mvdx3, [r5, #-196]!	; 0xffffff3c
    2f90:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    2f94:	612f6465 	teqvs	pc, r5, ror #8
    2f98:	426f7475 	rsbmi	r7, pc, #1962934272	; 0x75000000
    2f9c:	2f74616f 	svccs	0x0074616f
    2fa0:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    2fa4:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 2e98 <_Min_Stack_Size+0x2a98>
    2fa8:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    2fac:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2fb0:	5349445f 	movtpl	r4, #37983	; 0x945f
    2fb4:	45564f43 	ldrbmi	r4, [r6, #-3907]	; 0xf43
    2fb8:	4c2f5952 	stcmi	9, cr5, [pc], #-328	; 2e78 <_Min_Stack_Size+0x2a78>
    2fbc:	61726269 	cmnvs	r2, r9, ror #4
    2fc0:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    2fc4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    2fc8:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    2fcc:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    2fd0:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    2fd4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2fd8:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2fdc:	2f726576 	svccs	0x00726576
    2fe0:	00636e69 	rsbeq	r6, r3, r9, ror #28
    2fe4:	73696d00 	cmnvc	r9, #0, 26
    2fe8:	00632e63 	rsbeq	r2, r3, r3, ror #28
    2fec:	5f000001 	svcpl	0x00000001
    2ff0:	61666564 	cmnvs	r6, r4, ror #10
    2ff4:	5f746c75 	svcpl	0x00746c75
    2ff8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    2ffc:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3000:	73000002 	movwvc	r0, #2
    3004:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    3008:	00682e74 	rsbeq	r2, r8, r4, ror lr
    300c:	63000003 	movwvs	r0, #3
    3010:	5f65726f 	svcpl	0x0065726f
    3014:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    3018:	00040068 	andeq	r0, r4, r8, rrx
    301c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3020:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    3024:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    3028:	00000500 	andeq	r0, r0, r0, lsl #10
    302c:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
    3030:	0600682e 	streq	r6, [r0], -lr, lsr #16
    3034:	00000000 	andeq	r0, r0, r0
    3038:	33f00205 	mvnscc	r0, #1342177280	; 0x50000000
    303c:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
    3040:	02170100 	andseq	r0, r7, #0, 2
    3044:	0101000a 	tsteq	r1, sl
    3048:	04020500 	streq	r0, [r2], #-1280	; 0x500
    304c:	03080034 	movweq	r0, #32820	; 0x8034
    3050:	1a010188 	bne	43678 <_Min_Stack_Size+0x43278>
    3054:	28207803 	stmdacs	r0!, {r0, r1, fp, ip, sp, lr}
    3058:	4b201503 	blmi	80846c <_Min_Stack_Size+0x80806c>
    305c:	6b033157 	blvs	cf5c0 <_Min_Stack_Size+0xcf1c0>
    3060:	251c242e 	ldrcs	r2, [ip, #-1070]	; 0x42e
    3064:	2e770324 	cdpcs	3, 7, cr0, cr7, cr4, {1}
    3068:	3a222f3d 	bcc	88ed64 <_Min_Stack_Size+0x88e964>
    306c:	48322130 	ldmdami	r2!, {r4, r5, r8, sp}
    3070:	3b213130 	blcc	84f538 <_Min_Stack_Size+0x84f138>
    3074:	09032d21 	stmdbeq	r3, {r0, r5, r8, sl, fp, sp}
    3078:	0007022e 	andeq	r0, r7, lr, lsr #4
    307c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3080:	00347c02 	eorseq	r7, r4, r2, lsl #24
    3084:	01b40308 			; <UNDEFINED> instruction: 0x01b40308
    3088:	0a021701 	beq	88c94 <_Min_Stack_Size+0x88894>
    308c:	00010100 	andeq	r0, r1, r0, lsl #2
    3090:	34900205 	ldrcc	r0, [r0], #517	; 0x205
    3094:	c7030800 	strgt	r0, [r3, -r0, lsl #16]
    3098:	2c190101 	ldfcss	f0, [r9], {1}
    309c:	05024626 	streq	r4, [r2, #-1574]	; 0x626
    30a0:	00010100 	andeq	r0, r1, r0, lsl #2
    30a4:	34a80205 	strtcc	r0, [r8], #517	; 0x205
    30a8:	df030800 	svcle	0x00030800
    30ac:	2c170101 	ldfcss	f0, [r7], {1}
    30b0:	06024022 	streq	r4, [r2], -r2, lsr #32
    30b4:	4c010100 	stfmis	f0, [r1], {-0}
    30b8:	02000004 	andeq	r0, r0, #4
    30bc:	00029d00 	andeq	r9, r2, r0, lsl #26
    30c0:	fb010200 	blx	438ca <_Min_Stack_Size+0x434ca>
    30c4:	01000d0e 	tsteq	r0, lr, lsl #26
    30c8:	00010101 	andeq	r0, r1, r1, lsl #2
    30cc:	00010000 	andeq	r0, r1, r0
    30d0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    30d4:	2f656d6f 	svccs	0x00656d6f
    30d8:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
    30dc:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
    30e0:	6f746b73 	svcvs	0x00746b73
    30e4:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    30e8:	5f6c616e 	svcpl	0x006c616e
    30ec:	6a6f7270 	bvs	1bdfab4 <_Min_Stack_Size+0x1bdf6b4>
    30f0:	5f746365 	svcpl	0x00746365
    30f4:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
    30f8:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    30fc:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    3100:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
    3104:	616f426f 	cmnvs	pc, pc, ror #4
    3108:	4f432f74 	svcmi	0x00432f74
    310c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    3110:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3114:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3118:	445f3233 	ldrbmi	r3, [pc], #-563	; 3120 <_Min_Stack_Size+0x2d20>
    311c:	4f435349 	svcmi	0x00435349
    3120:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
    3124:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3128:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    312c:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    3130:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3134:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    3138:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    313c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3140:	445f6870 	ldrbmi	r6, [pc], #-2160	; 3148 <_Min_Stack_Size+0x2d48>
    3144:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    3148:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    314c:	752f0063 	strvc	r0, [pc, #-99]!	; 30f1 <_Min_Stack_Size+0x2cf1>
    3150:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3154:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    3158:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    315c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3160:	616d2f62 	cmnvs	sp, r2, ror #30
    3164:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    3168:	752f0065 	strvc	r0, [pc, #-101]!	; 310b <_Min_Stack_Size+0x2d0b>
    316c:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3170:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    3174:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    3178:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    317c:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
    3180:	2f656d6f 	svccs	0x00656d6f
    3184:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
    3188:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
    318c:	6f746b73 	svcvs	0x00746b73
    3190:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    3194:	5f6c616e 	svcpl	0x006c616e
    3198:	6a6f7270 	bvs	1bdfb60 <_Min_Stack_Size+0x1bdf760>
    319c:	5f746365 	svcpl	0x00746365
    31a0:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
    31a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    31a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    31ac:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
    31b0:	616f426f 	cmnvs	pc, pc, ror #4
    31b4:	4f432f74 	svcmi	0x00432f74
    31b8:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    31bc:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    31c0:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    31c4:	445f3233 	ldrbmi	r3, [pc], #-563	; 31cc <_Min_Stack_Size+0x2dcc>
    31c8:	4f435349 	svcmi	0x00435349
    31cc:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
    31d0:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    31d4:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    31d8:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    31dc:	5349534d 	movtpl	r5, #37709	; 0x934d
    31e0:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    31e4:	2f656369 	svccs	0x00656369
    31e8:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    31ec:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    31f0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    31f4:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    31f8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    31fc:	6f682f00 	svcvs	0x00682f00
    3200:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 3054 <_Min_Stack_Size+0x2c54>
    3204:	616c6965 	cmnvs	ip, r5, ror #18
    3208:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    320c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3210:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
    3214:	705f6c61 	subsvc	r6, pc, r1, ror #24
    3218:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    321c:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
    3220:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
    3224:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    3228:	2f646564 	svccs	0x00646564
    322c:	6f747561 	svcvs	0x00747561
    3230:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
    3234:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    3238:	5f584554 	svcpl	0x00584554
    323c:	5f46344d 	svcpl	0x0046344d
    3240:	334d5453 	movtcc	r5, #54355	; 0xd453
    3244:	49445f32 	stmdbmi	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    3248:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
    324c:	2f595245 	svccs	0x00595245
    3250:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    3254:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    3258:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    325c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    3260:	5f787834 	svcpl	0x00787834
    3264:	50647453 	rsbpl	r7, r4, r3, asr r4
    3268:	70697265 	rsbvc	r7, r9, r5, ror #4
    326c:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    3270:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3274:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3278:	6f682f00 	svcvs	0x00682f00
    327c:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 30d0 <_Min_Stack_Size+0x2cd0>
    3280:	616c6965 	cmnvs	ip, r5, ror #18
    3284:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3288:	706f746b 	rsbvc	r7, pc, fp, ror #8
    328c:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
    3290:	705f6c61 	subsvc	r6, pc, r1, ror #24
    3294:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    3298:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
    329c:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
    32a0:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    32a4:	2f646564 	svccs	0x00646564
    32a8:	6f747561 	svcvs	0x00747561
    32ac:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
    32b0:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    32b4:	5f584554 	svcpl	0x00584554
    32b8:	5f46344d 	svcpl	0x0046344d
    32bc:	334d5453 	movtcc	r5, #54355	; 0xd453
    32c0:	49445f32 	stmdbmi	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    32c4:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
    32c8:	2f595245 	svccs	0x00595245
    32cc:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    32d0:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    32d4:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    32d8:	2f534953 	svccs	0x00534953
    32dc:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    32e0:	00656475 	rsbeq	r6, r5, r5, ror r4
    32e4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    32e8:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    32ec:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
    32f0:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
    32f4:	00010063 	andeq	r0, r1, r3, rrx
    32f8:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    32fc:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    3300:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3304:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    3308:	00020068 	andeq	r0, r2, r8, rrx
    330c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    3310:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3314:	00030068 	andeq	r0, r3, r8, rrx
    3318:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    331c:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    3320:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    3324:	00000400 	andeq	r0, r0, r0, lsl #8
    3328:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    332c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3330:	70675f78 	rsbvc	r5, r7, r8, ror pc
    3334:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3338:	00000500 	andeq	r0, r0, r0, lsl #10
    333c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    3340:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
    3344:	0600682e 	streq	r6, [r0], -lr, lsr #16
    3348:	74730000 	ldrbtvc	r0, [r3], #-0
    334c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3350:	5f787834 	svcpl	0x00787834
    3354:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    3358:	00050068 	andeq	r0, r5, r8, rrx
    335c:	05000000 	streq	r0, [r0, #-0]
    3360:	0034c002 	eorseq	ip, r4, r2
    3364:	00ff0308 	rscseq	r0, pc, r8, lsl #6
    3368:	41412401 	cmpmi	r1, r1, lsl #8
    336c:	41414141 	cmpmi	r1, r1, asr #2
    3370:	43414241 	movtmi	r4, #4673	; 0x1241
    3374:	2b3f594c 	blcs	fd98ac <_Min_Stack_Size+0xfd94ac>
    3378:	4b2e4a03 	blmi	b95b8c <_Min_Stack_Size+0xb9578c>
    337c:	032e3803 	teqeq	lr, #196608	; 0x30000
    3380:	4b322e48 	blmi	c8eca8 <_Min_Stack_Size+0xc8e8a8>
    3384:	032e3303 	teqeq	lr, #201326592	; 0xc000000
    3388:	4b322e4d 	blmi	c8ecc4 <_Min_Stack_Size+0xc8e8c4>
    338c:	032e2e03 	teqeq	lr, #3, 28	; 0x30
    3390:	4b322e52 	blmi	c8ece0 <_Min_Stack_Size+0xc8e8e0>
    3394:	032e2903 	teqeq	lr, #49152	; 0xc000
    3398:	4b322e57 	blmi	c8ecfc <_Min_Stack_Size+0xc8e8fc>
    339c:	032e2403 	teqeq	lr, #50331648	; 0x3000000
    33a0:	4b322e5c 	blmi	c8ed18 <_Min_Stack_Size+0xc8e918>
    33a4:	032e1f03 	teqeq	lr, #3, 30
    33a8:	4b322e61 	blmi	c8ed34 <_Min_Stack_Size+0xc8e934>
    33ac:	032e1a03 	teqeq	lr, #12288	; 0x3000
    33b0:	4b322e66 	blmi	c8ed50 <_Min_Stack_Size+0xc8e950>
    33b4:	032e1503 	teqeq	lr, #12582912	; 0xc00000
    33b8:	59332e6b 	ldmdbpl	r3!, {r0, r1, r3, r5, r6, r9, sl, fp, sp}
    33bc:	033c0f03 	teqeq	ip, #3, 30
    33c0:	59322e71 	ldmdbpl	r2!, {r0, r4, r5, r6, r9, sl, fp, sp}
    33c4:	033c0a03 	teqeq	ip, #12288	; 0x3000
    33c8:	19022e76 	stmdbne	r2, {r1, r2, r4, r5, r6, r9, sl, fp, sp}
    33cc:	00010100 	andeq	r0, r1, r0, lsl #2
    33d0:	361c0205 	ldrcc	r0, [ip], -r5, lsl #4
    33d4:	ca030800 	bgt	c53dc <_Min_Stack_Size+0xc4fdc>
    33d8:	0b030101 	bleq	c37e4 <_Min_Stack_Size+0xc33e4>
    33dc:	0326303c 	teqeq	r6, #60	; 0x3c
    33e0:	305a3c78 	subscc	r3, sl, r8, ror ip
    33e4:	2d2f3030 	stccs	0, cr3, [pc, #-192]!	; 332c <_Min_Stack_Size+0x2f2c>
    33e8:	302c4c75 	eorcc	r4, ip, r5, ror ip
    33ec:	1203302c 	andne	r3, r3, #44	; 0x2c
    33f0:	2f2d2120 	svccs	0x002d2120
    33f4:	033c6203 	teqeq	ip, #805306368	; 0x30000000
    33f8:	6203201e 	andvs	r2, r3, #30
    33fc:	201e0320 	andscs	r0, lr, r0, lsr #6
    3400:	033c6203 	teqeq	ip, #805306368	; 0x30000000
    3404:	70032021 	andvc	r2, r3, r1, lsr #32
    3408:	03352f3c 	teqeq	r5, #60, 30	; 0xf0
    340c:	884b2e78 	stmdahi	fp, {r3, r4, r5, r6, r9, sl, fp, sp}^
    3410:	00090259 	andeq	r0, r9, r9, asr r2
    3414:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3418:	0036d802 	eorseq	sp, r6, r2, lsl #16
    341c:	01fe0308 	mvnseq	r0, r8, lsl #6
    3420:	3d1f1501 	cfldr32cc	mvfx1, [pc, #-4]	; 3424 <_Min_Stack_Size+0x3024>
    3424:	02212121 	eoreq	r2, r1, #1073741832	; 0x40000008
    3428:	01010002 	tsteq	r1, r2
    342c:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    3430:	03080036 	movweq	r0, #32822	; 0x8036
    3434:	21010295 			; <UNDEFINED> instruction: 0x21010295
    3438:	22303e42 	eorscs	r3, r0, #1056	; 0x420
    343c:	022f3030 	eoreq	r3, pc, #48	; 0x30
    3440:	01010002 	tsteq	r1, r2
    3444:	10020500 	andne	r0, r2, r0, lsl #10
    3448:	03080037 	movweq	r0, #32823	; 0x8037
    344c:	190102c3 	stmdbne	r1, {r0, r1, r6, r7, r9}
    3450:	022e0903 	eoreq	r0, lr, #49152	; 0xc000
    3454:	01010004 	tsteq	r1, r4
    3458:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
    345c:	03080037 	movweq	r0, #32823	; 0x8037
    3460:	160102dd 			; <UNDEFINED> instruction: 0x160102dd
    3464:	00020221 	andeq	r0, r2, r1, lsr #4
    3468:	05000101 	streq	r0, [r0, #-257]	; 0x101
    346c:	00372402 	eorseq	r2, r7, r2, lsl #8
    3470:	02ee0308 	rsceq	r0, lr, #8, 6	; 0x20000000
    3474:	09031901 	stmdbeq	r3, {r0, r8, fp, ip}
    3478:	0004022e 	andeq	r0, r4, lr, lsr #4
    347c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3480:	00373002 	eorseq	r3, r7, r2
    3484:	03880308 	orreq	r0, r8, #8, 6	; 0x20000000
    3488:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    348c:	01010002 	tsteq	r1, r2
    3490:	38020500 	stmdacc	r2, {r8, sl}
    3494:	03080037 	movweq	r0, #32823	; 0x8037
    3498:	1701039c 			; <UNDEFINED> instruction: 0x1701039c
    349c:	01000202 	tsteq	r0, r2, lsl #4
    34a0:	02050001 	andeq	r0, r5, #1
    34a4:	0800373c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip, sp}
    34a8:	0103b103 	tsteq	r3, r3, lsl #2
    34ac:	00020217 	andeq	r0, r2, r7, lsl r2
    34b0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    34b4:	00374002 	eorseq	r4, r7, r2
    34b8:	03c70308 	biceq	r0, r7, #8, 6	; 0x20000000
    34bc:	2a261801 	bcs	9894c8 <_Min_Stack_Size+0x9890c8>
    34c0:	01000202 	tsteq	r0, r2, lsl #4
    34c4:	02050001 	andeq	r0, r5, #1
    34c8:	0800374c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip, sp}
    34cc:	0103e003 	tsteq	r3, r3
    34d0:	00020216 	andeq	r0, r2, r6, lsl r2
    34d4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    34d8:	00375002 	eorseq	r5, r7, r2
    34dc:	03f00308 	mvnseq	r0, #8, 6	; 0x20000000
    34e0:	04021601 	streq	r1, [r2], #-1537	; 0x601
    34e4:	00010100 	andeq	r0, r1, r0, lsl #2
    34e8:	37580205 	ldrbcc	r0, [r8, -r5, lsl #4]
    34ec:	c3030800 	movwgt	r0, #14336	; 0x3800
    34f0:	09030104 	stmdbeq	r3, {r2, r8}
    34f4:	2e77033c 	mrccs	3, 3, r0, cr7, cr12, {1}
    34f8:	21200903 	teqcs	r0, r3, lsl #18
    34fc:	222a2267 	eorcs	r2, sl, #1879048198	; 0x70000006
    3500:	01022121 	tsteq	r2, r1, lsr #2
    3504:	ee010100 	adfs	f0, f1, f0
    3508:	02000006 	andeq	r0, r0, #6
    350c:	00028800 	andeq	r8, r2, r0, lsl #16
    3510:	fb010200 	blx	43d1a <_Min_Stack_Size+0x4391a>
    3514:	01000d0e 	tsteq	r0, lr, lsl #26
    3518:	00010101 	andeq	r0, r1, r1, lsl #2
    351c:	00010000 	andeq	r0, r1, r0
    3520:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    3524:	2f656d6f 	svccs	0x00656d6f
    3528:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
    352c:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
    3530:	6f746b73 	svcvs	0x00746b73
    3534:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    3538:	5f6c616e 	svcpl	0x006c616e
    353c:	6a6f7270 	bvs	1bdff04 <_Min_Stack_Size+0x1bdfb04>
    3540:	5f746365 	svcpl	0x00746365
    3544:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
    3548:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    354c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    3550:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
    3554:	616f426f 	cmnvs	pc, pc, ror #4
    3558:	4f432f74 	svcmi	0x00432f74
    355c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    3560:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3564:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3568:	445f3233 	ldrbmi	r3, [pc], #-563	; 3570 <_Min_Stack_Size+0x3170>
    356c:	4f435349 	svcmi	0x00435349
    3570:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
    3574:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3578:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    357c:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    3580:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3584:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    3588:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    358c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3590:	445f6870 	ldrbmi	r6, [pc], #-2160	; 3598 <_Min_Stack_Size+0x3198>
    3594:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    3598:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    359c:	752f0063 	strvc	r0, [pc, #-99]!	; 3541 <_Min_Stack_Size+0x3141>
    35a0:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    35a4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    35a8:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    35ac:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    35b0:	616d2f62 	cmnvs	sp, r2, ror #30
    35b4:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    35b8:	752f0065 	strvc	r0, [pc, #-101]!	; 355b <_Min_Stack_Size+0x315b>
    35bc:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    35c0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    35c4:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    35c8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    35cc:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
    35d0:	2f656d6f 	svccs	0x00656d6f
    35d4:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
    35d8:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
    35dc:	6f746b73 	svcvs	0x00746b73
    35e0:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    35e4:	5f6c616e 	svcpl	0x006c616e
    35e8:	6a6f7270 	bvs	1bdffb0 <_Min_Stack_Size+0x1bdfbb0>
    35ec:	5f746365 	svcpl	0x00746365
    35f0:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
    35f4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    35f8:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    35fc:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
    3600:	616f426f 	cmnvs	pc, pc, ror #4
    3604:	4f432f74 	svcmi	0x00432f74
    3608:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    360c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3610:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3614:	445f3233 	ldrbmi	r3, [pc], #-563	; 361c <_Min_Stack_Size+0x321c>
    3618:	4f435349 	svcmi	0x00435349
    361c:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
    3620:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3624:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3628:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    362c:	5349534d 	movtpl	r5, #37709	; 0x934d
    3630:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    3634:	2f656369 	svccs	0x00656369
    3638:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    363c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3640:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    3644:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    3648:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    364c:	6f682f00 	svcvs	0x00682f00
    3650:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 34a4 <_Min_Stack_Size+0x30a4>
    3654:	616c6965 	cmnvs	ip, r5, ror #18
    3658:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    365c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3660:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
    3664:	705f6c61 	subsvc	r6, pc, r1, ror #24
    3668:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    366c:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
    3670:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
    3674:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    3678:	2f646564 	svccs	0x00646564
    367c:	6f747561 	svcvs	0x00747561
    3680:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
    3684:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    3688:	5f584554 	svcpl	0x00584554
    368c:	5f46344d 	svcpl	0x0046344d
    3690:	334d5453 	movtcc	r5, #54355	; 0xd453
    3694:	49445f32 	stmdbmi	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    3698:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
    369c:	2f595245 	svccs	0x00595245
    36a0:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    36a4:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    36a8:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    36ac:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    36b0:	5f787834 	svcpl	0x00787834
    36b4:	50647453 	rsbpl	r7, r4, r3, asr r4
    36b8:	70697265 	rsbvc	r7, r9, r5, ror #4
    36bc:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    36c0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    36c4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    36c8:	6f682f00 	svcvs	0x00682f00
    36cc:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 3520 <_Min_Stack_Size+0x3120>
    36d0:	616c6965 	cmnvs	ip, r5, ror #18
    36d4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    36d8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    36dc:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
    36e0:	705f6c61 	subsvc	r6, pc, r1, ror #24
    36e4:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    36e8:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
    36ec:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
    36f0:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    36f4:	2f646564 	svccs	0x00646564
    36f8:	6f747561 	svcvs	0x00747561
    36fc:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
    3700:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    3704:	5f584554 	svcpl	0x00584554
    3708:	5f46344d 	svcpl	0x0046344d
    370c:	334d5453 	movtcc	r5, #54355	; 0xd453
    3710:	49445f32 	stmdbmi	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    3714:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
    3718:	2f595245 	svccs	0x00595245
    371c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    3720:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    3724:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    3728:	2f534953 	svccs	0x00534953
    372c:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    3730:	00656475 	rsbeq	r6, r5, r5, ror r4
    3734:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    3738:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    373c:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
    3740:	632e6363 	teqvs	lr, #-1946157055	; 0x8c000001
    3744:	00000100 	andeq	r0, r0, r0, lsl #2
    3748:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    374c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    3750:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    3754:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    3758:	00000200 	andeq	r0, r0, r0, lsl #4
    375c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3760:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3764:	00000300 	andeq	r0, r0, r0, lsl #6
    3768:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    376c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3770:	00682e78 	rsbeq	r2, r8, r8, ror lr
    3774:	73000004 	movwvc	r0, #4
    3778:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    377c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3780:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    3784:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    3788:	6f630000 	svcvs	0x00630000
    378c:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    3790:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    3794:	00000600 	andeq	r0, r0, r0, lsl #12
    3798:	02050000 	andeq	r0, r5, #0
    379c:	08003780 	stmdaeq	r0, {r7, r8, r9, sl, ip, sp}
    37a0:	0101d503 	tsteq	r1, r3, lsl #10
    37a4:	200f0314 	andcs	r0, pc, r4, lsl r3	; <UNPREDICTABLE>
    37a8:	23207103 	teqcs	r0, #-1073741824	; 0xc0000000
    37ac:	23222c1d 	teqcs	r2, #7424	; 0x1d00
    37b0:	03232323 	teqeq	r3, #-1946157056	; 0x8c000000
    37b4:	235b207a 	cmpcs	fp, #122	; 0x7a
    37b8:	1b523131 	blne	148fc84 <_Min_Stack_Size+0x148f884>
    37bc:	0a023023 	beq	8f850 <_Min_Stack_Size+0x8f450>
    37c0:	00010100 	andeq	r0, r1, r0, lsl #2
    37c4:	37d00205 	ldrbcc	r0, [r0, r5, lsl #4]
    37c8:	88030800 	stmdahi	r3, {fp}
    37cc:	3f170102 	svccc	0x00170102
    37d0:	01000502 	tsteq	r0, r2, lsl #10
    37d4:	02050001 	andeq	r0, r5, #1
    37d8:	080037e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip, sp}
    37dc:	0102a003 	tsteq	r2, r3
    37e0:	0e970321 	cdpeq	3, 9, cr0, cr7, cr1, {1}
    37e4:	71e90320 	mvnvc	r0, r0, lsr #6
    37e8:	04020020 	streq	r0, [r2], #-32
    37ec:	0e970301 	cdpeq	3, 9, cr0, cr7, cr1, {0}
    37f0:	04020020 	streq	r0, [r2], #-32
    37f4:	200d0301 	andcs	r0, sp, r1, lsl #6
    37f8:	2e71e303 	cdpcs	3, 7, cr14, cr1, cr3, {0}
    37fc:	0e8f033d 	mcreq	3, 4, r0, cr15, cr13, {1}
    3800:	71fb034a 	mvnsvc	r0, sl, asr #6
    3804:	74032f2e 	strvc	r2, [r3], #-3886	; 0xf2e
    3808:	05023d2e 	streq	r3, [r2, #-3374]	; 0xd2e
    380c:	00010100 	andeq	r0, r1, r0, lsl #2
    3810:	38180205 	ldmdacc	r8, {r0, r2, r9}
    3814:	bf030800 	svclt	0x00030800
    3818:	31170102 	tstcc	r7, r2, lsl #2
    381c:	04023131 	streq	r3, [r2], #-305	; 0x131
    3820:	00010100 	andeq	r0, r1, r0, lsl #2
    3824:	382c0205 	stmdacc	ip!, {r0, r2, r9}
    3828:	e3030800 	movw	r0, #14336	; 0x3800
    382c:	02160102 	andseq	r0, r6, #-2147483648	; 0x80000000
    3830:	01010006 	tsteq	r1, r6
    3834:	38020500 	stmdacc	r2, {r8, sl}
    3838:	03080038 	movweq	r0, #32824	; 0x8038
    383c:	180102fc 	stmdane	r1, {r2, r3, r4, r5, r6, r7, r9}
    3840:	207a0334 	rsbscs	r0, sl, r4, lsr r3
    3844:	46442323 	strbmi	r2, [r4], -r3, lsr #6
    3848:	00030221 	andeq	r0, r3, r1, lsr #4
    384c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3850:	00385802 	eorseq	r5, r8, r2, lsl #16
    3854:	03a40308 			; <UNDEFINED> instruction: 0x03a40308
    3858:	06021601 	streq	r1, [r2], -r1, lsl #12
    385c:	00010100 	andeq	r0, r1, r0, lsl #2
    3860:	38640205 	stmdacc	r4!, {r0, r2, r9}^
    3864:	cf030800 	svcgt	0x00030800
    3868:	28200103 	stmdacs	r0!, {r0, r1, r8}
    386c:	000502ae 	andeq	r0, r5, lr, lsr #5
    3870:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3874:	00388802 	eorseq	r8, r8, r2, lsl #16
    3878:	03e60308 	mvneq	r0, #8, 6	; 0x20000000
    387c:	06021501 	streq	r1, [r2], -r1, lsl #10
    3880:	00010100 	andeq	r0, r1, r0, lsl #2
    3884:	38940205 	ldmcc	r4, {r0, r2, r9}
    3888:	a8030800 	stmdage	r3, {fp}
    388c:	02180104 	andseq	r0, r8, #4, 2
    3890:	0101000c 	tsteq	r1, ip
    3894:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
    3898:	03080038 	movweq	r0, #32824	; 0x8038
    389c:	150104b9 	strne	r0, [r1, #-1209]	; 0x4b9
    38a0:	01000602 	tsteq	r0, r2, lsl #12
    38a4:	02050001 	andeq	r0, r5, #1
    38a8:	080038b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, ip, sp}
    38ac:	0104d603 	tsteq	r4, r3, lsl #12
    38b0:	000c0217 	andeq	r0, ip, r7, lsl r2
    38b4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    38b8:	0038d002 	eorseq	sp, r8, r2
    38bc:	04e80308 	strbteq	r0, [r8], #776	; 0x308
    38c0:	06021501 	streq	r1, [r2], -r1, lsl #10
    38c4:	00010100 	andeq	r0, r1, r0, lsl #2
    38c8:	38dc0205 	ldmcc	ip, {r0, r2, r9}^
    38cc:	fa030800 	blx	c58d4 <_Min_Stack_Size+0xc54d4>
    38d0:	02150104 	andseq	r0, r5, #4, 2
    38d4:	01010006 	tsteq	r1, r6
    38d8:	e8020500 	stmda	r2, {r8, sl}
    38dc:	03080038 	movweq	r0, #32824	; 0x8038
    38e0:	19010593 	stmdbne	r1, {r0, r1, r4, r7, r8, sl}
    38e4:	02313131 	eorseq	r3, r1, #1073741836	; 0x4000000c
    38e8:	01010004 	tsteq	r1, r4
    38ec:	fc020500 	stc2	5, cr0, [r2], {-0}
    38f0:	03080038 	movweq	r0, #32824	; 0x8038
    38f4:	190105b9 	stmdbne	r1, {r0, r3, r4, r5, r7, r8, sl}
    38f8:	02313131 	eorseq	r3, r1, #1073741836	; 0x4000000c
    38fc:	01010004 	tsteq	r1, r4
    3900:	10020500 	andne	r0, r2, r0, lsl #10
    3904:	03080039 	movweq	r0, #32825	; 0x8039
    3908:	180106df 	stmdane	r1, {r0, r1, r2, r3, r4, r6, r7, r9, sl}
    390c:	02233131 	eoreq	r3, r3, #1073741836	; 0x4000000c
    3910:	01010005 	tsteq	r1, r5
    3914:	24020500 	strcs	r0, [r2], #-1280	; 0x500
    3918:	03080039 	movweq	r0, #32825	; 0x8039
    391c:	130106fb 	movwne	r0, #5883	; 0x16fb
    3920:	0006022f 	andeq	r0, r6, pc, lsr #4
    3924:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3928:	00393402 	eorseq	r3, r9, r2, lsl #8
    392c:	07940308 	ldreq	r0, [r4, r8, lsl #6]
    3930:	31311801 	teqcc	r1, r1, lsl #16
    3934:	00050223 	andeq	r0, r5, r3, lsr #4
    3938:	05000101 	streq	r0, [r0, #-257]	; 0x101
    393c:	00394802 	eorseq	r4, r9, r2, lsl #16
    3940:	07b40308 	ldreq	r0, [r4, r8, lsl #6]!
    3944:	31311801 	teqcc	r1, r1, lsl #16
    3948:	00050223 	andeq	r0, r5, r3, lsr #4
    394c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3950:	00395c02 	eorseq	r5, r9, r2, lsl #24
    3954:	07d30308 	ldrbeq	r0, [r3, r8, lsl #6]
    3958:	31311801 	teqcc	r1, r1, lsl #16
    395c:	00040231 	andeq	r0, r4, r1, lsr r2
    3960:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3964:	00397002 	eorseq	r7, r9, r2
    3968:	08870308 	stmeq	r7, {r3, r8, r9}
    396c:	034c1601 	movteq	r1, #50689	; 0xc601
    3970:	0326207a 	teqeq	r6, #122	; 0x7a
    3974:	22343c1f 	eorscs	r3, r4, #7936	; 0x1f00
    3978:	222f211e 	eorcs	r2, pc, #-2147483641	; 0x80000007
    397c:	222f2131 	eorcs	r2, pc, #1073741836	; 0x4000000c
    3980:	2f2a253f 	svccs	0x002a253f
    3984:	4e032f22 	cdpmi	15, 0, cr2, cr3, cr2, {1}
    3988:	21262f20 	teqcs	r6, r0, lsr #30
    398c:	33231d25 	teqcc	r3, #2368	; 0x940
    3990:	03207603 	teqeq	r0, #3145728	; 0x300000
    3994:	67692e0a 	strbvs	r2, [r9, -sl, lsl #28]!
    3998:	000a023d 	andeq	r0, sl, sp, lsr r2
    399c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    39a0:	003a0002 	eorseq	r0, sl, r2
    39a4:	09840308 	stmibeq	r4, {r3, r8, r9}
    39a8:	345a1801 	ldrbcc	r1, [sl], #-2049	; 0x801
    39ac:	243f312b 	ldrtcs	r3, [pc], #-299	; 39b4 <_Min_Stack_Size+0x35b4>
    39b0:	01000902 	tsteq	r0, r2, lsl #18
    39b4:	02050001 	andeq	r0, r5, #1
    39b8:	08003a30 	stmdaeq	r0, {r4, r5, r9, fp, ip, sp}
    39bc:	0109a403 	tsteq	r9, r3, lsl #8
    39c0:	00060216 	andeq	r0, r6, r6, lsl r2
    39c4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    39c8:	003a3c02 	eorseq	r3, sl, r2, lsl #24
    39cc:	09b50308 	ldmibeq	r5!, {r3, r8, r9}
    39d0:	06021501 	streq	r1, [r2], -r1, lsl #10
    39d4:	00010100 	andeq	r0, r1, r0, lsl #2
    39d8:	3a480205 	bcc	12041f4 <_Min_Stack_Size+0x1203df4>
    39dc:	c6030800 	strgt	r0, [r3], -r0, lsl #16
    39e0:	02160109 	andseq	r0, r6, #1073741826	; 0x40000002
    39e4:	01010006 	tsteq	r1, r6
    39e8:	54020500 	strpl	r0, [r2], #-1280	; 0x500
    39ec:	0308003a 	movweq	r0, #32826	; 0x803a
    39f0:	180109db 	stmdane	r1, {r0, r1, r3, r4, r6, r7, r8, fp}
    39f4:	23311d42 	teqcs	r1, #4224	; 0x1080
    39f8:	01000502 	tsteq	r0, r2, lsl #10
    39fc:	02050001 	andeq	r0, r5, #1
    3a00:	08003a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, ip, sp}
    3a04:	0109fb03 	tsteq	r9, r3, lsl #22
    3a08:	311d4218 	tstcc	sp, r8, lsl r2
    3a0c:	00060231 	andeq	r0, r6, r1, lsr r2
    3a10:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3a14:	003a8802 	eorseq	r8, sl, r2, lsl #16
    3a18:	0a9f0308 	beq	fe7c4640 <_estack+0xde794640>
    3a1c:	313f1801 	teqcc	pc, r1, lsl #16
    3a20:	00060223 	andeq	r0, r6, r3, lsr #4
    3a24:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3a28:	003aa002 	eorseq	sl, sl, r2
    3a2c:	0ac30308 	beq	ff0c4654 <_estack+0xdf094654>
    3a30:	313f1801 	teqcc	pc, r1, lsl #16
    3a34:	00060223 	andeq	r0, r6, r3, lsr #4
    3a38:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3a3c:	003ab802 	eorseq	fp, sl, r2, lsl #16
    3a40:	0ae40308 	beq	ff904668 <_estack+0xdf8d4668>
    3a44:	313f1801 	teqcc	pc, r1, lsl #16
    3a48:	00060223 	andeq	r0, r6, r3, lsr #4
    3a4c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3a50:	003ad002 	eorseq	sp, sl, r2
    3a54:	0b890308 	bleq	fe24467c <_estack+0xde21467c>
    3a58:	06021601 	streq	r1, [r2], -r1, lsl #12
    3a5c:	00010100 	andeq	r0, r1, r0, lsl #2
    3a60:	3adc0205 	bcc	ff70427c <_estack+0xdf6d427c>
    3a64:	b4030800 	strlt	r0, [r3], #-2048	; 0x800
    3a68:	2c19010b 	ldfcss	f0, [r9], {11}
    3a6c:	05024626 	streq	r4, [r2, #-1574]	; 0x626
    3a70:	00010100 	andeq	r0, r1, r0, lsl #2
    3a74:	3af40205 	bcc	ffd04290 <_estack+0xdfcd4290>
    3a78:	d4030800 	strle	r0, [r3], #-2048	; 0x800
    3a7c:	2c19010b 	ldfcss	f0, [r9], {11}
    3a80:	05024626 	streq	r4, [r2, #-1574]	; 0x626
    3a84:	00010100 	andeq	r0, r1, r0, lsl #2
    3a88:	3b0c0205 	blcc	3042a4 <_Min_Stack_Size+0x303ea4>
    3a8c:	f0030800 			; <UNDEFINED> instruction: 0xf0030800
    3a90:	2c19010b 	ldfcss	f0, [r9], {11}
    3a94:	05024626 	streq	r4, [r2, #-1574]	; 0x626
    3a98:	00010100 	andeq	r0, r1, r0, lsl #2
    3a9c:	3b240205 	blcc	9042b8 <_Min_Stack_Size+0x903eb8>
    3aa0:	a4030800 	strge	r0, [r3], #-2048	; 0x800
    3aa4:	2c19010c 	ldfcss	f0, [r9], {12}
    3aa8:	05024626 	streq	r4, [r2, #-1574]	; 0x626
    3aac:	00010100 	andeq	r0, r1, r0, lsl #2
    3ab0:	3b3c0205 	blcc	f042cc <_Min_Stack_Size+0xf03ecc>
    3ab4:	d1030800 	tstle	r3, r0, lsl #16
    3ab8:	2c19010c 	ldfcss	f0, [r9], {12}
    3abc:	05024626 	streq	r4, [r2, #-1574]	; 0x626
    3ac0:	00010100 	andeq	r0, r1, r0, lsl #2
    3ac4:	3b540205 	blcc	15042e0 <_Min_Stack_Size+0x1503ee0>
    3ac8:	fb030800 	blx	c5ad2 <_Min_Stack_Size+0xc56d2>
    3acc:	2c19010c 	ldfcss	f0, [r9], {12}
    3ad0:	05024626 	streq	r4, [r2, #-1574]	; 0x626
    3ad4:	00010100 	andeq	r0, r1, r0, lsl #2
    3ad8:	3b6c0205 	blcc	1b042f4 <_Min_Stack_Size+0x1b03ef4>
    3adc:	98030800 	stmdals	r3, {fp}
    3ae0:	2c19010d 	ldfcss	f0, [r9], {13}
    3ae4:	05024626 	streq	r4, [r2, #-1574]	; 0x626
    3ae8:	00010100 	andeq	r0, r1, r0, lsl #2
    3aec:	3b840205 	blcc	fe104308 <_estack+0xde0d4308>
    3af0:	b1030800 	tstlt	r3, r0, lsl #16
    3af4:	2c19010d 	ldfcss	f0, [r9], {13}
    3af8:	05024626 	streq	r4, [r2, #-1574]	; 0x626
    3afc:	00010100 	andeq	r0, r1, r0, lsl #2
    3b00:	3b9c0205 	blcc	fe70431c <_estack+0xde6d431c>
    3b04:	e2030800 	and	r0, r3, #0, 16
    3b08:	2c18010d 	ldfcss	f0, [r8], {13}
    3b0c:	05024626 	streq	r4, [r2, #-1574]	; 0x626
    3b10:	00010100 	andeq	r0, r1, r0, lsl #2
    3b14:	3bb40205 	blcc	fed04330 <_estack+0xdecd4330>
    3b18:	8b030800 	blhi	c5b20 <_Min_Stack_Size+0xc5720>
    3b1c:	2c18010e 	ldfcss	f0, [r8], {14}
    3b20:	05024626 	streq	r4, [r2, #-1574]	; 0x626
    3b24:	00010100 	andeq	r0, r1, r0, lsl #2
    3b28:	3bcc0205 	blcc	ff304344 <_estack+0xdf2d4344>
    3b2c:	bc030800 	stclt	8, cr0, [r3], {-0}
    3b30:	2c18010e 	ldfcss	f0, [r8], {14}
    3b34:	05024626 	streq	r4, [r2, #-1574]	; 0x626
    3b38:	00010100 	andeq	r0, r1, r0, lsl #2
    3b3c:	3be40205 	blcc	ff904358 <_estack+0xdf8d4358>
    3b40:	dc030800 	stcle	8, cr0, [r3], {-0}
    3b44:	2c18010e 	ldfcss	f0, [r8], {14}
    3b48:	05024626 	streq	r4, [r2, #-1574]	; 0x626
    3b4c:	00010100 	andeq	r0, r1, r0, lsl #2
    3b50:	3bfc0205 	blcc	fff0436c <_estack+0xdfed436c>
    3b54:	f8030800 			; <UNDEFINED> instruction: 0xf8030800
    3b58:	2c18010e 	ldfcss	f0, [r8], {14}
    3b5c:	05024626 	streq	r4, [r2, #-1574]	; 0x626
    3b60:	00010100 	andeq	r0, r1, r0, lsl #2
    3b64:	3c140205 	lfmcc	f0, 4, [r4], {5}
    3b68:	ac030800 	stcge	8, cr0, [r3], {-0}
    3b6c:	2c18010f 	ldfcss	f0, [r8], {15}
    3b70:	05024626 	streq	r4, [r2, #-1574]	; 0x626
    3b74:	00010100 	andeq	r0, r1, r0, lsl #2
    3b78:	3c2c0205 	sfmcc	f0, 4, [ip], #-20	; 0xffffffec
    3b7c:	d9030800 	stmdble	r3, {fp}
    3b80:	2c18010f 	ldfcss	f0, [r8], {15}
    3b84:	05024626 	streq	r4, [r2, #-1574]	; 0x626
    3b88:	00010100 	andeq	r0, r1, r0, lsl #2
    3b8c:	3c440205 	sfmcc	f0, 2, [r4], {5}
    3b90:	87030800 	strhi	r0, [r3, -r0, lsl #16]
    3b94:	2b190110 	blcs	643fdc <_Min_Stack_Size+0x643bdc>
    3b98:	05024528 	streq	r4, [r2, #-1320]	; 0x528
    3b9c:	00010100 	andeq	r0, r1, r0, lsl #2
    3ba0:	3c5c0205 	lfmcc	f0, 2, [ip], {5}
    3ba4:	ac030800 	stcge	8, cr0, [r3], {-0}
    3ba8:	09030110 	stmdbeq	r3, {r4, r8}
    3bac:	22322101 	eorscs	r2, r2, #1073741824	; 0x40000000
    3bb0:	0a032540 	beq	cd0b8 <_Min_Stack_Size+0xcccb8>
    3bb4:	3c69034a 	stclcc	3, cr0, [r9], #-296	; 0xfffffed8
    3bb8:	032e0d03 	teqeq	lr, #3, 26	; 0xc0
    3bbc:	05024a0a 	streq	r4, [r2, #-2570]	; 0xa0a
    3bc0:	00010100 	andeq	r0, r1, r0, lsl #2
    3bc4:	3c900205 	lfmcc	f0, 4, [r0], {5}
    3bc8:	d9030800 	stmdble	r3, {fp}
    3bcc:	02140110 	andseq	r0, r4, #16, 2
    3bd0:	01010008 	tsteq	r1, r8
    3bd4:	a0020500 	andge	r0, r2, r0, lsl #10
    3bd8:	0308003c 	movweq	r0, #32828	; 0x803c
    3bdc:	190110ed 	stmdbne	r1, {r0, r2, r3, r5, r6, r7, ip}
    3be0:	023c0a03 	eorseq	r0, ip, #12288	; 0x3000
    3be4:	01010007 	tsteq	r1, r7
    3be8:	b4020500 	strlt	r0, [r2], #-1280	; 0x500
    3bec:	0308003c 	movweq	r0, #32828	; 0x803c
    3bf0:	1801118f 	stmdane	r1, {r0, r1, r2, r3, r7, r8, ip}
    3bf4:	01000602 	tsteq	r0, r2, lsl #12
    3bf8:	0005c301 	andeq	ip, r5, r1, lsl #6
    3bfc:	9f000200 	svcls	0x00000200
    3c00:	02000002 	andeq	r0, r0, #2
    3c04:	0d0efb01 	vstreq	d15, [lr, #-4]
    3c08:	01010100 	mrseq	r0, (UNDEF: 17)
    3c0c:	00000001 	andeq	r0, r0, r1
    3c10:	01000001 	tsteq	r0, r1
    3c14:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3b60 <_Min_Stack_Size+0x3760>
    3c18:	656c2f65 	strbvs	r2, [ip, #-3941]!	; 0xf65
    3c1c:	2f616c69 	svccs	0x00616c69
    3c20:	6b736544 	blvs	1cdd138 <_Min_Stack_Size+0x1cdcd38>
    3c24:	2f706f74 	svccs	0x00706f74
    3c28:	616e6966 	cmnvs	lr, r6, ror #18
    3c2c:	72705f6c 	rsbsvc	r5, r0, #108, 30	; 0x1b0
    3c30:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
    3c34:	30325f74 	eorscc	r5, r2, r4, ror pc
    3c38:	6d653531 	cfstr64vs	mvdx3, [r5, #-196]!	; 0xffffff3c
    3c3c:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    3c40:	612f6465 	teqvs	pc, r5, ror #8
    3c44:	426f7475 	rsbmi	r7, pc, #1962934272	; 0x75000000
    3c48:	2f74616f 	svccs	0x0074616f
    3c4c:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    3c50:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 3b44 <_Min_Stack_Size+0x3744>
    3c54:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    3c58:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3c5c:	5349445f 	movtpl	r4, #37983	; 0x945f
    3c60:	45564f43 	ldrbmi	r4, [r6, #-3907]	; 0xf43
    3c64:	4c2f5952 	stcmi	9, cr5, [pc], #-328	; 3b24 <_Min_Stack_Size+0x3724>
    3c68:	61726269 	cmnvs	r2, r9, ror #4
    3c6c:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    3c70:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3c74:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3c78:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    3c7c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    3c80:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3c84:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3c88:	2f726576 	svccs	0x00726576
    3c8c:	00637273 	rsbeq	r7, r3, r3, ror r2
    3c90:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3c94:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3c98:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    3c9c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3ca0:	2f62696c 	svccs	0x0062696c
    3ca4:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3ca8:	00656e69 	rsbeq	r6, r5, r9, ror #28
    3cac:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3cb0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3cb4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    3cb8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3cbc:	0062696c 	rsbeq	r6, r2, ip, ror #18
    3cc0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3c0c <_Min_Stack_Size+0x380c>
    3cc4:	656c2f65 	strbvs	r2, [ip, #-3941]!	; 0xf65
    3cc8:	2f616c69 	svccs	0x00616c69
    3ccc:	6b736544 	blvs	1cdd1e4 <_Min_Stack_Size+0x1cdcde4>
    3cd0:	2f706f74 	svccs	0x00706f74
    3cd4:	616e6966 	cmnvs	lr, r6, ror #18
    3cd8:	72705f6c 	rsbsvc	r5, r0, #108, 30	; 0x1b0
    3cdc:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
    3ce0:	30325f74 	eorscc	r5, r2, r4, ror pc
    3ce4:	6d653531 	cfstr64vs	mvdx3, [r5, #-196]!	; 0xffffff3c
    3ce8:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    3cec:	612f6465 	teqvs	pc, r5, ror #8
    3cf0:	426f7475 	rsbmi	r7, pc, #1962934272	; 0x75000000
    3cf4:	2f74616f 	svccs	0x0074616f
    3cf8:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    3cfc:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 3bf0 <_Min_Stack_Size+0x37f0>
    3d00:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    3d04:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3d08:	5349445f 	movtpl	r4, #37983	; 0x945f
    3d0c:	45564f43 	ldrbmi	r4, [r6, #-3907]	; 0xf43
    3d10:	4c2f5952 	stcmi	9, cr5, [pc], #-328	; 3bd0 <_Min_Stack_Size+0x37d0>
    3d14:	61726269 	cmnvs	r2, r9, ror #4
    3d18:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    3d1c:	534d432f 	movtpl	r4, #54063	; 0xd32f
    3d20:	442f5349 	strtmi	r5, [pc], #-841	; 3d28 <_Min_Stack_Size+0x3928>
    3d24:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3d28:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xf65
    3d2c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3d30:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3d34:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
    3d38:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    3d3c:	2f006564 	svccs	0x00006564
    3d40:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
    3d44:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
    3d48:	442f616c 	strtmi	r6, [pc], #-364	; 3d50 <_Min_Stack_Size+0x3950>
    3d4c:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    3d50:	662f706f 	strtvs	r7, [pc], -pc, rrx
    3d54:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
    3d58:	6f72705f 	svcvs	0x0072705f
    3d5c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    3d60:	3130325f 	teqcc	r0, pc, asr r2
    3d64:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
    3d68:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    3d6c:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
    3d70:	6f426f74 	svcvs	0x00426f74
    3d74:	432f7461 	teqmi	pc, #1627389952	; 0x61000000
    3d78:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    3d7c:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    3d80:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    3d84:	5f32334d 	svcpl	0x0032334d
    3d88:	43534944 	cmpmi	r3, #68, 18	; 0x110000
    3d8c:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
    3d90:	694c2f59 	stmdbvs	ip, {r0, r3, r4, r6, r8, r9, sl, fp, sp}^
    3d94:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    3d98:	2f736569 	svccs	0x00736569
    3d9c:	334d5453 	movtcc	r5, #54355	; 0xd453
    3da0:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    3da4:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    3da8:	72655064 	rsbvc	r5, r5, #100	; 0x64
    3dac:	5f687069 	svcpl	0x00687069
    3db0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    3db4:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3db8:	2f00636e 	svccs	0x0000636e
    3dbc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
    3dc0:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
    3dc4:	442f616c 	strtmi	r6, [pc], #-364	; 3dcc <_Min_Stack_Size+0x39cc>
    3dc8:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    3dcc:	662f706f 	strtvs	r7, [pc], -pc, rrx
    3dd0:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
    3dd4:	6f72705f 	svcvs	0x0072705f
    3dd8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    3ddc:	3130325f 	teqcc	r0, pc, asr r2
    3de0:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
    3de4:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    3de8:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
    3dec:	6f426f74 	svcvs	0x00426f74
    3df0:	432f7461 	teqmi	pc, #1627389952	; 0x61000000
    3df4:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    3df8:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    3dfc:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    3e00:	5f32334d 	svcpl	0x0032334d
    3e04:	43534944 	cmpmi	r3, #68, 18	; 0x110000
    3e08:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
    3e0c:	694c2f59 	stmdbvs	ip, {r0, r3, r4, r6, r8, r9, sl, fp, sp}^
    3e10:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    3e14:	2f736569 	svccs	0x00736569
    3e18:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    3e1c:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
    3e20:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    3e24:	73000065 	movwvc	r0, #101	; 0x65
    3e28:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3e2c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3e30:	6173755f 	cmnvs	r3, pc, asr r5
    3e34:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
    3e38:	00000100 	andeq	r0, r0, r0, lsl #2
    3e3c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    3e40:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    3e44:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    3e48:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    3e4c:	00000200 	andeq	r0, r0, r0, lsl #4
    3e50:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3e54:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3e58:	00000300 	andeq	r0, r0, r0, lsl #6
    3e5c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3e60:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    3e64:	00682e78 	rsbeq	r2, r8, r8, ror lr
    3e68:	73000004 	movwvc	r0, #4
    3e6c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3e70:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3e74:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    3e78:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    3e7c:	74730000 	ldrbtvc	r0, [r3], #-0
    3e80:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3e84:	5f787834 	svcpl	0x00787834
    3e88:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    3e8c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3e90:	63000005 	movwvs	r0, #5
    3e94:	5f65726f 	svcpl	0x0065726f
    3e98:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    3e9c:	00060068 	andeq	r0, r6, r8, rrx
    3ea0:	05000000 	streq	r0, [r0, #-0]
    3ea4:	003cc002 	eorseq	ip, ip, r2
    3ea8:	01bb0308 			; <UNDEFINED> instruction: 0x01bb0308
    3eac:	41412401 	cmpmi	r1, r1, lsl #8
    3eb0:	41414141 	cmpmi	r1, r1, asr #2
    3eb4:	3f594c43 	svccc	0x00594c43
    3eb8:	2e5a032b 	cdpcs	3, 5, cr0, cr10, cr11, {1}
    3ebc:	2e28034b 	cdpcs	3, 2, cr0, cr8, cr11, {2}
    3ec0:	322e5803 	eorcc	r5, lr, #196608	; 0x30000
    3ec4:	3c230359 	stccc	3, cr0, [r3], #-356	; 0xfffffe9c
    3ec8:	322e5d03 	eorcc	r5, lr, #3, 26	; 0xc0
    3ecc:	3c1e0359 	ldccc	3, cr0, [lr], {89}	; 0x59
    3ed0:	322e6203 	eorcc	r6, lr, #805306368	; 0x30000000
    3ed4:	3c190359 	ldccc	3, cr0, [r9], {89}	; 0x59
    3ed8:	322e6703 	eorcc	r6, lr, #786432	; 0xc0000
    3edc:	3c140359 	ldccc	3, cr0, [r4], {89}	; 0x59
    3ee0:	322e6c03 	eorcc	r6, lr, #768	; 0x300
    3ee4:	2e0f034b 	cdpcs	3, 0, cr0, cr15, cr11, {2}
    3ee8:	322e7103 	eorcc	r7, lr, #-1073741824	; 0xc0000000
    3eec:	3c0a0359 	stccc	3, cr0, [sl], {89}	; 0x59
    3ef0:	022e7603 	eoreq	r7, lr, #3145728	; 0x300000
    3ef4:	01010012 	tsteq	r1, r2, lsl r0
    3ef8:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    3efc:	0308003d 	movweq	r0, #32829	; 0x803d
    3f00:	030101f6 	movweq	r0, #4598	; 0x11f6
    3f04:	03272e16 	teqeq	r7, #352	; 0x160
    3f08:	0e03200f 	cdpeq	0, 0, cr2, cr3, cr15, {0}
    3f0c:	205c032e 	subscs	r0, ip, lr, lsr #6
    3f10:	03206a03 	teqeq	r0, #12288	; 0x3000
    3f14:	03352019 	teqeq	r5, #25
    3f18:	7403200c 	strvc	r2, [r3], #-12
    3f1c:	09032320 	stmdbeq	r3, {r5, r8, r9, sp}
    3f20:	20770320 	rsbscs	r0, r7, r0, lsr #6
    3f24:	03200903 	teqeq	r0, #49152	; 0xc000
    3f28:	2450207a 	ldrbcs	r2, [r0], #-122	; 0x7a
    3f2c:	03353131 	teqeq	r5, #1073741836	; 0x4000000c
    3f30:	3d032043 	stccc	0, cr2, [r3, #-268]	; 0xfffffef4
    3f34:	003e2420 	eorseq	r2, lr, r0, lsr #8
    3f38:	06010402 	streq	r0, [r1], -r2, lsl #8
    3f3c:	2450063c 	ldrbcs	r0, [r0], #-1596	; 0x63c
    3f40:	200d0323 	andcs	r0, sp, r3, lsr #6
    3f44:	31207003 	teqcc	r0, r3
    3f48:	03265a4f 	teqeq	r6, #323584	; 0x4f000
    3f4c:	233f207a 	teqcs	pc, #122	; 0x7a
    3f50:	78264d1d 	stmdavc	r6!, {r0, r2, r3, r4, r8, sl, fp, lr}
    3f54:	2e5d032f 	cdpcs	3, 5, cr0, cr13, cr15, {1}
    3f58:	7c2e1a03 	stcvc	10, cr1, [lr], #-12
    3f5c:	0007022f 	andeq	r0, r7, pc, lsr #4
    3f60:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3f64:	003e9002 	eorseq	r9, lr, r2
    3f68:	02e70308 	rsceq	r0, r7, #8, 6	; 0x20000000
    3f6c:	321f1501 	andscc	r1, pc, #4194304	; 0x400000
    3f70:	211d241c 	tstcs	sp, ip, lsl r4
    3f74:	02022221 	andeq	r2, r2, #268435458	; 0x10000002
    3f78:	00010100 	andeq	r0, r1, r0, lsl #2
    3f7c:	3ea80205 	cdpcc	2, 10, cr0, cr8, cr5, {0}
    3f80:	fb030800 	blx	c5f8a <_Min_Stack_Size+0xc5b8a>
    3f84:	13030102 	movwne	r0, #12546	; 0x3102
    3f88:	3c770320 	ldclcc	3, cr0, [r7], #-128	; 0xffffff80
    3f8c:	03200903 	teqeq	r0, #49152	; 0xc000
    3f90:	09034a77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, fp, lr}
    3f94:	20790320 	rsbscs	r0, r9, r0, lsr #6
    3f98:	2f2e0903 	svccs	0x002e0903
    3f9c:	01000202 	tsteq	r0, r2, lsl #4
    3fa0:	02050001 	andeq	r0, r5, #1
    3fa4:	08003ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, ip, sp}
    3fa8:	01039a03 	tsteq	r3, r3, lsl #20
    3fac:	21212f14 	teqcs	r1, r4, lsl pc
    3fb0:	01000202 	tsteq	r0, r2, lsl #4
    3fb4:	02050001 	andeq	r0, r5, #1
    3fb8:	08003ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp}
    3fbc:	0103ab03 	tsteq	r3, r3, lsl #22
    3fc0:	61281d1a 	teqvs	r8, sl, lsl sp
    3fc4:	01000502 	tsteq	r0, r2, lsl #10
    3fc8:	02050001 	andeq	r0, r5, #1
    3fcc:	08003ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, ip, sp}
    3fd0:	0103c503 	tsteq	r3, r3, lsl #10
    3fd4:	05024c17 	streq	r4, [r2, #-3095]	; 0xc17
    3fd8:	00010100 	andeq	r0, r1, r0, lsl #2
    3fdc:	3f080205 	svccc	0x00080205
    3fe0:	da030800 	ble	c5fe8 <_Min_Stack_Size+0xc5be8>
    3fe4:	1d1a0103 	ldfnes	f0, [sl, #-12]
    3fe8:	07024528 	streq	r4, [r2, -r8, lsr #10]
    3fec:	00010100 	andeq	r0, r1, r0, lsl #2
    3ff0:	3f240205 	svccc	0x00240205
    3ff4:	f4030800 	vst2.8	{d0-d1}, [r3], r0
    3ff8:	1d1a0103 	ldfnes	f0, [sl, #-12]
    3ffc:	05026128 	streq	r6, [r2, #-296]	; 0x128
    4000:	00010100 	andeq	r0, r1, r0, lsl #2
    4004:	3f400205 	svccc	0x00400205
    4008:	ad030800 	stcge	8, cr0, [r3, #-0]
    400c:	02180104 	andseq	r0, r8, #4, 2
    4010:	01010004 	tsteq	r1, r4
    4014:	48020500 	stmdami	r2, {r8, sl}
    4018:	0308003f 	movweq	r0, #32831	; 0x803f
    401c:	170104bd 			; <UNDEFINED> instruction: 0x170104bd
    4020:	00030221 	andeq	r0, r3, r1, lsr #4
    4024:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4028:	003f5002 	eorseq	r5, pc, r2
    402c:	04f10308 	ldrbteq	r0, [r1], #776	; 0x308
    4030:	02681801 	rsbeq	r1, r8, #65536	; 0x10000
    4034:	01010005 	tsteq	r1, r5
    4038:	68020500 	stmdavs	r2, {r8, sl}
    403c:	0308003f 	movweq	r0, #32831	; 0x803f
    4040:	1a010585 	bne	4565c <_Min_Stack_Size+0x4525c>
    4044:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    4048:	01010005 	tsteq	r1, r5
    404c:	84020500 	strhi	r0, [r2], #-1280	; 0x500
    4050:	0308003f 	movweq	r0, #32831	; 0x803f
    4054:	170105a0 	strne	r0, [r1, -r0, lsr #11]
    4058:	00050267 	andeq	r0, r5, r7, ror #4
    405c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4060:	003f9c02 	eorseq	r9, pc, r2, lsl #24
    4064:	05e50308 	strbeq	r0, [r5, #776]!	; 0x308
    4068:	02671701 	rsbeq	r1, r7, #262144	; 0x40000
    406c:	01010005 	tsteq	r1, r5
    4070:	b4020500 	strlt	r0, [r2], #-1280	; 0x500
    4074:	0308003f 	movweq	r0, #32831	; 0x803f
    4078:	1a0105f7 	bne	4585c <_Min_Stack_Size+0x4545c>
    407c:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    4080:	01010005 	tsteq	r1, r5
    4084:	d0020500 	andle	r0, r2, r0, lsl #10
    4088:	0308003f 	movweq	r0, #32831	; 0x803f
    408c:	1701068f 	strne	r0, [r1, -pc, lsl #13]
    4090:	01000602 	tsteq	r0, r2, lsl #12
    4094:	02050001 	andeq	r0, r5, #1
    4098:	08003fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, sp}
    409c:	0106c403 	tsteq	r6, r3, lsl #8
    40a0:	61281d1a 	teqvs	r8, sl, lsl sp
    40a4:	01000502 	tsteq	r0, r2, lsl #10
    40a8:	02050001 	andeq	r0, r5, #1
    40ac:	08003ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
    40b0:	01079803 	tsteq	r7, r3, lsl #16
    40b4:	06023e17 			; <UNDEFINED> instruction: 0x06023e17
    40b8:	00010100 	andeq	r0, r1, r0, lsl #2
    40bc:	400c0205 	andmi	r0, ip, r5, lsl #4
    40c0:	ab030800 	blge	c60c8 <_Min_Stack_Size+0xc5cc8>
    40c4:	1d190107 	ldfnes	f0, [r9, #-28]	; 0xffffffe4
    40c8:	05026128 	streq	r6, [r2, #-296]	; 0x128
    40cc:	00010100 	andeq	r0, r1, r0, lsl #2
    40d0:	40280205 	eormi	r0, r8, r5, lsl #4
    40d4:	c4030800 	strgt	r0, [r3], #-2048	; 0x800
    40d8:	1d190107 	ldfnes	f0, [r9, #-28]	; 0xffffffe4
    40dc:	05026128 	streq	r6, [r2, #-296]	; 0x128
    40e0:	00010100 	andeq	r0, r1, r0, lsl #2
    40e4:	40440205 	submi	r0, r4, r5, lsl #4
    40e8:	8b030800 	blhi	c60f0 <_Min_Stack_Size+0xc5cf0>
    40ec:	67170108 	ldrvs	r0, [r7, -r8, lsl #2]
    40f0:	01000502 	tsteq	r0, r2, lsl #10
    40f4:	02050001 	andeq	r0, r5, #1
    40f8:	0800405c 	stmdaeq	r0, {r2, r3, r4, r6, lr}
    40fc:	01089d03 	tsteq	r8, r3, lsl #26
    4100:	61281d1a 	teqvs	r8, sl, lsl sp
    4104:	01000502 	tsteq	r0, r2, lsl #10
    4108:	02050001 	andeq	r0, r5, #1
    410c:	08004078 	stmdaeq	r0, {r3, r4, r5, r6, lr}
    4110:	0108cb03 	tsteq	r8, r3, lsl #22
    4114:	2a010a03 	bcs	46928 <_Min_Stack_Size+0x46528>
    4118:	03200a03 	teqeq	r0, #12288	; 0x3000
    411c:	03024a7a 	movweq	r4, #10874	; 0x2a7a
    4120:	00010100 	andeq	r0, r1, r0, lsl #2
    4124:	408c0205 	addmi	r0, ip, r5, lsl #4
    4128:	cf030800 	svcgt	0x00030800
    412c:	15030109 	strne	r0, [r3, #-265]	; 0x109
    4130:	2e6b0301 	cdpcs	3, 6, cr0, cr11, cr1, {0}
    4134:	32201103 	eorcc	r1, r0, #-1073741824	; 0xc0000000
    4138:	24301e22 	ldrtcs	r1, [r0], #-3618	; 0xe22
    413c:	1e243222 	cdpne	2, 2, cr3, cr4, cr2, {1}
    4140:	7a033e26 	bvc	d39e0 <_Min_Stack_Size+0xd35e0>
    4144:	6e03343c 	cfmvdhrvs	mvd3, r3
    4148:	0002023c 	andeq	r0, r2, ip, lsr r2
    414c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4150:	0040c802 	subeq	ip, r0, r2, lsl #16
    4154:	0a8f0308 	beq	fe3c4d7c <_estack+0xde394d7c>
    4158:	010c0301 	tsteq	ip, r1, lsl #6
    415c:	022e0903 	eoreq	r0, lr, #49152	; 0xc000
    4160:	01010004 	tsteq	r1, r4
    4164:	d4020500 	strle	r0, [r2], #-1280	; 0x500
    4168:	03080040 	movweq	r0, #32832	; 0x8040
    416c:	03010ac0 	movweq	r0, #6848	; 0x1ac0
    4170:	0402010b 	streq	r0, [r2], #-267	; 0x10b
    4174:	00010100 	andeq	r0, r1, r0, lsl #2
    4178:	40dc0205 	sbcsmi	r0, ip, r5, lsl #4
    417c:	e2030800 	and	r0, r3, #0, 16
    4180:	0e03010a 	adfeqs	f0, f3, #2.0
    4184:	1e3e3120 	rsfneep	f3, f6, f0
    4188:	32222430 	eorcc	r2, r2, #48, 8	; 0x30000000
    418c:	02002f41 	andeq	r2, r0, #260	; 0x104
    4190:	001e0104 	andseq	r0, lr, r4, lsl #2
    4194:	4c010402 	cfstrsmi	mvf0, [r1], {2}
    4198:	01040200 	mrseq	r0, R12_usr
    419c:	04020022 	streq	r0, [r2], #-34	; 0x22
    41a0:	24384401 	ldrtcs	r4, [r8], #-1025	; 0x401
    41a4:	023c6803 	eorseq	r6, ip, #196608	; 0x30000
    41a8:	01010004 	tsteq	r1, r4
    41ac:	28020500 	stmdacs	r2, {r8, sl}
    41b0:	03080041 	movweq	r0, #32833	; 0x8041
    41b4:	03010bac 	movweq	r0, #7084	; 0x1bac
    41b8:	024b010d 	subeq	r0, fp, #1073741827	; 0x40000003
    41bc:	01010004 	tsteq	r1, r4
    41c0:	00000319 	andeq	r0, r0, r9, lsl r3
    41c4:	028b0002 	addeq	r0, fp, #2
    41c8:	01020000 	mrseq	r0, (UNDEF: 2)
    41cc:	000d0efb 	strdeq	r0, [sp], -fp
    41d0:	01010101 	tsteq	r1, r1, lsl #2
    41d4:	01000000 	mrseq	r0, (UNDEF: 0)
    41d8:	2f010000 	svccs	0x00010000
    41dc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
    41e0:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
    41e4:	442f616c 	strtmi	r6, [pc], #-364	; 41ec <_Min_Stack_Size+0x3dec>
    41e8:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    41ec:	662f706f 	strtvs	r7, [pc], -pc, rrx
    41f0:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
    41f4:	6f72705f 	svcvs	0x0072705f
    41f8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    41fc:	3130325f 	teqcc	r0, pc, asr r2
    4200:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
    4204:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    4208:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
    420c:	6f426f74 	svcvs	0x00426f74
    4210:	432f7461 	teqmi	pc, #1627389952	; 0x61000000
    4214:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    4218:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    421c:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    4220:	5f32334d 	svcpl	0x0032334d
    4224:	43534944 	cmpmi	r3, #68, 18	; 0x110000
    4228:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
    422c:	694c2f59 	stmdbvs	ip, {r0, r3, r4, r6, r8, r9, sl, fp, sp}^
    4230:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    4234:	2f736569 	svccs	0x00736569
    4238:	334d5453 	movtcc	r5, #54355	; 0xd453
    423c:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    4240:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    4244:	72655064 	rsbvc	r5, r5, #100	; 0x64
    4248:	5f687069 	svcpl	0x00687069
    424c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    4250:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    4254:	2f006372 	svccs	0x00006372
    4258:	2f727375 	svccs	0x00727375
    425c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4260:	2f656475 	svccs	0x00656475
    4264:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4268:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 40cc <_Min_Stack_Size+0x3ccc>
    426c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    4270:	2f00656e 	svccs	0x0000656e
    4274:	2f727375 	svccs	0x00727375
    4278:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    427c:	2f656475 	svccs	0x00656475
    4280:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4284:	2f006269 	svccs	0x00006269
    4288:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
    428c:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
    4290:	442f616c 	strtmi	r6, [pc], #-364	; 4298 <_Min_Stack_Size+0x3e98>
    4294:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    4298:	662f706f 	strtvs	r7, [pc], -pc, rrx
    429c:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
    42a0:	6f72705f 	svcvs	0x0072705f
    42a4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    42a8:	3130325f 	teqcc	r0, pc, asr r2
    42ac:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
    42b0:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    42b4:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
    42b8:	6f426f74 	svcvs	0x00426f74
    42bc:	432f7461 	teqmi	pc, #1627389952	; 0x61000000
    42c0:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    42c4:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    42c8:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    42cc:	5f32334d 	svcpl	0x0032334d
    42d0:	43534944 	cmpmi	r3, #68, 18	; 0x110000
    42d4:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
    42d8:	694c2f59 	stmdbvs	ip, {r0, r3, r4, r6, r8, r9, sl, fp, sp}^
    42dc:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    42e0:	2f736569 	svccs	0x00736569
    42e4:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    42e8:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    42ec:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    42f0:	2f54532f 	svccs	0x0054532f
    42f4:	334d5453 	movtcc	r5, #54355	; 0xd453
    42f8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    42fc:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    4300:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    4304:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    4308:	2f656d6f 	svccs	0x00656d6f
    430c:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
    4310:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
    4314:	6f746b73 	svcvs	0x00746b73
    4318:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    431c:	5f6c616e 	svcpl	0x006c616e
    4320:	6a6f7270 	bvs	1be0ce8 <_Min_Stack_Size+0x1be08e8>
    4324:	5f746365 	svcpl	0x00746365
    4328:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
    432c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    4330:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    4334:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
    4338:	616f426f 	cmnvs	pc, pc, ror #4
    433c:	4f432f74 	svcmi	0x00432f74
    4340:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    4344:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    4348:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    434c:	445f3233 	ldrbmi	r3, [pc], #-563	; 4354 <_Min_Stack_Size+0x3f54>
    4350:	4f435349 	svcmi	0x00435349
    4354:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
    4358:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    435c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    4360:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    4364:	5349534d 	movtpl	r5, #37709	; 0x934d
    4368:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    436c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    4370:	6f682f00 	svcvs	0x00682f00
    4374:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 41c8 <_Min_Stack_Size+0x3dc8>
    4378:	616c6965 	cmnvs	ip, r5, ror #18
    437c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4380:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4384:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
    4388:	705f6c61 	subsvc	r6, pc, r1, ror #24
    438c:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    4390:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
    4394:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
    4398:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    439c:	2f646564 	svccs	0x00646564
    43a0:	6f747561 	svcvs	0x00747561
    43a4:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
    43a8:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    43ac:	5f584554 	svcpl	0x00584554
    43b0:	5f46344d 	svcpl	0x0046344d
    43b4:	334d5453 	movtcc	r5, #54355	; 0xd453
    43b8:	49445f32 	stmdbmi	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    43bc:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
    43c0:	2f595245 	svccs	0x00595245
    43c4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    43c8:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    43cc:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    43d0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    43d4:	5f787834 	svcpl	0x00787834
    43d8:	50647453 	rsbpl	r7, r4, r3, asr r4
    43dc:	70697265 	rsbvc	r7, r9, r5, ror #4
    43e0:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    43e4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    43e8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    43ec:	74730000 	ldrbtvc	r0, [r3], #-0
    43f0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    43f4:	5f787834 	svcpl	0x00787834
    43f8:	63737973 	cmnvs	r3, #1884160	; 0x1cc000
    43fc:	632e6766 	teqvs	lr, #26738688	; 0x1980000
    4400:	00000100 	andeq	r0, r0, r0, lsl #2
    4404:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    4408:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    440c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    4410:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    4414:	00000200 	andeq	r0, r0, r0, lsl #4
    4418:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    441c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4420:	00000300 	andeq	r0, r0, r0, lsl #6
    4424:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    4428:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    442c:	00682e78 	rsbeq	r2, r8, r8, ror lr
    4430:	63000004 	movwvs	r0, #4
    4434:	5f65726f 	svcpl	0x0065726f
    4438:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    443c:	00050068 	andeq	r0, r5, r8, rrx
    4440:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    4444:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    4448:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
    444c:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    4450:	00000600 	andeq	r0, r0, r0, lsl #12
    4454:	02050000 	andeq	r0, r5, #0
    4458:	08004138 	stmdaeq	r0, {r3, r4, r5, r8, lr}
    445c:	0100e403 	tsteq	r0, r3, lsl #8
    4460:	2d3d5921 	ldccs	9, cr5, [sp, #-132]!	; 0xffffff7c
    4464:	01000202 	tsteq	r0, r2, lsl #4
    4468:	02050001 	andeq	r0, r5, #1
    446c:	08004154 	stmdaeq	r0, {r2, r4, r6, r8, lr}
    4470:	0100f603 	tsteq	r0, r3, lsl #12
    4474:	00060216 	andeq	r0, r6, r6, lsl r2
    4478:	05000101 	streq	r0, [r0, #-257]	; 0x101
    447c:	00416002 	subeq	r6, r1, r2
    4480:	018b0308 	orreq	r0, fp, r8, lsl #6
    4484:	06021601 	streq	r1, [r2], -r1, lsl #12
    4488:	00010100 	andeq	r0, r1, r0, lsl #2
    448c:	416c0205 	cmnmi	ip, r5, lsl #4
    4490:	a2030800 	andge	r0, r3, #0, 16
    4494:	036d0101 	cmneq	sp, #1073741824	; 0x40000000
    4498:	21272e79 	teqcs	r7, r9, ror lr
    449c:	213d2f1f 	teqcs	sp, pc, lsl pc
    44a0:	01023d2d 	tsteq	r2, sp, lsr #26
    44a4:	00010100 	andeq	r0, r1, r0, lsl #2
    44a8:	419c0205 	orrsmi	r0, ip, r5, lsl #4
    44ac:	b7030800 	strlt	r0, [r3, -r0, lsl #16]
    44b0:	02150101 	andseq	r0, r5, #1073741824	; 0x40000000
    44b4:	01010006 	tsteq	r1, r6
    44b8:	a8020500 	stmdage	r2, {r8, sl}
    44bc:	03080041 	movweq	r0, #32833	; 0x8041
    44c0:	160101c8 	strne	r0, [r1], -r8, asr #3
    44c4:	01000602 	tsteq	r0, r2, lsl #12
    44c8:	02050001 	andeq	r0, r5, #1
    44cc:	080041b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, lr}
    44d0:	0101d503 	tsteq	r1, r3, lsl #10
    44d4:	2e090315 	mcrcs	3, 0, r0, cr9, cr5, {0}
    44d8:	01000602 	tsteq	r0, r2, lsl #12
    44dc:	0005fa01 	andeq	pc, r5, r1, lsl #20
    44e0:	9b000200 	blls	4ce8 <_Min_Stack_Size+0x48e8>
    44e4:	02000002 	andeq	r0, r0, #2
    44e8:	0d0efb01 	vstreq	d15, [lr, #-4]
    44ec:	01010100 	mrseq	r0, (UNDEF: 17)
    44f0:	00000001 	andeq	r0, r0, r1
    44f4:	01000001 	tsteq	r0, r1
    44f8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4444 <_Min_Stack_Size+0x4044>
    44fc:	656c2f65 	strbvs	r2, [ip, #-3941]!	; 0xf65
    4500:	2f616c69 	svccs	0x00616c69
    4504:	6b736544 	blvs	1cdda1c <_Min_Stack_Size+0x1cdd61c>
    4508:	2f706f74 	svccs	0x00706f74
    450c:	616e6966 	cmnvs	lr, r6, ror #18
    4510:	72705f6c 	rsbsvc	r5, r0, #108, 30	; 0x1b0
    4514:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
    4518:	30325f74 	eorscc	r5, r2, r4, ror pc
    451c:	6d653531 	cfstr64vs	mvdx3, [r5, #-196]!	; 0xffffff3c
    4520:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    4524:	612f6465 	teqvs	pc, r5, ror #8
    4528:	426f7475 	rsbmi	r7, pc, #1962934272	; 0x75000000
    452c:	2f74616f 	svccs	0x0074616f
    4530:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    4534:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 4428 <_Min_Stack_Size+0x4028>
    4538:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    453c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    4540:	5349445f 	movtpl	r4, #37983	; 0x945f
    4544:	45564f43 	ldrbmi	r4, [r6, #-3907]	; 0xf43
    4548:	4c2f5952 	stcmi	9, cr5, [pc], #-328	; 4408 <_Min_Stack_Size+0x4008>
    454c:	61726269 	cmnvs	r2, r9, ror #4
    4550:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    4554:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    4558:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    455c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    4560:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    4564:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    4568:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    456c:	2f726576 	svccs	0x00726576
    4570:	00637273 	rsbeq	r7, r3, r3, ror r2
    4574:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4578:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    457c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    4580:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4584:	2f62696c 	svccs	0x0062696c
    4588:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    458c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    4590:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4594:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4598:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    459c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    45a0:	0062696c 	rsbeq	r6, r2, ip, ror #18
    45a4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 44f0 <_Min_Stack_Size+0x40f0>
    45a8:	656c2f65 	strbvs	r2, [ip, #-3941]!	; 0xf65
    45ac:	2f616c69 	svccs	0x00616c69
    45b0:	6b736544 	blvs	1cddac8 <_Min_Stack_Size+0x1cdd6c8>
    45b4:	2f706f74 	svccs	0x00706f74
    45b8:	616e6966 	cmnvs	lr, r6, ror #18
    45bc:	72705f6c 	rsbsvc	r5, r0, #108, 30	; 0x1b0
    45c0:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
    45c4:	30325f74 	eorscc	r5, r2, r4, ror pc
    45c8:	6d653531 	cfstr64vs	mvdx3, [r5, #-196]!	; 0xffffff3c
    45cc:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    45d0:	612f6465 	teqvs	pc, r5, ror #8
    45d4:	426f7475 	rsbmi	r7, pc, #1962934272	; 0x75000000
    45d8:	2f74616f 	svccs	0x0074616f
    45dc:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    45e0:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 44d4 <_Min_Stack_Size+0x40d4>
    45e4:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    45e8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    45ec:	5349445f 	movtpl	r4, #37983	; 0x945f
    45f0:	45564f43 	ldrbmi	r4, [r6, #-3907]	; 0xf43
    45f4:	4c2f5952 	stcmi	9, cr5, [pc], #-328	; 44b4 <_Min_Stack_Size+0x40b4>
    45f8:	61726269 	cmnvs	r2, r9, ror #4
    45fc:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    4600:	534d432f 	movtpl	r4, #54063	; 0xd32f
    4604:	442f5349 	strtmi	r5, [pc], #-841	; 460c <_Min_Stack_Size+0x420c>
    4608:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    460c:	54532f65 	ldrbpl	r2, [r3], #-3941	; 0xf65
    4610:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    4614:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    4618:	492f7878 	stmdbmi	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	; <UNPREDICTABLE>
    461c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    4620:	2f006564 	svccs	0x00006564
    4624:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
    4628:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
    462c:	442f616c 	strtmi	r6, [pc], #-364	; 4634 <_Min_Stack_Size+0x4234>
    4630:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    4634:	662f706f 	strtvs	r7, [pc], -pc, rrx
    4638:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
    463c:	6f72705f 	svcvs	0x0072705f
    4640:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    4644:	3130325f 	teqcc	r0, pc, asr r2
    4648:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
    464c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    4650:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
    4654:	6f426f74 	svcvs	0x00426f74
    4658:	432f7461 	teqmi	pc, #1627389952	; 0x61000000
    465c:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    4660:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    4664:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    4668:	5f32334d 	svcpl	0x0032334d
    466c:	43534944 	cmpmi	r3, #68, 18	; 0x110000
    4670:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
    4674:	694c2f59 	stmdbvs	ip, {r0, r3, r4, r6, r8, r9, sl, fp, sp}^
    4678:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    467c:	2f736569 	svccs	0x00736569
    4680:	334d5453 	movtcc	r5, #54355	; 0xd453
    4684:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    4688:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    468c:	72655064 	rsbvc	r5, r5, #100	; 0x64
    4690:	5f687069 	svcpl	0x00687069
    4694:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    4698:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    469c:	2f00636e 	svccs	0x0000636e
    46a0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
    46a4:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
    46a8:	442f616c 	strtmi	r6, [pc], #-364	; 46b0 <_Min_Stack_Size+0x42b0>
    46ac:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    46b0:	662f706f 	strtvs	r7, [pc], -pc, rrx
    46b4:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
    46b8:	6f72705f 	svcvs	0x0072705f
    46bc:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    46c0:	3130325f 	teqcc	r0, pc, asr r2
    46c4:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
    46c8:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    46cc:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
    46d0:	6f426f74 	svcvs	0x00426f74
    46d4:	432f7461 	teqmi	pc, #1627389952	; 0x61000000
    46d8:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    46dc:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    46e0:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    46e4:	5f32334d 	svcpl	0x0032334d
    46e8:	43534944 	cmpmi	r3, #68, 18	; 0x110000
    46ec:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
    46f0:	694c2f59 	stmdbvs	ip, {r0, r3, r4, r6, r8, r9, sl, fp, sp}^
    46f4:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    46f8:	2f736569 	svccs	0x00736569
    46fc:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    4700:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
    4704:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    4708:	73000065 	movwvc	r0, #101	; 0x65
    470c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    4710:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    4714:	6332695f 	teqvs	r2, #1556480	; 0x17c000
    4718:	0100632e 	tsteq	r0, lr, lsr #6
    471c:	645f0000 	ldrbvs	r0, [pc], #-0	; 4724 <_Min_Stack_Size+0x4324>
    4720:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    4724:	745f746c 	ldrbvc	r7, [pc], #-1132	; 472c <_Min_Stack_Size+0x432c>
    4728:	73657079 	cmnvc	r5, #121	; 0x79
    472c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4730:	74730000 	ldrbtvc	r0, [r3], #-0
    4734:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    4738:	0300682e 	movweq	r6, #2094	; 0x82e
    473c:	74730000 	ldrbtvc	r0, [r3], #-0
    4740:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    4744:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    4748:	00040068 	andeq	r0, r4, r8, rrx
    474c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    4750:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    4754:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
    4758:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    475c:	00000500 	andeq	r0, r0, r0, lsl #10
    4760:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    4764:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    4768:	32695f78 	rsbcc	r5, r9, #120, 30	; 0x1e0
    476c:	00682e63 	rsbeq	r2, r8, r3, ror #28
    4770:	63000005 	movwvs	r0, #5
    4774:	5f65726f 	svcpl	0x0065726f
    4778:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    477c:	00060068 	andeq	r0, r6, r8, rrx
    4780:	05000000 	streq	r0, [r0, #-0]
    4784:	0041c402 	subeq	ip, r1, r2, lsl #8
    4788:	01890308 	orreq	r0, r9, r8, lsl #6
    478c:	03432401 	movteq	r2, #13313	; 0x3401
    4790:	5a4d3c09 	bpl	13537bc <_Min_Stack_Size+0x13533bc>
    4794:	6e032b3f 	vmovvs.16	d3[0], r2
    4798:	13035a2e 	movwne	r5, #14894	; 0x3a2e
    479c:	2e6d033c 	mcrcs	3, 3, r0, cr13, cr12, {1}
    47a0:	0c035a33 	stceq	10, cr5, [r3], {51}	; 0x33
    47a4:	2e74033c 	mrccs	3, 3, r0, cr4, cr12, {1}
    47a8:	01000902 	tsteq	r0, r2, lsl #18
    47ac:	02050001 	andeq	r0, r5, #1
    47b0:	08004230 	stmdaeq	r0, {r4, r5, r9, lr}
    47b4:	0101b403 	tsteq	r1, r3, lsl #8
    47b8:	033c1403 	teqeq	ip, #50331648	; 0x3000000
    47bc:	1003206c 	andne	r2, r3, ip, rrx
    47c0:	222f2420 	eorcs	r2, pc, #32, 8	; 0x20000000
    47c4:	03200d03 	teqeq	r0, #3, 26	; 0xc0
    47c8:	41293c73 	teqmi	r9, r3, ror ip
    47cc:	2221251b 	eorcs	r2, r1, #113246208	; 0x6c00000
    47d0:	7a035e24 	bvc	dc068 <_Min_Stack_Size+0xdbc68>
    47d4:	4c232620 	stcmi	6, cr2, [r3], #-128	; 0xffffff80
    47d8:	03332928 	teqeq	r3, #40, 18	; 0xa0000
    47dc:	03222021 	teqeq	r2, #33	; 0x21
    47e0:	0334200a 	teqeq	r4, #10
    47e4:	224e2e70 	subcs	r2, lr, #112, 28	; 0x700
    47e8:	26241c5c 			; <UNDEFINED> instruction: 0x26241c5c
    47ec:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
    47f0:	0321241c 	teqeq	r1, #28, 8	; 0x1c000000
    47f4:	76602e53 			; <UNDEFINED> instruction: 0x76602e53
    47f8:	8e333f32 	mrchi	15, 1, r3, cr3, cr2, {1}
    47fc:	2e6d0330 	mcrcs	3, 3, r0, cr13, cr0, {1}
    4800:	01000d02 	tsteq	r0, r2, lsl #26
    4804:	02050001 	andeq	r0, r5, #1
    4808:	08004310 	stmdaeq	r0, {r4, r8, r9, lr}
    480c:	0102a103 	tsteq	r2, r3, lsl #2
    4810:	2a271b17 	bcs	9cb474 <_Min_Stack_Size+0x9cb074>
    4814:	032e0a03 	teqeq	lr, #12288	; 0x3000
    4818:	26242e76 			; <UNDEFINED> instruction: 0x26242e76
    481c:	24207803 	strtcs	r7, [r0], #-2051	; 0x803
    4820:	03022322 	movweq	r2, #8994	; 0x2322
    4824:	00010100 	andeq	r0, r1, r0, lsl #2
    4828:	43340205 	teqmi	r4, #1342177280	; 0x50000000
    482c:	b9030800 	stmdblt	r3, {fp}
    4830:	1d190102 	ldfnes	f0, [r9, #-8]
    4834:	05026128 	streq	r6, [r2, #-296]	; 0x128
    4838:	00010100 	andeq	r0, r1, r0, lsl #2
    483c:	43500205 	cmpmi	r0, #1342177280	; 0x50000000
    4840:	d6030800 	strle	r0, [r3], -r0, lsl #16
    4844:	1d190102 	ldfnes	f0, [r9, #-8]
    4848:	06025328 	streq	r5, [r2], -r8, lsr #6
    484c:	00010100 	andeq	r0, r1, r0, lsl #2
    4850:	436c0205 	cmnmi	ip, #1342177280	; 0x50000000
    4854:	f3030800 	vsub.i8	d0, d3, d0
    4858:	341a0102 	ldrcc	r0, [sl], #-258	; 0x102
    485c:	0223312b 	eoreq	r3, r3, #-1073741814	; 0xc000000a
    4860:	01010002 	tsteq	r1, r2
    4864:	80020500 	andhi	r0, r2, r0, lsl #10
    4868:	03080043 	movweq	r0, #32835	; 0x8043
    486c:	1901038f 	stmdbne	r1, {r0, r1, r2, r3, r7, r8, r9}
    4870:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    4874:	01010005 	tsteq	r1, r5
    4878:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    487c:	03080043 	movweq	r0, #32835	; 0x8043
    4880:	190103a7 	stmdbne	r1, {r0, r1, r2, r5, r7, r8, r9}
    4884:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    4888:	01010005 	tsteq	r1, r5
    488c:	b8020500 	stmdalt	r2, {r8, sl}
    4890:	03080043 	movweq	r0, #32835	; 0x8043
    4894:	170103c3 	strne	r0, [r1, -r3, asr #7]
    4898:	78033128 	stmdavc	r3, {r3, r5, r8, ip, sp}
    489c:	0202362e 	andeq	r3, r2, #48234496	; 0x2e00000
    48a0:	00010100 	andeq	r0, r1, r0, lsl #2
    48a4:	43cc0205 	bicmi	r0, ip, #1342177280	; 0x50000000
    48a8:	de030800 	cdple	8, 0, cr0, cr3, cr0, {0}
    48ac:	1d190103 	ldfnes	f0, [r9, #-12]
    48b0:	05026128 	streq	r6, [r2, #-296]	; 0x128
    48b4:	00010100 	andeq	r0, r1, r0, lsl #2
    48b8:	43e80205 	mvnmi	r0, #1342177280	; 0x50000000
    48bc:	f5030800 			; <UNDEFINED> instruction: 0xf5030800
    48c0:	34190103 	ldrcc	r0, [r9], #-259	; 0x103
    48c4:	0223312b 	eoreq	r3, r3, #-1073741814	; 0xc000000a
    48c8:	01010002 	tsteq	r1, r2
    48cc:	fc020500 	stc2	5, cr0, [r2], {-0}
    48d0:	03080043 	movweq	r0, #32835	; 0x8043
    48d4:	19010490 	stmdbne	r1, {r4, r7, sl}
    48d8:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    48dc:	01010005 	tsteq	r1, r5
    48e0:	18020500 	stmdane	r2, {r8, sl}
    48e4:	03080044 	movweq	r0, #32836	; 0x8044
    48e8:	190104a8 	stmdbne	r1, {r3, r5, r7, sl}
    48ec:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    48f0:	01010005 	tsteq	r1, r5
    48f4:	34020500 	strcc	r0, [r2], #-1280	; 0x500
    48f8:	03080044 	movweq	r0, #32836	; 0x8044
    48fc:	190104c2 	stmdbne	r1, {r1, r6, r7, sl}
    4900:	0245281d 	subeq	r2, r5, #1900544	; 0x1d0000
    4904:	01010007 	tsteq	r1, r7
    4908:	50020500 	andpl	r0, r2, r0, lsl #10
    490c:	03080044 	movweq	r0, #32836	; 0x8044
    4910:	190104da 	stmdbne	r1, {r1, r3, r4, r6, r7, sl}
    4914:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    4918:	01010005 	tsteq	r1, r5
    491c:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
    4920:	03080044 	movweq	r0, #32836	; 0x8044
    4924:	160104f4 			; <UNDEFINED> instruction: 0x160104f4
    4928:	6b231d31 	blvs	8cbdf4 <_Min_Stack_Size+0x8cb9f4>
    492c:	01000502 	tsteq	r0, r2, lsl #10
    4930:	02050001 	andeq	r0, r5, #1
    4934:	0800448c 	stmdaeq	r0, {r2, r3, r7, sl, lr}
    4938:	01059a03 	tsteq	r5, r3, lsl #20
    493c:	281d3118 	ldmdacs	sp, {r3, r4, r8, ip, sp}
    4940:	00050261 	andeq	r0, r5, r1, ror #4
    4944:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4948:	0044ac02 	subeq	sl, r4, r2, lsl #24
    494c:	05b60308 	ldreq	r0, [r6, #776]!	; 0x308
    4950:	1d311601 	ldcne	6, cr1, [r1, #-4]!
    4954:	05026128 	streq	r6, [r2, #-296]	; 0x128
    4958:	00010100 	andeq	r0, r1, r0, lsl #2
    495c:	44cc0205 	strbmi	r0, [ip], #517	; 0x205
    4960:	ce030800 	cdpgt	8, 0, cr0, cr3, cr0, {0}
    4964:	1d190105 	ldfnes	f0, [r9, #-20]	; 0xffffffec
    4968:	05026128 	streq	r6, [r2, #-296]	; 0x128
    496c:	00010100 	andeq	r0, r1, r0, lsl #2
    4970:	44e80205 	strbtmi	r0, [r8], #517	; 0x205
    4974:	f4030800 	vst2.8	{d0-d1}, [r3], r0
    4978:	02160105 	andseq	r0, r6, #1073741825	; 0x40000001
    497c:	01010002 	tsteq	r1, r2
    4980:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    4984:	03080044 	movweq	r0, #32836	; 0x8044
    4988:	16010681 	strne	r0, [r1], -r1, lsl #13
    498c:	00020221 	andeq	r0, r2, r1, lsr #4
    4990:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4994:	0044f402 	subeq	pc, r4, r2, lsl #8
    4998:	06a00308 	strteq	r0, [r0], r8, lsl #6
    499c:	281d1901 	ldmdacs	sp, {r0, r8, fp, ip}
    49a0:	00050261 	andeq	r0, r5, r1, ror #4
    49a4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    49a8:	00451002 	subeq	r1, r5, r2
    49ac:	06bf0308 	ldrteq	r0, [pc], r8, lsl #6
    49b0:	1d311601 	ldcne	6, cr1, [r1, #-4]!
    49b4:	05026128 	streq	r6, [r2, #-296]	; 0x128
    49b8:	00010100 	andeq	r0, r1, r0, lsl #2
    49bc:	45300205 	ldrmi	r0, [r0, #-517]!	; 0x205
    49c0:	d7030800 	strle	r0, [r3, -r0, lsl #16]
    49c4:	1d190106 	ldfnes	f0, [r9, #-24]	; 0xffffffe8
    49c8:	05026128 	streq	r6, [r2, #-296]	; 0x128
    49cc:	00010100 	andeq	r0, r1, r0, lsl #2
    49d0:	454c0205 	strbmi	r0, [ip, #-517]	; 0x205
    49d4:	ed030800 	stc	8, cr0, [r3, #-0]
    49d8:	21160106 	tstcs	r6, r6, lsl #2
    49dc:	01000302 	tsteq	r0, r2, lsl #6
    49e0:	02050001 	andeq	r0, r5, #1
    49e4:	08004554 	stmdaeq	r0, {r2, r4, r6, r8, sl, lr}
    49e8:	01078e03 	tsteq	r7, r3, lsl #28
    49ec:	61281d19 	teqvs	r8, r9, lsl sp
    49f0:	01000502 	tsteq	r0, r2, lsl #10
    49f4:	02050001 	andeq	r0, r5, #1
    49f8:	08004570 	stmdaeq	r0, {r4, r5, r6, r8, sl, lr}
    49fc:	0107a603 	tsteq	r7, r3, lsl #12
    4a00:	61281d19 	teqvs	r8, r9, lsl sp
    4a04:	01000502 	tsteq	r0, r2, lsl #10
    4a08:	02050001 	andeq	r0, r5, #1
    4a0c:	0800458c 	stmdaeq	r0, {r2, r3, r7, r8, sl, lr}
    4a10:	0108b003 	tsteq	r8, r3
    4a14:	3f213421 	svccc	0x00213421
    4a18:	0003022f 	andeq	r0, r3, pc, lsr #4
    4a1c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4a20:	0045a402 	subeq	sl, r5, r2, lsl #8
    4a24:	08cb0308 	stmiaeq	fp, {r3, r8, r9}^
    4a28:	01090301 	tsteq	r9, r1, lsl #6
    4a2c:	0245282b 	subeq	r2, r5, #2818048	; 0x2b0000
    4a30:	01010003 	tsteq	r1, r3
    4a34:	b8020500 	stmdalt	r2, {r8, sl}
    4a38:	03080045 	movweq	r0, #32837	; 0x8045
    4a3c:	03010986 	movweq	r0, #6534	; 0x1986
    4a40:	1f21010a 	svcne	0x0021010a
    4a44:	0c034d25 	stceq	13, cr4, [r3], {37}	; 0x25
    4a48:	00040220 	andeq	r0, r4, r0, lsr #4
    4a4c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4a50:	0045d002 	subeq	sp, r5, r2
    4a54:	09b60308 	ldmibeq	r6!, {r3, r8, r9}
    4a58:	1f211a01 	svcne	0x00211a01
    4a5c:	03023225 	movweq	r3, #8741	; 0x2225
    4a60:	00010100 	andeq	r0, r1, r0, lsl #2
    4a64:	45e00205 	strbmi	r0, [r0, #517]!	; 0x205
    4a68:	ed030800 	stc	8, cr0, [r3, #-0]
    4a6c:	03220109 	teqeq	r2, #1073741826	; 0x40000002
    4a70:	7603200a 	strvc	r2, [r3], -sl
    4a74:	25233520 	strcs	r3, [r3, #-1312]!	; 0x520
    4a78:	0323301e 	teqeq	r3, #30
    4a7c:	0d033c0a 	stceq	12, cr3, [r3, #-40]	; 0xffffffd8
    4a80:	5870033c 	ldmdapl	r0!, {r2, r3, r4, r5, r8, r9}^
    4a84:	0202222c 	andeq	r2, r2, #44, 4	; 0xc0000002
    4a88:	00010100 	andeq	r0, r1, r0, lsl #2
    4a8c:	46180205 	ldrmi	r0, [r8], -r5, lsl #4
    4a90:	ba030800 	blt	c6a98 <_Min_Stack_Size+0xc6698>
    4a94:	021a010a 	andseq	r0, sl, #-2147483646	; 0x80000002
    4a98:	01010004 	tsteq	r1, r4
    4a9c:	20020500 	andcs	r0, r2, r0, lsl #10
    4aa0:	03080046 	movweq	r0, #32838	; 0x8046
    4aa4:	03010adc 	movweq	r0, #6876	; 0x1adc
    4aa8:	03260109 	teqeq	r6, #1073741826	; 0x40000002
    4aac:	00263c7a 	eoreq	r3, r6, sl, ror ip
    4ab0:	03010402 	movweq	r0, #5122	; 0x1402
    4ab4:	0200207a 	andeq	r2, r0, #122	; 0x7a
    4ab8:	00340104 	eorseq	r0, r4, r4, lsl #2
    4abc:	31010402 	tstcc	r1, r2, lsl #8
    4ac0:	023c0903 	eorseq	r0, ip, #49152	; 0xc000
    4ac4:	01010001 	tsteq	r1, r1
    4ac8:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    4acc:	03080046 	movweq	r0, #32838	; 0x8046
    4ad0:	03010b98 	movweq	r0, #7064	; 0x1b98
    4ad4:	0402010a 	streq	r0, [r2], #-266	; 0x10a
    4ad8:	f7010100 			; <UNDEFINED> instruction: 0xf7010100
    4adc:	02000004 	andeq	r0, r0, #4
    4ae0:	00028800 	andeq	r8, r2, r0, lsl #16
    4ae4:	fb010200 	blx	452ee <_Min_Stack_Size+0x44eee>
    4ae8:	01000d0e 	tsteq	r0, lr, lsl #26
    4aec:	00010101 	andeq	r0, r1, r1, lsl #2
    4af0:	00010000 	andeq	r0, r1, r0
    4af4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4af8:	2f656d6f 	svccs	0x00656d6f
    4afc:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
    4b00:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
    4b04:	6f746b73 	svcvs	0x00746b73
    4b08:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    4b0c:	5f6c616e 	svcpl	0x006c616e
    4b10:	6a6f7270 	bvs	1be14d8 <_Min_Stack_Size+0x1be10d8>
    4b14:	5f746365 	svcpl	0x00746365
    4b18:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
    4b1c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    4b20:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    4b24:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
    4b28:	616f426f 	cmnvs	pc, pc, ror #4
    4b2c:	4f432f74 	svcmi	0x00432f74
    4b30:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    4b34:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    4b38:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    4b3c:	445f3233 	ldrbmi	r3, [pc], #-563	; 4b44 <_Min_Stack_Size+0x4744>
    4b40:	4f435349 	svcmi	0x00435349
    4b44:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
    4b48:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    4b4c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    4b50:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    4b54:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    4b58:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    4b5c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    4b60:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    4b64:	445f6870 	ldrbmi	r6, [pc], #-2160	; 4b6c <_Min_Stack_Size+0x476c>
    4b68:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    4b6c:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    4b70:	752f0063 	strvc	r0, [pc, #-99]!	; 4b15 <_Min_Stack_Size+0x4715>
    4b74:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    4b78:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    4b7c:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    4b80:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4b84:	616d2f62 	cmnvs	sp, r2, ror #30
    4b88:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    4b8c:	752f0065 	strvc	r0, [pc, #-101]!	; 4b2f <_Min_Stack_Size+0x472f>
    4b90:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    4b94:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    4b98:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    4b9c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4ba0:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
    4ba4:	2f656d6f 	svccs	0x00656d6f
    4ba8:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
    4bac:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
    4bb0:	6f746b73 	svcvs	0x00746b73
    4bb4:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    4bb8:	5f6c616e 	svcpl	0x006c616e
    4bbc:	6a6f7270 	bvs	1be1584 <_Min_Stack_Size+0x1be1184>
    4bc0:	5f746365 	svcpl	0x00746365
    4bc4:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
    4bc8:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    4bcc:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    4bd0:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
    4bd4:	616f426f 	cmnvs	pc, pc, ror #4
    4bd8:	4f432f74 	svcmi	0x00432f74
    4bdc:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    4be0:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    4be4:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    4be8:	445f3233 	ldrbmi	r3, [pc], #-563	; 4bf0 <_Min_Stack_Size+0x47f0>
    4bec:	4f435349 	svcmi	0x00435349
    4bf0:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
    4bf4:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    4bf8:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    4bfc:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    4c00:	5349534d 	movtpl	r5, #37709	; 0x934d
    4c04:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    4c08:	2f656369 	svccs	0x00656369
    4c0c:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    4c10:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    4c14:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    4c18:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    4c1c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    4c20:	6f682f00 	svcvs	0x00682f00
    4c24:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 4a78 <_Min_Stack_Size+0x4678>
    4c28:	616c6965 	cmnvs	ip, r5, ror #18
    4c2c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4c30:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4c34:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
    4c38:	705f6c61 	subsvc	r6, pc, r1, ror #24
    4c3c:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    4c40:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
    4c44:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
    4c48:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    4c4c:	2f646564 	svccs	0x00646564
    4c50:	6f747561 	svcvs	0x00747561
    4c54:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
    4c58:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    4c5c:	5f584554 	svcpl	0x00584554
    4c60:	5f46344d 	svcpl	0x0046344d
    4c64:	334d5453 	movtcc	r5, #54355	; 0xd453
    4c68:	49445f32 	stmdbmi	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    4c6c:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
    4c70:	2f595245 	svccs	0x00595245
    4c74:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    4c78:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    4c7c:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    4c80:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    4c84:	5f787834 	svcpl	0x00787834
    4c88:	50647453 	rsbpl	r7, r4, r3, asr r4
    4c8c:	70697265 	rsbvc	r7, r9, r5, ror #4
    4c90:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    4c94:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    4c98:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4c9c:	6f682f00 	svcvs	0x00682f00
    4ca0:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 4af4 <_Min_Stack_Size+0x46f4>
    4ca4:	616c6965 	cmnvs	ip, r5, ror #18
    4ca8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4cac:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4cb0:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
    4cb4:	705f6c61 	subsvc	r6, pc, r1, ror #24
    4cb8:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    4cbc:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
    4cc0:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
    4cc4:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    4cc8:	2f646564 	svccs	0x00646564
    4ccc:	6f747561 	svcvs	0x00747561
    4cd0:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
    4cd4:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    4cd8:	5f584554 	svcpl	0x00584554
    4cdc:	5f46344d 	svcpl	0x0046344d
    4ce0:	334d5453 	movtcc	r5, #54355	; 0xd453
    4ce4:	49445f32 	stmdbmi	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    4ce8:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
    4cec:	2f595245 	svccs	0x00595245
    4cf0:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    4cf4:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    4cf8:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    4cfc:	2f534953 	svccs	0x00534953
    4d00:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    4d04:	00656475 	rsbeq	r6, r5, r5, ror r4
    4d08:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    4d0c:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    4d10:	645f7878 	ldrbvs	r7, [pc], #-2168	; 4d18 <_Min_Stack_Size+0x4918>
    4d14:	632e616d 	teqvs	lr, #1073741851	; 0x4000001b
    4d18:	00000100 	andeq	r0, r0, r0, lsl #2
    4d1c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    4d20:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    4d24:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    4d28:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    4d2c:	00000200 	andeq	r0, r0, r0, lsl #4
    4d30:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4d34:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4d38:	00000300 	andeq	r0, r0, r0, lsl #6
    4d3c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    4d40:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    4d44:	00682e78 	rsbeq	r2, r8, r8, ror lr
    4d48:	73000004 	movwvc	r0, #4
    4d4c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    4d50:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    4d54:	616d645f 	cmnvs	sp, pc, asr r4
    4d58:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    4d5c:	6f630000 	svcvs	0x00630000
    4d60:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    4d64:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    4d68:	00000600 	andeq	r0, r0, r0, lsl #12
    4d6c:	02050000 	andeq	r0, r5, #0
    4d70:	08004644 	stmdaeq	r0, {r2, r6, r9, sl, lr}
    4d74:	0101c403 	tsteq	r1, r3, lsl #8
    4d78:	03201a03 	teqeq	r0, #12288	; 0x3000
    4d7c:	1d23206b 	stcne	0, cr2, [r3, #-428]!	; 0xfffffe54
    4d80:	232e1203 	teqcs	lr, #805306368	; 0x30000000
    4d84:	23206b03 	teqcs	r0, #3072	; 0xc00
    4d88:	23232323 	teqcs	r3, #-1946157056	; 0x8c000000
    4d8c:	41252323 	teqmi	r5, r3, lsr #6
    4d90:	41414141 	cmpmi	r1, r1, asr #2
    4d94:	41414141 	cmpmi	r1, r1, asr #2
    4d98:	41414141 	cmpmi	r1, r1, asr #2
    4d9c:	76034243 	strvc	r4, [r3], -r3, asr #4
    4da0:	6003513c 	andvs	r5, r3, ip, lsr r1
    4da4:	4a230358 	bmi	8c5b0c <_Min_Stack_Size+0x8c570c>
    4da8:	033c6203 	teqeq	ip, #805306368	; 0x30000000
    4dac:	67034a1e 	smladvs	r3, lr, sl, r4
    4db0:	4a19033c 	bmi	645aa8 <_Min_Stack_Size+0x6456a8>
    4db4:	3c7fb003 	ldclcc	0, cr11, [pc], #-12	; 4db0 <_Min_Stack_Size+0x49b0>
    4db8:	2000d003 	andcs	sp, r0, r3
    4dbc:	2e7fb003 	cdpcs	0, 7, cr11, cr15, cr3, {0}
    4dc0:	2e00d003 	cdpcs	0, 0, cr13, cr0, cr3, {0}
    4dc4:	4f206c03 	svcmi	0x00206c03
    4dc8:	024a6703 	subeq	r6, sl, #786432	; 0xc0000
    4dcc:	0101002c 	tsteq	r1, ip, lsr #32
    4dd0:	74020500 	strvc	r0, [r2], #-1280	; 0x500
    4dd4:	03080047 	movweq	r0, #32839	; 0x8047
    4dd8:	030102bf 	movweq	r0, #4799	; 0x12bf
    4ddc:	6d030128 	stfvss	f0, [r3, #-160]	; 0xffffff60
    4de0:	2e6b032e 	cdpcs	3, 6, cr0, cr11, cr14, {1}
    4de4:	212e2803 	teqcs	lr, r3, lsl #16
    4de8:	2a2f212f 	bcs	bcd2ac <_Min_Stack_Size+0xbcceac>
    4dec:	1c03214b 	stfnes	f2, [r3], {75}	; 0x4b
    4df0:	20630320 	rsbcs	r0, r3, r0, lsr #6
    4df4:	6d033d21 	stcvs	13, cr3, [r3, #-132]	; 0xffffff7c
    4df8:	20230320 	eorcs	r0, r3, r0, lsr #6
    4dfc:	20690327 	rsbcs	r0, r9, r7, lsr #6
    4e00:	2e6c033d 	mcrcs	3, 3, r0, cr12, cr13, {1}
    4e04:	032e1003 	teqeq	lr, #3
    4e08:	0f032e13 	svceq	0x00032e13
    4e0c:	20650320 	rsbcs	r0, r5, r0, lsr #6
    4e10:	331b2824 	tstcc	fp, #36, 16	; 0x240000
    4e14:	24242423 	strtcs	r2, [r4], #-1059	; 0x423
    4e18:	00060221 	andeq	r0, r6, r1, lsr #4
    4e1c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4e20:	0047e402 	subeq	lr, r7, r2, lsl #8
    4e24:	03930308 	orrseq	r0, r3, #8, 6	; 0x20000000
    4e28:	23311501 	teqcs	r1, #4194304	; 0x400000
    4e2c:	23232323 	teqcs	r3, #-1946157056	; 0x8c000000
    4e30:	23232323 	teqcs	r3, #-1946157056	; 0x8c000000
    4e34:	23232323 	teqcs	r3, #-1946157056	; 0x8c000000
    4e38:	01000202 	tsteq	r0, r2, lsl #4
    4e3c:	02050001 	andeq	r0, r5, #1
    4e40:	08004808 	stmdaeq	r0, {r3, fp, lr}
    4e44:	0103de03 	tsteq	r3, r3, lsl #28
    4e48:	45281d1a 	strmi	r1, [r8, #-3354]!	; 0xd1a
    4e4c:	01000402 	tsteq	r0, r2, lsl #8
    4e50:	02050001 	andeq	r0, r5, #1
    4e54:	0800481c 	stmdaeq	r0, {r2, r3, r4, fp, lr}
    4e58:	01048203 	tsteq	r4, r3, lsl #4
    4e5c:	1d010903 	stcne	9, cr0, [r1, #-12]
    4e60:	04024528 	streq	r4, [r2], #-1320	; 0x528
    4e64:	00010100 	andeq	r0, r1, r0, lsl #2
    4e68:	48300205 	ldmdami	r0!, {r0, r2, r9}
    4e6c:	a6030800 	strge	r0, [r3], -r0, lsl #16
    4e70:	09030104 	stmdbeq	r3, {r2, r8}
    4e74:	45281d01 	strmi	r1, [r8, #-3329]!	; 0xd01
    4e78:	01000402 	tsteq	r0, r2, lsl #8
    4e7c:	02050001 	andeq	r0, r5, #1
    4e80:	08004844 	stmdaeq	r0, {r2, r6, fp, lr}
    4e84:	0104f803 	tsteq	r4, r3, lsl #16
    4e88:	00020217 	andeq	r0, r2, r7, lsl r2
    4e8c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4e90:	00484802 	subeq	r4, r8, r2, lsl #16
    4e94:	05870308 	streq	r0, [r7, #776]	; 0x308
    4e98:	02211701 	eoreq	r1, r1, #262144	; 0x40000
    4e9c:	01010002 	tsteq	r1, r2
    4ea0:	50020500 	andpl	r0, r2, r0, lsl #10
    4ea4:	03080048 	movweq	r0, #32840	; 0x8048
    4ea8:	1a0105db 	bne	4661c <_Min_Stack_Size+0x4621c>
    4eac:	0340281d 	movteq	r2, #2077	; 0x81d
    4eb0:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    4eb4:	0002023c 	andeq	r0, r2, ip, lsr r2
    4eb8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4ebc:	00486802 	subeq	r6, r8, r2, lsl #16
    4ec0:	05f90308 	ldrbeq	r0, [r9, #776]!	; 0x308
    4ec4:	01090301 	tsteq	r9, r1, lsl #6
    4ec8:	0245281d 	subeq	r2, r5, #1900544	; 0x1d0000
    4ecc:	01010004 	tsteq	r1, r4
    4ed0:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
    4ed4:	03080048 	movweq	r0, #32840	; 0x8048
    4ed8:	180106a3 	stmdane	r1, {r0, r1, r5, r7, r9, sl}
    4edc:	02022928 	andeq	r2, r2, #40, 18	; 0xa0000
    4ee0:	00010100 	andeq	r0, r1, r0, lsl #2
    4ee4:	48880205 	stmmi	r8, {r0, r2, r9}
    4ee8:	bc030800 	stclt	8, cr0, [r3], {-0}
    4eec:	03190106 	tsteq	r9, #-2147483647	; 0x80000001
    4ef0:	0302200b 	movweq	r2, #8203	; 0x200b
    4ef4:	00010100 	andeq	r0, r1, r0, lsl #2
    4ef8:	48900205 	ldmmi	r0, {r0, r2, r9}
    4efc:	af030800 	svcge	0x00030800
    4f00:	03180107 	tsteq	r8, #-1073741823	; 0xc0000001
    4f04:	0302200c 	movweq	r2, #8204	; 0x200c
    4f08:	00010100 	andeq	r0, r1, r0, lsl #2
    4f0c:	48980205 	ldmmi	r8, {r0, r2, r9}
    4f10:	d1030800 	tstle	r3, r0, lsl #16
    4f14:	23190107 	tstcs	r9, #-1073741823	; 0xc0000001
    4f18:	01000302 	tsteq	r0, r2, lsl #6
    4f1c:	02050001 	andeq	r0, r5, #1
    4f20:	080048a0 	stmdaeq	r0, {r5, r7, fp, lr}
    4f24:	0107ec03 	tsteq	r7, r3, lsl #24
    4f28:	03010d03 	movweq	r0, #7427	; 0x1d03
    4f2c:	0a032e73 	beq	d0900 <_Min_Stack_Size+0xd0500>
    4f30:	09032320 	stmdbeq	r3, {r5, r8, r9, sp}
    4f34:	0333234a 	teqeq	r3, #671088641	; 0x28000001
    4f38:	70032014 	andvc	r2, r3, r4, lsl r0
    4f3c:	0d034d2e 	stceq	13, cr4, [r3, #-184]	; 0xffffff48
    4f40:	000b0220 	andeq	r0, fp, r0, lsr #4
    4f44:	05000101 	streq	r0, [r0, #-257]	; 0x101
    4f48:	0048dc02 	subeq	sp, r8, r2, lsl #24
    4f4c:	08af0308 	stmiaeq	pc!, {r3, r8, r9}	; <UNPREDICTABLE>
    4f50:	200b0301 	andcs	r0, fp, r1, lsl #6
    4f54:	0903231d 	stmdbeq	r3, {r0, r2, r3, r4, r8, r9, sp}
    4f58:	226b3158 	rsbcs	r3, fp, #88, 2
    4f5c:	01000902 	tsteq	r0, r2, lsl #18
    4f60:	02050001 	andeq	r0, r5, #1
    4f64:	08004910 	stmdaeq	r0, {r4, r8, fp, lr}
    4f68:	0108de03 	tsteq	r8, r3, lsl #28
    4f6c:	231d3319 	tstcs	sp, #1677721600	; 0x64000000
    4f70:	032e0a03 	teqeq	lr, #12288	; 0x3000
    4f74:	0a032076 	beq	cd154 <_Min_Stack_Size+0xccd54>
    4f78:	30612520 	rsbcc	r2, r1, r0, lsr #10
    4f7c:	74710336 	ldrbtvc	r0, [r1], #-822	; 0x336
    4f80:	02251b33 	eoreq	r1, r5, #52224	; 0xcc00
    4f84:	01010002 	tsteq	r1, r2
    4f88:	50020500 	andpl	r0, r2, r0, lsl #10
    4f8c:	03080049 	movweq	r0, #32841	; 0x8049
    4f90:	03010992 	movweq	r0, #6546	; 0x1992
    4f94:	231d200d 	tstcs	sp, #13
    4f98:	03200903 	teqeq	r0, #49152	; 0xc000
    4f9c:	09034a77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, fp, lr}
    4fa0:	311d263c 	tstcc	sp, ip, lsr r6
    4fa4:	232e0903 	teqcs	lr, #49152	; 0xc000
    4fa8:	00312433 	eorseq	r2, r1, r3, lsr r4
    4fac:	3f010402 	svccc	0x00010402
    4fb0:	033c0a03 	teqeq	ip, #12288	; 0x3000
    4fb4:	0b022e60 	bleq	9093c <_Min_Stack_Size+0x9053c>
    4fb8:	00010100 	andeq	r0, r1, r0, lsl #2
    4fbc:	49a40205 	stmibmi	r4!, {r0, r2, r9}
    4fc0:	e4030800 	str	r0, [r3], #-2048	; 0x800
    4fc4:	0b030109 	bleq	c53f0 <_Min_Stack_Size+0xc4ff0>
    4fc8:	03231d20 	teqeq	r3, #32, 26	; 0x800
    4fcc:	6b315809 	blvs	c5aff8 <_Min_Stack_Size+0xc5abf8>
    4fd0:	00090222 	andeq	r0, r9, r2, lsr #4
    4fd4:	05810101 	streq	r0, [r1, #257]	; 0x101
    4fd8:	00020000 	andeq	r0, r2, r0
    4fdc:	0000029b 	muleq	r0, fp, r2
    4fe0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4fe4:	0101000d 	tsteq	r1, sp
    4fe8:	00000101 	andeq	r0, r0, r1, lsl #2
    4fec:	00000100 	andeq	r0, r0, r0, lsl #2
    4ff0:	6f682f01 	svcvs	0x00682f01
    4ff4:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 4e48 <_Min_Stack_Size+0x4a48>
    4ff8:	616c6965 	cmnvs	ip, r5, ror #18
    4ffc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5000:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5004:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
    5008:	705f6c61 	subsvc	r6, pc, r1, ror #24
    500c:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    5010:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
    5014:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
    5018:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    501c:	2f646564 	svccs	0x00646564
    5020:	6f747561 	svcvs	0x00747561
    5024:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
    5028:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    502c:	5f584554 	svcpl	0x00584554
    5030:	5f46344d 	svcpl	0x0046344d
    5034:	334d5453 	movtcc	r5, #54355	; 0xd453
    5038:	49445f32 	stmdbmi	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    503c:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
    5040:	2f595245 	svccs	0x00595245
    5044:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    5048:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    504c:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    5050:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    5054:	5f787834 	svcpl	0x00787834
    5058:	50647453 	rsbpl	r7, r4, r3, asr r4
    505c:	70697265 	rsbvc	r7, r9, r5, ror #4
    5060:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    5064:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    5068:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    506c:	73752f00 	cmnvc	r5, #0, 30
    5070:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    5074:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    5078:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    507c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5080:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    5084:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    5088:	73752f00 	cmnvc	r5, #0, 30
    508c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    5090:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    5094:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xf65
    5098:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    509c:	6f682f00 	svcvs	0x00682f00
    50a0:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 4ef4 <_Min_Stack_Size+0x4af4>
    50a4:	616c6965 	cmnvs	ip, r5, ror #18
    50a8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    50ac:	706f746b 	rsbvc	r7, pc, fp, ror #8
    50b0:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
    50b4:	705f6c61 	subsvc	r6, pc, r1, ror #24
    50b8:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    50bc:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
    50c0:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
    50c4:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    50c8:	2f646564 	svccs	0x00646564
    50cc:	6f747561 	svcvs	0x00747561
    50d0:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
    50d4:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    50d8:	5f584554 	svcpl	0x00584554
    50dc:	5f46344d 	svcpl	0x0046344d
    50e0:	334d5453 	movtcc	r5, #54355	; 0xd453
    50e4:	49445f32 	stmdbmi	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    50e8:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
    50ec:	2f595245 	svccs	0x00595245
    50f0:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    50f4:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    50f8:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    50fc:	2f534953 	svccs	0x00534953
    5100:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    5104:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
    5108:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
    510c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    5110:	2f787834 	svccs	0x00787834
    5114:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    5118:	00656475 	rsbeq	r6, r5, r5, ror r4
    511c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5068 <_Min_Stack_Size+0x4c68>
    5120:	656c2f65 	strbvs	r2, [ip, #-3941]!	; 0xf65
    5124:	2f616c69 	svccs	0x00616c69
    5128:	6b736544 	blvs	1cde640 <_Min_Stack_Size+0x1cde240>
    512c:	2f706f74 	svccs	0x00706f74
    5130:	616e6966 	cmnvs	lr, r6, ror #18
    5134:	72705f6c 	rsbsvc	r5, r0, #108, 30	; 0x1b0
    5138:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
    513c:	30325f74 	eorscc	r5, r2, r4, ror pc
    5140:	6d653531 	cfstr64vs	mvdx3, [r5, #-196]!	; 0xffffff3c
    5144:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    5148:	612f6465 	teqvs	pc, r5, ror #8
    514c:	426f7475 	rsbmi	r7, pc, #1962934272	; 0x75000000
    5150:	2f74616f 	svccs	0x0074616f
    5154:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    5158:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 504c <_Min_Stack_Size+0x4c4c>
    515c:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    5160:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    5164:	5349445f 	movtpl	r4, #37983	; 0x945f
    5168:	45564f43 	ldrbmi	r4, [r6, #-3907]	; 0xf43
    516c:	4c2f5952 	stcmi	9, cr5, [pc], #-328	; 502c <_Min_Stack_Size+0x4c2c>
    5170:	61726269 	cmnvs	r2, r9, ror #4
    5174:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    5178:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    517c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    5180:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    5184:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    5188:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    518c:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    5190:	2f726576 	svccs	0x00726576
    5194:	00636e69 	rsbeq	r6, r3, r9, ror #28
    5198:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 50e4 <_Min_Stack_Size+0x4ce4>
    519c:	656c2f65 	strbvs	r2, [ip, #-3941]!	; 0xf65
    51a0:	2f616c69 	svccs	0x00616c69
    51a4:	6b736544 	blvs	1cde6bc <_Min_Stack_Size+0x1cde2bc>
    51a8:	2f706f74 	svccs	0x00706f74
    51ac:	616e6966 	cmnvs	lr, r6, ror #18
    51b0:	72705f6c 	rsbsvc	r5, r0, #108, 30	; 0x1b0
    51b4:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
    51b8:	30325f74 	eorscc	r5, r2, r4, ror pc
    51bc:	6d653531 	cfstr64vs	mvdx3, [r5, #-196]!	; 0xffffff3c
    51c0:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    51c4:	612f6465 	teqvs	pc, r5, ror #8
    51c8:	426f7475 	rsbmi	r7, pc, #1962934272	; 0x75000000
    51cc:	2f74616f 	svccs	0x0074616f
    51d0:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    51d4:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 50c8 <_Min_Stack_Size+0x4cc8>
    51d8:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    51dc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    51e0:	5349445f 	movtpl	r4, #37983	; 0x945f
    51e4:	45564f43 	ldrbmi	r4, [r6, #-3907]	; 0xf43
    51e8:	4c2f5952 	stcmi	9, cr5, [pc], #-328	; 50a8 <_Min_Stack_Size+0x4ca8>
    51ec:	61726269 	cmnvs	r2, r9, ror #4
    51f0:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    51f4:	534d432f 	movtpl	r4, #54063	; 0xd32f
    51f8:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    51fc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    5200:	00006564 	andeq	r6, r0, r4, ror #10
    5204:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    5208:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    520c:	70735f78 	rsbsvc	r5, r3, r8, ror pc
    5210:	00632e69 	rsbeq	r2, r3, r9, ror #28
    5214:	5f000001 	svcpl	0x00000001
    5218:	61666564 	cmnvs	r6, r4, ror #10
    521c:	5f746c75 	svcpl	0x00746c75
    5220:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    5224:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5228:	73000002 	movwvc	r0, #2
    522c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5230:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5234:	73000003 	movwvc	r0, #3
    5238:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    523c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    5240:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    5244:	74730000 	ldrbtvc	r0, [r3], #-0
    5248:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    524c:	5f787834 	svcpl	0x00787834
    5250:	2e697073 	mcrcs	0, 3, r7, cr9, cr3, {3}
    5254:	00050068 	andeq	r0, r5, r8, rrx
    5258:	726f6300 	rsbvc	r6, pc, #0, 6
    525c:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    5260:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    5264:	73000006 	movwvc	r0, #6
    5268:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    526c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    5270:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    5274:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    5278:	00000000 	andeq	r0, r0, r0
    527c:	49d80205 	ldmibmi	r8, {r0, r2, r9}^
    5280:	e0030800 	and	r0, r3, r0, lsl #16
    5284:	43240101 	teqmi	r4, #1073741824	; 0x40000000
    5288:	03434343 	movteq	r4, #13123	; 0x3343
    528c:	5a4d3c09 	bpl	13542b8 <_Min_Stack_Size+0x1353eb8>
    5290:	59032b3f 	stmdbpl	r3, {r0, r1, r2, r3, r4, r5, r8, r9, fp, sp}
    5294:	28035a2e 	stmdacs	r3, {r1, r2, r3, r5, r9, fp, ip, lr}
    5298:	2e58033c 	mrccs	3, 2, r0, cr8, cr12, {1}
    529c:	21035a33 	tstcs	r3, r3, lsr sl
    52a0:	2e5f033c 	mrccs	3, 2, r0, cr15, cr12, {1}
    52a4:	1a035a33 	bne	dbb78 <_Min_Stack_Size+0xdb778>
    52a8:	2e66033c 	mcrcs	3, 3, r0, cr6, cr12, {1}
    52ac:	13035a33 	movwne	r5, #14899	; 0x3a33
    52b0:	2e6d033c 	mcrcs	3, 3, r0, cr13, cr12, {1}
    52b4:	0c035a33 	stceq	10, cr5, [r3], {51}	; 0x33
    52b8:	2e74033c 	mrccs	3, 3, r0, cr4, cr12, {1}
    52bc:	01000e02 	tsteq	r0, r2, lsl #28
    52c0:	02050001 	andeq	r0, r5, #1
    52c4:	08004aa8 	stmdaeq	r0, {r3, r5, r7, r9, fp, lr}
    52c8:	01029c03 	tsteq	r2, r3, lsl #24
    52cc:	032e1e03 	teqeq	lr, #3, 28	; 0x30
    52d0:	6a03ba0b 	bvs	f3b04 <_Min_Stack_Size+0xf3704>
    52d4:	200b0320 	andcs	r0, fp, r0, lsr #6
    52d8:	039e7703 	orrseq	r7, lr, #786432	; 0xc0000
    52dc:	23332e09 	teqcs	r3, #9, 28	; 0x90
    52e0:	02212d6a 	eoreq	r2, r1, #6784	; 0x1a80
    52e4:	01010001 	tsteq	r1, r1
    52e8:	fc020500 	stc2	5, cr0, [r2], {-0}
    52ec:	0308004a 	movweq	r0, #32842	; 0x804a
    52f0:	030102dc 	movweq	r0, #4828	; 0x12dc
    52f4:	03270112 	teqeq	r7, #-2147483644	; 0x80000004
    52f8:	6e032079 	mcrvs	0, 0, r2, cr3, cr9, {3}
    52fc:	2e120358 	mrccs	3, 0, r0, cr2, cr8, {2}
    5300:	23211f21 	teqcs	r1, #33, 30	; 0x84
    5304:	03311d31 	teqeq	r1, #3136	; 0xc40
    5308:	65032024 	strvs	r2, [r3, #-36]	; 0x24
    530c:	201b0320 	andscs	r0, fp, r0, lsr #6
    5310:	03206503 	teqeq	r0, #12582912	; 0xc00000
    5314:	0334661b 	teqeq	r4, #28311552	; 0x1b00000
    5318:	7503200b 	strvc	r2, [r3, #-11]
    531c:	35323220 	ldrcc	r3, [r2, #-544]!	; 0x220
    5320:	03207903 	teqeq	r0, #49152	; 0xc000
    5324:	0b032e78 	bleq	d0d0c <_Min_Stack_Size+0xd090c>
    5328:	2e79032e 	cdpcs	3, 7, cr0, cr9, cr14, {1}
    532c:	322a3235 	eorcc	r3, sl, #1342177283	; 0x50000003
    5330:	27509428 	ldrbcs	r9, [r0, -r8, lsr #8]
    5334:	35207903 	strcc	r7, [r0, #-2307]!	; 0x903
    5338:	1f580c03 	svcne	0x00580c03
    533c:	232b492f 	teqcs	fp, #770048	; 0xbc000
    5340:	0321362b 	teqeq	r1, #45088768	; 0x2b00000
    5344:	16033c43 	strne	r3, [r3], -r3, asr #24
    5348:	00100282 	andseq	r0, r0, r2, lsl #5
    534c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    5350:	004be802 	subeq	lr, fp, r2, lsl #16
    5354:	03e00308 	mvneq	r0, #8, 6	; 0x20000000
    5358:	10031501 	andne	r1, r3, r1, lsl #10
    535c:	2e700320 	cdpcs	3, 7, cr0, cr0, cr0, {1}
    5360:	22222222 	eorcs	r2, r2, #536870914	; 0x20000002
    5364:	02222222 	eoreq	r2, r2, #536870914	; 0x20000002
    5368:	01010002 	tsteq	r1, r2
    536c:	00020500 	andeq	r0, r2, r0, lsl #10
    5370:	0308004c 	movweq	r0, #32844	; 0x804c
    5374:	150103fc 	strne	r0, [r1, #-1020]	; 0x3fc
    5378:	03200c03 	teqeq	r0, #768	; 0x300
    537c:	0f032e74 	svceq	0x00032e74
    5380:	0002022e 	andeq	r0, r2, lr, lsr #4
    5384:	05000101 	streq	r0, [r0, #-257]	; 0x101
    5388:	004c1002 	subeq	r1, ip, r2
    538c:	04990308 	ldreq	r0, [r9], #776	; 0x308
    5390:	281d1901 	ldmdacs	sp, {r0, r8, fp, ip}
    5394:	00050261 	andeq	r0, r5, r1, ror #4
    5398:	05000101 	streq	r0, [r0, #-257]	; 0x101
    539c:	004c2c02 	subeq	r2, ip, r2, lsl #24
    53a0:	04b20308 	ldrteq	r0, [r2], #776	; 0x308
    53a4:	281d1a01 	ldmdacs	sp, {r0, r9, fp, ip}
    53a8:	00050261 	andeq	r0, r5, r1, ror #4
    53ac:	05000101 	streq	r0, [r0, #-257]	; 0x101
    53b0:	004c4802 	subeq	r4, ip, r2, lsl #16
    53b4:	04cd0308 	strbeq	r0, [sp], #776	; 0x308
    53b8:	02681701 	rsbeq	r1, r8, #262144	; 0x40000
    53bc:	01010005 	tsteq	r1, r5
    53c0:	60020500 	andvs	r0, r2, r0, lsl #10
    53c4:	0308004c 	movweq	r0, #32844	; 0x804c
    53c8:	160104e1 	strne	r0, [r1], -r1, ror #9
    53cc:	61281d31 	teqvs	r8, r1, lsr sp
    53d0:	01000502 	tsteq	r0, r2, lsl #10
    53d4:	02050001 	andeq	r0, r5, #1
    53d8:	08004c80 	stmdaeq	r0, {r7, sl, fp, lr}
    53dc:	0104fb03 	tsteq	r4, r3, lsl #22
    53e0:	231d3f16 	tstcs	sp, #22, 30	; 0x58
    53e4:	0006025d 	andeq	r0, r6, sp, asr r2
    53e8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    53ec:	004ca002 	subeq	sl, ip, r2
    53f0:	05930308 	ldreq	r0, [r3, #776]	; 0x308
    53f4:	281d1901 	ldmdacs	sp, {r0, r8, fp, ip}
    53f8:	00050261 	andeq	r0, r5, r1, ror #4
    53fc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    5400:	004cbc02 	subeq	fp, ip, r2, lsl #24
    5404:	05b20308 	ldreq	r0, [r2, #776]!	; 0x308
    5408:	281d1a01 	ldmdacs	sp, {r0, r9, fp, ip}
    540c:	00050261 	andeq	r0, r5, r1, ror #4
    5410:	05000101 	streq	r0, [r0, #-257]	; 0x101
    5414:	004cd802 	subeq	sp, ip, r2, lsl #16
    5418:	05d70308 	ldrbeq	r0, [r7, #776]	; 0x308
    541c:	010c0301 	tsteq	ip, r1, lsl #6
    5420:	232f1f67 	teqcs	pc, #412	; 0x19c
    5424:	206d0323 	rsbcs	r0, sp, r3, lsr #6
    5428:	1f202203 	svcne	0x00202203
    542c:	032e6f03 	teqeq	lr, #3, 30
    5430:	71032012 	tstvc	r3, r2, lsl r0
    5434:	2e0e033c 	mcrcs	3, 0, r0, cr14, cr12, {1}
    5438:	03207203 	teqeq	r0, #805306368	; 0x30000000
    543c:	7203200e 	andvc	r2, r3, #14
    5440:	200e0320 	andcs	r0, lr, r0, lsr #6
    5444:	03207403 	teqeq	r0, #50331648	; 0x3000000
    5448:	21254a0c 	teqcs	r5, ip, lsl #20
    544c:	01000202 	tsteq	r0, r2, lsl #4
    5450:	02050001 	andeq	r0, r5, #1
    5454:	08004d20 	stmdaeq	r0, {r5, r8, sl, fp, lr}
    5458:	0106a103 	tsteq	r6, r3, lsl #2
    545c:	02022117 	andeq	r2, r2, #-1073741819	; 0xc0000005
    5460:	00010100 	andeq	r0, r1, r0, lsl #2
    5464:	4d280205 	sfmmi	f0, 4, [r8, #-20]!	; 0xffffffec
    5468:	b1030800 	tstlt	r3, r0, lsl #16
    546c:	02170106 	andseq	r0, r7, #-2147483647	; 0x80000001
    5470:	01010002 	tsteq	r1, r2
    5474:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    5478:	0308004d 	movweq	r0, #32845	; 0x804d
    547c:	1901078b 	stmdbne	r1, {r0, r1, r3, r7, r8, r9, sl}
    5480:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    5484:	01010005 	tsteq	r1, r5
    5488:	48020500 	stmdami	r2, {r8, sl}
    548c:	0308004d 	movweq	r0, #32845	; 0x804d
    5490:	170107a1 	strne	r0, [r1, -r1, lsr #15]
    5494:	01000602 	tsteq	r0, r2, lsl #12
    5498:	02050001 	andeq	r0, r5, #1
    549c:	08004d54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, lr}
    54a0:	0107b303 	tsteq	r7, r3, lsl #6
    54a4:	32332317 	eorscc	r2, r3, #1543503872	; 0x5c000000
    54a8:	01000102 	tsteq	r0, r2, lsl #2
    54ac:	02050001 	andeq	r0, r5, #1
    54b0:	08004d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, lr}
    54b4:	0107cc03 	tsteq	r7, r3, lsl #24
    54b8:	02022117 	andeq	r2, r2, #-1073741819	; 0xc0000005
    54bc:	00010100 	andeq	r0, r1, r0, lsl #2
    54c0:	4d680205 	sfmmi	f0, 2, [r8, #-20]!	; 0xffffffec
    54c4:	f1030800 			; <UNDEFINED> instruction: 0xf1030800
    54c8:	09030107 	stmdbeq	r3, {r0, r1, r2, r8}
    54cc:	45282b01 	strmi	r2, [r8, #-2817]!	; 0xb01
    54d0:	01000302 	tsteq	r0, r2, lsl #6
    54d4:	02050001 	andeq	r0, r5, #1
    54d8:	08004d7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, fp, lr}
    54dc:	0108dd03 	tsteq	r8, r3, lsl #26
    54e0:	4f010c03 	svcmi	0x00010c03
    54e4:	281d251b 	ldmdacs	sp, {r0, r1, r3, r4, r8, sl, sp}
    54e8:	00030245 	andeq	r0, r3, r5, asr #4
    54ec:	05000101 	streq	r0, [r0, #-257]	; 0x101
    54f0:	004d9c02 	subeq	r9, sp, r2, lsl #24
    54f4:	09890308 	stmibeq	r9, {r3, r8, r9}
    54f8:	0c031901 	stceq	9, cr1, [r3], {1}
    54fc:	0004022e 	andeq	r0, r4, lr, lsr #4
    5500:	05000101 	streq	r0, [r0, #-257]	; 0x101
    5504:	004da802 	subeq	sl, sp, r2, lsl #16
    5508:	09b20308 	ldmibeq	r2!, {r3, r8, r9}
    550c:	04021801 	streq	r1, [r2], #-2049	; 0x801
    5510:	00010100 	andeq	r0, r1, r0, lsl #2
    5514:	4db00205 	lfmmi	f0, 4, [r0, #20]!
    5518:	cb030800 	blgt	c7520 <_Min_Stack_Size+0xc7120>
    551c:	12030109 	andne	r0, r3, #1073741826	; 0x40000002
    5520:	74032320 	strvc	r2, [r3], #-800	; 0x320
    5524:	3c0c0320 	stccc	3, cr0, [ip], {32}
    5528:	03207403 	teqeq	r0, #50331648	; 0x3000000
    552c:	231d2e0c 	tstcs	sp, #12, 28	; 0xc0
    5530:	01040200 	mrseq	r0, R12_usr
    5534:	00207a03 	eoreq	r7, r0, r3, lsl #20
    5538:	34010402 	strcc	r0, [r1], #-1026	; 0x402
    553c:	01040200 	mrseq	r0, R12_usr
    5540:	3c090323 	stccc	3, cr0, [r9], {35}	; 0x23
    5544:	01000302 	tsteq	r0, r2, lsl #6
    5548:	02050001 	andeq	r0, r5, #1
    554c:	08004ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, lr}
    5550:	010a8203 	tsteq	sl, r3, lsl #4
    5554:	04025b19 	streq	r5, [r2], #-2841	; 0xb19
    5558:	5a010100 	bpl	45960 <_Min_Stack_Size+0x45560>
    555c:	02000003 	andeq	r0, r0, #3
    5560:	00028a00 	andeq	r8, r2, r0, lsl #20
    5564:	fb010200 	blx	45d6e <_Min_Stack_Size+0x4596e>
    5568:	01000d0e 	tsteq	r0, lr, lsl #26
    556c:	00010101 	andeq	r0, r1, r1, lsl #2
    5570:	00010000 	andeq	r0, r1, r0
    5574:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    5578:	2f656d6f 	svccs	0x00656d6f
    557c:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
    5580:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
    5584:	6f746b73 	svcvs	0x00746b73
    5588:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    558c:	5f6c616e 	svcpl	0x006c616e
    5590:	6a6f7270 	bvs	1be1f58 <_Min_Stack_Size+0x1be1b58>
    5594:	5f746365 	svcpl	0x00746365
    5598:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
    559c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    55a0:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    55a4:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
    55a8:	616f426f 	cmnvs	pc, pc, ror #4
    55ac:	4f432f74 	svcmi	0x00432f74
    55b0:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    55b4:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    55b8:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    55bc:	445f3233 	ldrbmi	r3, [pc], #-563	; 55c4 <_Min_Stack_Size+0x51c4>
    55c0:	4f435349 	svcmi	0x00435349
    55c4:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
    55c8:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    55cc:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    55d0:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    55d4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    55d8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    55dc:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    55e0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    55e4:	445f6870 	ldrbmi	r6, [pc], #-2160	; 55ec <_Min_Stack_Size+0x51ec>
    55e8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    55ec:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    55f0:	752f0063 	strvc	r0, [pc, #-99]!	; 5595 <_Min_Stack_Size+0x5195>
    55f4:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    55f8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    55fc:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    5600:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5604:	616d2f62 	cmnvs	sp, r2, ror #30
    5608:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    560c:	752f0065 	strvc	r0, [pc, #-101]!	; 55af <_Min_Stack_Size+0x51af>
    5610:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    5614:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    5618:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    561c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5620:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
    5624:	2f656d6f 	svccs	0x00656d6f
    5628:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
    562c:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
    5630:	6f746b73 	svcvs	0x00746b73
    5634:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    5638:	5f6c616e 	svcpl	0x006c616e
    563c:	6a6f7270 	bvs	1be2004 <_Min_Stack_Size+0x1be1c04>
    5640:	5f746365 	svcpl	0x00746365
    5644:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
    5648:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    564c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    5650:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
    5654:	616f426f 	cmnvs	pc, pc, ror #4
    5658:	4f432f74 	svcmi	0x00432f74
    565c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    5660:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    5664:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    5668:	445f3233 	ldrbmi	r3, [pc], #-563	; 5670 <_Min_Stack_Size+0x5270>
    566c:	4f435349 	svcmi	0x00435349
    5670:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
    5674:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    5678:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    567c:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    5680:	5349534d 	movtpl	r5, #37709	; 0x934d
    5684:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    5688:	2f656369 	svccs	0x00656369
    568c:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    5690:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    5694:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    5698:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    569c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    56a0:	6f682f00 	svcvs	0x00682f00
    56a4:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 54f8 <_Min_Stack_Size+0x50f8>
    56a8:	616c6965 	cmnvs	ip, r5, ror #18
    56ac:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    56b0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    56b4:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
    56b8:	705f6c61 	subsvc	r6, pc, r1, ror #24
    56bc:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    56c0:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
    56c4:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
    56c8:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    56cc:	2f646564 	svccs	0x00646564
    56d0:	6f747561 	svcvs	0x00747561
    56d4:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
    56d8:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    56dc:	5f584554 	svcpl	0x00584554
    56e0:	5f46344d 	svcpl	0x0046344d
    56e4:	334d5453 	movtcc	r5, #54355	; 0xd453
    56e8:	49445f32 	stmdbmi	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    56ec:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
    56f0:	2f595245 	svccs	0x00595245
    56f4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    56f8:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    56fc:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    5700:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    5704:	5f787834 	svcpl	0x00787834
    5708:	50647453 	rsbpl	r7, r4, r3, asr r4
    570c:	70697265 	rsbvc	r7, r9, r5, ror #4
    5710:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    5714:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    5718:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    571c:	6f682f00 	svcvs	0x00682f00
    5720:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 5574 <_Min_Stack_Size+0x5174>
    5724:	616c6965 	cmnvs	ip, r5, ror #18
    5728:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    572c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5730:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
    5734:	705f6c61 	subsvc	r6, pc, r1, ror #24
    5738:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    573c:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
    5740:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
    5744:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    5748:	2f646564 	svccs	0x00646564
    574c:	6f747561 	svcvs	0x00747561
    5750:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
    5754:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    5758:	5f584554 	svcpl	0x00584554
    575c:	5f46344d 	svcpl	0x0046344d
    5760:	334d5453 	movtcc	r5, #54355	; 0xd453
    5764:	49445f32 	stmdbmi	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    5768:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
    576c:	2f595245 	svccs	0x00595245
    5770:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    5774:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    5778:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    577c:	2f534953 	svccs	0x00534953
    5780:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    5784:	00656475 	rsbeq	r6, r5, r5, ror r4
    5788:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    578c:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    5790:	655f7878 	ldrbvs	r7, [pc, #-2168]	; 4f20 <_Min_Stack_Size+0x4b20>
    5794:	2e697478 	mcrcs	4, 3, r7, cr9, cr8, {3}
    5798:	00010063 	andeq	r0, r1, r3, rrx
    579c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    57a0:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    57a4:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    57a8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    57ac:	00020068 	andeq	r0, r2, r8, rrx
    57b0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    57b4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    57b8:	00030068 	andeq	r0, r3, r8, rrx
    57bc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    57c0:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    57c4:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    57c8:	00000400 	andeq	r0, r0, r0, lsl #8
    57cc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    57d0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    57d4:	78655f78 	stmdavc	r5!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    57d8:	682e6974 	stmdavs	lr!, {r2, r4, r5, r6, r8, fp, sp, lr}
    57dc:	00000500 	andeq	r0, r0, r0, lsl #10
    57e0:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    57e4:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
    57e8:	0600682e 	streq	r6, [r0], -lr, lsr #16
    57ec:	00000000 	andeq	r0, r0, r0
    57f0:	4df00205 	lfmmi	f0, 2, [r0, #20]!
    57f4:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
    57f8:	24130100 	ldrcs	r0, [r3], #-256	; 0x100
    57fc:	21212f1c 	teqcs	r1, ip, lsl pc
    5800:	00070221 	andeq	r0, r7, r1, lsr #4
    5804:	05000101 	streq	r0, [r0, #-257]	; 0x101
    5808:	004e0c02 	subeq	r0, lr, r2, lsl #24
    580c:	00fe0308 	rscseq	r0, lr, r8, lsl #6
    5810:	010b0301 	tsteq	fp, r1, lsl #6
    5814:	03207503 	teqeq	r0, #12582912	; 0xc00000
    5818:	3f23200b 	svccc	0x0023200b
    581c:	03200903 	teqeq	r0, #49152	; 0xc000
    5820:	223d2074 	eorscs	r2, sp, #116	; 0x74
    5824:	593f3248 	ldmdbpl	pc!, {r3, r6, r9, ip, sp}	; <UNPREDICTABLE>
    5828:	033f1d23 	teqeq	pc, #2240	; 0x8c0
    582c:	0c032009 	stceq	0, cr2, [r3], {9}
    5830:	2076034a 	rsbscs	r0, r6, sl, asr #6
    5834:	1b3c0a03 	blne	f08048 <_Min_Stack_Size+0xf07c48>
    5838:	1e4f1d23 	cdpne	13, 4, cr1, cr15, cr3, {1}
    583c:	206e034c 	rsbcs	r0, lr, ip, asr #6
    5840:	3c11033d 	ldccc	3, cr0, [r1], {61}	; 0x3d
    5844:	01000502 	tsteq	r0, r2, lsl #10
    5848:	02050001 	andeq	r0, r5, #1
    584c:	08004e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, lr}
    5850:	0101b603 	tsteq	r1, r3, lsl #12
    5854:	212c2213 	teqcs	ip, r3, lsl r2
    5858:	00020222 	andeq	r0, r2, r2, lsr #4
    585c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    5860:	004e9c02 	subeq	r9, lr, r2, lsl #24
    5864:	01c50308 	biceq	r0, r5, r8, lsl #6
    5868:	08021601 	stmdaeq	r2, {r0, r9, sl, ip}
    586c:	00010100 	andeq	r0, r1, r0, lsl #2
    5870:	4eac0205 	cdpmi	2, 10, cr0, cr12, cr5, {0}
    5874:	e3030800 	movw	r0, #14336	; 0x3800
    5878:	03170101 	tsteq	r7, #1073741824	; 0x40000000
    587c:	07023c09 	streq	r3, [r2, -r9, lsl #24]
    5880:	00010100 	andeq	r0, r1, r0, lsl #2
    5884:	4ec00205 	cdpmi	2, 12, cr0, cr0, cr5, {0}
    5888:	fa030800 	blx	c7890 <_Min_Stack_Size+0xc7490>
    588c:	02160101 	andseq	r0, r6, #1073741824	; 0x40000000
    5890:	01010006 	tsteq	r1, r6
    5894:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    5898:	0308004e 	movweq	r0, #32846	; 0x804e
    589c:	17010288 	strne	r0, [r1, -r8, lsl #5]
    58a0:	023c0a03 	eorseq	r0, ip, #12288	; 0x3000
    58a4:	01010007 	tsteq	r1, r7
    58a8:	e0020500 	and	r0, r2, r0, lsl #10
    58ac:	0308004e 	movweq	r0, #32846	; 0x804e
    58b0:	160102a0 	strne	r0, [r1], -r0, lsr #5
    58b4:	01000602 	tsteq	r0, r2, lsl #12
    58b8:	00046f01 	andeq	r6, r4, r1, lsl #30
    58bc:	f2000200 	vhsub.s8	d0, d0, d0
    58c0:	02000002 	andeq	r0, r0, #2
    58c4:	0d0efb01 	vstreq	d15, [lr, #-4]
    58c8:	01010100 	mrseq	r0, (UNDEF: 17)
    58cc:	00000001 	andeq	r0, r0, r1
    58d0:	01000001 	tsteq	r0, r1
    58d4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5820 <_Min_Stack_Size+0x5420>
    58d8:	656c2f65 	strbvs	r2, [ip, #-3941]!	; 0xf65
    58dc:	2f616c69 	svccs	0x00616c69
    58e0:	6b736544 	blvs	1cdedf8 <_Min_Stack_Size+0x1cde9f8>
    58e4:	2f706f74 	svccs	0x00706f74
    58e8:	616e6966 	cmnvs	lr, r6, ror #18
    58ec:	72705f6c 	rsbsvc	r5, r0, #108, 30	; 0x1b0
    58f0:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
    58f4:	30325f74 	eorscc	r5, r2, r4, ror pc
    58f8:	6d653531 	cfstr64vs	mvdx3, [r5, #-196]!	; 0xffffff3c
    58fc:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    5900:	612f6465 	teqvs	pc, r5, ror #8
    5904:	426f7475 	rsbmi	r7, pc, #1962934272	; 0x75000000
    5908:	2f74616f 	svccs	0x0074616f
    590c:	6c697455 	cfstrdvs	mvd7, [r9], #-340	; 0xfffffeac
    5910:	65697469 	strbvs	r7, [r9, #-1129]!	; 0x469
    5914:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    5918:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    591c:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
    5920:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
    5924:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    5928:	2f007972 	svccs	0x00007972
    592c:	2f727375 	svccs	0x00727375
    5930:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5934:	2f656475 	svccs	0x00656475
    5938:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    593c:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; 57a0 <_Min_Stack_Size+0x53a0>
    5940:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    5944:	2f00656e 	svccs	0x0000656e
    5948:	2f727375 	svccs	0x00727375
    594c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5950:	2f656475 	svccs	0x00656475
    5954:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    5958:	2f006269 	svccs	0x00006269
    595c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
    5960:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
    5964:	442f616c 	strtmi	r6, [pc], #-364	; 596c <_Min_Stack_Size+0x556c>
    5968:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    596c:	662f706f 	strtvs	r7, [pc], -pc, rrx
    5970:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
    5974:	6f72705f 	svcvs	0x0072705f
    5978:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    597c:	3130325f 	teqcc	r0, pc, asr r2
    5980:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
    5984:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    5988:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
    598c:	6f426f74 	svcvs	0x00426f74
    5990:	432f7461 	teqmi	pc, #1627389952	; 0x61000000
    5994:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    5998:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    599c:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    59a0:	5f32334d 	svcpl	0x0032334d
    59a4:	43534944 	cmpmi	r3, #68, 18	; 0x110000
    59a8:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
    59ac:	694c2f59 	stmdbvs	ip, {r0, r3, r4, r6, r8, r9, sl, fp, sp}^
    59b0:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    59b4:	2f736569 	svccs	0x00736569
    59b8:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    59bc:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
    59c0:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    59c4:	2f54532f 	svccs	0x0054532f
    59c8:	334d5453 	movtcc	r5, #54355	; 0xd453
    59cc:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    59d0:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
    59d4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    59d8:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    59dc:	2f656d6f 	svccs	0x00656d6f
    59e0:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
    59e4:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
    59e8:	6f746b73 	svcvs	0x00746b73
    59ec:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    59f0:	5f6c616e 	svcpl	0x006c616e
    59f4:	6a6f7270 	bvs	1be23bc <_Min_Stack_Size+0x1be1fbc>
    59f8:	5f746365 	svcpl	0x00746365
    59fc:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
    5a00:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    5a04:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    5a08:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
    5a0c:	616f426f 	cmnvs	pc, pc, ror #4
    5a10:	4f432f74 	svcmi	0x00432f74
    5a14:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    5a18:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    5a1c:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    5a20:	445f3233 	ldrbmi	r3, [pc], #-563	; 5a28 <_Min_Stack_Size+0x5628>
    5a24:	4f435349 	svcmi	0x00435349
    5a28:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
    5a2c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    5a30:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    5a34:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    5a38:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    5a3c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    5a40:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    5a44:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    5a48:	445f6870 	ldrbmi	r6, [pc], #-2160	; 5a50 <_Min_Stack_Size+0x5650>
    5a4c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    5a50:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    5a54:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
    5a58:	2f656d6f 	svccs	0x00656d6f
    5a5c:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
    5a60:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
    5a64:	6f746b73 	svcvs	0x00746b73
    5a68:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    5a6c:	5f6c616e 	svcpl	0x006c616e
    5a70:	6a6f7270 	bvs	1be2438 <_Min_Stack_Size+0x1be2038>
    5a74:	5f746365 	svcpl	0x00746365
    5a78:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
    5a7c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    5a80:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    5a84:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
    5a88:	616f426f 	cmnvs	pc, pc, ror #4
    5a8c:	4f432f74 	svcmi	0x00432f74
    5a90:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    5a94:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    5a98:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    5a9c:	445f3233 	ldrbmi	r3, [pc], #-563	; 5aa4 <_Min_Stack_Size+0x56a4>
    5aa0:	4f435349 	svcmi	0x00435349
    5aa4:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
    5aa8:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    5aac:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    5ab0:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    5ab4:	5349534d 	movtpl	r5, #37709	; 0x934d
    5ab8:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    5abc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    5ac0:	74730000 	ldrbtvc	r0, [r3], #-0
    5ac4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    5ac8:	69393234 	ldmdbvs	r9!, {r2, r4, r5, r9, ip, sp}
    5acc:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    5ad0:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    5ad4:	632e7972 	teqvs	lr, #1867776	; 0x1c8000
    5ad8:	00000100 	andeq	r0, r0, r0, lsl #2
    5adc:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    5ae0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    5ae4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    5ae8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    5aec:	00000200 	andeq	r0, r0, r0, lsl #4
    5af0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    5af4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    5af8:	00000300 	andeq	r0, r0, r0, lsl #6
    5afc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    5b00:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    5b04:	00682e78 	rsbeq	r2, r8, r8, ror lr
    5b08:	73000004 	movwvc	r0, #4
    5b0c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    5b10:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    5b14:	616d645f 	cmnvs	sp, pc, asr r4
    5b18:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    5b1c:	74730000 	ldrbtvc	r0, [r3], #-0
    5b20:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    5b24:	5f787834 	svcpl	0x00787834
    5b28:	69747865 	ldmdbvs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    5b2c:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    5b30:	74730000 	ldrbtvc	r0, [r3], #-0
    5b34:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    5b38:	5f787834 	svcpl	0x00787834
    5b3c:	6f697067 	svcvs	0x00697067
    5b40:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    5b44:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
    5b48:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    5b4c:	00000500 	andeq	r0, r0, r0, lsl #10
    5b50:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    5b54:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
    5b58:	645f6939 	ldrbvs	r6, [pc], #-2361	; 5b60 <_Min_Stack_Size+0x5760>
    5b5c:	6f637369 	svcvs	0x00637369
    5b60:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    5b64:	0100682e 	tsteq	r0, lr, lsr #16
    5b68:	6f630000 	svcvs	0x00630000
    5b6c:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    5b70:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    5b74:	00000600 	andeq	r0, r0, r0, lsl #12
    5b78:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    5b7c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    5b80:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
    5b84:	00682e63 	rsbeq	r2, r8, r3, ror #28
    5b88:	73000005 	movwvc	r0, #5
    5b8c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    5b90:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    5b94:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    5b98:	2e676663 	cdpcs	6, 6, cr6, cr7, cr3, {3}
    5b9c:	00050068 	andeq	r0, r5, r8, rrx
    5ba0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    5ba4:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    5ba8:	695f7878 	ldmdbvs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    5bac:	682e6332 	stmdavs	lr!, {r1, r4, r5, r8, r9, sp, lr}
    5bb0:	00000500 	andeq	r0, r0, r0, lsl #10
    5bb4:	02050000 	andeq	r0, r5, #0
    5bb8:	08004eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, lr}
    5bbc:	0100fa03 	tsteq	r0, r3, lsl #20
    5bc0:	24201c24 	strtcs	r1, [r0], #-3108	; 0xc24
    5bc4:	331b255b 	tstcc	fp, #381681664	; 0x16c00000
    5bc8:	211d2429 	tstcs	sp, r9, lsr #8
    5bcc:	2d301c23 	ldccs	12, cr1, [r0, #-140]!	; 0xffffff74
    5bd0:	022f2f30 	eoreq	r2, pc, #48, 30	; 0xc0
    5bd4:	01010008 	tsteq	r1, r8
    5bd8:	38020500 	stmdacc	r2, {r8, sl}
    5bdc:	0308004f 	movweq	r0, #32847	; 0x804f
    5be0:	13010192 	movwne	r0, #4498	; 0x1192
    5be4:	01000c02 	tsteq	r0, r2, lsl #24
    5be8:	02050001 	andeq	r0, r5, #1
    5bec:	08004f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, lr}
    5bf0:	01019f03 	tsteq	r1, r3, lsl #30
    5bf4:	000c0213 	andeq	r0, ip, r3, lsl r2
    5bf8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    5bfc:	004f6802 	subeq	r6, pc, r2, lsl #16
    5c00:	01ac0308 			; <UNDEFINED> instruction: 0x01ac0308
    5c04:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
    5c08:	00010100 	andeq	r0, r1, r0, lsl #2
    5c0c:	4f840205 	svcmi	0x00840205
    5c10:	bc030800 	stclt	8, cr0, [r3], {-0}
    5c14:	03340101 	teqeq	r4, #1073741824	; 0x40000000
    5c18:	2620207a 			; <UNDEFINED> instruction: 0x2620207a
    5c1c:	484b5d3d 	stmdami	fp, {r0, r2, r3, r4, r5, r8, sl, fp, ip, lr}^
    5c20:	30303d1f 	eorscc	r3, r0, pc, lsl sp
    5c24:	032e1403 	teqeq	lr, #50331648	; 0x3000000
    5c28:	224f2e6f 	subcs	r2, pc, #1776	; 0x6f0
    5c2c:	30212c1e 	eorcc	r2, r1, lr, lsl ip
    5c30:	251f322f 	ldrcs	r3, [pc, #-559]	; 5a09 <_Min_Stack_Size+0x5609>
    5c34:	2f2f2b1e 	svccs	0x002f2b1e
    5c38:	05023031 	streq	r3, [r2, #-49]	; 0x31
    5c3c:	00010100 	andeq	r0, r1, r0, lsl #2
    5c40:	50080205 	andpl	r0, r8, r5, lsl #4
    5c44:	e8030800 	stmda	r3, {fp}
    5c48:	67210101 	strvs	r0, [r1, -r1, lsl #2]!
    5c4c:	01000302 	tsteq	r0, r2, lsl #6
    5c50:	02050001 	andeq	r0, r5, #1
    5c54:	0800501c 	stmdaeq	r0, {r2, r3, r4, ip, lr}
    5c58:	0101f203 	tsteq	r1, r3, lsl #4
    5c5c:	20140324 	andscs	r0, r4, r4, lsr #6
    5c60:	21200d03 	teqcs	r0, r3, lsl #26
    5c64:	24205a03 	strtcs	r5, [r0], #-2563	; 0xa03
    5c68:	1b413f4d 	blne	10559a4 <_Min_Stack_Size+0x10555a4>
    5c6c:	1d311d35 	ldcne	13, cr1, [r1, #-212]!	; 0xffffff2c
    5c70:	322f2f21 	eorcc	r2, pc, #33, 30	; 0x84
    5c74:	211f2f1f 	tstcs	pc, pc, lsl pc	; <UNPREDICTABLE>
    5c78:	211c2431 	tstcs	ip, r1, lsr r4
    5c7c:	31212121 	teqcc	r1, r1, lsr #2
    5c80:	21211d23 	teqcs	r1, r3, lsr #26
    5c84:	4b4b3121 	blmi	12d2110 <_Min_Stack_Size+0x12d1d10>
    5c88:	0e023d3d 	mcreq	13, 0, r3, cr2, cr13, {1}
    5c8c:	00010100 	andeq	r0, r1, r0, lsl #2
    5c90:	50bc0205 	adcspl	r0, ip, r5, lsl #4
    5c94:	a3030800 	movwge	r0, #14336	; 0x3800
    5c98:	2a320102 	bcs	c860a8 <_Min_Stack_Size+0xc85ca8>
    5c9c:	034c3f24 	movteq	r3, #53028	; 0xcf24
    5ca0:	0332580e 	teqeq	r2, #917504	; 0xe0000
    5ca4:	11032e09 	tstne	r3, r9, lsl #28
    5ca8:	12033420 	andne	r3, r3, #32, 8	; 0x20000000
    5cac:	7fbf0320 	svcvc	0x00bf0320
    5cb0:	03445a2e 	movteq	r5, #18990	; 0x4a2e
    5cb4:	1d352078 	ldcne	0, cr2, [r5, #-480]!	; 0xfffffe20
    5cb8:	2129242f 	teqcs	r9, pc, lsr #8
    5cbc:	2f2f2f2f 	svccs	0x002f2f2f
    5cc0:	212d2f31 	teqcs	sp, r1, lsr pc
    5cc4:	245b5b31 	ldrbcs	r5, [fp], #-2865	; 0xb31
    5cc8:	1d21211d 	stfnes	f2, [r1, #-116]!	; 0xffffff8c
    5ccc:	1d233124 	stfnes	f3, [r3, #-144]!	; 0xffffff70
    5cd0:	32212121 	eorcc	r2, r1, #1073741832	; 0x40000008
    5cd4:	3e4c4d5b 	mcrcc	13, 2, r4, cr12, cr11, {2}
    5cd8:	3430322d 	ldrtcc	r3, [r0], #-557	; 0x22d
    5cdc:	7103241f 	tstvc	r3, pc, lsl r4
    5ce0:	0e032120 	adfeqsp	f2, f3, f0
    5ce4:	2074032e 	rsbscs	r0, r4, lr, lsr #6
    5ce8:	2e7a0335 	mrccs	3, 3, r0, cr10, cr5, {1}
    5cec:	031f3430 	tsteq	pc, #48, 8	; 0x30000000
    5cf0:	22232077 	eorcs	r2, r3, #119	; 0x77
    5cf4:	21242121 	teqcs	r4, r1, lsr #2
    5cf8:	30207303 	eorcc	r7, r0, r3, lsl #6
    5cfc:	4d312535 	cfldr32mi	mvfx2, [r1, #-212]!	; 0xffffff2c
    5d00:	594d3d4c 	stmdbpl	sp, {r2, r3, r6, r8, sl, fp, ip, sp}^
    5d04:	00130259 	andseq	r0, r3, r9, asr r2
    5d08:	05000101 	streq	r0, [r0, #-257]	; 0x101
    5d0c:	00523002 	subseq	r3, r2, r2
    5d10:	03830308 	orreq	r0, r3, #8, 6	; 0x20000000
    5d14:	301b2501 	andscc	r2, fp, r1, lsl #10
    5d18:	1d200e03 	stcne	14, cr0, [r0, #-12]!
    5d1c:	22212121 	eorcs	r2, r1, #1073741832	; 0x40000008
    5d20:	7803221c 	stmdavc	r3, {r2, r3, r4, r9, sp}
    5d24:	02211d2e 	eoreq	r1, r1, #2944	; 0xb80
    5d28:	01010008 	tsteq	r1, r8

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000000c6 	andeq	r0, r0, r6, asr #1
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
	...
      14:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffff60 <_estack+0xdffcff60>
      18:	656c2f65 	strbvs	r2, [ip, #-3941]!	; 0xf65
      1c:	2f616c69 	svccs	0x00616c69
      20:	6b736544 	blvs	1cd9538 <_Min_Stack_Size+0x1cd9138>
      24:	2f706f74 	svccs	0x00706f74
      28:	616e6966 	cmnvs	lr, r6, ror #18
      2c:	72705f6c 	rsbsvc	r5, r0, #108, 30	; 0x1b0
      30:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
      34:	30325f74 	eorscc	r5, r2, r4, ror pc
      38:	6d653531 	cfstr64vs	mvdx3, [r5, #-196]!	; 0xffffff3c
      3c:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
      40:	612f6465 	teqvs	pc, r5, ror #8
      44:	426f7475 	rsbmi	r7, pc, #1962934272	; 0x75000000
      48:	2f74616f 	svccs	0x0074616f
      4c:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
      50:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; ffffff44 <_estack+0xdffcff44>
      54:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
      58:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
      5c:	5349445f 	movtpl	r4, #37983	; 0x945f
      60:	45564f43 	ldrbmi	r4, [r6, #-3907]	; 0xf43
      64:	732f5952 	teqvc	pc, #1343488	; 0x148000
      68:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
      6c:	735f7075 	cmpvc	pc, #117	; 0x75
      70:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      74:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
      78:	3933345f 	ldmdbcc	r3!, {r0, r1, r2, r3, r4, r6, sl, ip, sp}
      7c:	532e7878 	teqpl	lr, #120, 16	; 0x780000
      80:	6f682f00 	svcvs	0x00682f00
      84:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; fffffed8 <_estack+0xdffcfed8>
      88:	616c6965 	cmnvs	ip, r5, ror #18
      8c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
      90:	706f746b 	rsbvc	r7, pc, fp, ror #8
      94:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
      98:	705f6c61 	subsvc	r6, pc, r1, ror #24
      9c:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
      a0:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
      a4:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
      a8:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
      ac:	2f646564 	svccs	0x00646564
      b0:	6f747561 	svcvs	0x00747561
      b4:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
      b8:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
      bc:	20534120 	subscs	r4, r3, r0, lsr #2
      c0:	34322e32 	ldrtcc	r2, [r2], #-3634	; 0xe32
      c4:	0031352e 	eorseq	r3, r1, lr, lsr #10
      c8:	05a08001 	streq	r8, [r0, #1]!
      cc:	00040000 	andeq	r0, r4, r0
      d0:	00000012 	andeq	r0, r0, r2, lsl r0
      d4:	02f30104 	rscseq	r0, r3, #4, 2
      d8:	e7010000 	str	r0, [r1, -r0]
      dc:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
      e0:	00000000 	andeq	r0, r0, r0
      e4:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
      e8:	02000000 	andeq	r0, r0, #0
      ec:	02020601 	andeq	r0, r2, #1048576	; 0x100000
      f0:	01020000 	mrseq	r0, (UNDEF: 2)
      f4:	00020008 	andeq	r0, r2, r8
      f8:	05020200 	streq	r0, [r2, #-512]	; 0x200
      fc:	00000038 	andeq	r0, r0, r8, lsr r0
     100:	00009403 	andeq	r9, r0, r3, lsl #8
     104:	412b0200 	teqmi	fp, r0, lsl #4
     108:	02000000 	andeq	r0, r0, #0
     10c:	02aa0702 	adceq	r0, sl, #524288	; 0x80000
     110:	4c030000 	stcmi	0, cr0, [r3], {-0}
     114:	02000004 	andeq	r0, r0, #4
     118:	0000533f 	andeq	r5, r0, pc, lsr r3
     11c:	05040200 	streq	r0, [r4, #-512]	; 0x200
     120:	0000015d 	andeq	r0, r0, sp, asr r1
     124:	00008903 	andeq	r8, r0, r3, lsl #18
     128:	65410200 	strbvs	r0, [r1, #-512]	; 0x200
     12c:	02000000 	andeq	r0, r0, #0
     130:	021d0704 	andseq	r0, sp, #4, 14	; 0x100000
     134:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     138:	00015805 	andeq	r5, r1, r5, lsl #16
     13c:	07080200 	streq	r0, [r8, -r0, lsl #4]
     140:	00000218 	andeq	r0, r0, r8, lsl r2
     144:	69050404 	stmdbvs	r5, {r2, sl}
     148:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     14c:	02220704 	eoreq	r0, r2, #4, 14	; 0x100000
     150:	96030000 	strls	r0, [r3], -r0
     154:	03000000 	movweq	r0, #0
     158:	00003636 	andeq	r3, r0, r6, lsr r6
     15c:	044e0300 	strbeq	r0, [lr], #-768	; 0x300
     160:	41030000 	mrsmi	r0, (UNDEF: 3)
     164:	00000048 	andeq	r0, r0, r8, asr #32
     168:	00008b03 	andeq	r8, r0, r3, lsl #22
     16c:	5a420300 	bpl	1080d74 <_Min_Stack_Size+0x1080974>
     170:	02000000 	andeq	r0, r0, #0
     174:	00420704 	subeq	r0, r2, r4, lsl #14
     178:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
     17c:	06000000 	streq	r0, [r0], -r0
     180:	0000009e 	muleq	r0, lr, r0
     184:	000000c5 	andeq	r0, r0, r5, asr #1
     188:	0000a907 	andeq	sl, r0, r7, lsl #18
     18c:	05000100 	streq	r0, [r0, #-256]	; 0x100
     190:	00000088 	andeq	r0, r0, r8, lsl #1
     194:	00009305 	andeq	r9, r0, r5, lsl #6
     198:	00880800 	addeq	r0, r8, r0, lsl #16
     19c:	01090000 	mrseq	r0, (UNDEF: 9)
     1a0:	ea01f904 	b	7e5b8 <_Min_Stack_Size+0x7e1b8>
     1a4:	0a000000 	beq	1ac <_Min_Heap_Size+0x1ac>
     1a8:	000002a2 	andeq	r0, r0, r2, lsr #5
     1ac:	00b70a00 	adcseq	r0, r7, r0, lsl #20
     1b0:	00010000 	andeq	r0, r1, r0
     1b4:	0004910b 	andeq	r9, r4, fp, lsl #2
     1b8:	01f90400 	mvnseq	r0, r0, lsl #8
     1bc:	000000d4 	ldrdeq	r0, [r0], -r4
     1c0:	d404280c 	strle	r2, [r4], #-2060	; 0x80c
     1c4:	00018203 	andeq	r8, r1, r3, lsl #4
     1c8:	01be0d00 			; <UNDEFINED> instruction: 0x01be0d00
     1cc:	d6040000 	strle	r0, [r4], -r0
     1d0:	0000b003 	andeq	fp, r0, r3
     1d4:	e00d0000 	and	r0, sp, r0
     1d8:	04000000 	streq	r0, [r0], #-0
     1dc:	00b003d7 	ldrsbteq	r0, [r0], r7
     1e0:	0d040000 	stceq	0, cr0, [r4, #-0]
     1e4:	000002eb 	andeq	r0, r0, fp, ror #5
     1e8:	b003d804 	andlt	sp, r3, r4, lsl #16
     1ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     1f0:	00017f0d 	andeq	r7, r1, sp, lsl #30
     1f4:	03d90400 	bicseq	r0, r9, #0, 8
     1f8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     1fc:	44490e0c 	strbmi	r0, [r9], #-3596	; 0xe0c
     200:	da040052 	ble	100350 <_Min_Stack_Size+0xfff50>
     204:	0000b003 	andeq	fp, r0, r3
     208:	4f0e1000 	svcmi	0x000e1000
     20c:	04005244 	streq	r5, [r0], #-580	; 0x244
     210:	00b003db 	ldrsbteq	r0, [r0], fp
     214:	0d140000 	ldceq	0, cr0, [r4, #-0]
     218:	000004a1 	andeq	r0, r0, r1, lsr #9
     21c:	c503dc04 	strgt	sp, [r3, #-3076]	; 0xc04
     220:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     224:	0001a60d 	andeq	sl, r1, sp, lsl #12
     228:	03dd0400 	bicseq	r0, sp, #0, 8
     22c:	000000c5 	andeq	r0, r0, r5, asr #1
     230:	04a70d1a 	strteq	r0, [r7], #3354	; 0xd1a
     234:	de040000 	cdple	0, 0, cr0, cr4, cr0, {0}
     238:	0000b003 	andeq	fp, r0, r3
     23c:	410e1c00 	tstmi	lr, r0, lsl #24
     240:	04005246 	streq	r5, [r0], #-582	; 0x246
     244:	018203df 	ldrdeq	r0, [r2, pc]
     248:	00200000 	eoreq	r0, r0, r0
     24c:	0000b505 	andeq	fp, r0, r5, lsl #10
     250:	00000b00 	andeq	r0, r0, r0, lsl #22
     254:	e0040000 	and	r0, r4, r0
     258:	0000f603 	andeq	pc, r0, r3, lsl #12
     25c:	05010f00 	streq	r0, [r1, #-3840]	; 0xf00
     260:	0001b442 	andeq	fp, r1, r2, asr #8
     264:	01990a00 	orrseq	r0, r9, r0, lsl #20
     268:	0a000000 	beq	270 <_Min_Heap_Size+0x270>
     26c:	00000171 	andeq	r0, r0, r1, ror r1
     270:	00aa0a01 	adceq	r0, sl, r1, lsl #20
     274:	0a020000 	beq	8027c <_Min_Stack_Size+0x7fe7c>
     278:	000000d3 	ldrdeq	r0, [r0], -r3
     27c:	73030003 	movwvc	r0, #12291	; 0x3003
     280:	05000004 	streq	r0, [r0, #-4]
     284:	00019347 	andeq	r9, r1, r7, asr #6
     288:	05010f00 	streq	r0, [r1, #-3840]	; 0xf00
     28c:	0001d44f 	andeq	sp, r1, pc, asr #8
     290:	01f20a00 	mvnseq	r0, r0, lsl #20
     294:	0a000000 	beq	29c <_Min_Heap_Size+0x29c>
     298:	00000066 	andeq	r0, r0, r6, rrx
     29c:	41030001 	tstmi	r3, r1
     2a0:	05000001 	streq	r0, [r0, #-1]
     2a4:	0001bf52 	andeq	fp, r1, r2, asr pc
     2a8:	05010f00 	streq	r0, [r1, #-3840]	; 0xf00
     2ac:	0002005a 	andeq	r0, r2, sl, asr r0
     2b0:	02ca0a00 	sbceq	r0, sl, #0, 20
     2b4:	0a000000 	beq	2bc <_Min_Heap_Size+0x2bc>
     2b8:	000002d9 	ldrdeq	r0, [r0], -r9
     2bc:	02920a01 	addseq	r0, r2, #4096	; 0x1000
     2c0:	0a020000 	beq	802c8 <_Min_Stack_Size+0x7fec8>
     2c4:	000001e2 	andeq	r0, r0, r2, ror #3
     2c8:	fa030003 	blx	c02dc <_Min_Stack_Size+0xbfedc>
     2cc:	05000003 	streq	r0, [r0, #-3]
     2d0:	0001df5f 	andeq	sp, r1, pc, asr pc
     2d4:	05010f00 	streq	r0, [r1, #-3840]	; 0xf00
     2d8:	0002266e 	andeq	r2, r2, lr, ror #12
     2dc:	04280a00 	strteq	r0, [r8], #-2560	; 0xa00
     2e0:	0a000000 	beq	2e8 <_Min_Heap_Size+0x2e8>
     2e4:	00000484 	andeq	r0, r0, r4, lsl #9
     2e8:	040c0a01 	streq	r0, [ip], #-2561	; 0xa01
     2ec:	00020000 	andeq	r0, r2, r0
     2f0:	00046203 	andeq	r6, r4, r3, lsl #4
     2f4:	0b720500 	bleq	1c816fc <_Min_Stack_Size+0x1c812fc>
     2f8:	10000002 	andne	r0, r0, r2
     2fc:	76840508 	strvc	r0, [r4], r8, lsl #10
     300:	11000002 	tstne	r0, r2
     304:	0000000d 	andeq	r0, r0, sp
     308:	009e8605 	addseq	r8, lr, r5, lsl #12
     30c:	11000000 	mrsne	r0, (UNDEF: 0)
     310:	000004ac 	andeq	r0, r0, ip, lsr #9
     314:	01b48905 			; <UNDEFINED> instruction: 0x01b48905
     318:	11040000 	mrsne	r0, (UNDEF: 4)
     31c:	000000be 	strheq	r0, [r0], -lr
     320:	02008c05 	andeq	r8, r0, #1280	; 0x500
     324:	11050000 	mrsne	r0, (UNDEF: 5)
     328:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     32c:	01d48f05 	bicseq	r8, r4, r5, lsl #30
     330:	11060000 	mrsne	r0, (UNDEF: 6)
     334:	0000020e 	andeq	r0, r0, lr, lsl #4
     338:	02269205 	eoreq	r9, r6, #1342177280	; 0x50000000
     33c:	00070000 	andeq	r0, r7, r0
     340:	00024d03 	andeq	r4, r2, r3, lsl #26
     344:	31940500 	orrscc	r0, r4, r0, lsl #10
     348:	03000002 	movweq	r0, #2
     34c:	00000029 	andeq	r0, r0, r9, lsr #32
     350:	028c4906 	addeq	r4, ip, #98304	; 0x18000
     354:	04120000 	ldreq	r0, [r2], #-0
     358:	00000292 	muleq	r0, r2, r2
     35c:	00029d13 	andeq	r9, r2, r3, lsl sp
     360:	029d1400 	addseq	r1, sp, #0, 8
     364:	15000000 	strne	r0, [r0, #-0]
     368:	04560304 	ldrbeq	r0, [r6], #-772	; 0x304
     36c:	5d070000 	stcpl	0, cr0, [r7, #-0]
     370:	0000009e 	muleq	r0, lr, r0
     374:	0003ef03 	andeq	lr, r3, r3, lsl #30
     378:	535e0700 	cmppl	lr, #0, 14
     37c:	03000000 	movweq	r0, #0
     380:	000003ee 	andeq	r0, r0, lr, ror #7
     384:	00655f07 	rsbeq	r5, r5, r7, lsl #30
     388:	66030000 	strvs	r0, [r3], -r0
     38c:	07000001 	streq	r0, [r0, -r1]
     390:	00009e65 	andeq	r9, r0, r5, ror #28
     394:	004b0300 	subeq	r0, fp, r0, lsl #6
     398:	63080000 	movwvs	r0, #32768	; 0x8000
     39c:	0000029d 	muleq	r0, sp, r2
     3a0:	0001c416 	andeq	ip, r1, r6, lsl r4
     3a4:	81080c00 	tsthi	r8, r0, lsl #24
     3a8:	00000307 	andeq	r0, r0, r7, lsl #6
     3ac:	00005811 	andeq	r5, r0, r1, lsl r8
     3b0:	9d830800 	stcls	8, cr0, [r3]
     3b4:	00000002 	andeq	r0, r0, r2
     3b8:	00007411 	andeq	r7, r0, r1, lsl r4
     3bc:	9e840800 	cdpls	8, 8, cr0, cr4, cr0, {0}
     3c0:	04000000 	streq	r0, [r0], #-0
     3c4:	0002bd11 	andeq	fp, r2, r1, lsl sp
     3c8:	9e850800 	cdpls	8, 8, cr0, cr5, cr0, {0}
     3cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     3d0:	01d30300 	bicseq	r0, r3, r0, lsl #6
     3d4:	86080000 	strhi	r0, [r8], -r0
     3d8:	000002d6 	ldrdeq	r0, [r0], -r6
     3dc:	00031708 	andeq	r1, r3, r8, lsl #14
     3e0:	1d041200 	sfmne	f1, 4, [r4, #-0]
     3e4:	08000003 	stmdaeq	r0, {r0, r1}
     3e8:	00000322 	andeq	r0, r0, r2, lsr #6
     3ec:	09080102 	stmdbeq	r8, {r1, r8}
     3f0:	12000002 	andne	r0, r0, #2
     3f4:	00029f04 	andeq	r9, r2, r4, lsl #30
     3f8:	01ac1700 			; <UNDEFINED> instruction: 0x01ac1700
     3fc:	3a010000 	bcc	40404 <_Min_Stack_Size+0x40004>
     400:	01531801 	cmpeq	r3, r1, lsl #16
     404:	52010000 	andpl	r0, r1, #0
     408:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
     40c:	00000030 	andeq	r0, r0, r0, lsr r0
     410:	03c79c01 	biceq	r9, r7, #256	; 0x100
     414:	5e190000 	cdppl	0, 1, cr0, cr9, cr0, {0}
     418:	01000002 	tsteq	r0, r2
     41c:	00029d52 	andeq	r9, r2, r2, asr sp
     420:	00000000 	andeq	r0, r0, r0
     424:	03481a00 	movteq	r1, #35328	; 0x8a00
     428:	04d50800 	ldrbeq	r0, [r5], #2048	; 0x800
     42c:	03790000 	cmneq	r9, #0
     430:	011b0000 	tsteq	fp, r0
     434:	000a0351 	andeq	r0, sl, r1, asr r3
     438:	50011b40 	andpl	r1, r1, r0, asr #22
     43c:	18000c05 	stmdane	r0, {r0, r2, sl, fp}
     440:	1a004002 	bne	10450 <_Min_Stack_Size+0x10050>
     444:	08000352 	stmdaeq	r0, {r1, r4, r6, r8, r9}
     448:	000004d5 	ldrdeq	r0, [r0], -r5
     44c:	00000397 	muleq	r0, r7, r3
     450:	0351011b 	cmpeq	r1, #-1073741818	; 0xc0000006
     454:	1b20000a 	blne	800484 <_Min_Stack_Size+0x800084>
     458:	0c055001 	stceq	0, cr5, [r5], {1}
     45c:	40021800 	andmi	r1, r2, r0, lsl #16
     460:	035c1a00 	cmpeq	ip, #0, 20
     464:	04d50800 	ldrbeq	r0, [r5], #2048	; 0x800
     468:	03b50000 			; <UNDEFINED> instruction: 0x03b50000
     46c:	011b0000 	tsteq	fp, r0
     470:	000a0351 	andeq	r0, sl, r1, asr r3
     474:	50011b40 	andpl	r1, r1, r0, asr #22
     478:	18000c05 	stmdane	r0, {r0, r2, sl, fp}
     47c:	1c004002 	stcne	0, cr4, [r0], {2}
     480:	08000364 	stmdaeq	r0, {r2, r5, r6, r8, r9}
     484:	000004f2 	strdeq	r0, [r0], -r2
     488:	0350011b 	cmpeq	r0, #-1073741818	; 0xc0000006
     48c:	0003e80a 	andeq	lr, r3, sl, lsl #16
     490:	032f1d00 	teqeq	pc, #0, 26
     494:	036c0000 	cmneq	ip, #0
     498:	00080800 	andeq	r0, r8, r0, lsl #16
     49c:	9c010000 	stcls	0, cr0, [r1], {-0}
     4a0:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     4a4:	0003741e 	andeq	r7, r3, lr, lsl r4
     4a8:	00050908 	andeq	r0, r5, r8, lsl #18
     4ac:	51011b00 	tstpl	r1, r0, lsl #22
     4b0:	011b3101 	tsteq	fp, r1, lsl #2
     4b4:	40080250 	andmi	r0, r8, r0, asr r2
     4b8:	2f180000 	svccs	0x00180000
     4bc:	01000002 	tsteq	r0, r2
     4c0:	00037445 	andeq	r7, r3, r5, asr #8
     4c4:	00003008 	andeq	r3, r0, r8
     4c8:	2d9c0100 	ldfcss	f0, [ip]
     4cc:	1f000004 	svcne	0x00000004
     4d0:	00000439 	andeq	r0, r0, r9, lsr r4
     4d4:	02764901 	rsbseq	r4, r6, #16384	; 0x4000
     4d8:	91020000 	mrsls	r0, (UNDEF: 2)
     4dc:	039a1c70 	orrseq	r1, sl, #112, 24	; 0x7000
     4e0:	05200800 	streq	r0, [r0, #-2048]!	; 0x800
     4e4:	011b0000 	tsteq	fp, r0
     4e8:	007d0251 	rsbseq	r0, sp, r1, asr r2
     4ec:	0550011b 	ldrbeq	r0, [r0, #-283]	; 0x11b
     4f0:	0218000c 	andseq	r0, r8, #12
     4f4:	20000040 	andcs	r0, r0, r0, asr #32
     4f8:	00000084 	andeq	r0, r0, r4, lsl #1
     4fc:	007a2b01 	rsbseq	r2, sl, r1, lsl #22
     500:	03a40000 			; <UNDEFINED> instruction: 0x03a40000
     504:	003c0800 	eorseq	r0, ip, r0, lsl #16
     508:	9c010000 	stcls	0, cr0, [r1], {-0}
     50c:	000004c9 	andeq	r0, r0, r9, asr #9
     510:	00032f21 	andeq	r2, r3, r1, lsr #30
     514:	0003a600 	andeq	sl, r3, r0, lsl #12
     518:	00002008 	andeq	r2, r0, r8
     51c:	6f2e0100 	svcvs	0x002e0100
     520:	1c000004 	stcne	0, cr0, [r0], {4}
     524:	080003b0 	stmdaeq	r0, {r4, r5, r7, r8, r9}
     528:	00000509 	andeq	r0, r0, r9, lsl #10
     52c:	0151011b 	cmpeq	r1, fp, lsl r1
     530:	50011b31 	andpl	r1, r1, r1, lsr fp
     534:	00400802 	subeq	r0, r0, r2, lsl #16
     538:	03b62200 			; <UNDEFINED> instruction: 0x03b62200
     53c:	03f00800 	mvnseq	r0, #0, 16
     540:	cc1a0000 	ldcgt	0, cr0, [sl], {-0}
     544:	3d080003 	stccc	0, cr0, [r8, #-12]
     548:	bf000005 	svclt	0x00000005
     54c:	1b000004 	blne	564 <_Min_Stack_Size+0x164>
     550:	74025301 	strvc	r5, [r2], #-769	; 0x301
     554:	52011b00 	andpl	r1, r1, #0, 22
     558:	1b800802 	blne	fe002568 <_estack+0xddfd2568>
     55c:	03055101 	movweq	r5, #20737	; 0x5101
     560:	080052f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip, lr}
     564:	0550011b 	ldrbeq	r0, [r0, #-283]	; 0x11b
     568:	00033d03 	andeq	r3, r3, r3, lsl #26
     56c:	7d021b08 	vstrvc	d1, [r2, #-32]	; 0xffffffe0
     570:	0074020c 	rsbseq	r0, r4, ip, lsl #4
     574:	087d021b 	ldmdaeq	sp!, {r0, r1, r3, r4, r9}^
     578:	1b007402 	blne	1d588 <_Min_Stack_Size+0x1d188>
     57c:	02047d02 	andeq	r7, r4, #2, 26	; 0x80
     580:	021b0074 	andseq	r0, fp, #116	; 0x74
     584:	3101007d 	tstcc	r1, sp, ror r0
     588:	03d02200 	bicseq	r2, r0, #0, 4
     58c:	059b0800 	ldreq	r0, [fp, #2048]	; 0x800
     590:	23000000 	movwcs	r0, #0
     594:	0000041b 	andeq	r0, r0, fp, lsl r4
     598:	ca06a70a 	bgt	1aa1c8 <_Min_Stack_Size+0x1a9dc8>
     59c:	24000000 	strcs	r0, [r0], #-0
     5a0:	0000026b 	andeq	r0, r0, fp, ror #4
     5a4:	ec01d605 	stc	6, cr13, [r1], {5}
     5a8:	14000004 	strne	r0, [r0], #-4
     5ac:	000004ec 	andeq	r0, r0, ip, ror #9
     5b0:	00008814 	andeq	r8, r0, r4, lsl r8
     5b4:	04120000 	ldreq	r0, [r2], #-0
     5b8:	00000187 	andeq	r0, r0, r7, lsl #3
     5bc:	00024224 	andeq	r4, r2, r4, lsr #4
     5c0:	021c0800 	andseq	r0, ip, #0, 16
     5c4:	00000504 	andeq	r0, r0, r4, lsl #10
     5c8:	00050414 	andeq	r0, r5, r4, lsl r4
     5cc:	c0080000 	andgt	r0, r8, r0
     5d0:	24000002 	strcs	r0, [r0], #-2
     5d4:	0000027b 	andeq	r0, r0, fp, ror r2
     5d8:	20024009 	andcs	r4, r2, r9
     5dc:	14000005 	strne	r0, [r0], #-5
     5e0:	0000009e 	muleq	r0, lr, r0
     5e4:	0000ea14 	andeq	lr, r0, r4, lsl sl
     5e8:	c9240000 	stmdbgt	r4!, {}	; <UNPREDICTABLE>
     5ec:	05000000 	streq	r0, [r0, #-0]
     5f0:	053701c9 	ldreq	r0, [r7, #-457]!	; 0x1c9
     5f4:	ec140000 	ldc	0, cr0, [r4], {-0}
     5f8:	14000004 	strne	r0, [r0], #-4
     5fc:	00000537 	andeq	r0, r0, r7, lsr r5
     600:	76041200 	strvc	r1, [r4], -r0, lsl #4
     604:	25000002 	strcs	r0, [r0, #-2]
     608:	00000016 	andeq	r0, r0, r6, lsl r0
     60c:	aa05ec08 	bge	17b634 <_Min_Stack_Size+0x17b234>
     610:	76000002 	strvc	r0, [r0], -r2
     614:	14000005 	strne	r0, [r0], #-5
     618:	00000281 	andeq	r0, r0, r1, lsl #5
     61c:	00031214 	andeq	r1, r3, r4, lsl r2
     620:	00cf1400 	sbceq	r1, pc, r0, lsl #8
     624:	76140000 	ldrvc	r0, [r4], -r0
     628:	14000005 	strne	r0, [r0], #-5
     62c:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
     630:	00057b14 	andeq	r7, r5, r4, lsl fp
     634:	05861400 	streq	r1, [r6, #1024]	; 0x400
     638:	8b140000 	blhi	500640 <_Min_Stack_Size+0x500240>
     63c:	00000005 	andeq	r0, r0, r5
     640:	00029d08 	andeq	r9, r2, r8, lsl #26
     644:	05800800 	streq	r0, [r0, #2048]	; 0x800
     648:	04120000 	ldreq	r0, [r2], #-0
     64c:	000002cb 	andeq	r0, r0, fp, asr #5
     650:	00032908 	andeq	r2, r3, r8, lsl #18
     654:	05900800 	ldreq	r0, [r0, #2048]	; 0x800
     658:	04120000 	ldreq	r0, [r2], #-0
     65c:	00000596 	muleq	r0, r6, r5
     660:	00030708 	andeq	r0, r3, r8, lsl #14
     664:	01852600 	orreq	r2, r5, r0, lsl #12
     668:	64080000 	strvs	r0, [r8], #-0
     66c:	05d60003 	ldrbeq	r0, [r6, #3]
     670:	00040000 	andeq	r0, r4, r0
     674:	0000021c 	andeq	r0, r0, ip, lsl r2
     678:	02f30104 	rscseq	r0, r3, #4, 2
     67c:	c0010000 	andgt	r0, r1, r0
     680:	78000004 	stmdavc	r0, {r2}
     684:	00000000 	andeq	r0, r0, r0
     688:	5c000000 	stcpl	0, cr0, [r0], {-0}
     68c:	02000004 	andeq	r0, r0, #4
     690:	02020601 	andeq	r0, r2, #1048576	; 0x100000
     694:	df030000 	svcle	0x00030000
     698:	02000005 	andeq	r0, r0, #5
     69c:	0000331d 	andeq	r3, r0, sp, lsl r3
     6a0:	08010200 	stmdaeq	r1, {r9}
     6a4:	00000200 	andeq	r0, r0, r0, lsl #4
     6a8:	38050202 	stmdacc	r5, {r1, r9}
     6ac:	03000000 	movweq	r0, #0
     6b0:	00000094 	muleq	r0, r4, r0
     6b4:	004c2b02 	subeq	r2, ip, r2, lsl #22
     6b8:	02020000 	andeq	r0, r2, #0
     6bc:	0002aa07 	andeq	sl, r2, r7, lsl #20
     6c0:	044c0300 	strbeq	r0, [ip], #-768	; 0x300
     6c4:	3f020000 	svccc	0x00020000
     6c8:	0000005e 	andeq	r0, r0, lr, asr r0
     6cc:	5d050402 	cfstrspl	mvf0, [r5, #-8]
     6d0:	03000001 	movweq	r0, #1
     6d4:	00000089 	andeq	r0, r0, r9, lsl #1
     6d8:	00704102 	rsbseq	r4, r0, r2, lsl #2
     6dc:	04020000 	streq	r0, [r2], #-0
     6e0:	00021d07 	andeq	r1, r2, r7, lsl #26
     6e4:	05080200 	streq	r0, [r8, #-512]	; 0x200
     6e8:	00000158 	andeq	r0, r0, r8, asr r1
     6ec:	18070802 	stmdane	r7, {r1, fp}
     6f0:	04000002 	streq	r0, [r0], #-2
     6f4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     6f8:	04020074 	streq	r0, [r2], #-116	; 0x74
     6fc:	00022207 	andeq	r2, r2, r7, lsl #4
     700:	05e10300 	strbeq	r0, [r1, #768]!	; 0x300
     704:	2a030000 	bcs	c070c <_Min_Stack_Size+0xc030c>
     708:	00000028 	andeq	r0, r0, r8, lsr #32
     70c:	00009603 	andeq	r9, r0, r3, lsl #12
     710:	41360300 	teqmi	r6, r0, lsl #6
     714:	03000000 	movweq	r0, #0
     718:	0000044e 	andeq	r0, r0, lr, asr #8
     71c:	00534103 	subseq	r4, r3, r3, lsl #2
     720:	8b030000 	blhi	c0728 <_Min_Stack_Size+0xc0328>
     724:	03000000 	movweq	r0, #0
     728:	00006542 	andeq	r6, r0, r2, asr #10
     72c:	07040200 	streq	r0, [r4, -r0, lsl #4]
     730:	00000042 	andeq	r0, r0, r2, asr #32
     734:	0000b405 	andeq	fp, r0, r5, lsl #8
     738:	048c0600 	streq	r0, [ip], #1536	; 0x600
     73c:	01e60170 	mvneq	r0, r0, ror r1
     740:	7c070000 	stcvc	0, cr0, [r7], {-0}
     744:	04000005 	streq	r0, [r0], #-5
     748:	01e60172 	mvneq	r0, r2, ror r1
     74c:	07000000 	streq	r0, [r0, -r0]
     750:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
     754:	c6017304 	strgt	r7, [r1], -r4, lsl #6
     758:	04000000 	streq	r0, [r0], #-0
     75c:	00066c07 	andeq	r6, r6, r7, lsl #24
     760:	01740400 	cmneq	r4, r0, lsl #8
     764:	000000c6 	andeq	r0, r0, r6, asr #1
     768:	06110708 	ldreq	r0, [r1], -r8, lsl #14
     76c:	75040000 	strvc	r0, [r4, #-0]
     770:	0000c601 	andeq	ip, r0, r1, lsl #12
     774:	53080c00 	movwpl	r0, #35840	; 0x8c00
     778:	04005243 	streq	r5, [r0], #-579	; 0x243
     77c:	00c60176 	sbceq	r0, r6, r6, ror r1
     780:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
     784:	00524343 	subseq	r4, r2, r3, asr #6
     788:	c6017704 	strgt	r7, [r1], -r4, lsl #14
     78c:	14000000 	strne	r0, [r0], #-0
     790:	50485308 	subpl	r5, r8, r8, lsl #6
     794:	01780400 	cmneq	r8, r0, lsl #8
     798:	000001fb 	strdeq	r0, [r0], -fp
     79c:	062e0718 			; <UNDEFINED> instruction: 0x062e0718
     7a0:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
     7a4:	0000c601 	andeq	ip, r0, r1, lsl #12
     7a8:	e9072400 	stmdb	r7, {sl, sp}
     7ac:	04000005 	streq	r0, [r0], #-5
     7b0:	00c6017a 	sbceq	r0, r6, sl, ror r1
     7b4:	07280000 	streq	r0, [r8, -r0]!
     7b8:	0000068b 	andeq	r0, r0, fp, lsl #13
     7bc:	c6017b04 	strgt	r7, [r1], -r4, lsl #22
     7c0:	2c000000 	stccs	0, cr0, [r0], {-0}
     7c4:	00067607 	andeq	r7, r6, r7, lsl #12
     7c8:	017c0400 	cmneq	ip, r0, lsl #8
     7cc:	000000c6 	andeq	r0, r0, r6, asr #1
     7d0:	064a0730 			; <UNDEFINED> instruction: 0x064a0730
     7d4:	7d040000 	stcvc	0, cr0, [r4, #-0]
     7d8:	0000c601 	andeq	ip, r0, r1, lsl #12
     7dc:	c5073400 	strgt	r3, [r7, #-1024]	; 0x400
     7e0:	04000005 	streq	r0, [r0], #-5
     7e4:	00c6017e 	sbceq	r0, r6, lr, ror r1
     7e8:	07380000 	ldreq	r0, [r8, -r0]!
     7ec:	000006ef 	andeq	r0, r0, pc, ror #13
     7f0:	c6017f04 	strgt	r7, [r1], -r4, lsl #30
     7f4:	3c000000 	stccc	0, cr0, [r0], {-0}
     7f8:	52465008 	subpl	r5, r6, #8
     7fc:	01800400 	orreq	r0, r0, r0, lsl #8
     800:	00000210 	andeq	r0, r0, r0, lsl r2
     804:	46440840 	strbmi	r0, [r4], -r0, asr #16
     808:	81040052 	qaddhi	r0, r2, r4
     80c:	0001e601 	andeq	lr, r1, r1, lsl #12
     810:	41084800 	tstmi	r8, r0, lsl #16
     814:	04005244 	streq	r5, [r0], #-580	; 0x244
     818:	01e60182 	mvneq	r0, r2, lsl #3
     81c:	074c0000 	strbeq	r0, [ip, -r0]
     820:	0000069a 	muleq	r0, sl, r6
     824:	2a018304 	bcs	6143c <_Min_Stack_Size+0x6103c>
     828:	50000002 	andpl	r0, r0, r2
     82c:	00067107 	andeq	r7, r6, r7, lsl #2
     830:	01840400 	orreq	r0, r4, r0, lsl #8
     834:	00000244 	andeq	r0, r0, r4, asr #4
     838:	069f0760 	ldreq	r0, [pc], r0, ror #14
     83c:	85040000 	strhi	r0, [r4, #-0]
     840:	00023401 	andeq	r3, r2, r1, lsl #8
     844:	16077400 	strne	r7, [r7], -r0, lsl #8
     848:	04000007 	streq	r0, [r0], #-7
     84c:	00c60186 	sbceq	r0, r6, r6, lsl #3
     850:	00880000 	addeq	r0, r8, r0
     854:	0000c609 	andeq	ip, r0, r9, lsl #12
     858:	00930a00 	addseq	r0, r3, r0, lsl #20
     85c:	01fb0000 	mvnseq	r0, r0
     860:	bf0b0000 	svclt	0x000b0000
     864:	0b000000 	bleq	86c <_Min_Stack_Size+0x46c>
     868:	01eb0500 	mvneq	r0, r0, lsl #10
     86c:	b40a0000 	strlt	r0, [sl], #-0
     870:	10000000 	andne	r0, r0, r0
     874:	0b000002 	bleq	884 <_Min_Stack_Size+0x484>
     878:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
     87c:	15090001 	strne	r0, [r9, #-1]
     880:	05000002 	streq	r0, [r0, #-2]
     884:	00000200 	andeq	r0, r0, r0, lsl #4
     888:	0000b40a 	andeq	fp, r0, sl, lsl #8
     88c:	00022a00 	andeq	r2, r2, r0, lsl #20
     890:	00bf0b00 	adcseq	r0, pc, r0, lsl #22
     894:	00030000 	andeq	r0, r3, r0
     898:	00022f09 	andeq	r2, r2, r9, lsl #30
     89c:	021a0500 	andseq	r0, sl, #0, 10
     8a0:	b40a0000 	strlt	r0, [sl], #-0
     8a4:	44000000 	strmi	r0, [r0], #-0
     8a8:	0b000002 	bleq	8b8 <_Min_Stack_Size+0x4b8>
     8ac:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
     8b0:	49090004 	stmdbmi	r9, {r2}
     8b4:	05000002 	streq	r0, [r0, #-2]
     8b8:	00000234 	andeq	r0, r0, r4, lsr r2
     8bc:	00059f0c 	andeq	r9, r5, ip, lsl #30
     8c0:	01870400 	orreq	r0, r7, r0, lsl #8
     8c4:	000000cb 	andeq	r0, r0, fp, asr #1
     8c8:	0000a905 	andeq	sl, r0, r5, lsl #18
     8cc:	05010d00 	streq	r0, [r1, #-3328]	; 0xd00
     8d0:	027501f7 	rsbseq	r0, r5, #-1073741763	; 0xc000003d
     8d4:	310e0000 	mrscc	r0, (UNDEF: 14)
     8d8:	00000025 	andeq	r0, r0, r5, lsr #32
     8dc:	5445530f 	strbpl	r5, [r5], #-783	; 0x30f
     8e0:	06000100 	streq	r0, [r0], -r0, lsl #2
     8e4:	033e051c 	teqeq	lr, #28, 10	; 0x7000000
     8e8:	000002d8 	ldrdeq	r0, [r0], -r8
     8ec:	52434108 	subpl	r4, r3, #8, 2
     8f0:	03400500 	movteq	r0, #1280	; 0x500
     8f4:	000000c6 	andeq	r0, r0, r6, asr #1
     8f8:	05c00700 	strbeq	r0, [r0, #1792]	; 0x700
     8fc:	41050000 	mrsmi	r0, (UNDEF: 5)
     900:	0000c603 	andeq	ip, r0, r3, lsl #12
     904:	bd070400 	cfstrslt	mvf0, [r7, #-0]
     908:	05000005 	streq	r0, [r0, #-5]
     90c:	00c60342 	sbceq	r0, r6, r2, asr #6
     910:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
     914:	05005253 	streq	r5, [r0, #-595]	; 0x253
     918:	00c60343 	sbceq	r0, r6, r3, asr #6
     91c:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
     920:	05005243 	streq	r5, [r0, #-579]	; 0x243
     924:	00c60344 	sbceq	r0, r6, r4, asr #6
     928:	07100000 	ldreq	r0, [r0, -r0]
     92c:	00000726 	andeq	r0, r0, r6, lsr #14
     930:	c6034505 	strgt	r4, [r3], -r5, lsl #10
     934:	14000000 	strne	r0, [r0], #-0
     938:	0005ee07 	andeq	lr, r5, r7, lsl #28
     93c:	03460500 	movteq	r0, #25856	; 0x6500
     940:	000000c6 	andeq	r0, r0, r6, asr #1
     944:	fd0c0018 	stc2	0, cr0, [ip, #-96]	; 0xffffffa0
     948:	05000006 	streq	r0, [r0, #-6]
     94c:	02750347 	rsbseq	r0, r5, #469762049	; 0x1c000001
     950:	08060000 	stmdaeq	r6, {}	; <UNPREDICTABLE>
     954:	07044b05 	streq	r4, [r4, -r5, lsl #22]
     958:	08000003 	stmdaeq	r0, {r0, r1}
     95c:	05005243 	streq	r5, [r0, #-579]	; 0x243
     960:	00c6044d 	sbceq	r0, r6, sp, asr #8
     964:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     968:	00525343 	subseq	r5, r2, r3, asr #6
     96c:	c6044e05 	strgt	r4, [r4], -r5, lsl #28
     970:	04000000 	streq	r0, [r0], #-0
     974:	05600c00 	strbeq	r0, [r0, #-3072]!	; 0xc00
     978:	4f050000 	svcmi	0x00050000
     97c:	0002e404 	andeq	lr, r2, r4, lsl #8
     980:	05900600 	ldreq	r0, [r0, #1536]	; 0x600
     984:	04bc0455 	ldrteq	r0, [ip], #1109	; 0x455
     988:	43080000 	movwmi	r0, #32768	; 0x8000
     98c:	57050052 	smlsdpl	r5, r2, r0, r0
     990:	0000c604 	andeq	ip, r0, r4, lsl #12
     994:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     998:	05000005 	streq	r0, [r0, #-5]
     99c:	00c60458 	sbceq	r0, r6, r8, asr r4
     9a0:	07040000 	streq	r0, [r4, -r0]
     9a4:	00000711 	andeq	r0, r0, r1, lsl r7
     9a8:	c6045905 	strgt	r5, [r4], -r5, lsl #18
     9ac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     9b0:	52494308 	subpl	r4, r9, #8, 6	; 0x20000000
     9b4:	045a0500 	ldrbeq	r0, [sl], #-1280	; 0x500
     9b8:	000000c6 	andeq	r0, r0, r6, asr #1
     9bc:	0582070c 	streq	r0, [r2, #1804]	; 0x70c
     9c0:	5b050000 	blpl	1409c8 <_Min_Stack_Size+0x1405c8>
     9c4:	0000c604 	andeq	ip, r0, r4, lsl #12
     9c8:	47071000 	strmi	r1, [r7, -r0]
     9cc:	05000005 	streq	r0, [r0, #-5]
     9d0:	00c6045c 	sbceq	r0, r6, ip, asr r4
     9d4:	07140000 	ldreq	r0, [r4, -r0]
     9d8:	000006f4 	strdeq	r0, [r0], -r4
     9dc:	c6045d05 	strgt	r5, [r4], -r5, lsl #26
     9e0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     9e4:	00069f07 	andeq	r9, r6, r7, lsl #30
     9e8:	045e0500 	ldrbeq	r0, [lr], #-1280	; 0x500
     9ec:	000000b4 	strheq	r0, [r0], -r4
     9f0:	0536071c 	ldreq	r0, [r6, #-1820]!	; 0x71c
     9f4:	5f050000 	svcpl	0x00050000
     9f8:	0000c604 	andeq	ip, r0, r4, lsl #12
     9fc:	d6072000 	strle	r2, [r7], -r0
     a00:	05000005 	streq	r0, [r0, #-5]
     a04:	00c60460 	sbceq	r0, r6, r0, ror #8
     a08:	07240000 	streq	r0, [r4, -r0]!
     a0c:	000006a9 	andeq	r0, r0, r9, lsr #13
     a10:	00046105 	andeq	r6, r4, r5, lsl #2
     a14:	28000002 	stmdacs	r0, {r1}
     a18:	0006e707 	andeq	lr, r6, r7, lsl #14
     a1c:	04620500 	strbteq	r0, [r2], #-1280	; 0x500
     a20:	000000c6 	andeq	r0, r0, r6, asr #1
     a24:	053f0730 	ldreq	r0, [pc, #-1840]!	; 2fc <_Min_Heap_Size+0x2fc>
     a28:	63050000 	movwvs	r0, #20480	; 0x5000
     a2c:	0000c604 	andeq	ip, r0, r4, lsl #12
     a30:	ff073400 			; <UNDEFINED> instruction: 0xff073400
     a34:	05000005 	streq	r0, [r0, #-5]
     a38:	00c60464 	sbceq	r0, r6, r4, ror #8
     a3c:	07380000 	ldreq	r0, [r8, -r0]!
     a40:	000006b3 			; <UNDEFINED> instruction: 0x000006b3
     a44:	b4046505 	strlt	r6, [r4], #-1285	; 0x505
     a48:	3c000000 	stccc	0, cr0, [r0], {-0}
     a4c:	0005a807 	andeq	sl, r5, r7, lsl #16
     a50:	04660500 	strbteq	r0, [r6], #-1280	; 0x500
     a54:	000000c6 	andeq	r0, r0, r6, asr #1
     a58:	06170740 	ldreq	r0, [r7], -r0, asr #14
     a5c:	67050000 	strvs	r0, [r5, -r0]
     a60:	0000c604 	andeq	ip, r0, r4, lsl #12
     a64:	95074400 	strls	r4, [r7, #-1024]	; 0x400
     a68:	05000005 	streq	r0, [r0, #-5]
     a6c:	02000468 	andeq	r0, r0, #104, 8	; 0x68000000
     a70:	07480000 	strbeq	r0, [r8, -r0]
     a74:	000004b6 			; <UNDEFINED> instruction: 0x000004b6
     a78:	c6046905 	strgt	r6, [r4], -r5, lsl #18
     a7c:	50000000 	andpl	r0, r0, r0
     a80:	00069007 	andeq	r9, r6, r7
     a84:	046a0500 	strbteq	r0, [sl], #-1280	; 0x500
     a88:	000000c6 	andeq	r0, r0, r6, asr #1
     a8c:	058b0754 	streq	r0, [fp, #1876]	; 0x754
     a90:	6b050000 	blvs	140a98 <_Min_Stack_Size+0x140698>
     a94:	0000c604 	andeq	ip, r0, r4, lsl #12
     a98:	c9075800 	stmdbgt	r7, {fp, ip, lr}
     a9c:	05000006 	streq	r0, [r0, #-6]
     aa0:	00b4046c 	adcseq	r0, r4, ip, ror #8
     aa4:	075c0000 	ldrbeq	r0, [ip, -r0]
     aa8:	0000065b 	andeq	r0, r0, fp, asr r6
     aac:	c6046d05 	strgt	r6, [r4], -r5, lsl #26
     ab0:	60000000 	andvs	r0, r0, r0
     ab4:	00071c07 	andeq	r1, r7, r7, lsl #24
     ab8:	046e0500 	strbteq	r0, [lr], #-1280	; 0x500
     abc:	000000c6 	andeq	r0, r0, r6, asr #1
     ac0:	06d30764 	ldrbeq	r0, [r3], r4, ror #14
     ac4:	6f050000 	svcvs	0x00050000
     ac8:	00020004 	andeq	r0, r2, r4
     acc:	50076800 	andpl	r6, r7, r0, lsl #16
     ad0:	05000005 	streq	r0, [r0, #-5]
     ad4:	00c60470 	sbceq	r0, r6, r0, ror r4
     ad8:	08700000 	ldmdaeq	r0!, {}^	; <UNPREDICTABLE>
     adc:	00525343 	subseq	r5, r2, r3, asr #6
     ae0:	c6047105 	strgt	r7, [r4], -r5, lsl #2
     ae4:	74000000 	strvc	r0, [r0], #-0
     ae8:	0006dd07 	andeq	sp, r6, r7, lsl #26
     aec:	04720500 	ldrbteq	r0, [r2], #-1280	; 0x500
     af0:	00000200 	andeq	r0, r0, r0, lsl #4
     af4:	056c0778 	strbeq	r0, [ip, #-1912]!	; 0x778
     af8:	73050000 	movwvc	r0, #20480	; 0x5000
     afc:	0000c604 	andeq	ip, r0, r4, lsl #12
     b00:	55078000 	strpl	r8, [r7, #-0]
     b04:	05000005 	streq	r0, [r0, #-5]
     b08:	00c60474 	sbceq	r0, r6, r4, ror r4
     b0c:	07840000 	streq	r0, [r4, r0]
     b10:	0000070b 	andeq	r0, r0, fp, lsl #14
     b14:	c6047505 	strgt	r7, [r4], -r5, lsl #10
     b18:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     b1c:	0005b007 	andeq	fp, r5, r7
     b20:	04760500 	ldrbteq	r0, [r6], #-1280	; 0x500
     b24:	000000c6 	andeq	r0, r0, r6, asr #1
     b28:	ca0c008c 	bgt	300d60 <_Min_Stack_Size+0x300960>
     b2c:	05000005 	streq	r0, [r0, #-5]
     b30:	03130478 	tsteq	r3, #120, 8	; 0x78000000
     b34:	bd100000 	ldclt	0, cr0, [r0, #-0]
     b38:	01000006 	tsteq	r0, r6
     b3c:	ee010155 	mcr	1, 0, r0, cr1, cr5, {2}
     b40:	11000004 	tstne	r0, r4
     b44:	0000061f 	andeq	r0, r0, pc, lsl r6
     b48:	c6015a01 	strgt	r5, [r1], -r1, lsl #20
     b4c:	11000000 	mrsne	r0, (UNDEF: 0)
     b50:	00000572 	andeq	r0, r0, r2, ror r5
     b54:	c6015a01 	strgt	r5, [r1], -r1, lsl #20
     b58:	00000000 	andeq	r0, r0, r0
     b5c:	00065012 	andeq	r5, r6, r2, lsl r0
     b60:	e0d00100 	sbcs	r0, r0, r0, lsl #2
     b64:	00080003 	andeq	r0, r8, r3
     b68:	01000001 	tsteq	r0, r1
     b6c:	00052a9c 	muleq	r5, ip, sl
     b70:	04c81300 	strbeq	r1, [r8], #768	; 0x300
     b74:	04180000 	ldreq	r0, [r8], #-0
     b78:	00600800 	rsbeq	r0, r0, r0, lsl #16
     b7c:	ef010000 	svc	0x00010000
     b80:	00006014 	andeq	r6, r0, r4, lsl r0
     b84:	04d51500 	ldrbeq	r1, [r5], #1280	; 0x500
     b88:	91020000 	mrsls	r0, (UNDEF: 2)
     b8c:	04e11578 	strbteq	r1, [r1], #1400	; 0x578
     b90:	91020000 	mrsls	r0, (UNDEF: 2)
     b94:	0000007c 	andeq	r0, r0, ip, ror r0
     b98:	00063416 	andeq	r3, r6, r6, lsl r4
     b9c:	011d0100 	tsteq	sp, r0, lsl #2
     ba0:	080004e0 	stmdaeq	r0, {r5, r6, r7, sl}
     ba4:	00000070 	andeq	r0, r0, r0, ror r0
     ba8:	05919c01 	ldreq	r9, [r1, #3073]	; 0xc01
     bac:	74170000 	ldrvc	r0, [r7], #-0
     bb0:	0100706d 	tsteq	r0, sp, rrx
     bb4:	00b4011f 	adcseq	r0, r4, pc, lsl r1
     bb8:	00210000 	eoreq	r0, r1, r0
     bbc:	65180000 	ldrvs	r0, [r8, #-0]
     bc0:	01000006 	tsteq	r0, r6
     bc4:	00b4011f 	adcseq	r0, r4, pc, lsl r1
     bc8:	00750000 	rsbseq	r0, r5, r0
     bcc:	0c180000 	ldceq	0, cr0, [r8], {-0}
     bd0:	01000006 	tsteq	r0, r6
     bd4:	00b4011f 	adcseq	r0, r4, pc, lsl r1
     bd8:	00ac0000 	adceq	r0, ip, r0
     bdc:	f5180000 			; <UNDEFINED> instruction: 0xf5180000
     be0:	01000005 	tsteq	r0, r5
     be4:	00b4011f 	adcseq	r0, r4, pc, lsl r1
     be8:	00ef0000 	rsceq	r0, pc, r0
     bec:	07180000 	ldreq	r0, [r8, -r0]
     bf0:	01000006 	tsteq	r0, r6
     bf4:	00b4011f 	adcseq	r0, r4, pc, lsl r1
     bf8:	012e0000 	teqeq	lr, r0
     bfc:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     c00:	0000041b 	andeq	r0, r0, fp, lsl r4
     c04:	5a06a704 	bpl	1aa81c <_Min_Stack_Size+0x1aa41c>
     c08:	1a000002 	bne	c18 <_Min_Stack_Size+0x818>
     c0c:	0000067b 	andeq	r0, r0, fp, ror r6
     c10:	00b4b001 	adcseq	fp, r4, r1
     c14:	03050000 	movweq	r0, #20480	; 0x5000
     c18:	20000010 	andcs	r0, r0, r0, lsl r0
     c1c:	0000930a 	andeq	r9, r0, sl, lsl #6
     c20:	0005be00 	andeq	fp, r5, r0, lsl #28
     c24:	00bf0b00 	adcseq	r0, pc, r0, lsl #22
     c28:	000f0000 	andeq	r0, pc, r0
     c2c:	002bff1a 	eoreq	pc, fp, sl, lsl pc	; <UNPREDICTABLE>
     c30:	cfb20100 	svcgt	0x00b20100
     c34:	05000005 	streq	r0, [r0, #-5]
     c38:	00000003 	andeq	r0, r0, r3
     c3c:	05d40920 	ldrbeq	r0, [r4, #2336]	; 0x920
     c40:	ae050000 	cdpge	0, 0, cr0, cr5, cr0, {0}
     c44:	00000005 	andeq	r0, r0, r5
     c48:	00000110 	andeq	r0, r0, r0, lsl r1
     c4c:	03790004 	cmneq	r9, #4
     c50:	01040000 	mrseq	r0, (UNDEF: 4)
     c54:	000002f3 	strdeq	r0, [r0], -r3
     c58:	00076201 	andeq	r6, r7, r1, lsl #4
     c5c:	00009000 	andeq	r9, r0, r0
     c60:	00000000 	andeq	r0, r0, r0
     c64:	0006be00 	andeq	fp, r6, r0, lsl #28
     c68:	06010200 	streq	r0, [r1], -r0, lsl #4
     c6c:	00000202 	andeq	r0, r0, r2, lsl #4
     c70:	00080102 	andeq	r0, r8, r2, lsl #2
     c74:	02000002 	andeq	r0, r0, #2
     c78:	00380502 	eorseq	r0, r8, r2, lsl #10
     c7c:	02020000 	andeq	r0, r2, #0
     c80:	0002aa07 	andeq	sl, r2, r7, lsl #20
     c84:	044c0300 	strbeq	r0, [ip], #-768	; 0x300
     c88:	3f020000 	svccc	0x00020000
     c8c:	00000048 	andeq	r0, r0, r8, asr #32
     c90:	5d050402 	cfstrspl	mvf0, [r5, #-8]
     c94:	02000001 	andeq	r0, r0, #1
     c98:	021d0704 	andseq	r0, sp, #4, 14	; 0x100000
     c9c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     ca0:	00015805 	andeq	r5, r1, r5, lsl #16
     ca4:	07080200 	streq	r0, [r8, -r0, lsl #4]
     ca8:	00000218 	andeq	r0, r0, r8, lsl r2
     cac:	69050404 	stmdbvs	r5, {r2, sl}
     cb0:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     cb4:	02220704 	eoreq	r0, r2, #4, 14	; 0x100000
     cb8:	4e030000 	cdpmi	0, 0, cr0, cr3, cr0, {0}
     cbc:	03000004 	movweq	r0, #4
     cc0:	00003d41 	andeq	r3, r0, r1, asr #26
     cc4:	07040200 	streq	r0, [r4, -r0, lsl #4]
     cc8:	00000042 	andeq	r0, r0, r2, asr #32
     ccc:	00007205 	andeq	r7, r0, r5, lsl #4
     cd0:	08010200 	stmdaeq	r1, {r9}
     cd4:	00000209 	andeq	r0, r0, r9, lsl #4
     cd8:	0007d606 	andeq	sp, r7, r6, lsl #12
     cdc:	50360100 	eorspl	r0, r6, r0, lsl #2
     ce0:	02080005 	andeq	r0, r8, #5
     ce4:	01000000 	mrseq	r0, (UNDEF: 0)
     ce8:	07c4069c 	bfieq	r0, ip, (invalid: 13:4)
     cec:	3f010000 	svccc	0x00010000
     cf0:	08000554 	stmdaeq	r0, {r2, r4, r6, r8, sl}
     cf4:	00000002 	andeq	r0, r0, r2
     cf8:	2c069c01 	stccs	12, cr9, [r6], {1}
     cfc:	01000007 	tsteq	r0, r7
     d00:	0005584c 	andeq	r5, r5, ip, asr #16
     d04:	00000208 	andeq	r0, r0, r8, lsl #4
     d08:	069c0100 	ldreq	r0, [ip], r0, lsl #2
     d0c:	00000751 	andeq	r0, r0, r1, asr r7
     d10:	055c5901 	ldrbeq	r5, [ip, #-2305]	; 0x901
     d14:	00020800 	andeq	r0, r2, r0, lsl #16
     d18:	9c010000 	stcls	0, cr0, [r1], {-0}
     d1c:	00073e06 	andeq	r3, r7, r6, lsl #28
     d20:	60660100 	rsbvs	r0, r6, r0, lsl #2
     d24:	02080005 	andeq	r0, r8, #5
     d28:	01000000 	mrseq	r0, (UNDEF: 0)
     d2c:	07e2069c 			; <UNDEFINED> instruction: 0x07e2069c
     d30:	7c010000 	stcvc	0, cr0, [r1], {-0}
     d34:	08000564 	stmdaeq	r0, {r2, r5, r6, r8, sl}
     d38:	00000002 	andeq	r0, r0, r2
     d3c:	f3069c01 			; <UNDEFINED> instruction: 0xf3069c01
     d40:	01000007 	tsteq	r0, r7
     d44:	00056896 	muleq	r5, r6, r8
     d48:	00000208 	andeq	r0, r0, r8, lsl #4
     d4c:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
     d50:	0000041b 	andeq	r0, r0, fp, lsl r4
     d54:	8406a704 	strhi	sl, [r6], #-1796	; 0x704
     d58:	00000000 	andeq	r0, r0, r0
     d5c:	00000771 	andeq	r0, r0, r1, ror r7
     d60:	03de0004 	bicseq	r0, lr, #4
     d64:	01040000 	mrseq	r0, (UNDEF: 4)
     d68:	000002f3 	strdeq	r0, [r0], -r3
     d6c:	0008c901 	andeq	ip, r8, r1, lsl #18
     d70:	00015800 	andeq	r5, r1, r0, lsl #16
     d74:	00000000 	andeq	r0, r0, r0
     d78:	00087700 	andeq	r7, r8, r0, lsl #14
     d7c:	05040200 	streq	r0, [r4, #-512]	; 0x200
     d80:	00746e69 	rsbseq	r6, r4, r9, ror #28
     d84:	00089903 	andeq	r9, r8, r3, lsl #18
     d88:	33d40200 	bicscc	r0, r4, #0, 4
     d8c:	04000000 	streq	r0, [r0], #-0
     d90:	02220704 	eoreq	r0, r2, #4, 14	; 0x100000
     d94:	01040000 	mrseq	r0, (UNDEF: 4)
     d98:	00020206 	andeq	r0, r2, r6, lsl #4
     d9c:	08010400 	stmdaeq	r1, {sl}
     da0:	00000200 	andeq	r0, r0, r0, lsl #4
     da4:	38050204 	stmdacc	r5, {r2, r9}
     da8:	03000000 	movweq	r0, #0
     dac:	00000094 	muleq	r0, r4, r0
     db0:	005a2b03 	subseq	r2, sl, r3, lsl #22
     db4:	02040000 	andeq	r0, r4, #0
     db8:	0002aa07 	andeq	sl, r2, r7, lsl #20
     dbc:	05040400 	streq	r0, [r4, #-1024]	; 0x400
     dc0:	0000015d 	andeq	r0, r0, sp, asr r1
     dc4:	00008903 	andeq	r8, r0, r3, lsl #18
     dc8:	73410300 	movtvc	r0, #4864	; 0x1300
     dcc:	04000000 	streq	r0, [r0], #-0
     dd0:	021d0704 	andseq	r0, sp, #4, 14	; 0x100000
     dd4:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     dd8:	00015805 	andeq	r5, r1, r5, lsl #16
     ddc:	07080400 	streq	r0, [r8, -r0, lsl #8]
     de0:	00000218 	andeq	r0, r0, r8, lsl r2
     de4:	00009603 	andeq	r9, r0, r3, lsl #12
     de8:	4f360400 	svcmi	0x00360400
     dec:	03000000 	movweq	r0, #0
     df0:	0000008b 	andeq	r0, r0, fp, lsl #1
     df4:	00684204 	rsbeq	r4, r8, r4, lsl #4
     df8:	04050000 	streq	r0, [r5], #-0
     dfc:	0003ef03 	andeq	lr, r3, r3, lsl #30
     e00:	615e0500 	cmpvs	lr, r0, lsl #10
     e04:	03000000 	movweq	r0, #0
     e08:	000003ee 	andeq	r0, r0, lr, ror #7
     e0c:	00735f05 	rsbseq	r5, r3, r5, lsl #30
     e10:	66030000 	strvs	r0, [r3], -r0
     e14:	05000001 	streq	r0, [r0, #-1]
     e18:	00009365 	andeq	r9, r0, r5, ror #6
     e1c:	09ca0600 	stmibeq	sl, {r9, sl}^
     e20:	06140000 	ldreq	r0, [r4], -r0
     e24:	00010a88 	andeq	r0, r1, r8, lsl #21
     e28:	09a60700 	stmibeq	r6!, {r8, r9, sl}
     e2c:	8a060000 	bhi	180e34 <_Min_Stack_Size+0x180a34>
     e30:	000000b6 	strheq	r0, [r0], -r6
     e34:	0a9b0700 	beq	fe6c2a3c <_estack+0xde692a3c>
     e38:	8b060000 	blhi	180e40 <_Min_Stack_Size+0x180a40>
     e3c:	0000010a 	andeq	r0, r0, sl, lsl #2
     e40:	08a00704 	stmiaeq	r0!, {r2, r8, r9, sl}
     e44:	8c060000 	stchi	0, cr0, [r6], {-0}
     e48:	0000010a 	andeq	r0, r0, sl, lsl #2
     e4c:	09490708 	stmdbeq	r9, {r3, r8, r9, sl}^
     e50:	8d060000 	stchi	0, cr0, [r6, #-0]
     e54:	0000009e 	muleq	r0, lr, r0
     e58:	0a3b070c 	beq	ec2a90 <_Min_Stack_Size+0xec2690>
     e5c:	8e060000 	cdphi	0, 0, cr0, cr6, cr0, {0}
     e60:	0000009e 	muleq	r0, lr, r0
     e64:	04080010 	streq	r0, [r8], #-16
     e68:	000000c1 	andeq	r0, r0, r1, asr #1
     e6c:	00098903 	andeq	r8, r9, r3, lsl #18
     e70:	c1900600 	orrsgt	r0, r0, r0, lsl #12
     e74:	06000000 	streq	r0, [r0], -r0
     e78:	00000bb2 			; <UNDEFINED> instruction: 0x00000bb2
     e7c:	4c92060c 	ldcmi	6, cr0, [r2], {12}
     e80:	07000001 	streq	r0, [r0, -r1]
     e84:	000009a6 	andeq	r0, r0, r6, lsr #19
     e88:	00b69406 	adcseq	r9, r6, r6, lsl #8
     e8c:	07000000 	streq	r0, [r0, -r0]
     e90:	00000a9b 	muleq	r0, fp, sl
     e94:	010a9506 	tsteq	sl, r6, lsl #10
     e98:	07040000 	streq	r0, [r4, -r0]
     e9c:	000008a0 	andeq	r0, r0, r0, lsr #17
     ea0:	010a9606 	tsteq	sl, r6, lsl #12
     ea4:	00080000 	andeq	r0, r8, r0
     ea8:	00098503 	andeq	r8, r9, r3, lsl #10
     eac:	1b980600 	blne	fe6026b4 <_estack+0xde5d26b4>
     eb0:	06000001 	streq	r0, [r0], -r1
     eb4:	000009a0 	andeq	r0, r0, r0, lsr #19
     eb8:	889d0614 	ldmhi	sp, {r2, r4, r9, sl}
     ebc:	07000001 	streq	r0, [r0, -r1]
     ec0:	00000b1e 	andeq	r0, r0, lr, lsl fp
     ec4:	00ab9f06 	adceq	r9, fp, r6, lsl #30
     ec8:	07000000 	streq	r0, [r0, -r0]
     ecc:	00000baa 	andeq	r0, r0, sl, lsr #23
     ed0:	0188a006 	orreq	sl, r8, r6
     ed4:	07040000 	streq	r0, [r4, -r0]
     ed8:	00000f44 	andeq	r0, r0, r4, asr #30
     edc:	014ca106 	cmpeq	ip, r6, lsl #2
     ee0:	00080000 	andeq	r0, r8, r0
     ee4:	01100408 	tsteq	r0, r8, lsl #8
     ee8:	7e030000 	cdpvc	0, 0, cr0, cr3, cr0, {0}
     eec:	06000009 	streq	r0, [r0], -r9
     ef0:	000157a2 	andeq	r5, r1, r2, lsr #15
     ef4:	08010400 	stmdaeq	r1, {sl}
     ef8:	00000209 	andeq	r0, r0, r9, lsl #4
     efc:	42070404 	andmi	r0, r7, #4, 8	; 0x4000000
     f00:	03000000 	movweq	r0, #0
     f04:	000009ee 	andeq	r0, r0, lr, ror #19
     f08:	009e5207 	addseq	r5, lr, r7, lsl #4
     f0c:	7d030000 	stcvc	0, cr0, [r3, #-0]
     f10:	0700000a 	streq	r0, [r0, -sl]
     f14:	0001bd55 	andeq	fp, r1, r5, asr sp
     f18:	c3040800 	movwgt	r0, #18432	; 0x4800
     f1c:	09000001 	stmdbeq	r0, {r0}
     f20:	000001d3 	ldrdeq	r0, [r0], -r3
     f24:	0001a70a 	andeq	sl, r1, sl, lsl #14
     f28:	00ab0a00 	adceq	r0, fp, r0, lsl #20
     f2c:	06000000 	streq	r0, [r0], -r0
     f30:	00000ad7 	ldrdeq	r0, [r0], -r7
     f34:	28570738 	ldmdacs	r7, {r3, r4, r5, r8, r9, sl}^
     f38:	07000002 	streq	r0, [r0, -r2]
     f3c:	00000914 	andeq	r0, r0, r4, lsl r9
     f40:	01b25907 			; <UNDEFINED> instruction: 0x01b25907
     f44:	07000000 	streq	r0, [r0, -r0]
     f48:	00000938 	andeq	r0, r0, r8, lsr r9
     f4c:	01105a07 	tsteq	r0, r7, lsl #20
     f50:	07040000 	streq	r0, [r4, -r0]
     f54:	00001c5d 	andeq	r1, r0, sp, asr ip
     f58:	01105b07 	tsteq	r0, r7, lsl #22
     f5c:	07180000 	ldreq	r0, [r8, -r0]
     f60:	00000b9f 	muleq	r0, pc, fp	; <UNPREDICTABLE>
     f64:	00ab5c07 	adceq	r5, fp, r7, lsl #24
     f68:	072c0000 	streq	r0, [ip, -r0]!
     f6c:	0000090c 	andeq	r0, r0, ip, lsl #18
     f70:	00ab5d07 	adceq	r5, fp, r7, lsl #26
     f74:	07300000 	ldreq	r0, [r0, -r0]!
     f78:	00000a13 	andeq	r0, r0, r3, lsl sl
     f7c:	00885e07 	addeq	r5, r8, r7, lsl #28
     f80:	00340000 	eorseq	r0, r4, r0
     f84:	000aa203 	andeq	sl, sl, r3, lsl #4
     f88:	d35f0700 	cmple	pc, #0, 14
     f8c:	0b000001 	bleq	f98 <_Min_Stack_Size+0xb98>
     f90:	00000b2e 	andeq	r0, r0, lr, lsr #22
     f94:	01015701 	tsteq	r1, r1, lsl #14
     f98:	0000024d 	andeq	r0, r0, sp, asr #4
     f9c:	000b9f0c 	andeq	r9, fp, ip, lsl #30
     fa0:	01590100 	cmpeq	r9, r0, lsl #2
     fa4:	000000ab 	andeq	r0, r0, fp, lsr #1
     fa8:	080e0d00 	stmdaeq	lr, {r8, sl, fp}
     fac:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
     fb0:	000000a0 	andeq	r0, r0, r0, lsr #1
     fb4:	0800056c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl}
     fb8:	000000cc 	andeq	r0, r0, ip, asr #1
     fbc:	038a9c01 	orreq	r9, sl, #256	; 0x100
     fc0:	3f0e0000 	svccc	0x000e0000
     fc4:	01000008 	tsteq	r0, r8
     fc8:	0001b289 	andeq	fp, r1, r9, lsl #5
     fcc:	00016500 	andeq	r6, r1, r0, lsl #10
     fd0:	0b9f0e00 	bleq	fe7c47d8 <_estack+0xde7947d8>
     fd4:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
     fd8:	000000ab 	andeq	r0, r0, fp, lsr #1
     fdc:	00000191 	muleq	r0, r1, r1
     fe0:	00090c0e 	andeq	r0, r9, lr, lsl #24
     fe4:	ab890100 	blge	fe2413ec <_estack+0xde2113ec>
     fe8:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
     fec:	0f000001 	svceq	0x00000001
     ff0:	00000d72 	andeq	r0, r0, r2, ror sp
     ff4:	00a08b01 	adceq	r8, r0, r1, lsl #22
     ff8:	02140000 	andseq	r0, r4, #0
     ffc:	330f0000 	movwcc	r0, #61440	; 0xf000
    1000:	01000008 	tsteq	r0, r8
    1004:	00038a8c 	andeq	r8, r3, ip, lsl #21
    1008:	00023300 	andeq	r3, r2, r0, lsl #6
    100c:	02331000 	eorseq	r1, r3, #0
    1010:	05d80000 	ldrbeq	r0, [r8]
    1014:	00d00800 	sbcseq	r0, r0, r0, lsl #16
    1018:	97010000 	strls	r0, [r1, -r0]
    101c:	0000033d 	andeq	r0, r0, sp, lsr r3
    1020:	0000d011 	andeq	sp, r0, r1, lsl r0
    1024:	02401200 	subeq	r1, r0, #0, 4
    1028:	027d0000 	rsbseq	r0, sp, #0
    102c:	e6130000 	ldr	r0, [r3], -r0
    1030:	c9080005 	stmdbgt	r8, {r0, r2}
    1034:	e9000006 	stmdb	r0, {r1, r2}
    1038:	14000002 	strne	r0, [r0], #-2
    103c:	03055001 	movweq	r5, #20481	; 0x5001
    1040:	20000088 	andcs	r0, r0, r8, lsl #1
    1044:	05ec1300 	strbeq	r1, [ip, #768]!	; 0x300
    1048:	06c90800 	strbeq	r0, [r9], r0, lsl #16
    104c:	03000000 	movweq	r0, #0
    1050:	01140000 	tsteq	r4, r0
    1054:	9c030550 	cfstr32ls	mvfx0, [r3], {80}	; 0x50
    1058:	00200000 	eoreq	r0, r0, r0
    105c:	0005f213 	andeq	pc, r5, r3, lsl r2	; <UNPREDICTABLE>
    1060:	0006c908 	andeq	ip, r6, r8, lsl #18
    1064:	00031400 	andeq	r1, r3, r0, lsl #8
    1068:	50011400 	andpl	r1, r1, r0, lsl #8
    106c:	00007902 	andeq	r7, r0, r2, lsl #18
    1070:	0005f813 	andeq	pc, r5, r3, lsl r8	; <UNPREDICTABLE>
    1074:	0006c908 	andeq	ip, r6, r8, lsl #18
    1078:	00032800 	andeq	r2, r3, r0, lsl #16
    107c:	50011400 	andpl	r1, r1, r0, lsl #8
    1080:	00007502 	andeq	r7, r0, r2, lsl #10
    1084:	0005fe15 	andeq	pc, r5, r5, lsl lr	; <UNPREDICTABLE>
    1088:	0006c908 	andeq	ip, r6, r8, lsl #18
    108c:	50011400 	andpl	r1, r1, r0, lsl #8
    1090:	00500305 	subseq	r0, r0, r5, lsl #6
    1094:	00002000 	andeq	r2, r0, r0
    1098:	057c1300 	ldrbeq	r1, [ip, #-768]!	; 0x300
    109c:	06db0800 	ldrbeq	r0, [fp], r0, lsl #16
    10a0:	03510000 	cmpeq	r1, #0
    10a4:	01140000 	tsteq	r4, r0
    10a8:	38080250 	stmdacc	r8, {r4, r6, r9}
    10ac:	05a41300 	streq	r1, [r4, #768]!	; 0x300
    10b0:	06f10800 	ldrbteq	r0, [r1], r0, lsl #16
    10b4:	03650000 	cmneq	r5, #0
    10b8:	01140000 	tsteq	r4, r0
    10bc:	00750250 	rsbseq	r0, r5, r0, asr r2
    10c0:	05ac1300 	streq	r1, [ip, #768]!	; 0x300
    10c4:	06f10800 	ldrbteq	r0, [r1], r0, lsl #16
    10c8:	03790000 	cmneq	r9, #0
    10cc:	01140000 	tsteq	r4, r0
    10d0:	18740250 	ldmdane	r4!, {r4, r6, r9}^
    10d4:	05d21500 	ldrbeq	r1, [r2, #1280]	; 0x500
    10d8:	07080800 	streq	r0, [r8, -r0, lsl #16]
    10dc:	01140000 	tsteq	r4, r0
    10e0:	00750251 	rsbseq	r0, r5, r1, asr r2
    10e4:	04080000 	streq	r0, [r8], #-0
    10e8:	00000228 	andeq	r0, r0, r8, lsr #4
    10ec:	000a6216 	andeq	r6, sl, r6, lsl r2
    10f0:	38c20100 	stmiacc	r2, {r8}^
    10f4:	4c080006 	stcmi	0, cr0, [r8], {6}
    10f8:	01000000 	mrseq	r0, (UNDEF: 0)
    10fc:	0003f69c 	muleq	r3, ip, r6
    1100:	09510e00 	ldmdbeq	r1, {r9, sl, fp}^
    1104:	c2010000 	andgt	r0, r1, #0
    1108:	000000b6 	strheq	r0, [r0], -r6
    110c:	000002a9 	andeq	r0, r0, r9, lsr #5
    1110:	0008020e 	andeq	r0, r8, lr, lsl #4
    1114:	f6c20100 			; <UNDEFINED> instruction: 0xf6c20100
    1118:	ca000003 	bgt	112c <_Min_Stack_Size+0xd2c>
    111c:	0f000002 	svceq	0x00000002
    1120:	00000bcf 	andeq	r0, r0, pc, asr #23
    1124:	00b6c401 	adcseq	ip, r6, r1, lsl #8
    1128:	031a0000 	tsteq	sl, #0
    112c:	4c170000 	ldcmi	0, cr0, [r7], {-0}
    1130:	1f080006 	svcne	0x00080006
    1134:	17000007 	strne	r0, [r0, -r7]
    1138:	08000662 	stmdaeq	r0, {r1, r5, r6, r9, sl}
    113c:	00000735 	andeq	r0, r0, r5, lsr r7
    1140:	00067218 	andeq	r7, r6, r8, lsl r2
    1144:	00073508 	andeq	r3, r7, r8, lsl #10
    1148:	50011400 	andpl	r1, r1, r0, lsl #8
    114c:	5101f303 	tstpl	r1, r3, lsl #6
    1150:	04080000 	streq	r0, [r8], #-0
    1154:	0000018e 	andeq	r0, r0, lr, lsl #3
    1158:	0009d519 	andeq	sp, r9, r9, lsl r5
    115c:	01e80100 	mvneq	r0, r0, lsl #2
    1160:	00000416 	andeq	r0, r0, r6, lsl r4
    1164:	09281b1a 	stmdbeq	r8!, {r1, r3, r4, r8, r9, fp, ip}
    1168:	ef010000 	svc	0x00010000
    116c:	0000038a 	andeq	r0, r0, sl, lsl #7
    1170:	1f190000 	svcne	0x00190000
    1174:	01000008 	tsteq	r0, r8
    1178:	043d01ff 	ldrteq	r0, [sp], #-511	; 0x1ff
    117c:	b10c0000 	mrslt	r0, (UNDEF: 12)
    1180:	01000009 	tsteq	r0, r9
    1184:	038a0101 	orreq	r0, sl, #1073741824	; 0x40000000
    1188:	0c1a0000 	ldceq	0, cr0, [sl], {-0}
    118c:	0000095f 	andeq	r0, r0, pc, asr r9
    1190:	f6010c01 			; <UNDEFINED> instruction: 0xf6010c01
    1194:	00000003 	andeq	r0, r0, r3
    1198:	0a001c00 	beq	81a0 <_Min_Stack_Size+0x7da0>
    119c:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    11a0:	00068401 	andeq	r8, r6, r1, lsl #8
    11a4:	0001b808 	andeq	fp, r1, r8, lsl #16
    11a8:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
    11ac:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    11b0:	000003fc 	strdeq	r0, [r0], -ip
    11b4:	08000688 	stmdaeq	r0, {r3, r7, r9, sl}
    11b8:	00000052 	andeq	r0, r0, r2, asr r0
    11bc:	cb013c01 	blgt	501c8 <_Min_Stack_Size+0x4fdc8>
    11c0:	11000004 	tstne	r0, r4
    11c4:	000000e8 	andeq	r0, r0, r8, ror #1
    11c8:	00040912 	andeq	r0, r4, r2, lsl r9
    11cc:	00033800 	andeq	r3, r3, r0, lsl #16
    11d0:	069c1700 	ldreq	r1, [ip], r0, lsl #14
    11d4:	074c0800 	strbeq	r0, [ip, -r0, lsl #16]
    11d8:	aa130000 	bge	4c11e0 <_Min_Stack_Size+0x4c0de0>
    11dc:	1f080006 	svcne	0x00080006
    11e0:	92000007 	andls	r0, r0, #7
    11e4:	14000004 	strne	r0, [r0], #-4
    11e8:	74025001 	strvc	r5, [r2], #-1
    11ec:	b2130018 	andslt	r0, r3, #24
    11f0:	57080006 	strpl	r0, [r8, -r6]
    11f4:	a5000007 	strge	r0, [r0, #-7]
    11f8:	14000004 	strne	r0, [r0], #-4
    11fc:	30015001 	andcc	r5, r1, r1
    1200:	06b81300 	ldrteq	r1, [r8], r0, lsl #6
    1204:	071f0800 	ldreq	r0, [pc, -r0, lsl #16]
    1208:	04b90000 	ldrteq	r0, [r9], #0
    120c:	01140000 	tsteq	r4, r0
    1210:	00770250 	rsbseq	r0, r7, r0, asr r2
    1214:	06d21500 	ldrbeq	r1, [r2], r0, lsl #10
    1218:	07080800 	streq	r0, [r8, -r0, lsl #16]
    121c:	01140000 	tsteq	r4, r0
    1220:	00770251 	rsbseq	r0, r7, r1, asr r2
    1224:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1228:	00000416 	andeq	r0, r0, r6, lsl r4
    122c:	080006da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl}
    1230:	00000100 	andeq	r0, r0, r0, lsl #2
    1234:	5f013f01 	svcpl	0x00013f01
    1238:	11000005 	tstne	r0, r5
    123c:	00000100 	andeq	r0, r0, r0, lsl #2
    1240:	00042212 	andeq	r2, r4, r2, lsl r2
    1244:	00034b00 	andeq	r4, r3, r0, lsl #22
    1248:	01201f00 	teqeq	r0, r0, lsl #30
    124c:	05000000 	streq	r0, [r0, #-0]
    1250:	2f120000 	svccs	0x00120000
    1254:	69000004 	stmdbvs	r0, {r2}
    1258:	00000003 	andeq	r0, r0, r3
    125c:	0006de17 	andeq	sp, r6, r7, lsl lr
    1260:	00076808 	andeq	r6, r7, r8, lsl #16
    1264:	073e1700 	ldreq	r1, [lr, -r0, lsl #14]!
    1268:	074c0800 	strbeq	r0, [ip, -r0, lsl #16]
    126c:	44130000 	ldrmi	r0, [r3], #-0
    1270:	1f080007 	svcne	0x00080007
    1274:	26000007 	strcs	r0, [r0], -r7
    1278:	14000005 	strne	r0, [r0], #-5
    127c:	74025001 	strvc	r5, [r2], #-1
    1280:	52130000 	andspl	r0, r3, #0
    1284:	1f080007 	svcne	0x00080007
    1288:	3a000007 	bcc	12ac <_Min_Stack_Size+0xeac>
    128c:	14000005 	strne	r0, [r0], #-5
    1290:	7a025001 	bvc	9529c <_Min_Stack_Size+0x94e9c>
    1294:	58130018 	ldmdapl	r3, {r3, r4}
    1298:	57080007 	strpl	r0, [r8, -r7]
    129c:	4d000007 	stcmi	0, cr0, [r0, #-28]	; 0xffffffe4
    12a0:	14000005 	strne	r0, [r0], #-5
    12a4:	30015001 	andcc	r5, r1, r1
    12a8:	07741500 	ldrbeq	r1, [r4, -r0, lsl #10]!
    12ac:	07080800 	streq	r0, [r8, -r0, lsl #16]
    12b0:	01140000 	tsteq	r4, r0
    12b4:	00740251 	rsbseq	r0, r4, r1, asr r2
    12b8:	11000000 	mrsne	r0, (UNDEF: 0)
    12bc:	00000140 	andeq	r0, r0, r0, asr #2
    12c0:	00099420 	andeq	r9, r9, r0, lsr #8
    12c4:	014e0100 	mrseq	r0, (UNDEF: 94)
    12c8:	00000576 	andeq	r0, r0, r6, ror r5
    12cc:	0000038b 	andeq	r0, r0, fp, lsl #7
    12d0:	f6210000 			; <UNDEFINED> instruction: 0xf6210000
    12d4:	22000003 	andcs	r0, r0, #3
    12d8:	000008ab 	andeq	r0, r0, fp, lsr #17
    12dc:	a0016b01 	andge	r6, r1, r1, lsl #22
    12e0:	3c000000 	stccc	0, cr0, [r0], {-0}
    12e4:	34080008 	strcc	r0, [r8], #-8
    12e8:	01000000 	mrseq	r0, (UNDEF: 0)
    12ec:	0005f39c 	muleq	r5, ip, r3
    12f0:	08022300 	stmdaeq	r2, {r8, r9, sp}
    12f4:	6b010000 	blvs	412fc <_Min_Stack_Size+0x40efc>
    12f8:	0005f301 	andeq	pc, r5, r1, lsl #6
    12fc:	00039e00 	andeq	r9, r3, r0, lsl #28
    1300:	09282000 	stmdbeq	r8!, {sp}
    1304:	6d010000 	stcvs	0, cr0, [r1, #-0]
    1308:	00038a01 	andeq	r8, r3, r1, lsl #20
    130c:	0003bf00 	andeq	fp, r3, r0, lsl #30
    1310:	0d722000 	ldcleq	0, cr2, [r2, #-0]
    1314:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1318:	0000a001 	andeq	sl, r0, r1
    131c:	0003d200 	andeq	sp, r3, r0, lsl #4
    1320:	084c1300 	stmdaeq	ip, {r8, r9, ip}^
    1324:	071f0800 	ldreq	r0, [pc, -r0, lsl #16]
    1328:	05d90000 	ldrbeq	r0, [r9]
    132c:	01140000 	tsteq	r4, r0
    1330:	00750250 	rsbseq	r0, r5, r0, asr r2
    1334:	08541500 	ldmdaeq	r4, {r8, sl, ip}^
    1338:	07080800 	streq	r0, [r8, -r0, lsl #16]
    133c:	01140000 	tsteq	r4, r0
    1340:	00750251 	rsbseq	r0, r5, r1, asr r2
    1344:	05500114 	ldrbeq	r0, [r0, #-276]	; 0x114
    1348:	00005003 	andeq	r5, r0, r3
    134c:	08000020 	stmdaeq	r0, {r5}
    1350:	0005f904 	andeq	pc, r5, r4, lsl #18
    1354:	018e2100 	orreq	r2, lr, r0, lsl #2
    1358:	8e240000 	cdphi	0, 2, cr0, cr4, cr0, {0}
    135c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1360:	25000006 	strcs	r0, [r0, #-6]
    1364:	000001a0 	andeq	r0, r0, r0, lsr #3
    1368:	4a260001 	bmi	981374 <_Min_Stack_Size+0x980f74>
    136c:	0100000b 	tsteq	r0, fp
    1370:	0005fe50 	andeq	pc, r5, r0, asr lr	; <UNPREDICTABLE>
    1374:	88030500 	stmdahi	r3, {r8, sl}
    1378:	26200000 	strtcs	r0, [r0], -r0
    137c:	00000af0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1380:	018e5101 	orreq	r5, lr, r1, lsl #2
    1384:	03050000 	movweq	r0, #20480	; 0x5000
    1388:	20000038 	andcs	r0, r0, r8, lsr r0
    138c:	000b0726 	andeq	r0, fp, r6, lsr #14
    1390:	8e520100 	rdfhis	f0, f2, f0
    1394:	05000001 	streq	r0, [r0, #-1]
    1398:	00006803 	andeq	r6, r0, r3, lsl #16
    139c:	084f2620 	stmdaeq	pc, {r5, r9, sl, sp}^	; <UNPREDICTABLE>
    13a0:	53010000 	movwpl	r0, #4096	; 0x1000
    13a4:	000003f6 	strdeq	r0, [r0], -r6
    13a8:	00840305 	addeq	r0, r4, r5, lsl #6
    13ac:	a9262000 	stmdbge	r6!, {sp}
    13b0:	0100000a 	tsteq	r0, sl
    13b4:	0003f654 	andeq	pc, r3, r4, asr r6	; <UNPREDICTABLE>
    13b8:	b4030500 	strlt	r0, [r3], #-1280	; 0x500
    13bc:	26200000 	strtcs	r0, [r0], -r0
    13c0:	00000a47 	andeq	r0, r0, r7, asr #20
    13c4:	018e5501 	orreq	r5, lr, r1, lsl #10
    13c8:	03050000 	movweq	r0, #20480	; 0x5000
    13cc:	20000050 	andcs	r0, r0, r0, asr r0
    13d0:	000b8326 	andeq	r8, fp, r6, lsr #6
    13d4:	ab590100 	blge	16417dc <_Min_Stack_Size+0x16413dc>
    13d8:	05000000 	streq	r0, [r0, #-0]
    13dc:	0000b003 	andeq	fp, r0, r3
    13e0:	0b6f2620 	bleq	1bcac68 <_Min_Stack_Size+0x1bca868>
    13e4:	5a010000 	bpl	413ec <_Min_Stack_Size+0x40fec>
    13e8:	000000b6 	strheq	r0, [r0], -r6
    13ec:	007c0305 	rsbseq	r0, ip, r5, lsl #6
    13f0:	60262000 	eorvs	r2, r6, r0
    13f4:	0100000b 	tsteq	r0, fp
    13f8:	0000b65a 	andeq	fp, r0, sl, asr r6
    13fc:	80030500 	andhi	r0, r3, r0, lsl #10
    1400:	26200000 	strtcs	r0, [r0], -r0
    1404:	00000a1b 	andeq	r0, r0, fp, lsl sl
    1408:	00b65a01 	adcseq	r5, r6, r1, lsl #20
    140c:	03050000 	movweq	r0, #20480	; 0x5000
    1410:	2000004c 	andcs	r0, r0, ip, asr #32
    1414:	000a2827 	andeq	r2, sl, r7, lsr #16
    1418:	8a580100 	bhi	1601820 <_Min_Stack_Size+0x1601420>
    141c:	05000003 	streq	r0, [r0, #-3]
    1420:	00006403 	andeq	r6, r0, r3, lsl #8
    1424:	087d2820 	ldmdaeq	sp!, {r5, fp, sp}^
    1428:	50060000 	andpl	r0, r6, r0
    142c:	0006db01 	andeq	sp, r6, r1, lsl #22
    1430:	05760a00 	ldrbeq	r0, [r6, #-2560]!	; 0xa00
    1434:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    1438:	00000bc2 	andeq	r0, r0, r2, asr #23
    143c:	9e017108 	adflss	f7, f1, #0.0
    1440:	f1000000 	cps	#0
    1444:	0a000006 	beq	1464 <_Min_Stack_Size+0x1064>
    1448:	00000028 	andeq	r0, r0, r8, lsr #32
    144c:	0bdb2800 	bleq	ff6cb454 <_estack+0xdf69b454>
    1450:	5b060000 	blpl	181458 <_Min_Stack_Size+0x181058>
    1454:	00070301 	andeq	r0, r7, r1, lsl #6
    1458:	07030a00 	streq	r0, [r3, -r0, lsl #20]
    145c:	21000000 	mrscs	r0, (UNDEF: 0)
    1460:	00000188 	andeq	r0, r0, r8, lsl #3
    1464:	000ac828 	andeq	ip, sl, r8, lsr #16
    1468:	017d0600 	cmneq	sp, r0, lsl #12
    146c:	0000071f 	andeq	r0, r0, pc, lsl r7
    1470:	0005760a 	andeq	r7, r5, sl, lsl #12
    1474:	07030a00 	streq	r0, [r3, -r0, lsl #20]
    1478:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    147c:	00000a8e 	andeq	r0, r0, lr, lsl #21
    1480:	ab018c06 	blge	644a0 <_Min_Stack_Size+0x640a0>
    1484:	35000000 	strcc	r0, [r0, #-0]
    1488:	0a000007 	beq	14ac <_Min_Stack_Size+0x10ac>
    148c:	00000703 	andeq	r0, r0, r3, lsl #14
    1490:	088d2800 	stmeq	sp, {fp, sp}
    1494:	68060000 	stmdavs	r6, {}	; <UNPREDICTABLE>
    1498:	00074c01 	andeq	r4, r7, r1, lsl #24
    149c:	05760a00 	ldrbeq	r0, [r6, #-2560]!	; 0xa00
    14a0:	030a0000 	movweq	r0, #40960	; 0xa000
    14a4:	00000007 	andeq	r0, r0, r7
    14a8:	0008662a 	andeq	r6, r8, sl, lsr #12
    14ac:	937d0500 	cmnls	sp, #0, 10
    14b0:	2b000000 	blcs	14b8 <_Min_Stack_Size+0x10b8>
    14b4:	00000966 	andeq	r0, r0, r6, ror #18
    14b8:	07687e05 	strbeq	r7, [r8, -r5, lsl #28]!
    14bc:	930a0000 	movwls	r0, #40960	; 0xa000
    14c0:	00000000 	andeq	r0, r0, r0
    14c4:	0009b82c 	andeq	fp, r9, ip, lsr #16
    14c8:	04140900 	ldreq	r0, [r4], #-2304	; 0x900
    14cc:	000000b6 	strheq	r0, [r0], -r6
    14d0:	000ab000 	andeq	fp, sl, r0
    14d4:	5d000400 	cfstrspl	mvf0, [r0, #-0]
    14d8:	04000006 	streq	r0, [r0], #-6
    14dc:	0002f301 	andeq	pc, r2, r1, lsl #6
    14e0:	0d0b0100 	stfeqs	f0, [fp, #-0]
    14e4:	01f80000 	mvnseq	r0, r0
    14e8:	00000000 	andeq	r0, r0, r0
    14ec:	0b2f0000 	bleq	bc14f4 <_Min_Stack_Size+0xbc10f4>
    14f0:	99020000 	stmdbls	r2, {}	; <UNPREDICTABLE>
    14f4:	02000008 	andeq	r0, r0, #8
    14f8:	00002cd4 	ldrdeq	r2, [r0], -r4
    14fc:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1500:	00000222 	andeq	r0, r0, r2, lsr #4
    1504:	69050404 	stmdbvs	r5, {r2, sl}
    1508:	0300746e 	movweq	r7, #1134	; 0x46e
    150c:	02020601 	andeq	r0, r2, #1048576	; 0x100000
    1510:	01030000 	mrseq	r0, (UNDEF: 3)
    1514:	00020008 	andeq	r0, r2, r8
    1518:	05020300 	streq	r0, [r2, #-768]	; 0x300
    151c:	00000038 	andeq	r0, r0, r8, lsr r0
    1520:	aa070203 	bge	1c1d34 <_Min_Stack_Size+0x1c1934>
    1524:	03000002 	movweq	r0, #2
    1528:	015d0504 	cmpeq	sp, r4, lsl #10
    152c:	89020000 	stmdbhi	r2, {}	; <UNPREDICTABLE>
    1530:	03000000 	movweq	r0, #0
    1534:	00006841 	andeq	r6, r0, r1, asr #16
    1538:	07040300 	streq	r0, [r4, -r0, lsl #6]
    153c:	0000021d 	andeq	r0, r0, sp, lsl r2
    1540:	58050803 	stmdapl	r5, {r0, r1, fp}
    1544:	03000001 	movweq	r0, #1
    1548:	02180708 	andseq	r0, r8, #8, 14	; 0x200000
    154c:	04030000 	streq	r0, [r3], #-0
    1550:	00004207 	andeq	r4, r0, r7, lsl #4
    1554:	03040500 	movweq	r0, #17664	; 0x4500
    1558:	02090801 	andeq	r0, r9, #65536	; 0x10000
    155c:	8b020000 	blhi	81564 <_Min_Stack_Size+0x81164>
    1560:	04000000 	streq	r0, [r0], #-0
    1564:	00005d42 	andeq	r5, r0, r2, asr #26
    1568:	03ef0200 	mvneq	r0, #0, 4
    156c:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
    1570:	00000056 	andeq	r0, r0, r6, asr r0
    1574:	0003ee02 	andeq	lr, r3, r2, lsl #28
    1578:	685f0500 	ldmdavs	pc, {r8, sl}^	; <UNPREDICTABLE>
    157c:	02000000 	andeq	r0, r0, #0
    1580:	00000166 	andeq	r0, r0, r6, ror #2
    1584:	008d6505 	addeq	r6, sp, r5, lsl #10
    1588:	ca060000 	bgt	181590 <_Min_Stack_Size+0x181190>
    158c:	14000009 	strne	r0, [r0], #-9
    1590:	01028806 	tsteq	r2, r6, lsl #16
    1594:	a6070000 	strge	r0, [r7], -r0
    1598:	06000009 	streq	r0, [r0], -r9
    159c:	0000ae8a 	andeq	sl, r0, sl, lsl #29
    15a0:	9b070000 	blls	1c15a8 <_Min_Stack_Size+0x1c11a8>
    15a4:	0600000a 	streq	r0, [r0], -sl
    15a8:	0001028b 	andeq	r0, r1, fp, lsl #5
    15ac:	a0070400 	andge	r0, r7, r0, lsl #8
    15b0:	06000008 	streq	r0, [r0], -r8
    15b4:	0001028c 	andeq	r0, r1, ip, lsl #5
    15b8:	49070800 	stmdbmi	r7, {fp}
    15bc:	06000009 	streq	r0, [r0], -r9
    15c0:	0000848d 	andeq	r8, r0, sp, lsl #9
    15c4:	3b070c00 	blcc	1c45cc <_Min_Stack_Size+0x1c41cc>
    15c8:	0600000a 	streq	r0, [r0], -sl
    15cc:	0000848e 	andeq	r8, r0, lr, lsl #9
    15d0:	08001000 	stmdaeq	r0, {ip}
    15d4:	0000b904 	andeq	fp, r0, r4, lsl #18
    15d8:	09890200 	stmibeq	r9, {r9}
    15dc:	90060000 	andls	r0, r6, r0
    15e0:	000000b9 	strheq	r0, [r0], -r9
    15e4:	000bb206 	andeq	fp, fp, r6, lsl #4
    15e8:	92060c00 	andls	r0, r6, #0, 24
    15ec:	00000144 	andeq	r0, r0, r4, asr #2
    15f0:	0009a607 	andeq	sl, r9, r7, lsl #12
    15f4:	ae940600 	cdpge	6, 9, cr0, cr4, cr0, {0}
    15f8:	00000000 	andeq	r0, r0, r0
    15fc:	000a9b07 	andeq	r9, sl, r7, lsl #22
    1600:	02950600 	addseq	r0, r5, #0, 12
    1604:	04000001 	streq	r0, [r0], #-1
    1608:	0008a007 	andeq	sl, r8, r7
    160c:	02960600 	addseq	r0, r6, #0, 12
    1610:	08000001 	stmdaeq	r0, {r0}
    1614:	09850200 	stmibeq	r5, {r9}
    1618:	98060000 	stmdals	r6, {}	; <UNPREDICTABLE>
    161c:	00000113 	andeq	r0, r0, r3, lsl r1
    1620:	0009a006 	andeq	sl, r9, r6
    1624:	9d061400 	cfstrsls	mvf1, [r6, #-0]
    1628:	00000180 	andeq	r0, r0, r0, lsl #3
    162c:	000b1e07 	andeq	r1, fp, r7, lsl #28
    1630:	a39f0600 	orrsge	r0, pc, #0, 12
    1634:	00000000 	andeq	r0, r0, r0
    1638:	000baa07 	andeq	sl, fp, r7, lsl #20
    163c:	80a00600 	adchi	r0, r0, r0, lsl #12
    1640:	04000001 	streq	r0, [r0], #-1
    1644:	000f4407 	andeq	r4, pc, r7, lsl #8
    1648:	44a10600 	strtmi	r0, [r1], #1536	; 0x600
    164c:	08000001 	stmdaeq	r0, {r0}
    1650:	08040800 	stmdaeq	r4, {fp}
    1654:	02000001 	andeq	r0, r0, #1
    1658:	0000097e 	andeq	r0, r0, lr, ror r9
    165c:	014fa206 	cmpeq	pc, r6, lsl #4
    1660:	a0020000 	andge	r0, r2, r0
    1664:	0700000c 	streq	r0, [r0, -ip]
    1668:	00008476 	andeq	r8, r0, r6, ror r4
    166c:	0c360200 	lfmeq	f0, 4, [r6], #-0
    1670:	80070000 	andhi	r0, r7, r0
    1674:	000000ae 	andeq	r0, r0, lr, lsr #1
    1678:	000ce206 	andeq	lr, ip, r6, lsl #4
    167c:	6d011c00 	stcvs	12, cr1, [r1, #-0]
    1680:	000001d8 	ldrdeq	r0, [r0], -r8
    1684:	000eb607 	andeq	fp, lr, r7, lsl #12
    1688:	9c6f0100 	stflse	f0, [pc], #-0	; 1690 <_Min_Stack_Size+0x1290>
    168c:	00000001 	andeq	r0, r0, r1
    1690:	000c6c07 	andeq	r6, ip, r7, lsl #24
    1694:	86700100 	ldrbthi	r0, [r0], -r0, lsl #2
    1698:	04000001 	streq	r0, [r0], #-1
    169c:	000e0207 	andeq	r0, lr, r7, lsl #4
    16a0:	a3730100 	cmnge	r3, #0, 2
    16a4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    16a8:	0c5e0200 	lfmeq	f0, 2, [lr], {-0}
    16ac:	76010000 	strvc	r0, [r1], -r0
    16b0:	000001a7 	andeq	r0, r0, r7, lsr #3
    16b4:	000dcc09 	andeq	ip, sp, r9, lsl #24
    16b8:	024c0100 	subeq	r0, ip, #0, 2
    16bc:	00000098 	muleq	r0, r8, r0
    16c0:	00022501 	andeq	r2, r2, r1, lsl #10
    16c4:	0cf80a00 	vldmiaeq	r8!, {s1-s0}
    16c8:	4c010000 	stcmi	0, cr0, [r1], {-0}
    16cc:	00022502 	andeq	r2, r2, r2, lsl #10
    16d0:	0d840a00 	vstreq	s0, [r4]
    16d4:	4c010000 	stcmi	0, cr0, [r1], {-0}
    16d8:	00022502 	andeq	r2, r2, r2, lsl #10
    16dc:	0f210a00 	svceq	0x00210a00
    16e0:	4c010000 	stcmi	0, cr0, [r1], {-0}
    16e4:	00022a02 	andeq	r2, r2, r2, lsl #20
    16e8:	0f310b00 	svceq	0x00310b00
    16ec:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    16f0:	00009802 	andeq	r9, r0, r2, lsl #16
    16f4:	9c0c0000 	stcls	0, cr0, [ip], {-0}
    16f8:	0c000001 	stceq	0, cr0, [r0], {1}
    16fc:	00000098 	muleq	r0, r8, r0
    1700:	000f4d0d 	andeq	r4, pc, sp, lsl #26
    1704:	91860100 	orrls	r0, r6, r0, lsl #2
    1708:	70000001 	andvc	r0, r0, r1
    170c:	1a080008 	bne	201734 <_Min_Stack_Size+0x201334>
    1710:	01000000 	mrseq	r0, (UNDEF: 0)
    1714:	00027b9c 	muleq	r2, ip, fp
    1718:	0cc60e00 	stcleq	14, cr0, [r6], {0}
    171c:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    1720:	0000027b 	andeq	r0, r0, fp, ror r2
    1724:	000003fd 	strdeq	r0, [r0], -sp
    1728:	0008780f 	andeq	r7, r8, pc, lsl #16
    172c:	0009df08 	andeq	sp, r9, r8, lsl #30
    1730:	00026a00 	andeq	r6, r2, r0, lsl #20
    1734:	50011000 	andpl	r1, r1, r0
    1738:	11004c01 	tstne	r0, r1, lsl #24
    173c:	08000886 	stmdaeq	r0, {r1, r2, r7, fp}
    1740:	000009f5 	strdeq	r0, [r0], -r5
    1744:	02500110 	subseq	r0, r0, #16, 2
    1748:	00000474 	andeq	r0, r0, r4, ror r4
    174c:	01d80408 	bicseq	r0, r8, r8, lsl #8
    1750:	ee120000 	cdp	0, 1, cr0, cr2, cr0, {0}
    1754:	0100000d 	tsteq	r0, sp
    1758:	019c010b 	orrseq	r0, ip, fp, lsl #2
    175c:	088c0000 	stmeq	ip, {}	; <UNPREDICTABLE>
    1760:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    1764:	9c010000 	stcls	0, cr0, [r1], {-0}
    1768:	0000047e 	andeq	r0, r0, lr, ror r4
    176c:	000c1413 	andeq	r1, ip, r3, lsl r4
    1770:	010b0100 	mrseq	r0, (UNDEF: 27)
    1774:	00000191 	muleq	r0, r1, r1
    1778:	0000041b 	andeq	r0, r0, fp, lsl r4
    177c:	000d8413 	andeq	r8, sp, r3, lsl r4
    1780:	010b0100 	mrseq	r0, (UNDEF: 27)
    1784:	00000225 	andeq	r0, r0, r5, lsr #4
    1788:	00000465 	andeq	r0, r0, r5, ror #8
    178c:	000de113 	andeq	lr, sp, r3, lsl r1
    1790:	010b0100 	mrseq	r0, (UNDEF: 27)
    1794:	0000022a 	andeq	r0, r0, sl, lsr #4
    1798:	000004ef 	andeq	r0, r0, pc, ror #9
    179c:	000f2113 	andeq	r2, pc, r3, lsl r1	; <UNPREDICTABLE>
    17a0:	010b0100 	mrseq	r0, (UNDEF: 27)
    17a4:	0000022a 	andeq	r0, r0, sl, lsr #4
    17a8:	00000539 	andeq	r0, r0, r9, lsr r5
    17ac:	0017a013 	andseq	sl, r7, r3, lsl r0
    17b0:	010b0100 	mrseq	r0, (UNDEF: 27)
    17b4:	000000ae 	andeq	r0, r0, lr, lsr #1
    17b8:	00000583 	andeq	r0, r0, r3, lsl #11
    17bc:	000cc614 	andeq	ip, ip, r4, lsl r6
    17c0:	010d0100 	mrseq	r0, (UNDEF: 29)
    17c4:	0000027b 	andeq	r0, r0, fp, ror r2
    17c8:	000005d2 	ldrdeq	r0, [r0], -r2
    17cc:	000d7114 	andeq	r7, sp, r4, lsl r1
    17d0:	010e0100 	mrseq	r0, (UNDEF: 30)
    17d4:	0000019c 	muleq	r0, ip, r1
    17d8:	0000061c 	andeq	r0, r0, ip, lsl r6
    17dc:	000c8114 	andeq	r8, ip, r4, lsl r1
    17e0:	010e0100 	mrseq	r0, (UNDEF: 30)
    17e4:	0000019c 	muleq	r0, ip, r1
    17e8:	00000672 	andeq	r0, r0, r2, ror r6
    17ec:	000f310b 	andeq	r3, pc, fp, lsl #2
    17f0:	010f0100 	mrseq	r0, (UNDEF: 31)
    17f4:	00000098 	muleq	r0, r8, r0
    17f8:	000c4214 	andeq	r4, ip, r4, lsl r2
    17fc:	010f0100 	mrseq	r0, (UNDEF: 31)
    1800:	00000098 	muleq	r0, r8, r0
    1804:	000006fd 	strdeq	r0, [r0], -sp
    1808:	000c8f15 	andeq	r8, ip, r5, lsl pc
    180c:	01100100 	tsteq	r0, r0, lsl #2
    1810:	00000098 	muleq	r0, r8, r0
    1814:	01801600 	orreq	r1, r0, r0, lsl #12
    1818:	03df0000 	bicseq	r0, pc, #0
    181c:	f8140000 			; <UNDEFINED> instruction: 0xf8140000
    1820:	0100000c 	tsteq	r0, ip
    1824:	0225011e 	eoreq	r0, r5, #-2147483641	; 0x80000007
    1828:	07100000 	ldreq	r0, [r0, -r0]
    182c:	e3170000 	tst	r7, #0
    1830:	bc000001 	stclt	0, cr0, [r0], {1}
    1834:	a0080008 	andge	r0, r8, r8
    1838:	01000001 	tsteq	r0, r1
    183c:	039c0121 	orrseq	r0, ip, #1073741832	; 0x40000008
    1840:	0c180000 	ldceq	0, cr0, [r8], {-0}
    1844:	44000002 	strmi	r0, [r0], #-2
    1848:	18000007 	stmdane	r0, {r0, r1, r2}
    184c:	00000200 	andeq	r0, r0, r0, lsl #4
    1850:	00000762 	andeq	r0, r0, r2, ror #14
    1854:	0001f418 	andeq	pc, r1, r8, lsl r4	; <UNPREDICTABLE>
    1858:	00071000 	andeq	r1, r7, r0
    185c:	01a01900 	lsleq	r1, r0, #18
    1860:	181a0000 	ldmdane	sl, {}	; <UNPREDICTABLE>
    1864:	c0000002 	andgt	r0, r0, r2
    1868:	00000007 	andeq	r0, r0, r7
    186c:	091a1100 	ldmdbeq	sl, {r8, ip}
    1870:	0a0c0800 	beq	303878 <_Min_Stack_Size+0x303478>
    1874:	01100000 	tsteq	r0, r0
    1878:	00790252 	rsbseq	r0, r9, r2, asr r2
    187c:	28510110 	ldmdacs	r1, {r4, r8}^
    1880:	40244644 	eormi	r4, r4, r4, asr #12
    1884:	00772446 	rsbseq	r2, r7, r6, asr #8
    1888:	01282e30 	teqeq	r8, r0, lsr lr
    188c:	40131600 	andsmi	r1, r3, r0, lsl #12
    1890:	77302444 	ldrvc	r2, [r0, -r4, asr #8]!
    1894:	282e3000 	stmdacs	lr!, {ip, sp}
    1898:	13160001 	tstne	r6, #1
    189c:	2e300078 	mrccs	0, 1, r0, cr0, cr8, {3}
    18a0:	16000128 	strne	r0, [r0], -r8, lsr #2
    18a4:	21007413 	tstcs	r0, r3, lsl r4
    18a8:	02500110 	subseq	r0, r0, #16, 2
    18ac:	00000476 	andeq	r0, r0, r6, ror r4
    18b0:	0001e317 	andeq	lr, r1, r7, lsl r3
    18b4:	00093800 	andeq	r3, r9, r0, lsl #16
    18b8:	0001b808 	andeq	fp, r1, r8, lsl #16
    18bc:	017b0100 	cmneq	fp, r0, lsl #2
    18c0:	0000041a 	andeq	r0, r0, sl, lsl r4
    18c4:	00020c1b 	andeq	r0, r2, fp, lsl ip
    18c8:	18580100 	ldmdane	r8, {r8}^
    18cc:	00000200 	andeq	r0, r0, r0, lsl #4
    18d0:	000007f8 	strdeq	r0, [r0], -r8
    18d4:	0001f41b 	andeq	pc, r1, fp, lsl r4	; <UNPREDICTABLE>
    18d8:	19550100 	ldmdbne	r5, {r8}^
    18dc:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    18e0:	0002181a 	andeq	r1, r2, sl, lsl r8
    18e4:	00082400 	andeq	r2, r8, r0, lsl #8
    18e8:	1c000000 	stcne	0, cr0, [r0], {-0}
    18ec:	080008a8 	stmdaeq	r0, {r3, r5, r7, fp}
    18f0:	00000a2d 	andeq	r0, r0, sp, lsr #20
    18f4:	0008ae1c 	andeq	sl, r8, ip, lsl lr
    18f8:	000a3808 	andeq	r3, sl, r8, lsl #16
    18fc:	08ba1c00 	ldmeq	sl!, {sl, fp, ip}
    1900:	0a440800 	beq	1103908 <_Min_Stack_Size+0x1103508>
    1904:	d41c0000 	ldrle	r0, [ip], #-0
    1908:	2d080008 	stccs	0, cr0, [r8, #-32]	; 0xffffffe0
    190c:	1c00000a 	stcne	0, cr0, [r0], {10}
    1910:	080008da 	stmdaeq	r0, {r1, r3, r4, r6, r7, fp}
    1914:	00000a2d 	andeq	r0, r0, sp, lsr #20
    1918:	0008ee1c 	andeq	lr, r8, ip, lsl lr
    191c:	000a4c08 	andeq	r4, sl, r8, lsl #24
    1920:	091e1c00 	ldmdbeq	lr, {sl, fp, ip}
    1924:	0a4c0800 	beq	130392c <_Min_Stack_Size+0x130352c>
    1928:	241c0000 	ldrcs	r0, [ip], #-0
    192c:	58080009 	stmdapl	r8, {r0, r3}
    1930:	1c00000a 	stcne	0, cr0, [r0], {10}
    1934:	08000928 	stmdaeq	r0, {r3, r5, r8, fp}
    1938:	00000a5f 	andeq	r0, r0, pc, asr sl
    193c:	0009361c 	andeq	r3, r9, ip, lsl r6
    1940:	000a6b08 	andeq	r6, sl, r8, lsl #22
    1944:	094e1c00 	stmdbeq	lr, {sl, fp, ip}^
    1948:	0a720800 	beq	1c83950 <_Min_Stack_Size+0x1c83550>
    194c:	12000000 	andne	r0, r0, #0
    1950:	00000e15 	andeq	r0, r0, r5, lsl lr
    1954:	9c019b01 	stcls	11, cr9, [r1], {1}
    1958:	5c000001 	stcpl	0, cr0, [r0], {1}
    195c:	26080009 	strcs	r0, [r8], -r9
    1960:	01000000 	mrseq	r0, (UNDEF: 0)
    1964:	0004f29c 	muleq	r4, ip, r2
    1968:	0c141300 	ldceq	3, cr1, [r4], {-0}
    196c:	9b010000 	blls	41974 <_Min_Stack_Size+0x41574>
    1970:	00019101 	andeq	r9, r1, r1, lsl #2
    1974:	00085000 	andeq	r5, r8, r0
    1978:	0e551300 	cdpeq	3, 5, cr1, cr5, cr0, {0}
    197c:	9b010000 	blls	41984 <_Min_Stack_Size+0x41584>
    1980:	00022501 	andeq	r2, r2, r1, lsl #10
    1984:	00088400 	andeq	r8, r8, r0, lsl #8
    1988:	0cc61400 	cfstrdeq	mvd1, [r6], {0}
    198c:	9d010000 	stcls	0, cr0, [r1, #-0]
    1990:	00027b01 	andeq	r7, r2, r1, lsl #22
    1994:	0008c600 	andeq	ip, r8, r0, lsl #12
    1998:	0d711d00 	ldcleq	13, cr1, [r1, #-0]
    199c:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    19a0:	00019c01 	andeq	r9, r1, r1, lsl #24
    19a4:	1c550100 	ldfnee	f0, [r5], {-0}
    19a8:	0800096c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp}
    19ac:	00000a2d 	andeq	r0, r0, sp, lsr #20
    19b0:	0009721c 	andeq	r7, r9, ip, lsl r2
    19b4:	000a6b08 	andeq	r6, sl, r8, lsl #22
    19b8:	097e1c00 	ldmdbeq	lr!, {sl, fp, ip}^
    19bc:	0a720800 	beq	1c839c4 <_Min_Stack_Size+0x1c835c4>
    19c0:	12000000 	andne	r0, r0, #0
    19c4:	00000e2a 	andeq	r0, r0, sl, lsr #28
    19c8:	9c01b501 	cfstr32ls	mvfx11, [r1], {1}
    19cc:	84000001 	strhi	r0, [r0], #-1
    19d0:	26080009 	strcs	r0, [r8], -r9
    19d4:	01000000 	mrseq	r0, (UNDEF: 0)
    19d8:	0005769c 	muleq	r5, ip, r6
    19dc:	0c141300 	ldceq	3, cr1, [r4], {-0}
    19e0:	b5010000 	strlt	r0, [r1, #-0]
    19e4:	00019101 	andeq	r9, r1, r1, lsl #2
    19e8:	0008fa00 	andeq	pc, r8, r0, lsl #20
    19ec:	0e551300 	cdpeq	3, 5, cr1, cr5, cr0, {0}
    19f0:	b5010000 	strlt	r0, [r1, #-0]
    19f4:	00022501 	andeq	r2, r2, r1, lsl #10
    19f8:	00092e00 	andeq	r2, r9, r0, lsl #28
    19fc:	0e7a1400 	cdpeq	4, 7, cr1, cr10, cr0, {0}
    1a00:	b7010000 	strlt	r0, [r1, -r0]
    1a04:	0000a301 	andeq	sl, r0, r1, lsl #6
    1a08:	00097000 	andeq	r7, r9, r0
    1a0c:	0cc61400 	cfstrdeq	mvd1, [r6], {0}
    1a10:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    1a14:	00027b01 	andeq	r7, r2, r1, lsl #22
    1a18:	00098300 	andeq	r8, r9, r0, lsl #6
    1a1c:	0d711d00 	ldcleq	13, cr1, [r1, #-0]
    1a20:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    1a24:	00019c01 	andeq	r9, r1, r1, lsl #24
    1a28:	1c540100 	ldfnee	f0, [r4], {-0}
    1a2c:	08000994 	stmdaeq	r0, {r2, r4, r7, r8, fp}
    1a30:	00000a2d 	andeq	r0, r0, sp, lsr #20
    1a34:	00099a1c 	andeq	r9, r9, ip, lsl sl
    1a38:	000a2d08 	andeq	r2, sl, r8, lsl #26
    1a3c:	09a61c00 	stmibeq	r6!, {sl, fp, ip}
    1a40:	0a790800 	beq	1e43a48 <_Min_Stack_Size+0x1e43648>
    1a44:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1a48:	00000cb3 			; <UNDEFINED> instruction: 0x00000cb3
    1a4c:	9c01d001 	stcls	0, cr13, [r1], {1}
    1a50:	01000001 	tsteq	r0, r1
    1a54:	0000060c 	andeq	r0, r0, ip, lsl #12
    1a58:	000c140a 	andeq	r1, ip, sl, lsl #8
    1a5c:	01d00100 	bicseq	r0, r0, r0, lsl #2
    1a60:	00000191 	muleq	r0, r1, r1
    1a64:	000ee70a 	andeq	lr, lr, sl, lsl #14
    1a68:	01d00100 	bicseq	r0, r0, r0, lsl #2
    1a6c:	00000225 	andeq	r0, r0, r5, lsr #4
    1a70:	000bef0b 	andeq	lr, fp, fp, lsl #30
    1a74:	01d20100 	bicseq	r0, r2, r0, lsl #2
    1a78:	00000180 	andeq	r0, r0, r0, lsl #3
    1a7c:	000a9b0b 	andeq	r9, sl, fp, lsl #22
    1a80:	01d20100 	bicseq	r0, r2, r0, lsl #2
    1a84:	00000180 	andeq	r0, r0, r0, lsl #3
    1a88:	000f430b 	andeq	r4, pc, fp, lsl #6
    1a8c:	01d30100 	bicseq	r0, r3, r0, lsl #2
    1a90:	0000060c 	andeq	r0, r0, ip, lsl #12
    1a94:	000e9d0b 	andeq	r9, lr, fp, lsl #26
    1a98:	01d40100 	bicseq	r0, r4, r0, lsl #2
    1a9c:	00000617 	andeq	r0, r0, r7, lsl r6
    1aa0:	000e550b 	andeq	r5, lr, fp, lsl #10
    1aa4:	01d50100 	bicseq	r0, r5, r0, lsl #2
    1aa8:	0000019c 	muleq	r0, ip, r1
    1aac:	000daf0b 	andeq	sl, sp, fp, lsl #30
    1ab0:	01d50100 	bicseq	r0, r5, r0, lsl #2
    1ab4:	0000019c 	muleq	r0, ip, r1
    1ab8:	000c810b 	andeq	r8, ip, fp, lsl #2
    1abc:	01d50100 	bicseq	r0, r5, r0, lsl #2
    1ac0:	0000019c 	muleq	r0, ip, r1
    1ac4:	000cc60b 	andeq	ip, ip, fp, lsl #12
    1ac8:	01d60100 	bicseq	r0, r6, r0, lsl #2
    1acc:	0000027b 	andeq	r0, r0, fp, ror r2
    1ad0:	000e910b 	andeq	r9, lr, fp, lsl #2
    1ad4:	01d70100 	bicseq	r0, r7, r0, lsl #2
    1ad8:	00000098 	muleq	r0, r8, r0
    1adc:	12040800 	andne	r0, r4, #0, 16
    1ae0:	0c000006 	stceq	0, cr0, [r0], {6}
    1ae4:	00000108 	andeq	r0, r0, r8, lsl #2
    1ae8:	01860408 	orreq	r0, r6, r8, lsl #8
    1aec:	761f0000 	ldrvc	r0, [pc], -r0
    1af0:	ac000005 	stcge	0, cr0, [r0], {5}
    1af4:	70080009 	andvc	r0, r8, r9
    1af8:	01000000 	mrseq	r0, (UNDEF: 0)
    1afc:	0006b69c 	muleq	r6, ip, r6
    1b00:	05871800 	streq	r1, [r7, #2048]	; 0x800
    1b04:	09b70000 	ldmibeq	r7!, {}	; <UNPREDICTABLE>
    1b08:	93180000 	tstls	r8, #0
    1b0c:	eb000005 	bl	1b28 <_Min_Stack_Size+0x1728>
    1b10:	1a000009 	bne	1b3c <_Min_Stack_Size+0x173c>
    1b14:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
    1b18:	00000a2d 	andeq	r0, r0, sp, lsr #20
    1b1c:	0005ab1a 	andeq	sl, r5, sl, lsl fp
    1b20:	000a6c00 	andeq	r6, sl, r0, lsl #24
    1b24:	05b72000 	ldreq	r2, [r7, #0]!
    1b28:	56010000 	strpl	r0, [r1], -r0
    1b2c:	0005c31a 	andeq	ip, r5, sl, lsl r3
    1b30:	000a8a00 	andeq	r8, sl, r0, lsl #20
    1b34:	05cf1a00 	strbeq	r1, [pc, #2560]	; 253c <_Min_Stack_Size+0x213c>
    1b38:	0aac0000 	beq	feb01b40 <_estack+0xdead1b40>
    1b3c:	db1a0000 	blle	681b44 <_Min_Stack_Size+0x681744>
    1b40:	d7000005 	strle	r0, [r0, -r5]
    1b44:	1a00000a 	bne	1b74 <_Min_Stack_Size+0x1774>
    1b48:	000005e7 	andeq	r0, r0, r7, ror #11
    1b4c:	00000b00 	andeq	r0, r0, r0, lsl #22
    1b50:	0005f31a 	andeq	pc, r5, sl, lsl r3	; <UNPREDICTABLE>
    1b54:	000b3f00 	andeq	r3, fp, r0, lsl #30
    1b58:	05ff1a00 	ldrbeq	r1, [pc, #2560]!	; 2560 <_Min_Stack_Size+0x2160>
    1b5c:	0b730000 	bleq	1cc1b64 <_Min_Stack_Size+0x1cc1764>
    1b60:	bc1c0000 	ldclt	0, cr0, [ip], {-0}
    1b64:	2d080009 	stccs	0, cr0, [r8, #-36]	; 0xffffffdc
    1b68:	1c00000a 	stcne	0, cr0, [r0], {10}
    1b6c:	080009c2 	stmdaeq	r0, {r1, r6, r7, r8, fp}
    1b70:	00000a44 	andeq	r0, r0, r4, asr #20
    1b74:	0009e61c 	andeq	lr, r9, ip, lsl r6
    1b78:	000a8a08 	andeq	r8, sl, r8, lsl #20
    1b7c:	0a121c00 	beq	488b84 <_Min_Stack_Size+0x488784>
    1b80:	0a4c0800 	beq	1303b88 <_Min_Stack_Size+0x1303788>
    1b84:	0d000000 	stceq	0, cr0, [r0, #-0]
    1b88:	00000cd2 	ldrdeq	r0, [r0], -r2
    1b8c:	019c9a01 	orrseq	r9, ip, r1, lsl #20
    1b90:	0a1c0000 	beq	701b98 <_Min_Stack_Size+0x701798>
    1b94:	00b20800 	adcseq	r0, r2, r0, lsl #16
    1b98:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b9c:	0000081d 	andeq	r0, r0, sp, lsl r8
    1ba0:	000c1421 	andeq	r1, ip, r1, lsr #8
    1ba4:	919a0100 	orrsls	r0, sl, r0, lsl #2
    1ba8:	ab000001 	blge	1bb4 <_Min_Stack_Size+0x17b4>
    1bac:	2100000b 	tstcs	r0, fp
    1bb0:	00000ee7 	andeq	r0, r0, r7, ror #29
    1bb4:	02259a01 	eoreq	r9, r5, #4096	; 0x1000
    1bb8:	0bf50000 	bleq	ffd41bc0 <_estack+0xdfd11bc0>
    1bbc:	84210000 	strthi	r0, [r1], #-0
    1bc0:	0100000d 	tsteq	r0, sp
    1bc4:	0002259a 	muleq	r2, sl, r5
    1bc8:	000c8a00 	andeq	r8, ip, r0, lsl #20
    1bcc:	17a02100 	strne	r2, [r0, r0, lsl #2]!
    1bd0:	9a010000 	bls	41bd8 <_Min_Stack_Size+0x417d8>
    1bd4:	000000ae 	andeq	r0, r0, lr, lsr #1
    1bd8:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1bdc:	000f0e0e 	andeq	r0, pc, lr, lsl #28
    1be0:	9c9c0100 	ldflss	f0, [ip], {0}
    1be4:	5d000001 	stcpl	0, cr0, [r0, #-4]
    1be8:	0e00000d 	cdpeq	0, 0, cr0, cr0, cr13, {0}
    1bec:	00000d71 	andeq	r0, r0, r1, ror sp
    1bf0:	019c9c01 	orrseq	r9, ip, r1, lsl #24
    1bf4:	0d7b0000 	ldcleq	0, cr0, [fp, #-0]
    1bf8:	c60e0000 	strgt	r0, [lr], -r0
    1bfc:	0100000c 	tsteq	r0, ip
    1c00:	00027b9d 	muleq	r2, sp, fp
    1c04:	000dc600 	andeq	ip, sp, r0, lsl #12
    1c08:	0c420e00 	mcrreq	14, 0, r0, r2, cr0
    1c0c:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    1c10:	00000098 	muleq	r0, r8, r0
    1c14:	00000e10 	andeq	r0, r0, r0, lsl lr
    1c18:	000c8f0e 	andeq	r8, ip, lr, lsl #30
    1c1c:	989f0100 	ldmls	pc, {r8}	; <UNPREDICTABLE>
    1c20:	23000000 	movwcs	r0, #0
    1c24:	1c00000e 	stcne	0, cr0, [r0], {14}
    1c28:	08000a32 	stmdaeq	r0, {r1, r4, r5, r9, fp}
    1c2c:	00000a2d 	andeq	r0, r0, sp, lsr #20
    1c30:	000a381c 	andeq	r3, sl, ip, lsl r8
    1c34:	000a3808 	andeq	r3, sl, r8, lsl #16
    1c38:	0a421c00 	beq	1088c40 <_Min_Stack_Size+0x1088840>
    1c3c:	0a440800 	beq	1103c44 <_Min_Stack_Size+0x1103844>
    1c40:	4e0f0000 	cdpmi	0, 0, cr0, cr15, cr0, {0}
    1c44:	7608000a 	strvc	r0, [r8], -sl
    1c48:	8c000005 	stchi	0, cr0, [r0], {5}
    1c4c:	10000007 	andne	r0, r0, r7
    1c50:	f3035101 	vrhadd.u8	d5, d3, d1
    1c54:	01105101 	tsteq	r0, r1, lsl #2
    1c58:	00740250 	rsbseq	r0, r4, r0, asr r2
    1c5c:	0a5c1c00 	beq	1708c64 <_Min_Stack_Size+0x1708864>
    1c60:	0a4c0800 	beq	1303c68 <_Min_Stack_Size+0x1303868>
    1c64:	641c0000 	ldrvs	r0, [ip], #-0
    1c68:	2d08000a 	stccs	0, cr0, [r8, #-40]	; 0xffffffd8
    1c6c:	1c00000a 	stcne	0, cr0, [r0], {10}
    1c70:	08000a6a 	stmdaeq	r0, {r1, r3, r5, r6, r9, fp}
    1c74:	00000a44 	andeq	r0, r0, r4, asr #20
    1c78:	000a760f 	andeq	r7, sl, pc, lsl #12
    1c7c:	00057608 	andeq	r7, r5, r8, lsl #12
    1c80:	0007c200 	andeq	ip, r7, r0, lsl #4
    1c84:	51011000 	mrspl	r1, (UNDEF: 1)
    1c88:	5101f303 	tstpl	r1, r3, lsl #6
    1c8c:	02500110 	subseq	r0, r0, #16, 2
    1c90:	0f000074 	svceq	0x00000074
    1c94:	08000a8e 	stmdaeq	r0, {r1, r2, r3, r7, r9, fp}
    1c98:	00000a0c 	andeq	r0, r0, ip, lsl #20
    1c9c:	000007e6 	andeq	r0, r0, r6, ror #15
    1ca0:	02520110 	subseq	r0, r2, #16, 2
    1ca4:	01100077 	tsteq	r0, r7, ror r0
    1ca8:	00750651 	rsbseq	r0, r5, r1, asr r6
    1cac:	21244644 	teqcs	r4, r4, asr #12
    1cb0:	02500110 	subseq	r0, r0, #16, 2
    1cb4:	1c000474 	cfstrsne	mvf0, [r0], {116}	; 0x74
    1cb8:	08000a92 	stmdaeq	r0, {r1, r4, r7, r9, fp}
    1cbc:	00000a4c 	andeq	r0, r0, ip, asr #20
    1cc0:	000a981c 	andeq	r9, sl, ip, lsl r8
    1cc4:	000a5808 	andeq	r5, sl, r8, lsl #16
    1cc8:	0a9c1c00 	beq	fe708cd0 <_estack+0xde6d8cd0>
    1ccc:	0a5f0800 	beq	17c3cd4 <_Min_Stack_Size+0x17c38d4>
    1cd0:	b21c0000 	andslt	r0, ip, #0
    1cd4:	2d08000a 	stccs	0, cr0, [r8, #-40]	; 0xffffffd8
    1cd8:	1c00000a 	stcne	0, cr0, [r0], {10}
    1cdc:	08000ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp}
    1ce0:	00000a6b 	andeq	r0, r0, fp, ror #20
    1ce4:	000acc1c 	andeq	ip, sl, ip, lsl ip
    1ce8:	000a7208 	andeq	r7, sl, r8, lsl #4
    1cec:	c2220000 	eorgt	r0, r2, #0
    1cf0:	0100000e 	tsteq	r0, lr
    1cf4:	0ad0022d 	beq	ff4025b0 <_estack+0xdf3d25b0>
    1cf8:	00400800 	subeq	r0, r0, r0, lsl #16
    1cfc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d00:	000008a8 	andeq	r0, r0, r8, lsr #17
    1d04:	000c1413 	andeq	r1, ip, r3, lsl r4
    1d08:	022d0100 	eoreq	r0, sp, #0, 2
    1d0c:	00000191 	muleq	r0, r1, r1
    1d10:	00000e4f 	andeq	r0, r0, pc, asr #28
    1d14:	000cc614 	andeq	ip, ip, r4, lsl r6
    1d18:	022f0100 	eoreq	r0, pc, #0, 2
    1d1c:	0000027b 	andeq	r0, r0, fp, ror r2
    1d20:	00000e86 	andeq	r0, r0, r6, lsl #29
    1d24:	000c6b14 	andeq	r6, ip, r4, lsl fp
    1d28:	02300100 	eorseq	r0, r0, #0, 2
    1d2c:	000008a8 	andeq	r0, r0, r8, lsr #17
    1d30:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
    1d34:	000ad81c 	andeq	sp, sl, ip, lsl r8
    1d38:	000a4408 	andeq	r4, sl, r8, lsl #8
    1d3c:	0af60f00 	beq	ffd85944 <_estack+0xdfd55944>
    1d40:	0a8a0800 	beq	fe283d48 <_estack+0xde253d48>
    1d44:	08810000 	stmeq	r1, {}	; <UNPREDICTABLE>
    1d48:	01100000 	tsteq	r0, r0
    1d4c:	45400351 	strbmi	r0, [r0, #-849]	; 0x351
    1d50:	020f0024 	andeq	r0, pc, #36	; 0x24
    1d54:	a508000b 	strge	r0, [r8, #-11]
    1d58:	9500000a 	strls	r0, [r0, #-10]
    1d5c:	10000008 	andne	r0, r0, r8
    1d60:	74025001 	strvc	r5, [r2], #-1
    1d64:	0a230000 	beq	8c1d6c <_Min_Stack_Size+0x8c196c>
    1d68:	4c08000b 	stcmi	0, cr0, [r8], {11}
    1d6c:	1c00000a 	stcne	0, cr0, [r0], {10}
    1d70:	08000b0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, fp}
    1d74:	00000a2d 	andeq	r0, r0, sp, lsr #20
    1d78:	ae040800 	cdpge	8, 0, cr0, cr4, cr0, {0}
    1d7c:	0c000008 	stceq	0, cr0, [r0], {8}
    1d80:	00000186 	andeq	r0, r0, r6, lsl #3
    1d84:	000d9422 	andeq	r9, sp, r2, lsr #8
    1d88:	02460100 	subeq	r0, r6, #0, 2
    1d8c:	08000b10 	stmdaeq	r0, {r4, r8, r9, fp}
    1d90:	0000007a 	andeq	r0, r0, sl, ror r0
    1d94:	09919c01 	ldmibeq	r1, {r0, sl, fp, ip, pc}
    1d98:	bf130000 	svclt	0x00130000
    1d9c:	0100000d 	tsteq	r0, sp
    1da0:	00840246 	addeq	r0, r4, r6, asr #4
    1da4:	0efc0000 	cdpeq	0, 15, cr0, cr12, cr0, {0}
    1da8:	52130000 	andspl	r0, r3, #0
    1dac:	0100000c 	tsteq	r0, ip
    1db0:	09910246 	ldmibeq	r1, {r1, r2, r6, r9}
    1db4:	0f570000 	svceq	0x00570000
    1db8:	76240000 	strtvc	r0, [r4], -r0
    1dbc:	12000005 	andne	r0, r0, #5
    1dc0:	d008000b 	andle	r0, r8, fp
    1dc4:	01000001 	tsteq	r0, r1
    1dc8:	93180248 	tstls	r8, #72, 4	; 0x80000004
    1dcc:	99000005 	stmdbls	r0, {r0, r2}
    1dd0:	1800000f 	stmdane	r0, {r0, r1, r2, r3}
    1dd4:	00000587 	andeq	r0, r0, r7, lsl #11
    1dd8:	00000fdb 	ldrdeq	r0, [r0], -fp
    1ddc:	0001d019 	andeq	sp, r1, r9, lsl r0
    1de0:	059f1a00 	ldreq	r1, [pc, #2560]	; 27e8 <_Min_Stack_Size+0x23e8>
    1de4:	10360000 	eorsne	r0, r6, r0
    1de8:	ab1a0000 	blge	681df0 <_Min_Stack_Size+0x6819f0>
    1dec:	75000005 	strvc	r0, [r0, #-5]
    1df0:	1a000010 	bne	1e38 <_Min_Stack_Size+0x1a38>
    1df4:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    1df8:	00001093 	muleq	r0, r3, r0
    1dfc:	0005c31a 	andeq	ip, r5, sl, lsl r3
    1e00:	0010d100 	andseq	sp, r0, r0, lsl #2
    1e04:	05cf1a00 	strbeq	r1, [pc, #2560]	; 280c <_Min_Stack_Size+0x240c>
    1e08:	11200000 	teqne	r0, r0
    1e0c:	db1a0000 	blle	681e14 <_Min_Stack_Size+0x681a14>
    1e10:	59000005 	stmdbpl	r0, {r0, r2}
    1e14:	1a000011 	bne	1e60 <_Min_Stack_Size+0x1a60>
    1e18:	000005e7 	andeq	r0, r0, r7, ror #11
    1e1c:	00001182 	andeq	r1, r0, r2, lsl #3
    1e20:	0005f31a 	andeq	pc, r5, sl, lsl r3	; <UNPREDICTABLE>
    1e24:	000fdb00 	andeq	sp, pc, r0, lsl #22
    1e28:	05ff1a00 	ldrbeq	r1, [pc, #2560]!	; 2830 <_Min_Stack_Size+0x2430>
    1e2c:	11c10000 	bicne	r0, r1, r0
    1e30:	201c0000 	andscs	r0, ip, r0
    1e34:	2d08000b 	stccs	0, cr0, [r8, #-44]	; 0xffffffd4
    1e38:	1c00000a 	stcne	0, cr0, [r0], {10}
    1e3c:	08000b26 	stmdaeq	r0, {r1, r2, r5, r8, r9, fp}
    1e40:	00000a44 	andeq	r0, r0, r4, asr #20
    1e44:	000b4a1c 	andeq	r4, fp, ip, lsl sl
    1e48:	000a8a08 	andeq	r8, sl, r8, lsl #20
    1e4c:	0b7a2300 	bleq	1e8aa54 <_Min_Stack_Size+0x1e8a654>
    1e50:	0a4c0800 	beq	1303e58 <_Min_Stack_Size+0x1303a58>
    1e54:	8a230000 	bhi	8c1e5c <_Min_Stack_Size+0x8c1a5c>
    1e58:	4c08000b 	stcmi	0, cr0, [r8], {11}
    1e5c:	0000000a 	andeq	r0, r0, sl
    1e60:	8d0c0000 	stchi	0, cr0, [ip, #-0]
    1e64:	12000000 	andne	r0, r0, #0
    1e68:	00000c20 	andeq	r0, r0, r0, lsr #24
    1e6c:	a3027d01 	movwge	r7, #11521	; 0x2d01
    1e70:	8c000000 	stchi	0, cr0, [r0], {-0}
    1e74:	0608000b 	streq	r0, [r8], -fp
    1e78:	01000000 	mrseq	r0, (UNDEF: 0)
    1e7c:	0009df9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    1e80:	0c141300 	ldceq	3, cr1, [r4], {-0}
    1e84:	7d010000 	stcvc	0, cr0, [r1, #-0]
    1e88:	00008402 	andeq	r8, r0, r2, lsl #8
    1e8c:	0011f900 	andseq	pc, r1, r0, lsl #18
    1e90:	0d721d00 	ldcleq	13, cr1, [r2, #-0]
    1e94:	7f010000 	svcvc	0x00010000
    1e98:	0000a302 	andeq	sl, r0, r2, lsl #6
    1e9c:	14500100 	ldrbne	r0, [r0], #-256	; 0x100
    1ea0:	00000cc6 	andeq	r0, r0, r6, asr #25
    1ea4:	7b028001 	blvc	a1eb0 <_Min_Stack_Size+0xa1ab0>
    1ea8:	f9000002 			; <UNDEFINED> instruction: 0xf9000002
    1eac:	00000011 	andeq	r0, r0, r1, lsl r0
    1eb0:	000bc225 	andeq	ip, fp, r5, lsr #4
    1eb4:	01710800 	cmneq	r1, r0, lsl #16
    1eb8:	00000084 	andeq	r0, r0, r4, lsl #1
    1ebc:	000009f5 	strdeq	r0, [r0], -r5
    1ec0:	00002126 	andeq	r2, r0, r6, lsr #2
    1ec4:	7d270000 	stcvc	0, cr0, [r7, #-0]
    1ec8:	06000008 	streq	r0, [r0], -r8
    1ecc:	0a070150 	beq	1c2414 <_Min_Stack_Size+0x1c2014>
    1ed0:	07260000 	streq	r0, [r6, -r0]!
    1ed4:	0000000a 	andeq	r0, r0, sl
    1ed8:	0006170c 	andeq	r1, r6, ip, lsl #14
    1edc:	0d522700 	ldcleq	7, cr2, [r2, #-0]
    1ee0:	86090000 	strhi	r0, [r9], -r0
    1ee4:	000a2805 	andeq	r2, sl, r5, lsl #16
    1ee8:	06172600 	ldreq	r2, [r7], -r0, lsl #12
    1eec:	28260000 	stmdacs	r6!, {}	; <UNPREDICTABLE>
    1ef0:	2600000a 	strcs	r0, [r0], -sl
    1ef4:	00000a28 	andeq	r0, r0, r8, lsr #20
    1ef8:	00ae0c00 	adceq	r0, lr, r0, lsl #24
    1efc:	66280000 	strtvs	r0, [r8], -r0
    1f00:	05000008 	streq	r0, [r0, #-8]
    1f04:	00008d7d 	andeq	r8, r0, sp, ror sp
    1f08:	0e632900 	cdpeq	9, 6, cr2, cr3, cr0, {0}
    1f0c:	da090000 	ble	241f14 <_Min_Stack_Size+0x241b14>
    1f10:	00009805 	andeq	r9, r0, r5, lsl #16
    1f14:	0efe2a00 	vmoveq.f32	s5, #224	; 0xe0
    1f18:	cf090000 	svcgt	0x00090000
    1f1c:	0e462903 	cdpeq	9, 4, cr2, cr6, cr3, {0}
    1f20:	05090000 	streq	r0, [r9, #-0]
    1f24:	00009804 	andeq	r9, r0, r4, lsl #16
    1f28:	0ef32b00 	vmoveq.f64	d18, #48	; 0x30
    1f2c:	72050000 	andvc	r0, r5, #0
    1f30:	000bfa29 	andeq	pc, fp, r9, lsr #20
    1f34:	05be0900 	ldreq	r0, [lr, #2304]!	; 0x900
    1f38:	000000ae 	andeq	r0, r0, lr, lsr #1
    1f3c:	000ed42b 	andeq	sp, lr, fp, lsr #8
    1f40:	2b7b0500 	blcs	1ec3348 <_Min_Stack_Size+0x1ec2f48>
    1f44:	00000ea4 	andeq	r0, r0, r4, lsr #29
    1f48:	662c7c05 	strtvs	r7, [ip], -r5, lsl #24
    1f4c:	05000009 	streq	r0, [r0, #-9]
    1f50:	000a8a7e 	andeq	r8, sl, lr, ror sl
    1f54:	008d2600 	addeq	r2, sp, r0, lsl #12
    1f58:	25000000 	strcs	r0, [r0, #-0]
    1f5c:	00000f5f 	andeq	r0, r0, pc, asr pc
    1f60:	9805ae09 	stmdals	r5, {r0, r3, r9, sl, fp, sp, pc}
    1f64:	a5000000 	strge	r0, [r0, #-0]
    1f68:	2600000a 	strcs	r0, [r0], -sl
    1f6c:	00000180 	andeq	r0, r0, r0, lsl #3
    1f70:	000a2826 	andeq	r2, sl, r6, lsr #16
    1f74:	7a2d0000 	bvc	b41f7c <_Min_Stack_Size+0xb41b7c>
    1f78:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    1f7c:	84260172 	strthi	r0, [r6], #-370	; 0x172
    1f80:	00000000 	andeq	r0, r0, r0
    1f84:	00029000 	andeq	r9, r2, r0
    1f88:	f3000400 	vshl.u8	d0, d0, d0
    1f8c:	04000008 	streq	r0, [r0], #-8
    1f90:	0002f301 	andeq	pc, r2, r1, lsl #6
    1f94:	0fc20100 	svceq	0x00c20100
    1f98:	02480000 	subeq	r0, r8, #0
    1f9c:	00000000 	andeq	r0, r0, r0
    1fa0:	0ef00000 	cdpeq	0, 15, cr0, cr0, cr0, {0}
    1fa4:	04020000 	streq	r0, [r2], #-0
    1fa8:	00022207 	andeq	r2, r2, r7, lsl #4
    1fac:	05040300 	streq	r0, [r4, #-768]	; 0x300
    1fb0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1fb4:	02060102 	andeq	r0, r6, #-2147483648	; 0x80000000
    1fb8:	02000002 	andeq	r0, r0, #2
    1fbc:	02000801 	andeq	r0, r0, #65536	; 0x10000
    1fc0:	02020000 	andeq	r0, r2, #0
    1fc4:	00003805 	andeq	r3, r0, r5, lsl #16
    1fc8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1fcc:	000002aa 	andeq	r0, r0, sl, lsr #5
    1fd0:	5d050402 	cfstrspl	mvf0, [r5, #-8]
    1fd4:	04000001 	streq	r0, [r0], #-1
    1fd8:	00000089 	andeq	r0, r0, r9, lsl #1
    1fdc:	005d4102 	subseq	r4, sp, r2, lsl #2
    1fe0:	04020000 	streq	r0, [r2], #-0
    1fe4:	00021d07 	andeq	r1, r2, r7, lsl #26
    1fe8:	05080200 	streq	r0, [r8, #-512]	; 0x200
    1fec:	00000158 	andeq	r0, r0, r8, asr r1
    1ff0:	18070802 	stmdane	r7, {r1, fp}
    1ff4:	02000002 	andeq	r0, r0, #2
    1ff8:	00420704 	subeq	r0, r2, r4, lsl #14
    1ffc:	04050000 	streq	r0, [r5], #-0
    2000:	09080102 	stmdbeq	r8, {r1, r8}
    2004:	04000002 	streq	r0, [r0], #-2
    2008:	0000008b 	andeq	r0, r0, fp, lsl #1
    200c:	00524203 	subseq	r4, r2, r3, lsl #4
    2010:	ee040000 	cdp	0, 0, cr0, cr4, cr0, {0}
    2014:	04000003 	streq	r0, [r0], #-3
    2018:	00005d5f 	andeq	r5, r0, pc, asr sp
    201c:	01660400 	cmneq	r6, r0, lsl #8
    2020:	65040000 	strvs	r0, [r4, #-0]
    2024:	00000082 	andeq	r0, r0, r2, lsl #1
    2028:	0009ca06 	andeq	ip, r9, r6, lsl #20
    202c:	88051400 	stmdahi	r5, {sl, ip}
    2030:	000000ec 	andeq	r0, r0, ip, ror #1
    2034:	0009a607 	andeq	sl, r9, r7, lsl #12
    2038:	988a0500 	stmls	sl, {r8, sl}
    203c:	00000000 	andeq	r0, r0, r0
    2040:	000a9b07 	andeq	r9, sl, r7, lsl #22
    2044:	ec8b0500 	cfstr32	mvfx0, [fp], {0}
    2048:	04000000 	streq	r0, [r0], #-0
    204c:	0008a007 	andeq	sl, r8, r7
    2050:	ec8c0500 	cfstr32	mvfx0, [ip], {0}
    2054:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2058:	00094907 	andeq	r4, r9, r7, lsl #18
    205c:	798d0500 	stmibvc	sp, {r8, sl}
    2060:	0c000000 	stceq	0, cr0, [r0], {-0}
    2064:	000a3b07 	andeq	r3, sl, r7, lsl #22
    2068:	798e0500 	stmibvc	lr, {r8, sl}
    206c:	10000000 	andne	r0, r0, r0
    2070:	a3040800 	movwge	r0, #18432	; 0x4800
    2074:	04000000 	streq	r0, [r0], #-0
    2078:	00000989 	andeq	r0, r0, r9, lsl #19
    207c:	00a39005 	adceq	r9, r3, r5
    2080:	b2060000 	andlt	r0, r6, #0
    2084:	0c00000b 	stceq	0, cr0, [r0], {11}
    2088:	012e9205 	teqeq	lr, r5, lsl #4
    208c:	a6070000 	strge	r0, [r7], -r0
    2090:	05000009 	streq	r0, [r0, #-9]
    2094:	00009894 	muleq	r0, r4, r8
    2098:	9b070000 	blls	1c20a0 <_Min_Stack_Size+0x1c1ca0>
    209c:	0500000a 	streq	r0, [r0, #-10]
    20a0:	0000ec95 	muleq	r0, r5, ip
    20a4:	a0070400 	andge	r0, r7, r0, lsl #8
    20a8:	05000008 	streq	r0, [r0, #-8]
    20ac:	0000ec96 	muleq	r0, r6, ip
    20b0:	04000800 	streq	r0, [r0], #-2048	; 0x800
    20b4:	00000985 	andeq	r0, r0, r5, lsl #19
    20b8:	00fd9805 	rscseq	r9, sp, r5, lsl #16
    20bc:	a0060000 	andge	r0, r6, r0
    20c0:	14000009 	strne	r0, [r0], #-9
    20c4:	016a9d05 	cmneq	sl, r5, lsl #26
    20c8:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    20cc:	0500000b 	streq	r0, [r0, #-11]
    20d0:	00008d9f 	muleq	r0, pc, sp	; <UNPREDICTABLE>
    20d4:	aa070000 	bge	1c20dc <_Min_Stack_Size+0x1c1cdc>
    20d8:	0500000b 	streq	r0, [r0, #-11]
    20dc:	00016aa0 	andeq	r6, r1, r0, lsr #21
    20e0:	44070400 	strmi	r0, [r7], #-1024	; 0x400
    20e4:	0500000f 	streq	r0, [r0, #-15]
    20e8:	00012ea1 	andeq	r2, r1, r1, lsr #29
    20ec:	08000800 	stmdaeq	r0, {fp}
    20f0:	0000f204 	andeq	pc, r0, r4, lsl #4
    20f4:	097e0400 	ldmdbeq	lr!, {sl}^
    20f8:	a2050000 	andge	r0, r5, #0
    20fc:	00000139 	andeq	r0, r0, r9, lsr r1
    2100:	00087d09 	andeq	r7, r8, r9, lsl #26
    2104:	944b0100 	strbls	r0, [fp], #-256	; 0x100
    2108:	1608000b 	strne	r0, [r8], -fp
    210c:	01000000 	mrseq	r0, (UNDEF: 0)
    2110:	00019e9c 	muleq	r1, ip, lr
    2114:	0e9d0a00 	vfnmseq.f32	s0, s26, s0
    2118:	4b010000 	blmi	42120 <_Min_Stack_Size+0x41d20>
    211c:	0000019e 	muleq	r0, lr, r1
    2120:	0b005001 	bleq	1612c <_Min_Stack_Size+0x15d2c>
    2124:	000001a3 	andeq	r0, r0, r3, lsr #3
    2128:	01700408 	cmneq	r0, r8, lsl #8
    212c:	db090000 	blle	242134 <_Min_Stack_Size+0x241d34>
    2130:	0100000b 	tsteq	r0, fp
    2134:	000bac5f 	andeq	sl, fp, pc, asr ip
    2138:	00000608 	andeq	r0, r0, r8, lsl #12
    213c:	cc9c0100 	ldfgts	f0, [ip], {0}
    2140:	0a000001 	beq	214c <_Min_Stack_Size+0x1d4c>
    2144:	00000fa2 	andeq	r0, r0, r2, lsr #31
    2148:	01cc5f01 	biceq	r5, ip, r1, lsl #30
    214c:	50010000 	andpl	r0, r1, r0
    2150:	016a0b00 	cmneq	sl, r0, lsl #22
    2154:	c8090000 	stmdagt	r9, {}	; <UNPREDICTABLE>
    2158:	0100000a 	tsteq	r0, sl
    215c:	000bb466 	andeq	fp, fp, r6, ror #8
    2160:	00001c08 	andeq	r1, r0, r8, lsl #24
    2164:	0e9c0100 	fmleqe	f0, f4, f0
    2168:	0a000002 	beq	2178 <_Min_Stack_Size+0x1d78>
    216c:	00000e9d 	muleq	r0, sp, lr
    2170:	019e6601 	orrseq	r6, lr, r1, lsl #12
    2174:	50010000 	andpl	r0, r1, r0
    2178:	000fb40a 	andeq	fp, pc, sl, lsl #8
    217c:	cc660100 	stfgte	f0, [r6], #-0
    2180:	01000001 	tsteq	r0, r1
    2184:	0baa0c51 	bleq	fea852d0 <_estack+0xdea552d0>
    2188:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    218c:	000001cc 	andeq	r0, r0, ip, asr #3
    2190:	09005301 	stmdbeq	r0, {r0, r8, r9, ip, lr}
    2194:	0000088d 	andeq	r0, r0, sp, lsl #17
    2198:	0bd07901 	bleq	ff4205a4 <_estack+0xdf3f05a4>
    219c:	00320800 	eorseq	r0, r2, r0, lsl #16
    21a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    21a4:	0000025c 	andeq	r0, r0, ip, asr r2
    21a8:	000e9d0a 	andeq	r9, lr, sl, lsl #26
    21ac:	9e790100 	rpwlse	f0, f1, f0
    21b0:	01000001 	tsteq	r0, r1
    21b4:	0fb40a50 	svceq	0x00b40a50
    21b8:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    21bc:	000001cc 	andeq	r0, r0, ip, asr #3
    21c0:	a90d5101 	stmdbge	sp, {r0, r8, ip, lr}
    21c4:	0100000f 	tsteq	r0, pc
    21c8:	00016a7b 	andeq	r6, r1, fp, ror sl
    21cc:	00121a00 	andseq	r1, r2, r0, lsl #20
    21d0:	0f900d00 	svceq	0x00900d00
    21d4:	7c010000 	stcvc	0, cr0, [r1], {-0}
    21d8:	0000025c 	andeq	r0, r0, ip, asr r2
    21dc:	00001238 	andeq	r1, r0, r8, lsr r2
    21e0:	00980b00 	addseq	r0, r8, r0, lsl #22
    21e4:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    21e8:	0100000a 	tsteq	r0, sl
    21ec:	00008db3 			; <UNDEFINED> instruction: 0x00008db3
    21f0:	000c0400 	andeq	r0, ip, r0, lsl #8
    21f4:	00002808 	andeq	r2, r0, r8, lsl #16
    21f8:	0f9c0100 	svceq	0x009c0100
    21fc:	00000f81 	andeq	r0, r0, r1, lsl #31
    2200:	01ccb301 	biceq	fp, ip, r1, lsl #6
    2204:	12620000 	rsbne	r0, r2, #0
    2208:	9d0c0000 	stcls	0, cr0, [ip, #-0]
    220c:	0100000e 	tsteq	r0, lr
    2210:	00019eb7 			; <UNDEFINED> instruction: 0x00019eb7
    2214:	00530100 	subseq	r0, r3, r0, lsl #2
    2218:	0019b000 	andseq	fp, r9, r0
    221c:	cd000400 	cfstrsgt	mvf0, [r0, #-0]
    2220:	04000009 	streq	r0, [r0], #-9
    2224:	0002f301 	andeq	pc, r2, r1, lsl #6
    2228:	126b0100 	rsbne	r0, fp, #0, 2
    222c:	03680000 	cmneq	r8, #0
    2230:	00000000 	andeq	r0, r0, r0
    2234:	10e70000 	rscne	r0, r7, r0
    2238:	99020000 	stmdbls	r2, {}	; <UNPREDICTABLE>
    223c:	02000008 	andeq	r0, r0, #8
    2240:	00002cd4 	ldrdeq	r2, [r0], -r4
    2244:	07040300 	streq	r0, [r4, -r0, lsl #6]
    2248:	00000222 	andeq	r0, r0, r2, lsr #4
    224c:	69050404 	stmdbvs	r5, {r2, sl}
    2250:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    2254:	00001107 	andeq	r1, r0, r7, lsl #2
    2258:	00451b03 	subeq	r1, r5, r3, lsl #22
    225c:	01030000 	mrseq	r0, (UNDEF: 3)
    2260:	00020206 	andeq	r0, r2, r6, lsl #4
    2264:	05df0200 	ldrbeq	r0, [pc, #512]	; 246c <_Min_Stack_Size+0x206c>
    2268:	1d030000 	stcne	0, cr0, [r3, #-0]
    226c:	00000057 	andeq	r0, r0, r7, asr r0
    2270:	00080103 	andeq	r0, r8, r3, lsl #2
    2274:	03000002 	movweq	r0, #2
    2278:	00380502 	eorseq	r0, r8, r2, lsl #10
    227c:	02030000 	andeq	r0, r3, #0
    2280:	0002aa07 	andeq	sl, r2, r7, lsl #20
    2284:	05040300 	streq	r0, [r4, #-768]	; 0x300
    2288:	0000015d 	andeq	r0, r0, sp, asr r1
    228c:	00008902 	andeq	r8, r0, r2, lsl #18
    2290:	7e410300 	cdpvc	3, 4, cr0, cr1, cr0, {0}
    2294:	03000000 	movweq	r0, #0
    2298:	021d0704 	andseq	r0, sp, #4, 14	; 0x100000
    229c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    22a0:	00015805 	andeq	r5, r1, r5, lsl #16
    22a4:	07080300 	streq	r0, [r8, -r0, lsl #6]
    22a8:	00000218 	andeq	r0, r0, r8, lsl r2
    22ac:	42070403 	andmi	r0, r7, #50331648	; 0x3000000
    22b0:	05000000 	streq	r0, [r0, #-0]
    22b4:	08010304 	stmdaeq	r1, {r2, r8, r9}
    22b8:	00000209 	andeq	r0, r0, r9, lsl #4
    22bc:	00a90406 	adceq	r0, r9, r6, lsl #8
    22c0:	9c070000 	stcls	0, cr0, [r7], {-0}
    22c4:	06000000 	streq	r0, [r0], -r0
    22c8:	0000b404 	andeq	fp, r0, r4, lsl #8
    22cc:	09020800 	stmdbeq	r2, {fp}
    22d0:	04000011 	streq	r0, [r0], #-17
    22d4:	00003a29 	andeq	r3, r0, r9, lsr #20
    22d8:	05e10200 	strbeq	r0, [r1, #512]!	; 0x200
    22dc:	2a040000 	bcs	1022e4 <_Min_Stack_Size+0x101ee4>
    22e0:	0000004c 	andeq	r0, r0, ip, asr #32
    22e4:	00008b02 	andeq	r8, r0, r2, lsl #22
    22e8:	73420400 	movtvc	r0, #9216	; 0x2400
    22ec:	02000000 	andeq	r0, r0, #0
    22f0:	000003ef 	andeq	r0, r0, pc, ror #7
    22f4:	006c5e05 	rsbeq	r5, ip, r5, lsl #28
    22f8:	ee020000 	cdp	0, 0, cr0, cr2, cr0, {0}
    22fc:	05000003 	streq	r0, [r0, #-3]
    2300:	00007e5f 	andeq	r7, r0, pc, asr lr
    2304:	01660200 	cmneq	r6, r0, lsl #4
    2308:	65050000 	strvs	r0, [r5, #-0]
    230c:	000000cb 	andeq	r0, r0, fp, asr #1
    2310:	0009ca09 	andeq	ip, r9, r9, lsl #20
    2314:	88061400 	stmdahi	r6, {sl, ip}
    2318:	00000140 	andeq	r0, r0, r0, asr #2
    231c:	0009a60a 	andeq	sl, r9, sl, lsl #12
    2320:	ec8a0600 	stc	6, cr0, [sl], {0}
    2324:	00000000 	andeq	r0, r0, r0
    2328:	000a9b0a 	andeq	r9, sl, sl, lsl #22
    232c:	408b0600 	addmi	r0, fp, r0, lsl #12
    2330:	04000001 	streq	r0, [r0], #-1
    2334:	0008a00a 	andeq	sl, r8, sl
    2338:	408c0600 	addmi	r0, ip, r0, lsl #12
    233c:	08000001 	stmdaeq	r0, {r0}
    2340:	0009490a 	andeq	r4, r9, sl, lsl #18
    2344:	9a8d0600 	bls	fe343b4c <_estack+0xde313b4c>
    2348:	0c000000 	stceq	0, cr0, [r0], {-0}
    234c:	000a3b0a 	andeq	r3, sl, sl, lsl #22
    2350:	9a8e0600 	bls	fe383b58 <_estack+0xde353b58>
    2354:	10000000 	andne	r0, r0, r0
    2358:	f7040600 			; <UNDEFINED> instruction: 0xf7040600
    235c:	02000000 	andeq	r0, r0, #0
    2360:	00000989 	andeq	r0, r0, r9, lsl #19
    2364:	00f79006 	rscseq	r9, r7, r6
    2368:	b2090000 	andlt	r0, r9, #0
    236c:	0c00000b 	stceq	0, cr0, [r0], {11}
    2370:	01829206 	orreq	r9, r2, r6, lsl #4
    2374:	a60a0000 	strge	r0, [sl], -r0
    2378:	06000009 	streq	r0, [r0], -r9
    237c:	0000ec94 	muleq	r0, r4, ip
    2380:	9b0a0000 	blls	282388 <_Min_Stack_Size+0x281f88>
    2384:	0600000a 	streq	r0, [r0], -sl
    2388:	00014095 	muleq	r1, r5, r0
    238c:	a00a0400 	andge	r0, sl, r0, lsl #8
    2390:	06000008 	streq	r0, [r0], -r8
    2394:	00014096 	muleq	r1, r6, r0
    2398:	02000800 	andeq	r0, r0, #0, 16
    239c:	00000985 	andeq	r0, r0, r5, lsl #19
    23a0:	01519806 	cmpeq	r1, r6, lsl #16
    23a4:	a0090000 	andge	r0, r9, r0
    23a8:	14000009 	strne	r0, [r0], #-9
    23ac:	01be9d06 			; <UNDEFINED> instruction: 0x01be9d06
    23b0:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    23b4:	0600000b 	streq	r0, [r0], -fp
    23b8:	0000e19f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    23bc:	aa0a0000 	bge	2823c4 <_Min_Stack_Size+0x281fc4>
    23c0:	0600000b 	streq	r0, [r0], -fp
    23c4:	0001bea0 	andeq	fp, r1, r0, lsr #29
    23c8:	440a0400 	strmi	r0, [sl], #-1024	; 0x400
    23cc:	0600000f 	streq	r0, [r0], -pc
    23d0:	000182a1 	andeq	r8, r1, r1, lsr #5
    23d4:	06000800 	streq	r0, [r0], -r0, lsl #16
    23d8:	00014604 	andeq	r4, r1, r4, lsl #12
    23dc:	097e0200 	ldmdbeq	lr!, {r9}^
    23e0:	a2060000 	andge	r0, r6, #0
    23e4:	0000018d 	andeq	r0, r0, sp, lsl #3
    23e8:	00004b02 	andeq	r4, r0, r2, lsl #22
    23ec:	9a630700 	bls	18c3ff4 <_Min_Stack_Size+0x18c3bf4>
    23f0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    23f4:	00001110 	andeq	r1, r0, r0, lsl r1
    23f8:	ff780708 			; <UNDEFINED> instruction: 0xff780708
    23fc:	0a000001 	beq	2408 <_Min_Stack_Size+0x2008>
    2400:	0000118e 	andeq	r1, r0, lr, lsl #3
    2404:	00d67a07 	sbcseq	r7, r6, r7, lsl #20
    2408:	0a000000 	beq	2410 <_Min_Stack_Size+0x2010>
    240c:	000011e9 	andeq	r1, r0, r9, ror #3
    2410:	00ec7b07 	rsceq	r7, ip, r7, lsl #22
    2414:	00040000 	andeq	r0, r4, r0
    2418:	00105102 	andseq	r5, r0, r2, lsl #2
    241c:	da7c0700 	ble	1f04024 <_Min_Stack_Size+0x1f03c24>
    2420:	02000001 	andeq	r0, r0, #1
    2424:	00001416 	andeq	r1, r0, r6, lsl r4
    2428:	009a5408 	addseq	r5, sl, r8, lsl #8
    242c:	040b0000 	streq	r0, [fp], #-0
    2430:	02348301 	eorseq	r8, r4, #67108864	; 0x4000000
    2434:	830c0000 	movwhi	r0, #49152	; 0xc000
    2438:	01000011 	tsteq	r0, r1, lsl r0
    243c:	00023485 	andeq	r3, r2, r5, lsl #9
    2440:	13660c00 	cmnne	r6, #0, 24
    2444:	86010000 	strhi	r0, [r1], -r0
    2448:	000000e1 	andeq	r0, r0, r1, ror #1
    244c:	b5040600 	strlt	r0, [r4, #-1536]	; 0x600
    2450:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2454:	00001356 	andeq	r1, r0, r6, asr r3
    2458:	e17d0154 	cmn	sp, r4, asr r1
    245c:	0a000002 	beq	246c <_Min_Stack_Size+0x206c>
    2460:	000011c9 	andeq	r1, r0, r9, asr #3
    2464:	02347f01 	eorseq	r7, r4, #1, 30
    2468:	0a000000 	beq	2470 <_Min_Stack_Size+0x2070>
    246c:	00001492 	muleq	r0, r2, r4
    2470:	02348001 	eorseq	r8, r4, #1
    2474:	0a040000 	beq	10247c <_Min_Stack_Size+0x10207c>
    2478:	00001535 	andeq	r1, r0, r5, lsr r5
    247c:	02348101 	eorseq	r8, r4, #1073741824	; 0x40000000
    2480:	0d080000 	stceq	0, cr0, [r8, #-0]
    2484:	87010075 	smlsdxhi	r1, r5, r0, r0
    2488:	00000215 	andeq	r0, r0, r5, lsl r2
    248c:	15070a0c 	strne	r0, [r7, #-2572]	; 0xa0c
    2490:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    2494:	000001c4 	andeq	r0, r0, r4, asr #3
    2498:	12fe0a10 	rscsne	r0, lr, #16, 20	; 0x10000
    249c:	8a010000 	bhi	424a4 <_Min_Stack_Size+0x420a4>
    24a0:	000001c4 	andeq	r0, r0, r4, asr #3
    24a4:	14240a24 	strtne	r0, [r4], #-2596	; 0xa24
    24a8:	8c010000 	stchi	0, cr0, [r1], {-0}
    24ac:	000002e1 	andeq	r0, r0, r1, ror #5
    24b0:	11aa0a38 			; <UNDEFINED> instruction: 0x11aa0a38
    24b4:	8d010000 	stchi	0, cr0, [r1, #-0]
    24b8:	000000e1 	andeq	r0, r0, r1, ror #1
    24bc:	153f0a3c 	ldrne	r0, [pc, #-2620]!	; 1a88 <_Min_Stack_Size+0x1688>
    24c0:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    24c4:	000000e1 	andeq	r0, r0, r1, ror #1
    24c8:	147b0a40 	ldrbtne	r0, [fp], #-2624	; 0xa40
    24cc:	90010000 	andls	r0, r1, r0
    24d0:	000002e6 	andeq	r0, r0, r6, ror #5
    24d4:	13a80a44 			; <UNDEFINED> instruction: 0x13a80a44
    24d8:	91010000 	mrsls	r0, (UNDEF: 1)
    24dc:	000002e6 	andeq	r0, r0, r6, ror #5
    24e0:	11750a48 	cmnne	r5, r8, asr #20
    24e4:	94010000 	strls	r0, [r1], #-0
    24e8:	000000e1 	andeq	r0, r0, r1, ror #1
    24ec:	10010a4c 	andne	r0, r1, ip, asr #20
    24f0:	95010000 	strls	r0, [r1, #-0]
    24f4:	000000c0 	andeq	r0, r0, r0, asr #1
    24f8:	e10e0050 	qadd	r0, r0, lr
    24fc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2500:	000000d6 	ldrdeq	r0, [r0], -r6
    2504:	00134102 	andseq	r4, r3, r2, lsl #2
    2508:	3a9c0100 	bcc	fe702910 <_estack+0xde6d2910>
    250c:	02000002 	andeq	r0, r0, #2
    2510:	000012dd 	ldrdeq	r1, [r0], -sp
    2514:	02eba001 	rsceq	sl, fp, #1
    2518:	94090000 	strls	r0, [r9], #-0
    251c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2520:	0326ad01 	teqeq	r6, #1, 26	; 0x40
    2524:	600a0000 	andvs	r0, sl, r0
    2528:	01000014 	tsteq	r0, r4, lsl r0
    252c:	0000a3af 	andeq	sl, r0, pc, lsr #7
    2530:	9b0a0000 	blls	282538 <_Min_Stack_Size+0x282138>
    2534:	0100001c 	tsteq	r0, ip, lsl r0
    2538:	00020ab0 			; <UNDEFINED> instruction: 0x00020ab0
    253c:	02000400 	andeq	r0, r0, #0, 8
    2540:	00001144 	andeq	r1, r0, r4, asr #2
    2544:	0301b101 	movweq	fp, #4353	; 0x1101
    2548:	f3020000 	vhadd.u8	d0, d2, d0
    254c:	01000014 	tsteq	r0, r4, lsl r0
    2550:	000326b6 			; <UNDEFINED> instruction: 0x000326b6
    2554:	14070f00 	strne	r0, [r7], #-3840	; 0xf00
    2558:	30010000 	andcc	r0, r1, r0
    255c:	0000d607 	andeq	sp, r0, r7, lsl #12
    2560:	03660100 	cmneq	r6, #0, 2
    2564:	2d100000 	ldccs	0, cr0, [r0, #-0]
    2568:	01000015 	tsteq	r0, r5, lsl r0
    256c:	03660730 	cmneq	r6, #48, 14	; 0xc00000
    2570:	72110000 	andsvc	r0, r1, #0
    2574:	0100000d 	tsteq	r0, sp
    2578:	00d60732 	sbcseq	r0, r6, r2, lsr r7
    257c:	06000000 	streq	r0, [r0], -r0
    2580:	00036c04 	andeq	r6, r3, r4, lsl #24
    2584:	02f60700 	rscseq	r0, r6, #0, 14
    2588:	060f0000 	streq	r0, [pc], -r0
    258c:	01000012 	tsteq	r0, r2, lsl r0
    2590:	00d60709 	sbcseq	r0, r6, r9, lsl #14
    2594:	9b010000 	blls	4259c <_Min_Stack_Size+0x4219c>
    2598:	10000003 	andne	r0, r0, r3
    259c:	0000152d 	andeq	r1, r0, sp, lsr #10
    25a0:	66070901 	strvs	r0, [r7], -r1, lsl #18
    25a4:	11000003 	tstne	r0, r3
    25a8:	00000d72 	andeq	r0, r0, r2, ror sp
    25ac:	d6070b01 	strle	r0, [r7], -r1, lsl #22
    25b0:	00000000 	andeq	r0, r0, r0
    25b4:	0014ae12 	andseq	sl, r4, r2, lsl lr
    25b8:	08890100 	stmeq	r9, {r8}
    25bc:	0003c001 	andeq	ip, r3, r1
    25c0:	152e1000 	strne	r1, [lr, #-0]!
    25c4:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    25c8:	00020a08 	andeq	r0, r2, r8, lsl #20
    25cc:	78751300 	ldmdavc	r5!, {r8, r9, ip}^
    25d0:	088b0100 	stmeq	fp, {r8}
    25d4:	000000e1 	andeq	r0, r0, r1, ror #1
    25d8:	10d41400 	sbcsne	r1, r4, r0, lsl #8
    25dc:	80010000 	andhi	r0, r1, r0
    25e0:	000c2c06 	andeq	r2, ip, r6, lsl #24
    25e4:	00002608 	andeq	r2, r0, r8, lsl #12
    25e8:	089c0100 	ldmeq	ip, {r8}
    25ec:	15000004 	strne	r0, [r0, #-4]
    25f0:	0000152d 	andeq	r1, r0, sp, lsr #10
    25f4:	08068001 	stmdaeq	r6, {r0, pc}
    25f8:	83000004 	movwhi	r0, #4
    25fc:	15000012 	strne	r0, [r0, #-18]
    2600:	00001436 	andeq	r1, r0, r6, lsr r4
    2604:	13068001 	movwne	r8, #24577	; 0x6001
    2608:	ba000004 	blt	2620 <_Min_Stack_Size+0x2220>
    260c:	16000012 			; <UNDEFINED> instruction: 0x16000012
    2610:	08000c4e 	stmdaeq	r0, {r1, r2, r3, r6, sl, fp}
    2614:	00001824 	andeq	r1, r0, r4, lsr #16
    2618:	03500117 	cmpeq	r0, #-1073741819	; 0xc0000005
    261c:	005101f3 	ldrsheq	r0, [r1], #-19	; 0xffffffed
    2620:	040d0700 	streq	r0, [sp], #-1792	; 0x700
    2624:	04060000 	streq	r0, [r6], #-0
    2628:	000002f6 	strdeq	r0, [r0], -r6
    262c:	00009a07 	andeq	r9, r0, r7, lsl #20
    2630:	146c1800 	strbtne	r1, [ip], #-2048	; 0x800
    2634:	96010000 	strls	r0, [r1], -r0
    2638:	04320106 	ldrteq	r0, [r2], #-262	; 0x106
    263c:	2d100000 	ldccs	0, cr0, [r0, #-0]
    2640:	01000015 	tsteq	r0, r5, lsl r0
    2644:	04080696 	streq	r0, [r8], #-1686	; 0x696
    2648:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    264c:	00000418 	andeq	r0, r0, r8, lsl r4
    2650:	08000c54 	stmdaeq	r0, {r2, r4, r6, sl, fp}
    2654:	00000084 	andeq	r0, r0, r4, lsl #1
    2658:	04ad9c01 	strteq	r9, [sp], #3073	; 0xc01
    265c:	251a0000 	ldrcs	r0, [sl, #-0]
    2660:	f1000004 	cps	#4
    2664:	1b000012 	blne	26b4 <_Min_Stack_Size+0x22b4>
    2668:	08000c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp}
    266c:	00001841 	andeq	r1, r0, r1, asr #16
    2670:	000c821c 	andeq	r8, ip, ip, lsl r2
    2674:	00184808 	andseq	r4, r8, r8, lsl #16
    2678:	00046b00 	andeq	r6, r4, r0, lsl #22
    267c:	50011700 	andpl	r1, r1, r0, lsl #14
    2680:	00007502 	andeq	r7, r0, r2, lsl #10
    2684:	000c8a1b 	andeq	r8, ip, fp, lsl sl
    2688:	00186e08 	andseq	r6, r8, r8, lsl #28
    268c:	0c961b00 	vldmiaeq	r6, {d1-d0}
    2690:	18760800 	ldmdane	r6!, {fp}^
    2694:	9a1b0000 	bls	6c269c <_Min_Stack_Size+0x6c229c>
    2698:	4108000c 	tstmi	r8, ip
    269c:	1c000018 	stcne	0, cr0, [r0], {24}
    26a0:	08000cc0 	stmdaeq	r0, {r6, r7, sl, fp}
    26a4:	00001848 	andeq	r1, r0, r8, asr #16
    26a8:	0000049a 	muleq	r0, sl, r4
    26ac:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    26b0:	1b000075 	blne	288c <_Min_Stack_Size+0x248c>
    26b4:	08000cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp}
    26b8:	0000186e 	andeq	r1, r0, lr, ror #16
    26bc:	000cd81d 	andeq	sp, ip, sp, lsl r8
    26c0:	00187608 	andseq	r7, r8, r8, lsl #12
    26c4:	3f1e0000 	svccc	0x001e0000
    26c8:	01000014 	tsteq	r0, r4, lsl r0
    26cc:	0000d6ff 	strdeq	sp, [r0], -pc	; <UNPREDICTABLE>
    26d0:	04e00100 	strbteq	r0, [r0], #256	; 0x100
    26d4:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    26d8:	01000015 	tsteq	r0, r5, lsl r0
    26dc:	00020aff 	strdeq	r0, [r2], -pc	; <UNPREDICTABLE>
    26e0:	10ea1f00 	rscne	r1, sl, r0, lsl #30
    26e4:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    26e8:	000000d6 	ldrdeq	r0, [r0], -r6
    26ec:	00152d11 	andseq	r2, r5, r1, lsl sp
    26f0:	01010100 	mrseq	r0, (UNDEF: 17)
    26f4:	00000408 	andeq	r0, r0, r8, lsl #8
    26f8:	04ad1900 	strteq	r1, [sp], #2304	; 0x900
    26fc:	0cd80000 	ldcleq	0, cr0, [r8], {0}
    2700:	00720800 	rsbseq	r0, r2, r0, lsl #16
    2704:	9c010000 	stcls	0, cr0, [r1], {-0}
    2708:	00000581 	andeq	r0, r0, r1, lsl #11
    270c:	0004bd1a 	andeq	fp, r4, sl, lsl sp
    2710:	00131d00 	andseq	r1, r3, r0, lsl #26
    2714:	04c81a00 	strbeq	r1, [r8], #2560	; 0xa00
    2718:	13510000 	cmpne	r1, #0
    271c:	d3200000 	teqle	r0, #0
    2720:	1d000004 	stcne	0, cr0, [r0, #-16]
    2724:	1b000013 	blne	2778 <_Min_Stack_Size+0x2378>
    2728:	08000ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp}
    272c:	00001841 	andeq	r1, r0, r1, asr #16
    2730:	000d101b 	andeq	r1, sp, fp, lsl r0
    2734:	00187608 	andseq	r7, r8, r8, lsl #12
    2738:	0d1c1c00 	ldceq	12, cr1, [ip, #-0]
    273c:	18480800 	stmdane	r8, {fp}^
    2740:	05340000 	ldreq	r0, [r4, #-0]!
    2744:	01170000 	tsteq	r7, r0
    2748:	10740250 	rsbsne	r0, r4, r0, asr r2
    274c:	0d241b00 	vstmdbeq	r4!, {d1-d0}
    2750:	187d0800 	ldmdane	sp!, {fp}^
    2754:	281b0000 	ldmdacs	fp, {}	; <UNPREDICTABLE>
    2758:	7608000d 	strvc	r0, [r8], -sp
    275c:	1c000018 	stcne	0, cr0, [r0], {24}
    2760:	08000d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp}
    2764:	00001884 	andeq	r1, r0, r4, lsl #17
    2768:	0000055a 	andeq	r0, r0, sl, asr r5
    276c:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2770:	1c001074 	stcne	0, cr1, [r0], {116}	; 0x74
    2774:	08000d3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, fp}
    2778:	00001884 	andeq	r1, r0, r4, lsl #17
    277c:	0000056e 	andeq	r0, r0, lr, ror #10
    2780:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2784:	1b002474 	blne	b95c <_Min_Stack_Size+0xb55c>
    2788:	08000d40 	stmdaeq	r0, {r6, r8, sl, fp}
    278c:	00001876 	andeq	r1, r0, r6, ror r8
    2790:	000d481b 	andeq	r4, sp, fp, lsl r8
    2794:	0018a108 	andseq	sl, r8, r8, lsl #2
    2798:	b0210000 	eorlt	r0, r1, r0
    279c:	01000013 	tsteq	r0, r3, lsl r0
    27a0:	020a0134 	andeq	r0, sl, #52, 2
    27a4:	db010000 	blle	427ac <_Min_Stack_Size+0x423ac>
    27a8:	10000005 	andne	r0, r0, r5
    27ac:	000012f0 	strdeq	r1, [r0], -r0
    27b0:	db013401 	blle	4f7bc <_Min_Stack_Size+0x4f3bc>
    27b4:	10000005 	andne	r0, r0, r5
    27b8:	0000153f 	andeq	r1, r0, pc, lsr r5
    27bc:	db013401 	blle	4f7c8 <_Min_Stack_Size+0x4f3c8>
    27c0:	10000005 	andne	r0, r0, r5
    27c4:	00001001 	andeq	r1, r0, r1
    27c8:	e0013401 	and	r3, r1, r1, lsl #8
    27cc:	11000005 	tstne	r0, r5
    27d0:	000010e9 	andeq	r1, r0, r9, ror #1
    27d4:	0d013601 	stceq	6, cr3, [r1, #-4]
    27d8:	11000004 	tstne	r0, r4
    27dc:	0000151b 	andeq	r1, r0, fp, lsl r5
    27e0:	21013701 	tstcs	r1, r1, lsl #14
    27e4:	11000000 	mrsne	r0, (UNDEF: 0)
    27e8:	00000d72 	andeq	r0, r0, r2, ror sp
    27ec:	0a013801 	beq	507f8 <_Min_Stack_Size+0x503f8>
    27f0:	00000002 	andeq	r0, r0, r2
    27f4:	0000e107 	andeq	lr, r0, r7, lsl #2
    27f8:	00c00700 	sbceq	r0, r0, r0, lsl #14
    27fc:	81190000 	tsthi	r9, r0
    2800:	4c000005 	stcmi	0, cr0, [r0], {5}
    2804:	7608000d 	strvc	r0, [r8], -sp
    2808:	01000000 	mrseq	r0, (UNDEF: 0)
    280c:	0006ed9c 	muleq	r6, ip, sp
    2810:	05921a00 	ldreq	r1, [r2, #2560]	; 0xa00
    2814:	13850000 	orrne	r0, r5, #0
    2818:	9e1a0000 	cdpls	0, 1, cr0, cr10, cr0, {0}
    281c:	a3000005 	movwge	r0, #5
    2820:	1a000013 	bne	2874 <_Min_Stack_Size+0x2474>
    2824:	000005aa 	andeq	r0, r0, sl, lsr #11
    2828:	000013c1 	andeq	r1, r0, r1, asr #7
    282c:	0005b620 	andeq	fp, r5, r0, lsr #12
    2830:	0013e200 	andseq	lr, r3, r0, lsl #4
    2834:	05c22000 	strbeq	r2, [r2]
    2838:	14000000 	strne	r0, [r0], #-0
    283c:	ce200000 	cdpgt	0, 2, cr0, cr0, cr0, {0}
    2840:	37000005 	strcc	r0, [r0, -r5]
    2844:	22000014 	andcs	r0, r0, #20
    2848:	000004ad 	andeq	r0, r0, sp, lsr #9
    284c:	08000d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp}
    2850:	0000003a 	andeq	r0, r0, sl, lsr r0
    2854:	a2014f01 	andge	r4, r1, #1, 30
    2858:	1a000006 	bne	2878 <_Min_Stack_Size+0x2478>
    285c:	000004c8 	andeq	r0, r0, r8, asr #9
    2860:	00001462 	andeq	r1, r0, r2, ror #8
    2864:	0004bd1a 	andeq	fp, r4, sl, lsl sp
    2868:	00147600 	andseq	r7, r4, r0, lsl #12
    286c:	0d742300 	ldcleq	3, cr2, [r4, #-0]
    2870:	003a0800 	eorseq	r0, sl, r0, lsl #16
    2874:	d3200000 	teqle	r0, #0
    2878:	76000004 	strvc	r0, [r0], -r4
    287c:	1b000014 	blne	28d4 <_Min_Stack_Size+0x24d4>
    2880:	08000d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp}
    2884:	00001841 	andeq	r1, r0, r1, asr #16
    2888:	000da21c 	andeq	sl, sp, ip, lsl r2
    288c:	00188408 	andseq	r8, r8, r8, lsl #8
    2890:	00068300 	andeq	r8, r6, r0, lsl #6
    2894:	50011700 	andpl	r1, r1, r0, lsl #14
    2898:	00107402 	andseq	r7, r0, r2, lsl #8
    289c:	000daa1c 	andeq	sl, sp, ip, lsl sl
    28a0:	00188408 	andseq	r8, r8, r8, lsl #8
    28a4:	00069700 	andeq	r9, r6, r0, lsl #14
    28a8:	50011700 	andpl	r1, r1, r0, lsl #14
    28ac:	00247402 	eoreq	r7, r4, r2, lsl #8
    28b0:	000dae1b 	andeq	sl, sp, fp, lsl lr
    28b4:	00187608 	andseq	r7, r8, r8, lsl #12
    28b8:	1c000000 	stcne	0, cr0, [r0], {-0}
    28bc:	08000d5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, sl, fp}
    28c0:	000018ac 	andeq	r1, r0, ip, lsr #17
    28c4:	000006b6 			; <UNDEFINED> instruction: 0x000006b6
    28c8:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    28cc:	1c005408 	cfstrsne	mvf5, [r0], {8}
    28d0:	08000d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp}
    28d4:	000018ac 	andeq	r1, r0, ip, lsr #17
    28d8:	000006cf 	andeq	r0, r0, pc, asr #13
    28dc:	07500117 	smmlaeq	r0, r7, r1, r0
    28e0:	00760075 	rsbseq	r0, r6, r5, ror r0
    28e4:	0001231e 	andeq	r2, r1, lr, lsl r3
    28e8:	000dbc1c 	andeq	fp, sp, ip, lsl ip
    28ec:	0018c208 	andseq	ip, r8, r8, lsl #4
    28f0:	0006e300 	andeq	lr, r6, r0, lsl #6
    28f4:	50011700 	andpl	r1, r1, r0, lsl #14
    28f8:	00007402 	andeq	r7, r0, r2, lsl #8
    28fc:	000dc01b 	andeq	ip, sp, fp, lsl r0
    2900:	0018a108 	andseq	sl, r8, r8, lsl #2
    2904:	5b240000 	blpl	90290c <_Min_Stack_Size+0x90250c>
    2908:	01000010 	tsteq	r0, r0, lsl r0
    290c:	020a0236 	andeq	r0, sl, #1610612739	; 0x60000003
    2910:	0dc40000 	stcleq	0, cr0, [r4]
    2914:	00840800 	addeq	r0, r4, r0, lsl #16
    2918:	9c010000 	stcls	0, cr0, [r1], {-0}
    291c:	00000851 	andeq	r0, r0, r1, asr r8
    2920:	0012e515 	andseq	lr, r2, r5, lsl r5
    2924:	02360100 	eorseq	r0, r6, #0, 2
    2928:	000005db 	ldrdeq	r0, [r0], -fp
    292c:	00001489 	andeq	r1, r0, r9, lsl #9
    2930:	0014e415 	andseq	lr, r4, r5, lsl r4
    2934:	02360100 	eorseq	r0, r6, #0, 2
    2938:	000005db 	ldrdeq	r0, [r0], -fp
    293c:	000014d3 	ldrdeq	r1, [r0], -r3
    2940:	001c9b25 	andseq	r9, ip, r5, lsr #22
    2944:	02380100 	eorseq	r0, r8, #0, 2
    2948:	0000020a 	andeq	r0, r0, sl, lsl #4
    294c:	81265401 	teqhi	r6, r1, lsl #8
    2950:	d8000005 	stmdale	r0, {r0, r2}
    2954:	7808000d 	stmdavc	r8, {r0, r2, r3}
    2958:	01000002 	tsteq	r0, r2
    295c:	083e023d 	ldmdaeq	lr!, {r0, r2, r3, r4, r5, r9}
    2960:	aa1a0000 	bge	682968 <_Min_Stack_Size+0x682568>
    2964:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    2968:	1a000015 	bne	29c4 <_Min_Stack_Size+0x25c4>
    296c:	0000059e 	muleq	r0, lr, r5
    2970:	0000153d 	andeq	r1, r0, sp, lsr r5
    2974:	0005921a 	andeq	r9, r5, sl, lsl r2
    2978:	00155d00 	andseq	r5, r5, r0, lsl #26
    297c:	02782700 	rsbseq	r2, r8, #0, 14
    2980:	b6200000 	strtlt	r0, [r0], -r0
    2984:	86000005 	strhi	r0, [r0], -r5
    2988:	20000015 	andcs	r0, r0, r5, lsl r0
    298c:	000005c2 	andeq	r0, r0, r2, asr #11
    2990:	000015af 	andeq	r1, r0, pc, lsr #11
    2994:	0005ce20 	andeq	ip, r5, r0, lsr #28
    2998:	0015cf00 	andseq	ip, r5, r0, lsl #30
    299c:	04ad2200 	strteq	r2, [sp], #512	; 0x200
    29a0:	0df20000 	ldcleq	0, cr0, [r2]
    29a4:	00380800 	eorseq	r0, r8, r0, lsl #16
    29a8:	4f010000 	svcmi	0x00010000
    29ac:	0007f801 	andeq	pc, r7, r1, lsl #16
    29b0:	04c81a00 	strbeq	r1, [r8], #2560	; 0xa00
    29b4:	15fa0000 	ldrbne	r0, [sl, #0]!
    29b8:	bd1a0000 	ldclt	0, cr0, [sl, #-0]
    29bc:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    29c0:	23000016 	movwcs	r0, #22
    29c4:	08000df2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, sl, fp}
    29c8:	00000038 	andeq	r0, r0, r8, lsr r0
    29cc:	0004d320 	andeq	sp, r4, r0, lsr #6
    29d0:	00160e00 	andseq	r0, r6, r0, lsl #28
    29d4:	0df61b00 	ldcleq	11, cr1, [r6]
    29d8:	18410800 	stmdane	r1, {fp}^
    29dc:	1e1c0000 	cdpne	0, 1, cr0, cr12, cr0, {0}
    29e0:	8408000e 	strhi	r0, [r8], #-14
    29e4:	d9000018 	stmdble	r0, {r3, r4}
    29e8:	17000007 	strne	r0, [r0, -r7]
    29ec:	74025001 	strvc	r5, [r2], #-1
    29f0:	261c0010 			; <UNDEFINED> instruction: 0x261c0010
    29f4:	8408000e 	strhi	r0, [r8], #-14
    29f8:	ed000018 	stc	0, cr0, [r0, #-96]	; 0xffffffa0
    29fc:	17000007 	strne	r0, [r0, -r7]
    2a00:	74025001 	strvc	r5, [r2], #-1
    2a04:	2a1b0024 	bcs	6c2a9c <_Min_Stack_Size+0x6c269c>
    2a08:	7608000e 	strvc	r0, [r8], -lr
    2a0c:	00000018 	andeq	r0, r0, r8, lsl r0
    2a10:	0dde1c00 	ldcleq	12, cr1, [lr]
    2a14:	18ac0800 	stmiane	ip!, {fp}
    2a18:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    2a1c:	01170000 	tsteq	r7, r0
    2a20:	54080250 	strpl	r0, [r8], #-592	; 0x250
    2a24:	0de81c00 	stcleq	12, cr1, [r8]
    2a28:	18ac0800 	stmiane	ip!, {fp}
    2a2c:	081f0000 	ldmdaeq	pc, {}	; <UNPREDICTABLE>
    2a30:	01170000 	tsteq	r7, r0
    2a34:	00310150 	eorseq	r0, r1, r0, asr r1
    2a38:	000e421c 	andeq	r4, lr, ip, lsl r2
    2a3c:	0018c208 	andseq	ip, r8, r8, lsl #4
    2a40:	00083300 	andeq	r3, r8, r0, lsl #6
    2a44:	50011700 	andpl	r1, r1, r0, lsl #14
    2a48:	00007402 	andeq	r7, r0, r2, lsl #8
    2a4c:	000e461b 	andeq	r4, lr, fp, lsl r6
    2a50:	0018a108 	andseq	sl, r8, r8, lsl #2
    2a54:	1b000000 	blne	2a5c <_Min_Stack_Size+0x265c>
    2a58:	08000dd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, fp}
    2a5c:	000018a1 	andeq	r1, r0, r1, lsr #17
    2a60:	000e3a1b 	andeq	r3, lr, fp, lsl sl
    2a64:	0018a108 	andseq	sl, r8, r8, lsl #2
    2a68:	f4180000 			; <UNDEFINED> instruction: 0xf4180000
    2a6c:	01000010 	tsteq	r0, r0, lsl r0
    2a70:	8301063a 	movwhi	r0, #5690	; 0x163a
    2a74:	10000008 	andne	r0, r0, r8
    2a78:	0000152d 	andeq	r1, r0, sp, lsr #10
    2a7c:	08063a01 	stmdaeq	r6, {r0, r9, fp, ip, sp}
    2a80:	10000004 	andne	r0, r0, r4
    2a84:	00001333 	andeq	r1, r0, r3, lsr r3
    2a88:	ae063a01 	vmlage.f32	s6, s12, s2
    2a8c:	10000000 	andne	r0, r0, r0
    2a90:	000014da 	ldrdeq	r1, [r0], -sl
    2a94:	83063a01 	movwhi	r3, #27137	; 0x6a01
    2a98:	00000008 	andeq	r0, r0, r8
    2a9c:	0000d607 	andeq	sp, r0, r7, lsl #12
    2aa0:	122a2400 	eorne	r2, sl, #0, 8
    2aa4:	51010000 	mrspl	r0, (UNDEF: 1)
    2aa8:	0000d602 	andeq	sp, r0, r2, lsl #12
    2aac:	000e4800 	andeq	r4, lr, r0, lsl #16
    2ab0:	00029808 	andeq	r9, r2, r8, lsl #16
    2ab4:	bb9c0100 	bllt	fe702ebc <_estack+0xde6d2ebc>
    2ab8:	1500000b 	strne	r0, [r0, #-11]
    2abc:	0000152e 	andeq	r1, r0, lr, lsr #10
    2ac0:	0a025101 	beq	96ecc <_Min_Stack_Size+0x96acc>
    2ac4:	21000002 	tstcs	r0, r2
    2ac8:	15000016 	strne	r0, [r0, #-22]
    2acc:	00001333 	andeq	r1, r0, r3, lsr r3
    2ad0:	bb025101 	bllt	96edc <_Min_Stack_Size+0x96adc>
    2ad4:	8100000b 	tsthi	r0, fp
    2ad8:	15000016 	strne	r0, [r0, #-22]
    2adc:	000017a0 	andeq	r1, r0, r0, lsr #15
    2ae0:	ec025101 	stfs	f5, [r2], {1}
    2ae4:	e1000000 	mrs	r0, (UNDEF: 0)
    2ae8:	15000016 	strne	r0, [r0, #-22]
    2aec:	00001452 	andeq	r1, r0, r2, asr r4
    2af0:	83025101 	movwhi	r5, #8449	; 0x2101
    2af4:	5d000008 	stcpl	0, cr0, [r0, #-32]	; 0xffffffe0
    2af8:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    2afc:	00001348 	andeq	r1, r0, r8, asr #6
    2b00:	d6025301 	strle	r5, [r2], -r1, lsl #6
    2b04:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    2b08:	25000017 	strcs	r0, [r0, #-23]
    2b0c:	0000193e 	andeq	r1, r0, lr, lsr r9
    2b10:	ff025401 			; <UNDEFINED> instruction: 0xff025401
    2b14:	02000001 	andeq	r0, r0, #1
    2b18:	2d285891 	stccs	8, cr5, [r8, #-580]!	; 0xfffffdbc
    2b1c:	01000015 	tsteq	r0, r5, lsl r0
    2b20:	04080255 	streq	r0, [r8], #-597	; 0x255
    2b24:	16210000 	strtne	r0, [r1], -r0
    2b28:	3c260000 	stccc	0, cr0, [r6], #-0
    2b2c:	ce000003 	cdpgt	0, 0, cr0, cr0, cr3, {0}
    2b30:	9008000e 	andls	r0, r8, lr
    2b34:	01000002 	tsteq	r0, r2
    2b38:	095902e0 	ldmdbeq	r9, {r5, r6, r7, r9}^
    2b3c:	4d1a0000 	ldcmi	0, cr0, [sl, #-0]
    2b40:	79000003 	stmdbvc	r0, {r0, r1}
    2b44:	27000018 	smladcs	r0, r8, r0, r0
    2b48:	00000290 	muleq	r0, r0, r2
    2b4c:	00035920 	andeq	r5, r3, r0, lsr #18
    2b50:	0018a200 	andseq	sl, r8, r0, lsl #4
    2b54:	0ed21b00 	vfnmseq.f64	d17, d2, d0
    2b58:	18410800 	stmdane	r1, {fp}^
    2b5c:	de1b0000 	cdple	0, 1, cr0, cr11, cr0, {0}
    2b60:	7608000e 	strvc	r0, [r8], -lr
    2b64:	1b000018 	blne	2bcc <_Min_Stack_Size+0x27cc>
    2b68:	08000faa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, fp}
    2b6c:	00001876 	andeq	r1, r0, r6, ror r8
    2b70:	18260000 	stmdane	r6!, {}	; <UNPREDICTABLE>
    2b74:	de000004 	cdple	0, 0, cr0, cr0, cr4, {0}
    2b78:	a808000e 	stmdage	r8, {r1, r2, r3}
    2b7c:	01000002 	tsteq	r0, r2
    2b80:	09d502f9 	ldmibeq	r5, {r0, r3, r4, r5, r6, r7, r9}^
    2b84:	251a0000 	ldrcs	r0, [sl, #-0]
    2b88:	ce000004 	cdpgt	0, 0, cr0, cr0, cr4, {0}
    2b8c:	1b000018 	blne	2bf4 <_Min_Stack_Size+0x27f4>
    2b90:	08000ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp}
    2b94:	00001841 	andeq	r1, r0, r1, asr #16
    2b98:	000f081c 	andeq	r0, pc, ip, lsl r8	; <UNPREDICTABLE>
    2b9c:	00184808 	andseq	r4, r8, r8, lsl #16
    2ba0:	00099300 	andeq	r9, r9, r0, lsl #6
    2ba4:	50011700 	andpl	r1, r1, r0, lsl #14
    2ba8:	00007802 	andeq	r7, r0, r2, lsl #16
    2bac:	000f101b 	andeq	r1, pc, fp, lsl r0	; <UNPREDICTABLE>
    2bb0:	00186e08 	andseq	r6, r8, r8, lsl #28
    2bb4:	0f281b00 	svceq	0x00281b00
    2bb8:	18760800 	ldmdane	r6!, {fp}^
    2bbc:	2c1b0000 	ldccs	0, cr0, [fp], {-0}
    2bc0:	4108000f 	tstmi	r8, pc
    2bc4:	1c000018 	stcne	0, cr0, [r0], {24}
    2bc8:	08000f52 	stmdaeq	r0, {r1, r4, r6, r8, r9, sl, fp}
    2bcc:	00001848 	andeq	r1, r0, r8, asr #16
    2bd0:	000009c2 	andeq	r0, r0, r2, asr #19
    2bd4:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2bd8:	1b000078 	blne	2dc0 <_Min_Stack_Size+0x29c0>
    2bdc:	08000f5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sl, fp}
    2be0:	0000186e 	andeq	r1, r0, lr, ror #16
    2be4:	000f661b 	andeq	r6, pc, fp, lsl r6	; <UNPREDICTABLE>
    2be8:	00187608 	andseq	r7, r8, r8, lsl #12
    2bec:	51260000 	teqpl	r6, r0
    2bf0:	7a000008 	bvc	2c18 <_Min_Stack_Size+0x2818>
    2bf4:	c008000f 	andgt	r0, r8, pc
    2bf8:	01000002 	tsteq	r0, r2
    2bfc:	0a32026f 	beq	c835c0 <_Min_Stack_Size+0xc831c0>
    2c00:	761a0000 	ldrvc	r0, [sl], -r0
    2c04:	ec000008 	stc	0, cr0, [r0], {8}
    2c08:	1a000018 	bne	2c70 <_Min_Stack_Size+0x2870>
    2c0c:	0000086a 	andeq	r0, r0, sl, ror #16
    2c10:	0000190b 	andeq	r1, r0, fp, lsl #18
    2c14:	00085e1a 	andeq	r5, r8, sl, lsl lr
    2c18:	00193400 	andseq	r3, r9, r0, lsl #8
    2c1c:	0f8e1c00 	svceq	0x008e1c00
    2c20:	18240800 	stmdane	r4!, {fp}
    2c24:	0a180000 	beq	602c2c <_Min_Stack_Size+0x60282c>
    2c28:	01170000 	tsteq	r7, r0
    2c2c:	00760251 	rsbseq	r0, r6, r1, asr r2
    2c30:	10721b00 	rsbsne	r1, r2, r0, lsl #22
    2c34:	18d40800 	ldmne	r4, {fp}^
    2c38:	92290000 	eorls	r0, r9, #0
    2c3c:	24080010 	strcs	r0, [r8], #-16
    2c40:	17000018 	smladne	r0, r8, r0, r0
    2c44:	76025101 	strvc	r5, [r2], -r1, lsl #2
    2c48:	22000000 	andcs	r0, r0, #0
    2c4c:	00000418 	andeq	r0, r0, r8, lsl r4
    2c50:	08000fb2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, sl, fp}
    2c54:	00000078 	andeq	r0, r0, r8, ror r0
    2c58:	ae02ea01 	vmlage.f32	s28, s4, s2
    2c5c:	1a00000a 	bne	2c8c <_Min_Stack_Size+0x288c>
    2c60:	00000425 	andeq	r0, r0, r5, lsr #8
    2c64:	0000195d 	andeq	r1, r0, sp, asr r9
    2c68:	000fb61b 	andeq	fp, pc, fp, lsl r6	; <UNPREDICTABLE>
    2c6c:	00184108 	andseq	r4, r8, r8, lsl #2
    2c70:	0fdc1c00 	svceq	0x00dc1c00
    2c74:	18480800 	stmdane	r8, {fp}^
    2c78:	0a6c0000 	beq	1b02c80 <_Min_Stack_Size+0x1b02880>
    2c7c:	01170000 	tsteq	r7, r0
    2c80:	00790250 	rsbseq	r0, r9, r0, asr r2
    2c84:	0fe41b00 	svceq	0x00e41b00
    2c88:	186e0800 	stmdane	lr!, {fp}^
    2c8c:	f01b0000 			; <UNDEFINED> instruction: 0xf01b0000
    2c90:	7608000f 	strvc	r0, [r8], -pc
    2c94:	1b000018 	blne	2cfc <_Min_Stack_Size+0x28fc>
    2c98:	08000ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp}
    2c9c:	00001841 	andeq	r1, r0, r1, asr #16
    2ca0:	0010161c 	andseq	r1, r0, ip, lsl r6
    2ca4:	00184808 	andseq	r4, r8, r8, lsl #16
    2ca8:	000a9b00 	andeq	r9, sl, r0, lsl #22
    2cac:	50011700 	andpl	r1, r1, r0, lsl #14
    2cb0:	00007802 	andeq	r7, r0, r2, lsl #16
    2cb4:	00101e1b 	andseq	r1, r0, fp, lsl lr
    2cb8:	00186e08 	andseq	r6, r8, r8, lsl #28
    2cbc:	102a1b00 	eorne	r1, sl, r0, lsl #22
    2cc0:	18760800 	ldmdane	r6!, {fp}^
    2cc4:	1b000000 	blne	2ccc <_Min_Stack_Size+0x28cc>
    2cc8:	08000e6a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sl, fp}
    2ccc:	000018eb 	andeq	r1, r0, fp, ror #17
    2cd0:	000e781b 	andeq	r7, lr, fp, lsl r8
    2cd4:	00184108 	andseq	r4, r8, r8, lsl #2
    2cd8:	0ea41b00 	vfmaeq.f64	d1, d4, d0
    2cdc:	18760800 	ldmdane	r6!, {fp}^
    2ce0:	a81b0000 	ldmdage	fp, {}	; <UNPREDICTABLE>
    2ce4:	f708000e 			; <UNDEFINED> instruction: 0xf708000e
    2ce8:	1b000018 	blne	2d50 <_Min_Stack_Size+0x2950>
    2cec:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
    2cf0:	00001841 	andeq	r1, r0, r1, asr #16
    2cf4:	000ec01b 	andeq	ip, lr, fp, lsl r0
    2cf8:	00187608 	andseq	r7, r8, r8, lsl #12
    2cfc:	0ec81c00 	cdpeq	12, 12, cr1, cr8, cr0, {0}
    2d00:	18ff0800 	ldmne	pc!, {fp}^	; <UNPREDICTABLE>
    2d04:	0afe0000 	beq	fff82d0c <_estack+0xdff52d0c>
    2d08:	01170000 	tsteq	r7, r0
    2d0c:	54910251 	ldrpl	r0, [r1], #593	; 0x251
    2d10:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2d14:	1b005891 	blne	18f60 <_Min_Stack_Size+0x18b60>
    2d18:	08000f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp}
    2d1c:	000018a1 	andeq	r1, r0, r1, lsr #17
    2d20:	000f6a1b 	andeq	r6, pc, fp, lsl sl	; <UNPREDICTABLE>
    2d24:	00193008 	andseq	r3, r9, r8
    2d28:	0f6e1b00 	svceq	0x006e1b00
    2d2c:	18410800 	stmdane	r1, {fp}^
    2d30:	b21c0000 	andslt	r0, ip, #0
    2d34:	3c08000f 	stccc	0, cr0, [r8], {15}
    2d38:	2d000019 	stccs	0, cr0, [r0, #-100]	; 0xffffff9c
    2d3c:	1700000b 	strne	r0, [r0, -fp]
    2d40:	78025001 	stmdavc	r2, {r0, ip, lr}
    2d44:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    2d48:	30080010 	andcc	r0, r8, r0, lsl r0
    2d4c:	1b000019 	blne	2db8 <_Min_Stack_Size+0x29b8>
    2d50:	08001036 	stmdaeq	r0, {r1, r2, r4, r5, ip}
    2d54:	0000187d 	andeq	r1, r0, sp, ror r8
    2d58:	00103e1c 	andseq	r3, r0, ip, lsl lr
    2d5c:	00195808 	andseq	r5, r9, r8, lsl #16
    2d60:	000b5300 	andeq	r5, fp, r0, lsl #6
    2d64:	50011700 	andpl	r1, r1, r0, lsl #14
    2d68:	00589102 	subseq	r9, r8, r2, lsl #2
    2d6c:	0010441b 	andseq	r4, r0, fp, lsl r4
    2d70:	0018a108 	andseq	sl, r8, r8, lsl #2
    2d74:	104c1c00 	subne	r1, ip, r0, lsl #24
    2d78:	04180800 	ldreq	r0, [r8], #-2048	; 0x800
    2d7c:	0b700000 	bleq	1c02d84 <_Min_Stack_Size+0x1c02984>
    2d80:	01170000 	tsteq	r7, r0
    2d84:	00740250 	rsbseq	r0, r4, r0, asr r2
    2d88:	10501b00 	subsne	r1, r0, r0, lsl #22
    2d8c:	19300800 	ldmdbne	r0!, {fp}
    2d90:	5c1b0000 	ldcpl	0, cr0, [fp], {-0}
    2d94:	76080010 			; <UNDEFINED> instruction: 0x76080010
    2d98:	1b000018 	blne	2e00 <_Min_Stack_Size+0x2a00>
    2d9c:	08001082 	stmdaeq	r0, {r1, r7, ip}
    2da0:	00001876 	andeq	r1, r0, r6, ror r8
    2da4:	0010be1b 	andseq	fp, r0, fp, lsl lr
    2da8:	0018a108 	andseq	sl, r8, r8, lsl #2
    2dac:	10cc1b00 	sbcne	r1, ip, r0, lsl #22
    2db0:	18a10800 	stmiane	r1!, {fp}
    2db4:	d61c0000 	ldrle	r0, [ip], -r0
    2db8:	48080010 	stmdami	r8, {r4}
    2dbc:	b1000018 	tstlt	r0, r8, lsl r0
    2dc0:	1700000b 	strne	r0, [r0, -fp]
    2dc4:	74025001 	strvc	r5, [r2], #-1
    2dc8:	de1b0024 	cdple	0, 1, cr0, cr11, cr4, {1}
    2dcc:	7d080010 	stcvc	0, cr0, [r8, #-64]	; 0xffffffc0
    2dd0:	00000018 	andeq	r0, r0, r8, lsl r0
    2dd4:	0000ae07 	andeq	sl, r0, r7, lsl #28
    2dd8:	123c2400 	eorsne	r2, ip, #0, 8
    2ddc:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2de0:	00020a01 	andeq	r0, r2, r1, lsl #20
    2de4:	0010e000 	andseq	lr, r0, r0
    2de8:	00005008 	andeq	r5, r0, r8
    2dec:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
    2df0:	1500000c 	strne	r0, [r0, #-12]
    2df4:	00001001 	andeq	r1, r0, r1
    2df8:	e0017801 	and	r7, r1, r1, lsl #16
    2dfc:	70000005 	andvc	r0, r0, r5
    2e00:	28000019 	stmdacs	r0, {r0, r3, r4}
    2e04:	000010e9 	andeq	r1, r0, r9, ror #1
    2e08:	0d017a01 	vstreq	s14, [r1, #-4]
    2e0c:	91000004 	tstls	r0, r4
    2e10:	1c000019 	stcne	0, cr0, [r0], {25}
    2e14:	080010ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, ip}
    2e18:	000018ac 	andeq	r1, r0, ip, lsr #17
    2e1c:	00000c0e 	andeq	r0, r0, lr, lsl #24
    2e20:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2e24:	1c005408 	cfstrsne	mvf5, [r0], {8}
    2e28:	08001112 	stmdaeq	r0, {r1, r4, r8, ip}
    2e2c:	00001884 	andeq	r1, r0, r4, lsl #17
    2e30:	00000c22 	andeq	r0, r0, r2, lsr #24
    2e34:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2e38:	1c001074 	stcne	0, cr1, [r0], {116}	; 0x74
    2e3c:	0800111a 	stmdaeq	r0, {r1, r3, r4, r8, ip}
    2e40:	00001884 	andeq	r1, r0, r4, lsl #17
    2e44:	00000c36 	andeq	r0, r0, r6, lsr ip
    2e48:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2e4c:	1c002474 	cfstrsne	mvf2, [r0], {116}	; 0x74
    2e50:	08001126 	stmdaeq	r0, {r1, r2, r5, r8, ip}
    2e54:	00000888 	andeq	r0, r0, r8, lsl #17
    2e58:	00000c5c 	andeq	r0, r0, ip, asr ip
    2e5c:	02530117 	subseq	r0, r3, #-1073741819	; 0xc0000005
    2e60:	01170075 	tsteq	r7, r5, ror r0
    2e64:	00750252 	rsbseq	r0, r5, r2, asr r2
    2e68:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
    2e6c:	01170075 	tsteq	r7, r5, ror r0
    2e70:	00740250 	rsbseq	r0, r4, r0, asr r2
    2e74:	112e1b00 	teqne	lr, r0, lsl #22
    2e78:	18a10800 	stmiane	r1!, {fp}
    2e7c:	24000000 	strcs	r0, [r0], #-0
    2e80:	000013c4 	andeq	r1, r0, r4, asr #7
    2e84:	d601d701 	strle	sp, [r1], -r1, lsl #14
    2e88:	30000000 	andcc	r0, r0, r0
    2e8c:	34080011 	strcc	r0, [r8], #-17
    2e90:	01000000 	mrseq	r0, (UNDEF: 0)
    2e94:	000cd39c 	muleq	ip, ip, r3
    2e98:	12641500 	rsbne	r1, r4, #0, 10
    2e9c:	d7010000 	strle	r0, [r1, -r0]
    2ea0:	00020a01 	andeq	r0, r2, r1, lsl #20
    2ea4:	0019c500 	andseq	ip, r9, r0, lsl #10
    2ea8:	0d722800 	ldcleq	8, cr2, [r2, #-0]
    2eac:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    2eb0:	0000d601 	andeq	sp, r0, r1, lsl #12
    2eb4:	0019f900 	andseq	pc, r9, r0, lsl #18
    2eb8:	12632800 	rsbne	r2, r3, #0, 16
    2ebc:	da010000 	ble	42ec4 <_Min_Stack_Size+0x42ac4>
    2ec0:	00040801 	andeq	r0, r4, r1, lsl #16
    2ec4:	0019c500 	andseq	ip, r9, r0, lsl #10
    2ec8:	113c1b00 	teqne	ip, r0, lsl #22
    2ecc:	196a0800 	stmdbne	sl!, {fp}^
    2ed0:	481b0000 	ldmdami	fp, {}	; <UNPREDICTABLE>
    2ed4:	a1080011 	tstge	r8, r1, lsl r0
    2ed8:	29000018 	stmdbcs	r0, {r3, r4}
    2edc:	08001160 	stmdaeq	r0, {r5, r6, r8, ip}
    2ee0:	00000888 	andeq	r0, r0, r8, lsl #17
    2ee4:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    2ee8:	00000074 	andeq	r0, r0, r4, ror r0
    2eec:	00100d24 	andseq	r0, r0, r4, lsr #26
    2ef0:	04010100 	streq	r0, [r1], #-256	; 0x100
    2ef4:	000000d6 	ldrdeq	r0, [r0], -r6
    2ef8:	08001164 	stmdaeq	r0, {r2, r5, r6, r8, ip}
    2efc:	00000122 	andeq	r0, r0, r2, lsr #2
    2f00:	0e629c01 	cdpeq	12, 6, cr9, cr2, cr1, {0}
    2f04:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    2f08:	01000015 	tsteq	r0, r5, lsl r0
    2f0c:	020a0401 	andeq	r0, sl, #16777216	; 0x1000000
    2f10:	1a0c0000 	bne	302f18 <_Min_Stack_Size+0x302b18>
    2f14:	33150000 	tstcc	r5, #0
    2f18:	01000013 	tsteq	r0, r3, lsl r0
    2f1c:	0bbb0401 	bleq	feec3f28 <_estack+0xdee93f28>
    2f20:	1ac50000 	bne	ff142f28 <_estack+0xdf112f28>
    2f24:	79150000 	ldmdbvc	r5, {}	; <UNPREDICTABLE>
    2f28:	01000010 	tsteq	r0, r0, lsl r0
    2f2c:	0e620401 	cdpeq	4, 6, cr0, cr2, cr1, {0}
    2f30:	1b3b0000 	blne	ec2f38 <_Min_Stack_Size+0xec2b38>
    2f34:	52150000 	andspl	r0, r5, #0
    2f38:	01000014 	tsteq	r0, r4, lsl r0
    2f3c:	08830401 	stmeq	r3, {r0, sl}
    2f40:	1bb10000 	blne	fec42f48 <_estack+0xdec12f48>
    2f44:	72280000 	eorvc	r0, r8, #0
    2f48:	0100000d 	tsteq	r0, sp
    2f4c:	00d60403 	sbcseq	r0, r6, r3, lsl #8
    2f50:	1c490000 	marne	acc0, r0, r9
    2f54:	7a280000 	bvc	a02f5c <_Min_Stack_Size+0xa02b5c>
    2f58:	0100000e 	tsteq	r0, lr
    2f5c:	00e10404 	rsceq	r0, r1, r4, lsl #8
    2f60:	1c7d0000 	ldclne	0, cr0, [sp], #-0
    2f64:	2d280000 	stccs	0, cr0, [r8, #-0]
    2f68:	01000015 	tsteq	r0, r5, lsl r0
    2f6c:	04080405 	streq	r0, [r8], #-1029	; 0x405
    2f70:	1a0c0000 	bne	302f78 <_Min_Stack_Size+0x302b78>
    2f74:	51260000 	teqpl	r6, r0
    2f78:	a8000008 	stmdage	r0, {r3}
    2f7c:	e8080011 	stmda	r8, {r0, r4}
    2f80:	01000002 	tsteq	r0, r2
    2f84:	0dbe0426 	cfldrseq	mvf0, [lr, #152]!	; 0x98
    2f88:	761a0000 	ldrvc	r0, [sl], -r0
    2f8c:	f3000008 	vhadd.u8	d0, d0, d8
    2f90:	1a00001c 	bne	3008 <_Min_Stack_Size+0x2c08>
    2f94:	0000086a 	andeq	r0, r0, sl, ror #16
    2f98:	00001d46 	andeq	r1, r0, r6, asr #26
    2f9c:	00085e1a 	andeq	r5, r8, sl, lsl lr
    2fa0:	001d6f00 	andseq	r6, sp, r0, lsl #30
    2fa4:	11e21c00 	mvnne	r1, r0, lsl #24
    2fa8:	18240800 	stmdane	r4!, {fp}
    2fac:	0da00000 	stceq	0, cr0, [r0]
    2fb0:	01170000 	tsteq	r7, r0
    2fb4:	00760251 	rsbseq	r0, r6, r1, asr r2
    2fb8:	12221c00 	eorne	r1, r2, #0, 24
    2fbc:	18240800 	stmdane	r4!, {fp}
    2fc0:	0db40000 	ldceq	0, cr0, [r4]
    2fc4:	01170000 	tsteq	r7, r0
    2fc8:	00760251 	rsbseq	r0, r6, r1, asr r2
    2fcc:	12741b00 	rsbsne	r1, r4, #0, 22
    2fd0:	18d40800 	ldmne	r4, {fp}^
    2fd4:	1b000000 	blne	2fdc <_Min_Stack_Size+0x2bdc>
    2fd8:	08001180 	stmdaeq	r0, {r7, r8, ip}
    2fdc:	00001976 	andeq	r1, r0, r6, ror r9
    2fe0:	0011841b 	andseq	r8, r1, fp, lsl r4
    2fe4:	0018a108 	andseq	sl, r8, r8, lsl #2
    2fe8:	11961c00 	orrsne	r1, r6, r0, lsl #24
    2fec:	197d0800 	ldmdbne	sp!, {fp}^
    2ff0:	0de40000 	stcleq	0, cr0, [r4]
    2ff4:	01170000 	tsteq	r7, r0
    2ff8:	00770250 	rsbseq	r0, r7, r0, asr r2
    2ffc:	11a61b00 			; <UNDEFINED> instruction: 0x11a61b00
    3000:	18a10800 	stmiane	r1!, {fp}
    3004:	cc1c0000 	ldcgt	0, cr0, [ip], {-0}
    3008:	7d080011 	stcvc	0, cr0, [r8, #-68]	; 0xffffffbc
    300c:	01000019 	tsteq	r0, r9, lsl r0
    3010:	1700000e 	strne	r0, [r0, -lr]
    3014:	77025001 	strvc	r5, [r2, -r1]
    3018:	d61b0000 	ldrle	r0, [fp], -r0
    301c:	a1080011 	tstge	r8, r1, lsl r0
    3020:	1c000018 	stcne	0, cr0, [r0], {24}
    3024:	08001202 	stmdaeq	r0, {r1, r9, ip}
    3028:	0000197d 	andeq	r1, r0, sp, ror r9
    302c:	00000e1e 	andeq	r0, r0, lr, lsl lr
    3030:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    3034:	1b000077 	blne	3218 <_Min_Stack_Size+0x2e18>
    3038:	0800120c 	stmdaeq	r0, {r2, r3, r9, ip}
    303c:	00001976 	andeq	r1, r0, r6, ror r9
    3040:	0012101b 	andseq	r1, r2, fp, lsl r0
    3044:	0018a108 	andseq	sl, r8, r8, lsl #2
    3048:	12521c00 	subsne	r1, r2, #0, 24
    304c:	18480800 	stmdane	r8, {fp}^
    3050:	0e440000 	cdpeq	0, 4, cr0, cr4, cr0, {0}
    3054:	01170000 	tsteq	r7, r0
    3058:	24740250 	ldrbtcs	r0, [r4], #-592	; 0x250
    305c:	12681c00 	rsbne	r1, r8, #0, 24
    3060:	197d0800 	ldmdbne	sp!, {fp}^
    3064:	0e580000 	cdpeq	0, 5, cr0, cr8, cr0, {0}
    3068:	01170000 	tsteq	r7, r0
    306c:	00770250 	rsbseq	r0, r7, r0, asr r2
    3070:	12841b00 	addne	r1, r4, #0, 22
    3074:	18a10800 	stmiane	r1!, {fp}
    3078:	07000000 	streq	r0, [r0, -r0]
    307c:	00000e67 	andeq	r0, r0, r7, ror #28
    3080:	00d60406 	sbcseq	r0, r6, r6, lsl #8
    3084:	1a240000 	bne	90308c <_Min_Stack_Size+0x902c8c>
    3088:	01000011 	tsteq	r0, r1, lsl r0
    308c:	00d60491 	smullseq	r0, r6, r1, r4
    3090:	12880000 	addne	r0, r8, #0
    3094:	025a0800 	subseq	r0, sl, #0, 16
    3098:	9c010000 	stcls	0, cr0, [r1], {-0}
    309c:	0000119d 	muleq	r0, sp, r1
    30a0:	00152e15 	andseq	r2, r5, r5, lsl lr
    30a4:	04910100 	ldreq	r0, [r1], #256	; 0x100
    30a8:	0000020a 	andeq	r0, r0, sl, lsl #4
    30ac:	00001dcd 	andeq	r1, r0, sp, asr #27
    30b0:	00143615 	andseq	r3, r4, r5, lsl r6
    30b4:	04910100 	ldreq	r0, [r1], #256	; 0x100
    30b8:	00000413 	andeq	r0, r0, r3, lsl r4
    30bc:	00001e17 	andeq	r1, r0, r7, lsl lr
    30c0:	0017a015 	andseq	sl, r7, r5, lsl r0
    30c4:	04910100 	ldreq	r0, [r1], #256	; 0x100
    30c8:	000000ec 	andeq	r0, r0, ip, ror #1
    30cc:	00001e9e 	muleq	r0, lr, lr
    30d0:	0011f915 	andseq	pc, r1, r5, lsl r9	; <UNPREDICTABLE>
    30d4:	04910100 	ldreq	r0, [r1], #256	; 0x100
    30d8:	00000883 	andeq	r0, r0, r3, lsl #17
    30dc:	00001f03 	andeq	r1, r0, r3, lsl #30
    30e0:	00134828 	andseq	r4, r3, r8, lsr #16
    30e4:	04930100 	ldreq	r0, [r3], #256	; 0x100
    30e8:	000000d6 	ldrdeq	r0, [r0], -r6
    30ec:	00001f4d 	andeq	r1, r0, sp, asr #30
    30f0:	00193e25 	andseq	r3, r9, r5, lsr #28
    30f4:	04940100 	ldreq	r0, [r4], #256	; 0x100
    30f8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    30fc:	28589102 	ldmdacs	r8, {r1, r8, ip, pc}^
    3100:	00001157 	andeq	r1, r0, r7, asr r1
    3104:	34049501 	strcc	r9, [r4], #-1281	; 0x501
    3108:	d5000002 	strle	r0, [r0, #-2]
    310c:	2800001f 	stmdacs	r0, {r0, r1, r2, r3, r4}
    3110:	0000152d 	andeq	r1, r0, sp, lsr #10
    3114:	08049601 	stmdaeq	r4, {r0, r9, sl, ip, pc}
    3118:	cd000004 	stcgt	0, cr0, [r0, #-16]
    311c:	2600001d 			; <UNDEFINED> instruction: 0x2600001d
    3120:	00000371 	andeq	r0, r0, r1, ror r3
    3124:	08001302 	stmdaeq	r0, {r1, r8, r9, ip}
    3128:	00000318 	andeq	r0, r0, r8, lsl r3
    312c:	4e051c01 	cdpmi	12, 0, cr1, cr5, cr1, {0}
    3130:	1a00000f 	bne	3174 <_Min_Stack_Size+0x2d74>
    3134:	00000382 	andeq	r0, r0, r2, lsl #7
    3138:	00001ff3 	strdeq	r1, [r0], -r3
    313c:	00031827 	andeq	r1, r3, r7, lsr #16
    3140:	038e2000 	orreq	r2, lr, #0
    3144:	201c0000 	andscs	r0, ip, r0
    3148:	061b0000 	ldreq	r0, [fp], -r0
    314c:	41080013 	tstmi	r8, r3, lsl r0
    3150:	1b000018 	blne	31b8 <_Min_Stack_Size+0x2db8>
    3154:	08001310 	stmdaeq	r0, {r4, r8, r9, ip}
    3158:	00001876 	andeq	r1, r0, r6, ror r8
    315c:	0013e81b 	andseq	lr, r3, fp, lsl r8
    3160:	00187608 	andseq	r7, r8, r8, lsl #12
    3164:	22000000 	andcs	r0, r0, #0
    3168:	00000418 	andeq	r0, r0, r8, lsl r4
    316c:	08001324 	stmdaeq	r0, {r2, r5, r8, r9, ip}
    3170:	00000078 	andeq	r0, r0, r8, ror r0
    3174:	ca053201 	bgt	14f980 <_Min_Stack_Size+0x14f580>
    3178:	1a00000f 	bne	31bc <_Min_Stack_Size+0x2dbc>
    317c:	00000425 	andeq	r0, r0, r5, lsr #8
    3180:	00002048 	andeq	r2, r0, r8, asr #32
    3184:	0013281b 	andseq	r2, r3, fp, lsl r8
    3188:	00184108 	andseq	r4, r8, r8, lsl #2
    318c:	134a1c00 	movtne	r1, #44032	; 0xac00
    3190:	18480800 	stmdane	r8, {fp}^
    3194:	0f880000 	svceq	0x00880000
    3198:	01170000 	tsteq	r7, r0
    319c:	00780250 	rsbseq	r0, r8, r0, asr r2
    31a0:	13521b00 	cmpne	r2, #0, 22
    31a4:	186e0800 	stmdane	lr!, {fp}^
    31a8:	5e1b0000 	cdppl	0, 1, cr0, cr11, cr0, {0}
    31ac:	76080013 			; <UNDEFINED> instruction: 0x76080013
    31b0:	1b000018 	blne	3218 <_Min_Stack_Size+0x2e18>
    31b4:	08001362 	stmdaeq	r0, {r1, r5, r6, r8, r9, ip}
    31b8:	00001841 	andeq	r1, r0, r1, asr #16
    31bc:	0013881c 	andseq	r8, r3, ip, lsl r8
    31c0:	00184808 	andseq	r4, r8, r8, lsl #16
    31c4:	000fb700 	andeq	fp, pc, r0, lsl #14
    31c8:	50011700 	andpl	r1, r1, r0, lsl #14
    31cc:	00007802 	andeq	r7, r0, r2, lsl #16
    31d0:	0013901b 	andseq	r9, r3, fp, lsl r0
    31d4:	00186e08 	andseq	r6, r8, r8, lsl #28
    31d8:	139c1b00 	orrsne	r1, ip, #0, 22
    31dc:	18760800 	ldmdane	r6!, {fp}^
    31e0:	22000000 	andcs	r0, r0, #0
    31e4:	00000418 	andeq	r0, r0, r8, lsl r4
    31e8:	080013e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip}
    31ec:	0000007c 	andeq	r0, r0, ip, ror r0
    31f0:	46053f01 	strmi	r3, [r5], -r1, lsl #30
    31f4:	1a000010 	bne	323c <_Min_Stack_Size+0x2e3c>
    31f8:	00000425 	andeq	r0, r0, r5, lsr #8
    31fc:	0000205b 	andeq	r2, r0, fp, asr r0
    3200:	0013ec1b 	andseq	lr, r3, fp, lsl ip
    3204:	00184108 	andseq	r4, r8, r8, lsl #2
    3208:	14121c00 	ldrne	r1, [r2], #-3072	; 0xc00
    320c:	18480800 	stmdane	r8, {fp}^
    3210:	10040000 	andne	r0, r4, r0
    3214:	01170000 	tsteq	r7, r0
    3218:	00780250 	rsbseq	r0, r8, r0, asr r2
    321c:	141a1b00 	ldrne	r1, [sl], #-2816	; 0xb00
    3220:	186e0800 	stmdane	lr!, {fp}^
    3224:	261b0000 	ldrcs	r0, [fp], -r0
    3228:	76080014 			; <UNDEFINED> instruction: 0x76080014
    322c:	1b000018 	blne	3294 <_Min_Stack_Size+0x2e94>
    3230:	0800142a 	stmdaeq	r0, {r1, r3, r5, sl, ip}
    3234:	00001841 	andeq	r1, r0, r1, asr #16
    3238:	0014501c 	andseq	r5, r4, ip, lsl r0
    323c:	00184808 	andseq	r4, r8, r8, lsl #16
    3240:	00103300 	andseq	r3, r0, r0, lsl #6
    3244:	50011700 	andpl	r1, r1, r0, lsl #14
    3248:	00007802 	andeq	r7, r0, r2, lsl #16
    324c:	0014581b 	andseq	r5, r4, fp, lsl r8
    3250:	00186e08 	andseq	r6, r8, r8, lsl #28
    3254:	14641b00 	strbtne	r1, [r4], #-2816	; 0xb00
    3258:	18760800 	ldmdane	r6!, {fp}^
    325c:	1b000000 	blne	3264 <_Min_Stack_Size+0x2e64>
    3260:	080012a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, ip}
    3264:	000018eb 	andeq	r1, r0, fp, ror #17
    3268:	0012b41b 	andseq	fp, r2, fp, lsl r4
    326c:	00184108 	andseq	r4, r8, r8, lsl #2
    3270:	12d81b00 	sbcsne	r1, r8, #0, 22
    3274:	18760800 	ldmdane	r6!, {fp}^
    3278:	dc1b0000 	ldcle	0, cr0, [fp], {-0}
    327c:	f7080012 			; <UNDEFINED> instruction: 0xf7080012
    3280:	1b000018 	blne	32e8 <_Min_Stack_Size+0x2ee8>
    3284:	080012e0 	stmdaeq	r0, {r5, r6, r7, r9, ip}
    3288:	00001841 	andeq	r1, r0, r1, asr #16
    328c:	0012f41b 	andseq	pc, r2, fp, lsl r4	; <UNPREDICTABLE>
    3290:	00187608 	andseq	r7, r8, r8, lsl #12
    3294:	12fc1c00 	rscsne	r1, ip, #0, 24
    3298:	18ff0800 	ldmne	pc!, {fp}^	; <UNPREDICTABLE>
    329c:	10960000 	addsne	r0, r6, r0
    32a0:	01170000 	tsteq	r7, r0
    32a4:	54910251 	ldrpl	r0, [r1], #593	; 0x251
    32a8:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    32ac:	1c005891 	stcne	8, cr5, [r0], {145}	; 0x91
    32b0:	08001324 	stmdaeq	r0, {r2, r5, r8, r9, ip}
    32b4:	0000193c 	andeq	r1, r0, ip, lsr r9
    32b8:	000010aa 	andeq	r1, r0, sl, lsr #1
    32bc:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    32c0:	1b000078 	blne	34a8 <_Min_Stack_Size+0x30a8>
    32c4:	080013a0 	stmdaeq	r0, {r5, r7, r8, r9, ip}
    32c8:	00001930 	andeq	r1, r0, r0, lsr r9
    32cc:	0013a61b 	andseq	sl, r3, fp, lsl r6
    32d0:	00187d08 	andseq	r7, r8, r8, lsl #26
    32d4:	13aa1b00 			; <UNDEFINED> instruction: 0x13aa1b00
    32d8:	18410800 	stmdane	r1, {fp}^
    32dc:	be1c0000 	cdplt	0, 1, cr0, cr12, cr0, {0}
    32e0:	c0080013 	andgt	r0, r8, r3, lsl r0
    32e4:	e0000003 	and	r0, r0, r3
    32e8:	17000010 	smladne	r0, r0, r0, r0
    32ec:	f3035101 	vrhadd.u8	d5, d3, d1
    32f0:	01175101 	tsteq	r7, r1, lsl #2
    32f4:	00740250 	rsbseq	r0, r4, r0, asr r2
    32f8:	13d01b00 	bicsne	r1, r0, #0, 22
    32fc:	196a0800 	stmdbne	sl!, {fp}^
    3300:	dc1b0000 	ldcle	0, cr0, [fp], {-0}
    3304:	76080013 			; <UNDEFINED> instruction: 0x76080013
    3308:	1b000018 	blne	3370 <_Min_Stack_Size+0x2f70>
    330c:	08001468 	stmdaeq	r0, {r3, r5, r6, sl, ip}
    3310:	00001930 	andeq	r1, r0, r0, lsr r9
    3314:	0014701c 	andseq	r7, r4, ip, lsl r0
    3318:	00195808 	andseq	r5, r9, r8, lsl #16
    331c:	00110f00 	andseq	r0, r1, r0, lsl #30
    3320:	50011700 	andpl	r1, r1, r0, lsl #14
    3324:	00589102 	subseq	r9, r8, r2, lsl #2
    3328:	0014761b 	andseq	r7, r4, fp, lsl r6
    332c:	0018a108 	andseq	sl, r8, r8, lsl #2
    3330:	147c1b00 	ldrbtne	r1, [ip], #-2816	; 0xb00
    3334:	18410800 	stmdane	r1, {fp}^
    3338:	821b0000 	andshi	r0, fp, #0
    333c:	8e080014 	mcrhi	0, 0, r0, cr8, cr4, {0}
    3340:	1b000019 	blne	33ac <_Min_Stack_Size+0x2fac>
    3344:	08001486 	stmdaeq	r0, {r1, r2, r7, sl, ip}
    3348:	00001876 	andeq	r1, r0, r6, ror r8
    334c:	00148e1c 	andseq	r8, r4, ip, lsl lr
    3350:	00041808 	andeq	r1, r4, r8, lsl #16
    3354:	00114700 	andseq	r4, r1, r0, lsl #14
    3358:	50011700 	andpl	r1, r1, r0, lsl #14
    335c:	00007402 	andeq	r7, r0, r2, lsl #8
    3360:	0014921b 	andseq	r9, r4, fp, lsl r2
    3364:	00193008 	andseq	r3, r9, r8
    3368:	149e1b00 	ldrne	r1, [lr], #2816	; 0xb00
    336c:	18760800 	ldmdane	r6!, {fp}^
    3370:	b61c0000 	ldrlt	r0, [ip], -r0
    3374:	48080014 	stmdami	r8, {r2, r4}
    3378:	6d000018 	stcvs	0, cr0, [r0, #-96]	; 0xffffffa0
    337c:	17000011 	smladne	r0, r1, r0, r0
    3380:	74025001 	strvc	r5, [r2], #-1
    3384:	be1b0024 	cdplt	0, 1, cr0, cr11, cr4, {1}
    3388:	7d080014 	stcvc	0, cr0, [r8, #-80]	; 0xffffffb0
    338c:	1c000018 	stcne	0, cr0, [r0], {24}
    3390:	080014c8 	stmdaeq	r0, {r3, r6, r7, sl, ip}
    3394:	00001848 	andeq	r1, r0, r8, asr #16
    3398:	0000118a 	andeq	r1, r0, sl, lsl #3
    339c:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    33a0:	1b001074 	blne	7578 <_Min_Stack_Size+0x7178>
    33a4:	080014d2 	stmdaeq	r0, {r1, r4, r6, r7, sl, ip}
    33a8:	000018a1 	andeq	r1, r0, r1, lsr #17
    33ac:	0014e01b 	andseq	lr, r4, fp, lsl r0
    33b0:	0018a108 	andseq	sl, r8, r8, lsl #2
    33b4:	d0240000 	eorle	r0, r4, r0
    33b8:	01000011 	tsteq	r0, r1, lsl r0
    33bc:	00d6020d 	sbcseq	r0, r6, sp, lsl #4
    33c0:	14e40000 	strbtne	r0, [r4], #0
    33c4:	003c0800 	eorseq	r0, ip, r0, lsl #16
    33c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    33cc:	0000122e 	andeq	r1, r0, lr, lsr #4
    33d0:	00126415 	andseq	r6, r2, r5, lsl r4
    33d4:	020d0100 	andeq	r0, sp, #0, 2
    33d8:	0000020a 	andeq	r0, r0, sl, lsl #4
    33dc:	0000206e 	andeq	r2, r0, lr, rrx
    33e0:	0017a015 	andseq	sl, r7, r5, lsl r0
    33e4:	020d0100 	andeq	r0, sp, #0, 2
    33e8:	000000ec 	andeq	r0, r0, ip, ror #1
    33ec:	000020a2 	andeq	r2, r0, r2, lsr #1
    33f0:	000d7228 	andeq	r7, sp, r8, lsr #4
    33f4:	020f0100 	andeq	r0, pc, #0, 2
    33f8:	000000d6 	ldrdeq	r0, [r0], -r6
    33fc:	000020d6 	ldrdeq	r2, [r0], -r6
    3400:	00126328 	andseq	r6, r2, r8, lsr #6
    3404:	02100100 	andseq	r0, r0, #0, 2
    3408:	00000408 	andeq	r0, r0, r8, lsl #8
    340c:	0000206e 	andeq	r2, r0, lr, rrx
    3410:	0014f21b 	andseq	pc, r4, fp, lsl r2	; <UNPREDICTABLE>
    3414:	00196a08 	andseq	r6, r9, r8, lsl #20
    3418:	15021c00 	strne	r1, [r2, #-3072]	; 0xc00
    341c:	0e6d0800 	cdpeq	8, 6, cr0, cr13, cr0, {0}
    3420:	12240000 	eorne	r0, r4, #0
    3424:	01170000 	tsteq	r7, r0
    3428:	17300153 			; <UNDEFINED> instruction: 0x17300153
    342c:	75025201 	strvc	r5, [r2, #-513]	; 0x201
    3430:	51011700 	tstpl	r1, r0, lsl #14
    3434:	01173001 	tsteq	r7, r1
    3438:	00740250 	rsbseq	r0, r4, r0, asr r2
    343c:	151e1b00 	ldrne	r1, [lr, #-2816]	; 0xb00
    3440:	18a10800 	stmiane	r1!, {fp}
    3444:	24000000 	strcs	r0, [r0], #-0
    3448:	0000124e 	andeq	r1, r0, lr, asr #4
    344c:	d6054e01 	strle	r4, [r5], -r1, lsl #28
    3450:	20000000 	andcs	r0, r0, r0
    3454:	82080015 	andhi	r0, r8, #21
    3458:	01000000 	mrseq	r0, (UNDEF: 0)
    345c:	0013339c 	mulseq	r3, ip, r3
    3460:	152e1500 	strne	r1, [lr, #-1280]!	; 0x500
    3464:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    3468:	00020a05 	andeq	r0, r2, r5, lsl #20
    346c:	0020f500 	eoreq	pc, r0, r0, lsl #10
    3470:	14361500 	ldrtne	r1, [r6], #-1280	; 0x500
    3474:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    3478:	00041305 	andeq	r1, r4, r5, lsl #6
    347c:	00216900 	eoreq	r6, r1, r0, lsl #18
    3480:	10791500 	rsbsne	r1, r9, r0, lsl #10
    3484:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    3488:	000e6205 	andeq	r6, lr, r5, lsl #4
    348c:	0021b300 	eoreq	fp, r1, r0, lsl #6
    3490:	0d722800 	ldcleq	8, cr2, [r2, #-0]
    3494:	50010000 	andpl	r0, r1, r0
    3498:	0000d605 	andeq	sp, r0, r5, lsl #12
    349c:	0021fd00 	eoreq	pc, r1, r0, lsl #26
    34a0:	0e7a2800 	cdpeq	8, 7, cr2, cr10, cr0, {0}
    34a4:	51010000 	mrspl	r0, (UNDEF: 1)
    34a8:	0000e105 	andeq	lr, r0, r5, lsl #2
    34ac:	00223100 	eoreq	r3, r2, r0, lsl #2
    34b0:	152d2800 	strne	r2, [sp, #-2048]!	; 0x800
    34b4:	52010000 	andpl	r0, r1, #0
    34b8:	00040805 	andeq	r0, r4, r5, lsl #16
    34bc:	0020f500 	eoreq	pc, r0, r0, lsl #10
    34c0:	15301b00 	ldrne	r1, [r0, #-2816]!	; 0xb00
    34c4:	19760800 	ldmdbne	r6!, {fp}^
    34c8:	341b0000 	ldrcc	r0, [fp], #-0
    34cc:	a1080015 	tstge	r8, r5, lsl r0
    34d0:	1c000018 	stcne	0, cr0, [r0], {24}
    34d4:	08001542 	stmdaeq	r0, {r1, r6, r8, sl, ip}
    34d8:	0000197d 	andeq	r1, r0, sp, ror r9
    34dc:	000012ce 	andeq	r1, r0, lr, asr #5
    34e0:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    34e4:	1b000077 	blne	36c8 <_Min_Stack_Size+0x32c8>
    34e8:	0800154a 	stmdaeq	r0, {r1, r3, r6, r8, sl, ip}
    34ec:	000018a1 	andeq	r1, r0, r1, lsr #17
    34f0:	0015541c 	andseq	r5, r5, ip, lsl r4
    34f4:	0003c008 	andeq	ip, r3, r8
    34f8:	0012f100 	andseq	pc, r2, r0, lsl #2
    34fc:	51011700 	tstpl	r1, r0, lsl #14
    3500:	17007602 	strne	r7, [r0, -r2, lsl #12]
    3504:	74025001 	strvc	r5, [r2], #-1
    3508:	6e1c0000 	cdpvs	0, 1, cr0, cr12, cr0, {0}
    350c:	7d080015 	stcvc	0, cr0, [r8, #-84]	; 0xffffffac
    3510:	05000019 	streq	r0, [r0, #-25]
    3514:	17000013 	smladne	r0, r3, r0, r0
    3518:	77025001 	strvc	r5, [r2, -r1]
    351c:	7c1b0000 	ldcvc	0, cr0, [fp], {-0}
    3520:	a1080015 	tstge	r8, r5, lsl r0
    3524:	1c000018 	stcne	0, cr0, [r0], {24}
    3528:	0800158c 	stmdaeq	r0, {r2, r3, r7, r8, sl, ip}
    352c:	00001848 	andeq	r1, r0, r8, asr #16
    3530:	00001322 	andeq	r1, r0, r2, lsr #6
    3534:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    3538:	29001074 	stmdbcs	r0, {r2, r4, r5, r6, ip}
    353c:	0800159e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, sl, ip}
    3540:	0000197d 	andeq	r1, r0, sp, ror r9
    3544:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    3548:	00000077 	andeq	r0, r0, r7, ror r0
    354c:	0010c224 	andseq	ip, r0, r4, lsr #4
    3550:	05a50100 	streq	r0, [r5, #256]!	; 0x100
    3554:	000000d6 	ldrdeq	r0, [r0], -r6
    3558:	080015a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip}
    355c:	0000004c 	andeq	r0, r0, ip, asr #32
    3560:	14159c01 	ldrne	r9, [r5], #-3073	; 0xc01
    3564:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    3568:	01000015 	tsteq	r0, r5, lsl r0
    356c:	020a05a5 	andeq	r0, sl, #692060160	; 0x29400000
    3570:	22700000 	rsbscs	r0, r0, #0
    3574:	36150000 	ldrcc	r0, [r5], -r0
    3578:	01000014 	tsteq	r0, r4, lsl r0
    357c:	041305a5 	ldreq	r0, [r3], #-1445	; 0x5a5
    3580:	22ba0000 	adcscs	r0, sl, #0
    3584:	72280000 	eorvc	r0, r8, #0
    3588:	0100000d 	tsteq	r0, sp
    358c:	00d605a7 	sbcseq	r0, r6, r7, lsr #11
    3590:	231d0000 	tstcs	sp, #0
    3594:	7a280000 	bvc	a0359c <_Min_Stack_Size+0xa0319c>
    3598:	0100000e 	tsteq	r0, lr
    359c:	00e105a8 	rsceq	r0, r1, r8, lsr #11
    35a0:	233b0000 	teqcs	fp, #0
    35a4:	57280000 	strpl	r0, [r8, -r0]!
    35a8:	01000011 	tsteq	r0, r1, lsl r0
    35ac:	023405a9 	eorseq	r0, r4, #708837376	; 0x2a400000
    35b0:	236f0000 	cmncs	pc, #0
    35b4:	2d280000 	stccs	0, cr0, [r8, #-0]
    35b8:	01000015 	tsteq	r0, r5, lsl r0
    35bc:	040805aa 	streq	r0, [r8], #-1450	; 0x5aa
    35c0:	22700000 	rsbscs	r0, r0, #0
    35c4:	b21b0000 	andslt	r0, fp, #0
    35c8:	76080015 			; <UNDEFINED> instruction: 0x76080015
    35cc:	1b000019 	blne	3638 <_Min_Stack_Size+0x3238>
    35d0:	080015b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, ip}
    35d4:	000018a1 	andeq	r1, r0, r1, lsr #17
    35d8:	0015c21c 	andseq	ip, r5, ip, lsl r2
    35dc:	00197d08 	andseq	r7, r9, r8, lsl #26
    35e0:	0013d300 	andseq	sp, r3, r0, lsl #6
    35e4:	50011700 	andpl	r1, r1, r0, lsl #14
    35e8:	00007702 	andeq	r7, r0, r2, lsl #14
    35ec:	0015ca1b 	andseq	ip, r5, fp, lsl sl
    35f0:	0018a108 	andseq	sl, r8, r8, lsl #2
    35f4:	15d81c00 	ldrbne	r1, [r8, #3072]	; 0xc00
    35f8:	03c00800 	biceq	r0, r0, #0, 16
    35fc:	13f70000 	mvnsne	r0, #0
    3600:	01170000 	tsteq	r7, r0
    3604:	01f30351 	mvnseq	r0, r1, asr r3
    3608:	50011751 	andpl	r1, r1, r1, asr r7
    360c:	00007402 	andeq	r7, r0, r2, lsl #8
    3610:	0015e01c 	andseq	lr, r5, ip, lsl r0
    3614:	00197d08 	andseq	r7, r9, r8, lsl #26
    3618:	00140b00 	andseq	r0, r4, r0, lsl #22
    361c:	50011700 	andpl	r1, r1, r0, lsl #14
    3620:	00007702 	andeq	r7, r0, r2, lsl #14
    3624:	0015ee1b 	andseq	lr, r5, fp, lsl lr
    3628:	0018a108 	andseq	sl, r8, r8, lsl #2
    362c:	3a240000 	bcc	903634 <_Min_Stack_Size+0x903234>
    3630:	01000010 	tsteq	r0, r0, lsl r0
    3634:	00e105da 	ldrdeq	r0, [r1], #90	; 0x5a	; <UNPREDICTABLE>
    3638:	15f00000 	ldrbne	r0, [r0, #0]!
    363c:	001a0800 	andseq	r0, sl, r0, lsl #16
    3640:	9c010000 	stcls	0, cr0, [r1], {-0}
    3644:	0000146b 	andeq	r1, r0, fp, ror #8
    3648:	00152e15 	andseq	r2, r5, r5, lsl lr
    364c:	05da0100 	ldrbeq	r0, [sl, #256]	; 0x100
    3650:	0000146b 	andeq	r1, r0, fp, ror #8
    3654:	00002382 	andeq	r2, r0, r2, lsl #7
    3658:	000d7128 	andeq	r7, sp, r8, lsr #2
    365c:	05dc0100 	ldrbeq	r0, [ip, #256]	; 0x100
    3660:	000000e1 	andeq	r0, r0, r1, ror #1
    3664:	000023c4 	andeq	r2, r0, r4, asr #7
    3668:	0015fa1b 	andseq	pc, r5, fp, lsl sl	; <UNPREDICTABLE>
    366c:	00184108 	andseq	r4, r8, r8, lsl #2
    3670:	16001b00 	strne	r1, [r0], -r0, lsl #22
    3674:	18760800 	ldmdane	r6!, {fp}^
    3678:	081b0000 	ldmdaeq	fp, {}	; <UNPREDICTABLE>
    367c:	a1080016 	tstge	r8, r6, lsl r0
    3680:	00000018 	andeq	r0, r0, r8, lsl r0
    3684:	00020a07 	andeq	r0, r2, r7, lsl #20
    3688:	15892400 	strne	r2, [r9, #1024]	; 0x400
    368c:	ea010000 	b	43694 <_Min_Stack_Size+0x43294>
    3690:	0000e105 	andeq	lr, r0, r5, lsl #2
    3694:	00160c00 	andseq	r0, r6, r0, lsl #24
    3698:	00001e08 	andeq	r1, r0, r8, lsl #28
    369c:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
    36a0:	15000014 	strne	r0, [r0, #-20]
    36a4:	0000152e 	andeq	r1, r0, lr, lsr #10
    36a8:	6b05ea01 	blvs	17deb4 <_Min_Stack_Size+0x17dab4>
    36ac:	d7000014 	smladle	r0, r4, r0, r0
    36b0:	28000023 	stmdacs	r0, {r0, r1, r5}
    36b4:	00000d71 	andeq	r0, r0, r1, ror sp
    36b8:	e105ec01 	tst	r5, r1, lsl #24
    36bc:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    36c0:	28000024 	stmdacs	r0, {r2, r5}
    36c4:	0000152d 	andeq	r1, r0, sp, lsr #10
    36c8:	0d05ed01 	stceq	13, cr14, [r5, #-4]
    36cc:	d7000004 	strle	r0, [r0, -r4]
    36d0:	1b000023 	blne	3764 <_Min_Stack_Size+0x3364>
    36d4:	08001616 	stmdaeq	r0, {r1, r2, r4, r9, sl, ip}
    36d8:	00001841 	andeq	r1, r0, r1, asr #16
    36dc:	0016201b 	andseq	r2, r6, fp, lsl r0
    36e0:	00187608 	andseq	r7, r8, r8, lsl #12
    36e4:	16281b00 	strtne	r1, [r8], -r0, lsl #22
    36e8:	18a10800 	stmiane	r1!, {fp}
    36ec:	24000000 	strcs	r0, [r0], #-0
    36f0:	00001315 	andeq	r1, r0, r5, lsl r3
    36f4:	e105fc01 	tst	r5, r1, lsl #24
    36f8:	2c000000 	stccs	0, cr0, [r0], {-0}
    36fc:	0e080016 	mcreq	0, 0, r0, cr8, cr6, {0}
    3700:	01000000 	mrseq	r0, (UNDEF: 0)
    3704:	00151a9c 	mulseq	r5, ip, sl
    3708:	152e1500 	strne	r1, [lr, #-1280]!	; 0x500
    370c:	fc010000 	stc2	0, cr0, [r1], {-0}
    3710:	00146b05 	andseq	r6, r4, r5, lsl #22
    3714:	00242c00 	eoreq	r2, r4, r0, lsl #24
    3718:	0d712800 	ldcleq	8, cr2, [r1, #-0]
    371c:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    3720:	0000e105 	andeq	lr, r0, r5, lsl #2
    3724:	00246600 	eoreq	r6, r4, r0, lsl #12
    3728:	16381b00 	ldrtne	r1, [r8], -r0, lsl #22
    372c:	18a10800 	stmiane	r1!, {fp}
    3730:	2a000000 	bcs	3738 <_Min_Stack_Size+0x3338>
    3734:	0000119d 	muleq	r0, sp, r1
    3738:	3c060801 	stccc	8, cr0, [r6], {1}
    373c:	94080016 	strls	r0, [r8], #-22
    3740:	01000000 	mrseq	r0, (UNDEF: 0)
    3744:	0015a19c 	mulseq	r5, ip, r1
    3748:	152e1500 	strne	r1, [lr, #-1280]!	; 0x500
    374c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    3750:	00020a06 	andeq	r0, r2, r6, lsl #20
    3754:	00247900 	eoreq	r7, r4, r0, lsl #18
    3758:	152d2800 	strne	r2, [sp, #-2048]!	; 0x800
    375c:	0a010000 	beq	43764 <_Min_Stack_Size+0x43364>
    3760:	00040806 	andeq	r0, r4, r6, lsl #16
    3764:	00247900 	eoreq	r7, r4, r0, lsl #18
    3768:	039b2600 	orrseq	r2, fp, #0, 12
    376c:	16420000 	strbne	r0, [r2], -r0
    3770:	03300800 	teqeq	r0, #0, 16
    3774:	11010000 	mrsne	r0, (UNDEF: 1)
    3778:	00157906 	andseq	r7, r5, r6, lsl #18
    377c:	03a82b00 			; <UNDEFINED> instruction: 0x03a82b00
    3780:	30270000 	eorcc	r0, r7, r0
    3784:	20000003 	andcs	r0, r0, r3
    3788:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    378c:	000024d1 	ldrdeq	r2, [r0], -r1
    3790:	801b0000 	andshi	r0, fp, r0
    3794:	c2080016 	andgt	r0, r8, #22
    3798:	2c000018 	stccs	0, cr0, [r0], {24}
    379c:	0800168a 	stmdaeq	r0, {r1, r3, r7, r9, sl, ip}
    37a0:	000018c2 	andeq	r1, r0, r2, asr #17
    37a4:	00001597 	muleq	r0, r7, r5
    37a8:	03500117 	cmpeq	r0, #-1073741819	; 0xc0000005
    37ac:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    37b0:	0016a21b 	andseq	sl, r6, fp, lsl r2
    37b4:	0018a108 	andseq	sl, r8, r8, lsl #2
    37b8:	c4240000 	strtgt	r0, [r4], #-0
    37bc:	01000014 	tsteq	r0, r4, lsl r0
    37c0:	00e1061e 	rsceq	r0, r1, lr, lsl r6
    37c4:	16d00000 	ldrbne	r0, [r0], r0
    37c8:	00040800 	andeq	r0, r4, r0, lsl #16
    37cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    37d0:	000015cc 	andeq	r1, r0, ip, asr #11
    37d4:	00152e15 	andseq	r2, r5, r5, lsl lr
    37d8:	061e0100 	ldreq	r0, [lr], -r0, lsl #2
    37dc:	0000020a 	andeq	r0, r0, sl, lsl #4
    37e0:	0000258d 	andeq	r2, r0, sp, lsl #11
    37e4:	10ad2a00 	adcne	r2, sp, r0, lsl #20
    37e8:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    37ec:	0016d406 	andseq	sp, r6, r6, lsl #8
    37f0:	00000408 	andeq	r0, r0, r8, lsl #8
    37f4:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    37f8:	2d000015 	stccs	0, cr0, [r0, #-84]	; 0xffffffac
    37fc:	0000152e 	andeq	r1, r0, lr, lsr #10
    3800:	0a062801 	beq	18d80c <_Min_Stack_Size+0x18d40c>
    3804:	01000002 	tsteq	r0, r2
    3808:	11752d50 	cmnne	r5, r0, asr sp
    380c:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    3810:	0000e106 	andeq	lr, r0, r6, lsl #2
    3814:	00510100 	subseq	r0, r1, r0, lsl #2
    3818:	00102624 	andseq	r2, r0, r4, lsr #12
    381c:	06320100 	ldrteq	r0, [r2], -r0, lsl #2
    3820:	000000c0 	andeq	r0, r0, r0, asr #1
    3824:	080016d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip}
    3828:	00000006 	andeq	r0, r0, r6
    382c:	162a9c01 	strtne	r9, [sl], -r1, lsl #24
    3830:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    3834:	01000015 	tsteq	r0, r5, lsl r0
    3838:	020a0632 	andeq	r0, sl, #52428800	; 0x3200000
    383c:	25ae0000 	strcs	r0, [lr, #0]!
    3840:	24000000 	strcs	r0, [r0], #-0
    3844:	00001093 	muleq	r0, r3, r0
    3848:	d6071e01 	strle	r1, [r7], -r1, lsl #28
    384c:	e0000000 	and	r0, r0, r0
    3850:	16080016 			; <UNDEFINED> instruction: 0x16080016
    3854:	01000000 	mrseq	r0, (UNDEF: 0)
    3858:	00166e9c 	mulseq	r6, ip, lr
    385c:	152e1500 	strne	r1, [lr, #-1280]!	; 0x500
    3860:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    3864:	00146b07 	andseq	r6, r4, r7, lsl #22
    3868:	0025cf00 	eoreq	ip, r5, r0, lsl #30
    386c:	0d722800 	ldcleq	8, cr2, [r2, #-0]
    3870:	20010000 	andcs	r0, r1, r0
    3874:	0000d607 	andeq	sp, r0, r7, lsl #12
    3878:	00260900 	eoreq	r0, r6, r0, lsl #18
    387c:	16f41b00 	ldrbtne	r1, [r4], r0, lsl #22
    3880:	18a10800 	stmiane	r1!, {fp}
    3884:	24000000 	strcs	r0, [r0], #-0
    3888:	0000137b 	andeq	r1, r0, fp, ror r3
    388c:	d6074501 	strle	r4, [r7], -r1, lsl #10
    3890:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    3894:	16080016 			; <UNDEFINED> instruction: 0x16080016
    3898:	01000000 	mrseq	r0, (UNDEF: 0)
    389c:	0016b29c 	mulseq	r6, ip, r2
    38a0:	152e1500 	strne	r1, [lr, #-1280]!	; 0x500
    38a4:	45010000 	strmi	r0, [r1, #-0]
    38a8:	00146b07 	andseq	r6, r4, r7, lsl #22
    38ac:	00262300 	eoreq	r2, r6, r0, lsl #6
    38b0:	0d722800 	ldcleq	8, cr2, [r2, #-0]
    38b4:	47010000 	strmi	r0, [r1, -r0]
    38b8:	0000d607 	andeq	sp, r0, r7, lsl #12
    38bc:	00265d00 	eoreq	r5, r6, r0, lsl #26
    38c0:	170c1b00 	strne	r1, [ip, -r0, lsl #22]
    38c4:	18a10800 	stmiane	r1!, {fp}
    38c8:	2a000000 	bcs	38d0 <_Min_Stack_Size+0x34d0>
    38cc:	00001216 	andeq	r1, r0, r6, lsl r2
    38d0:	10086c01 	andne	r6, r8, r1, lsl #24
    38d4:	58080017 	stmdapl	r8, {r0, r1, r2, r4}
    38d8:	01000000 	mrseq	r0, (UNDEF: 0)
    38dc:	0016f49c 	mulseq	r6, ip, r4
    38e0:	152e2d00 	strne	r2, [lr, #-3328]!	; 0xd00
    38e4:	6c010000 	stcvs	0, cr0, [r1], {-0}
    38e8:	00020a08 	andeq	r0, r2, r8, lsl #20
    38ec:	2d500100 	ldfcse	f0, [r0, #-0]
    38f0:	00001460 	andeq	r1, r0, r0, ror #8
    38f4:	a3086c01 	movwge	r6, #35841	; 0x8c01
    38f8:	01000000 	mrseq	r0, (UNDEF: 0)
    38fc:	78752e51 	ldmdavc	r5!, {r0, r4, r6, r9, sl, fp, sp}^
    3900:	086e0100 	stmdaeq	lr!, {r8}^
    3904:	000000e1 	andeq	r0, r0, r1, ror #1
    3908:	000026a3 	andeq	r2, r0, r3, lsr #13
    390c:	039b1900 	orrseq	r1, fp, #0, 18
    3910:	17680000 	strbne	r0, [r8, -r0]!
    3914:	00600800 	rsbeq	r0, r0, r0, lsl #16
    3918:	9c010000 	stcls	0, cr0, [r1], {-0}
    391c:	00001718 	andeq	r1, r0, r8, lsl r7
    3920:	0003a82f 	andeq	sl, r3, pc, lsr #16
    3924:	20500100 	subscs	r0, r0, r0, lsl #2
    3928:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    392c:	0000275f 	andeq	r2, r0, pc, asr r7
    3930:	156a2a00 	strbne	r2, [sl, #-2560]!	; 0xa00
    3934:	a4010000 	strge	r0, [r1], #-0
    3938:	0017c808 	andseq	ip, r7, r8, lsl #16
    393c:	0000b008 	andeq	fp, r0, r8
    3940:	039c0100 	orrseq	r0, ip, #0, 2
    3944:	15000018 	strne	r0, [r0, #-24]
    3948:	0000152e 	andeq	r1, r0, lr, lsr #10
    394c:	0a08a401 	beq	22c958 <_Min_Stack_Size+0x22c558>
    3950:	1b000002 	blne	3960 <_Min_Stack_Size+0x3560>
    3954:	15000028 	strne	r0, [r0, #-40]	; 0x28
    3958:	000017a0 	andeq	r1, r0, r0, lsr #15
    395c:	ec08a401 	cfstrs	mvf10, [r8], {1}
    3960:	47000000 	strmi	r0, [r0, -r0]
    3964:	28000028 	stmdacs	r0, {r3, r5}
    3968:	0000152d 	andeq	r1, r0, sp, lsr #10
    396c:	0808a601 	stmdaeq	r8, {r0, r9, sl, sp, pc}
    3970:	73000004 	movwvc	r0, #4
    3974:	26000028 	strcs	r0, [r0], -r8, lsr #32
    3978:	00000418 	andeq	r0, r0, r8, lsl r4
    397c:	080017f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, ip}
    3980:	00000350 	andeq	r0, r0, r0, asr r3
    3984:	da08c001 	ble	233990 <_Min_Stack_Size+0x233590>
    3988:	1a000017 	bne	39ec <_Min_Stack_Size+0x35ec>
    398c:	00000425 	andeq	r0, r0, r5, lsr #8
    3990:	0000289f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    3994:	0017fc1b 	andseq	pc, r7, fp, lsl ip	; <UNPREDICTABLE>
    3998:	00184108 	andseq	r4, r8, r8, lsl #2
    399c:	18221c00 	stmdane	r2!, {sl, fp, ip}
    39a0:	18480800 	stmdane	r8, {fp}^
    39a4:	17980000 	ldrne	r0, [r8, r0]
    39a8:	01170000 	tsteq	r7, r0
    39ac:	00750250 	rsbseq	r0, r5, r0, asr r2
    39b0:	182a1b00 	stmdane	sl!, {r8, r9, fp, ip}
    39b4:	186e0800 	stmdane	lr!, {fp}^
    39b8:	361b0000 	ldrcc	r0, [fp], -r0
    39bc:	76080018 			; <UNDEFINED> instruction: 0x76080018
    39c0:	1b000018 	blne	3a28 <_Min_Stack_Size+0x3628>
    39c4:	0800183a 	stmdaeq	r0, {r1, r3, r4, r5, fp, ip}
    39c8:	00001841 	andeq	r1, r0, r1, asr #16
    39cc:	0018601c 	andseq	r6, r8, ip, lsl r0
    39d0:	00184808 	andseq	r4, r8, r8, lsl #16
    39d4:	0017c700 	andseq	ip, r7, r0, lsl #14
    39d8:	50011700 	andpl	r1, r1, r0, lsl #14
    39dc:	00007502 	andeq	r7, r0, r2, lsl #10
    39e0:	0018681b 	andseq	r6, r8, fp, lsl r8
    39e4:	00186e08 	andseq	r6, r8, r8, lsl #28
    39e8:	18781d00 	ldmdane	r8!, {r8, sl, fp, ip}^
    39ec:	18760800 	ldmdane	r6!, {fp}^
    39f0:	1b000000 	blne	39f8 <_Min_Stack_Size+0x35f8>
    39f4:	080017d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl, ip}
    39f8:	00001841 	andeq	r1, r0, r1, asr #16
    39fc:	0017ea1b 	andseq	lr, r7, fp, lsl sl
    3a00:	00187608 	andseq	r7, r8, r8, lsl #12
    3a04:	17f82900 	ldrbne	r2, [r8, r0, lsl #18]!
    3a08:	19a00800 	stmibne	r0!, {fp}
    3a0c:	01170000 	tsteq	r7, r0
    3a10:	00750251 	rsbseq	r0, r5, r1, asr r2
    3a14:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
    3a18:	00002474 	andeq	r2, r0, r4, ror r4
    3a1c:	00033130 	andeq	r3, r3, r0, lsr r1
    3a20:	00181300 	andseq	r1, r8, r0, lsl #6
    3a24:	00933100 	addseq	r3, r3, r0, lsl #2
    3a28:	00070000 	andeq	r0, r7, r0
    3a2c:	00148332 	andseq	r8, r4, r2, lsr r3
    3a30:	03bb0100 			; <UNDEFINED> instruction: 0x03bb0100
    3a34:	05000018 	streq	r0, [r0, #-24]
    3a38:	0000b803 	andeq	fp, r0, r3, lsl #16
    3a3c:	116e3320 	cmnne	lr, r0, lsr #6
    3a40:	009a0000 	addseq	r0, sl, r0
    3a44:	18410000 	stmdane	r1, {}^	; <UNPREDICTABLE>
    3a48:	9a340000 	bls	d03a50 <_Min_Stack_Size+0xd03650>
    3a4c:	34000000 	strcc	r0, [r0], #-0
    3a50:	000000ae 	andeq	r0, r0, lr, lsr #1
    3a54:	00009334 	andeq	r9, r0, r4, lsr r3
    3a58:	d4350000 	ldrtle	r0, [r5], #-0
    3a5c:	0500000e 	streq	r0, [r0, #-14]
    3a60:	13ee367b 	mvnne	r3, #128974848	; 0x7b00000
    3a64:	ad070000 	stcge	0, cr0, [r7, #-0]
    3a68:	0000d605 	andeq	sp, r0, r5, lsl #12
    3a6c:	00185e00 	andseq	r5, r8, r0, lsl #28
    3a70:	185e3400 	ldmdane	lr, {sl, ip, sp}^
    3a74:	07000000 	streq	r0, [r0, -r0]
    3a78:	00001863 	andeq	r1, r0, r3, ror #16
    3a7c:	18690406 	stmdane	r9!, {r1, r2, sl}^
    3a80:	c4070000 	strgt	r0, [r7], #-0
    3a84:	37000001 	strcc	r0, [r0, -r1]
    3a88:	000013dd 	ldrdeq	r1, [r0], -sp
    3a8c:	3505d407 	strcc	sp, [r5, #-1031]	; 0x407
    3a90:	00000ea4 	andeq	r0, r0, r4, lsr #29
    3a94:	f3357c05 			; <UNDEFINED> instruction: 0xf3357c05
    3a98:	0500000e 	streq	r0, [r0, #-14]
    3a9c:	087d3872 	ldmdaeq	sp!, {r1, r4, r5, r6, fp, ip, sp}^
    3aa0:	50060000 	andpl	r0, r6, r0
    3aa4:	00189601 	andseq	r9, r8, r1, lsl #12
    3aa8:	18963400 	ldmne	r6, {sl, ip, sp}
    3aac:	07000000 	streq	r0, [r0, -r0]
    3ab0:	0000189b 	muleq	r0, fp, r8
    3ab4:	01c40406 	biceq	r0, r4, r6, lsl #8
    3ab8:	66390000 	ldrtvs	r0, [r9], -r0
    3abc:	05000008 	streq	r0, [r0, #-8]
    3ac0:	0000cb7d 	andeq	ip, r0, sp, ror fp
    3ac4:	0bc23600 	bleq	ff0912cc <_estack+0xdf0612cc>
    3ac8:	71090000 	mrsvc	r0, (UNDEF: 9)
    3acc:	00009a01 	andeq	r9, r0, r1, lsl #20
    3ad0:	0018c200 	andseq	ip, r8, r0, lsl #4
    3ad4:	00213400 	eoreq	r3, r1, r0, lsl #8
    3ad8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    3adc:	00000d7a 	andeq	r0, r0, sl, ror sp
    3ae0:	d4017209 	strle	r7, [r1], #-521	; 0x209
    3ae4:	34000018 	strcc	r0, [r0], #-24
    3ae8:	0000009a 	muleq	r0, sl, r0
    3aec:	12ab3800 	adcne	r3, fp, #0, 16
    3af0:	e6070000 	str	r0, [r7], -r0
    3af4:	0018e605 	andseq	lr, r8, r5, lsl #12
    3af8:	18e63400 	stmiane	r6!, {sl, ip, sp}^
    3afc:	07000000 	streq	r0, [r0, -r0]
    3b00:	000001cf 	andeq	r0, r0, pc, asr #3
    3b04:	000e633a 	andeq	r6, lr, sl, lsr r3
    3b08:	05da0700 	ldrbeq	r0, [sl, #1792]	; 0x700
    3b0c:	000000d6 	ldrdeq	r0, [r0], -r6
    3b10:	000efe37 	andeq	pc, lr, r7, lsr lr	; <UNPREDICTABLE>
    3b14:	03cf0700 	biceq	r0, pc, #0, 14
    3b18:	00149936 	andseq	r9, r4, r6, lsr r9
    3b1c:	05ce0700 	strbeq	r0, [lr, #1792]	; 0x700
    3b20:	000000d6 	ldrdeq	r0, [r0], -r6
    3b24:	0000191a 	andeq	r1, r0, sl, lsl r9
    3b28:	00191a34 	andseq	r1, r9, r4, lsr sl
    3b2c:	19253400 	stmdbne	r5!, {sl, ip, sp}
    3b30:	07000000 	streq	r0, [r0, -r0]
    3b34:	0000191f 	andeq	r1, r0, pc, lsl r9
    3b38:	01ff0406 	mvnseq	r0, r6, lsl #8
    3b3c:	2a070000 	bcs	1c3b44 <_Min_Stack_Size+0x1c3744>
    3b40:	06000019 			; <UNDEFINED> instruction: 0x06000019
    3b44:	0000ec04 	andeq	lr, r0, r4, lsl #24
    3b48:	0e463a00 	vmlaeq.f32	s7, s12, s0
    3b4c:	05070000 	streq	r0, [r7, #-0]
    3b50:	0000d604 	andeq	sp, r0, r4, lsl #12
    3b54:	11b33800 			; <UNDEFINED> instruction: 0x11b33800
    3b58:	85070000 	strhi	r0, [r7, #-0]
    3b5c:	00195305 	andseq	r5, r9, r5, lsl #6
    3b60:	18963400 	ldmne	r6, {sl, ip, sp}
    3b64:	53340000 	teqpl	r4, #0
    3b68:	00000019 	andeq	r0, r0, r9, lsl r0
    3b6c:	0000ec07 	andeq	lr, r0, r7, lsl #24
    3b70:	15a03800 	strne	r3, [r0, #2048]!	; 0x800
    3b74:	c8070000 	stmdagt	r7, {}	; <UNPREDICTABLE>
    3b78:	00196a05 	andseq	r6, r9, r5, lsl #20
    3b7c:	191a3400 	ldmdbne	sl, {sl, ip, sp}
    3b80:	3a000000 	bcc	3b88 <_Min_Stack_Size+0x3788>
    3b84:	000012c3 	andeq	r1, r0, r3, asr #5
    3b88:	cf05c307 	svcgt	0x0005c307
    3b8c:	35000001 	strcc	r0, [r0, #-1]
    3b90:	000015b5 			; <UNDEFINED> instruction: 0x000015b5
    3b94:	663bb405 	ldrtvs	fp, [fp], -r5, lsl #8
    3b98:	05000009 	streq	r0, [r0, #-9]
    3b9c:	00198e7e 	andseq	r8, r9, lr, ror lr
    3ba0:	00cb3400 	sbceq	r3, fp, r0, lsl #8
    3ba4:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    3ba8:	0000112f 	andeq	r1, r0, pc, lsr #2
    3bac:	a005e007 	andge	lr, r5, r7
    3bb0:	34000019 	strcc	r0, [r0], #-25
    3bb4:	000018e6 	andeq	r1, r0, r6, ror #17
    3bb8:	154a3c00 	strbne	r3, [sl, #-3072]	; 0xc00
    3bbc:	93070000 	movwls	r0, #28672	; 0x7000
    3bc0:	18963405 	ldmne	r6, {r0, r2, sl, ip, sp}
    3bc4:	53340000 	teqpl	r4, #0
    3bc8:	00000019 	andeq	r0, r0, r9, lsl r0
    3bcc:	00240000 	eoreq	r0, r4, r0
    3bd0:	2c000400 	cfstrscs	mvf0, [r0], {-0}
    3bd4:	0400000d 	streq	r0, [r0], #-13
    3bd8:	0002f301 	andeq	pc, r2, r1, lsl #6
    3bdc:	181c0100 	ldmdane	ip, {r8}
    3be0:	0a000000 	beq	3be8 <_Min_Stack_Size+0x37e8>
    3be4:	00000000 	andeq	r0, r0, r0
    3be8:	18fe0000 	ldmne	lr!, {}^	; <UNPREDICTABLE>
    3bec:	99020000 	stmdbls	r2, {}	; <UNPREDICTABLE>
    3bf0:	02000008 	andeq	r0, r0, #8
    3bf4:	00002cd4 	ldrdeq	r2, [r0], -r4
    3bf8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    3bfc:	00000222 	andeq	r0, r0, r2, lsr #4
    3c00:	69050404 	stmdbvs	r5, {r2, sl}
    3c04:	0300746e 	movweq	r7, #1134	; 0x46e
    3c08:	02020601 	andeq	r0, r2, #1048576	; 0x100000
    3c0c:	df020000 	svcle	0x00020000
    3c10:	03000005 	movweq	r0, #5
    3c14:	00004c1d 	andeq	r4, r0, sp, lsl ip
    3c18:	08010300 	stmdaeq	r1, {r8, r9}
    3c1c:	00000200 	andeq	r0, r0, r0, lsl #4
    3c20:	38050203 	stmdacc	r5, {r0, r1, r9}
    3c24:	02000000 	andeq	r0, r0, #0
    3c28:	00000094 	muleq	r0, r4, r0
    3c2c:	00652b03 	rsbeq	r2, r5, r3, lsl #22
    3c30:	02030000 	andeq	r0, r3, #0
    3c34:	0002aa07 	andeq	sl, r2, r7, lsl #20
    3c38:	05040300 	streq	r0, [r4, #-768]	; 0x300
    3c3c:	0000015d 	andeq	r0, r0, sp, asr r1
    3c40:	00008902 	andeq	r8, r0, r2, lsl #18
    3c44:	7e410300 	cdpvc	3, 4, cr0, cr1, cr0, {0}
    3c48:	03000000 	movweq	r0, #0
    3c4c:	021d0704 	andseq	r0, sp, #4, 14	; 0x100000
    3c50:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    3c54:	00015805 	andeq	r5, r1, r5, lsl #16
    3c58:	07080300 	streq	r0, [r8, -r0, lsl #6]
    3c5c:	00000218 	andeq	r0, r0, r8, lsl r2
    3c60:	42070403 	andmi	r0, r7, #50331648	; 0x3000000
    3c64:	05000000 	streq	r0, [r0, #-0]
    3c68:	08010304 	stmdaeq	r1, {r2, r8, r9}
    3c6c:	00000209 	andeq	r0, r0, r9, lsl #4
    3c70:	00a90406 	adceq	r0, r9, r6, lsl #8
    3c74:	9c070000 	stcls	0, cr0, [r7], {-0}
    3c78:	02000000 	andeq	r0, r0, #0
    3c7c:	000005e1 	andeq	r0, r0, r1, ror #11
    3c80:	00412a04 	subeq	r2, r1, r4, lsl #20
    3c84:	96020000 	strls	r0, [r2], -r0
    3c88:	04000000 	streq	r0, [r0], #-0
    3c8c:	00005a36 	andeq	r5, r0, r6, lsr sl
    3c90:	008b0200 	addeq	r0, fp, r0, lsl #4
    3c94:	42040000 	andmi	r0, r4, #0
    3c98:	00000073 	andeq	r0, r0, r3, ror r0
    3c9c:	00002902 	andeq	r2, r0, r2, lsl #18
    3ca0:	da490500 	ble	12450a8 <_Min_Stack_Size+0x1244ca8>
    3ca4:	06000000 	streq	r0, [r0], -r0
    3ca8:	0000e004 	andeq	lr, r0, r4
    3cac:	00eb0800 	rsceq	r0, fp, r0, lsl #16
    3cb0:	9a090000 	bls	243cb8 <_Min_Stack_Size+0x2438b8>
    3cb4:	00000000 	andeq	r0, r0, r0
    3cb8:	00045602 	andeq	r5, r4, r2, lsl #12
    3cbc:	c45d0600 	ldrbgt	r0, [sp], #-1536	; 0x600
    3cc0:	02000000 	andeq	r0, r0, #0
    3cc4:	000003ef 	andeq	r0, r0, pc, ror #7
    3cc8:	006c5e06 	rsbeq	r5, ip, r6, lsl #28
    3ccc:	ee020000 	cdp	0, 0, cr0, cr2, cr0, {0}
    3cd0:	06000003 	streq	r0, [r0], -r3
    3cd4:	00007e5f 	andeq	r7, r0, pc, asr lr
    3cd8:	01660200 	cmneq	r6, r0, lsl #4
    3cdc:	65060000 	strvs	r0, [r6, #-0]
    3ce0:	000000c4 	andeq	r0, r0, r4, asr #1
    3ce4:	0009ca0a 	andeq	ip, r9, sl, lsl #20
    3ce8:	88071400 	stmdahi	r7, {sl, ip}
    3cec:	00000160 	andeq	r0, r0, r0, ror #2
    3cf0:	0009a60b 	andeq	sl, r9, fp, lsl #12
    3cf4:	0c8a0700 	stceq	7, cr0, [sl], {0}
    3cf8:	00000001 	andeq	r0, r0, r1
    3cfc:	000a9b0b 	andeq	r9, sl, fp, lsl #22
    3d00:	608b0700 	addvs	r0, fp, r0, lsl #14
    3d04:	04000001 	streq	r0, [r0], #-1
    3d08:	0008a00b 	andeq	sl, r8, fp
    3d0c:	608c0700 	addvs	r0, ip, r0, lsl #14
    3d10:	08000001 	stmdaeq	r0, {r0}
    3d14:	0009490b 	andeq	r4, r9, fp, lsl #18
    3d18:	9a8d0700 	bls	fe345920 <_estack+0xde315920>
    3d1c:	0c000000 	stceq	0, cr0, [r0], {-0}
    3d20:	000a3b0b 	andeq	r3, sl, fp, lsl #22
    3d24:	9a8e0700 	bls	fe38592c <_estack+0xde35592c>
    3d28:	10000000 	andne	r0, r0, r0
    3d2c:	17040600 	strne	r0, [r4, -r0, lsl #12]
    3d30:	02000001 	andeq	r0, r0, #1
    3d34:	00000989 	andeq	r0, r0, r9, lsl #19
    3d38:	01179007 	tsteq	r7, r7
    3d3c:	b20a0000 	andlt	r0, sl, #0
    3d40:	0c00000b 	stceq	0, cr0, [r0], {11}
    3d44:	01a29207 			; <UNDEFINED> instruction: 0x01a29207
    3d48:	a60b0000 	strge	r0, [fp], -r0
    3d4c:	07000009 	streq	r0, [r0, -r9]
    3d50:	00010c94 	muleq	r1, r4, ip
    3d54:	9b0b0000 	blls	2c3d5c <_Min_Stack_Size+0x2c395c>
    3d58:	0700000a 	streq	r0, [r0, -sl]
    3d5c:	00016095 	muleq	r1, r5, r0
    3d60:	a00b0400 	andge	r0, fp, r0, lsl #8
    3d64:	07000008 	streq	r0, [r0, -r8]
    3d68:	00016096 	muleq	r1, r6, r0
    3d6c:	02000800 	andeq	r0, r0, #0, 16
    3d70:	00000985 	andeq	r0, r0, r5, lsl #19
    3d74:	01719807 	cmneq	r1, r7, lsl #16
    3d78:	a00a0000 	andge	r0, sl, r0
    3d7c:	14000009 	strne	r0, [r0], #-9
    3d80:	01de9d07 	bicseq	r9, lr, r7, lsl #26
    3d84:	1e0b0000 	cdpne	0, 0, cr0, cr11, cr0, {0}
    3d88:	0700000b 	streq	r0, [r0, -fp]
    3d8c:	0001019f 	muleq	r1, pc, r1	; <UNPREDICTABLE>
    3d90:	aa0b0000 	bge	2c3d98 <_Min_Stack_Size+0x2c3998>
    3d94:	0700000b 	streq	r0, [r0, -fp]
    3d98:	0001dea0 	andeq	sp, r1, r0, lsr #29
    3d9c:	440b0400 	strmi	r0, [fp], #-1024	; 0x400
    3da0:	0700000f 	streq	r0, [r0, -pc]
    3da4:	0001a2a1 	andeq	sl, r1, r1, lsr #5
    3da8:	06000800 	streq	r0, [r0], -r0, lsl #16
    3dac:	00016604 	andeq	r6, r1, r4, lsl #12
    3db0:	097e0200 	ldmdbeq	lr!, {r9}^
    3db4:	a2070000 	andge	r0, r7, #0
    3db8:	000001ad 	andeq	r0, r0, sp, lsr #3
    3dbc:	00004b02 	andeq	r4, r0, r2, lsl #22
    3dc0:	9a630800 	bls	18c5dc8 <_Min_Stack_Size+0x18c59c8>
    3dc4:	0c000000 	stceq	0, cr0, [r0], {-0}
    3dc8:	216d0801 	cmncs	sp, r1, lsl #16
    3dcc:	0d000002 	stceq	0, cr0, [r0, #-8]
    3dd0:	00001ad4 	ldrdeq	r1, [r0], -r4
    3dd4:	18a00d00 	stmiane	r0!, {r8, sl, fp}
    3dd8:	0d010000 	stceq	0, cr0, [r1, #-0]
    3ddc:	00001b36 	andeq	r1, r0, r6, lsr fp
    3de0:	15f30d02 	ldrbne	r0, [r3, #3330]!	; 0xd02
    3de4:	0d030000 	stceq	0, cr0, [r3, #-0]
    3de8:	000018ee 	andeq	r1, r0, lr, ror #17
    3dec:	6d020004 	stcvs	0, cr0, [r2, #-16]
    3df0:	08000019 	stmdaeq	r0, {r0, r3, r4}
    3df4:	0001fa73 	andeq	pc, r1, r3, ror sl	; <UNPREDICTABLE>
    3df8:	11100a00 	tstne	r0, r0, lsl #20
    3dfc:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    3e00:	00025178 	andeq	r5, r2, r8, ror r1
    3e04:	118e0b00 	orrne	r0, lr, r0, lsl #22
    3e08:	7a080000 	bvc	203e10 <_Min_Stack_Size+0x203a10>
    3e0c:	000000f6 	strdeq	r0, [r0], -r6
    3e10:	11e90b00 	mvnne	r0, r0, lsl #22
    3e14:	7b080000 	blvc	203e1c <_Min_Stack_Size+0x203a1c>
    3e18:	0000010c 	andeq	r0, r0, ip, lsl #2
    3e1c:	51020004 	tstpl	r2, r4
    3e20:	08000010 	stmdaeq	r0, {r4}
    3e24:	00022c7c 	andeq	r2, r2, ip, ror ip
    3e28:	01c40a00 	biceq	r0, r4, r0, lsl #20
    3e2c:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    3e30:	00028d81 	andeq	r8, r2, r1, lsl #27
    3e34:	00580b00 	subseq	r0, r8, r0, lsl #22
    3e38:	83080000 	movwhi	r0, #32768	; 0x8000
    3e3c:	0000009a 	muleq	r0, sl, r0
    3e40:	00740b00 	rsbseq	r0, r4, r0, lsl #22
    3e44:	84080000 	strhi	r0, [r8], #-0
    3e48:	000000c4 	andeq	r0, r0, r4, asr #1
    3e4c:	02bd0b04 	adcseq	r0, sp, #4, 22	; 0x1000
    3e50:	85080000 	strhi	r0, [r8, #-0]
    3e54:	000000c4 	andeq	r0, r0, r4, asr #1
    3e58:	d3020008 	movwle	r0, #8200	; 0x2008
    3e5c:	08000001 	stmdaeq	r0, {r0}
    3e60:	00025c86 	andeq	r5, r2, r6, lsl #25
    3e64:	00a30700 	adceq	r0, r3, r0, lsl #14
    3e68:	04060000 	streq	r0, [r6], #-0
    3e6c:	000000eb 	andeq	r0, r0, fp, ror #1
    3e70:	0019e90a 	andseq	lr, r9, sl, lsl #18
    3e74:	98082000 	stmdals	r8, {sp}
    3e78:	00000310 	andeq	r0, r0, r0, lsl r3
    3e7c:	001c9b0b 	andseq	r9, ip, fp, lsl #22
    3e80:	ef9a0800 	svc	0x009a0800
    3e84:	00000001 	andeq	r0, r0, r1
    3e88:	0015d40b 	andseq	sp, r5, fp, lsl #8
    3e8c:	a39b0800 	orrsge	r0, fp, #0, 16
    3e90:	04000000 	streq	r0, [r0], #-0
    3e94:	0019500b 	andseq	r5, r9, fp
    3e98:	019c0800 	orrseq	r0, ip, r0, lsl #16
    3e9c:	08000001 	stmdaeq	r0, {r0}
    3ea0:	0019db0b 	andseq	sp, r9, fp, lsl #22
    3ea4:	219d0800 	orrscs	r0, sp, r0, lsl #16
    3ea8:	0c000002 	stceq	0, cr0, [r0], {2}
    3eac:	00185c0b 	andseq	r5, r8, fp, lsl #24
    3eb0:	019e0800 	orrseq	r0, lr, r0, lsl #16
    3eb4:	10000001 	andne	r0, r0, r1
    3eb8:	001aee0b 	andseq	lr, sl, fp, lsl #28
    3ebc:	019f0800 	orrseq	r0, pc, r0, lsl #16
    3ec0:	14000001 	strne	r0, [r0], #-1
    3ec4:	001add0b 	andseq	sp, sl, fp, lsl #26
    3ec8:	c4a00800 	strtgt	r0, [r0], #2048	; 0x800
    3ecc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3ed0:	001bae0b 	andseq	sl, fp, fp, lsl #28
    3ed4:	b9a10800 	stmiblt	r1!, {fp}
    3ed8:	1c000000 	stcne	0, cr0, [r0], {-0}
    3edc:	17920200 	ldrne	r0, [r2, r0, lsl #4]
    3ee0:	a2080000 	andge	r0, r8, #0
    3ee4:	000002a3 	andeq	r0, r0, r3, lsr #5
    3ee8:	0015fe0a 	andseq	pc, r5, sl, lsl #28
    3eec:	78014c00 	stmdavc	r1, {sl, fp, lr}
    3ef0:	00000394 	muleq	r0, r4, r3
    3ef4:	001c2c0b 	andseq	r2, ip, fp, lsl #24
    3ef8:	947a0100 	ldrbtls	r0, [sl], #-256	; 0x100
    3efc:	00000003 	andeq	r0, r0, r3
    3f00:	0009380b 	andeq	r3, r9, fp, lsl #16
    3f04:	66800100 	strvs	r0, [r0], r0, lsl #2
    3f08:	04000001 	streq	r0, [r0], #-1
    3f0c:	001c5d0b 	andseq	r5, ip, fp, lsl #26
    3f10:	66810100 	strvs	r0, [r1], r0, lsl #2
    3f14:	18000001 	stmdane	r0, {r0}
    3f18:	000b9f0b 	andeq	r9, fp, fp, lsl #30
    3f1c:	01820100 	orreq	r0, r2, r0, lsl #2
    3f20:	2c000001 	stccs	0, cr0, [r0], {1}
    3f24:	001a500b 	andseq	r5, sl, fp
    3f28:	9d830100 	stflss	f0, [r3]
    3f2c:	30000002 	andcc	r0, r0, r2
    3f30:	0015d40b 	andseq	sp, r5, fp, lsl #8
    3f34:	9f840100 	svcls	0x00840100
    3f38:	34000003 	strcc	r0, [r0], #-3
    3f3c:	0016a80b 	andseq	sl, r6, fp, lsl #16
    3f40:	018f0100 	orreq	r0, pc, r0, lsl #2
    3f44:	40000001 	andmi	r0, r0, r1
    3f48:	00194f0b 	andseq	r4, r9, fp, lsl #30
    3f4c:	01900100 	orrseq	r0, r0, r0, lsl #2
    3f50:	44000001 	strmi	r0, [r0], #-1
    3f54:	001aee0b 	andseq	lr, sl, fp, lsl #28
    3f58:	01940100 	orrseq	r0, r4, r0, lsl #2
    3f5c:	48000001 	stmdami	r0, {r0}
    3f60:	9a040600 	bls	105768 <_Min_Stack_Size+0x105368>
    3f64:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    3f68:	000000eb 	andeq	r0, r0, fp, ror #1
    3f6c:	00009c0f 	andeq	r9, r0, pc, lsl #24
    3f70:	0003af00 	andeq	sl, r3, r0, lsl #30
    3f74:	00931000 	addseq	r1, r3, r0
    3f78:	00090000 	andeq	r0, r9, r0
    3f7c:	0016ef02 	andseq	lr, r6, r2, lsl #30
    3f80:	1baa0100 	blne	fea84388 <_estack+0xdea54388>
    3f84:	02000003 	andeq	r0, r0, #3
    3f88:	00001b23 	andeq	r1, r0, r3, lsr #22
    3f8c:	03afae01 			; <UNDEFINED> instruction: 0x03afae01
    3f90:	57110000 	ldrpl	r0, [r1, -r0]
    3f94:	0100001b 	tsteq	r0, fp, lsl r0
    3f98:	00b90bd2 	ldrsbteq	r0, [r9], r2
    3f9c:	ef010000 	svc	0x00010000
    3fa0:	12000003 	andne	r0, r0, #3
    3fa4:	00001677 	andeq	r1, r0, r7, ror r6
    3fa8:	ef0bd201 	svc	0x000bd201
    3fac:	13000003 	movwne	r0, #3
    3fb0:	00001947 	andeq	r1, r0, r7, asr #18
    3fb4:	c40bd401 	strgt	sp, [fp], #-1025	; 0x401
    3fb8:	00000000 	andeq	r0, r0, r0
    3fbc:	03f50406 	mvnseq	r0, #100663296	; 0x6000000
    3fc0:	ae070000 	cdpge	0, 0, cr0, cr7, cr0, {0}
    3fc4:	11000000 	mrsne	r0, (UNDEF: 0)
    3fc8:	00001734 	andeq	r1, r0, r4, lsr r7
    3fcc:	010b7d01 	tsteq	fp, r1, lsl #26
    3fd0:	01000001 	tsteq	r0, r1
    3fd4:	00000474 	andeq	r0, r0, r4, ror r4
    3fd8:	001aaf12 	andseq	sl, sl, r2, lsl pc
    3fdc:	0b7d0100 	bleq	1f443e4 <_Min_Stack_Size+0x1f43fe4>
    3fe0:	00000474 	andeq	r0, r0, r4, ror r4
    3fe4:	000e9d12 	andeq	r9, lr, r2, lsl sp
    3fe8:	0b7d0100 	bleq	1f443f0 <_Min_Stack_Size+0x1f43ff0>
    3fec:	0000047a 	andeq	r0, r0, sl, ror r4
    3ff0:	001aa812 	andseq	sl, sl, r2, lsl r8
    3ff4:	0b7d0100 	bleq	1f443fc <_Min_Stack_Size+0x1f43ffc>
    3ff8:	00000221 	andeq	r0, r0, r1, lsr #4
    3ffc:	00177513 	andseq	r7, r7, r3, lsl r5
    4000:	0b7f0100 	bleq	1fc4408 <_Min_Stack_Size+0x1fc4008>
    4004:	00000480 	andeq	r0, r0, r0, lsl #9
    4008:	001b4c13 	andseq	r4, fp, r3, lsl ip
    400c:	0b7f0100 	bleq	1fc4414 <_Min_Stack_Size+0x1fc4014>
    4010:	00000480 	andeq	r0, r0, r0, lsl #9
    4014:	00161213 	andseq	r1, r6, r3, lsl r2
    4018:	0b800100 	bleq	fe004420 <_estack+0xddfd4420>
    401c:	00000101 	andeq	r0, r0, r1, lsl #2
    4020:	00046514 	andeq	r6, r4, r4, lsl r5
    4024:	09941300 	ldmibeq	r4, {r8, r9, ip}
    4028:	84010000 	strhi	r0, [r1], #-0
    402c:	00048b0b 	andeq	r8, r4, fp, lsl #22
    4030:	13150000 	tstne	r5, #0
    4034:	00000994 	muleq	r0, r4, r9
    4038:	8b0b8c01 	blhi	2e7044 <_Min_Stack_Size+0x2e6c44>
    403c:	00000004 	andeq	r0, r0, r4
    4040:	10040600 	andne	r0, r4, r0, lsl #12
    4044:	06000003 	streq	r0, [r0], -r3
    4048:	0001e404 	andeq	lr, r1, r4, lsl #8
    404c:	86040600 	strhi	r0, [r4], -r0, lsl #12
    4050:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    4054:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    4058:	00047a07 	andeq	r7, r4, r7, lsl #20
    405c:	190c1600 	stmdbne	ip, {r9, sl, ip}
    4060:	12010000 	andne	r0, r1, #0
    4064:	04aa010c 	strteq	r0, [sl], #268	; 0x10c
    4068:	e9130000 	ldmdb	r3, {}	; <UNPREDICTABLE>
    406c:	0100001b 	tsteq	r0, fp, lsl r0
    4070:	04aa0c14 	strteq	r0, [sl], #3092	; 0xc14
    4074:	06000000 	streq	r0, [r0], -r0
    4078:	0003ba04 	andeq	fp, r3, r4, lsl #20
    407c:	1a081100 	bne	208484 <_Min_Stack_Size+0x208084>
    4080:	fc010000 	stc2	0, cr0, [r1], {-0}
    4084:	0000f604 	andeq	pc, r0, r4, lsl #12
    4088:	04e60100 	strbteq	r0, [r6], #256	; 0x100
    408c:	13120000 	tstne	r2, #0
    4090:	01000016 	tsteq	r0, r6, lsl r0
    4094:	04e604fc 	strbteq	r0, [r6], #1276	; 0x4fc
    4098:	72130000 	andsvc	r0, r3, #0
    409c:	0100000d 	tsteq	r0, sp
    40a0:	00f604fe 	ldrshteq	r0, [r6], #78	; 0x4e
    40a4:	e9130000 	ldmdb	r3, {}	; <UNPREDICTABLE>
    40a8:	0100001b 	tsteq	r0, fp, lsl r0
    40ac:	04eb04ff 	strbteq	r0, [fp], #1279	; 0x4ff
    40b0:	07000000 	streq	r0, [r0, -r0]
    40b4:	000001ef 	andeq	r0, r0, pc, ror #3
    40b8:	0004f007 	andeq	pc, r4, r7
    40bc:	f6040600 			; <UNDEFINED> instruction: 0xf6040600
    40c0:	07000004 	streq	r0, [r0, -r4]
    40c4:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    40c8:	00198516 	andseq	r8, r9, r6, lsl r5
    40cc:	0a830100 	beq	fe0c44d4 <_estack+0xde0944d4>
    40d0:	00054f01 	andeq	r4, r5, r1, lsl #30
    40d4:	1be91200 	blne	ffa488dc <_estack+0xdfa188dc>
    40d8:	83010000 	movwhi	r0, #4096	; 0x1000
    40dc:	00054f0a 	andeq	r4, r5, sl, lsl #30
    40e0:	17fb1200 	ldrbne	r1, [fp, r0, lsl #4]!
    40e4:	83010000 	movwhi	r0, #4096	; 0x1000
    40e8:	0002980a 	andeq	r9, r2, sl, lsl #16
    40ec:	0b9f1200 	bleq	fe7c88f4 <_estack+0xde7988f4>
    40f0:	83010000 	movwhi	r0, #4096	; 0x1000
    40f4:	0001010a 	andeq	r0, r1, sl, lsl #2
    40f8:	1b861200 	blne	fe188900 <_estack+0xde158900>
    40fc:	83010000 	movwhi	r0, #4096	; 0x1000
    4100:	0005540a 	andeq	r5, r5, sl, lsl #8
    4104:	17141200 	ldrne	r1, [r4, -r0, lsl #4]
    4108:	83010000 	movwhi	r0, #4096	; 0x1000
    410c:	0005640a 	andeq	r6, r5, sl, lsl #8
    4110:	00781700 	rsbseq	r1, r8, r0, lsl #14
    4114:	010a8501 	tsteq	sl, r1, lsl #10
    4118:	00000001 	andeq	r0, r0, r1
    411c:	0004aa07 	andeq	sl, r4, r7, lsl #20
    4120:	05590700 	ldrbeq	r0, [r9, #-1792]	; 0x700
    4124:	04060000 	streq	r0, [r6], #-0
    4128:	0000055f 	andeq	r0, r0, pc, asr r5
    412c:	00028d07 	andeq	r8, r2, r7, lsl #26
    4130:	00b90700 	adcseq	r0, r9, r0, lsl #14
    4134:	8f160000 	svchi	0x00160000
    4138:	0100001b 	tsteq	r0, fp, lsl r0
    413c:	83010b38 	movwhi	r0, #6968	; 0x1b38
    4140:	12000005 	andne	r0, r0, #5
    4144:	00000bcf 	andeq	r0, r0, pc, asr #23
    4148:	830b3801 	movwhi	r3, #47105	; 0xb801
    414c:	00000005 	andeq	r0, r0, r5
    4150:	00010c07 	andeq	r0, r1, r7, lsl #24
    4154:	0efe1800 	cdpeq	8, 15, cr1, cr14, cr0, {0}
    4158:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    415c:	29160105 	ldmdbcs	r6, {r0, r2, r8}
    4160:	0100001b 	tsteq	r0, fp, lsl r0
    4164:	ab010c02 	blge	47174 <_Min_Stack_Size+0x46d74>
    4168:	12000005 	andne	r0, r0, #5
    416c:	00001be9 	andeq	r1, r0, r9, ror #23
    4170:	aa0c0201 	bge	30497c <_Min_Stack_Size+0x30457c>
    4174:	00000004 	andeq	r0, r0, r4
    4178:	0015a019 	andseq	sl, r5, r9, lsl r0
    417c:	09800100 	stmibeq	r0, {r8}
    4180:	0005c501 	andeq	ip, r5, r1, lsl #10
    4184:	193d1200 	ldmdbne	sp!, {r9, ip}
    4188:	80010000 	andhi	r0, r1, r0
    418c:	0005c509 	andeq	ip, r5, r9, lsl #10
    4190:	ca070000 	bgt	1c4198 <_Min_Stack_Size+0x1c3d98>
    4194:	06000005 	streq	r0, [r0], -r5
    4198:	00025104 	andeq	r5, r2, r4, lsl #2
    419c:	1c451a00 	mcrrne	10, 0, r1, r5, cr0
    41a0:	ef010000 	svc	0x00010000
    41a4:	0018780a 	andseq	r7, r8, sl, lsl #16
    41a8:	00006008 	andeq	r6, r0, r8
    41ac:	799c0100 	ldmibvc	ip, {r8}
    41b0:	1b000006 	blne	41d0 <_Min_Stack_Size+0x3dd0>
    41b4:	00000b9f 	muleq	r0, pc, fp	; <UNPREDICTABLE>
    41b8:	010af101 	tsteq	sl, r1, lsl #2
    41bc:	c0000001 	andgt	r0, r0, r1
    41c0:	1c000028 	stcne	0, cr0, [r0], {40}	; 0x28
    41c4:	08001886 	stmdaeq	r0, {r1, r2, r7, fp, ip}
    41c8:	000022db 	ldrdeq	r2, [r0], -fp
    41cc:	0000060f 	andeq	r0, r0, pc, lsl #12
    41d0:	0750011d 	smmlaeq	r0, sp, r1, r0
    41d4:	00740075 	rsbseq	r0, r4, r5, ror r0
    41d8:	001c4422 	andseq	r4, ip, r2, lsr #8
    41dc:	0018941c 	andseq	r9, r8, ip, lsl r4
    41e0:	0022db08 	eoreq	sp, r2, r8, lsl #22
    41e4:	00062300 	andeq	r2, r6, r0, lsl #6
    41e8:	50011d00 	andpl	r1, r1, r0, lsl #26
    41ec:	00007502 	andeq	r7, r0, r2, lsl #10
    41f0:	00189a1c 	andseq	r9, r8, ip, lsl sl
    41f4:	0022db08 	eoreq	sp, r2, r8, lsl #22
    41f8:	00063700 	andeq	r3, r6, r0, lsl #14
    41fc:	50011d00 	andpl	r1, r1, r0, lsl #26
    4200:	00007402 	andeq	r7, r0, r2, lsl #8
    4204:	0018a01c 	andseq	sl, r8, ip, lsl r0
    4208:	0022db08 	eoreq	sp, r2, r8, lsl #22
    420c:	00064e00 	andeq	r4, r6, r0, lsl #28
    4210:	50011d00 	andpl	r1, r1, r0, lsl #26
    4214:	01880305 	orreq	r0, r8, r5, lsl #6
    4218:	1c002000 	stcne	0, cr2, [r0], {-0}
    421c:	080018a6 	stmdaeq	r0, {r1, r2, r5, r7, fp, ip}
    4220:	000022db 	ldrdeq	r2, [r0], -fp
    4224:	00000665 	andeq	r0, r0, r5, ror #12
    4228:	0550011d 	ldrbeq	r0, [r0, #-285]	; 0x11d
    422c:	00010403 	andeq	r0, r1, r3, lsl #8
    4230:	ac1e0020 	ldcge	0, cr0, [lr], {32}
    4234:	db080018 	blle	20429c <_Min_Stack_Size+0x203e9c>
    4238:	1d000022 	stcne	0, cr0, [r0, #-136]	; 0xffffff78
    423c:	03055001 	movweq	r5, #20481	; 0x5001
    4240:	200001d8 	ldrdcs	r0, [r0], -r8
    4244:	161f0000 	ldrne	r0, [pc], -r0
    4248:	01000000 	mrseq	r0, (UNDEF: 0)
    424c:	00f60203 	rscseq	r0, r6, r3, lsl #4
    4250:	11010000 	mrsne	r0, (UNDEF: 1)
    4254:	12000007 	andne	r0, r0, #7
    4258:	000018b8 			; <UNDEFINED> instruction: 0x000018b8
    425c:	cf020301 	svcgt	0x00020301
    4260:	12000000 	andne	r0, r0, #0
    4264:	000017fb 	strdeq	r1, [r0], -fp
    4268:	98020301 	stmdals	r2, {r0, r8, r9}
    426c:	12000002 	andne	r0, r0, #2
    4270:	00001714 	andeq	r1, r0, r4, lsl r7
    4274:	64020301 	strvs	r0, [r2], #-769	; 0x301
    4278:	12000005 	andne	r0, r0, #5
    427c:	0000025e 	andeq	r0, r0, lr, asr r2
    4280:	11020301 	tstne	r2, r1, lsl #6
    4284:	12000007 	andne	r0, r0, #7
    4288:	00000b9f 	muleq	r0, pc, fp	; <UNPREDICTABLE>
    428c:	01020301 	tsteq	r2, r1, lsl #6
    4290:	12000001 	andne	r0, r0, #1
    4294:	00001c6c 	andeq	r1, r0, ip, ror #24
    4298:	16020301 	strne	r0, [r2], -r1, lsl #6
    429c:	12000007 	andne	r0, r0, #7
    42a0:	00001c04 	andeq	r1, r0, r4, lsl #24
    42a4:	21020301 	tstcs	r2, r1, lsl #6
    42a8:	12000007 	andne	r0, r0, #7
    42ac:	00001b86 	andeq	r1, r0, r6, lsl #23
    42b0:	54020301 	strpl	r0, [r2], #-769	; 0x301
    42b4:	13000005 	movwne	r0, #5
    42b8:	00000d72 	andeq	r0, r0, r2, ror sp
    42bc:	f6020501 			; <UNDEFINED> instruction: 0xf6020501
    42c0:	13000000 	movwne	r0, #0
    42c4:	000018a7 	andeq	r1, r0, r7, lsr #17
    42c8:	aa020601 	bge	85ad4 <_Min_Stack_Size+0x856d4>
    42cc:	15000004 	strne	r0, [r0, #-4]
    42d0:	001c2c13 	andseq	r2, ip, r3, lsl ip
    42d4:	02110100 	andseq	r0, r1, #0, 2
    42d8:	0000029d 	muleq	r0, sp, r2
    42dc:	9a070000 	bls	1c42e4 <_Min_Stack_Size+0x1c3ee4>
    42e0:	07000000 	streq	r0, [r0, -r0]
    42e4:	0000071b 	andeq	r0, r0, fp, lsl r7
    42e8:	01ef0406 	mvneq	r0, r6, lsl #8
    42ec:	9d070000 	stcls	0, cr0, [r7, #-0]
    42f0:	11000002 	tstne	r0, r2
    42f4:	000016b4 			; <UNDEFINED> instruction: 0x000016b4
    42f8:	aa0b5601 	bge	2d9b04 <_Min_Stack_Size+0x2d9704>
    42fc:	01000004 	tsteq	r0, r4
    4300:	0000075c 	andeq	r0, r0, ip, asr r7
    4304:	00171412 	andseq	r1, r7, r2, lsl r4
    4308:	0b560100 	bleq	1584710 <_Min_Stack_Size+0x1584310>
    430c:	00000564 	andeq	r0, r0, r4, ror #10
    4310:	001c0412 	andseq	r0, ip, r2, lsl r4
    4314:	0b560100 	bleq	158471c <_Min_Stack_Size+0x158431c>
    4318:	00000721 	andeq	r0, r0, r1, lsr #14
    431c:	0018a713 	andseq	sl, r8, r3, lsl r7
    4320:	0b580100 	bleq	1604728 <_Min_Stack_Size+0x1604328>
    4324:	000004aa 	andeq	r0, r0, sl, lsr #9
    4328:	06792000 	ldrbteq	r2, [r9], -r0
    432c:	18d80000 	ldmne	r8, {}^	; <UNPREDICTABLE>
    4330:	01a80800 			; <UNDEFINED> instruction: 0x01a80800
    4334:	9c010000 	stcls	0, cr0, [r1], {-0}
    4338:	00000942 	andeq	r0, r0, r2, asr #18
    433c:	00068a21 	andeq	r8, r6, r1, lsr #20
    4340:	0028d400 	eoreq	sp, r8, r0, lsl #8
    4344:	06962100 	ldreq	r2, [r6], r0, lsl #2
    4348:	296c0000 	stmdbcs	ip!, {}^	; <UNPREDICTABLE>
    434c:	a2210000 	eorge	r0, r1, #0
    4350:	eb000006 	bl	4370 <_Min_Stack_Size+0x3f70>
    4354:	21000029 	tstcs	r0, r9, lsr #32
    4358:	000006ae 	andeq	r0, r0, lr, lsr #13
    435c:	00002a3e 	andeq	r2, r0, lr, lsr sl
    4360:	0006ba21 	andeq	fp, r6, r1, lsr #20
    4364:	002a9600 	eoreq	r9, sl, r0, lsl #12
    4368:	06c62100 	strbeq	r2, [r6], r0, lsl #2
    436c:	2ace0000 	bcs	ff384374 <_estack+0xdf354374>
    4370:	d2210000 	eorle	r0, r1, #0
    4374:	06000006 	streq	r0, [r0], -r6
    4378:	2100002b 	tstcs	r0, fp, lsr #32
    437c:	000006de 	ldrdeq	r0, [r0], -lr
    4380:	00002b3e 	andeq	r2, r0, lr, lsr fp
    4384:	0006ea22 	andeq	lr, r6, r2, lsr #20
    4388:	002b7600 	eoreq	r7, fp, r0, lsl #12
    438c:	06f62300 	ldrbteq	r2, [r6], r0, lsl #6
    4390:	54010000 	strpl	r0, [r1], #-0
    4394:	00072624 	andeq	r2, r7, r4, lsr #12
    4398:	0018fa00 	andseq	pc, r8, r0, lsl #20
    439c:	00043808 	andeq	r3, r4, r8, lsl #16
    43a0:	020d0100 	andeq	r0, sp, #0, 2
    43a4:	0000084f 	andeq	r0, r0, pc, asr #16
    43a8:	00074321 	andeq	r4, r7, r1, lsr #6
    43ac:	002ba300 	eoreq	sl, fp, r0, lsl #6
    43b0:	07372100 	ldreq	r2, [r7, -r0, lsl #2]!
    43b4:	2bf10000 	blcs	ffc443bc <_estack+0xdfc143bc>
    43b8:	38250000 	stmdacc	r5!, {}	; <UNPREDICTABLE>
    43bc:	22000004 	andcs	r0, r0, #4
    43c0:	0000074f 	andeq	r0, r0, pc, asr #14
    43c4:	00002c3c 	andeq	r2, r0, ip, lsr ip
    43c8:	0019001c 	andseq	r0, r9, ip, lsl r0
    43cc:	0022ed08 	eoreq	lr, r2, r8, lsl #26
    43d0:	00080f00 	andeq	r0, r8, r0, lsl #30
    43d4:	50011d00 	andpl	r1, r1, r0, lsl #26
    43d8:	004c0802 	subeq	r0, ip, r2, lsl #16
    43dc:	0019221c 	andseq	r2, r9, ip, lsl r2
    43e0:	00230308 	eoreq	r0, r3, r8, lsl #6
    43e4:	00082900 	andeq	r2, r8, r0, lsl #18
    43e8:	52011d00 	andpl	r1, r1, #0, 26
    43ec:	1d007b02 	vstrne	d7, [r0, #-8]
    43f0:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    43f4:	501c00a5 	andspl	r0, ip, r5, lsr #1
    43f8:	ed08001a 	stc	0, cr0, [r8, #-104]	; 0xffffff98
    43fc:	3d000022 	stccc	0, cr0, [r0, #-136]	; 0xffffff78
    4400:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    4404:	7b025001 	blvc	98410 <_Min_Stack_Size+0x98010>
    4408:	5e1e0000 	cdppl	0, 1, cr0, cr14, cr0, {0}
    440c:	2208001a 	andcs	r0, r8, #26
    4410:	1d000023 	stcne	0, cr0, [r0, #-140]	; 0xffffff74
    4414:	74025001 	strvc	r5, [r2], #-1
    4418:	00000000 	andeq	r0, r0, r0
    441c:	00045026 	andeq	r5, r4, r6, lsr #32
    4420:	00092600 	andeq	r2, r9, r0, lsl #12
    4424:	07032200 	streq	r2, [r3, -r0, lsl #4]
    4428:	2c870000 	stccs	0, cr0, [r7], {0}
    442c:	fb240000 	blx	904436 <_Min_Stack_Size+0x904036>
    4430:	22000004 	andcs	r0, r0, #4
    4434:	78080019 	stmdavc	r8, {r0, r3, r4}
    4438:	01000004 	tsteq	r0, r4
    443c:	08d6023c 	ldmeq	r6, {r2, r3, r4, r5, r9}^
    4440:	2c210000 	stccs	0, cr0, [r1], #-0
    4444:	e2000005 	and	r0, r0, #5
    4448:	2100002c 	tstcs	r0, ip, lsr #32
    444c:	00000538 	andeq	r0, r0, r8, lsr r5
    4450:	00002d02 	andeq	r2, r0, r2, lsl #26
    4454:	00052021 	andeq	r2, r5, r1, lsr #32
    4458:	002d2600 	eoreq	r2, sp, r0, lsl #12
    445c:	05142100 	ldreq	r2, [r4, #-256]	; 0x100
    4460:	2d440000 	stclcs	0, cr0, [r4, #-0]
    4464:	08210000 	stmdaeq	r1!, {}	; <UNPREDICTABLE>
    4468:	73000005 	movwvc	r0, #5
    446c:	2500002d 	strcs	r0, [r0, #-45]	; 0x2d
    4470:	00000478 	andeq	r0, r0, r8, ror r4
    4474:	00054422 	andeq	r4, r5, r2, lsr #8
    4478:	002d9100 	eoreq	r9, sp, r0, lsl #2
    447c:	199e1c00 	ldmibne	lr, {sl, fp, ip}
    4480:	23340800 	teqcs	r4, #0, 16
    4484:	08c40000 	stmiaeq	r4, {}^	; <UNPREDICTABLE>
    4488:	011d0000 	tsteq	sp, r0
    448c:	00790250 	rsbseq	r0, r9, r0, asr r2
    4490:	19a61e00 	stmibne	r6!, {r9, sl, fp, ip}
    4494:	23340800 	teqcs	r4, #0, 16
    4498:	011d0000 	tsteq	sp, r0
    449c:	18740250 	ldmdane	r4!, {r4, r6, r9}^
    44a0:	1c000000 	stcne	0, cr0, [r0], {-0}
    44a4:	080019ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, fp, ip}
    44a8:	0000234b 	andeq	r2, r0, fp, asr #6
    44ac:	000008f6 	strdeq	r0, [r0], -r6
    44b0:	0252011d 	subseq	r0, r2, #1073741831	; 0x40000007
    44b4:	011d007a 	tsteq	sp, sl, ror r0
    44b8:	00770251 	rsbseq	r0, r7, r1, asr r2
    44bc:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    44c0:	2700007b 	smlsdxcs	r0, fp, r0, r0
    44c4:	080019ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, fp, ip}
    44c8:	0000236b 	andeq	r2, r0, fp, ror #6
    44cc:	001a101c 	andseq	r1, sl, ip, lsl r0
    44d0:	00237208 	eoreq	r7, r3, r8, lsl #4
    44d4:	00091300 	andeq	r1, r9, r0, lsl #6
    44d8:	51011d00 	tstpl	r1, r0, lsl #26
    44dc:	00007902 	andeq	r7, r0, r2, lsl #18
    44e0:	001a1427 	andseq	r1, sl, r7, lsr #8
    44e4:	00238908 	eoreq	r8, r3, r8, lsl #18
    44e8:	1a422700 	bne	108e0f0 <_Min_Stack_Size+0x108dcf0>
    44ec:	05d00800 	ldrbeq	r0, [r0, #2048]	; 0x800
    44f0:	27000000 	strcs	r0, [r0, -r0]
    44f4:	080018f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp, ip}
    44f8:	00002390 	muleq	r0, r0, r3
    44fc:	001a2a27 	andseq	r2, sl, r7, lsr #20
    4500:	00239008 	eoreq	r9, r3, r8
    4504:	1a302700 	bne	c0e10c <_Min_Stack_Size+0xc0dd0c>
    4508:	239b0800 	orrscs	r0, fp, #0, 16
    450c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    4510:	0000199f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
    4514:	8002b701 	andhi	fp, r2, r1, lsl #14
    4518:	a408001a 	strge	r0, [r8], #-26
    451c:	01000000 	mrseq	r0, (UNDEF: 0)
    4520:	000a199c 	muleq	sl, ip, r9
    4524:	1a582900 	bne	160e92c <_Min_Stack_Size+0x160e52c>
    4528:	b7010000 	strlt	r0, [r1, -r0]
    452c:	0001ef02 	andeq	lr, r1, r2, lsl #30
    4530:	002e0500 	eoreq	r0, lr, r0, lsl #10
    4534:	1be91b00 	blne	ffa4b13c <_estack+0xdfa1b13c>
    4538:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    453c:	0004aa02 	andeq	sl, r4, r2, lsl #20
    4540:	002e2e00 	eoreq	r2, lr, r0, lsl #28
    4544:	04902a00 	ldreq	r2, [r0], #2560	; 0xa00
    4548:	1aca0000 	bne	ff284550 <_estack+0xdf254550>
    454c:	00200800 	eoreq	r0, r0, r0, lsl #16
    4550:	fb010000 	blx	4455a <_Min_Stack_Size+0x4415a>
    4554:	0009af02 	andeq	sl, r9, r2, lsl #30
    4558:	1aca2b00 	bne	ff28f160 <_estack+0xdf25f160>
    455c:	00200800 	eoreq	r0, r0, r0, lsl #16
    4560:	9d2c0000 	stcls	0, cr0, [ip, #-0]
    4564:	2b000004 	blcs	457c <_Min_Stack_Size+0x417c>
    4568:	08001adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip}
    456c:	0000000e 	andeq	r0, r0, lr
    4570:	00049d22 	andeq	r9, r4, r2, lsr #26
    4574:	002e4100 	eoreq	r4, lr, r0, lsl #2
    4578:	00000000 	andeq	r0, r0, r0
    457c:	001a8827 	andseq	r8, sl, r7, lsr #16
    4580:	00236b08 	eoreq	r6, r3, r8, lsl #22
    4584:	1a941c00 	bne	fe50b58c <_estack+0xde4db58c>
    4588:	23a20800 			; <UNDEFINED> instruction: 0x23a20800
    458c:	09cc0000 	stmibeq	ip, {}^	; <UNPREDICTABLE>
    4590:	011d0000 	tsteq	sp, r0
    4594:	00750250 	rsbseq	r0, r5, r0, asr r2
    4598:	1aa01c00 	bne	fe80b5a0 <_estack+0xde7db5a0>
    459c:	23a20800 			; <UNDEFINED> instruction: 0x23a20800
    45a0:	09e00000 	stmibeq	r0!, {}^	; <UNPREDICTABLE>
    45a4:	011d0000 	tsteq	sp, r0
    45a8:	18740250 	ldmdane	r4!, {r4, r6, r9}^
    45ac:	1aa81c00 	bne	fea0b5b4 <_estack+0xde9db5b4>
    45b0:	23720800 	cmncs	r2, #0, 16
    45b4:	09fd0000 	ldmibeq	sp!, {}^	; <UNPREDICTABLE>
    45b8:	011d0000 	tsteq	sp, r0
    45bc:	00750251 	rsbseq	r0, r5, r1, asr r2
    45c0:	0550011d 	ldrbeq	r0, [r0, #-285]	; 0x11d
    45c4:	00010403 	andeq	r0, r1, r3, lsl #8
    45c8:	bc270020 	stclt	0, cr0, [r7], #-128	; 0xffffff80
    45cc:	8908001a 	stmdbhi	r8, {r1, r3, r4}
    45d0:	27000023 	strcs	r0, [r0, -r3, lsr #32]
    45d4:	08001af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip}
    45d8:	00002390 	muleq	r0, r0, r3
    45dc:	001afe2d 	andseq	pc, sl, sp, lsr #28
    45e0:	00239b08 	eoreq	r9, r3, r8, lsl #22
    45e4:	d92e0000 	stmdble	lr!, {}	; <UNPREDICTABLE>
    45e8:	01000017 	tsteq	r0, r7, lsl r0
    45ec:	010103ed 	smlatteq	r1, sp, r3, r0
    45f0:	1b240000 	blne	9045f8 <_Min_Stack_Size+0x9041f8>
    45f4:	00280800 	eoreq	r0, r8, r0, lsl #16
    45f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    45fc:	00000a7f 	andeq	r0, r0, pc, ror sl
    4600:	00161329 	andseq	r1, r6, r9, lsr #6
    4604:	03ed0100 	mvneq	r0, #0, 2
    4608:	000001ef 	andeq	r0, r0, pc, ror #3
    460c:	00002e6f 	andeq	r2, r0, pc, ror #28
    4610:	001be91b 	andseq	lr, fp, fp, lsl r9
    4614:	03ef0100 	mvneq	r0, #0, 2
    4618:	000004aa 	andeq	r0, r0, sl, lsr #9
    461c:	00002ea6 	andeq	r2, r0, r6, lsr #29
    4620:	000d711b 	andeq	r7, sp, fp, lsl r1
    4624:	03f00100 	mvnseq	r0, #0, 2
    4628:	00000101 	andeq	r0, r0, r1, lsl #2
    462c:	00002ed2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    4630:	001b2c27 	andseq	r2, fp, r7, lsr #24
    4634:	00236b08 	eoreq	r6, r3, r8, lsl #22
    4638:	1b342700 	blne	d0e240 <_Min_Stack_Size+0xd0de40>
    463c:	23890800 	orrcs	r0, r9, #0, 16
    4640:	42270000 	eormi	r0, r7, #0
    4644:	8908001b 	stmdbhi	r8, {r0, r1, r3, r4}
    4648:	00000023 	andeq	r0, r0, r3, lsr #32
    464c:	00195c28 	andseq	r5, r9, r8, lsr #24
    4650:	04030100 	streq	r0, [r3], #-256	; 0x100
    4654:	08001b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip}
    4658:	000000b8 	strheq	r0, [r0], -r8
    465c:	0b479c01 	bleq	11eb668 <_Min_Stack_Size+0x11eb268>
    4660:	13290000 	teqne	r9, #0
    4664:	01000016 	tsteq	r0, r6, lsl r0
    4668:	01ef0403 	mvneq	r0, r3, lsl #8
    466c:	2efb0000 	cdpcs	0, 15, cr0, cr11, cr0, {0}
    4670:	28290000 	stmdacs	r9!, {}	; <UNPREDICTABLE>
    4674:	01000019 	tsteq	r0, r9, lsl r0
    4678:	01010403 	tsteq	r1, r3, lsl #8
    467c:	2f2f0000 	svccs	0x002f0000
    4680:	e91b0000 	ldmdb	fp, {}	; <UNPREDICTABLE>
    4684:	0100001b 	tsteq	r0, fp, lsl r0
    4688:	04aa0405 	strteq	r0, [sl], #1029	; 0x405
    468c:	2fbd0000 	svccs	0x00bd0000
    4690:	a31b0000 	tstge	fp, #0
    4694:	0100001c 	tsteq	r0, ip, lsl r0
    4698:	01010406 	tsteq	r1, r6, lsl #8
    469c:	2ff10000 	svccs	0x00f10000
    46a0:	0d1b0000 	ldceq	0, cr0, [fp, #-0]
    46a4:	0100001b 	tsteq	r0, fp, lsl r0
    46a8:	01010406 	tsteq	r1, r6, lsl #8
    46ac:	301a0000 	andscc	r0, sl, r0
    46b0:	f61b0000 			; <UNDEFINED> instruction: 0xf61b0000
    46b4:	01000016 	tsteq	r0, r6, lsl r0
    46b8:	00f60407 	rscseq	r0, r6, r7, lsl #8
    46bc:	302d0000 	eorcc	r0, sp, r0
    46c0:	5a270000 	bpl	9c46c8 <_Min_Stack_Size+0x9c42c8>
    46c4:	6b08001b 	blvs	204738 <_Min_Stack_Size+0x204338>
    46c8:	2d000023 	stccs	0, cr0, [r0, #-140]	; 0xffffff74
    46cc:	08001bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, ip}
    46d0:	00002389 	andeq	r2, r0, r9, lsl #7
    46d4:	001bba27 	andseq	fp, fp, r7, lsr #20
    46d8:	00239008 	eoreq	r9, r3, r8
    46dc:	1bc62700 	blne	ff18e2e4 <_estack+0xdf15e2e4>
    46e0:	239b0800 	orrscs	r0, fp, #0, 16
    46e4:	ce2d0000 	cdpgt	0, 2, cr0, cr13, cr0, {0}
    46e8:	8908001b 	stmdbhi	r8, {r0, r1, r3, r4}
    46ec:	1c000023 	stcne	0, cr0, [r0], {35}	; 0x23
    46f0:	08001bd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, fp, ip}
    46f4:	000023a2 	andeq	r2, r0, r2, lsr #7
    46f8:	00000b36 	andeq	r0, r0, r6, lsr fp
    46fc:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    4700:	1e000075 	mcrne	0, 0, r0, cr0, cr5, {3}
    4704:	08001bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp, ip}
    4708:	00002372 	andeq	r2, r0, r2, ror r3
    470c:	0251011d 	subseq	r0, r1, #1073741831	; 0x40000007
    4710:	00000075 	andeq	r0, r0, r5, ror r0
    4714:	0019ab19 	andseq	sl, r9, r9, lsl fp
    4718:	08390100 	ldmdaeq	r9!, {r8}
    471c:	000b6301 	andeq	r6, fp, r1, lsl #6
    4720:	94131500 	ldrls	r1, [r3], #-1280	; 0x500
    4724:	01000009 	tsteq	r0, r9
    4728:	048b0864 	streq	r0, [fp], #2148	; 0x864
    472c:	00000000 	andeq	r0, r0, r0
    4730:	001b3f28 	andseq	r3, fp, r8, lsr #30
    4734:	04a70100 	strteq	r0, [r7], #256	; 0x100
    4738:	08001c04 	stmdaeq	r0, {r2, sl, fp, ip}
    473c:	0000011c 	andeq	r0, r0, ip, lsl r1
    4740:	0c6c9c01 	stcleq	12, cr9, [ip], #-4
    4744:	66290000 	strtvs	r0, [r9], -r0
    4748:	0100001a 	tsteq	r0, sl, lsl r0
    474c:	01ef04a7 	mvneq	r0, r7, lsr #9
    4750:	307a0000 	rsbscc	r0, sl, r0
    4754:	e91b0000 	ldmdb	fp, {}	; <UNPREDICTABLE>
    4758:	0100001b 	tsteq	r0, fp, lsl r0
    475c:	04aa04a9 	strteq	r0, [sl], #1193	; 0x4a9
    4760:	30a30000 	adccc	r0, r3, r0
    4764:	902a0000 	eorls	r0, sl, r0
    4768:	44000004 	strmi	r0, [r0], #-4
    476c:	2008001c 	andcs	r0, r8, ip, lsl r0
    4770:	01000000 	mrseq	r0, (UNDEF: 0)
    4774:	0bd004ee 	bleq	ff405b34 <_estack+0xdf3d5b34>
    4778:	442b0000 	strtmi	r0, [fp], #-0
    477c:	2008001c 	andcs	r0, r8, ip, lsl r0
    4780:	2c000000 	stccs	0, cr0, [r0], {-0}
    4784:	0000049d 	muleq	r0, sp, r4
    4788:	001c562b 	andseq	r5, ip, fp, lsr #12
    478c:	00000e08 	andeq	r0, r0, r8, lsl #28
    4790:	049d2200 	ldreq	r2, [sp], #512	; 0x200
    4794:	30cc0000 	sbccc	r0, ip, r0
    4798:	00000000 	andeq	r0, r0, r0
    479c:	0b472a00 	bleq	11cefa4 <_Min_Stack_Size+0x11ceba4>
    47a0:	1c8c0000 	stcne	0, cr0, [ip], {0}
    47a4:	00940800 	addseq	r0, r4, r0, lsl #16
    47a8:	e3010000 	movw	r0, #4096	; 0x1000
    47ac:	000c0504 	andeq	r0, ip, r4, lsl #10
    47b0:	1cc82f00 	stclne	15, cr2, [r8], {0}
    47b4:	00220800 	eoreq	r0, r2, r0, lsl #16
    47b8:	0bfb0000 	bleq	ffec47c0 <_estack+0xdfe947c0>
    47bc:	55220000 	strpl	r0, [r2, #-0]!
    47c0:	fa00000b 	blx	47f4 <_Min_Stack_Size+0x43f4>
    47c4:	00000030 	andeq	r0, r0, r0, lsr r0
    47c8:	001cf627 	andseq	pc, ip, r7, lsr #12
    47cc:	00239008 	eoreq	r9, r3, r8
    47d0:	0e270000 	cdpeq	0, 2, cr0, cr7, cr0, {0}
    47d4:	6b08001c 	blvs	20484c <_Min_Stack_Size+0x20444c>
    47d8:	1c000023 	stcne	0, cr0, [r0], {35}	; 0x23
    47dc:	08001c1a 	stmdaeq	r0, {r1, r3, r4, sl, fp, ip}
    47e0:	000023a2 	andeq	r2, r0, r2, lsr #7
    47e4:	00000c22 	andeq	r0, r0, r2, lsr #24
    47e8:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    47ec:	1c000076 	stcne	0, cr0, [r0], {118}	; 0x76
    47f0:	08001c26 	stmdaeq	r0, {r1, r2, r5, sl, fp, ip}
    47f4:	000023a2 	andeq	r2, r0, r2, lsr #7
    47f8:	00000c36 	andeq	r0, r0, r6, lsr ip
    47fc:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    4800:	1c001874 	stcne	8, cr1, [r0], {116}	; 0x74
    4804:	08001c30 	stmdaeq	r0, {r4, r5, sl, fp, ip}
    4808:	00002372 	andeq	r2, r0, r2, ror r3
    480c:	00000c50 	andeq	r0, r0, r0, asr ip
    4810:	0251011d 	subseq	r0, r1, #1073741831	; 0x40000007
    4814:	011d0076 	tsteq	sp, r6, ror r0
    4818:	00770250 	rsbseq	r0, r7, r0, asr r2
    481c:	1c342700 	ldcne	7, cr2, [r4], #-0
    4820:	23890800 	orrcs	r0, r9, #0, 16
    4824:	70270000 	eorvc	r0, r7, r0
    4828:	9008001c 	andls	r0, r8, ip, lsl r0
    482c:	2d000023 	stccs	0, cr0, [r0, #-140]	; 0xffffff74
    4830:	08001c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, ip}
    4834:	0000239b 	muleq	r0, fp, r3
    4838:	1c392800 	ldcne	8, cr2, [r9], #-0
    483c:	2a010000 	bcs	44844 <_Min_Stack_Size+0x44444>
    4840:	001d2005 	andseq	r2, sp, r5
    4844:	00008008 	andeq	r8, r0, r8
    4848:	4e9c0100 	fmlmie	f0, f4, f0
    484c:	2900000d 	stmdbcs	r0, {r0, r2, r3}
    4850:	000016cb 	andeq	r1, r0, fp, asr #13
    4854:	ef052a01 	svc	0x00052a01
    4858:	0d000001 	stceq	0, cr0, [r0, #-4]
    485c:	1b000031 	blne	4928 <_Min_Stack_Size+0x4528>
    4860:	00001be9 	andeq	r1, r0, r9, ror #23
    4864:	4f052c01 	svcmi	0x00052c01
    4868:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    486c:	24000031 	strcs	r0, [r0], #-49	; 0x31
    4870:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    4874:	08001d32 	stmdaeq	r0, {r1, r4, r5, r8, sl, fp, ip}
    4878:	000004a8 	andeq	r0, r0, r8, lsr #9
    487c:	01053701 	tsteq	r5, r1, lsl #14
    4880:	2100000d 	tstcs	r0, sp
    4884:	000004c1 	andeq	r0, r0, r1, asr #9
    4888:	0000314f 	andeq	r3, r0, pc, asr #2
    488c:	0004a825 	andeq	sl, r4, r5, lsr #16
    4890:	04cd2200 	strbeq	r2, [sp], #512	; 0x200
    4894:	317b0000 	cmncc	fp, r0
    4898:	d9220000 	stmdble	r2!, {}	; <UNPREDICTABLE>
    489c:	4f000004 	svcmi	0x00000004
    48a0:	2b000031 	blcs	496c <_Min_Stack_Size+0x456c>
    48a4:	08001d4a 	stmdaeq	r0, {r1, r3, r6, r8, sl, fp, ip}
    48a8:	00000008 	andeq	r0, r0, r8
    48ac:	0004c130 	andeq	ip, r4, r0, lsr r1
    48b0:	2b540100 	blcs	1504cb8 <_Min_Stack_Size+0x15048b8>
    48b4:	08001d4a 	stmdaeq	r0, {r1, r3, r6, r8, sl, fp, ip}
    48b8:	00000008 	andeq	r0, r0, r8
    48bc:	0004cd22 	andeq	ip, r4, r2, lsr #26
    48c0:	0031ad00 	eorseq	sl, r1, r0, lsl #26
    48c4:	04d92c00 	ldrbeq	r2, [r9], #3072	; 0xc00
    48c8:	00000000 	andeq	r0, r0, r0
    48cc:	32270000 	eorcc	r0, r7, #0
    48d0:	6b08001d 	blvs	20494c <_Min_Stack_Size+0x20454c>
    48d4:	2d000023 	stccs	0, cr0, [r0, #-140]	; 0xffffff74
    48d8:	08001d42 	stmdaeq	r0, {r1, r6, r8, sl, fp, ip}
    48dc:	00002389 	andeq	r2, r0, r9, lsl #7
    48e0:	001d4827 	andseq	r4, sp, r7, lsr #16
    48e4:	00239008 	eoreq	r9, r3, r8
    48e8:	1d5e1c00 	ldclne	12, cr1, [lr, #-0]
    48ec:	23a20800 			; <UNDEFINED> instruction: 0x23a20800
    48f0:	0d300000 	ldceq	0, cr0, [r0, #-0]
    48f4:	011d0000 	tsteq	sp, r0
    48f8:	00760250 	rsbseq	r0, r6, r0, asr r2
    48fc:	1d7a1c00 	ldclne	12, cr1, [sl, #-0]
    4900:	23720800 	cmncs	r2, #0, 16
    4904:	0d440000 	stcleq	0, cr0, [r4, #-0]
    4908:	011d0000 	tsteq	sp, r0
    490c:	00760251 	rsbseq	r0, r6, r1, asr r2
    4910:	1d882700 	stcne	7, cr2, [r8]
    4914:	239b0800 	orrscs	r0, fp, #0, 16
    4918:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    491c:	00001762 	andeq	r1, r0, r2, ror #14
    4920:	f6056001 			; <UNDEFINED> instruction: 0xf6056001
    4924:	a0000000 	andge	r0, r0, r0
    4928:	a408001d 	strge	r0, [r8], #-29
    492c:	01000000 	mrseq	r0, (UNDEF: 0)
    4930:	000e999c 	muleq	lr, ip, r9
    4934:	16cb2900 	strbne	r2, [fp], r0, lsl #18
    4938:	60010000 	andvs	r0, r1, r0
    493c:	0001ef05 	andeq	lr, r1, r5, lsl #30
    4940:	0031c700 	eorseq	ip, r1, r0, lsl #14
    4944:	16f61b00 	ldrbtne	r1, [r6], r0, lsl #22
    4948:	62010000 	andvs	r0, r1, #0
    494c:	0000f605 	andeq	pc, r0, r5, lsl #12
    4950:	00320900 	eorseq	r0, r2, r0, lsl #18
    4954:	1be91b00 	blne	ffa4b55c <_estack+0xdfa1b55c>
    4958:	63010000 	movwvs	r0, #4096	; 0x1000
    495c:	00054f05 	andeq	r4, r5, r5, lsl #30
    4960:	0031c700 	eorseq	ip, r1, r0, lsl #14
    4964:	0e7a1b00 	vaddeq.f64	d17, d10, d0
    4968:	64010000 	strvs	r0, [r1], #-0
    496c:	00010105 	andeq	r0, r1, r5, lsl #2
    4970:	00326100 	eorseq	r6, r2, r0, lsl #2
    4974:	04b02400 	ldrteq	r2, [r0], #1024	; 0x400
    4978:	1dae0000 	stcne	0, cr0, [lr]
    497c:	04c00800 	strbeq	r0, [r0], #2048	; 0x800
    4980:	7c010000 	stcvc	0, cr0, [r1], {-0}
    4984:	000e0905 	andeq	r0, lr, r5, lsl #18
    4988:	04c12100 	strbeq	r2, [r1], #256	; 0x100
    498c:	32950000 	addscc	r0, r5, #0
    4990:	c0250000 	eorgt	r0, r5, r0
    4994:	22000004 	andcs	r0, r0, #4
    4998:	000004cd 	andeq	r0, r0, sp, asr #9
    499c:	000032c1 	andeq	r3, r0, r1, asr #5
    49a0:	0004d922 	andeq	sp, r4, r2, lsr #18
    49a4:	00329500 	eorseq	r9, r2, r0, lsl #10
    49a8:	1dca2b00 	vstrne	d18, [sl]
    49ac:	00080800 	andeq	r0, r8, r0, lsl #16
    49b0:	c1210000 	teqgt	r1, r0
    49b4:	2a000004 	bcs	49cc <_Min_Stack_Size+0x45cc>
    49b8:	2b000033 	blcs	4a8c <_Min_Stack_Size+0x468c>
    49bc:	08001dca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sl, fp, ip}
    49c0:	00000008 	andeq	r0, r0, r8
    49c4:	0004cd22 	andeq	ip, r4, r2, lsr #26
    49c8:	00334b00 	eorseq	r4, r3, r0, lsl #22
    49cc:	04d92c00 	ldrbeq	r2, [r9], #3072	; 0xc00
    49d0:	00000000 	andeq	r0, r0, r0
    49d4:	aa270000 	bge	9c49dc <_Min_Stack_Size+0x9c45dc>
    49d8:	b808001d 	stmdalt	r8, {r0, r2, r3, r4}
    49dc:	27000023 	strcs	r0, [r0, -r3, lsr #32]
    49e0:	08001dae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, sl, fp, ip}
    49e4:	00002390 	muleq	r0, r0, r3
    49e8:	001dc01c 	andseq	ip, sp, ip, lsl r0
    49ec:	0023bf08 	eoreq	fp, r3, r8, lsl #30
    49f0:	000e2f00 	andeq	r2, lr, r0, lsl #30
    49f4:	50011d00 	andpl	r1, r1, r0, lsl #26
    49f8:	00007702 	andeq	r7, r0, r2, lsl #14
    49fc:	001dc827 	andseq	ip, sp, r7, lsr #16
    4a00:	00239008 	eoreq	r9, r3, r8
    4a04:	1df41c00 	ldclne	12, cr1, [r4]
    4a08:	23a20800 			; <UNDEFINED> instruction: 0x23a20800
    4a0c:	0e4c0000 	cdpeq	0, 4, cr0, cr12, cr0, {0}
    4a10:	011d0000 	tsteq	sp, r0
    4a14:	00760250 	rsbseq	r0, r6, r0, asr r2
    4a18:	1e101c00 	cdpne	12, 1, cr1, cr0, cr0, {0}
    4a1c:	23720800 	cmncs	r2, #0, 16
    4a20:	0e600000 	cdpeq	0, 6, cr0, cr0, cr0, {0}
    4a24:	011d0000 	tsteq	sp, r0
    4a28:	00760251 	rsbseq	r0, r6, r1, asr r2
    4a2c:	1e161c00 	cdpne	12, 1, cr1, cr6, cr0, {0}
    4a30:	23bf0800 			; <UNDEFINED> instruction: 0x23bf0800
    4a34:	0e740000 	cdpeq	0, 7, cr0, cr4, cr0, {0}
    4a38:	011d0000 	tsteq	sp, r0
    4a3c:	00770250 	rsbseq	r0, r7, r0, asr r2
    4a40:	1e221c00 	cdpne	12, 2, cr1, cr2, cr0, {0}
    4a44:	23720800 	cmncs	r2, #0, 16
    4a48:	0e880000 	cdpeq	0, 8, cr0, cr8, cr0, {0}
    4a4c:	011d0000 	tsteq	sp, r0
    4a50:	18740251 	ldmdane	r4!, {r0, r4, r6, r9}^
    4a54:	1e281e00 	cdpne	14, 2, cr1, cr8, cr0, {0}
    4a58:	23bf0800 			; <UNDEFINED> instruction: 0x23bf0800
    4a5c:	011d0000 	tsteq	sp, r0
    4a60:	00770250 	rsbseq	r0, r7, r0, asr r2
    4a64:	85280000 	strhi	r0, [r8, #-0]!
    4a68:	01000001 	tsteq	r0, r1
    4a6c:	1e4405a6 	cdpne	5, 4, cr0, cr4, cr6, {5}
    4a70:	01380800 	teqeq	r8, r0, lsl #16
    4a74:	9c010000 	stcls	0, cr0, [r1], {-0}
    4a78:	0000108b 	andeq	r1, r0, fp, lsl #1
    4a7c:	000d721b 	andeq	r7, sp, fp, lsl r2
    4a80:	05a80100 	streq	r0, [r8, #256]!	; 0x100
    4a84:	000000f6 	strdeq	r0, [r0], -r6
    4a88:	0000339c 	muleq	r0, ip, r3
    4a8c:	00067924 	andeq	r7, r6, r4, lsr #18
    4a90:	001e4800 	andseq	r4, lr, r0, lsl #16
    4a94:	0004e008 	andeq	lr, r4, r8
    4a98:	05b40100 	ldreq	r0, [r4, #256]!	; 0x100
    4a9c:	00001066 	andeq	r1, r0, r6, rrx
    4aa0:	0006de31 	andeq	sp, r6, r1, lsr lr
    4aa4:	d2310000 	eorsle	r0, r1, #0
    4aa8:	00000006 	andeq	r0, r0, r6
    4aac:	0006c631 	andeq	ip, r6, r1, lsr r6
    4ab0:	ba310000 	blt	c44ab8 <_Min_Stack_Size+0xc446b8>
    4ab4:	00000006 	andeq	r0, r0, r6
    4ab8:	0006ae31 	andeq	sl, r6, r1, lsr lr
    4abc:	a2310000 	eorsge	r0, r1, #0
    4ac0:	82000006 	andhi	r0, r0, #6
    4ac4:	00069632 	andeq	r9, r6, r2, lsr r6
    4ac8:	068a3000 	streq	r3, [sl], r0
    4acc:	03060000 	movweq	r0, #24576	; 0x6000
    4ad0:	08002341 	stmdaeq	r0, {r0, r6, r8, r9, sp}
    4ad4:	04e0259f 	strbteq	r2, [r0], #1439	; 0x59f
    4ad8:	ea220000 	b	884ae0 <_Min_Stack_Size+0x8846e0>
    4adc:	ea000006 	b	4afc <_Min_Stack_Size+0x46fc>
    4ae0:	23000033 	movwcs	r0, #51	; 0x33
    4ae4:	000006f6 	strdeq	r0, [r0], -r6
    4ae8:	26245401 	strtcs	r5, [r4], -r1, lsl #8
    4aec:	48000007 	stmdami	r0, {r0, r1, r2}
    4af0:	0008001e 	andeq	r0, r8, lr, lsl r0
    4af4:	01000005 	tsteq	r0, r5
    4af8:	0f9a020d 	svceq	0x009a020d
    4afc:	43310000 	teqmi	r1, #0
    4b00:	00000007 	andeq	r0, r0, r7
    4b04:	00073731 	andeq	r3, r7, r1, lsr r7
    4b08:	00258200 	eoreq	r8, r5, r0, lsl #4
    4b0c:	22000005 	andcs	r0, r0, #5
    4b10:	0000074f 	andeq	r0, r0, pc, asr #14
    4b14:	0000340a 	andeq	r3, r0, sl, lsl #8
    4b18:	001e4e1c 	andseq	r4, lr, ip, lsl lr
    4b1c:	0022ed08 	eoreq	lr, r2, r8, lsl #26
    4b20:	000f5f00 	andeq	r5, pc, r0, lsl #30
    4b24:	50011d00 	andpl	r1, r1, r0, lsl #26
    4b28:	004c0802 	subeq	r0, ip, r2, lsl #16
    4b2c:	001e5c1c 	andseq	r5, lr, ip, lsl ip
    4b30:	0022ed08 	eoreq	lr, r2, r8, lsl #26
    4b34:	000f7400 	andeq	r7, pc, r0, lsl #8
    4b38:	50011d00 	andpl	r1, r1, r0, lsl #26
    4b3c:	02080a03 	andeq	r0, r8, #12288	; 0x3000
    4b40:	1e6c1c00 	cdpne	12, 6, cr1, cr12, cr0, {0}
    4b44:	23030800 	movwcs	r0, #14336	; 0x3800
    4b48:	0f8f0000 	svceq	0x008f0000
    4b4c:	011d0000 	tsteq	sp, r0
    4b50:	080a0352 	stmdaeq	sl, {r1, r4, r6, r8, r9}
    4b54:	51011d02 	tstpl	r1, r2, lsl #26
    4b58:	00a50802 	adceq	r0, r5, r2, lsl #16
    4b5c:	001f4a2d 	andseq	r4, pc, sp, lsr #20
    4b60:	00232208 	eoreq	r2, r3, r8, lsl #4
    4b64:	25000000 	strcs	r0, [r0, #-0]
    4b68:	00000520 	andeq	r0, r0, r0, lsr #10
    4b6c:	00070322 	andeq	r0, r7, r2, lsr #6
    4b70:	00347000 	eorseq	r7, r4, r0
    4b74:	04fb2400 	ldrbteq	r2, [fp], #1024	; 0x400
    4b78:	1e700000 	cdpne	0, 7, cr0, cr0, cr0, {0}
    4b7c:	05380800 	ldreq	r0, [r8, #-2048]!	; 0x800
    4b80:	3c010000 	stccc	0, cr0, [r1], {-0}
    4b84:	00101102 	andseq	r1, r0, r2, lsl #2
    4b88:	052c3200 	streq	r3, [ip, #-512]!	; 0x200
    4b8c:	38320000 	ldmdacc	r2!, {}	; <UNPREDICTABLE>
    4b90:	21000005 	tstcs	r0, r5
    4b94:	00000520 	andeq	r0, r0, r0, lsr #10
    4b98:	000034c0 	andeq	r3, r0, r0, asr #9
    4b9c:	00051432 	andeq	r1, r5, r2, lsr r4
    4ba0:	05082100 	streq	r2, [r8, #-256]	; 0x100
    4ba4:	34ec0000 	strbtcc	r0, [ip], #0
    4ba8:	38250000 	stmdacc	r5!, {}	; <UNPREDICTABLE>
    4bac:	22000005 	andcs	r0, r0, #5
    4bb0:	00000544 	andeq	r0, r0, r4, asr #10
    4bb4:	00003531 	andeq	r3, r0, r1, lsr r5
    4bb8:	001ea81c 	andseq	sl, lr, ip, lsl r8
    4bbc:	00233408 	eoreq	r3, r3, r8, lsl #8
    4bc0:	000fff00 	andeq	pc, pc, r0, lsl #30
    4bc4:	50011d00 	andpl	r1, r1, r0, lsl #26
    4bc8:	00007702 	andeq	r7, r0, r2, lsl #14
    4bcc:	001eb01e 	andseq	fp, lr, lr, lsl r0
    4bd0:	00233408 	eoreq	r3, r3, r8, lsl #8
    4bd4:	50011d00 	andpl	r1, r1, r0, lsl #26
    4bd8:	00187402 	andseq	r7, r8, r2, lsl #8
    4bdc:	c21c0000 	andsgt	r0, ip, #0
    4be0:	4b08001e 	blmi	204c60 <_Min_Stack_Size+0x204860>
    4be4:	34000023 	strcc	r0, [r0], #-35	; 0x23
    4be8:	1d000010 	stcne	0, cr0, [r0, #-64]	; 0xffffffc0
    4bec:	76025201 	strvc	r5, [r2], -r1, lsl #4
    4bf0:	51011d00 	tstpl	r1, r0, lsl #26
    4bf4:	23410305 	movtcs	r0, #4869	; 0x1305
    4bf8:	011d0800 	tsteq	sp, r0, lsl #16
    4bfc:	00780250 	rsbseq	r0, r8, r0, asr r2
    4c00:	1ec82700 	cdpne	7, 12, cr2, cr8, cr0, {0}
    4c04:	236b0800 	cmncs	fp, #0, 16
    4c08:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    4c0c:	7208001f 	andvc	r0, r8, #31
    4c10:	51000023 	tstpl	r0, r3, lsr #32
    4c14:	1d000010 	stcne	0, cr0, [r0, #-64]	; 0xffffffc0
    4c18:	77025101 	strvc	r5, [r2, -r1, lsl #2]
    4c1c:	10270000 	eorne	r0, r7, r0
    4c20:	8908001f 	stmdbhi	r8, {r0, r1, r2, r3, r4}
    4c24:	27000023 	strcs	r0, [r0, -r3, lsr #32]
    4c28:	08001f56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl, fp, ip}
    4c2c:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4c30:	27000000 	strcs	r0, [r0, -r0]
    4c34:	08001f1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, fp, ip}
    4c38:	000023d0 	ldrdeq	r2, [r0], -r0
    4c3c:	001f2427 	andseq	r2, pc, r7, lsr #8
    4c40:	00239008 	eoreq	r9, r3, r8
    4c44:	1f342d00 	svcne	0x00342d00
    4c48:	23dc0800 	bicscs	r0, ip, #0, 16
    4c4c:	3e270000 	cdpcc	0, 2, cr0, cr7, cr0, {0}
    4c50:	9008001f 	andls	r0, r8, pc, lsl r0
    4c54:	00000023 	andeq	r0, r0, r3, lsr #32
    4c58:	0017c728 	andseq	ip, r7, r8, lsr #14
    4c5c:	05f40100 	ldrbeq	r0, [r4, #256]!	; 0x100
    4c60:	08001f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip}
    4c64:	00000018 	andeq	r0, r0, r8, lsl r0
    4c68:	10b49c01 	adcsne	r9, r4, r1, lsl #24
    4c6c:	82270000 	eorhi	r0, r7, #0
    4c70:	9008001f 	andls	r0, r8, pc, lsl r0
    4c74:	2d000023 	stccs	0, cr0, [r0, #-140]	; 0xffffff74
    4c78:	08001f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, ip}
    4c7c:	000023e8 	andeq	r2, r0, r8, ror #7
    4c80:	05883300 	streq	r3, [r8, #768]	; 0x300
    4c84:	1f940000 	svcne	0x00940000
    4c88:	00100800 	andseq	r0, r0, r0, lsl #16
    4c8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4c90:	0009b82e 	andeq	fp, r9, lr, lsr #16
    4c94:	06820100 	streq	r0, [r2], r0, lsl #2
    4c98:	0000010c 	andeq	r0, r0, ip, lsl #2
    4c9c:	08001fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip}
    4ca0:	00000018 	andeq	r0, r0, r8, lsl r0
    4ca4:	11009c01 	tstne	r0, r1, lsl #24
    4ca8:	c11b0000 	tstgt	fp, r0
    4cac:	0100001a 	tsteq	r0, sl, lsl r0
    4cb0:	010c0684 	smlabbeq	ip, r4, r6, r0
    4cb4:	355d0000 	ldrbcc	r0, [sp, #-0]
    4cb8:	aa270000 	bge	9c4cc0 <_Min_Stack_Size+0x9c48c0>
    4cbc:	6b08001f 	blvs	204d40 <_Min_Stack_Size+0x204940>
    4cc0:	27000023 	strcs	r0, [r0, -r3, lsr #32]
    4cc4:	08001fb2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, sl, fp, ip}
    4cc8:	00002389 	andeq	r2, r0, r9, lsl #7
    4ccc:	1c132e00 	ldcne	14, cr2, [r3], {-0}
    4cd0:	91010000 	mrsls	r0, (UNDEF: 1)
    4cd4:	00010c06 	andeq	r0, r1, r6, lsl #24
    4cd8:	001fbc00 	andseq	fp, pc, r0, lsl #24
    4cdc:	00001c08 	andeq	r1, r0, r8, lsl #24
    4ce0:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
    4ce4:	1b000011 	blne	4d30 <_Min_Stack_Size+0x4930>
    4ce8:	00000d72 	andeq	r0, r0, r2, ror sp
    4cec:	0c069301 	stceq	3, cr9, [r6], {1}
    4cf0:	7b000001 	blvc	4cfc <_Min_Stack_Size+0x48fc>
    4cf4:	1b000035 	blne	4dd0 <_Min_Stack_Size+0x49d0>
    4cf8:	00000e7a 	andeq	r0, r0, sl, ror lr
    4cfc:	01069401 	tsteq	r6, r1, lsl #8
    4d00:	99000001 	stmdbls	r0, {r0}
    4d04:	27000035 	smladxcs	r0, r5, r0, r0
    4d08:	08001fc2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sl, fp, ip}
    4d0c:	000023b8 			; <UNDEFINED> instruction: 0x000023b8
    4d10:	001fc627 	andseq	ip, pc, r7, lsr #12
    4d14:	00239008 	eoreq	r9, r3, r8
    4d18:	1fce2700 	svcne	0x00ce2700
    4d1c:	23bf0800 			; <UNDEFINED> instruction: 0x23bf0800
    4d20:	34000000 	strcc	r0, [r0], #-0
    4d24:	00001619 	andeq	r1, r0, r9, lsl r6
    4d28:	0106b001 	tsteq	r6, r1
    4d2c:	d8000001 	stmdale	r0, {r0}
    4d30:	0c08001f 	stceq	0, cr0, [r8], {31}
    4d34:	01000000 	mrseq	r0, (UNDEF: 0)
    4d38:	177f2e9c 			; <UNDEFINED> instruction: 0x177f2e9c
    4d3c:	31010000 	mrscc	r0, (UNDEF: 1)
    4d40:	0000f607 	andeq	pc, r0, r7, lsl #12
    4d44:	001fe400 	andseq	lr, pc, r0, lsl #8
    4d48:	00014408 	andeq	r4, r1, r8, lsl #8
    4d4c:	5b9c0100 	blpl	fe705154 <_estack+0xde6d5154>
    4d50:	1b000012 	blne	4da0 <_Min_Stack_Size+0x49a0>
    4d54:	00001be9 	andeq	r1, r0, r9, ror #23
    4d58:	aa073301 	bge	1d1964 <_Min_Stack_Size+0x1d1564>
    4d5c:	ac000004 	stcge	0, cr0, [r0], {4}
    4d60:	1b000035 	blne	4e3c <_Min_Stack_Size+0x4a3c>
    4d64:	000009a6 	andeq	r0, r0, r6, lsr #19
    4d68:	0c073401 	cfstrseq	mvf3, [r7], {1}
    4d6c:	ca000001 	bgt	4d78 <_Min_Stack_Size+0x4978>
    4d70:	1b000035 	blne	4e4c <_Min_Stack_Size+0x4a4c>
    4d74:	00001a32 	andeq	r1, r0, r2, lsr sl
    4d78:	f6073501 			; <UNDEFINED> instruction: 0xf6073501
    4d7c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    4d80:	25000035 	strcs	r0, [r0, #-53]	; 0x35
    4d84:	00000570 	andeq	r0, r0, r0, ror r5
    4d88:	0017eb1b 	andseq	lr, r7, fp, lsl fp
    4d8c:	07440100 	strbeq	r0, [r4, -r0, lsl #2]
    4d90:	00000583 	andeq	r0, r0, r3, lsl #11
    4d94:	00003641 	andeq	r3, r0, r1, asr #12
    4d98:	00059026 	andeq	r9, r5, r6, lsr #32
    4d9c:	00122100 	andseq	r2, r2, r0, lsl #2
    4da0:	095f1b00 	ldmdbeq	pc, {r8, r9, fp, ip}^	; <UNPREDICTABLE>
    4da4:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    4da8:	00047a07 	andeq	r7, r4, r7, lsl #20
    4dac:	00365f00 	eorseq	r5, r6, r0, lsl #30
    4db0:	04902400 	ldreq	r2, [r0], #1024	; 0x400
    4db4:	20d00000 	sbcscs	r0, r0, r0
    4db8:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
    4dbc:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    4dc0:	00121707 	andseq	r1, r2, r7, lsl #14
    4dc4:	05b02500 	ldreq	r2, [r0, #1280]!	; 0x500
    4dc8:	9d2c0000 	stcls	0, cr0, [ip, #-0]
    4dcc:	2b000004 	blcs	4de4 <_Min_Stack_Size+0x49e4>
    4dd0:	080020d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sp}
    4dd4:	00000012 	andeq	r0, r0, r2, lsl r0
    4dd8:	00049d22 	andeq	r9, r4, r2, lsr #26
    4ddc:	00367d00 	eorseq	r7, r6, r0, lsl #26
    4de0:	00000000 	andeq	r0, r0, r0
    4de4:	0020b827 	eoreq	fp, r0, r7, lsr #16
    4de8:	00239008 	eoreq	r9, r3, r8
    4dec:	321c0000 	andscc	r0, ip, #0
    4df0:	a2080020 	andge	r0, r8, #32
    4df4:	35000023 	strcc	r0, [r0, #-35]	; 0x23
    4df8:	1d000012 	stcne	0, cr0, [r0, #-72]	; 0xffffffb8
    4dfc:	7a025001 	bvc	98e08 <_Min_Stack_Size+0x98a08>
    4e00:	401c0000 	andsmi	r0, ip, r0
    4e04:	a2080020 	andge	r0, r8, #32
    4e08:	49000023 	stmdbmi	r0, {r0, r1, r5}
    4e0c:	1d000012 	stcne	0, cr0, [r0, #-72]	; 0xffffffb8
    4e10:	78025001 	stmdavc	r2, {r0, ip, lr}
    4e14:	5e1e0018 	mrcpl	0, 0, r0, cr14, cr8, {0}
    4e18:	72080020 	andvc	r0, r8, #32
    4e1c:	1d000023 	stcne	0, cr0, [r0, #-140]	; 0xffffff74
    4e20:	7a025101 	bvc	9922c <_Min_Stack_Size+0x98e2c>
    4e24:	00000000 	andeq	r0, r0, r0
    4e28:	000e462e 	andeq	r4, lr, lr, lsr #12
    4e2c:	06250100 	strteq	r0, [r5], -r0, lsl #2
    4e30:	000000f6 	strdeq	r0, [r0], -r6
    4e34:	08002128 	stmdaeq	r0, {r3, r5, r8, sp}
    4e38:	000000e8 	andeq	r0, r0, r8, ror #1
    4e3c:	13089c01 	movwne	r9, #35841	; 0x8c01
    4e40:	e91b0000 	ldmdb	fp, {}	; <UNPREDICTABLE>
    4e44:	0100001b 	tsteq	r0, fp, lsl r0
    4e48:	04aa0627 	strteq	r0, [sl], #1575	; 0x627
    4e4c:	36ab0000 	strtcc	r0, [fp], r0
    4e50:	421b0000 	andsmi	r0, fp, #0
    4e54:	0100000c 	tsteq	r0, ip
    4e58:	00f60628 	rscseq	r0, r6, r8, lsr #12
    4e5c:	36be0000 	ldrtcc	r0, [lr], r0
    4e60:	36270000 	strtcc	r0, [r7], -r0
    4e64:	90080021 	andls	r0, r8, r1, lsr #32
    4e68:	27000023 	strcs	r0, [r0, -r3, lsr #32]
    4e6c:	0800213c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sp}
    4e70:	0000236b 	andeq	r2, r0, fp, ror #6
    4e74:	0021741c 	eoreq	r7, r1, ip, lsl r4
    4e78:	0023a208 	eoreq	sl, r3, r8, lsl #4
    4e7c:	0012bb00 	andseq	fp, r2, r0, lsl #22
    4e80:	50011d00 	andpl	r1, r1, r0, lsl #26
    4e84:	00187402 	andseq	r7, r8, r2, lsl #8
    4e88:	00217a1c 	eoreq	r7, r1, ip, lsl sl
    4e8c:	0023a208 	eoreq	sl, r3, r8, lsl #4
    4e90:	0012cf00 	andseq	ip, r2, r0, lsl #30
    4e94:	50011d00 	andpl	r1, r1, r0, lsl #26
    4e98:	00007702 	andeq	r7, r0, r2, lsl #14
    4e9c:	0021921c 	eoreq	r9, r1, ip, lsl r2
    4ea0:	00237208 	eoreq	r7, r3, r8, lsl #4
    4ea4:	0012e300 	andseq	lr, r2, r0, lsl #6
    4ea8:	51011d00 	tstpl	r1, r0, lsl #26
    4eac:	00007702 	andeq	r7, r0, r2, lsl #14
    4eb0:	0021bc27 	eoreq	fp, r1, r7, lsr #24
    4eb4:	00238908 	eoreq	r8, r3, r8, lsl #18
    4eb8:	21ce2700 	biccs	r2, lr, r0, lsl #14
    4ebc:	116c0800 	cmnne	ip, r0, lsl #16
    4ec0:	e4270000 	strt	r0, [r7], #-0
    4ec4:	9b080021 	blls	204f50 <_Min_Stack_Size+0x204b50>
    4ec8:	27000023 	strcs	r0, [r0, -r3, lsr #32]
    4ecc:	080021e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sp}
    4ed0:	00002389 	andeq	r2, r0, r9, lsl #7
    4ed4:	1afd2800 	bne	fff4eedc <_estack+0xdff1eedc>
    4ed8:	05010000 	streq	r0, [r1, #-0]
    4edc:	00221003 	eoreq	r1, r2, r3
    4ee0:	0000b008 	andeq	fp, r0, r8
    4ee4:	1d9c0100 	ldfnes	f0, [ip]
    4ee8:	29000014 	stmdbcs	r0, {r2, r4}
    4eec:	00001a87 	andeq	r1, r0, r7, lsl #21
    4ef0:	1d030501 	cfstr32ne	mvfx0, [r3, #-4]
    4ef4:	0b000014 	bleq	4f4c <_Min_Stack_Size+0x4b4c>
    4ef8:	29000037 	stmdbcs	r0, {r0, r1, r2, r4, r5}
    4efc:	00001bda 	ldrdeq	r1, [r0], -sl
    4f00:	83030501 	movwhi	r0, #13569	; 0x3501
    4f04:	90000005 	andls	r0, r0, r5
    4f08:	1b000037 	blne	4fec <_Min_Stack_Size+0x4bec>
    4f0c:	00000bcf 	andeq	r0, r0, pc, asr #23
    4f10:	0c030701 	stceq	7, cr0, [r3], {1}
    4f14:	15000001 	strne	r0, [r0, #-1]
    4f18:	1b000038 	blne	5000 <_Min_Stack_Size+0x4c00>
    4f1c:	00000c42 	andeq	r0, r0, r2, asr #24
    4f20:	f6030801 			; <UNDEFINED> instruction: 0xf6030801
    4f24:	33000000 	movwcc	r0, #0
    4f28:	1b000038 	blne	5010 <_Min_Stack_Size+0x4c10>
    4f2c:	00001978 	andeq	r1, r0, r8, ror r9
    4f30:	f6030801 			; <UNDEFINED> instruction: 0xf6030801
    4f34:	51000000 	mrspl	r0, (UNDEF: 0)
    4f38:	35000038 	strcc	r0, [r0, #-56]	; 0x38
    4f3c:	00000588 	andeq	r0, r0, r8, lsl #11
    4f40:	08002222 	stmdaeq	r0, {r1, r5, r9, sp}
    4f44:	000005c8 	andeq	r0, r0, r8, asr #11
    4f48:	26030e01 	strcs	r0, [r3], -r1, lsl #28
    4f4c:	000005e0 	andeq	r0, r0, r0, ror #11
    4f50:	000013e6 	andeq	r1, r0, r6, ror #7
    4f54:	0017eb1b 	andseq	lr, r7, fp, lsl fp
    4f58:	03120100 	tsteq	r2, #0, 2
    4f5c:	00000583 	andeq	r0, r0, r3, lsl #11
    4f60:	00003895 	muleq	r0, r5, r8
    4f64:	00056924 	andeq	r6, r5, r4, lsr #18
    4f68:	00224a00 	eoreq	r4, r2, r0, lsl #20
    4f6c:	00060808 	andeq	r0, r6, r8, lsl #16
    4f70:	034b0100 	movteq	r0, #45312	; 0xb100
    4f74:	000013dc 	ldrdeq	r1, [r0], -ip
    4f78:	00057621 	andeq	r7, r5, r1, lsr #12
    4f7c:	0038b300 	eorseq	fp, r8, r0, lsl #6
    4f80:	229a2f00 	addscs	r2, sl, #0, 30
    4f84:	00260800 	eoreq	r0, r6, r0, lsl #16
    4f88:	13d20000 	bicsne	r0, r2, #0
    4f8c:	76300000 	ldrtvc	r0, [r0], -r0
    4f90:	01000005 	tsteq	r0, r5
    4f94:	22a62754 	adccs	r2, r6, #84, 14	; 0x1500000
    4f98:	23f00800 	mvnscs	r0, #0, 16
    4f9c:	27000000 	strcs	r0, [r0, -r0]
    4fa0:	08002260 	stmdaeq	r0, {r5, r6, r9, sp}
    4fa4:	000023f0 	strdeq	r2, [r0], -r0
    4fa8:	224a2700 	subcs	r2, sl, #0, 14
    4fac:	23a20800 			; <UNDEFINED> instruction: 0x23a20800
    4fb0:	27000000 	strcs	r0, [r0, -r0]
    4fb4:	0800226e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sp}
    4fb8:	0000125b 	andeq	r1, r0, fp, asr r2
    4fbc:	00227c27 	eoreq	r7, r2, r7, lsr #24
    4fc0:	00125b08 	andseq	r5, r2, r8, lsl #22
    4fc4:	22882d00 	addcs	r2, r8, #0, 26
    4fc8:	239b0800 	orrscs	r0, fp, #0, 16
    4fcc:	8c270000 	stchi	0, cr0, [r7], #-0
    4fd0:	90080022 	andls	r0, r8, r2, lsr #32
    4fd4:	27000023 	strcs	r0, [r0, -r3, lsr #32]
    4fd8:	08002292 	stmdaeq	r0, {r1, r4, r7, r9, sp}
    4fdc:	00002390 	muleq	r0, r0, r3
    4fe0:	00229827 	eoreq	r9, r2, r7, lsr #16
    4fe4:	00239008 	eoreq	r9, r3, r8
    4fe8:	22070000 	andcs	r0, r7, #0
    4fec:	06000014 			; <UNDEFINED> instruction: 0x06000014
    4ff0:	00010c04 	andeq	r0, r1, r4, lsl #24
    4ff4:	02422800 	subeq	r2, r2, #0, 16
    4ff8:	65010000 	strvs	r0, [r1, #-0]
    4ffc:	0022c003 	eoreq	ip, r2, r3
    5000:	00008008 	andeq	r8, r0, r8
    5004:	e89c0100 	ldm	ip, {r8}
    5008:	29000014 	stmdbcs	r0, {r2, r4}
    500c:	00000951 	andeq	r0, r0, r1, asr r9
    5010:	83036501 	movwhi	r6, #13569	; 0x3501
    5014:	d1000005 	tstle	r0, r5
    5018:	1b000038 	blne	5100 <_Min_Stack_Size+0x4d00>
    501c:	00000bcf 	andeq	r0, r0, pc, asr #23
    5020:	0c036701 	stceq	7, cr6, [r3], {1}
    5024:	2f000001 	svccs	0x00000001
    5028:	1b000039 	blne	5114 <_Min_Stack_Size+0x4d14>
    502c:	00000c42 	andeq	r0, r0, r2, asr #24
    5030:	f6036801 			; <UNDEFINED> instruction: 0xf6036801
    5034:	4d000000 	stcmi	0, cr0, [r0, #-0]
    5038:	35000039 	strcc	r0, [r0, #-57]	; 0x39
    503c:	00000588 	andeq	r0, r0, r8, lsl #11
    5040:	080022d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sp}
    5044:	00000620 	andeq	r0, r0, r0, lsr #12
    5048:	24036f01 	strcs	r6, [r3], #-3841	; 0xf01
    504c:	00000569 	andeq	r0, r0, r9, ror #10
    5050:	080022ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sp}
    5054:	00000638 	andeq	r0, r0, r8, lsr r6
    5058:	c3038d01 	movwgt	r8, #15617	; 0x3d01
    505c:	21000014 	tstcs	r0, r4, lsl r0
    5060:	00000576 	andeq	r0, r0, r6, ror r5
    5064:	00003984 	andeq	r3, r0, r4, lsl #19
    5068:	00231a2f 	eoreq	r1, r3, pc, lsr #20
    506c:	00002608 	andeq	r2, r0, r8, lsl #12
    5070:	0014b900 	andseq	fp, r4, r0, lsl #18
    5074:	05763000 	ldrbeq	r3, [r6, #-0]!
    5078:	54010000 	strpl	r0, [r1], #-0
    507c:	00232627 	eoreq	r2, r3, r7, lsr #12
    5080:	0023f008 	eoreq	pc, r3, r8
    5084:	00270000 	eoreq	r0, r7, r0
    5088:	f0080023 			; <UNDEFINED> instruction: 0xf0080023
    508c:	00000023 	andeq	r0, r0, r3, lsr #32
    5090:	0022ce2d 	eoreq	ip, r2, sp, lsr #28
    5094:	00239b08 	eoreq	r9, r3, r8, lsl #22
    5098:	22ea2700 	rsccs	r2, sl, #0, 14
    509c:	23a20800 			; <UNDEFINED> instruction: 0x23a20800
    50a0:	0e270000 	cdpeq	0, 2, cr0, cr7, cr0, {0}
    50a4:	5b080023 	blpl	205138 <_Min_Stack_Size+0x204d38>
    50a8:	27000012 	smladcs	r0, r2, r0, r0
    50ac:	08002318 	stmdaeq	r0, {r3, r4, r8, r9, sp}
    50b0:	00002390 	muleq	r0, r0, r3
    50b4:	1c7a1600 	ldclne	6, cr1, [sl], #-0
    50b8:	0f010000 	svceq	0x00010000
    50bc:	1512010b 	ldrne	r0, [r2, #-267]	; 0x10b
    50c0:	13150000 	tstne	r5, #0
    50c4:	00001893 	muleq	r0, r3, r8
    50c8:	f60b1301 			; <UNDEFINED> instruction: 0xf60b1301
    50cc:	15000000 	strne	r0, [r0, #-0]
    50d0:	001be913 	andseq	lr, fp, r3, lsl r9
    50d4:	0b210100 	bleq	8454dc <_Min_Stack_Size+0x8450dc>
    50d8:	000004aa 	andeq	r0, r0, sl, lsr #9
    50dc:	1a000000 	bne	50e4 <_Min_Stack_Size+0x4ce4>
    50e0:	00001887 	andeq	r1, r0, r7, lsl #17
    50e4:	4009f001 	andmi	pc, r9, r1
    50e8:	88080023 	stmdahi	r8, {r0, r1, r5}
    50ec:	01000000 	mrseq	r0, (UNDEF: 0)
    50f0:	0015ef9c 	mulseq	r5, ip, pc	; <UNPREDICTABLE>
    50f4:	025e2900 	subseq	r2, lr, #0, 18
    50f8:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    50fc:	00009a09 	andeq	r9, r0, r9, lsl #20
    5100:	0039a200 	eorseq	sl, r9, r0, lsl #4
    5104:	14e82400 	strbtne	r2, [r8], #1024	; 0x400
    5108:	23520000 	cmpcs	r2, #0
    510c:	06500800 	ldrbeq	r0, [r0], -r0, lsl #16
    5110:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    5114:	0015e509 	andseq	lr, r5, r9, lsl #10
    5118:	06502500 	ldrbeq	r2, [r0], -r0, lsl #10
    511c:	f6220000 			; <UNDEFINED> instruction: 0xf6220000
    5120:	c3000014 	movwgt	r0, #20
    5124:	35000039 	strcc	r0, [r0, #-57]	; 0x39
    5128:	00000588 	andeq	r0, r0, r8, lsl #11
    512c:	08002356 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sp}
    5130:	00000668 	andeq	r0, r0, r8, ror #12
    5134:	2f0b1901 	svccs	0x000b1901
    5138:	08002378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sp}
    513c:	00000050 	andeq	r0, r0, r0, asr r0
    5140:	000015da 	ldrdeq	r1, [r0], -sl
    5144:	00150323 	andseq	r0, r5, r3, lsr #6
    5148:	2a5b0100 	bcs	16c5550 <_Min_Stack_Size+0x16c5150>
    514c:	00000591 	muleq	r0, r1, r5
    5150:	080023a2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sp}
    5154:	00000026 	andeq	r0, r0, r6, lsr #32
    5158:	b30b2c01 	movwlt	r2, #48129	; 0xbc01
    515c:	30000015 	andcc	r0, r0, r5, lsl r0
    5160:	0000059e 	muleq	r0, lr, r5
    5164:	aa275b01 	bge	9dbd70 <_Min_Stack_Size+0x9db970>
    5168:	22080023 	andcs	r0, r8, #35	; 0x23
    516c:	1e000023 	cdpne	0, 0, cr0, cr0, cr3, {1}
    5170:	080023b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sp}
    5174:	00002322 	andeq	r2, r0, r2, lsr #6
    5178:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    517c:	0000007b 	andeq	r0, r0, fp, ror r0
    5180:	00237c27 	eoreq	r7, r3, r7, lsr #24
    5184:	00236b08 	eoreq	r6, r3, r8, lsl #22
    5188:	238c1c00 	orrcs	r1, ip, #0, 24
    518c:	23a20800 			; <UNDEFINED> instruction: 0x23a20800
    5190:	15d00000 	ldrbne	r0, [r0]
    5194:	011d0000 	tsteq	sp, r0
    5198:	047b0250 	ldrbteq	r0, [fp], #-592	; 0x250
    519c:	23a22700 			; <UNDEFINED> instruction: 0x23a22700
    51a0:	23890800 	orrcs	r0, r9, #0, 16
    51a4:	27000000 	strcs	r0, [r0, -r0]
    51a8:	08002362 	stmdaeq	r0, {r1, r5, r6, r8, r9, sp}
    51ac:	0000125b 	andeq	r1, r0, fp, asr r2
    51b0:	76270000 	strtvc	r0, [r7], -r0
    51b4:	9b080023 	blls	205248 <_Min_Stack_Size+0x204e48>
    51b8:	00000023 	andeq	r0, r0, r3, lsr #32
    51bc:	0018f72e 	andseq	pc, r8, lr, lsr #14
    51c0:	06c90100 	strbeq	r0, [r9], r0, lsl #2
    51c4:	00000101 	andeq	r0, r0, r1, lsl #2
    51c8:	080023c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sp}
    51cc:	000003a0 	andeq	r0, r0, r0, lsr #7
    51d0:	1aba9c01 	bne	feeac1dc <_estack+0xdee7c1dc>
    51d4:	af290000 	svcge	0x00290000
    51d8:	0100001a 	tsteq	r0, sl, lsl r0
    51dc:	1aba06c9 	bne	fee86d08 <_estack+0xdee56d08>
    51e0:	39ef0000 	stmibcc	pc!, {}^	; <UNPREDICTABLE>
    51e4:	c8290000 	stmdagt	r9!, {}	; <UNPREDICTABLE>
    51e8:	0100001a 	tsteq	r0, sl, lsl r0
    51ec:	1abf06c9 	bne	fefc6d18 <_estack+0xdef96d18>
    51f0:	3a250000 	bcc	9451f8 <_Min_Stack_Size+0x944df8>
    51f4:	67290000 	strvs	r0, [r9, -r0]!
    51f8:	01000016 	tsteq	r0, r6, lsl r0
    51fc:	1ac406c9 	bne	ff106d28 <_estack+0xdf0d6d28>
    5200:	3a5f0000 	bcc	17c5208 <_Min_Stack_Size+0x17c4e08>
    5204:	121b0000 	andsne	r0, fp, #0
    5208:	01000016 	tsteq	r0, r6, lsl r0
    520c:	010106cb 	smlabteq	r1, fp, r6, r0
    5210:	3a950000 	bcc	fe545218 <_estack+0xde515218>
    5214:	b01b0000 	andslt	r0, fp, r0
    5218:	01000018 	tsteq	r0, r8, lsl r0
    521c:	010106cb 	smlabteq	r1, fp, r6, r0
    5220:	3b020000 	blcc	85228 <_Min_Stack_Size+0x84e28>
    5224:	88350000 	ldmdahi	r5!, {}	; <UNPREDICTABLE>
    5228:	c8000005 	stmdagt	r0, {r0, r2}
    522c:	80080023 	andhi	r0, r8, r3, lsr #32
    5230:	01000006 	tsteq	r0, r6
    5234:	fa2406cd 	blx	906d70 <_Min_Stack_Size+0x906970>
    5238:	f2000003 	vhadd.s8	d0, d0, d3
    523c:	a0080023 	andge	r0, r8, r3, lsr #32
    5240:	01000006 	tsteq	r0, r6
    5244:	173b06d7 			; <UNDEFINED> instruction: 0x173b06d7
    5248:	23210000 	teqcs	r1, #0
    524c:	22000004 	andcs	r0, r0, #4
    5250:	2100003b 	tstcs	r0, fp, lsr r0
    5254:	00000417 	andeq	r0, r0, r7, lsl r4
    5258:	00003b42 	andeq	r3, r0, r2, asr #22
    525c:	00040b32 	andeq	r0, r4, r2, lsr fp
    5260:	06a02500 	strteq	r2, [r0], r0, lsl #10
    5264:	2f2c0000 	svccs	0x002c0000
    5268:	2c000004 	stccs	0, cr0, [r0], {4}
    526c:	0000043b 	andeq	r0, r0, fp, lsr r4
    5270:	00044722 	andeq	r4, r4, r2, lsr #14
    5274:	003b7100 	eorseq	r7, fp, r0, lsl #2
    5278:	06c82500 	strbeq	r2, [r8], r0, lsl #10
    527c:	23210000 	teqcs	r1, #0
    5280:	a7000004 	strge	r0, [r0, -r4]
    5284:	2100003b 	tstcs	r0, fp, lsr r0
    5288:	00000417 	andeq	r0, r0, r7, lsl r4
    528c:	00003bbb 			; <UNDEFINED> instruction: 0x00003bbb
    5290:	00040b32 	andeq	r0, r4, r2, lsr fp
    5294:	06c82500 	strbeq	r2, [r8], r0, lsl #10
    5298:	2f220000 	svccs	0x00220000
    529c:	d0000004 	andle	r0, r0, r4
    52a0:	2200003b 	andcs	r0, r0, #59	; 0x3b
    52a4:	0000043b 	andeq	r0, r0, fp, lsr r4
    52a8:	00003be3 	andeq	r3, r0, r3, ror #23
    52ac:	00044722 	andeq	r4, r4, r2, lsr #14
    52b0:	003bf600 	eorseq	pc, fp, r0, lsl #12
    52b4:	06f02600 	ldrbteq	r2, [r0], r0, lsl #12
    52b8:	16fb0000 	ldrbtne	r0, [fp], r0
    52bc:	58220000 	stmdapl	r2!, {}	; <UNPREDICTABLE>
    52c0:	bb000004 	bllt	52d8 <_Min_Stack_Size+0x4ed8>
    52c4:	0000003b 	andeq	r0, r0, fp, lsr r0
    52c8:	0024822f 	eoreq	r8, r4, pc, lsr #4
    52cc:	00001408 	andeq	r1, r0, r8, lsl #8
    52d0:	00171200 	andseq	r1, r7, r0, lsl #4
    52d4:	04662200 	strbteq	r2, [r6], #-512	; 0x200
    52d8:	3c090000 	stccc	0, cr0, [r9], {-0}
    52dc:	36000000 	strcc	r0, [r0], -r0
    52e0:	000003c5 	andeq	r0, r0, r5, asr #7
    52e4:	080024b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, sp}
    52e8:	00000708 	andeq	r0, r0, r8, lsl #14
    52ec:	320bbd01 	andcc	fp, fp, #1, 26	; 0x40
    52f0:	000003d6 	ldrdeq	r0, [r0], -r6
    52f4:	00070825 	andeq	r0, r7, r5, lsr #16
    52f8:	03e22200 	mvneq	r2, #0, 4
    52fc:	3c1e0000 	ldccc	0, cr0, [lr], {-0}
	...
    5308:	0003fa24 	andeq	pc, r3, r4, lsr #20
    530c:	00240a00 	eoreq	r0, r4, r0, lsl #20
    5310:	00072008 	andeq	r2, r7, r8
    5314:	06dd0100 	ldrbeq	r0, [sp], r0, lsl #2
    5318:	00001819 	andeq	r1, r0, r9, lsl r8
    531c:	00042321 	andeq	r2, r4, r1, lsr #6
    5320:	003c4900 	eorseq	r4, ip, r0, lsl #18
    5324:	04172100 	ldreq	r2, [r7], #-256	; 0x100
    5328:	3c690000 	stclcc	0, cr0, [r9], #-0
    532c:	0b210000 	bleq	845334 <_Min_Stack_Size+0x844f34>
    5330:	87000004 	strhi	r0, [r0, -r4]
    5334:	2500003c 	strcs	r0, [r0, #-60]	; 0x3c
    5338:	00000720 	andeq	r0, r0, r0, lsr #14
    533c:	00042f2c 	andeq	r2, r4, ip, lsr #30
    5340:	043b2c00 	ldrteq	r2, [fp], #-3072	; 0xc00
    5344:	47220000 	strmi	r0, [r2, -r0]!
    5348:	b5000004 	strlt	r0, [r0, #-4]
    534c:	2500003c 	strcs	r0, [r0, #-60]	; 0x3c
    5350:	00000728 	andeq	r0, r0, r8, lsr #14
    5354:	00042321 	andeq	r2, r4, r1, lsr #6
    5358:	003ceb00 	eorseq	lr, ip, r0, lsl #22
    535c:	04172100 	ldreq	r2, [r7], #-256	; 0x100
    5360:	3cff0000 	ldclcc	0, cr0, [pc]	; 5368 <_Min_Stack_Size+0x4f68>
    5364:	0b210000 	bleq	84536c <_Min_Stack_Size+0x844f6c>
    5368:	12000004 	andne	r0, r0, #4
    536c:	2500003d 	strcs	r0, [r0, #-61]	; 0x3d
    5370:	00000728 	andeq	r0, r0, r8, lsr #14
    5374:	00042f22 	andeq	r2, r4, r2, lsr #30
    5378:	003d2d00 	eorseq	r2, sp, r0, lsl #26
    537c:	043b2200 	ldrteq	r2, [fp], #-512	; 0x200
    5380:	3d400000 	stclcc	0, cr0, [r0, #-0]
    5384:	47220000 	strmi	r0, [r2, -r0]!
    5388:	53000004 	movwpl	r0, #4
    538c:	2600003d 			; <UNDEFINED> instruction: 0x2600003d
    5390:	00000748 	andeq	r0, r0, r8, asr #14
    5394:	000017d5 	ldrdeq	r1, [r0], -r5
    5398:	00045822 	andeq	r5, r4, r2, lsr #16
    539c:	003cff00 	eorseq	pc, ip, r0, lsl #30
    53a0:	d62f0000 	strtle	r0, [pc], -r0
    53a4:	0e080025 	cdpeq	0, 0, cr0, cr8, cr5, {1}
    53a8:	ec000000 	stc	0, cr0, [r0], {-0}
    53ac:	22000017 	andcs	r0, r0, #23
    53b0:	00000466 	andeq	r0, r0, r6, ror #8
    53b4:	00003d66 	andeq	r3, r0, r6, ror #26
    53b8:	03c53700 	biceq	r3, r5, #0, 14
    53bc:	26020000 	strcs	r0, [r2], -r0
    53c0:	001a0800 	andseq	r0, sl, r0, lsl #16
    53c4:	bd010000 	stclt	0, cr0, [r1, #-0]
    53c8:	03d6320b 	bicseq	r3, r6, #-1342177280	; 0xb0000000
    53cc:	022b0000 	eoreq	r0, fp, #0
    53d0:	1a080026 	bne	205470 <_Min_Stack_Size+0x205070>
    53d4:	22000000 	andcs	r0, r0, #0
    53d8:	000003e2 	andeq	r0, r0, r2, ror #7
    53dc:	00003d79 	andeq	r3, r0, r9, ror sp
    53e0:	00000000 	andeq	r0, r0, r0
    53e4:	fa240000 	blx	9053ec <_Min_Stack_Size+0x904fec>
    53e8:	18000003 	stmdane	r0, {r0, r1}
    53ec:	60080024 	andvs	r0, r8, r4, lsr #32
    53f0:	01000007 	tsteq	r0, r7
    53f4:	18f306de 	ldmne	r3!, {r1, r2, r3, r4, r6, r7, r9, sl}^
    53f8:	23210000 	teqcs	r1, #0
    53fc:	98000004 	stmdals	r0, {r2}
    5400:	2100003d 	tstcs	r0, sp, lsr r0
    5404:	00000417 	andeq	r0, r0, r7, lsl r4
    5408:	00003dc4 	andeq	r3, r0, r4, asr #27
    540c:	00040b21 	andeq	r0, r4, r1, lsr #22
    5410:	003def00 	eorseq	lr, sp, r0, lsl #30
    5414:	07602500 	strbeq	r2, [r0, -r0, lsl #10]!
    5418:	2f2c0000 	svccs	0x002c0000
    541c:	2c000004 	stccs	0, cr0, [r0], {4}
    5420:	0000043b 	andeq	r0, r0, fp, lsr r4
    5424:	00044722 	andeq	r4, r4, r2, lsr #14
    5428:	003e1d00 	eorseq	r1, lr, r0, lsl #26
    542c:	07982500 	ldreq	r2, [r8, r0, lsl #10]
    5430:	23210000 	teqcs	r1, #0
    5434:	53000004 	movwpl	r0, #4
    5438:	2100003e 	tstcs	r0, lr, lsr r0
    543c:	00000417 	andeq	r0, r0, r7, lsl r4
    5440:	00003e67 	andeq	r3, r0, r7, ror #28
    5444:	00040b32 	andeq	r0, r4, r2, lsr fp
    5448:	07982500 	ldreq	r2, [r8, r0, lsl #10]
    544c:	2f220000 	svccs	0x00220000
    5450:	87000004 	strhi	r0, [r0, -r4]
    5454:	2200003e 	andcs	r0, r0, #62	; 0x3e
    5458:	0000043b 	andeq	r0, r0, fp, lsr r4
    545c:	00003e9a 	muleq	r0, sl, lr
    5460:	00044722 	andeq	r4, r4, r2, lsr #14
    5464:	003ead00 	eorseq	sl, lr, r0, lsl #26
    5468:	07b82600 	ldreq	r2, [r8, r0, lsl #12]!
    546c:	18af0000 	stmiane	pc!, {}	; <UNPREDICTABLE>
    5470:	58220000 	stmdapl	r2!, {}	; <UNPREDICTABLE>
    5474:	67000004 	strvs	r0, [r0, -r4]
    5478:	0000003e 	andeq	r0, r0, lr, lsr r0
    547c:	0026622f 	eoreq	r6, r6, pc, lsr #4
    5480:	00001408 	andeq	r1, r0, r8, lsl #8
    5484:	0018c600 	andseq	ip, r8, r0, lsl #12
    5488:	04662200 	strbteq	r2, [r6], #-512	; 0x200
    548c:	3ec00000 	cdpcc	0, 12, cr0, cr0, cr0, {0}
    5490:	37000000 	strcc	r0, [r0, -r0]
    5494:	000003c5 	andeq	r0, r0, r5, asr #7
    5498:	08002692 	stmdaeq	r0, {r1, r4, r7, r9, sl, sp}
    549c:	0000001a 	andeq	r0, r0, sl, lsl r0
    54a0:	320bbd01 	andcc	fp, fp, #1, 26	; 0x40
    54a4:	000003d6 	ldrdeq	r0, [r0], -r6
    54a8:	0026922b 	eoreq	r9, r6, fp, lsr #4
    54ac:	00001a08 	andeq	r1, r0, r8, lsl #20
    54b0:	03e22200 	mvneq	r2, #0, 4
    54b4:	3ee00000 	cdpcc	0, 14, cr0, cr0, cr0, {0}
	...
    54c0:	0003fa24 	andeq	pc, r3, r4, lsr #20
    54c4:	00242400 	eoreq	r2, r4, r0, lsl #8
    54c8:	0007d008 	andeq	sp, r7, r8
    54cc:	06e40100 	strbteq	r0, [r4], r0, lsl #2
    54d0:	000019cd 	andeq	r1, r0, sp, asr #19
    54d4:	00042321 	andeq	r2, r4, r1, lsr #6
    54d8:	003eff00 	eorseq	pc, lr, r0, lsl #30
    54dc:	04172100 	ldreq	r2, [r7], #-256	; 0x100
    54e0:	3f2b0000 	svccc	0x002b0000
    54e4:	0b210000 	bleq	8454ec <_Min_Stack_Size+0x8450ec>
    54e8:	63000004 	movwvs	r0, #4
    54ec:	2500003f 	strcs	r0, [r0, #-63]	; 0x3f
    54f0:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    54f4:	00042f2c 	andeq	r2, r4, ip, lsr #30
    54f8:	043b2c00 	ldrteq	r2, [fp], #-3072	; 0xc00
    54fc:	47220000 	strmi	r0, [r2, -r0]!
    5500:	91000004 	tstls	r0, r4
    5504:	2500003f 	strcs	r0, [r0, #-63]	; 0x3f
    5508:	00000808 	andeq	r0, r0, r8, lsl #16
    550c:	00042331 	andeq	r2, r4, r1, lsr r3
    5510:	17300400 	ldrne	r0, [r0, -r0, lsl #8]!
    5514:	06000004 	streq	r0, [r0], -r4
    5518:	00010403 	andeq	r0, r1, r3, lsl #8
    551c:	0b329f20 	bleq	cad1a4 <_Min_Stack_Size+0xcacda4>
    5520:	25000004 	strcs	r0, [r0, #-4]
    5524:	00000808 	andeq	r0, r0, r8, lsl #16
    5528:	00042f22 	andeq	r2, r4, r2, lsr #30
    552c:	003fc700 	eorseq	ip, pc, r0, lsl #14
    5530:	043b2300 	ldrteq	r2, [fp], #-768	; 0x300
    5534:	5a010000 	bpl	4553c <_Min_Stack_Size+0x4513c>
    5538:	00044722 	andeq	r4, r4, r2, lsr #14
    553c:	003fda00 	eorseq	sp, pc, r0, lsl #20
    5540:	08282600 	stmdaeq	r8!, {r9, sl, sp}
    5544:	198a0000 	stmibne	sl, {}	; <UNPREDICTABLE>
    5548:	58230000 	stmdapl	r3!, {}	; <UNPREDICTABLE>
    554c:	06000004 	streq	r0, [r0], -r4
    5550:	00010403 	andeq	r0, r1, r3, lsl #8
    5554:	26009f20 	strcs	r9, [r0], -r0, lsr #30
    5558:	00000848 	andeq	r0, r0, r8, asr #16
    555c:	000019a0 	andeq	r1, r0, r0, lsr #19
    5560:	00046623 	andeq	r6, r4, r3, lsr #12
    5564:	04030600 	streq	r0, [r3], #-1536	; 0x600
    5568:	9f200001 	svcls	0x00200001
    556c:	03c53700 	biceq	r3, r5, #0, 14
    5570:	27200000 	strcs	r0, [r0, -r0]!
    5574:	001c0800 	andseq	r0, ip, r0, lsl #16
    5578:	bd010000 	stclt	0, cr0, [r1, #-0]
    557c:	03d6320b 	bicseq	r3, r6, #-1342177280	; 0xb0000000
    5580:	202b0000 	eorcs	r0, fp, r0
    5584:	1c080027 	stcne	0, cr0, [r8], {39}	; 0x27
    5588:	22000000 	andcs	r0, r0, #0
    558c:	000003e2 	andeq	r0, r0, r2, ror #7
    5590:	00003ff8 	strdeq	r3, [r0], -r8
    5594:	00000000 	andeq	r0, r0, r0
    5598:	fa240000 	blx	9055a0 <_Min_Stack_Size+0x9051a0>
    559c:	34000003 	strcc	r0, [r0], #-3
    55a0:	78080024 	stmdavc	r8, {r2, r5}
    55a4:	01000008 	tsteq	r0, r8
    55a8:	1aa706ec 	bne	fe9c7160 <_estack+0xde997160>
    55ac:	23210000 	teqcs	r1, #0
    55b0:	17000004 	strne	r0, [r0, -r4]
    55b4:	21000040 	tstcs	r0, r0, asr #32
    55b8:	00000417 	andeq	r0, r0, r7, lsl r4
    55bc:	00004037 	andeq	r4, r0, r7, lsr r0
    55c0:	00040b21 	andeq	r0, r4, r1, lsr #22
    55c4:	00405f00 	subeq	r5, r0, r0, lsl #30
    55c8:	08782500 	ldmdaeq	r8!, {r8, sl, sp}^
    55cc:	2f2c0000 	svccs	0x002c0000
    55d0:	2c000004 	stccs	0, cr0, [r0], {4}
    55d4:	0000043b 	andeq	r0, r0, fp, lsr r4
    55d8:	00044722 	andeq	r4, r4, r2, lsr #14
    55dc:	00408d00 	subeq	r8, r0, r0, lsl #26
    55e0:	08882500 	stmeq	r8, {r8, sl, sp}
    55e4:	23210000 	teqcs	r1, #0
    55e8:	b8000004 	stmdalt	r0, {r2}
    55ec:	21000040 	tstcs	r0, r0, asr #32
    55f0:	00000417 	andeq	r0, r0, r7, lsl r4
    55f4:	000040cc 	andeq	r4, r0, ip, asr #1
    55f8:	00040b21 	andeq	r0, r4, r1, lsr #22
    55fc:	0040e400 	subeq	lr, r0, r0, lsl #8
    5600:	08882500 	stmeq	r8, {r8, sl, sp}
    5604:	2f220000 	svccs	0x00220000
    5608:	ff000004 			; <UNDEFINED> instruction: 0xff000004
    560c:	22000040 	andcs	r0, r0, #64	; 0x40
    5610:	0000043b 	andeq	r0, r0, fp, lsr r4
    5614:	00004112 	andeq	r4, r0, r2, lsl r1
    5618:	00044722 	andeq	r4, r4, r2, lsr #14
    561c:	00412500 	subeq	r2, r1, r0, lsl #10
    5620:	08a82600 	stmiaeq	r8!, {r9, sl, sp}
    5624:	1a670000 	bne	19c562c <_Min_Stack_Size+0x19c522c>
    5628:	58220000 	stmdapl	r2!, {}	; <UNPREDICTABLE>
    562c:	cc000004 	stcgt	0, cr0, [r0], {4}
    5630:	00000040 	andeq	r0, r0, r0, asr #32
    5634:	0008c026 	andeq	ip, r8, r6, lsr #32
    5638:	001a7a00 	andseq	r7, sl, r0, lsl #20
    563c:	04662200 	strbteq	r2, [r6], #-512	; 0x200
    5640:	41380000 	teqmi	r8, r0
    5644:	37000000 	strcc	r0, [r0, -r0]
    5648:	000003c5 	andeq	r0, r0, r5, asr #7
    564c:	08002558 	stmdaeq	r0, {r3, r4, r6, r8, sl, sp}
    5650:	0000001a 	andeq	r0, r0, sl, lsl r0
    5654:	320bbd01 	andcc	fp, fp, #1, 26	; 0x40
    5658:	000003d6 	ldrdeq	r0, [r0], -r6
    565c:	0025582b 	eoreq	r5, r5, fp, lsr #16
    5660:	00001a08 	andeq	r1, r0, r8, lsl #20
    5664:	03e22200 	mvneq	r2, #0, 4
    5668:	41500000 	cmpmi	r0, r0
	...
    5674:	00245227 	eoreq	r5, r4, r7, lsr #4
    5678:	00125b08 	andseq	r5, r2, r8, lsl #22
    567c:	24ec2700 	strbtcs	r2, [ip], #1792	; 0x700
    5680:	125b0800 	subsne	r0, fp, #0, 16
    5684:	07000000 	streq	r0, [r0, -r0]
    5688:	00000474 	andeq	r0, r0, r4, ror r4
    568c:	00010107 	andeq	r0, r1, r7, lsl #2
    5690:	1ac90700 	bne	ff247298 <_estack+0xdf217298>
    5694:	04060000 	streq	r0, [r6], #-0
    5698:	000000c4 	andeq	r0, r0, r4, asr #1
    569c:	000b4720 	andeq	r4, fp, r0, lsr #14
    56a0:	00276800 	eoreq	r6, r7, r0, lsl #16
    56a4:	00008c08 	andeq	r8, r0, r8, lsl #24
    56a8:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    56ac:	2600001a 			; <UNDEFINED> instruction: 0x2600001a
    56b0:	000008f8 	strdeq	r0, [r0], -r8
    56b4:	00001af5 	strdeq	r1, [r0], -r5
    56b8:	000b5522 	andeq	r5, fp, r2, lsr #10
    56bc:	00416f00 	subeq	r6, r1, r0, lsl #30
    56c0:	d0270000 	eorle	r0, r7, r0
    56c4:	90080027 	andls	r0, r8, r7, lsr #32
    56c8:	00000023 	andeq	r0, r0, r3, lsr #32
    56cc:	0011b328 	andseq	fp, r1, r8, lsr #6
    56d0:	08730100 	ldmdaeq	r3!, {r8}^
    56d4:	080027f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, sp}
    56d8:	00000084 	andeq	r0, r0, r4, lsl #1
    56dc:	1bc79c01 	blne	ff1ec6e8 <_estack+0xdf1bc6e8>
    56e0:	02290000 	eoreq	r0, r9, #0
    56e4:	01000008 	tsteq	r0, r8
    56e8:	048b0873 	streq	r0, [fp], #2163	; 0x873
    56ec:	41a70000 			; <UNDEFINED> instruction: 0x41a70000
    56f0:	a0290000 	eorge	r0, r9, r0
    56f4:	01000017 	tsteq	r0, r7, lsl r0
    56f8:	05830873 	streq	r0, [r3, #2163]	; 0x873
    56fc:	41e10000 	mvnmi	r0, r0
    5700:	cf1b0000 	svcgt	0x001b0000
    5704:	0100000b 	tsteq	r0, fp
    5708:	010c0875 	tsteq	ip, r5, ror r8
    570c:	423c0000 	eorsmi	r0, ip, #0
    5710:	69240000 	stmdbvs	r4!, {}	; <UNPREDICTABLE>
    5714:	16000005 	strne	r0, [r0], -r5
    5718:	10080028 	andne	r0, r8, r8, lsr #32
    571c:	01000009 	tsteq	r0, r9
    5720:	1b88089f 	blne	fe2079a4 <_estack+0xde1d79a4>
    5724:	76210000 	strtvc	r0, [r1], -r0
    5728:	3c000005 	stccc	0, cr0, [r0], {5}
    572c:	26000042 	strcs	r0, [r0], -r2, asr #32
    5730:	00000930 	andeq	r0, r0, r0, lsr r9
    5734:	00001b7e 	andeq	r1, r0, lr, ror fp
    5738:	00057621 	andeq	r7, r5, r1, lsr #12
    573c:	00425b00 	subeq	r5, r2, r0, lsl #22
    5740:	284a2d00 	stmdacs	sl, {r8, sl, fp, sp}^
    5744:	23f00800 	mvnscs	r0, #0, 16
    5748:	27000000 	strcs	r0, [r0, -r0]
    574c:	0800282e 	stmdaeq	r0, {r1, r2, r3, r5, fp, sp}
    5750:	000023f0 	strdeq	r2, [r0], -r0
    5754:	28061c00 	stmdacs	r6, {sl, fp, ip}
    5758:	23f00800 	mvnscs	r0, #0, 16
    575c:	1b9d0000 	blne	fe745764 <_estack+0xde715764>
    5760:	011d0000 	tsteq	sp, r0
    5764:	01f30350 	mvnseq	r0, r0, asr r3
    5768:	0e270050 	mcreq	0, 1, r0, cr7, cr0, {2}
    576c:	a2080028 	andge	r0, r8, #40	; 0x28
    5770:	38000023 	stmdacc	r0, {r0, r1, r5}
    5774:	08002858 	stmdaeq	r0, {r3, r4, r6, fp, sp}
    5778:	00002372 	andeq	r2, r0, r2, ror r3
    577c:	00001bbd 			; <UNDEFINED> instruction: 0x00001bbd
    5780:	0550011d 	ldrbeq	r0, [r0, #-285]	; 0x11d
    5784:	0001d803 	andeq	sp, r1, r3, lsl #16
    5788:	5c270020 	stcpl	0, cr0, [r7], #-128	; 0xffffff80
    578c:	90080028 	andls	r0, r8, r8, lsr #32
    5790:	00000023 	andeq	r0, r0, r3, lsr #32
    5794:	000d5228 	andeq	r5, sp, r8, lsr #4
    5798:	08ae0100 	stmiaeq	lr!, {r8}
    579c:	08002878 	stmdaeq	r0, {r3, r4, r5, r6, fp, sp}
    57a0:	0000009c 	muleq	r0, ip, r0
    57a4:	1c989c01 	ldcne	12, cr9, [r8], {1}
    57a8:	02290000 	eoreq	r0, r9, #0
    57ac:	01000008 	tsteq	r0, r8
    57b0:	047a08ae 	ldrbteq	r0, [sl], #-2222	; 0x8ae
    57b4:	427a0000 	rsbsmi	r0, sl, #0
    57b8:	a6290000 	strtge	r0, [r9], -r0
    57bc:	01000009 	tsteq	r0, r9
    57c0:	058308ae 	streq	r0, [r3, #2222]	; 0x8ae
    57c4:	42cd0000 	sbcmi	r0, sp, #0
    57c8:	a0290000 	eorge	r0, r9, r0
    57cc:	01000017 	tsteq	r0, r7, lsl r0
    57d0:	058308ae 	streq	r0, [r3, #2222]	; 0x8ae
    57d4:	43200000 	teqmi	r0, #0
    57d8:	cf1b0000 	svcgt	0x001b0000
    57dc:	0100000b 	tsteq	r0, fp
    57e0:	010c08b0 			; <UNDEFINED> instruction: 0x010c08b0
    57e4:	439f0000 	orrsmi	r0, pc, #0
    57e8:	69240000 	stmdbvs	r4!, {}	; <UNPREDICTABLE>
    57ec:	ae000005 	cdpge	0, 0, cr0, cr0, cr5, {0}
    57f0:	48080028 	stmdami	r8, {r3, r5}
    57f4:	01000009 	tsteq	r0, r9
    57f8:	1c6008e1 	stclne	8, cr0, [r0], #-900	; 0xfffffc7c
    57fc:	76210000 	strtvc	r0, [r1], -r0
    5800:	9f000005 	svcls	0x00000005
    5804:	26000043 	strcs	r0, [r0], -r3, asr #32
    5808:	00000970 	andeq	r0, r0, r0, ror r9
    580c:	00001c56 	andeq	r1, r0, r6, asr ip
    5810:	00057621 	andeq	r7, r5, r1, lsr #12
    5814:	0043c900 	subeq	ip, r3, r0, lsl #18
    5818:	28e82d00 	stmiacs	r8!, {r8, sl, fp, sp}^
    581c:	23f00800 	mvnscs	r0, #0, 16
    5820:	27000000 	strcs	r0, [r0, -r0]
    5824:	080028c6 	stmdaeq	r0, {r1, r2, r6, r7, fp, sp}
    5828:	000023f0 	strdeq	r2, [r0], -r0
    582c:	28882700 	stmcs	r8, {r8, r9, sl, sp}
    5830:	23900800 	orrscs	r0, r0, #0, 16
    5834:	9e270000 	cdpls	0, 2, cr0, cr7, cr0, {0}
    5838:	72080028 	andvc	r0, r8, #40	; 0x28
    583c:	27000023 	strcs	r0, [r0, -r3, lsr #32]
    5840:	080028a6 	stmdaeq	r0, {r1, r2, r5, r7, fp, sp}
    5844:	000023a2 	andeq	r2, r0, r2, lsr #7
    5848:	0028d627 	eoreq	sp, r8, r7, lsr #12
    584c:	00239008 	eoreq	r9, r3, r8
    5850:	28f63900 	ldmcs	r6!, {r8, fp, ip, sp}^
    5854:	23720800 	cmncs	r2, #0, 16
    5858:	011d0000 	tsteq	sp, r0
    585c:	d8030550 	stmdale	r3, {r4, r6, r8, sl}
    5860:	00200001 	eoreq	r0, r0, r1
    5864:	154a2800 	strbne	r2, [sl, #-2048]	; 0x800
    5868:	f2010000 	vhadd.s8	d0, d1, d0
    586c:	00291408 	eoreq	r1, r9, r8, lsl #8
    5870:	00006c08 	andeq	r6, r0, r8, lsl #24
    5874:	499c0100 	ldmibmi	ip, {r8}
    5878:	2900001d 	stmdbcs	r0, {r0, r2, r3, r4}
    587c:	00000802 	andeq	r0, r0, r2, lsl #16
    5880:	8b08f201 	blhi	24208c <_Min_Stack_Size+0x241c8c>
    5884:	e8000004 	stmda	r0, {r2}
    5888:	29000043 	stmdbcs	r0, {r0, r1, r6}
    588c:	000017a0 	andeq	r1, r0, r0, lsr #15
    5890:	8308f201 	movwhi	pc, #33281	; 0x8201	; <UNPREDICTABLE>
    5894:	22000005 	andcs	r0, r0, #5
    5898:	1b000044 	blne	59b0 <_Min_Stack_Size+0x55b0>
    589c:	00000bcf 	andeq	r0, r0, pc, asr #23
    58a0:	0c08f401 	cfstrseq	mvf15, [r8], {1}
    58a4:	72000001 	andvc	r0, r0, #1
    58a8:	24000044 	strcs	r0, [r0], #-68	; 0x44
    58ac:	00000569 	andeq	r0, r0, r9, ror #10
    58b0:	08002930 	stmdaeq	r0, {r4, r5, r8, fp, sp}
    58b4:	00000988 	andeq	r0, r0, r8, lsl #19
    58b8:	21091701 	tstcs	r9, r1, lsl #14
    58bc:	2100001d 	tstcs	r0, sp, lsl r0
    58c0:	00000576 	andeq	r0, r0, r6, ror r5
    58c4:	00004472 	andeq	r4, r0, r2, ror r4
    58c8:	0009b026 	andeq	fp, r9, r6, lsr #32
    58cc:	001d1700 	andseq	r1, sp, r0, lsl #14
    58d0:	05762100 	ldrbeq	r2, [r6, #-256]!	; 0x100
    58d4:	449c0000 	ldrmi	r0, [ip], #0
    58d8:	6a2d0000 	bvs	b458e0 <_Min_Stack_Size+0xb454e0>
    58dc:	f0080029 			; <UNDEFINED> instruction: 0xf0080029
    58e0:	00000023 	andeq	r0, r0, r3, lsr #32
    58e4:	00294827 	eoreq	r4, r9, r7, lsr #16
    58e8:	0023f008 	eoreq	pc, r3, r8
    58ec:	241c0000 	ldrcs	r0, [ip], #-0
    58f0:	72080029 	andvc	r0, r8, #41	; 0x29
    58f4:	36000023 	strcc	r0, [r0], -r3, lsr #32
    58f8:	1d00001d 	stcne	0, cr0, [r0, #-116]	; 0xffffff8c
    58fc:	f3035001 	vhadd.u8	d5, d3, d1
    5900:	27005001 	strcs	r5, [r0, -r1]
    5904:	0800292c 	stmdaeq	r0, {r2, r3, r5, r8, fp, sp}
    5908:	000023a2 	andeq	r2, r0, r2, lsr #7
    590c:	00295827 	eoreq	r5, r9, r7, lsr #16
    5910:	00239008 	eoreq	r9, r3, r8
    5914:	ee2e0000 	cdp	0, 2, cr0, cr14, cr0, {0}
    5918:	01000013 	tsteq	r0, r3, lsl r0
    591c:	00f6091d 	rscseq	r0, r6, sp, lsl r9
    5920:	29800000 	stmibcs	r0, {}	; <UNPREDICTABLE>
    5924:	007c0800 	rsbseq	r0, ip, r0, lsl #16
    5928:	9c010000 	stcls	0, cr0, [r1], {-0}
    592c:	00001df4 	strdeq	r1, [r0], -r4
    5930:	00080229 	andeq	r0, r8, r9, lsr #4
    5934:	091d0100 	ldmdbeq	sp, {r8}
    5938:	00001df4 	strdeq	r1, [r0], -r4
    593c:	000044bb 			; <UNDEFINED> instruction: 0x000044bb
    5940:	0017053a 	andseq	r0, r7, sl, lsr r5
    5944:	091f0100 	ldmdbeq	pc, {r8}	; <UNPREDICTABLE>
    5948:	000004aa 	andeq	r0, r0, sl, lsr #9
    594c:	721b5401 	andsvc	r5, fp, #16777216	; 0x1000000
    5950:	0100000d 	tsteq	r0, sp
    5954:	00f60920 	rscseq	r0, r6, r0, lsr #18
    5958:	44f50000 	ldrbtmi	r0, [r5], #0
    595c:	941c0000 	ldrls	r0, [ip], #-0
    5960:	a2080029 	andge	r0, r8, #41	; 0x29
    5964:	a5000023 	strge	r0, [r0, #-35]	; 0x23
    5968:	1d00001d 	stcne	0, cr0, [r0, #-116]	; 0xffffff8c
    596c:	75025001 	strvc	r5, [r2, #-1]
    5970:	a21c0000 	andsge	r0, ip, #0
    5974:	a2080029 	andge	r0, r8, #41	; 0x29
    5978:	b9000023 	stmdblt	r0, {r0, r1, r5}
    597c:	1d00001d 	stcne	0, cr0, [r0, #-116]	; 0xffffff8c
    5980:	75025001 	strvc	r5, [r2, #-1]
    5984:	be1c0000 	cdplt	0, 1, cr0, cr12, cr0, {0}
    5988:	72080029 	andvc	r0, r8, #41	; 0x29
    598c:	cd000023 	stcgt	0, cr0, [r0, #-140]	; 0xffffff74
    5990:	1d00001d 	stcne	0, cr0, [r0, #-116]	; 0xffffff8c
    5994:	75025101 	strvc	r5, [r2, #-257]	; 0x101
    5998:	dc1c0000 	ldcle	0, cr0, [ip], {-0}
    599c:	72080029 	andvc	r0, r8, #41	; 0x29
    59a0:	ea000023 	b	5a34 <_Min_Stack_Size+0x5634>
    59a4:	1d00001d 	stcne	0, cr0, [r0, #-116]	; 0xffffff8c
    59a8:	75025101 	strvc	r5, [r2, #-257]	; 0x101
    59ac:	50011d00 	andpl	r1, r1, r0, lsl #26
    59b0:	01880305 	orreq	r0, r8, r5, lsl #6
    59b4:	27002000 	strcs	r2, [r0, -r0]
    59b8:	080029e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, fp, sp}
    59bc:	00002390 	muleq	r0, r0, r3
    59c0:	1df90700 	ldclne	7, cr0, [r9]
    59c4:	04060000 	streq	r0, [r6], #-0
    59c8:	00001dff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    59cc:	0001e407 	andeq	lr, r1, r7, lsl #8
    59d0:	0f5f2e00 	svceq	0x005f2e00
    59d4:	53010000 	movwpl	r0, #4096	; 0x1000
    59d8:	0000f609 	andeq	pc, r0, r9, lsl #12
    59dc:	0029fc00 	eoreq	pc, r9, r0, lsl #24
    59e0:	00007008 	andeq	r7, r0, r8
    59e4:	ae9c0100 	fmlgee	f0, f4, f0
    59e8:	2900001e 	stmdbcs	r0, {r1, r2, r3, r4}
    59ec:	00001c5c 	andeq	r1, r0, ip, asr ip
    59f0:	de095301 	cdple	3, 0, cr5, cr9, cr1, {0}
    59f4:	14000001 	strne	r0, [r0], #-1
    59f8:	29000045 	stmdbcs	r0, {r0, r2, r6}
    59fc:	000009a6 	andeq	r0, r0, r6, lsr #19
    5a00:	83095301 	movwhi	r5, #37633	; 0x9301
    5a04:	67000005 	strvs	r0, [r0, -r5]
    5a08:	1b000045 	blne	5b24 <_Min_Stack_Size+0x5724>
    5a0c:	00001705 	andeq	r1, r0, r5, lsl #14
    5a10:	aa095501 	bge	25ae1c <_Min_Stack_Size+0x25aa1c>
    5a14:	ba000004 	blt	5a2c <_Min_Stack_Size+0x562c>
    5a18:	1b000045 	blne	5b34 <_Min_Stack_Size+0x5734>
    5a1c:	00000d72 	andeq	r0, r0, r2, ror sp
    5a20:	f6095601 			; <UNDEFINED> instruction: 0xf6095601
    5a24:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    5a28:	1c000045 	stcne	0, cr0, [r0], {69}	; 0x45
    5a2c:	08002a14 	stmdaeq	r0, {r2, r4, r9, fp, sp}
    5a30:	000023a2 	andeq	r2, r0, r2, lsr #7
    5a34:	00001e73 	andeq	r1, r0, r3, ror lr
    5a38:	0350011d 	cmpeq	r0, #1073741831	; 0x40000007
    5a3c:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    5a40:	002a1a1c 	eoreq	r1, sl, ip, lsl sl
    5a44:	0023a208 	eoreq	sl, r3, r8, lsl #4
    5a48:	001e8700 	andseq	r8, lr, r0, lsl #14
    5a4c:	50011d00 	andpl	r1, r1, r0, lsl #26
    5a50:	00007502 	andeq	r7, r0, r2, lsl #10
    5a54:	002a361c 	eoreq	r3, sl, ip, lsl r6
    5a58:	00237208 	eoreq	r7, r3, r8, lsl #4
    5a5c:	001e9b00 	andseq	r9, lr, r0, lsl #22
    5a60:	51011d00 	tstpl	r1, r0, lsl #26
    5a64:	00007502 	andeq	r7, r0, r2, lsl #10
    5a68:	002a5027 	eoreq	r5, sl, r7, lsr #32
    5a6c:	00239008 	eoreq	r9, r3, r8
    5a70:	2a562700 	bcs	158f678 <_Min_Stack_Size+0x158f278>
    5a74:	23900800 	orrscs	r0, r0, #0, 16
    5a78:	20000000 	andcs	r0, r0, r0
    5a7c:	000005ab 	andeq	r0, r0, fp, lsr #11
    5a80:	08002a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, sp}
    5a84:	00000020 	andeq	r0, r0, r0, lsr #32
    5a88:	1ed49c01 	cdpne	12, 13, cr9, cr4, cr1, {0}
    5a8c:	b8210000 	stmdalt	r1!, {}	; <UNPREDICTABLE>
    5a90:	f7000005 			; <UNDEFINED> instruction: 0xf7000005
    5a94:	27000045 	strcs	r0, [r0, -r5, asr #32]
    5a98:	08002a82 	stmdaeq	r0, {r1, r7, r9, fp, sp}
    5a9c:	00002390 	muleq	r0, r0, r3
    5aa0:	14992e00 	ldrne	r2, [r9], #3584	; 0xe00
    5aa4:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    5aa8:	0000f609 	andeq	pc, r0, r9, lsl #12
    5aac:	002a8c00 	eoreq	r8, sl, r0, lsl #24
    5ab0:	00007008 	andeq	r7, r0, r8
    5ab4:	899c0100 	ldmibhi	ip, {r8}
    5ab8:	2900001f 	stmdbcs	r0, {r0, r1, r2, r3, r4}
    5abc:	0000193d 	andeq	r1, r0, sp, lsr r9
    5ac0:	c5098801 	strgt	r8, [r9, #-2049]	; 0x801
    5ac4:	18000005 	stmdane	r0, {r0, r2}
    5ac8:	29000046 	stmdbcs	r0, {r1, r2, r6}
    5acc:	0000179f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    5ad0:	1d098801 	stcne	8, cr8, [r9, #-4]
    5ad4:	62000014 	andvs	r0, r0, #20
    5ad8:	1b000046 	blne	5bf8 <_Min_Stack_Size+0x57f8>
    5adc:	00000d72 	andeq	r0, r0, r2, ror sp
    5ae0:	f6098a01 			; <UNDEFINED> instruction: 0xf6098a01
    5ae4:	ec000000 	stc	0, cr0, [r0], {-0}
    5ae8:	26000046 	strcs	r0, [r0], -r6, asr #32
    5aec:	000009c8 	andeq	r0, r0, r8, asr #19
    5af0:	00001f52 	andeq	r1, r0, r2, asr pc
    5af4:	0017eb1b 	andseq	lr, r7, fp, lsl fp
    5af8:	09920100 	ldmibeq	r2, {r8}
    5afc:	00000583 	andeq	r0, r0, r3, lsl #11
    5b00:	00004715 	andeq	r4, r0, r5, lsl r7
    5b04:	0005ab36 	andeq	sl, r5, r6, lsr fp
    5b08:	002abe00 	eoreq	fp, sl, r0, lsl #28
    5b0c:	0009e808 	andeq	lr, r9, r8, lsl #16
    5b10:	09ab0100 	stmibeq	fp!, {r8}
    5b14:	0005b821 	andeq	fp, r5, r1, lsr #16
    5b18:	00473e00 	subeq	r3, r7, r0, lsl #28
    5b1c:	27000000 	strcs	r0, [r0, -r0]
    5b20:	08002a9a 	stmdaeq	r0, {r1, r3, r4, r7, r9, fp, sp}
    5b24:	0000236b 	andeq	r2, r0, fp, ror #6
    5b28:	002ace27 	eoreq	ip, sl, r7, lsr #28
    5b2c:	00238908 	eoreq	r8, r3, r8, lsl #18
    5b30:	2ad82700 	bcs	ff60f738 <_estack+0xdf5df738>
    5b34:	23890800 	orrcs	r0, r9, #0, 16
    5b38:	e2270000 	eor	r0, r7, #0
    5b3c:	8908002a 	stmdbhi	r8, {r1, r3, r5}
    5b40:	27000023 	strcs	r0, [r0, -r3, lsr #32]
    5b44:	08002aea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, fp, sp}
    5b48:	00002390 	muleq	r0, r0, r3
    5b4c:	002af027 	eoreq	pc, sl, r7, lsr #32
    5b50:	00239008 	eoreq	r9, r3, r8
    5b54:	dd3b0000 	ldcle	0, cr0, [fp, #-0]
    5b58:	01000013 	tsteq	r0, r3, lsl r0
    5b5c:	2afc09b9 	bcs	fff08248 <_estack+0xdfed8248>
    5b60:	000c0800 	andeq	r0, ip, r0, lsl #16
    5b64:	9c010000 	stcls	0, cr0, [r1], {-0}
    5b68:	001b722e 	andseq	r7, fp, lr, lsr #4
    5b6c:	09c10100 	stmibeq	r1, {r8}^
    5b70:	00000101 	andeq	r0, r0, r1, lsl #2
    5b74:	08002b08 	stmdaeq	r0, {r3, r8, r9, fp, sp}
    5b78:	00000006 	andeq	r0, r0, r6
    5b7c:	1fe49c01 	svcne	0x00e49c01
    5b80:	13290000 	teqne	r9, #0
    5b84:	01000016 	tsteq	r0, r6, lsl r0
    5b88:	01ef09c1 	mvneq	r0, r1, asr #19
    5b8c:	47510000 	ldrbmi	r0, [r1, -r0]
    5b90:	713a0000 	teqvc	sl, r0
    5b94:	0100000d 	tsteq	r0, sp
    5b98:	010109c3 	smlabteq	r1, r3, r9, r0
    5b9c:	50010000 	andpl	r0, r1, r0
    5ba0:	001be91b 	andseq	lr, fp, fp, lsl r9
    5ba4:	09c40100 	stmibeq	r4, {r8}^
    5ba8:	000004aa 	andeq	r0, r0, sl, lsr #9
    5bac:	00004772 	andeq	r4, r0, r2, ror r7
    5bb0:	1a1f2800 	bne	7cfbb8 <_Min_Stack_Size+0x7cf7b8>
    5bb4:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    5bb8:	002b1009 	eoreq	r1, fp, r9
    5bbc:	00000608 	andeq	r0, r0, r8, lsl #12
    5bc0:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
    5bc4:	3c000020 	stccc	0, cr0, [r0], {32}
    5bc8:	00001613 	andeq	r1, r0, r3, lsl r6
    5bcc:	ef09d801 	svc	0x0009d801
    5bd0:	01000001 	tsteq	r0, r1
    5bd4:	1c9a3c50 	ldcne	12, cr3, [sl], {80}	; 0x50
    5bd8:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    5bdc:	001abf09 	andseq	fp, sl, r9, lsl #30
    5be0:	1b510100 	blne	1445fe8 <_Min_Stack_Size+0x1445be8>
    5be4:	00001be9 	andeq	r1, r0, r9, ror #23
    5be8:	aa09da01 	bge	27c3f4 <_Min_Stack_Size+0x27bff4>
    5bec:	85000004 	strhi	r0, [r0, #-4]
    5bf0:	00000047 	andeq	r0, r0, r7, asr #32
    5bf4:	0012c32e 	andseq	ip, r2, lr, lsr #6
    5bf8:	0c2d0100 	stfeqs	f0, [sp], #-0
    5bfc:	000001ef 	andeq	r0, r0, pc, ror #3
    5c00:	08002b18 	stmdaeq	r0, {r3, r4, r8, r9, fp, sp}
    5c04:	0000000c 	andeq	r0, r0, ip
    5c08:	20509c01 	subscs	r9, r0, r1, lsl #24
    5c0c:	723a0000 	eorsvc	r0, sl, #0
    5c10:	0100000d 	tsteq	r0, sp
    5c14:	01ef0c2f 	mvneq	r0, pc, lsr #24
    5c18:	50010000 	andpl	r0, r1, r0
    5c1c:	0e632e00 	cdpeq	14, 6, cr2, cr3, cr0, {0}
    5c20:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    5c24:	0000f60c 	andeq	pc, r0, ip, lsl #12
    5c28:	002b2400 	eoreq	r2, fp, r0, lsl #8
    5c2c:	00002008 	andeq	r2, r0, r8
    5c30:	799c0100 	ldmibvc	ip, {r8}
    5c34:	3a000020 	bcc	5cbc <_Min_Stack_Size+0x58bc>
    5c38:	00000d72 	andeq	r0, r0, r2, ror sp
    5c3c:	f60c4001 			; <UNDEFINED> instruction: 0xf60c4001
    5c40:	01000000 	mrseq	r0, (UNDEF: 0)
    5c44:	2f280050 	svccs	0x00280050
    5c48:	01000011 	tsteq	r0, r1, lsl r0
    5c4c:	2b440c5a 	blcs	1108dbc <_Min_Stack_Size+0x11089bc>
    5c50:	00700800 	rsbseq	r0, r0, r0, lsl #16
    5c54:	9c010000 	stcls	0, cr0, [r1], {-0}
    5c58:	000020d7 	ldrdeq	r2, [r0], -r7
    5c5c:	001a4229 	andseq	r4, sl, r9, lsr #4
    5c60:	0c5a0100 	ldfeqe	f0, [sl], {-0}
    5c64:	000004e6 	andeq	r0, r0, r6, ror #9
    5c68:	00004798 	muleq	r0, r8, r7
    5c6c:	001be91b 	andseq	lr, fp, fp, lsl r9
    5c70:	0c5c0100 	ldfeqe	f0, [ip], {-0}
    5c74:	0000054f 	andeq	r0, r0, pc, asr #10
    5c78:	00004798 	muleq	r0, r8, r7
    5c7c:	002b861c 	eoreq	r8, fp, ip, lsl r6
    5c80:	0023a208 	eoreq	sl, r3, r8, lsl #4
    5c84:	0020c300 	eoreq	ip, r0, r0, lsl #6
    5c88:	50011d00 	andpl	r1, r1, r0, lsl #26
    5c8c:	00007702 	andeq	r7, r0, r2, lsl #14
    5c90:	002ba839 	eoreq	sl, fp, r9, lsr r8
    5c94:	00237208 	eoreq	r7, r3, r8, lsl #4
    5c98:	51011d00 	tstpl	r1, r0, lsl #26
    5c9c:	5001f305 	andpl	pc, r1, r5, lsl #6
    5ca0:	00000423 	andeq	r0, r0, r3, lsr #8
    5ca4:	0012ab28 	andseq	sl, r2, r8, lsr #22
    5ca8:	0c990100 	ldfeqs	f0, [r9], {0}
    5cac:	08002bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, sp}
    5cb0:	00000050 	andeq	r0, r0, r0, asr r0
    5cb4:	21359c01 	teqcs	r5, r1, lsl #24
    5cb8:	42290000 	eormi	r0, r9, #0
    5cbc:	0100001a 	tsteq	r0, sl, lsl r0
    5cc0:	04e60c99 	strbteq	r0, [r6], #3225	; 0xc99
    5cc4:	47d10000 	ldrbmi	r0, [r1, r0]
    5cc8:	e91b0000 	ldmdb	fp, {}	; <UNPREDICTABLE>
    5ccc:	0100001b 	tsteq	r0, fp, lsl r0
    5cd0:	054f0c9b 	strbeq	r0, [pc, #-3227]	; 503d <_Min_Stack_Size+0x4c3d>
    5cd4:	47d10000 	ldrbmi	r0, [r1, r0]
    5cd8:	ca1c0000 	bgt	705ce0 <_Min_Stack_Size+0x7058e0>
    5cdc:	a208002b 	andge	r0, r8, #43	; 0x2b
    5ce0:	21000023 	tstcs	r0, r3, lsr #32
    5ce4:	1d000021 	stcne	0, cr0, [r0, #-132]	; 0xffffff7c
    5ce8:	75025001 	strvc	r5, [r2, #-1]
    5cec:	f8390000 			; <UNDEFINED> instruction: 0xf8390000
    5cf0:	7208002b 	andvc	r0, r8, #43	; 0x2b
    5cf4:	1d000023 	stcne	0, cr0, [r0, #-140]	; 0xffffff74
    5cf8:	f3055101 	vrhadd.u8	d5, d5, d1
    5cfc:	04235001 	strteq	r5, [r3], #-1
    5d00:	fa2e0000 	blx	b85d08 <_Min_Stack_Size+0xb85908>
    5d04:	0100000b 	tsteq	r0, fp
    5d08:	010c0dcd 	smlabteq	ip, sp, sp, r0
    5d0c:	2c040000 	stccs	0, cr0, [r4], {-0}
    5d10:	00180800 	andseq	r0, r8, r0, lsl #16
    5d14:	9c010000 	stcls	0, cr0, [r1], {-0}
    5d18:	0000215e 	andeq	r2, r0, lr, asr r1
    5d1c:	000d713a 	andeq	r7, sp, sl, lsr r1
    5d20:	0dcf0100 	stfeqe	f0, [pc]	; 5d28 <_Min_Stack_Size+0x5928>
    5d24:	0000010c 	andeq	r0, r0, ip, lsl #2
    5d28:	0f005001 	svceq	0x00005001
    5d2c:	000001e4 	andeq	r0, r0, r4, ror #3
    5d30:	0000216e 	andeq	r2, r0, lr, ror #2
    5d34:	00009310 	andeq	r9, r0, r0, lsl r3
    5d38:	3d000400 	cfstrscc	mvf0, [r0, #-0]
    5d3c:	00001655 	andeq	r1, r0, r5, asr r6
    5d40:	215ebe01 	cmpcs	lr, r1, lsl #28
    5d44:	03050000 	movweq	r0, #20480	; 0x5000
    5d48:	20000118 	andcs	r0, r0, r8, lsl r1
    5d4c:	0016843d 	andseq	r8, r6, sp, lsr r4
    5d50:	e4bf0100 	ldrt	r0, [pc], #256	; 5d58 <_Min_Stack_Size+0x5958>
    5d54:	05000001 	streq	r0, [r0, #-1]
    5d58:	0001ac03 	andeq	sl, r1, r3, lsl #24
    5d5c:	16963d20 	ldrne	r3, [r6], r0, lsr #26
    5d60:	c0010000 	andgt	r0, r1, r0
    5d64:	000001e4 	andeq	r0, r0, r4, ror #3
    5d68:	01c00305 	biceq	r0, r0, r5, lsl #6
    5d6c:	f63d2000 			; <UNDEFINED> instruction: 0xf63d2000
    5d70:	01000019 	tsteq	r0, r9, lsl r0
    5d74:	0021b2c1 	eoreq	fp, r1, r1, asr #5
    5d78:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
    5d7c:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
    5d80:	0000047a 	andeq	r0, r0, sl, ror r4
    5d84:	0018023d 	andseq	r0, r8, sp, lsr r2
    5d88:	b2c20100 	sbclt	r0, r2, #0, 2
    5d8c:	05000021 	streq	r0, [r0, #-33]	; 0x21
    5d90:	0001a403 	andeq	sl, r1, r3, lsl #8
    5d94:	17503d20 	ldrbne	r3, [r0, -r0, lsr #26]
    5d98:	c3010000 	movwgt	r0, #4096	; 0x1000
    5d9c:	000001e4 	andeq	r0, r0, r4, ror #3
    5da0:	01880305 	orreq	r0, r8, r5, lsl #6
    5da4:	6e3d2000 	cdpvs	0, 3, cr2, cr13, cr0, {0}
    5da8:	01000018 	tsteq	r0, r8, lsl r0
    5dac:	0001e4c7 	andeq	lr, r1, r7, asr #9
    5db0:	04030500 	streq	r0, [r3], #-1280	; 0x500
    5db4:	3d200001 	stccc	0, cr0, [r0, #-4]!
    5db8:	000017ad 	andeq	r1, r0, sp, lsr #15
    5dbc:	21fbc801 	mvnscs	ip, r1, lsl #16
    5dc0:	03050000 	movweq	r0, #20480	; 0x5000
    5dc4:	20000100 	andcs	r0, r0, r0, lsl #2
    5dc8:	0001010e 	andeq	r0, r1, lr, lsl #2
    5dcc:	17213d00 	strne	r3, [r1, -r0, lsl #26]!
    5dd0:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    5dd4:	000001e4 	andeq	r0, r0, r4, ror #3
    5dd8:	01d80305 	bicseq	r0, r8, r5, lsl #6
    5ddc:	c33d2000 	teqgt	sp, #0
    5de0:	0100001b 	tsteq	r0, fp, lsl r0
    5de4:	0021fbd9 	ldrdeq	pc, [r1], -r9	; <UNPREDICTABLE>
    5de8:	80030500 	andhi	r0, r3, r0, lsl #10
    5dec:	3d200001 	stccc	0, cr0, [r0, #-4]!
    5df0:	000017bc 			; <UNDEFINED> instruction: 0x000017bc
    5df4:	2233da01 	eorscs	sp, r3, #4096	; 0x1000
    5df8:	03050000 	movweq	r0, #20480	; 0x5000
    5dfc:	200001a0 	andcs	r0, r0, r0, lsr #3
    5e00:	00010c0e 	andeq	r0, r1, lr, lsl #24
    5e04:	16303d00 	ldrtne	r3, [r0], -r0, lsl #26
    5e08:	db010000 	blle	45e10 <_Min_Stack_Size+0x45a10>
    5e0c:	000021fb 	strdeq	r2, [r0], -fp
    5e10:	01ec0305 	mvneq	r0, r5, lsl #6
    5e14:	433d2000 	teqmi	sp, #0
    5e18:	01000016 	tsteq	r0, r6, lsl r0
    5e1c:	00225adc 	ldrdeq	r5, [r2], -ip	; <UNPREDICTABLE>
    5e20:	fc030500 	stc2	5, cr0, [r3], {-0}
    5e24:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
    5e28:	000000f6 	strdeq	r0, [r0], -r6
    5e2c:	001a9a3d 	andseq	r9, sl, sp, lsr sl
    5e30:	fbdd0100 	blx	ff74623a <_estack+0xdf71623a>
    5e34:	05000021 	streq	r0, [r0, #-33]	; 0x21
    5e38:	0001d403 	andeq	sp, r1, r3, lsl #8
    5e3c:	1cb93d20 	ldcne	13, cr3, [r9], #128	; 0x80
    5e40:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    5e44:	0000225a 	andeq	r2, r0, sl, asr r2
    5e48:	01f00305 	mvnseq	r0, r5, lsl #6
    5e4c:	be3d2000 	cdplt	0, 3, cr2, cr13, cr0, {0}
    5e50:	01000019 	tsteq	r0, r9, lsl r0
    5e54:	00225adf 	ldrdeq	r5, [r2], -pc	; <UNPREDICTABLE>
    5e58:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
    5e5c:	3d200001 	stccc	0, cr0, [r0, #-4]!
    5e60:	0000194f 	andeq	r1, r0, pc, asr #18
    5e64:	0101e001 	tsteq	r1, r1
    5e68:	03050000 	movweq	r0, #20480	; 0x5000
    5e6c:	200001a8 	andcs	r0, r0, r8, lsr #3
    5e70:	0018c33d 	andseq	ip, r8, sp, lsr r3
    5e74:	33e10100 	mvncc	r0, #0, 2
    5e78:	05000022 	streq	r0, [r0, #-34]	; 0x22
    5e7c:	00001403 	andeq	r1, r0, r3, lsl #8
    5e80:	1bef3d20 	blne	ffbd5308 <_estack+0xdfba5308>
    5e84:	eb010000 	bl	45e8c <_Min_Stack_Size+0x45a8c>
    5e88:	000021fb 	strdeq	r2, [r0], -fp
    5e8c:	017c0305 	cmneq	ip, r5, lsl #6
    5e90:	ce3e2000 	cdpgt	0, 3, cr2, cr14, cr0, {0}
    5e94:	01000019 	tsteq	r0, r9, lsl r0
    5e98:	0022d6bb 	strhteq	sp, [r2], -fp
    5e9c:	84030500 	strhi	r0, [r3], #-1280	; 0x500
    5ea0:	0e200001 	cdpeq	0, 2, cr0, cr0, cr1, {0}
    5ea4:	000004aa 	andeq	r0, r0, sl, lsr #9
    5ea8:	00087d3f 	andeq	r7, r8, pc, lsr sp
    5eac:	01500700 	cmpeq	r0, r0, lsl #14
    5eb0:	000022ed 	andeq	r2, r0, sp, ror #5
    5eb4:	00048b09 	andeq	r8, r4, r9, lsl #22
    5eb8:	c2400000 	subgt	r0, r0, #0
    5ebc:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    5ec0:	009a0171 	addseq	r0, sl, r1, ror r1
    5ec4:	23030000 	movwcs	r0, #12288	; 0x3000
    5ec8:	21090000 	mrscs	r0, (UNDEF: 9)
    5ecc:	00000000 	andeq	r0, r0, r0
    5ed0:	00193641 	andseq	r3, r9, r1, asr #12
    5ed4:	9a190a00 	bls	6486dc <_Min_Stack_Size+0x6482dc>
    5ed8:	22000000 	andcs	r0, r0, #0
    5edc:	09000023 	stmdbeq	r0, {r0, r1, r5}
    5ee0:	0000009a 	muleq	r0, sl, r0
    5ee4:	00003309 	andeq	r3, r0, r9, lsl #6
    5ee8:	00210900 	eoreq	r0, r1, r0, lsl #18
    5eec:	3f000000 	svccc	0x00000000
    5ef0:	00000d7a 	andeq	r0, r0, sl, ror sp
    5ef4:	34017209 	strcc	r7, [r1], #-521	; 0x209
    5ef8:	09000023 	stmdbeq	r0, {r0, r1, r5}
    5efc:	0000009a 	muleq	r0, sl, r0
    5f00:	0bdb3f00 	bleq	ff6d5b08 <_estack+0xdf6a5b08>
    5f04:	5b070000 	blpl	1c5f0c <_Min_Stack_Size+0x1c5b0c>
    5f08:	00234601 	eoreq	r4, r3, r1, lsl #12
    5f0c:	23460900 	movtcs	r0, #26880	; 0x6900
    5f10:	07000000 	streq	r0, [r0, -r0]
    5f14:	000001de 	ldrdeq	r0, [r0], -lr
    5f18:	0018d840 	andseq	sp, r8, r0, asr #16
    5f1c:	016b0900 	cmneq	fp, r0, lsl #18
    5f20:	0000029d 	muleq	r0, sp, r2
    5f24:	0000236b 	andeq	r2, r0, fp, ror #6
    5f28:	00029d09 	andeq	r9, r2, r9, lsl #26
    5f2c:	00cf0900 	sbceq	r0, pc, r0, lsl #18
    5f30:	9a090000 	bls	245f38 <_Min_Stack_Size+0x245b38>
    5f34:	00000000 	andeq	r0, r0, r0
    5f38:	000ed442 	andeq	sp, lr, r2, asr #8
    5f3c:	3f7b0600 	svccc	0x007b0600
    5f40:	00000ac8 	andeq	r0, r0, r8, asr #21
    5f44:	89017d07 	stmdbhi	r1, {r0, r1, r2, r8, sl, fp, ip, sp, lr}
    5f48:	09000023 	stmdbeq	r0, {r0, r1, r5}
    5f4c:	0000048b 	andeq	r0, r0, fp, lsl #9
    5f50:	00234609 	eoreq	r4, r3, r9, lsl #12
    5f54:	a4420000 	strbge	r0, [r2], #-0
    5f58:	0600000e 	streq	r0, [r0], -lr
    5f5c:	0866437c 	stmdaeq	r6!, {r2, r3, r4, r5, r6, r8, r9, lr}^
    5f60:	7d060000 	stcvc	0, cr0, [r6, #-0]
    5f64:	000000c4 	andeq	r0, r0, r4, asr #1
    5f68:	000ef342 	andeq	pc, lr, r2, asr #6
    5f6c:	40720600 	rsbsmi	r0, r2, r0, lsl #12
    5f70:	00000a8e 	andeq	r0, r0, lr, lsl #21
    5f74:	01018c07 	tsteq	r1, r7, lsl #24
    5f78:	b8000001 	stmdalt	r0, {r0}
    5f7c:	09000023 	stmdbeq	r0, {r0, r1, r5}
    5f80:	00002346 	andeq	r2, r0, r6, asr #6
    5f84:	15b54200 	ldrne	r4, [r5, #512]!	; 0x200
    5f88:	b4060000 	strlt	r0, [r6], #-0
    5f8c:	00096644 	andeq	r6, r9, r4, asr #12
    5f90:	d07e0600 	rsbsle	r0, lr, r0, lsl #12
    5f94:	09000023 	stmdbeq	r0, {r0, r1, r5}
    5f98:	000000c4 	andeq	r0, r0, r4, asr #1
    5f9c:	16d94500 	ldrbne	r4, [r9], r0, lsl #10
    5fa0:	4d0b0000 	stcmi	0, cr0, [fp, #-0]
    5fa4:	0000f604 	andeq	pc, r0, r4, lsl #12
    5fa8:	15df4500 	ldrbne	r4, [pc, #1280]	; 64b0 <_Min_Stack_Size+0x60b0>
    5fac:	7b090000 	blvc	245fb4 <_Min_Stack_Size+0x245bb4>
    5fb0:	0000f601 	andeq	pc, r0, r1, lsl #12
    5fb4:	1a754600 	bne	1d577bc <_Min_Stack_Size+0x1d573bc>
    5fb8:	82090000 	andhi	r0, r9, #0
    5fbc:	088d4701 	stmeq	sp, {r0, r8, r9, sl, lr}
    5fc0:	68070000 	stmdavs	r7, {}	; <UNPREDICTABLE>
    5fc4:	048b0901 	streq	r0, [fp], #2305	; 0x901
    5fc8:	46090000 	strmi	r0, [r9], -r0
    5fcc:	00000023 	andeq	r0, r0, r3, lsr #32
    5fd0:	00129500 	andseq	r9, r2, r0, lsl #10
    5fd4:	15000400 	strne	r0, [r0, #-1024]	; 0x400
    5fd8:	04000011 	streq	r0, [r0], #-17
    5fdc:	0002f301 	andeq	pc, r2, r1, lsl #6
    5fe0:	20090100 	andcs	r0, r9, r0, lsl #2
    5fe4:	0ce80000 	stcleq	0, cr0, [r8]
    5fe8:	00000000 	andeq	r0, r0, r0
    5fec:	25110000 	ldrcs	r0, [r1, #-0]
    5ff0:	99020000 	stmdbls	r2, {}	; <UNPREDICTABLE>
    5ff4:	02000008 	andeq	r0, r0, #8
    5ff8:	00002cd4 	ldrdeq	r2, [r0], -r4
    5ffc:	07040300 	streq	r0, [r4, -r0, lsl #6]
    6000:	00000222 	andeq	r0, r0, r2, lsr #4
    6004:	69050404 	stmdbvs	r5, {r2, sl}
    6008:	0300746e 	movweq	r7, #1134	; 0x46e
    600c:	02020601 	andeq	r0, r2, #1048576	; 0x100000
    6010:	df020000 	svcle	0x00020000
    6014:	03000005 	movweq	r0, #5
    6018:	00004c1d 	andeq	r4, r0, sp, lsl ip
    601c:	08010300 	stmdaeq	r1, {r8, r9}
    6020:	00000200 	andeq	r0, r0, r0, lsl #4
    6024:	38050203 	stmdacc	r5, {r0, r1, r9}
    6028:	02000000 	andeq	r0, r0, #0
    602c:	00000094 	muleq	r0, r4, r0
    6030:	00652b03 	rsbeq	r2, r5, r3, lsl #22
    6034:	02030000 	andeq	r0, r3, #0
    6038:	0002aa07 	andeq	sl, r2, r7, lsl #20
    603c:	05040300 	streq	r0, [r4, #-768]	; 0x300
    6040:	0000015d 	andeq	r0, r0, sp, asr r1
    6044:	00008902 	andeq	r8, r0, r2, lsl #18
    6048:	7e410300 	cdpvc	3, 4, cr0, cr1, cr0, {0}
    604c:	03000000 	movweq	r0, #0
    6050:	021d0704 	andseq	r0, sp, #4, 14	; 0x100000
    6054:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    6058:	00015805 	andeq	r5, r1, r5, lsl #16
    605c:	07080300 	streq	r0, [r8, -r0, lsl #6]
    6060:	00000218 	andeq	r0, r0, r8, lsl r2
    6064:	42070403 	andmi	r0, r7, #50331648	; 0x3000000
    6068:	05000000 	streq	r0, [r0, #-0]
    606c:	08010304 	stmdaeq	r1, {r2, r8, r9}
    6070:	00000209 	andeq	r0, r0, r9, lsl #4
    6074:	00a90406 	adceq	r0, r9, r6, lsl #8
    6078:	9c070000 	stcls	0, cr0, [r7], {-0}
    607c:	06000000 	streq	r0, [r0], -r0
    6080:	0000b404 	andeq	fp, r0, r4, lsl #8
    6084:	e1020800 	tst	r2, r0, lsl #16
    6088:	04000005 	streq	r0, [r0], #-5
    608c:	0000412a 	andeq	r4, r0, sl, lsr #2
    6090:	00960200 	addseq	r0, r6, r0, lsl #4
    6094:	36040000 	strcc	r0, [r4], -r0
    6098:	0000005a 	andeq	r0, r0, sl, asr r0
    609c:	00008b02 	andeq	r8, r0, r2, lsl #22
    60a0:	73420400 	movtvc	r0, #9216	; 0x2400
    60a4:	02000000 	andeq	r0, r0, #0
    60a8:	00000029 	andeq	r0, r0, r9, lsr #32
    60ac:	00e14905 	rsceq	r4, r1, r5, lsl #18
    60b0:	04060000 	streq	r0, [r6], #-0
    60b4:	000000e7 	andeq	r0, r0, r7, ror #1
    60b8:	0000f209 	andeq	pc, r0, r9, lsl #4
    60bc:	009a0a00 	addseq	r0, sl, r0, lsl #20
    60c0:	02000000 	andeq	r0, r0, #0
    60c4:	00000456 	andeq	r0, r0, r6, asr r4
    60c8:	00cb5d06 	sbceq	r5, fp, r6, lsl #26
    60cc:	ef020000 	svc	0x00020000
    60d0:	06000003 	streq	r0, [r0], -r3
    60d4:	00006c5e 	andeq	r6, r0, lr, asr ip
    60d8:	03ee0200 	mvneq	r0, #0, 4
    60dc:	5f060000 	svcpl	0x00060000
    60e0:	0000007e 	andeq	r0, r0, lr, ror r0
    60e4:	00016602 	andeq	r6, r1, r2, lsl #12
    60e8:	cb650600 	blgt	19478f0 <_Min_Stack_Size+0x19474f0>
    60ec:	0b000000 	bleq	60f4 <_Min_Stack_Size+0x5cf4>
    60f0:	000009ca 	andeq	r0, r0, sl, asr #19
    60f4:	67880714 	usada8vs	r8, r4, r7, r0
    60f8:	0c000001 	stceq	0, cr0, [r0], {1}
    60fc:	000009a6 	andeq	r0, r0, r6, lsr #19
    6100:	01138a07 	tsteq	r3, r7, lsl #20
    6104:	0c000000 	stceq	0, cr0, [r0], {-0}
    6108:	00000a9b 	muleq	r0, fp, sl
    610c:	01678b07 	cmneq	r7, r7, lsl #22
    6110:	0c040000 	stceq	0, cr0, [r4], {-0}
    6114:	000008a0 	andeq	r0, r0, r0, lsr #17
    6118:	01678c07 	cmneq	r7, r7, lsl #24
    611c:	0c080000 	stceq	0, cr0, [r8], {-0}
    6120:	00000949 	andeq	r0, r0, r9, asr #18
    6124:	009a8d07 	addseq	r8, sl, r7, lsl #26
    6128:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    612c:	00000a3b 	andeq	r0, r0, fp, lsr sl
    6130:	009a8e07 	addseq	r8, sl, r7, lsl #28
    6134:	00100000 	andseq	r0, r0, r0
    6138:	011e0406 	tsteq	lr, r6, lsl #8
    613c:	89020000 	stmdbhi	r2, {}	; <UNPREDICTABLE>
    6140:	07000009 	streq	r0, [r0, -r9]
    6144:	00011e90 	muleq	r1, r0, lr
    6148:	0bb20b00 	bleq	fec88d50 <_estack+0xdec58d50>
    614c:	070c0000 	streq	r0, [ip, -r0]
    6150:	0001a992 	muleq	r1, r2, r9
    6154:	09a60c00 	stmibeq	r6!, {sl, fp}
    6158:	94070000 	strls	r0, [r7], #-0
    615c:	00000113 	andeq	r0, r0, r3, lsl r1
    6160:	0a9b0c00 	beq	fe6c9168 <_estack+0xde699168>
    6164:	95070000 	strls	r0, [r7, #-0]
    6168:	00000167 	andeq	r0, r0, r7, ror #2
    616c:	08a00c04 	stmiaeq	r0!, {r2, sl, fp}
    6170:	96070000 	strls	r0, [r7], -r0
    6174:	00000167 	andeq	r0, r0, r7, ror #2
    6178:	85020008 	strhi	r0, [r2, #-8]
    617c:	07000009 	streq	r0, [r0, -r9]
    6180:	00017898 	muleq	r1, r8, r8
    6184:	09a00b00 	stmibeq	r0!, {r8, r9, fp}
    6188:	07140000 	ldreq	r0, [r4, -r0]
    618c:	0001e59d 	muleq	r1, sp, r5
    6190:	0b1e0c00 	bleq	789198 <_Min_Stack_Size+0x788d98>
    6194:	9f070000 	svcls	0x00070000
    6198:	00000108 	andeq	r0, r0, r8, lsl #2
    619c:	0baa0c00 	bleq	fea891a4 <_estack+0xdea591a4>
    61a0:	a0070000 	andge	r0, r7, r0
    61a4:	000001e5 	andeq	r0, r0, r5, ror #3
    61a8:	0f440c04 	svceq	0x00440c04
    61ac:	a1070000 	mrsge	r0, (UNDEF: 7)
    61b0:	000001a9 	andeq	r0, r0, r9, lsr #3
    61b4:	04060008 	streq	r0, [r6], #-8
    61b8:	0000016d 	andeq	r0, r0, sp, ror #2
    61bc:	00097e02 	andeq	r7, r9, r2, lsl #28
    61c0:	b4a20700 	strtlt	r0, [r2], #1792	; 0x700
    61c4:	02000001 	andeq	r0, r0, #1
    61c8:	0000004b 	andeq	r0, r0, fp, asr #32
    61cc:	009a6308 	addseq	r6, sl, r8, lsl #6
    61d0:	c40b0000 	strgt	r0, [fp], #-0
    61d4:	0c000001 	stceq	0, cr0, [r0], {1}
    61d8:	02328108 	eorseq	r8, r2, #8, 2
    61dc:	580c0000 	stmdapl	ip, {}	; <UNPREDICTABLE>
    61e0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    61e4:	00009a83 	andeq	r9, r0, r3, lsl #21
    61e8:	740c0000 	strvc	r0, [ip], #-0
    61ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    61f0:	0000cb84 	andeq	ip, r0, r4, lsl #23
    61f4:	bd0c0400 	cfstrslt	mvf0, [ip, #-0]
    61f8:	08000002 	stmdaeq	r0, {r1}
    61fc:	0000cb85 	andeq	ip, r0, r5, lsl #23
    6200:	02000800 	andeq	r0, r0, #0, 16
    6204:	000001d3 	ldrdeq	r0, [r0], -r3
    6208:	02018608 	andeq	r8, r1, #8, 12	; 0x800000
    620c:	a3070000 	movwge	r0, #28672	; 0x7000
    6210:	06000000 	streq	r0, [r0], -r0
    6214:	0000f204 	andeq	pc, r0, r4, lsl #4
    6218:	14160200 	ldrne	r0, [r6], #-512	; 0x200
    621c:	54090000 	strpl	r0, [r9], #-0
    6220:	0000009a 	muleq	r0, sl, r0
    6224:	001e4002 	andseq	r4, lr, r2
    6228:	9a720a00 	bls	1c88a30 <_Min_Stack_Size+0x1c88630>
    622c:	02000000 	andeq	r0, r0, #0
    6230:	00001f6e 	andeq	r1, r0, lr, ror #30
    6234:	0269770a 	rsbeq	r7, r9, #2621440	; 0x280000
    6238:	04060000 	streq	r0, [r6], #-0
    623c:	0000026f 	andeq	r0, r0, pc, ror #4
    6240:	00027a09 	andeq	r7, r2, r9, lsl #20
    6244:	02530a00 	subseq	r0, r3, #0, 20
    6248:	0b000000 	bleq	6250 <_Min_Stack_Size+0x5e50>
    624c:	00001d32 	andeq	r1, r0, r2, lsr sp
    6250:	db64012c 	blle	1906708 <_Min_Stack_Size+0x1906308>
    6254:	0c000002 	stceq	0, cr0, [r0], {2}
    6258:	00001e5a 	andeq	r1, r0, sl, asr lr
    625c:	00a36601 	adceq	r6, r3, r1, lsl #12
    6260:	0c000000 	stceq	0, cr0, [r0], {-0}
    6264:	00001ef2 	strdeq	r1, [r0], -r2
    6268:	016d6701 	cmneq	sp, r1, lsl #14
    626c:	0c040000 	stceq	0, cr0, [r4], {-0}
    6270:	00001e1e 	andeq	r1, r0, lr, lsl lr
    6274:	01136801 	tsteq	r3, r1, lsl #16
    6278:	0c180000 	ldceq	0, cr0, [r8], {-0}
    627c:	00001cd3 	ldrdeq	r1, [r0], -r3
    6280:	01086901 	tsteq	r8, r1, lsl #18
    6284:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    6288:	00001e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    628c:	009a6a01 	addseq	r6, sl, r1, lsl #20
    6290:	0c200000 	stceq	0, cr0, [r0], #-0
    6294:	00001fdd 	ldrdeq	r1, [r0], -sp
    6298:	025e6b01 	subseq	r6, lr, #1024	; 0x400
    629c:	0c240000 	stceq	0, cr0, [r4], #-0
    62a0:	00001ebe 			; <UNDEFINED> instruction: 0x00001ebe
    62a4:	01086d01 	tsteq	r8, r1, lsl #26
    62a8:	00280000 	eoreq	r0, r8, r0
    62ac:	001e0402 	andseq	r0, lr, r2, lsl #8
    62b0:	7a6f0100 	bvc	1bc66b8 <_Min_Stack_Size+0x1bc62b8>
    62b4:	02000002 	andeq	r0, r0, #2
    62b8:	00001fc8 	andeq	r1, r0, r8, asr #31
    62bc:	02db7301 	sbcseq	r7, fp, #67108864	; 0x4000000
    62c0:	0b0b0000 	bleq	2c62c8 <_Min_Stack_Size+0x2c5ec8>
    62c4:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    62c8:	03167a01 	tsteq	r6, #4096	; 0x1000
    62cc:	320c0000 	andcc	r0, ip, #0
    62d0:	0100001e 	tsteq	r0, lr, lsl r0
    62d4:	0001137c 	andeq	r1, r1, ip, ror r3
    62d8:	870c0000 	strhi	r0, [ip, -r0]
    62dc:	0100001e 	tsteq	r0, lr, lsl r0
    62e0:	0003167d 	andeq	r1, r3, sp, ror r6
    62e4:	06000400 	streq	r0, [r0], -r0, lsl #8
    62e8:	0002e604 	andeq	lr, r2, r4, lsl #12
    62ec:	1d080200 	sfmne	f0, 4, [r8, #-0]
    62f0:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    62f4:	000002f1 	strdeq	r0, [r0], -r1
    62f8:	8d01080d 	stchi	8, cr0, [r1, #-52]	; 0xffffffcc
    62fc:	0000033b 	andeq	r0, r0, fp, lsr r3
    6300:	001ddf0e 	andseq	sp, sp, lr, lsl #30
    6304:	1c8f0100 	stfnes	f0, [pc], {0}
    6308:	00000003 	andeq	r0, r0, r3
    630c:	001dca0b 	andseq	ip, sp, fp, lsl #20
    6310:	8a010c00 	bhi	49318 <_Min_Stack_Size+0x48f18>
    6314:	0000035e 	andeq	r0, r0, lr, asr r3
    6318:	001f9b0c 	andseq	r9, pc, ip, lsl #22
    631c:	fd8c0100 	stc2	1, cr0, [ip]
    6320:	00000000 	andeq	r0, r0, r0
    6324:	0100750f 	tsteq	r0, pc, lsl #10
    6328:	00032796 	muleq	r3, r6, r7
    632c:	02000400 	andeq	r0, r0, #0, 8
    6330:	00001df0 	strdeq	r1, [r0], -r0
    6334:	033b9701 	teqeq	fp, #262144	; 0x40000
    6338:	54100000 	ldrpl	r0, [r0], #-0
    633c:	0100001d 	tsteq	r0, sp, lsl r0
    6340:	00fd0214 	rscseq	r0, sp, r4, lsl r2
    6344:	b7010000 	strlt	r0, [r1, -r0]
    6348:	11000003 	tstne	r0, r3
    634c:	00001e87 	andeq	r1, r0, r7, lsl #29
    6350:	b7021401 	strlt	r1, [r2, -r1, lsl #8]
    6354:	11000003 	tstne	r0, r3
    6358:	00001e8f 	andeq	r1, r0, pc, lsl #29
    635c:	bc021401 	cfstrslt	mvf1, [r2], {1}
    6360:	11000003 	tstne	r0, r3
    6364:	00001f01 	andeq	r1, r0, r1, lsl #30
    6368:	bc021401 	cfstrslt	mvf1, [r2], {1}
    636c:	11000003 	tstne	r0, r3
    6370:	00001e7a 	andeq	r1, r0, sl, ror lr
    6374:	bc021401 	cfstrslt	mvf1, [r2], {1}
    6378:	12000003 	andne	r0, r0, #3
    637c:	00001d96 	muleq	r0, r6, sp
    6380:	fd021601 	stc2	6, cr1, [r2, #-4]
    6384:	00000000 	andeq	r0, r0, r0
    6388:	00031607 	andeq	r1, r3, r7, lsl #12
    638c:	01130700 	tsteq	r3, r0, lsl #14
    6390:	a9100000 	ldmdbge	r0, {}	; <UNPREDICTABLE>
    6394:	0100001e 	tsteq	r0, lr, lsl r0
    6398:	011301e3 	tsteq	r3, r3, ror #3
    639c:	eb010000 	bl	463a4 <_Min_Stack_Size+0x45fa4>
    63a0:	11000003 	tstne	r0, r3
    63a4:	00001f24 	andeq	r1, r0, r4, lsr #30
    63a8:	eb01e301 	bl	7efb4 <_Min_Stack_Size+0x7ebb4>
    63ac:	12000003 	andne	r0, r0, #3
    63b0:	0000204a 	andeq	r2, r0, sl, asr #32
    63b4:	1301e501 	movwne	lr, #5377	; 0x1501
    63b8:	00000001 	andeq	r0, r0, r1
    63bc:	0003f007 	andeq	pc, r3, r7
    63c0:	fd040600 	stc2	6, cr0, [r4, #-0]
    63c4:	13000000 	movwne	r0, #0
    63c8:	00001ce0 	andeq	r1, r0, r0, ror #25
    63cc:	0102f601 	tsteq	r2, r1, lsl #12
    63d0:	0016d914 	andseq	sp, r6, r4, lsl r9
    63d4:	fdec0100 	stc2l	1, cr0, [ip]
    63d8:	1c000000 	stcne	0, cr0, [r0], {-0}
    63dc:	9808002c 	stmdals	r8, {r2, r3, r5}
    63e0:	01000000 	mrseq	r0, (UNDEF: 0)
    63e4:	00050a9c 	muleq	r5, ip, sl
    63e8:	0d721500 	cfldr64eq	mvdx1, [r2, #-0]
    63ec:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    63f0:	000000fd 	strdeq	r0, [r0], -sp
    63f4:	00004815 	andeq	r4, r0, r5, lsl r8
    63f8:	0003f616 	andeq	pc, r3, r6, lsl r6	; <UNPREDICTABLE>
    63fc:	002c1e00 	eoreq	r1, ip, r0, lsl #28
    6400:	000b2808 	andeq	r2, fp, r8, lsl #16
    6404:	bcf40100 	ldflte	f0, [r4]
    6408:	17000004 	strne	r0, [r0, -r4]
    640c:	08002c26 	stmdaeq	r0, {r1, r2, r5, sl, fp, sp}
    6410:	000010a8 	andeq	r1, r0, r8, lsr #1
    6414:	002c2e17 	eoreq	r2, ip, r7, lsl lr
    6418:	0010af08 	andseq	sl, r0, r8, lsl #30
    641c:	2c5a1800 	mrrccs	8, 0, r1, sl, cr0
    6420:	10b60800 	adcsne	r0, r6, r0, lsl #16
    6424:	04600000 	strbteq	r0, [r0], #-0
    6428:	01190000 	tsteq	r9, r0
    642c:	00770250 	rsbseq	r0, r7, r0, asr r2
    6430:	2c601800 	stclcs	8, cr1, [r0], #-0
    6434:	10b60800 	adcsne	r0, r6, r0, lsl #16
    6438:	04740000 	ldrbteq	r0, [r4], #-0
    643c:	01190000 	tsteq	r9, r0
    6440:	00750250 	rsbseq	r0, r5, r0, asr r2
    6444:	2c721800 	ldclcs	8, cr1, [r2], #-0
    6448:	10cd0800 	sbcne	r0, sp, r0, lsl #16
    644c:	04920000 	ldreq	r0, [r2], #0
    6450:	01190000 	tsteq	r9, r0
    6454:	00760252 	rsbseq	r0, r6, r2, asr r2
    6458:	01510119 	cmpeq	r1, r9, lsl r1
    645c:	5001193c 	andpl	r1, r1, ip, lsr r9
    6460:	18003a01 	stmdane	r0, {r0, r9, fp, ip, sp}
    6464:	08002c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, sp}
    6468:	000010f2 	strdeq	r1, [r0], -r2
    646c:	000004a9 	andeq	r0, r0, r9, lsr #9
    6470:	05510119 	ldrbeq	r0, [r1, #-281]	; 0x119
    6474:	0052fc03 	subseq	pc, r2, r3, lsl #24
    6478:	80170008 	andshi	r0, r7, r8
    647c:	af08002c 	svcge	0x0008002c
    6480:	17000010 	smladne	r0, r0, r0, r0
    6484:	08002c90 	stmdaeq	r0, {r4, r7, sl, fp, sp}
    6488:	00001109 	andeq	r1, r0, r9, lsl #2
    648c:	2c4a1800 	mcrrcs	8, 0, r1, sl, cr0
    6490:	11140800 	tstne	r4, r0, lsl #16
    6494:	05000000 	streq	r0, [r0, #-0]
    6498:	01190000 	tsteq	r9, r0
    649c:	19300153 	ldmdbne	r0!, {r0, r1, r4, r6, r8}
    64a0:	0a035201 	beq	dacac <_Min_Stack_Size+0xda8ac>
    64a4:	01190104 	tsteq	r9, r4, lsl #2
    64a8:	04030551 	streq	r0, [r3], #-1361	; 0x551
    64ac:	19080053 	stmdbne	r8, {r0, r1, r4, r6}
    64b0:	03055001 	movweq	r5, #20481	; 0x5001
    64b4:	08002db5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, sl, fp, sp}
    64b8:	0c7d0219 	lfmeq	f0, 2, [sp], #-100	; 0xffffff9c
    64bc:	02193001 	andseq	r3, r9, #1
    64c0:	3001087d 	andcc	r0, r1, sp, ror r8
    64c4:	047d0219 	ldrbteq	r0, [sp], #-537	; 0x219
    64c8:	02193001 	andseq	r3, r9, #1
    64cc:	3201007d 	andcc	r0, r1, #125	; 0x7d
    64d0:	2c8a1700 	stccs	7, cr1, [sl], {0}
    64d4:	11090800 	tstne	r9, r0, lsl #16
    64d8:	1a000000 	bne	64e0 <_Min_Stack_Size+0x60e0>
    64dc:	00001fa6 	andeq	r1, r0, r6, lsr #31
    64e0:	53010f01 	movwpl	r0, #7937	; 0x1f01
    64e4:	b4000002 	strlt	r0, [r0], #-2
    64e8:	a808002c 	stmdage	r8, {r2, r3, r5}
    64ec:	01000000 	mrseq	r0, (UNDEF: 0)
    64f0:	0006469c 	muleq	r6, ip, r6
    64f4:	1e5a1b00 	vnmlsne.f64	d17, d10, d0
    64f8:	0f010000 	svceq	0x00010000
    64fc:	00023d01 	andeq	r3, r2, r1, lsl #26
    6500:	00484c00 	subeq	r4, r8, r0, lsl #24
    6504:	1e1e1b00 	vnmlsne.f64	d1, d14, d0
    6508:	0f010000 	svceq	0x00010000
    650c:	0003bc01 	andeq	fp, r3, r1, lsl #24
    6510:	00488000 	subeq	r8, r8, r0
    6514:	1cd31b00 	vldmiane	r3, {d17-d16}
    6518:	0f010000 	svceq	0x00010000
    651c:	00064601 	andeq	r4, r6, r1, lsl #12
    6520:	0048b400 	subeq	fp, r8, r0, lsl #8
    6524:	1e9f1b00 	vfnmsne.f64	d1, d15, d0
    6528:	0f010000 	svceq	0x00010000
    652c:	00064b01 	andeq	r4, r6, r1, lsl #22
    6530:	0048e800 	subeq	lr, r8, r0, lsl #16
    6534:	1fdd1b00 	svcne	0x00dd1b00
    6538:	0f010000 	svceq	0x00010000
    653c:	00025e01 	andeq	r5, r2, r1, lsl #28
    6540:	00491c00 	subeq	r1, r9, r0, lsl #24
    6544:	1cfd1c00 	ldclne	12, cr1, [sp]
    6548:	11010000 	mrsne	r0, (UNDEF: 1)
    654c:	00031601 	andeq	r1, r3, r1, lsl #12
    6550:	00493c00 	subeq	r3, r9, r0, lsl #24
    6554:	03f61d00 	mvnseq	r1, #0, 26
    6558:	2cce0000 	stclcs	0, cr0, [lr], {0}
    655c:	0b500800 	bleq	1408564 <_Min_Stack_Size+0x1408164>
    6560:	1f010000 	svcne	0x00010000
    6564:	00061401 	andeq	r1, r6, r1, lsl #8
    6568:	2cd41700 	ldclcs	7, cr1, [r4], {0}
    656c:	10a80800 	adcne	r0, r8, r0, lsl #16
    6570:	e2170000 	ands	r0, r7, #0
    6574:	af08002c 	svcge	0x0008002c
    6578:	18000010 	stmdane	r0, {r4}
    657c:	08002d14 	stmdaeq	r0, {r2, r4, r8, sl, fp, sp}
    6580:	000010b6 	strheq	r1, [r0], -r6
    6584:	000005c1 	andeq	r0, r0, r1, asr #11
    6588:	05500119 	ldrbeq	r0, [r0, #-281]	; 0x119
    658c:	0001f803 	andeq	pc, r1, r3, lsl #16
    6590:	1a180020 	bne	606618 <_Min_Stack_Size+0x606218>
    6594:	b608002d 	strlt	r0, [r8], -sp, lsr #32
    6598:	d5000010 	strle	r0, [r0, #-16]
    659c:	19000005 	stmdbne	r0, {r0, r2}
    65a0:	78025001 	stmdavc	r2, {r0, ip, lr}
    65a4:	32180000 	andscc	r0, r8, #0
    65a8:	cd08002d 	stcgt	0, cr0, [r8, #-180]	; 0xffffff4c
    65ac:	f3000010 	vqadd.u8	d0, d0, d0
    65b0:	19000005 	stmdbne	r0, {r0, r2}
    65b4:	79025201 	stmdbvc	r2, {r0, r9, ip, lr}
    65b8:	51011900 	tstpl	r1, r0, lsl #18
    65bc:	01193c01 	tsteq	r9, r1, lsl #24
    65c0:	003a0150 	eorseq	r0, sl, r0, asr r1
    65c4:	002d3c18 	eoreq	r3, sp, r8, lsl ip
    65c8:	0010f208 	andseq	pc, r0, r8, lsl #4
    65cc:	00060a00 	andeq	r0, r6, r0, lsl #20
    65d0:	51011900 	tstpl	r1, r0, lsl #18
    65d4:	52fc0305 	rscspl	r0, ip, #335544320	; 0x14000000
    65d8:	17000800 	strne	r0, [r0, -r0, lsl #16]
    65dc:	08002d42 	stmdaeq	r0, {r1, r6, r8, sl, fp, sp}
    65e0:	00001109 	andeq	r1, r0, r9, lsl #2
    65e4:	2cca1800 	stclcs	8, cr1, [sl], {0}
    65e8:	11720800 	cmnne	r2, r0, lsl #16
    65ec:	06280000 	strteq	r0, [r8], -r0
    65f0:	01190000 	tsteq	r9, r0
    65f4:	2c080250 	sfmcs	f0, 4, [r8], {80}	; 0x50
    65f8:	2cf81800 	ldclcs	8, cr1, [r8]
    65fc:	11880800 	orrne	r0, r8, r0, lsl #16
    6600:	063c0000 	ldrteq	r0, [ip], -r0
    6604:	01190000 	tsteq	r9, r0
    6608:	04740250 	ldrbteq	r0, [r4], #-592	; 0x250
    660c:	2d041700 	stccs	7, cr1, [r4, #-0]
    6610:	11090800 	tstne	r9, r0, lsl #16
    6614:	07000000 	streq	r0, [r0, -r0]
    6618:	00000108 	andeq	r0, r0, r8, lsl #2
    661c:	00009a07 	andeq	r9, r0, r7, lsl #20
    6620:	1fb31e00 	svcne	0x00b31e00
    6624:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    6628:	0000fd01 	andeq	pc, r0, r1, lsl #26
    662c:	06b60100 	ldrteq	r0, [r6], r0, lsl #2
    6630:	88110000 	ldmdahi	r1, {}	; <UNPREDICTABLE>
    6634:	0100001e 	tsteq	r0, lr, lsl r0
    6638:	02530138 	subseq	r0, r3, #56, 2
    663c:	e7110000 	ldr	r0, [r1, -r0]
    6640:	0100001e 	tsteq	r0, lr, lsl r0
    6644:	06b60138 			; <UNDEFINED> instruction: 0x06b60138
    6648:	f0110000 			; <UNDEFINED> instruction: 0xf0110000
    664c:	0100001f 	tsteq	r0, pc, lsl r0
    6650:	03bc0138 			; <UNDEFINED> instruction: 0x03bc0138
    6654:	79110000 	ldmdbvc	r1, {}	; <UNPREDICTABLE>
    6658:	01000010 	tsteq	r0, r0, lsl r0
    665c:	03eb0138 	mvneq	r0, #56, 2
    6660:	a0110000 	andsge	r0, r1, r0
    6664:	01000017 	tsteq	r0, r7, lsl r0
    6668:	03bc0138 			; <UNDEFINED> instruction: 0x03bc0138
    666c:	72120000 	andsvc	r0, r2, #0
    6670:	0100000d 	tsteq	r0, sp
    6674:	00fd013a 	rscseq	r0, sp, sl, lsr r1
    6678:	65120000 	ldrvs	r0, [r2, #-0]
    667c:	0100001f 	tsteq	r0, pc, lsl r0
    6680:	035e013b 	cmpeq	lr, #-1073741810	; 0xc000000e
    6684:	07000000 	streq	r0, [r0, -r0]
    6688:	000000fd 	strdeq	r0, [r0], -sp
    668c:	0006501f 	andeq	r5, r6, pc, lsl r0
    6690:	002d5c00 	eoreq	r5, sp, r0, lsl #24
    6694:	00005808 	andeq	r5, r0, r8, lsl #16
    6698:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
    669c:	20000007 	andcs	r0, r0, r7
    66a0:	00000661 	andeq	r0, r0, r1, ror #12
    66a4:	00004971 	andeq	r4, r0, r1, ror r9
    66a8:	00066d20 	andeq	r6, r6, r0, lsr #26
    66ac:	0049d000 	subeq	sp, r9, r0
    66b0:	06792000 	ldrbteq	r2, [r9], -r0
    66b4:	4a210000 	bmi	8466bc <_Min_Stack_Size+0x8462bc>
    66b8:	85200000 	strhi	r0, [r0, #-0]!
    66bc:	72000006 	andvc	r0, r0, #6
    66c0:	2000004a 	andcs	r0, r0, sl, asr #32
    66c4:	00000691 	muleq	r0, r1, r6
    66c8:	00004ac2 	andeq	r4, r0, r2, asr #21
    66cc:	00069d21 	andeq	r9, r6, r1, lsr #26
    66d0:	004aee00 	subeq	lr, sl, r0, lsl #28
    66d4:	06a92200 	strteq	r2, [r9], r0, lsl #4
    66d8:	91020000 	mrsls	r0, (UNDEF: 2)
    66dc:	2d741764 	ldclcs	7, cr1, [r4, #-400]!	; 0xfffffe70
    66e0:	119f0800 	orrsne	r0, pc, r0, lsl #16
    66e4:	84180000 	ldrhi	r0, [r8], #-0
    66e8:	ab08002d 	blge	2067a4 <_Min_Stack_Size+0x2063a4>
    66ec:	33000011 	movwcc	r0, #17
    66f0:	19000007 	stmdbne	r0, {r0, r1, r2}
    66f4:	30015301 	andcc	r5, r1, r1, lsl #6
    66f8:	01520119 	cmpeq	r2, r9, lsl r1
    66fc:	51011930 	tstpl	r1, r0, lsr r9
    6700:	00649102 	rsbeq	r9, r4, r2, lsl #2
    6704:	002d9418 	eoreq	r9, sp, r8, lsl r4
    6708:	0011d508 	andseq	sp, r1, r8, lsl #10
    670c:	00075900 	andeq	r5, r7, r0, lsl #18
    6710:	53011900 	movwpl	r1, #6400	; 0x1900
    6714:	01193001 	tsteq	r9, r1
    6718:	01f30352 	mvnseq	r0, r2, asr r3
    671c:	51011953 	tstpl	r1, r3, asr r9
    6720:	19649102 	stmdbne	r4!, {r1, r8, ip, pc}^
    6724:	74025001 	strvc	r5, [r2], #-1
    6728:	a4230000 	strtge	r0, [r3], #-0
    672c:	ab08002d 	blge	2067e8 <_Min_Stack_Size+0x2063e8>
    6730:	19000011 	stmdbne	r0, {r0, r4}
    6734:	30015301 	andcc	r5, r1, r1, lsl #6
    6738:	03520119 	cmpeq	r2, #1073741830	; 0x40000006
    673c:	19060091 	stmdbne	r6, {r0, r4, r7}
    6740:	91025101 	tstls	r2, r1, lsl #2
    6744:	24000064 	strcs	r0, [r0], #-100	; 0x64
    6748:	00001f33 	andeq	r1, r0, r3, lsr pc
    674c:	0101ae01 	tsteq	r1, r1, lsl #28
    6750:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
    6754:	00204a11 	eoreq	r4, r0, r1, lsl sl
    6758:	01ae0100 			; <UNDEFINED> instruction: 0x01ae0100
    675c:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    6760:	001f2511 	andseq	r2, pc, r1, lsl r5	; <UNPREDICTABLE>
    6764:	01ae0100 			; <UNDEFINED> instruction: 0x01ae0100
    6768:	000006b6 			; <UNDEFINED> instruction: 0x000006b6
    676c:	001f0112 	andseq	r0, pc, r2, lsl r1	; <UNPREDICTABLE>
    6770:	01b00100 	lslseq	r0, r0, #2
    6774:	00000113 	andeq	r0, r0, r3, lsl r1
    6778:	001d1a12 	andseq	r1, sp, r2, lsl sl
    677c:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    6780:	000000fd 	strdeq	r0, [r0], -sp
    6784:	1da71000 	stcne	0, cr1, [r7]
    6788:	fd010000 	stc2	0, cr0, [r1, #-0]
    678c:	00011301 	andeq	r1, r1, r1, lsl #6
    6790:	07ea0100 	strbeq	r0, [sl, r0, lsl #2]!
    6794:	19110000 	ldmdbne	r1, {}	; <UNPREDICTABLE>
    6798:	0100001d 	tsteq	r0, sp, lsl r0
    679c:	03eb01fd 	mvneq	r0, #1073741887	; 0x4000003f
    67a0:	01120000 	tsteq	r2, r0
    67a4:	0100001f 	tsteq	r0, pc, lsl r0
    67a8:	011301ff 			; <UNDEFINED> instruction: 0x011301ff
    67ac:	ff120000 			; <UNDEFINED> instruction: 0xff120000
    67b0:	0100001f 	tsteq	r0, pc, lsl r0
    67b4:	01130200 	tsteq	r3, r0, lsl #4
    67b8:	24000000 	strcs	r0, [r0], #-0
    67bc:	00001d82 	andeq	r1, r0, r2, lsl #27
    67c0:	0102bb01 	tsteq	r2, r1, lsl #22
    67c4:	00000834 	andeq	r0, r0, r4, lsr r8
    67c8:	00204a12 	eoreq	r4, r0, r2, lsl sl
    67cc:	02bd0100 	adcseq	r0, sp, #0, 2
    67d0:	00000113 	andeq	r0, r0, r3, lsl r1
    67d4:	001e4e12 	andseq	r4, lr, r2, lsl lr
    67d8:	02bd0100 	adcseq	r0, sp, #0, 2
    67dc:	00000113 	andeq	r0, r0, r3, lsl r1
    67e0:	00095f12 	andeq	r5, r9, r2, lsl pc
    67e4:	02be0100 	adcseq	r0, lr, #0, 2
    67e8:	00000834 	andeq	r0, r0, r4, lsr r8
    67ec:	001e8712 	andseq	r8, lr, r2, lsl r7
    67f0:	02bf0100 	adcseq	r0, pc, #0, 2
    67f4:	00000316 	andeq	r0, r0, r6, lsl r3
    67f8:	001f1c12 	andseq	r1, pc, r2, lsl ip	; <UNPREDICTABLE>
    67fc:	02c00100 	sbceq	r0, r0, #0, 2
    6800:	000000fd 	strdeq	r0, [r0], -sp
    6804:	eb040600 	bl	10800c <_Min_Stack_Size+0x107c0c>
    6808:	24000001 	strcs	r0, [r0], #-1
    680c:	00001f4e 	andeq	r1, r0, lr, asr #30
    6810:	01016e01 	tsteq	r1, r1, lsl #28
    6814:	00000878 	andeq	r0, r0, r8, ror r8
    6818:	00204a11 	eoreq	r4, r0, r1, lsl sl
    681c:	016e0100 	cmneq	lr, r0, lsl #2
    6820:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    6824:	001f0111 	andseq	r0, pc, r1, lsl r1	; <UNPREDICTABLE>
    6828:	016e0100 	cmneq	lr, r0, lsl #2
    682c:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    6830:	001f1c12 	andseq	r1, pc, r2, lsl ip	; <UNPREDICTABLE>
    6834:	01700100 	cmneq	r0, r0, lsl #2
    6838:	000000fd 	strdeq	r0, [r0], -sp
    683c:	001e8712 	andseq	r8, lr, r2, lsl r7
    6840:	01710100 	cmneq	r1, r0, lsl #2
    6844:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    6848:	1ecc2400 	cdpne	4, 12, cr2, cr12, cr0, {0}
    684c:	3d010000 	stccc	0, cr0, [r1, #-0]
    6850:	08c20102 	stmiaeq	r2, {r1, r8}^
    6854:	65120000 	ldrvs	r0, [r2, #-0]
    6858:	0100001f 	tsteq	r0, pc, lsl r0
    685c:	035e023f 	cmpeq	lr, #-268435453	; 0xf0000003
    6860:	87120000 	ldrhi	r0, [r2, -r0]
    6864:	0100001e 	tsteq	r0, lr, lsl r0
    6868:	03160240 	tsteq	r6, #64, 4
    686c:	1a120000 	bne	486874 <_Min_Stack_Size+0x486474>
    6870:	0100001d 	tsteq	r0, sp, lsl r0
    6874:	00fd0241 	rscseq	r0, sp, r1, asr #4
    6878:	1c120000 	ldcne	0, cr0, [r2], {-0}
    687c:	0100001f 	tsteq	r0, pc, lsl r0
    6880:	00fd0241 	rscseq	r0, sp, r1, asr #4
    6884:	01120000 	tsteq	r2, r0
    6888:	0100001f 	tsteq	r0, pc, lsl r0
    688c:	01130242 	tsteq	r3, r2, asr #4
    6890:	25000000 	strcs	r0, [r0, #-0]
    6894:	00001fd0 	ldrdeq	r1, [r0], -r0
    6898:	b4019601 	strlt	r9, [r1], #-1537	; 0x601
    689c:	dc08002d 	stcle	0, cr0, [r8], {45}	; 0x2d
    68a0:	01000002 	tsteq	r0, r2
    68a4:	000fb89c 	muleq	pc, ip, r8	; <UNPREDICTABLE>
    68a8:	025e1b00 	subseq	r1, lr, #0, 22
    68ac:	96010000 	strls	r0, [r1], -r0
    68b0:	00009a01 	andeq	r9, r0, r1, lsl #20
    68b4:	004b5200 	subeq	r5, fp, r0, lsl #4
    68b8:	204a2600 	subcs	r2, sl, r0, lsl #12
    68bc:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    68c0:	00011301 	andeq	r1, r1, r1, lsl #6
    68c4:	1c590100 	ldfnee	f0, [r9], {-0}
    68c8:	00001f25 	andeq	r1, r0, r5, lsr #30
    68cc:	fd019901 	stc2	9, cr9, [r1, #-4]
    68d0:	73000000 	movwvc	r0, #0
    68d4:	1d00004b 	stcne	0, cr0, [r0, #-300]	; 0xfffffed4
    68d8:	000003c1 	andeq	r0, r0, r1, asr #7
    68dc:	08002dc2 	stmdaeq	r0, {r1, r6, r7, r8, sl, fp, sp}
    68e0:	00000b68 	andeq	r0, r0, r8, ror #22
    68e4:	3201a201 	andcc	sl, r1, #268435456	; 0x10000000
    68e8:	27000009 	strcs	r0, [r0, -r9]
    68ec:	000003d2 	ldrdeq	r0, [r0], -r2
    68f0:	68c7f206 	stmiavs	r7, {r1, r2, r9, ip, sp, lr, pc}^
    68f4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    68f8:	00000b68 	andeq	r0, r0, r8, ror #22
    68fc:	0003de29 	andeq	sp, r3, r9, lsr #28
    6900:	1d000000 	stcne	0, cr0, [r0, #-0]
    6904:	00000776 	andeq	r0, r0, r6, ror r7
    6908:	08002dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, sp}
    690c:	00000b80 	andeq	r0, r0, r0, lsl #23
    6910:	6e01a601 	cfmadd32vs	mvax0, mvfx10, mvfx1, mvfx1
    6914:	2000000c 	andcs	r0, r0, ip
    6918:	0000078f 	andeq	r0, r0, pc, lsl #15
    691c:	00004bb2 			; <UNDEFINED> instruction: 0x00004bb2
    6920:	0007832a 	andeq	r8, r7, sl, lsr #6
    6924:	0b802800 	bleq	fe01092c <_estack+0xddfe092c>
    6928:	9b220000 	blls	886930 <_Min_Stack_Size+0x886530>
    692c:	01000007 	tsteq	r0, r7
    6930:	07a72157 	sbfxeq	r2, r7, #2, #8
    6934:	4bf10000 	blmi	ffc4693c <_estack+0xdfc1693c>
    6938:	b41d0000 	ldrlt	r0, [sp], #-0
    693c:	dc000007 	stcle	0, cr0, [r0], {7}
    6940:	b008002d 	andlt	r0, r8, sp, lsr #32
    6944:	0100000b 	tsteq	r0, fp
    6948:	0aad01ba 	beq	feb47038 <_estack+0xdeb17038>
    694c:	c5200000 	strgt	r0, [r0, #-0]!
    6950:	35000007 	strcc	r0, [r0, #-7]
    6954:	2800004c 	stmdacs	r0, {r2, r3, r6}
    6958:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
    695c:	0007d121 	andeq	sp, r7, r1, lsr #2
    6960:	004c5d00 	subeq	r5, ip, r0, lsl #26
    6964:	07dd2200 	ldrbeq	r2, [sp, r0, lsl #4]
    6968:	03050000 	movweq	r0, #20480	; 0x5000
    696c:	20000220 	andcs	r0, r0, r0, lsr #4
    6970:	0007ea1d 	andeq	lr, r7, sp, lsl sl
    6974:	002ea000 	eoreq	sl, lr, r0
    6978:	000bd808 	andeq	sp, fp, r8, lsl #16
    697c:	02060100 	andeq	r0, r6, #0, 2
    6980:	00000aa2 	andeq	r0, r0, r2, lsr #21
    6984:	000bd828 	andeq	sp, fp, r8, lsr #16
    6988:	07f72100 	ldrbeq	r2, [r7, r0, lsl #2]!
    698c:	4cc80000 	stclmi	0, cr0, [r8], {0}
    6990:	03210000 	teqeq	r1, #0
    6994:	f1000008 	cps	#8
    6998:	2100004c 	tstcs	r0, ip, asr #32
    699c:	0000080f 	andeq	r0, r0, pc, lsl #16
    69a0:	00004d20 	andeq	r4, r0, r0, lsr #26
    69a4:	00081b21 	andeq	r1, r8, r1, lsr #22
    69a8:	004d3300 	subeq	r3, sp, r0, lsl #6
    69ac:	08272900 	stmdaeq	r7!, {r8, fp, sp}
    69b0:	501d0000 	andspl	r0, sp, r0
    69b4:	a0000006 	andge	r0, r0, r6
    69b8:	0008002e 	andeq	r0, r8, lr, lsr #32
    69bc:	0100000c 	tsteq	r0, ip
    69c0:	0a5f02e5 	beq	17c755c <_Min_Stack_Size+0x17c715c>
    69c4:	91200000 	teqls	r0, r0
    69c8:	5c000006 	stcpl	0, cr0, [r0], {6}
    69cc:	2000004d 	andcs	r0, r0, sp, asr #32
    69d0:	00000685 	andeq	r0, r0, r5, lsl #13
    69d4:	00004d5c 	andeq	r4, r0, ip, asr sp
    69d8:	00067920 	andeq	r7, r6, r0, lsr #18
    69dc:	004d7c00 	subeq	r7, sp, r0, lsl #24
    69e0:	066d2000 	strbteq	r2, [sp], -r0
    69e4:	4d5c0000 	ldclmi	0, cr0, [ip, #-0]
    69e8:	61200000 	teqvs	r0, r0
    69ec:	9a000006 	bls	6a0c <_Min_Stack_Size+0x660c>
    69f0:	2800004d 	stmdacs	r0, {r0, r2, r3, r6}
    69f4:	00000c00 	andeq	r0, r0, r0, lsl #24
    69f8:	00069d21 	andeq	r9, r6, r1, lsr #26
    69fc:	004db800 	subeq	fp, sp, r0, lsl #16
    6a00:	06a92200 	strteq	r2, [r9], r0, lsl #4
    6a04:	91020000 	mrsls	r0, (UNDEF: 2)
    6a08:	2f52174c 	svccs	0x0052174c
    6a0c:	119f0800 	orrsne	r0, pc, r0, lsl #16
    6a10:	60230000 	eorvs	r0, r3, r0
    6a14:	ab08002f 	blge	206ad8 <_Min_Stack_Size+0x2066d8>
    6a18:	19000011 	stmdbne	r0, {r0, r4}
    6a1c:	79025301 	stmdbvc	r2, {r0, r8, r9, ip, lr}
    6a20:	52011900 	andpl	r1, r1, #0, 18
    6a24:	19007902 	stmdbne	r0, {r1, r8, fp, ip, sp, lr}
    6a28:	91025101 	tstls	r2, r1, lsl #2
    6a2c:	0000004c 	andeq	r0, r0, ip, asr #32
    6a30:	002eb818 	eoreq	fp, lr, r8, lsl r8
    6a34:	0011fa08 	andseq	pc, r1, r8, lsl #20
    6a38:	000a7300 	andeq	r7, sl, r0, lsl #6
    6a3c:	50011900 	andpl	r1, r1, r0, lsl #18
    6a40:	00007a02 	andeq	r7, r0, r2, lsl #20
    6a44:	002ebe2b 	eoreq	fp, lr, fp, lsr #28
    6a48:	000a8308 	andeq	r8, sl, r8, lsl #6
    6a4c:	50011900 	andpl	r1, r1, r0, lsl #18
    6a50:	00007602 	andeq	r7, r0, r2, lsl #12
    6a54:	002ef818 	eoreq	pc, lr, r8, lsl r8	; <UNPREDICTABLE>
    6a58:	00121008 	andseq	r1, r2, r8
    6a5c:	000a9700 	andeq	r9, sl, r0, lsl #14
    6a60:	51011900 	tstpl	r1, r0, lsl #18
    6a64:	00007a02 	andeq	r7, r0, r2, lsl #20
    6a68:	002f6817 	eoreq	r6, pc, r7, lsl r8	; <UNPREDICTABLE>
    6a6c:	00110908 	andseq	r0, r1, r8, lsl #18
    6a70:	17000000 	strne	r0, [r0, -r0]
    6a74:	08002de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, sp}
    6a78:	00001227 	andeq	r1, r0, r7, lsr #4
    6a7c:	3a1d0000 	bcc	746a84 <_Min_Stack_Size+0x746684>
    6a80:	1c000008 	stcne	0, cr0, [r0], {8}
    6a84:	1808002f 	stmdane	r8, {r0, r1, r2, r3, r5}
    6a88:	0100000c 	tsteq	r0, ip
    6a8c:	0c2801c1 	stfeqs	f0, [r8], #-772	; 0xfffffcfc
    6a90:	53200000 	teqpl	r0, #0
    6a94:	e3000008 	movw	r0, #8
    6a98:	2a00004d 	bcs	6bd4 <_Min_Stack_Size+0x67d4>
    6a9c:	00000847 	andeq	r0, r0, r7, asr #16
    6aa0:	000c1828 	andeq	r1, ip, r8, lsr #16
    6aa4:	085f2900 	ldmdaeq	pc, {r8, fp, sp}^	; <UNPREDICTABLE>
    6aa8:	6b210000 	blvs	846ab0 <_Min_Stack_Size+0x8466b0>
    6aac:	01000008 	tsteq	r0, r8
    6ab0:	1d00004e 	stcne	0, cr0, [r0, #-312]	; 0xfffffec8
    6ab4:	00000369 	andeq	r0, r0, r9, ror #6
    6ab8:	08002f9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sl, fp, sp}
    6abc:	00000c38 	andeq	r0, r0, r8, lsr ip
    6ac0:	7b017f01 	blvc	666cc <_Min_Stack_Size+0x662cc>
    6ac4:	2a00000b 	bcs	6af8 <_Min_Stack_Size+0x66f8>
    6ac8:	0000039e 	muleq	r0, lr, r3
    6acc:	00039220 	andeq	r9, r3, r0, lsr #4
    6ad0:	004e2a00 	subeq	r2, lr, r0, lsl #20
    6ad4:	03862a00 	orreq	r2, r6, #0, 20
    6ad8:	7a200000 	bvc	806ae0 <_Min_Stack_Size+0x8066e0>
    6adc:	3d000003 	stccc	0, cr0, [r0, #-12]
    6ae0:	2800004e 	stmdacs	r0, {r1, r2, r3, r6}
    6ae4:	00000c38 	andeq	r0, r0, r8, lsr ip
    6ae8:	0003aa21 	andeq	sl, r3, r1, lsr #20
    6aec:	004e5b00 	subeq	r5, lr, r0, lsl #22
    6af0:	305c2c00 	subscc	r2, ip, r0, lsl #24
    6af4:	000c0800 	andeq	r0, ip, r0, lsl #16
    6af8:	0b690000 	bleq	1a46b00 <_Min_Stack_Size+0x1a46700>
    6afc:	862a0000 	strthi	r0, [sl], -r0
    6b00:	2a000003 	bcs	6b14 <_Min_Stack_Size+0x6714>
    6b04:	00000392 	muleq	r0, r2, r3
    6b08:	00039e2a 	andeq	r9, r3, sl, lsr #28
    6b0c:	037a2000 	cmneq	sl, #0
    6b10:	4e870000 	cdpmi	0, 8, cr0, cr7, cr0, {0}
    6b14:	5c2d0000 	stcpl	0, cr0, [sp], #-0
    6b18:	0c080030 	stceq	0, cr0, [r8], {48}	; 0x30
    6b1c:	21000000 	mrscs	r0, (UNDEF: 0)
    6b20:	000003aa 	andeq	r0, r0, sl, lsr #7
    6b24:	00004e9a 	muleq	r0, sl, lr
    6b28:	00306623 	eorseq	r6, r0, r3, lsr #12
    6b2c:	00121008 	andseq	r1, r2, r8
    6b30:	51011900 	tstpl	r1, r0, lsl #18
    6b34:	00007b02 	andeq	r7, r0, r2, lsl #22
    6b38:	b4230000 	strtlt	r0, [r3], #-0
    6b3c:	1008002f 	andne	r0, r8, pc, lsr #32
    6b40:	19000012 	stmdbne	r0, {r1, r4}
    6b44:	7b025101 	blvc	9af50 <_Min_Stack_Size+0x9ab50>
    6b48:	00000000 	andeq	r0, r0, r0
    6b4c:	0006502e 	andeq	r5, r6, lr, lsr #32
    6b50:	002fbe00 	eoreq	fp, pc, r0, lsl #28
    6b54:	00002008 	andeq	r2, r0, r8
    6b58:	01830100 	orreq	r0, r3, r0, lsl #2
    6b5c:	00000bf9 	strdeq	r0, [r0], -r9
    6b60:	00069120 	andeq	r9, r6, r0, lsr #2
    6b64:	004eae00 	subeq	sl, lr, r0, lsl #28
    6b68:	06852000 	streq	r2, [r5], r0
    6b6c:	4eae0000 	cdpmi	0, 10, cr0, cr14, cr0, {0}
    6b70:	792a0000 	stmdbvc	sl!, {}	; <UNPREDICTABLE>
    6b74:	20000006 	andcs	r0, r0, r6
    6b78:	0000066d 	andeq	r0, r0, sp, ror #12
    6b7c:	00004eae 	andeq	r4, r0, lr, lsr #29
    6b80:	00066120 	andeq	r6, r6, r0, lsr #2
    6b84:	004ec200 	subeq	ip, lr, r0, lsl #4
    6b88:	2fbe2d00 	svccs	0x00be2d00
    6b8c:	00200800 	eoreq	r0, r0, r0, lsl #16
    6b90:	9d210000 	stcls	0, cr0, [r1, #-0]
    6b94:	d5000006 	strle	r0, [r0, #-6]
    6b98:	2200004e 	andcs	r0, r0, #78	; 0x4e
    6b9c:	000006a9 	andeq	r0, r0, r9, lsr #13
    6ba0:	174c9102 	strbne	r9, [ip, -r2, lsl #2]
    6ba4:	08002fd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, fp, sp}
    6ba8:	0000119f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    6bac:	002fde23 	eoreq	sp, pc, r3, lsr #28
    6bb0:	0011ab08 	andseq	sl, r1, r8, lsl #22
    6bb4:	53011900 	movwpl	r1, #6400	; 0x1900
    6bb8:	19007602 	stmdbne	r0, {r1, r9, sl, ip, sp, lr}
    6bbc:	76025201 	strvc	r5, [r2], -r1, lsl #4
    6bc0:	51011900 	tstpl	r1, r0, lsl #18
    6bc4:	004c9102 	subeq	r9, ip, r2, lsl #2
    6bc8:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
    6bcc:	fa08002f 	blx	206c90 <_Min_Stack_Size+0x206890>
    6bd0:	0d000011 	stceq	0, cr0, [r0, #-68]	; 0xffffffbc
    6bd4:	1900000c 	stmdbne	r0, {r2, r3}
    6bd8:	7b025001 	blvc	9abe4 <_Min_Stack_Size+0x9a7e4>
    6bdc:	3e2b0000 	cdpcc	0, 2, cr0, cr11, cr0, {0}
    6be0:	1d08002f 	stcne	0, cr0, [r8, #-188]	; 0xffffff44
    6be4:	1900000c 	stmdbne	r0, {r2, r3}
    6be8:	7a025001 	bvc	9abf4 <_Min_Stack_Size+0x9a7f4>
    6bec:	e6170000 	ldr	r0, [r7], -r0
    6bf0:	0908002f 	stmdbeq	r8, {r0, r1, r2, r3, r5}
    6bf4:	00000011 	andeq	r0, r0, r1, lsl r0
    6bf8:	2ddc1700 	ldclcs	7, cr1, [ip]
    6bfc:	12330800 	eorsne	r0, r3, #0, 16
    6c00:	00180000 	andseq	r0, r8, r0
    6c04:	3b08002e 	blcc	206cc4 <_Min_Stack_Size+0x2068c4>
    6c08:	48000012 	stmdami	r0, {r1, r4}
    6c0c:	1900000c 	stmdbne	r0, {r2, r3}
    6c10:	79055101 	stmdbvc	r5, {r0, r8, ip, lr}
    6c14:	1c007700 	stcne	7, cr7, [r0], {-0}
    6c18:	2e041700 	cdpcs	7, 0, cr1, cr4, cr0, {0}
    6c1c:	12520800 	subsne	r0, r2, #0, 16
    6c20:	e0170000 	ands	r0, r7, r0
    6c24:	5208002e 	andpl	r0, r8, #46	; 0x2e
    6c28:	17000012 	smladne	r0, r2, r0, r0
    6c2c:	08002f16 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl, fp, sp}
    6c30:	0000125e 	andeq	r1, r0, lr, asr r2
    6c34:	002f1c17 	eoreq	r1, pc, r7, lsl ip	; <UNPREDICTABLE>
    6c38:	00125208 	andseq	r5, r2, r8, lsl #4
    6c3c:	2f000000 	svccs	0x00000000
    6c40:	00000878 	andeq	r0, r0, r8, ror r8
    6c44:	08002e0a 	stmdaeq	r0, {r1, r3, r9, sl, fp, sp}
    6c48:	00000c58 	andeq	r0, r0, r8, asr ip
    6c4c:	2801a901 	stmdacs	r1, {r0, r8, fp, sp, pc}
    6c50:	00000c58 	andeq	r0, r0, r8, asr ip
    6c54:	00088522 	andeq	r8, r8, r2, lsr #10
    6c58:	40910200 	addsmi	r0, r1, r0, lsl #4
    6c5c:	00089121 	andeq	r9, r8, r1, lsr #2
    6c60:	004ef400 	subeq	pc, lr, r0, lsl #8
    6c64:	089d2100 	ldmeq	sp, {r8, sp}
    6c68:	4f330000 	svcmi	0x00330000
    6c6c:	a9210000 	stmdbge	r1!, {}	; <UNPREDICTABLE>
    6c70:	47000008 	strmi	r0, [r0, -r8]
    6c74:	2200004f 	andcs	r0, r0, #79	; 0x4f
    6c78:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    6c7c:	b41d5901 	ldrlt	r5, [sp], #-2305	; 0x901
    6c80:	2c000007 	stccs	0, cr0, [r0], {7}
    6c84:	8808002e 	stmdahi	r8, {r1, r2, r3, r5}
    6c88:	0100000c 	tsteq	r0, ip
    6c8c:	0df30276 	lfmeq	f0, 2, [r3, #472]!	; 0x1d8
    6c90:	c5200000 	strgt	r0, [r0, #-0]!
    6c94:	5a000007 	bpl	6cb8 <_Min_Stack_Size+0x68b8>
    6c98:	2800004f 	stmdacs	r0, {r0, r1, r2, r3, r6}
    6c9c:	00000c88 	andeq	r0, r0, r8, lsl #25
    6ca0:	0007d121 	andeq	sp, r7, r1, lsr #2
    6ca4:	004fb200 	subeq	fp, pc, r0, lsl #4
    6ca8:	07dd2200 	ldrbeq	r2, [sp, r0, lsl #4]
    6cac:	03050000 	movweq	r0, #20480	; 0x5000
    6cb0:	20000220 	andcs	r0, r0, r0, lsr #4
    6cb4:	0007ea1d 	andeq	lr, r7, sp, lsl sl
    6cb8:	002e6600 	eoreq	r6, lr, r0, lsl #12
    6cbc:	000c9008 	andeq	r9, ip, r8
    6cc0:	02060100 	andeq	r0, r6, #0, 2
    6cc4:	00000de8 	andeq	r0, r0, r8, ror #27
    6cc8:	000c9028 	andeq	r9, ip, r8, lsr #32
    6ccc:	07f72100 	ldrbeq	r2, [r7, r0, lsl #2]!
    6cd0:	4ffc0000 	svcmi	0x00fc0000
    6cd4:	03210000 	teqeq	r1, #0
    6cd8:	25000008 	strcs	r0, [r0, #-8]
    6cdc:	21000050 	qaddcs	r0, r0, r0
    6ce0:	0000080f 	andeq	r0, r0, pc, lsl #16
    6ce4:	00005054 	andeq	r5, r0, r4, asr r0
    6ce8:	00081b21 	andeq	r1, r8, r1, lsr #22
    6cec:	00506700 	subseq	r6, r0, r0, lsl #14
    6cf0:	08272900 	stmdaeq	r7!, {r8, fp, sp}
    6cf4:	502e0000 	eorpl	r0, lr, r0
    6cf8:	6a000006 	bvs	6d18 <_Min_Stack_Size+0x6918>
    6cfc:	2008002f 	andcs	r0, r8, pc, lsr #32
    6d00:	01000000 	mrseq	r0, (UNDEF: 0)
    6d04:	0da502e5 	sfmeq	f0, 4, [r5, #916]!	; 0x394
    6d08:	91200000 	teqls	r0, r0
    6d0c:	90000006 	andls	r0, r0, r6
    6d10:	20000050 	andcs	r0, r0, r0, asr r0
    6d14:	00000685 	andeq	r0, r0, r5, lsl #13
    6d18:	00005090 	muleq	r0, r0, r0
    6d1c:	00067920 	andeq	r7, r6, r0, lsr #18
    6d20:	0050b000 	subseq	fp, r0, r0
    6d24:	066d2000 	strbteq	r2, [sp], -r0
    6d28:	50900000 	addspl	r0, r0, r0
    6d2c:	61200000 	teqvs	r0, r0
    6d30:	ce000006 	cdpgt	0, 0, cr0, cr0, cr6, {0}
    6d34:	2d000050 	stccs	0, cr0, [r0, #-320]	; 0xfffffec0
    6d38:	08002f6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, fp, sp}
    6d3c:	00000020 	andeq	r0, r0, r0, lsr #32
    6d40:	00069d21 	andeq	r9, r6, r1, lsr #26
    6d44:	0050ec00 	subseq	lr, r0, r0, lsl #24
    6d48:	06a92200 	strteq	r2, [r9], r0, lsl #4
    6d4c:	91020000 	mrsls	r0, (UNDEF: 2)
    6d50:	2f7c174c 	svccs	0x007c174c
    6d54:	119f0800 	orrsne	r0, pc, r0, lsl #16
    6d58:	8a230000 	bhi	8c6d60 <_Min_Stack_Size+0x8c6960>
    6d5c:	ab08002f 	blge	206e20 <_Min_Stack_Size+0x206a20>
    6d60:	19000011 	stmdbne	r0, {r0, r4}
    6d64:	30015301 	andcc	r5, r1, r1, lsl #6
    6d68:	01520119 	cmpeq	r2, r9, lsl r1
    6d6c:	51011930 	tstpl	r1, r0, lsr r9
    6d70:	004c9102 	subeq	r9, ip, r2, lsl #2
    6d74:	78180000 	ldmdavc	r8, {}	; <UNPREDICTABLE>
    6d78:	fa08002e 	blx	206e38 <_Min_Stack_Size+0x206a38>
    6d7c:	b9000011 	stmdblt	r0, {r0, r4}
    6d80:	1900000d 	stmdbne	r0, {r0, r2, r3}
    6d84:	7a025001 	bvc	9ad90 <_Min_Stack_Size+0x9a990>
    6d88:	7e2b0000 	cdpvc	0, 2, cr0, cr11, cr0, {0}
    6d8c:	c908002e 	stmdbgt	r8, {r1, r2, r3, r5}
    6d90:	1900000d 	stmdbne	r0, {r0, r2, r3}
    6d94:	76025001 	strvc	r5, [r2], -r1
    6d98:	10180000 	andsne	r0, r8, r0
    6d9c:	1008002f 	andne	r0, r8, pc, lsr #32
    6da0:	dd000012 	stcle	0, cr0, [r0, #-72]	; 0xffffffb8
    6da4:	1900000d 	stmdbne	r0, {r0, r2, r3}
    6da8:	7a025101 	bvc	9b1b4 <_Min_Stack_Size+0x9adb4>
    6dac:	94170000 	ldrls	r0, [r7], #-0
    6db0:	0908002f 	stmdbeq	r8, {r0, r1, r2, r3, r5}
    6db4:	00000011 	andeq	r0, r0, r1, lsl r0
    6db8:	2e301700 	cdpcs	7, 3, cr1, cr0, cr0, {0}
    6dbc:	12270800 	eorne	r0, r7, #0, 16
    6dc0:	00000000 	andeq	r0, r0, r0
    6dc4:	0003691d 	andeq	r6, r3, sp, lsl r9
    6dc8:	002fec00 	eoreq	lr, pc, r0, lsl #24
    6dcc:	000cb008 	andeq	fp, ip, r8
    6dd0:	02800100 	addeq	r0, r0, #0, 2
    6dd4:	00000e98 	muleq	r0, r8, lr
    6dd8:	00039e20 	andeq	r9, r3, r0, lsr #28
    6ddc:	00511700 	subseq	r1, r1, r0, lsl #14
    6de0:	03922000 	orrseq	r2, r2, #0
    6de4:	51350000 	teqpl	r5, r0
    6de8:	86200000 	strthi	r0, [r0], -r0
    6dec:	53000003 	movwpl	r0, #3
    6df0:	20000051 	andcs	r0, r0, r1, asr r0
    6df4:	0000037a 	andeq	r0, r0, sl, ror r3
    6df8:	0000518c 	andeq	r5, r0, ip, lsl #3
    6dfc:	000cb028 	andeq	fp, ip, r8, lsr #32
    6e00:	03aa2100 			; <UNDEFINED> instruction: 0x03aa2100
    6e04:	51aa0000 			; <UNDEFINED> instruction: 0x51aa0000
    6e08:	7a2c0000 	bvc	b06e10 <_Min_Stack_Size+0xb06a10>
    6e0c:	0c080030 	stceq	0, cr0, [r8], {48}	; 0x30
    6e10:	86000000 	strhi	r0, [r0], -r0
    6e14:	2a00000e 	bcs	6e54 <_Min_Stack_Size+0x6a54>
    6e18:	00000386 	andeq	r0, r0, r6, lsl #7
    6e1c:	00039220 	andeq	r9, r3, r0, lsr #4
    6e20:	0051d600 	subseq	sp, r1, r0, lsl #12
    6e24:	039e2a00 	orrseq	r2, lr, #0, 20
    6e28:	7a200000 	bvc	806e30 <_Min_Stack_Size+0x806a30>
    6e2c:	e9000003 	stmdb	r0, {r0, r1}
    6e30:	2d000051 	stccs	0, cr0, [r0, #-324]	; 0xfffffebc
    6e34:	0800307a 	stmdaeq	r0, {r1, r3, r4, r5, r6, ip, sp}
    6e38:	0000000c 	andeq	r0, r0, ip
    6e3c:	0003aa21 	andeq	sl, r3, r1, lsr #20
    6e40:	0051fc00 	subseq	pc, r1, r0, lsl #24
    6e44:	30842300 	addcc	r2, r4, r0, lsl #6
    6e48:	12100800 	andsne	r0, r0, #0, 16
    6e4c:	01190000 	tsteq	r9, r0
    6e50:	04770251 	ldrbteq	r0, [r7], #-593	; 0x251
    6e54:	23000000 	movwcs	r0, #0
    6e58:	08003078 	stmdaeq	r0, {r3, r4, r5, r6, ip, sp}
    6e5c:	00001210 	andeq	r1, r0, r0, lsl r2
    6e60:	02510119 	subseq	r0, r1, #1073741830	; 0x40000006
    6e64:	00000477 	andeq	r0, r0, r7, ror r4
    6e68:	03692e00 	cmneq	r9, #0, 28
    6e6c:	30320000 	eorscc	r0, r2, r0
    6e70:	002a0800 	eoreq	r0, sl, r0, lsl #16
    6e74:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    6e78:	000f2902 	andeq	r2, pc, r2, lsl #18
    6e7c:	039e2000 	orrseq	r2, lr, #0
    6e80:	52100000 	andspl	r0, r0, #0
    6e84:	92200000 	eorls	r0, r0, #0
    6e88:	10000003 	andne	r0, r0, r3
    6e8c:	20000052 	andcs	r0, r0, r2, asr r0
    6e90:	00000386 	andeq	r0, r0, r6, lsl #7
    6e94:	00005223 	andeq	r5, r0, r3, lsr #4
    6e98:	00037a20 	andeq	r7, r3, r0, lsr #20
    6e9c:	00523600 	subseq	r3, r2, r0, lsl #12
    6ea0:	30322d00 	eorscc	r2, r2, r0, lsl #26
    6ea4:	002a0800 	eoreq	r0, sl, r0, lsl #16
    6ea8:	aa210000 	bge	846eb0 <_Min_Stack_Size+0x846ab0>
    6eac:	49000003 	stmdbmi	r0, {r0, r1}
    6eb0:	30000052 	andcc	r0, r0, r2, asr r0
    6eb4:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6eb8:	00000f17 	andeq	r0, r0, r7, lsl pc
    6ebc:	00038620 	andeq	r8, r3, r0, lsr #12
    6ec0:	00522300 	subseq	r2, r2, r0, lsl #6
    6ec4:	03922000 	orrseq	r2, r2, #0
    6ec8:	52100000 	andspl	r0, r0, #0
    6ecc:	9e200000 	cdpls	0, 2, cr0, cr0, cr0, {0}
    6ed0:	10000003 	andne	r0, r0, r3
    6ed4:	2a000052 	bcs	7024 <_Min_Stack_Size+0x6c24>
    6ed8:	0000037a 	andeq	r0, r0, sl, ror r3
    6edc:	000cd028 	andeq	sp, ip, r8, lsr #32
    6ee0:	03aa2900 			; <UNDEFINED> instruction: 0x03aa2900
    6ee4:	00000000 	andeq	r0, r0, r0
    6ee8:	00304a23 	eorseq	r4, r0, r3, lsr #20
    6eec:	00121008 	andseq	r1, r2, r8
    6ef0:	51011900 	tstpl	r1, r0, lsl #18
    6ef4:	00047702 	andeq	r7, r4, r2, lsl #14
    6ef8:	16180000 	ldrne	r0, [r8], -r0
    6efc:	6508002e 	strvs	r0, [r8, #-46]	; 0x2e
    6f00:	47000012 	smladmi	r0, r2, r0, r0
    6f04:	1900000f 	stmdbne	r0, {r0, r1, r2, r3}
    6f08:	30015301 	andcc	r5, r1, r1, lsl #6
    6f0c:	01520119 	cmpeq	r2, r9, lsl r1
    6f10:	51011930 	tstpl	r1, r0, lsr r9
    6f14:	00409102 	subeq	r9, r0, r2, lsl #2
    6f18:	002e2c18 	eoreq	r2, lr, r8, lsl ip
    6f1c:	0011fa08 	andseq	pc, r1, r8, lsl #20
    6f20:	000f5b00 	andeq	r5, pc, r0, lsl #22
    6f24:	50011900 	andpl	r1, r1, r0, lsl #18
    6f28:	00047702 	andeq	r7, r4, r2, lsl #14
    6f2c:	002e6418 	eoreq	r6, lr, r8, lsl r4
    6f30:	00128a08 	andseq	r8, r2, r8, lsl #20
    6f34:	000f6f00 	andeq	r6, pc, r0, lsl #30
    6f38:	50011900 	andpl	r1, r1, r0, lsl #18
    6f3c:	00007702 	andeq	r7, r0, r2, lsl #14
    6f40:	0030042b 	eorseq	r0, r0, fp, lsr #8
    6f44:	000f7f08 	andeq	r7, pc, r8, lsl #30
    6f48:	50011900 	andpl	r1, r1, r0, lsl #18
    6f4c:	00007702 	andeq	r7, r0, r2, lsl #14
    6f50:	00301e18 	eorseq	r1, r0, r8, lsl lr
    6f54:	00065008 	andeq	r5, r6, r8
    6f58:	000fa300 	andeq	sl, pc, r0, lsl #6
    6f5c:	53011900 	movwpl	r1, #6400	; 0x1900
    6f60:	01193001 	tsteq	r9, r1
    6f64:	19300151 	ldmdbne	r0!, {r0, r4, r6, r8}
    6f68:	77025001 	strvc	r5, [r2, -r1]
    6f6c:	7d021900 	stcvc	9, cr1, [r2, #-0]
    6f70:	00300100 	eorseq	r0, r0, r0, lsl #2
    6f74:	00302817 	eorseq	r2, r0, r7, lsl r8
    6f78:	00110908 	andseq	r0, r1, r8, lsl #18
    6f7c:	308a1700 	addcc	r1, sl, r0, lsl #14
    6f80:	11090800 	tstne	r9, r0, lsl #16
    6f84:	00000000 	andeq	r0, r0, r0
    6f88:	205a1a00 	subscs	r1, sl, r0, lsl #20
    6f8c:	1c010000 	stcne	0, cr0, [r1], {-0}
    6f90:	0000fd03 	andeq	pc, r0, r3, lsl #26
    6f94:	00309000 	eorseq	r9, r0, r0
    6f98:	00001808 	andeq	r1, r0, r8, lsl #16
    6f9c:	139c0100 	orrsne	r0, ip, #0, 2
    6fa0:	1b000010 	blne	6fe8 <_Min_Stack_Size+0x6be8>
    6fa4:	00001e88 	andeq	r1, r0, r8, lsl #29
    6fa8:	53031c01 	movwpl	r1, #15361	; 0x3c01
    6fac:	5d000002 	stcpl	0, cr0, [r0, #-8]
    6fb0:	26000052 			; <UNDEFINED> instruction: 0x26000052
    6fb4:	00001f86 	andeq	r1, r0, r6, lsl #31
    6fb8:	fd031e01 	stc2	14, cr1, [r3, #-4]
    6fbc:	01000000 	mrseq	r0, (UNDEF: 0)
    6fc0:	1e871c54 	mcrne	12, 4, r1, cr7, cr4, {2}
    6fc4:	1f010000 	svcne	0x00010000
    6fc8:	00031603 	andeq	r1, r3, r3, lsl #12
    6fcc:	00528900 	subseq	r8, r2, r0, lsl #18
    6fd0:	30981700 	addscc	r1, r8, r0, lsl #14
    6fd4:	10a80800 	adcne	r0, r8, r0, lsl #16
    6fd8:	a4170000 	ldrge	r0, [r7], #-0
    6fdc:	af080030 	svcge	0x00080030
    6fe0:	00000010 	andeq	r0, r0, r0, lsl r0
    6fe4:	001f0a1a 	andseq	r0, pc, sl, lsl sl	; <UNPREDICTABLE>
    6fe8:	032f0100 	teqeq	pc, #0, 2
    6fec:	0000009a 	muleq	r0, sl, r0
    6ff0:	080030a8 	stmdaeq	r0, {r3, r5, r7, ip, sp}
    6ff4:	00000004 	andeq	r0, r0, r4
    6ff8:	104e9c01 	subne	r9, lr, r1, lsl #24
    6ffc:	881b0000 	ldmdahi	fp, {}	; <UNPREDICTABLE>
    7000:	0100001e 	tsteq	r0, lr, lsl r0
    7004:	104e032f 	subne	r0, lr, pc, lsr #6
    7008:	52b50000 	adcspl	r0, r5, #0
    700c:	871c0000 	ldrhi	r0, [ip, -r0]
    7010:	0100001e 	tsteq	r0, lr, lsl r0
    7014:	03b70331 			; <UNDEFINED> instruction: 0x03b70331
    7018:	52b50000 	adcspl	r0, r5, #0
    701c:	07000000 	streq	r0, [r0, -r0]
    7020:	00000253 	andeq	r0, r0, r3, asr r2
    7024:	001db831 	andseq	fp, sp, r1, lsr r8
    7028:	eb9f0100 	bl	fe7c7430 <_estack+0xde797430>
    702c:	05000001 	streq	r0, [r0, #-1]
    7030:	0001f803 	andeq	pc, r1, r3, lsl #16
    7034:	1d423120 	stfnee	f3, [r2, #-128]	; 0xffffff80
    7038:	a0010000 	andge	r0, r1, r0
    703c:	000001eb 	andeq	r0, r0, fp, ror #3
    7040:	020c0305 	andeq	r0, ip, #335544320	; 0x14000000
    7044:	6f312000 	svcvs	0x00312000
    7048:	0100001d 	tsteq	r0, sp, lsl r0
    704c:	000834a1 	andeq	r3, r8, r1, lsr #9
    7050:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    7054:	31200001 	teqcc	r0, r1
    7058:	00001e66 	andeq	r1, r0, r6, ror #28
    705c:	0834a201 	ldmdaeq	r4!, {r0, r9, sp, pc}
    7060:	03050000 	movweq	r0, #20480	; 0x5000
    7064:	20000228 	andcs	r0, r0, r8, lsr #4
    7068:	001cc731 	andseq	ip, ip, r1, lsr r7
    706c:	48a50100 	stmiami	r5!, {r8}
    7070:	05000002 	streq	r0, [r0, #-2]
    7074:	00022403 	andeq	r2, r2, r3, lsl #8
    7078:	0ed43220 	cdpeq	2, 13, cr3, cr4, cr0, {1}
    707c:	7b060000 	blvc	187084 <_Min_Stack_Size+0x186c84>
    7080:	000ea432 	andeq	sl, lr, r2, lsr r4
    7084:	337c0600 	cmncc	ip, #0, 12
    7088:	0000087d 	andeq	r0, r0, sp, ror r8
    708c:	c8015007 	stmdagt	r1, {r0, r1, r2, ip, lr}
    7090:	0a000010 	beq	70d8 <_Min_Stack_Size+0x6cd8>
    7094:	000010c8 	andeq	r1, r0, r8, asr #1
    7098:	08340700 	ldmdaeq	r4!, {r8, r9, sl}
    709c:	b0340000 	eorslt	r0, r4, r0
    70a0:	09000013 	stmdbeq	r0, {r0, r1, r4}
    70a4:	02480602 	subeq	r0, r8, #2097152	; 0x200000
    70a8:	10ed0000 	rscne	r0, sp, r0
    70ac:	460a0000 	strmi	r0, [sl], -r0
    70b0:	0a000006 	beq	70d0 <_Min_Stack_Size+0x6cd0>
    70b4:	00000646 	andeq	r0, r0, r6, asr #12
    70b8:	0010ed0a 	andseq	lr, r0, sl, lsl #26
    70bc:	b5070000 	strlt	r0, [r7, #-0]
    70c0:	33000000 	movwcc	r0, #0
    70c4:	00001216 	andeq	r1, r0, r6, lsl r2
    70c8:	0905ed09 	stmdbeq	r5, {r0, r3, r8, sl, fp, sp, lr, pc}
    70cc:	0a000011 	beq	7118 <_Min_Stack_Size+0x6d18>
    70d0:	00000248 	andeq	r0, r0, r8, asr #4
    70d4:	0000a30a 	andeq	sl, r0, sl, lsl #6
    70d8:	66350000 	ldrtvs	r0, [r5], -r0
    70dc:	06000008 	streq	r0, [r0], -r8
    70e0:	0000cb7d 	andeq	ip, r0, sp, ror fp
    70e4:	00163400 	andseq	r3, r6, r0, lsl #8
    70e8:	ec080000 	stc	0, cr0, [r8], {-0}
    70ec:	0000fd05 	andeq	pc, r0, r5, lsl #26
    70f0:	00114d00 	andseq	r4, r1, r0, lsl #26
    70f4:	00d60a00 	sbcseq	r0, r6, r0, lsl #20
    70f8:	3d0a0000 	stccc	0, cr0, [sl, #-0]
    70fc:	0a000002 	beq	710c <_Min_Stack_Size+0x6d0c>
    7100:	0000114d 	andeq	r1, r0, sp, asr #2
    7104:	00064b0a 	andeq	r4, r6, sl, lsl #22
    7108:	01080a00 	tsteq	r8, r0, lsl #20
    710c:	520a0000 	andpl	r0, sl, #0
    7110:	0a000011 	beq	715c <_Min_Stack_Size+0x6d5c>
    7114:	0000115d 	andeq	r1, r0, sp, asr r1
    7118:	0011620a 	andseq	r6, r1, sl, lsl #4
    711c:	c0070000 	andgt	r0, r7, r0
    7120:	07000000 	streq	r0, [r0, -r0]
    7124:	00001157 	andeq	r1, r0, r7, asr r1
    7128:	01f60406 	mvnseq	r0, r6, lsl #8
    712c:	42070000 	andmi	r0, r7, #0
    7130:	07000002 	streq	r0, [r0, -r2]
    7134:	00001167 	andeq	r1, r0, r7, ror #2
    7138:	116d0406 	cmnne	sp, r6, lsl #8
    713c:	32070000 	andcc	r0, r7, #0
    7140:	34000002 	strcc	r0, [r0], #-2
    7144:	00000bc2 	andeq	r0, r0, r2, asr #23
    7148:	9a01710b 	bls	6357c <_Min_Stack_Size+0x6317c>
    714c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    7150:	0a000011 	beq	719c <_Min_Stack_Size+0x6d9c>
    7154:	00000021 	andeq	r0, r0, r1, lsr #32
    7158:	0bdb3300 	bleq	ff6d3d60 <_estack+0xdf6a3d60>
    715c:	5b070000 	blpl	1c7164 <_Min_Stack_Size+0x1c6d64>
    7160:	00119a01 	andseq	r9, r1, r1, lsl #20
    7164:	119a0a00 	orrsne	r0, sl, r0, lsl #20
    7168:	07000000 	streq	r0, [r0, -r0]
    716c:	000001e5 	andeq	r0, r0, r5, ror #3
    7170:	000e6336 	andeq	r6, lr, r6, lsr r3
    7174:	05da0800 	ldrbeq	r0, [sl, #2048]	; 0x800
    7178:	000000fd 	strdeq	r0, [r0], -sp
    717c:	00122a34 	andseq	r2, r2, r4, lsr sl
    7180:	024c0900 	subeq	r0, ip, #0, 18
    7184:	000000fd 	strdeq	r0, [r0], -sp
    7188:	000011d0 	ldrdeq	r1, [r0], -r0
    718c:	0002480a 	andeq	r4, r2, sl, lsl #16
    7190:	11d00a00 	bicsne	r0, r0, r0, lsl #20
    7194:	130a0000 	movwne	r0, #40960	; 0xa000
    7198:	0a000001 	beq	71a4 <_Min_Stack_Size+0x6da4>
    719c:	000006b6 			; <UNDEFINED> instruction: 0x000006b6
    71a0:	00ae0700 	adceq	r0, lr, r0, lsl #14
    71a4:	0d340000 	ldceq	0, cr0, [r4, #-0]
    71a8:	09000010 	stmdbeq	r0, {r4}
    71ac:	00fd0537 	rscseq	r0, sp, r7, lsr r5
    71b0:	11fa0000 	mvnsne	r0, r0
    71b4:	480a0000 	stmdami	sl, {}	; <UNPREDICTABLE>
    71b8:	0a000002 	beq	71c8 <_Min_Stack_Size+0x6dc8>
    71bc:	000011d0 	ldrdeq	r1, [r0], -r0
    71c0:	0003eb0a 	andeq	lr, r3, sl, lsl #22
    71c4:	06b60a00 	ldrteq	r0, [r6], r0, lsl #20
    71c8:	34000000 	strcc	r0, [r0], #-0
    71cc:	00000a8e 	andeq	r0, r0, lr, lsl #21
    71d0:	08018c07 	stmdaeq	r1, {r0, r1, r2, sl, fp, pc}
    71d4:	10000001 	andne	r0, r0, r1
    71d8:	0a000012 	beq	7228 <_Min_Stack_Size+0x6e28>
    71dc:	0000119a 	muleq	r0, sl, r1
    71e0:	088d3300 	stmeq	sp, {r8, r9, ip, sp}
    71e4:	68070000 	stmdavs	r7, {}	; <UNPREDICTABLE>
    71e8:	00122701 	andseq	r2, r2, r1, lsl #14
    71ec:	10c80a00 	sbcne	r0, r8, r0, lsl #20
    71f0:	9a0a0000 	bls	2871f8 <_Min_Stack_Size+0x286df8>
    71f4:	00000011 	andeq	r0, r0, r1, lsl r0
    71f8:	0009b836 	andeq	fp, r9, r6, lsr r8
    71fc:	04140800 	ldreq	r0, [r4], #-2048	; 0x800
    7200:	00000113 	andeq	r0, r0, r3, lsl r1
    7204:	000efe37 	andeq	pc, lr, r7, lsr lr	; <UNPREDICTABLE>
    7208:	03cf0800 	biceq	r0, pc, #0, 16
    720c:	00156a33 	andseq	r6, r5, r3, lsr sl
    7210:	068b0900 	streq	r0, [fp], r0, lsl #18
    7214:	00001252 	andeq	r1, r0, r2, asr r2
    7218:	0002480a 	andeq	r4, r2, sl, lsl #16
    721c:	01130a00 	tsteq	r3, r0, lsl #20
    7220:	36000000 	strcc	r0, [r0], -r0
    7224:	00000e46 	andeq	r0, r0, r6, asr #28
    7228:	fd040508 	stc2	5, cr0, [r4, #-32]	; 0xffffffe0
    722c:	32000000 	andcc	r0, r0, #0
    7230:	00000ef3 	strdeq	r0, [r0], -r3
    7234:	1a347206 	bne	d23a54 <_Min_Stack_Size+0xd23654>
    7238:	09000011 	stmdbeq	r0, {r0, r4}
    723c:	00fd038d 	rscseq	r0, sp, sp, lsl #7
    7240:	128a0000 	addne	r0, sl, #0
    7244:	480a0000 	stmdami	sl, {}	; <UNPREDICTABLE>
    7248:	0a000002 	beq	7258 <_Min_Stack_Size+0x6e58>
    724c:	0000064b 	andeq	r0, r0, fp, asr #12
    7250:	0001130a 	andeq	r1, r1, sl, lsl #6
    7254:	06b60a00 	ldrteq	r0, [r6], r0, lsl #20
    7258:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    725c:	00000d7a 	andeq	r0, r0, sl, ror sp
    7260:	0a01720b 	beq	63a94 <_Min_Stack_Size+0x63694>
    7264:	0000009a 	muleq	r0, sl, r0
    7268:	03e50000 	mvneq	r0, #0
    726c:	00040000 	andeq	r0, r4, r0
    7270:	0000141f 	andeq	r1, r0, pc, lsl r4
    7274:	02f30104 	rscseq	r0, r3, #4, 2
    7278:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    727c:	40000020 	andmi	r0, r0, r0, lsr #32
    7280:	0000000d 	andeq	r0, r0, sp
    7284:	d2000000 	andle	r0, r0, #0
    7288:	02000028 	andeq	r0, r0, #40	; 0x28
    728c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    7290:	04030074 	streq	r0, [r3], #-116	; 0x74
    7294:	00022207 	andeq	r2, r2, r7, lsl #4
    7298:	06010300 	streq	r0, [r1], -r0, lsl #6
    729c:	00000202 	andeq	r0, r0, r2, lsl #4
    72a0:	0005df04 	andeq	sp, r5, r4, lsl #30
    72a4:	411d0200 	tstmi	sp, r0, lsl #4
    72a8:	03000000 	movweq	r0, #0
    72ac:	02000801 	andeq	r0, r0, #65536	; 0x10000
    72b0:	02030000 	andeq	r0, r3, #0
    72b4:	00003805 	andeq	r3, r0, r5, lsl #16
    72b8:	07020300 	streq	r0, [r2, -r0, lsl #6]
    72bc:	000002aa 	andeq	r0, r0, sl, lsr #5
    72c0:	5d050403 	cfstrspl	mvf0, [r5, #-12]
    72c4:	04000001 	streq	r0, [r0], #-1
    72c8:	00000089 	andeq	r0, r0, r9, lsl #1
    72cc:	00684102 	rsbeq	r4, r8, r2, lsl #2
    72d0:	04030000 	streq	r0, [r3], #-0
    72d4:	00021d07 	andeq	r1, r2, r7, lsl #26
    72d8:	05080300 	streq	r0, [r8, #-768]	; 0x300
    72dc:	00000158 	andeq	r0, r0, r8, asr r1
    72e0:	18070803 	stmdane	r7, {r0, r1, fp}
    72e4:	04000002 	streq	r0, [r0], #-2
    72e8:	000005e1 	andeq	r0, r0, r1, ror #11
    72ec:	00362a03 	eorseq	r2, r6, r3, lsl #20
    72f0:	8b040000 	blhi	1072f8 <_Min_Stack_Size+0x106ef8>
    72f4:	03000000 	movweq	r0, #0
    72f8:	00005d42 	andeq	r5, r0, r2, asr #26
    72fc:	00290400 	eoreq	r0, r9, r0, lsl #8
    7300:	49040000 	stmdbmi	r4, {}	; <UNPREDICTABLE>
    7304:	0000009e 	muleq	r0, lr, r0
    7308:	00a40405 	adceq	r0, r4, r5, lsl #8
    730c:	af060000 	svcge	0x00060000
    7310:	07000000 	streq	r0, [r0, -r0]
    7314:	000000af 	andeq	r0, r0, pc, lsr #1
    7318:	04040800 	streq	r0, [r4], #-2048	; 0x800
    731c:	00000456 	andeq	r0, r0, r6, asr r4
    7320:	00885d05 	addeq	r5, r8, r5, lsl #26
    7324:	ef040000 	svc	0x00040000
    7328:	05000003 	streq	r0, [r0, #-3]
    732c:	0000565e 	andeq	r5, r0, lr, asr r6
    7330:	03ee0400 	mvneq	r0, #0, 8
    7334:	5f050000 	svcpl	0x00050000
    7338:	00000068 	andeq	r0, r0, r8, rrx
    733c:	00016604 	andeq	r6, r1, r4, lsl #12
    7340:	88650500 	stmdahi	r5!, {r8, sl}^
    7344:	03000000 	movweq	r0, #0
    7348:	02090801 	andeq	r0, r9, #65536	; 0x10000
    734c:	04050000 	streq	r0, [r5], #-0
    7350:	000000b1 	strheq	r0, [r0], -r1
    7354:	42070403 	andmi	r0, r7, #50331648	; 0x3000000
    7358:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    735c:	000020ee 	andeq	r2, r0, lr, ror #1
    7360:	ac011701 	stcge	7, cr1, [r1], {1}
    7364:	18080030 	stmdane	r8, {r4, r5}
    7368:	01000000 	mrseq	r0, (UNDEF: 0)
    736c:	2203099c 	andcs	r0, r3, #156, 18	; 0x270000
    7370:	bc010000 	stclt	0, cr0, [r1], {-0}
    7374:	0030c802 	eorseq	ip, r0, r2, lsl #16
    7378:	00000e08 	andeq	r0, r0, r8, lsl #28
    737c:	0a9c0100 	beq	fe707784 <_estack+0xde6d7784>
    7380:	000018d8 	ldrdeq	r1, [r0], -r8
    7384:	00e4d801 	rsceq	sp, r4, r1, lsl #16
    7388:	30dc0000 	sbcscc	r0, ip, r0
    738c:	002c0800 	eoreq	r0, ip, r0, lsl #16
    7390:	9c010000 	stcls	0, cr0, [r1], {-0}
    7394:	0000015a 	andeq	r0, r0, sl, asr r1
    7398:	001c2c0b 	andseq	r2, ip, fp, lsl #24
    739c:	e4d80100 	ldrb	r0, [r8], #256	; 0x100
    73a0:	d6000000 	strle	r0, [r0], -r0
    73a4:	0b000052 	bleq	74f4 <_Min_Stack_Size+0x70f4>
    73a8:	000020e7 	andeq	r2, r0, r7, ror #1
    73ac:	0093d801 	addseq	sp, r3, r1, lsl #16
    73b0:	53290000 	teqpl	r9, #0
    73b4:	5e0c0000 	cdppl	0, 0, cr0, cr12, cr0, {0}
    73b8:	01000002 	tsteq	r0, r2
    73bc:	0000afd8 	ldrdeq	sl, [r0], -r8
    73c0:	00520100 	subseq	r0, r2, r0, lsl #2
    73c4:	00216d0d 	eoreq	r6, r1, sp, lsl #26
    73c8:	01040100 	mrseq	r0, (UNDEF: 20)
    73cc:	08003108 	stmdaeq	r0, {r3, r8, ip, sp}
    73d0:	00000020 	andeq	r0, r0, r0, lsr #32
    73d4:	f30d9c01 			; <UNDEFINED> instruction: 0xf30d9c01
    73d8:	0100000e 	tsteq	r0, lr
    73dc:	31280183 	smlawbcc	r8, r3, r1, r0
    73e0:	00180800 	andseq	r0, r8, r0, lsl #16
    73e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    73e8:	0008660e 	andeq	r6, r8, lr, lsl #12
    73ec:	01a30100 			; <UNDEFINED> instruction: 0x01a30100
    73f0:	00000088 	andeq	r0, r0, r8, lsl #1
    73f4:	08003140 	stmdaeq	r0, {r6, r8, ip, sp}
    73f8:	00000010 	andeq	r0, r0, r0, lsl r0
    73fc:	c30f9c01 	movwgt	r9, #64513	; 0xfc01
    7400:	01000020 	tsteq	r0, r0, lsr #32
    7404:	003150f6 	ldrshteq	r5, [r1], -r6
    7408:	00001c08 	andeq	r1, r0, r8, lsl #24
    740c:	bc9c0100 	ldflts	f0, [ip], {0}
    7410:	10000001 	andne	r0, r0, r1
    7414:	0800315e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, ip, sp}
    7418:	0000017e 	andeq	r0, r0, lr, ror r1
    741c:	00316410 	eorseq	r6, r1, r0, lsl r4
    7420:	00017e08 	andeq	r7, r1, r8, lsl #28
    7424:	75110000 	ldrvc	r0, [r1, #-0]
    7428:	0100001a 	tsteq	r0, sl, lsl r0
    742c:	316c017b 	smccc	49179	; 0xc01b
    7430:	00180800 	andseq	r0, r8, r0, lsl #16
    7434:	9c010000 	stcls	0, cr0, [r1], {-0}
    7438:	000001dc 	ldrdeq	r0, [r0], -ip
    743c:	00317c10 	eorseq	r7, r1, r0, lsl ip
    7440:	00017e08 	andeq	r7, r1, r8, lsl #28
    7444:	d4110000 	ldrle	r0, [r1], #-0
    7448:	0100000e 	tsteq	r0, lr
    744c:	3184018f 	orrcc	r0, r4, pc, lsl #3
    7450:	001c0800 	andseq	r0, ip, r0, lsl #16
    7454:	9c010000 	stcls	0, cr0, [r1], {-0}
    7458:	000001fc 	strdeq	r0, [r0], -ip
    745c:	00318a10 	eorseq	r8, r1, r0, lsl sl
    7460:	00017e08 	andeq	r7, r1, r8, lsl #28
    7464:	66110000 	ldrvs	r0, [r1], -r0
    7468:	01000009 	tsteq	r0, r9
    746c:	31a001b4 	lsrcc	r0, r4	; <illegal shifter operand>
    7470:	00060800 	andeq	r0, r6, r0, lsl #16
    7474:	9c010000 	stcls	0, cr0, [r1], {-0}
    7478:	00000223 	andeq	r0, r0, r3, lsr #4
    747c:	0021a512 	eoreq	sl, r1, r2, lsl r5
    7480:	01b40100 			; <UNDEFINED> instruction: 0x01b40100
    7484:	00000088 	andeq	r0, r0, r8, lsl #1
    7488:	00005354 	andeq	r5, r0, r4, asr r3
    748c:	0ea41100 	fdveqs	f1, f4, f0
    7490:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    7494:	0031a801 	eorseq	sl, r1, r1, lsl #16
    7498:	00002408 	andeq	r2, r0, r8, lsl #8
    749c:	4c9c0100 	ldfmis	f0, [ip], {0}
    74a0:	10000002 	andne	r0, r0, r2
    74a4:	080031bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, ip, sp}
    74a8:	0000017e 	andeq	r0, r0, lr, ror r1
    74ac:	0031c613 	eorseq	ip, r1, r3, lsl r6
    74b0:	0001fc08 	andeq	pc, r1, r8, lsl #24
    74b4:	e10d0000 	mrs	r0, (UNDEF: 13)
    74b8:	01000021 	tsteq	r0, r1, lsr #32
    74bc:	31cc01c2 	biccc	r0, ip, r2, asr #3
    74c0:	00580800 	subseq	r0, r8, r0, lsl #16
    74c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    74c8:	0021d111 	eoreq	sp, r1, r1, lsl r1
    74cc:	01fa0100 	mvnseq	r0, r0, lsl #2
    74d0:	08003224 	stmdaeq	r0, {r2, r5, r9, ip, sp}
    74d4:	00000024 	andeq	r0, r0, r4, lsr #32
    74d8:	02969c01 	addseq	r9, r6, #256	; 0x100
    74dc:	2a100000 	bcs	4074e4 <_Min_Stack_Size+0x4070e4>
    74e0:	7e080032 	mcrvc	0, 0, r0, cr8, cr2, {1}
    74e4:	10000001 	andne	r0, r0, r1
    74e8:	0800322e 	stmdaeq	r0, {r1, r2, r3, r5, r9, ip, sp}
    74ec:	000003dc 	ldrdeq	r0, [r0], -ip
    74f0:	00324214 	eorseq	r4, r2, r4, lsl r2
    74f4:	0001fc08 	andeq	pc, r1, r8, lsl #24
    74f8:	50011500 	andpl	r1, r1, r0, lsl #10
    74fc:	00003001 	andeq	r3, r0, r1
    7500:	0021790d 	eoreq	r7, r1, sp, lsl #18
    7504:	02aa0100 	adceq	r0, sl, #0, 2
    7508:	08003248 	stmdaeq	r0, {r3, r6, r9, ip, sp}
    750c:	00000030 	andeq	r0, r0, r0, lsr r0
    7510:	df169c01 	svcle	0x00169c01
    7514:	01000015 	tsteq	r0, r5, lsl r0
    7518:	00bc012a 	adcseq	r0, ip, sl, lsr #2
    751c:	32780000 	rsbscc	r0, r8, #0
    7520:	00ac0800 	adceq	r0, ip, r0, lsl #16
    7524:	9c010000 	stcls	0, cr0, [r1], {-0}
    7528:	00000320 	andeq	r0, r0, r0, lsr #6
    752c:	000d2017 	andeq	r2, sp, r7, lsl r0
    7530:	0002fb00 	andeq	pc, r2, r0, lsl #22
    7534:	20d41800 	sbcscs	r1, r4, r0, lsl #16
    7538:	32010000 	andcc	r0, r1, #0
    753c:	00032001 	andeq	r2, r3, r1
    7540:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7544:	00210419 	eoreq	r0, r1, r9, lsl r4
    7548:	01330100 	teqeq	r3, r0, lsl #2
    754c:	00000325 	andeq	r0, r0, r5, lsr #6
    7550:	8083c880 	addhi	ip, r3, r0, lsl #17
    7554:	21f0187e 	mvnscs	r1, lr, ror r8
    7558:	34010000 	strcc	r0, [r1], #-0
    755c:	00033001 	andeq	r3, r3, r1
    7560:	73910200 	orrsvc	r0, r1, #0, 4
    7564:	32ee1000 	rsccc	r1, lr, #0
    7568:	02960800 	addseq	r0, r6, #0, 16
    756c:	f8100000 			; <UNDEFINED> instruction: 0xf8100000
    7570:	03080032 	movweq	r0, #32818	; 0x8032
    7574:	10000001 	andne	r0, r0, r1
    7578:	08003306 	stmdaeq	r0, {r1, r2, r8, r9, ip, sp}
    757c:	000000f1 	strdeq	r0, [r0], -r1
    7580:	00330a10 	eorseq	r0, r3, r0, lsl sl
    7584:	00019408 	andeq	r9, r1, r8, lsl #8
    7588:	881a0000 	ldmdahi	sl, {}	; <UNPREDICTABLE>
    758c:	1b000000 	blne	7594 <_Min_Stack_Size+0x7194>
    7590:	0000032a 	andeq	r0, r0, sl, lsr #6
    7594:	03300405 	teqeq	r0, #83886080	; 0x5000000
    7598:	7d1a0000 	ldcvc	0, cr0, [sl, #-0]
    759c:	11000000 	mrsne	r0, (UNDEF: 0)
    75a0:	000015b5 			; <UNDEFINED> instruction: 0x000015b5
    75a4:	2402cc01 	strcs	ip, [r2], #-3073	; 0xc01
    75a8:	44080033 	strmi	r0, [r8], #-51	; 0x33
    75ac:	01000000 	mrseq	r0, (UNDEF: 0)
    75b0:	00037e9c 	muleq	r3, ip, lr
    75b4:	21481c00 	cmpcs	r8, r0, lsl #24
    75b8:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    75bc:	00008802 	andeq	r8, r0, r2, lsl #16
    75c0:	00537500 	subseq	r7, r3, r0, lsl #10
    75c4:	215b1c00 	cmpcs	fp, r0, lsl #24
    75c8:	cf010000 	svcgt	0x00010000
    75cc:	00007d02 	andeq	r7, r0, r2, lsl #26
    75d0:	00538800 	subseq	r8, r3, r0, lsl #16
    75d4:	33501000 	cmpcc	r0, #0
    75d8:	017e0800 	cmneq	lr, r0, lsl #16
    75dc:	56100000 	ldrpl	r0, [r0], -r0
    75e0:	7e080033 	mcrvc	0, 0, r0, cr8, cr3, {1}
    75e4:	00000001 	andeq	r0, r0, r1
    75e8:	0021211d 	eoreq	r2, r1, sp, lsl r1
    75ec:	c7900100 	ldrgt	r0, [r0, r0, lsl #2]
    75f0:	05000000 	streq	r0, [r0, #-0]
    75f4:	00001803 	andeq	r1, r0, r3, lsl #16
    75f8:	21331d20 	teqcs	r3, r0, lsr #26
    75fc:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    7600:	0000007d 	andeq	r0, r0, sp, ror r0
    7604:	022c0305 	eoreq	r0, ip, #335544320	; 0x14000000
    7608:	921d2000 	andsls	r2, sp, #0
    760c:	01000021 	tsteq	r0, r1, lsr #32
    7610:	000088cf 	andeq	r8, r0, pc, asr #17
    7614:	30030500 	andcc	r0, r3, r0, lsl #10
    7618:	1e200002 	cdpne	0, 2, cr0, cr0, cr2, {0}
    761c:	000021b4 			; <UNDEFINED> instruction: 0x000021b4
    7620:	03c1d001 	biceq	sp, r1, #1
    7624:	c7f00000 	ldrbgt	r0, [r0, r0]!
    7628:	1b7e8083 	blne	1fa783c <_Min_Stack_Size+0x1fa743c>
    762c:	000003c6 	andeq	r0, r0, r6, asr #7
    7630:	03cc0405 	biceq	r0, ip, #83886080	; 0x5000000
    7634:	301b0000 	andscc	r0, fp, r0
    7638:	1f000003 	svcne	0x00000003
    763c:	0000067b 	andeq	r0, r0, fp, ror r6
    7640:	00888c01 	addeq	r8, r8, r1, lsl #24
    7644:	7f200000 	svcvc	0x00200000
    7648:	06000017 			; <UNDEFINED> instruction: 0x06000017
    764c:	00bc0564 	adcseq	r0, ip, r4, ror #10
    7650:	c7000000 	strgt	r0, [r0, -r0]
    7654:	04000001 	streq	r0, [r0], #-1
    7658:	00160c00 	andseq	r0, r6, r0, lsl #24
    765c:	f3010400 	vshl.u8	d0, d0, d1
    7660:	01000002 	tsteq	r0, r2
    7664:	00002227 	andeq	r2, r0, r7, lsr #4
    7668:	00000dc8 	andeq	r0, r0, r8, asr #27
    766c:	00000000 	andeq	r0, r0, r0
    7670:	00002bae 	andeq	r2, r0, lr, lsr #23
    7674:	00089902 	andeq	r9, r8, r2, lsl #18
    7678:	2cd40200 	lfmcs	f0, 2, [r4], {0}
    767c:	03000000 	movweq	r0, #0
    7680:	02220704 	eoreq	r0, r2, #4, 14	; 0x100000
    7684:	04040000 	streq	r0, [r4], #-0
    7688:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    768c:	06010300 	streq	r0, [r1], -r0, lsl #6
    7690:	00000202 	andeq	r0, r0, r2, lsl #4
    7694:	0005df02 	andeq	sp, r5, r2, lsl #30
    7698:	4c1d0300 	ldcmi	3, cr0, [sp], {-0}
    769c:	03000000 	movweq	r0, #0
    76a0:	02000801 	andeq	r0, r0, #65536	; 0x10000
    76a4:	02030000 	andeq	r0, r3, #0
    76a8:	00003805 	andeq	r3, r0, r5, lsl #16
    76ac:	07020300 	streq	r0, [r2, -r0, lsl #6]
    76b0:	000002aa 	andeq	r0, r0, sl, lsr #5
    76b4:	5d050403 	cfstrspl	mvf0, [r5, #-12]
    76b8:	02000001 	andeq	r0, r0, #1
    76bc:	00000089 	andeq	r0, r0, r9, lsl #1
    76c0:	00734103 	rsbseq	r4, r3, r3, lsl #2
    76c4:	04030000 	streq	r0, [r3], #-0
    76c8:	00021d07 	andeq	r1, r2, r7, lsl #26
    76cc:	05080300 	streq	r0, [r8, #-768]	; 0x300
    76d0:	00000158 	andeq	r0, r0, r8, asr r1
    76d4:	18070803 	stmdane	r7, {r0, r1, fp}
    76d8:	03000002 	movweq	r0, #2
    76dc:	00420704 	subeq	r0, r2, r4, lsl #14
    76e0:	04050000 	streq	r0, [r5], #-0
    76e4:	09080103 	stmdbeq	r8, {r0, r1, r8}
    76e8:	02000002 	andeq	r0, r0, #2
    76ec:	000005e1 	andeq	r0, r0, r1, ror #11
    76f0:	00412a04 	subeq	r2, r1, r4, lsl #20
    76f4:	8b020000 	blhi	876fc <_Min_Stack_Size+0x872fc>
    76f8:	04000000 	streq	r0, [r0], #-0
    76fc:	00006842 	andeq	r6, r0, r2, asr #16
    7700:	03ef0200 	mvneq	r0, #0, 4
    7704:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
    7708:	00000061 	andeq	r0, r0, r1, rrx
    770c:	000bc206 	andeq	ip, fp, r6, lsl #4
    7710:	8f5f0100 	svchi	0x005f0100
    7714:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    7718:	5c080033 	stcpl	0, cr0, [r8], {51}	; 0x33
    771c:	01000000 	mrseq	r0, (UNDEF: 0)
    7720:	00011d9c 	muleq	r1, ip, sp
    7724:	229f0700 	addscs	r0, pc, #0, 14
    7728:	5f010000 	svcpl	0x00010000
    772c:	00000021 	andeq	r0, r0, r1, lsr #32
    7730:	000053a6 	andeq	r5, r0, r6, lsr #7
    7734:	00227908 	eoreq	r7, r2, r8, lsl #18
    7738:	8f610100 	svchi	0x00610100
    773c:	12000000 	andne	r0, r0, #0
    7740:	09000054 	stmdbeq	r0, {r2, r4, r6}
    7744:	000022ab 	andeq	r2, r0, fp, lsr #5
    7748:	011d6201 	tsteq	sp, r1, lsl #4
    774c:	03050000 	movweq	r0, #20480	; 0x5000
    7750:	20012e38 	andcs	r2, r1, r8, lsr lr
    7754:	00337a0a 	eorseq	r7, r3, sl, lsl #20
    7758:	0001ab08 	andeq	sl, r1, r8, lsl #22
    775c:	339a0a00 	orrscc	r0, sl, #0, 20
    7760:	01b30800 			; <UNDEFINED> instruction: 0x01b30800
    7764:	a40a0000 	strge	r0, [sl], #-0
    7768:	b3080033 	movwlt	r0, #32819	; 0x8033
    776c:	00000001 	andeq	r0, r0, r1
    7770:	0098040b 	addseq	r0, r8, fp, lsl #8
    7774:	7a0c0000 	bvc	30777c <_Min_Stack_Size+0x30737c>
    7778:	0100000d 	tsteq	r0, sp
    777c:	0033c491 	mlaseq	r3, r1, r4, ip
    7780:	00000c08 	andeq	r0, r0, r8, lsl #24
    7784:	509c0100 	addspl	r0, ip, r0, lsl #2
    7788:	0d000001 	stceq	0, cr0, [r0, #-4]
    778c:	01007670 	tsteq	r0, r0, ror r6
    7790:	00008f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    7794:	00545400 	subseq	r5, r4, r0, lsl #8
    7798:	33cc0a00 	biccc	r0, ip, #0, 20
    779c:	01bf0800 			; <UNDEFINED> instruction: 0x01bf0800
    77a0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    77a4:	00002289 	andeq	r2, r0, r9, lsl #5
    77a8:	33d09d01 	bicscc	r9, r0, #1, 26	; 0x40
    77ac:	000c0800 	andeq	r0, ip, r0, lsl #16
    77b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    77b4:	0022120f 	eoreq	r1, r2, pc, lsl #4
    77b8:	21a40100 			; <UNDEFINED> instruction: 0x21a40100
    77bc:	dc000000 	stcle	0, cr0, [r0], {-0}
    77c0:	14080033 	strne	r0, [r8], #-51	; 0x33
    77c4:	01000000 	mrseq	r0, (UNDEF: 0)
    77c8:	0098109c 	umullseq	r1, r8, ip, r0
    77cc:	01890000 	orreq	r0, r9, r0
    77d0:	88110000 	ldmdahi	r1, {}	; <UNPREDICTABLE>
    77d4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    77d8:	0000012b 	andeq	r0, r0, fp, lsr #2
    77dc:	00228209 	eoreq	r8, r2, r9, lsl #4
    77e0:	765a0100 	ldrbvc	r0, [sl], -r0, lsl #2
    77e4:	05000001 	streq	r0, [r0, #-1]
    77e8:	00023803 	andeq	r3, r2, r3, lsl #16
    77ec:	22ba0920 	adcscs	r0, sl, #32, 18	; 0x80000
    77f0:	5b010000 	blpl	477f8 <_Min_Stack_Size+0x473f8>
    77f4:	00000021 	andeq	r0, r0, r1, lsr #32
    77f8:	02340305 	eorseq	r0, r4, #335544320	; 0x14000000
    77fc:	fe122000 	cdp2	0, 1, cr2, cr2, cr0, {0}
    7800:	0600000e 	streq	r0, [r0], -lr
    7804:	461303cf 	ldrmi	r0, [r3], -pc, asr #7
    7808:	0600000e 	streq	r0, [r0], -lr
    780c:	00ae0405 	adceq	r0, lr, r5, lsl #8
    7810:	66140000 	ldrvs	r0, [r4], -r0
    7814:	05000008 	streq	r0, [r0, #-8]
    7818:	0000a37d 	andeq	sl, r0, sp, ror r3
    781c:	053f0000 	ldreq	r0, [pc, #-0]!	; 7824 <_Min_Stack_Size+0x7424>
    7820:	00040000 	andeq	r0, r4, r0
    7824:	00001749 	andeq	r1, r0, r9, asr #14
    7828:	02f30104 	rscseq	r0, r3, #4, 2
    782c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    7830:	f0000024 			; <UNDEFINED> instruction: 0xf0000024
    7834:	0000000d 	andeq	r0, r0, sp
    7838:	b7000000 	strlt	r0, [r0, -r0]
    783c:	0200002d 	andeq	r0, r0, #45	; 0x2d
    7840:	02020601 	andeq	r0, r2, #1048576	; 0x100000
    7844:	df030000 	svcle	0x00030000
    7848:	02000005 	andeq	r0, r0, #5
    784c:	0000331d 	andeq	r3, r0, sp, lsl r3
    7850:	08010200 	stmdaeq	r1, {r9}
    7854:	00000200 	andeq	r0, r0, r0, lsl #4
    7858:	38050202 	stmdacc	r5, {r1, r9}
    785c:	02000000 	andeq	r0, r0, #0
    7860:	02aa0702 	adceq	r0, sl, #524288	; 0x80000
    7864:	4c030000 	stcmi	0, cr0, [r3], {-0}
    7868:	02000004 	andeq	r0, r0, #4
    786c:	0000533f 	andeq	r5, r0, pc, lsr r3
    7870:	05040200 	streq	r0, [r4, #-512]	; 0x200
    7874:	0000015d 	andeq	r0, r0, sp, asr r1
    7878:	00008903 	andeq	r8, r0, r3, lsl #18
    787c:	65410200 	strbvs	r0, [r1, #-512]	; 0x200
    7880:	02000000 	andeq	r0, r0, #0
    7884:	021d0704 	andseq	r0, sp, #4, 14	; 0x100000
    7888:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    788c:	00015805 	andeq	r5, r1, r5, lsl #16
    7890:	07080200 	streq	r0, [r8, -r0, lsl #4]
    7894:	00000218 	andeq	r0, r0, r8, lsl r2
    7898:	69050404 	stmdbvs	r5, {r2, sl}
    789c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    78a0:	02220704 	eoreq	r0, r2, #4, 14	; 0x100000
    78a4:	e1030000 	mrs	r0, (UNDEF: 3)
    78a8:	03000005 	movweq	r0, #5
    78ac:	0000282a 	andeq	r2, r0, sl, lsr #16
    78b0:	044e0300 	strbeq	r0, [lr], #-768	; 0x300
    78b4:	41030000 	mrsmi	r0, (UNDEF: 3)
    78b8:	00000048 	andeq	r0, r0, r8, asr #32
    78bc:	00008b03 	andeq	r8, r0, r3, lsl #22
    78c0:	5a420300 	bpl	10884c8 <_Min_Stack_Size+0x10880c8>
    78c4:	05000000 	streq	r0, [r0, #-0]
    78c8:	50040e04 	andpl	r0, r4, r4, lsl #28
    78cc:	00016501 	andeq	r6, r1, r1, lsl #10
    78d0:	23410600 	movtcs	r0, #5632	; 0x1600
    78d4:	52040000 	andpl	r0, r4, #0
    78d8:	00017c01 	andeq	r7, r1, r1, lsl #24
    78dc:	9f060000 	svcls	0x00060000
    78e0:	04000006 	streq	r0, [r0], #-6
    78e4:	01810153 	orreq	r0, r1, r3, asr r1
    78e8:	06200000 	strteq	r0, [r0], -r0
    78ec:	00002388 	andeq	r2, r0, r8, lsl #7
    78f0:	91015404 	tstls	r1, r4, lsl #8
    78f4:	80000001 	andhi	r0, r0, r1
    78f8:	00235406 	eoreq	r5, r3, r6, lsl #8
    78fc:	01550400 	cmpeq	r5, r0, lsl #8
    7900:	00000181 	andeq	r0, r0, r1, lsl #3
    7904:	23d907a0 	bicscs	r0, r9, #160, 14	; 0x2800000
    7908:	56040000 	strpl	r0, [r4], -r0
    790c:	00019601 	andeq	r9, r1, r1, lsl #12
    7910:	07010000 	streq	r0, [r1, -r0]
    7914:	000006b3 			; <UNDEFINED> instruction: 0x000006b3
    7918:	81015704 	tsthi	r1, r4, lsl #14
    791c:	20000001 	andcs	r0, r0, r1
    7920:	237d0701 	cmncs	sp, #262144	; 0x40000
    7924:	58040000 	stmdapl	r4, {}	; <UNPREDICTABLE>
    7928:	00019b01 	andeq	r9, r1, r1, lsl #22
    792c:	07018000 	streq	r8, [r1, -r0]
    7930:	00000595 	muleq	r0, r5, r5
    7934:	81015904 	tsthi	r1, r4, lsl #18
    7938:	a0000001 	andge	r0, r0, r1
    793c:	22d20701 	sbcscs	r0, r2, #262144	; 0x40000
    7940:	5a040000 	bpl	107948 <_Min_Stack_Size+0x107548>
    7944:	0001a001 	andeq	sl, r1, r1
    7948:	07020000 	streq	r0, [r2, -r0]
    794c:	000006c9 	andeq	r0, r0, r9, asr #13
    7950:	a5015b04 	strge	r5, [r1, #-2820]	; 0xb04
    7954:	20000001 	andcs	r0, r0, r1
    7958:	50490802 	subpl	r0, r9, r2, lsl #16
    795c:	015c0400 	cmpeq	ip, r0, lsl #8
    7960:	000001c5 	andeq	r0, r0, r5, asr #3
    7964:	d3070300 	movwle	r0, #29440	; 0x7300
    7968:	04000006 	streq	r0, [r0], #-6
    796c:	01ca015d 	biceq	r0, sl, sp, asr r1
    7970:	03f00000 	mvnseq	r0, #0
    7974:	00234f07 	eoreq	r4, r3, r7, lsl #30
    7978:	015e0400 	cmpeq	lr, r0, lsl #8
    797c:	000001db 	ldrdeq	r0, [r0], -fp
    7980:	09000e00 	stmdbeq	r0, {r9, sl, fp}
    7984:	0000009e 	muleq	r0, lr, r0
    7988:	00000175 	andeq	r0, r0, r5, ror r1
    798c:	0001750a 	andeq	r7, r1, sl, lsl #10
    7990:	02000700 	andeq	r0, r0, #0, 14
    7994:	00420704 	subeq	r0, r2, r4, lsl #14
    7998:	650b0000 	strvs	r0, [fp, #-0]
    799c:	09000001 	stmdbeq	r0, {r0}
    79a0:	0000009e 	muleq	r0, lr, r0
    79a4:	00000191 	muleq	r0, r1, r1
    79a8:	0001750a 	andeq	r7, r1, sl, lsl #10
    79ac:	0b001700 	bleq	d5b4 <_Min_Stack_Size+0xd1b4>
    79b0:	00000165 	andeq	r0, r0, r5, ror #2
    79b4:	0001650b 	andeq	r6, r1, fp, lsl #10
    79b8:	01650b00 	cmneq	r5, r0, lsl #22
    79bc:	650b0000 	strvs	r0, [fp, #-0]
    79c0:	09000001 	stmdbeq	r0, {r0}
    79c4:	0000009e 	muleq	r0, lr, r0
    79c8:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
    79cc:	0001750a 	andeq	r7, r1, sl, lsl #10
    79d0:	09003700 	stmdbeq	r0, {r8, r9, sl, ip, sp}
    79d4:	00000088 	andeq	r0, r0, r8, lsl #1
    79d8:	000001c5 	andeq	r0, r0, r5, asr #3
    79dc:	0001750a 	andeq	r7, r1, sl, lsl #10
    79e0:	0b00ef00 	bleq	435e8 <_Min_Stack_Size+0x431e8>
    79e4:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
    79e8:	00009e09 	andeq	r9, r0, r9, lsl #28
    79ec:	0001db00 	andeq	sp, r1, r0, lsl #22
    79f0:	01750c00 	cmneq	r5, r0, lsl #24
    79f4:	02830000 	addeq	r0, r3, #0
    79f8:	009e0b00 	addseq	r0, lr, r0, lsl #22
    79fc:	c80d0000 	stmdagt	sp, {}	; <UNPREDICTABLE>
    7a00:	04000022 	streq	r0, [r0], #-34	; 0x22
    7a04:	00a9015f 	adceq	r0, r9, pc, asr r1
    7a08:	8c0e0000 	stchi	0, cr0, [lr], {-0}
    7a0c:	07017004 	streq	r7, [r1, -r4]
    7a10:	06000003 	streq	r0, [r0], -r3
    7a14:	0000057c 	andeq	r0, r0, ip, ror r5
    7a18:	07017204 	streq	r7, [r1, -r4, lsl #4]
    7a1c:	00000003 	andeq	r0, r0, r3
    7a20:	0005b806 	andeq	fp, r5, r6, lsl #16
    7a24:	01730400 	cmneq	r3, r0, lsl #8
    7a28:	000001db 	ldrdeq	r0, [r0], -fp
    7a2c:	066c0604 	strbteq	r0, [ip], -r4, lsl #12
    7a30:	74040000 	strvc	r0, [r4], #-0
    7a34:	0001db01 	andeq	sp, r1, r1, lsl #22
    7a38:	11060800 	tstne	r6, r0, lsl #16
    7a3c:	04000006 	streq	r0, [r0], #-6
    7a40:	01db0175 	bicseq	r0, fp, r5, ror r1
    7a44:	0f0c0000 	svceq	0x000c0000
    7a48:	00524353 	subseq	r4, r2, r3, asr r3
    7a4c:	db017604 	blle	65264 <_Min_Stack_Size+0x64e64>
    7a50:	10000001 	andne	r0, r0, r1
    7a54:	5243430f 	subpl	r4, r3, #1006632960	; 0x3c000000
    7a58:	01770400 	cmneq	r7, r0, lsl #8
    7a5c:	000001db 	ldrdeq	r0, [r0], -fp
    7a60:	48530f14 	ldmdami	r3, {r2, r4, r8, r9, sl, fp}^
    7a64:	78040050 	stmdavc	r4, {r4, r6}
    7a68:	00031c01 	andeq	r1, r3, r1, lsl #24
    7a6c:	2e061800 	cdpcs	8, 0, cr1, cr6, cr0, {0}
    7a70:	04000006 	streq	r0, [r0], #-6
    7a74:	01db0179 	bicseq	r0, fp, r9, ror r1
    7a78:	06240000 	strteq	r0, [r4], -r0
    7a7c:	000005e9 	andeq	r0, r0, r9, ror #11
    7a80:	db017a04 	blle	66298 <_Min_Stack_Size+0x65e98>
    7a84:	28000001 	stmdacs	r0, {r0}
    7a88:	00068b06 	andeq	r8, r6, r6, lsl #22
    7a8c:	017b0400 	cmneq	fp, r0, lsl #8
    7a90:	000001db 	ldrdeq	r0, [r0], -fp
    7a94:	0676062c 	ldrbteq	r0, [r6], -ip, lsr #12
    7a98:	7c040000 	stcvc	0, cr0, [r4], {-0}
    7a9c:	0001db01 	andeq	sp, r1, r1, lsl #22
    7aa0:	4a063000 	bmi	193aa8 <_Min_Stack_Size+0x1936a8>
    7aa4:	04000006 	streq	r0, [r0], #-6
    7aa8:	01db017d 	bicseq	r0, fp, sp, ror r1
    7aac:	06340000 	ldrteq	r0, [r4], -r0
    7ab0:	000005c5 	andeq	r0, r0, r5, asr #11
    7ab4:	db017e04 	blle	672cc <_Min_Stack_Size+0x66ecc>
    7ab8:	38000001 	stmdacc	r0, {r0}
    7abc:	0006ef06 	andeq	lr, r6, r6, lsl #30
    7ac0:	017f0400 	cmneq	pc, r0, lsl #8
    7ac4:	000001db 	ldrdeq	r0, [r0], -fp
    7ac8:	46500f3c 	uasxmi	r0, r0, ip
    7acc:	80040052 	andhi	r0, r4, r2, asr r0
    7ad0:	00033101 	andeq	r3, r3, r1, lsl #2
    7ad4:	440f4000 	strmi	r4, [pc], #-0	; 7adc <_Min_Stack_Size+0x76dc>
    7ad8:	04005246 	streq	r5, [r0], #-582	; 0x246
    7adc:	03070181 	movweq	r0, #29057	; 0x7181
    7ae0:	0f480000 	svceq	0x00480000
    7ae4:	00524441 	subseq	r4, r2, r1, asr #8
    7ae8:	07018204 	streq	r8, [r1, -r4, lsl #4]
    7aec:	4c000003 	stcmi	0, cr0, [r0], {3}
    7af0:	00069a06 	andeq	r9, r6, r6, lsl #20
    7af4:	01830400 	orreq	r0, r3, r0, lsl #8
    7af8:	0000034b 	andeq	r0, r0, fp, asr #6
    7afc:	06710650 			; <UNDEFINED> instruction: 0x06710650
    7b00:	84040000 	strhi	r0, [r4], #-0
    7b04:	00036501 	andeq	r6, r3, r1, lsl #10
    7b08:	9f066000 	svcls	0x00066000
    7b0c:	04000006 	streq	r0, [r0], #-6
    7b10:	03550185 	cmpeq	r5, #1073741857	; 0x40000021
    7b14:	06740000 	ldrbteq	r0, [r4], -r0
    7b18:	00000716 	andeq	r0, r0, r6, lsl r7
    7b1c:	db018604 	blle	69334 <_Min_Stack_Size+0x68f34>
    7b20:	88000001 	stmdahi	r0, {r0}
    7b24:	01db1000 	bicseq	r1, fp, r0
    7b28:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    7b2c:	1c000000 	stcne	0, cr0, [r0], {-0}
    7b30:	0a000003 	beq	7b44 <_Min_Stack_Size+0x7744>
    7b34:	00000175 	andeq	r0, r0, r5, ror r1
    7b38:	0c0b000b 	stceq	0, cr0, [fp], {11}
    7b3c:	09000003 	stmdbeq	r0, {r0, r1}
    7b40:	0000009e 	muleq	r0, lr, r0
    7b44:	00000331 	andeq	r0, r0, r1, lsr r3
    7b48:	0001750a 	andeq	r7, r1, sl, lsl #10
    7b4c:	10000100 	andne	r0, r0, r0, lsl #2
    7b50:	00000336 	andeq	r0, r0, r6, lsr r3
    7b54:	0003210b 	andeq	r2, r3, fp, lsl #2
    7b58:	009e0900 	addseq	r0, lr, r0, lsl #18
    7b5c:	034b0000 	movteq	r0, #45056	; 0xb000
    7b60:	750a0000 	strvc	r0, [sl, #-0]
    7b64:	03000001 	movweq	r0, #1
    7b68:	03501000 	cmpeq	r0, #0
    7b6c:	3b0b0000 	blcc	2c7b74 <_Min_Stack_Size+0x2c7774>
    7b70:	09000003 	stmdbeq	r0, {r0, r1}
    7b74:	0000009e 	muleq	r0, lr, r0
    7b78:	00000365 	andeq	r0, r0, r5, ror #6
    7b7c:	0001750a 	andeq	r7, r1, sl, lsl #10
    7b80:	10000400 	andne	r0, r0, r0, lsl #8
    7b84:	0000036a 	andeq	r0, r0, sl, ror #6
    7b88:	0003550b 	andeq	r5, r3, fp, lsl #10
    7b8c:	059f0d00 	ldreq	r0, [pc, #3328]	; 8894 <_Min_Stack_Size+0x8494>
    7b90:	87040000 	strhi	r0, [r4, -r0]
    7b94:	0001ec01 	andeq	lr, r1, r1, lsl #24
    7b98:	04100e00 	ldreq	r0, [r0], #-3584	; 0xe00
    7b9c:	03b9026f 			; <UNDEFINED> instruction: 0x03b9026f
    7ba0:	64060000 	strvs	r0, [r6], #-0
    7ba4:	04000023 	streq	r0, [r0], #-35	; 0x23
    7ba8:	01db0271 	bicseq	r0, fp, r1, ror r2
    7bac:	06000000 	streq	r0, [r0], -r0
    7bb0:	000024bb 			; <UNDEFINED> instruction: 0x000024bb
    7bb4:	db027204 	blle	a43cc <_Min_Stack_Size+0xa3fcc>
    7bb8:	04000001 	streq	r0, [r0], #-1
    7bbc:	4c41560f 	mcrrmi	6, 0, r5, r1, cr15
    7bc0:	02730400 	rsbseq	r0, r3, #0, 8
    7bc4:	000001db 	ldrdeq	r0, [r0], -fp
    7bc8:	23820608 	orrcs	r0, r2, #8, 12	; 0x800000
    7bcc:	74040000 	strvc	r0, [r4], #-0
    7bd0:	00030702 	andeq	r0, r3, r2, lsl #14
    7bd4:	0d000c00 	stceq	12, cr0, [r0, #-0]
    7bd8:	000023c0 	andeq	r2, r0, r0, asr #7
    7bdc:	7b027504 	blvc	a4ff4 <_Min_Stack_Size+0xa4bf4>
    7be0:	0b000003 	bleq	7bf4 <_Min_Stack_Size+0x77f4>
    7be4:	00000093 	muleq	r0, r3, r0
    7be8:	f9050111 			; <UNDEFINED> instruction: 0xf9050111
    7bec:	0003e001 	andeq	lr, r3, r1
    7bf0:	02a21200 	adceq	r1, r2, #0, 4
    7bf4:	12000000 	andne	r0, r0, #0
    7bf8:	000000b7 	strheq	r0, [r0], -r7
    7bfc:	910d0001 	tstls	sp, r1
    7c00:	05000004 	streq	r0, [r0, #-4]
    7c04:	03ca01f9 	biceq	r0, sl, #1073741886	; 0x4000003e
    7c08:	04130000 	ldreq	r0, [r3], #-0
    7c0c:	04253606 	strteq	r3, [r5], #-1542	; 0x606
    7c10:	de140000 	cdple	0, 1, cr0, cr4, cr0, {0}
    7c14:	06000023 	streq	r0, [r0], -r3, lsr #32
    7c18:	00008838 	andeq	r8, r0, r8, lsr r8
    7c1c:	8c140000 	ldchi	0, cr0, [r4], {-0}
    7c20:	06000024 	streq	r0, [r0], -r4, lsr #32
    7c24:	0000883d 	andeq	r8, r0, sp, lsr r8
    7c28:	ee140100 	mufs	f0, f4, f0
    7c2c:	06000023 	streq	r0, [r0], -r3, lsr #32
    7c30:	00008842 	andeq	r8, r0, r2, asr #16
    7c34:	e8140200 	ldmda	r4, {r9}
    7c38:	06000022 	streq	r0, [r0], -r2, lsr #32
    7c3c:	0003e047 	andeq	lr, r3, r7, asr #32
    7c40:	03000300 	movweq	r0, #768	; 0x300
    7c44:	000022d7 	ldrdeq	r2, [r0], -r7
    7c48:	03ec4a06 	mvneq	r4, #24576	; 0x6000
    7c4c:	cd150000 	ldcgt	0, cr0, [r5, #-0]
    7c50:	01000024 	tsteq	r0, r4, lsr #32
    7c54:	0033f076 	eorseq	pc, r3, r6, ror r0	; <UNPREDICTABLE>
    7c58:	00001408 	andeq	r1, r0, r8, lsl #8
    7c5c:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
    7c60:	16000004 	strne	r0, [r0], -r4
    7c64:	0000231d 	andeq	r2, r0, sp, lsl r3
    7c68:	009e7601 	addseq	r7, lr, r1, lsl #12
    7c6c:	54800000 	strpl	r0, [r0], #0
    7c70:	15000000 	strne	r0, [r0, #-0]
    7c74:	00002330 	andeq	r2, r0, r0, lsr r3
    7c78:	34048801 	strcc	r8, [r4], #-2049	; 0x801
    7c7c:	00780800 	rsbseq	r0, r8, r0, lsl #16
    7c80:	9c010000 	stcls	0, cr0, [r1], {-0}
    7c84:	000004a7 	andeq	r0, r0, r7, lsr #9
    7c88:	00230d16 	eoreq	r0, r3, r6, lsl sp
    7c8c:	a7880100 	strge	r0, [r8, r0, lsl #2]
    7c90:	a1000004 	tstge	r0, r4
    7c94:	17000054 	smlsdne	r0, r4, r0, r0
    7c98:	000023cd 	andeq	r2, r0, sp, asr #7
    7c9c:	00888a01 	addeq	r8, r8, r1, lsl #20
    7ca0:	54db0000 	ldrbpl	r0, [fp], #0
    7ca4:	3a170000 	bcc	5c7cac <_Min_Stack_Size+0x5c78ac>
    7ca8:	01000023 	tsteq	r0, r3, lsr #32
    7cac:	0000888a 	andeq	r8, r0, sl, lsl #17
    7cb0:	00551b00 	subseq	r1, r5, r0, lsl #22
    7cb4:	238d1700 	orrcs	r1, sp, #0, 14
    7cb8:	8a010000 	bhi	47cc0 <_Min_Stack_Size+0x478c0>
    7cbc:	00000088 	andeq	r0, r0, r8, lsl #1
    7cc0:	0000553e 	andeq	r5, r0, lr, lsr r5
    7cc4:	25041800 	strcs	r1, [r4, #-2048]	; 0x800
    7cc8:	15000004 	strne	r0, [r0, #-4]
    7ccc:	00002369 	andeq	r2, r0, r9, ror #6
    7cd0:	347cb401 	ldrbtcc	fp, [ip], #-1025	; 0x401
    7cd4:	00140800 	andseq	r0, r4, r0, lsl #16
    7cd8:	9c010000 	stcls	0, cr0, [r1], {-0}
    7cdc:	000004e1 	andeq	r0, r0, r1, ror #9
    7ce0:	0024ae16 	eoreq	sl, r4, r6, lsl lr
    7ce4:	9eb40100 	frdlss	f0, f4, f0
    7ce8:	61000000 	mrsvs	r0, (UNDEF: 0)
    7cec:	16000055 			; <UNDEFINED> instruction: 0x16000055
    7cf0:	0000235d 	andeq	r2, r0, sp, asr r3
    7cf4:	009eb401 	addseq	fp, lr, r1, lsl #8
    7cf8:	55820000 	strpl	r0, [r2]
    7cfc:	15000000 	strne	r0, [r0, #-0]
    7d00:	00002394 	muleq	r0, r4, r3
    7d04:	3490c701 	ldrcc	ip, [r0], #1793	; 0x701
    7d08:	00180800 	andseq	r0, r8, r0, lsl #16
    7d0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    7d10:	00000513 	andeq	r0, r0, r3, lsl r5
    7d14:	0024c016 	eoreq	ip, r4, r6, lsl r0
    7d18:	88c70100 	stmiahi	r7, {r8}^
    7d1c:	a3000000 	movwge	r0, #0
    7d20:	19000055 	stmdbne	r0, {r0, r2, r4, r6}
    7d24:	00002346 	andeq	r2, r0, r6, asr #6
    7d28:	03e0c701 	mvneq	ip, #262144	; 0x40000
    7d2c:	51010000 	mrspl	r0, (UNDEF: 1)
    7d30:	23a81500 			; <UNDEFINED> instruction: 0x23a81500
    7d34:	df010000 	svcle	0x00010000
    7d38:	080034a8 	stmdaeq	r0, {r3, r5, r7, sl, ip, sp}
    7d3c:	00000018 	andeq	r0, r0, r8, lsl r0
    7d40:	05369c01 	ldreq	r9, [r6, #-3073]!	; 0xc01
    7d44:	fb190000 	blx	647d4e <_Min_Stack_Size+0x64794e>
    7d48:	01000022 	tsteq	r0, r2, lsr #32
    7d4c:	00009edf 	ldrdeq	r9, [r0], -pc	; <UNPREDICTABLE>
    7d50:	00500100 	subseq	r0, r0, r0, lsl #2
    7d54:	00041b1a 	andeq	r1, r4, sl, lsl fp
    7d58:	06a70400 	strteq	r0, [r7], r0, lsl #8
    7d5c:	000003c5 	andeq	r0, r0, r5, asr #7
    7d60:	00083d00 	andeq	r3, r8, r0, lsl #26
    7d64:	9d000400 	cfstrsls	mvf0, [r0, #-0]
    7d68:	04000018 	streq	r0, [r0], #-24
    7d6c:	0002f301 	andeq	pc, r2, r1, lsl #6
    7d70:	25520100 	ldrbcs	r0, [r2, #-256]	; 0x100
    7d74:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
    7d78:	00000000 	andeq	r0, r0, r0
    7d7c:	30b70000 	adcscc	r0, r7, r0
    7d80:	01020000 	mrseq	r0, (UNDEF: 2)
    7d84:	00020206 	andeq	r0, r2, r6, lsl #4
    7d88:	05df0300 	ldrbeq	r0, [pc, #768]	; 8090 <_Min_Stack_Size+0x7c90>
    7d8c:	1d020000 	stcne	0, cr0, [r2, #-0]
    7d90:	00000033 	andeq	r0, r0, r3, lsr r0
    7d94:	00080102 	andeq	r0, r8, r2, lsl #2
    7d98:	02000002 	andeq	r0, r0, #2
    7d9c:	00380502 	eorseq	r0, r8, r2, lsl #10
    7da0:	94030000 	strls	r0, [r3], #-0
    7da4:	02000000 	andeq	r0, r0, #0
    7da8:	00004c2b 	andeq	r4, r0, fp, lsr #24
    7dac:	07020200 	streq	r0, [r2, -r0, lsl #4]
    7db0:	000002aa 	andeq	r0, r0, sl, lsr #5
    7db4:	00044c03 	andeq	r4, r4, r3, lsl #24
    7db8:	5e3f0200 	cdppl	2, 3, cr0, cr15, cr0, {0}
    7dbc:	02000000 	andeq	r0, r0, #0
    7dc0:	015d0504 	cmpeq	sp, r4, lsl #10
    7dc4:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
    7dc8:	02000000 	andeq	r0, r0, #0
    7dcc:	00007041 	andeq	r7, r0, r1, asr #32
    7dd0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7dd4:	0000021d 	andeq	r0, r0, sp, lsl r2
    7dd8:	58050802 	stmdapl	r5, {r1, fp}
    7ddc:	02000001 	andeq	r0, r0, #1
    7de0:	02180708 	andseq	r0, r8, #8, 14	; 0x200000
    7de4:	04040000 	streq	r0, [r4], #-0
    7de8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    7dec:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7df0:	00000222 	andeq	r0, r0, r2, lsr #4
    7df4:	0005e103 	andeq	lr, r5, r3, lsl #2
    7df8:	282a0300 	stmdacs	sl!, {r8, r9}
    7dfc:	03000000 	movweq	r0, #0
    7e00:	00000096 	muleq	r0, r6, r0
    7e04:	00413603 	subeq	r3, r1, r3, lsl #12
    7e08:	4e030000 	cdpmi	0, 0, cr0, cr3, cr0, {0}
    7e0c:	03000004 	movweq	r0, #4
    7e10:	00005341 	andeq	r5, r0, r1, asr #6
    7e14:	008b0300 	addeq	r0, fp, r0, lsl #6
    7e18:	42030000 	andmi	r0, r3, #0
    7e1c:	00000065 	andeq	r0, r0, r5, rrx
    7e20:	42070402 	andmi	r0, r7, #33554432	; 0x2000000
    7e24:	05000000 	streq	r0, [r0, #-0]
    7e28:	000000b4 	strheq	r0, [r0], -r4
    7e2c:	0000b406 	andeq	fp, r0, r6, lsl #8
    7e30:	0000db00 	andeq	sp, r0, r0, lsl #22
    7e34:	00bf0700 	adcseq	r0, pc, r0, lsl #14
    7e38:	00010000 	andeq	r0, r1, r0
    7e3c:	00009e05 	andeq	r9, r0, r5, lsl #28
    7e40:	00a90500 	adceq	r0, r9, r0, lsl #10
    7e44:	01080000 	mrseq	r0, (UNDEF: 8)
    7e48:	fb01f904 	blx	86262 <_Min_Stack_Size+0x85e62>
    7e4c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7e50:	000002a2 	andeq	r0, r0, r2, lsr #5
    7e54:	00b70900 	adcseq	r0, r7, r0, lsl #18
    7e58:	00010000 	andeq	r0, r1, r0
    7e5c:	0004910a 	andeq	r9, r4, sl, lsl #2
    7e60:	01f90400 	mvnseq	r0, r0, lsl #8
    7e64:	000000e5 	andeq	r0, r0, r5, ror #1
    7e68:	d404280b 	strle	r2, [r4], #-2059	; 0x80b
    7e6c:	00019303 	andeq	r9, r1, r3, lsl #6
    7e70:	01be0c00 			; <UNDEFINED> instruction: 0x01be0c00
    7e74:	d6040000 	strle	r0, [r4], -r0
    7e78:	0000c603 	andeq	ip, r0, r3, lsl #12
    7e7c:	e00c0000 	and	r0, ip, r0
    7e80:	04000000 	streq	r0, [r0], #-0
    7e84:	00c603d7 	ldrdeq	r0, [r6], #55	; 0x37
    7e88:	0c040000 	stceq	0, cr0, [r4], {-0}
    7e8c:	000002eb 	andeq	r0, r0, fp, ror #5
    7e90:	c603d804 	strgt	sp, [r3], -r4, lsl #16
    7e94:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7e98:	00017f0c 	andeq	r7, r1, ip, lsl #30
    7e9c:	03d90400 	bicseq	r0, r9, #0, 8
    7ea0:	000000c6 	andeq	r0, r0, r6, asr #1
    7ea4:	44490d0c 	strbmi	r0, [r9], #-3340	; 0xd0c
    7ea8:	da040052 	ble	107ff8 <_Min_Stack_Size+0x107bf8>
    7eac:	0000c603 	andeq	ip, r0, r3, lsl #12
    7eb0:	4f0d1000 	svcmi	0x000d1000
    7eb4:	04005244 	streq	r5, [r0], #-580	; 0x244
    7eb8:	00c603db 	ldrdeq	r0, [r6], #59	; 0x3b
    7ebc:	0c140000 	ldceq	0, cr0, [r4], {-0}
    7ec0:	000004a1 	andeq	r0, r0, r1, lsr #9
    7ec4:	db03dc04 	blle	feedc <_Min_Stack_Size+0xfeadc>
    7ec8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    7ecc:	0001a60c 	andeq	sl, r1, ip, lsl #12
    7ed0:	03dd0400 	bicseq	r0, sp, #0, 8
    7ed4:	000000db 	ldrdeq	r0, [r0], -fp
    7ed8:	04a70c1a 	strteq	r0, [r7], #3098	; 0xc1a
    7edc:	de040000 	cdple	0, 0, cr0, cr4, cr0, {0}
    7ee0:	0000c603 	andeq	ip, r0, r3, lsl #12
    7ee4:	410d1c00 	tstmi	sp, r0, lsl #24
    7ee8:	04005246 	streq	r5, [r0], #-582	; 0x246
    7eec:	019303df 			; <UNDEFINED> instruction: 0x019303df
    7ef0:	00200000 	eoreq	r0, r0, r0
    7ef4:	0000cb05 	andeq	ip, r0, r5, lsl #22
    7ef8:	00000a00 	andeq	r0, r0, r0, lsl #20
    7efc:	e0040000 	and	r0, r4, r0
    7f00:	00010703 	andeq	r0, r1, r3, lsl #14
    7f04:	05010e00 	streq	r0, [r1, #-3584]	; 0xe00
    7f08:	0001c542 	andeq	ip, r1, r2, asr #10
    7f0c:	01990900 	orrseq	r0, r9, r0, lsl #18
    7f10:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7f14:	00000171 	andeq	r0, r0, r1, ror r1
    7f18:	00aa0901 	adceq	r0, sl, r1, lsl #18
    7f1c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    7f20:	000000d3 	ldrdeq	r0, [r0], -r3
    7f24:	73030003 	movwvc	r0, #12291	; 0x3003
    7f28:	05000004 	streq	r0, [r0, #-4]
    7f2c:	0001a447 	andeq	sl, r1, r7, asr #8
    7f30:	05010e00 	streq	r0, [r1, #-3584]	; 0xe00
    7f34:	0001e54f 	andeq	lr, r1, pc, asr #10
    7f38:	01f20900 	mvnseq	r0, r0, lsl #18
    7f3c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7f40:	00000066 	andeq	r0, r0, r6, rrx
    7f44:	41030001 	tstmi	r3, r1
    7f48:	05000001 	streq	r0, [r0, #-1]
    7f4c:	0001d052 	andeq	sp, r1, r2, asr r0
    7f50:	05010e00 	streq	r0, [r1, #-3584]	; 0xe00
    7f54:	0002115a 	andeq	r1, r2, sl, asr r1
    7f58:	02ca0900 	sbceq	r0, sl, #0, 18
    7f5c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7f60:	000002d9 	ldrdeq	r0, [r0], -r9
    7f64:	02920901 	addseq	r0, r2, #16384	; 0x4000
    7f68:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    7f6c:	000001e2 	andeq	r0, r0, r2, ror #3
    7f70:	fa030003 	blx	c7f84 <_Min_Stack_Size+0xc7b84>
    7f74:	05000003 	streq	r0, [r0, #-3]
    7f78:	0001f05f 	andeq	pc, r1, pc, asr r0	; <UNPREDICTABLE>
    7f7c:	05010e00 	streq	r0, [r1, #-3584]	; 0xe00
    7f80:	0002376e 	andeq	r3, r2, lr, ror #14
    7f84:	04280900 	strteq	r0, [r8], #-2304	; 0x900
    7f88:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7f8c:	00000484 	andeq	r0, r0, r4, lsl #9
    7f90:	040c0901 	streq	r0, [ip], #-2305	; 0x901
    7f94:	00020000 	andeq	r0, r2, r0
    7f98:	00046203 	andeq	r6, r4, r3, lsl #4
    7f9c:	1c720500 	cfldr64ne	mvdx0, [r2], #-0
    7fa0:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    7fa4:	577a0501 	ldrbpl	r0, [sl, -r1, lsl #10]!
    7fa8:	09000002 	stmdbeq	r0, {r1}
    7fac:	0000252d 	andeq	r2, r0, sp, lsr #10
    7fb0:	24ed0900 	strbtcs	r0, [sp], #2304	; 0x900
    7fb4:	00010000 	andeq	r0, r1, r0
    7fb8:	00267e03 	eoreq	r7, r6, r3, lsl #28
    7fbc:	427d0500 	rsbsmi	r0, sp, #0, 10
    7fc0:	0f000002 	svceq	0x00000002
    7fc4:	a7840508 	strge	r0, [r4, r8, lsl #10]
    7fc8:	10000002 	andne	r0, r0, r2
    7fcc:	0000000d 	andeq	r0, r0, sp
    7fd0:	00b48605 	adcseq	r8, r4, r5, lsl #12
    7fd4:	10000000 	andne	r0, r0, r0
    7fd8:	000004ac 	andeq	r0, r0, ip, lsr #9
    7fdc:	01c58905 	biceq	r8, r5, r5, lsl #18
    7fe0:	10040000 	andne	r0, r4, r0
    7fe4:	000000be 	strheq	r0, [r0], -lr
    7fe8:	02118c05 	andseq	r8, r1, #1280	; 0x500
    7fec:	10050000 	andne	r0, r5, r0
    7ff0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7ff4:	01e58f05 	mvneq	r8, r5, lsl #30
    7ff8:	10060000 	andne	r0, r6, r0
    7ffc:	0000020e 	andeq	r0, r0, lr, lsl #4
    8000:	02379205 	eorseq	r9, r7, #1342177280	; 0x50000000
    8004:	00070000 	andeq	r0, r7, r0
    8008:	00024d03 	andeq	r4, r2, r3, lsl #26
    800c:	62940500 	addsvs	r0, r4, #0, 10
    8010:	11000002 	tstne	r0, r2
    8014:	000025ee 	andeq	r2, r0, lr, ror #11
    8018:	34c07f01 	strbcc	r7, [r0], #3841	; 0xf01
    801c:	015c0800 	cmpeq	ip, r0, lsl #16
    8020:	9c010000 	stcls	0, cr0, [r1], {-0}
    8024:	000004f5 	strdeq	r0, [r0], -r5
    8028:	00331812 	eorseq	r1, r3, r2, lsl r8
    802c:	f57f0100 			; <UNDEFINED> instruction: 0xf57f0100
    8030:	dd000004 	stcle	0, cr0, [r0, #-16]
    8034:	13000055 	movwne	r0, #85	; 0x55
    8038:	08003510 	stmdaeq	r0, {r4, r8, sl, ip, sp}
    803c:	0000082d 	andeq	r0, r0, sp, lsr #16
    8040:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    8044:	01510114 	cmpeq	r1, r4, lsl r1
    8048:	50011431 	andpl	r1, r1, r1, lsr r4
    804c:	04000a03 	streq	r0, [r0], #-2563	; 0xa03
    8050:	351e1500 	ldrcc	r1, [lr, #-1280]	; 0x500
    8054:	082d0800 	stmdaeq	sp!, {fp}
    8058:	030a0000 	movweq	r0, #40960	; 0xa000
    805c:	01140000 	tsteq	r4, r0
    8060:	14300151 	ldrtne	r0, [r0], #-337	; 0x151
    8064:	0a035001 	beq	dc070 <_Min_Stack_Size+0xdbc70>
    8068:	13000400 	movwne	r0, #1024	; 0x400
    806c:	08003526 	stmdaeq	r0, {r1, r2, r5, r8, sl, ip, sp}
    8070:	0000082d 	andeq	r0, r0, sp, lsr #16
    8074:	00000322 	andeq	r0, r0, r2, lsr #6
    8078:	01510114 	cmpeq	r1, r4, lsl r1
    807c:	50011431 	andpl	r1, r1, r1, lsr r4
    8080:	15003101 	strne	r3, [r0, #-257]	; 0x101
    8084:	08003532 	stmdaeq	r0, {r1, r4, r5, r8, sl, ip, sp}
    8088:	0000082d 	andeq	r0, r0, sp, lsr #16
    808c:	0000033a 	andeq	r0, r0, sl, lsr r3
    8090:	01510114 	cmpeq	r1, r4, lsl r1
    8094:	50011430 	andpl	r1, r1, r0, lsr r4
    8098:	13003101 	movwne	r3, #257	; 0x101
    809c:	0800353a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, ip, sp}
    80a0:	0000082d 	andeq	r0, r0, sp, lsr #16
    80a4:	00000352 	andeq	r0, r0, r2, asr r3
    80a8:	01510114 	cmpeq	r1, r4, lsl r1
    80ac:	50011431 	andpl	r1, r1, r1, lsr r4
    80b0:	15003201 	strne	r3, [r0, #-513]	; 0x201
    80b4:	08003546 	stmdaeq	r0, {r1, r2, r6, r8, sl, ip, sp}
    80b8:	0000082d 	andeq	r0, r0, sp, lsr #16
    80bc:	0000036a 	andeq	r0, r0, sl, ror #6
    80c0:	01510114 	cmpeq	r1, r4, lsl r1
    80c4:	50011430 	andpl	r1, r1, r0, lsr r4
    80c8:	13003201 	movwne	r3, #513	; 0x201
    80cc:	0800354e 	stmdaeq	r0, {r1, r2, r3, r6, r8, sl, ip, sp}
    80d0:	0000082d 	andeq	r0, r0, sp, lsr #16
    80d4:	00000382 	andeq	r0, r0, r2, lsl #7
    80d8:	01510114 	cmpeq	r1, r4, lsl r1
    80dc:	50011431 	andpl	r1, r1, r1, lsr r4
    80e0:	15003401 	strne	r3, [r0, #-1025]	; 0x401
    80e4:	0800355a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, ip, sp}
    80e8:	0000082d 	andeq	r0, r0, sp, lsr #16
    80ec:	0000039a 	muleq	r0, sl, r3
    80f0:	01510114 	cmpeq	r1, r4, lsl r1
    80f4:	50011430 	andpl	r1, r1, r0, lsr r4
    80f8:	13003401 	movwne	r3, #1025	; 0x401
    80fc:	08003562 	stmdaeq	r0, {r1, r5, r6, r8, sl, ip, sp}
    8100:	0000082d 	andeq	r0, r0, sp, lsr #16
    8104:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
    8108:	01510114 	cmpeq	r1, r4, lsl r1
    810c:	50011431 	andpl	r1, r1, r1, lsr r4
    8110:	15003801 	strne	r3, [r0, #-2049]	; 0x801
    8114:	0800356e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sl, ip, sp}
    8118:	0000082d 	andeq	r0, r0, sp, lsr #16
    811c:	000003ca 	andeq	r0, r0, sl, asr #7
    8120:	01510114 	cmpeq	r1, r4, lsl r1
    8124:	50011430 	andpl	r1, r1, r0, lsr r4
    8128:	13003801 	movwne	r3, #2049	; 0x801
    812c:	08003576 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, ip, sp}
    8130:	0000082d 	andeq	r0, r0, sp, lsr #16
    8134:	000003e2 	andeq	r0, r0, r2, ror #7
    8138:	01510114 	cmpeq	r1, r4, lsl r1
    813c:	50011431 	andpl	r1, r1, r1, lsr r4
    8140:	15004001 	strne	r4, [r0, #-1]
    8144:	08003582 	stmdaeq	r0, {r1, r7, r8, sl, ip, sp}
    8148:	0000082d 	andeq	r0, r0, sp, lsr #16
    814c:	000003fa 	strdeq	r0, [r0], -sl
    8150:	01510114 	cmpeq	r1, r4, lsl r1
    8154:	50011430 	andpl	r1, r1, r0, lsr r4
    8158:	13004001 	movwne	r4, #1
    815c:	0800358a 	stmdaeq	r0, {r1, r3, r7, r8, sl, ip, sp}
    8160:	0000082d 	andeq	r0, r0, sp, lsr #16
    8164:	00000413 	andeq	r0, r0, r3, lsl r4
    8168:	01510114 	cmpeq	r1, r4, lsl r1
    816c:	50011431 	andpl	r1, r1, r1, lsr r4
    8170:	00200802 	eoreq	r0, r0, r2, lsl #16
    8174:	00359615 	eorseq	r9, r5, r5, lsl r6
    8178:	00082d08 	andeq	r2, r8, r8, lsl #26
    817c:	00042c00 	andeq	r2, r4, r0, lsl #24
    8180:	51011400 	tstpl	r1, r0, lsl #8
    8184:	01143001 	tsteq	r4, r1
    8188:	20080250 	andcs	r0, r8, r0, asr r2
    818c:	359e1300 	ldrcc	r1, [lr, #768]	; 0x300
    8190:	082d0800 	stmdaeq	sp!, {fp}
    8194:	04450000 	strbeq	r0, [r5], #-0
    8198:	01140000 	tsteq	r4, r0
    819c:	14310151 	ldrtne	r0, [r1], #-337	; 0x151
    81a0:	08025001 	stmdaeq	r2, {r0, ip, lr}
    81a4:	aa150040 	bge	5482ac <_Min_Stack_Size+0x547eac>
    81a8:	2d080035 	stccs	0, cr0, [r8, #-212]	; 0xffffff2c
    81ac:	5e000008 	cdppl	0, 0, cr0, cr0, cr8, {0}
    81b0:	14000004 	strne	r0, [r0], #-4
    81b4:	30015101 	andcc	r5, r1, r1, lsl #2
    81b8:	02500114 	subseq	r0, r0, #20, 2
    81bc:	13004008 	movwne	r4, #8
    81c0:	080035b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, sl, ip, sp}
    81c4:	0000082d 	andeq	r0, r0, sp, lsr #16
    81c8:	00000477 	andeq	r0, r0, r7, ror r4
    81cc:	01510114 	cmpeq	r1, r4, lsl r1
    81d0:	50011431 	andpl	r1, r1, r1, lsr r4
    81d4:	00800802 	addeq	r0, r0, r2, lsl #16
    81d8:	0035be15 	eorseq	fp, r5, r5, lsl lr
    81dc:	00082d08 	andeq	r2, r8, r8, lsl #26
    81e0:	00049000 	andeq	r9, r4, r0
    81e4:	51011400 	tstpl	r1, r0, lsl #8
    81e8:	01143001 	tsteq	r4, r1
    81ec:	80080250 	andhi	r0, r8, r0, asr r2
    81f0:	35c81300 	strbcc	r1, [r8, #768]	; 0x300
    81f4:	082d0800 	stmdaeq	sp!, {fp}
    81f8:	04aa0000 	strteq	r0, [sl], #0
    81fc:	01140000 	tsteq	r4, r0
    8200:	14310151 	ldrtne	r0, [r1], #-337	; 0x151
    8204:	0a035001 	beq	dc210 <_Min_Stack_Size+0xdbe10>
    8208:	15000100 	strne	r0, [r0, #-256]	; 0x100
    820c:	080035d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, ip, sp}
    8210:	0000082d 	andeq	r0, r0, sp, lsr #16
    8214:	000004c4 	andeq	r0, r0, r4, asr #9
    8218:	01510114 	cmpeq	r1, r4, lsl r1
    821c:	50011430 	andpl	r1, r1, r0, lsr r4
    8220:	01000a03 	tsteq	r0, r3, lsl #20
    8224:	35e01300 	strbcc	r1, [r0, #768]!	; 0x300
    8228:	082d0800 	stmdaeq	sp!, {fp}
    822c:	04de0000 	ldrbeq	r0, [lr], #0
    8230:	01140000 	tsteq	r4, r0
    8234:	14310151 	ldrtne	r0, [r1], #-337	; 0x151
    8238:	0a035001 	beq	dc244 <_Min_Stack_Size+0xdbe44>
    823c:	16000200 	strne	r0, [r0], -r0, lsl #4
    8240:	080035ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sl, ip, sp}
    8244:	0000082d 	andeq	r0, r0, sp, lsr #16
    8248:	01510114 	cmpeq	r1, r4, lsl r1
    824c:	50011430 	andpl	r1, r1, r0, lsr r4
    8250:	02000a03 	andeq	r0, r0, #12288	; 0x3000
    8254:	04170000 	ldreq	r0, [r7], #-0
    8258:	00000198 	muleq	r0, r8, r1
    825c:	0000c911 	andeq	ip, r0, r1, lsl r9
    8260:	1cca0100 	stfnee	f0, [sl], {0}
    8264:	bc080036 	stclt	0, cr0, [r8], {54}	; 0x36
    8268:	01000000 	mrseq	r0, (UNDEF: 0)
    826c:	0005589c 	muleq	r5, ip, r8
    8270:	33181800 	tstcc	r8, #0, 16
    8274:	ca010000 	bgt	4827c <_Min_Stack_Size+0x47e7c>
    8278:	000004f5 	strdeq	r0, [r0], -r5
    827c:	31185001 	tstcc	r8, r1
    8280:	01000026 	tsteq	r0, r6, lsr #32
    8284:	000558ca 	andeq	r5, r5, sl, asr #17
    8288:	19510100 	ldmdbne	r1, {r8}^
    828c:	000024e6 	andeq	r2, r0, r6, ror #9
    8290:	00b4cc01 	adcseq	ip, r4, r1, lsl #24
    8294:	56f80000 	ldrbtpl	r0, [r8], r0
    8298:	701a0000 	andsvc	r0, sl, r0
    829c:	0100736f 	tsteq	r0, pc, ror #6
    82a0:	0000b4cc 	andeq	fp, r0, ip, asr #9
    82a4:	00571700 	subseq	r1, r7, r0, lsl #14
    82a8:	26881900 	strcs	r1, [r8], r0, lsl #18
    82ac:	cc010000 	stcgt	0, cr0, [r1], {-0}
    82b0:	000000b4 	strheq	r0, [r0], -r4
    82b4:	00005771 	andeq	r5, r0, r1, ror r7
    82b8:	a7041700 	strge	r1, [r4, -r0, lsl #14]
    82bc:	11000002 	tstne	r0, r2
    82c0:	00002516 	andeq	r2, r0, r6, lsl r5
    82c4:	36d8fe01 	ldrbcc	pc, [r8], r1, lsl #28	; <UNPREDICTABLE>
    82c8:	00120800 	andseq	r0, r2, r0, lsl #16
    82cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    82d0:	00000581 	andeq	r0, r0, r1, lsl #11
    82d4:	00263118 	eoreq	r3, r6, r8, lsl r1
    82d8:	58fe0100 	ldmpl	lr!, {r8}^
    82dc:	01000005 	tsteq	r0, r5
    82e0:	6b1b0050 	blvs	6c8428 <_Min_Stack_Size+0x6c8028>
    82e4:	01000026 	tsteq	r0, r6, lsr #32
    82e8:	36ec0115 	usatcc	r0, #12, r5, lsl #2
    82ec:	00240800 	eoreq	r0, r4, r0, lsl #16
    82f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    82f4:	000005c3 	andeq	r0, r0, r3, asr #11
    82f8:	0033181c 	eorseq	r1, r3, ip, lsl r8
    82fc:	01150100 	tsteq	r5, r0, lsl #2
    8300:	000004f5 	strdeq	r0, [r0], -r5
    8304:	0d1c5001 	ldceq	0, cr5, [ip, #-4]
    8308:	01000000 	mrseq	r0, (UNDEF: 0)
    830c:	009e0115 	addseq	r0, lr, r5, lsl r1
    8310:	51010000 	mrspl	r0, (UNDEF: 1)
    8314:	706d741d 	rsbvc	r7, sp, sp, lsl r4
    8318:	01170100 	tsteq	r7, r0, lsl #2
    831c:	000000c6 	andeq	r0, r0, r6, asr #1
    8320:	007c9102 	rsbseq	r9, ip, r2, lsl #2
    8324:	0025fa1e 	eoreq	pc, r5, lr, lsl sl	; <UNPREDICTABLE>
    8328:	01430100 	mrseq	r0, (UNDEF: 83)
    832c:	00000093 	muleq	r0, r3, r0
    8330:	08003710 	stmdaeq	r0, {r4, r8, r9, sl, ip, sp}
    8334:	0000000c 	andeq	r0, r0, ip
    8338:	060c9c01 	streq	r9, [ip], -r1, lsl #24
    833c:	181f0000 	ldmdane	pc, {}	; <UNPREDICTABLE>
    8340:	01000033 	tsteq	r0, r3, lsr r0
    8344:	04f50143 	ldrbteq	r0, [r5], #323	; 0x143
    8348:	57df0000 	ldrbpl	r0, [pc, r0]
    834c:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    8350:	01000000 	mrseq	r0, (UNDEF: 0)
    8354:	009e0143 	addseq	r0, lr, r3, asr #2
    8358:	51010000 	mrspl	r0, (UNDEF: 1)
    835c:	00261020 	eoreq	r1, r6, r0, lsr #32
    8360:	01450100 	mrseq	r0, (UNDEF: 85)
    8364:	00000093 	muleq	r0, r3, r0
    8368:	00005800 	andeq	r5, r0, r0, lsl #16
    836c:	26581e00 	ldrbcs	r1, [r8], -r0, lsl #28
    8370:	5d010000 	stcpl	0, cr0, [r1, #-0]
    8374:	00009e01 	andeq	r9, r0, r1, lsl #28
    8378:	00371c00 	eorseq	r1, r7, r0, lsl #24
    837c:	00000608 	andeq	r0, r0, r8, lsl #12
    8380:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
    8384:	1f000006 	svcne	0x00000006
    8388:	00003318 	andeq	r3, r0, r8, lsl r3
    838c:	f5015d01 			; <UNDEFINED> instruction: 0xf5015d01
    8390:	2a000004 	bcs	83a8 <_Min_Stack_Size+0x7fa8>
    8394:	00000058 	andeq	r0, r0, r8, asr r0
    8398:	0026b61e 	eoreq	fp, r6, lr, lsl r6
    839c:	016e0100 	cmneq	lr, r0, lsl #2
    83a0:	00000093 	muleq	r0, r3, r0
    83a4:	08003724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, sp}
    83a8:	0000000c 	andeq	r0, r0, ip
    83ac:	06809c01 	streq	r9, [r0], r1, lsl #24
    83b0:	181f0000 	ldmdane	pc, {}	; <UNPREDICTABLE>
    83b4:	01000033 	tsteq	r0, r3, lsr r0
    83b8:	04f5016e 	ldrbteq	r0, [r5], #366	; 0x16e
    83bc:	584b0000 	stmdapl	fp, {}^	; <UNPREDICTABLE>
    83c0:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    83c4:	01000000 	mrseq	r0, (UNDEF: 0)
    83c8:	009e016e 	addseq	r0, lr, lr, ror #2
    83cc:	51010000 	mrspl	r0, (UNDEF: 1)
    83d0:	00261020 	eoreq	r1, r6, r0, lsr #32
    83d4:	01700100 	cmneq	r0, r0, lsl #2
    83d8:	00000093 	muleq	r0, r3, r0
    83dc:	0000586c 	andeq	r5, r0, ip, ror #16
    83e0:	24f51e00 	ldrbtcs	r1, [r5], #3584	; 0xe00
    83e4:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    83e8:	00009e01 	andeq	r9, r0, r1, lsl #28
    83ec:	00373000 	eorseq	r3, r7, r0
    83f0:	00000608 	andeq	r0, r0, r8, lsl #12
    83f4:	ab9c0100 	blge	fe7087fc <_estack+0xde6d87fc>
    83f8:	1f000006 	svcne	0x00000006
    83fc:	00003318 	andeq	r3, r0, r8, lsl r3
    8400:	f5018801 			; <UNDEFINED> instruction: 0xf5018801
    8404:	96000004 	strls	r0, [r0], -r4
    8408:	00000058 	andeq	r0, r0, r8, asr r0
    840c:	0025451b 	eoreq	r4, r5, fp, lsl r5
    8410:	019c0100 	orrseq	r0, ip, r0, lsl #2
    8414:	08003738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, sp}
    8418:	00000004 	andeq	r0, r0, r4
    841c:	06de9c01 	ldrbeq	r9, [lr], r1, lsl #24
    8420:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    8424:	01000033 	tsteq	r0, r3, lsr r0
    8428:	04f5019c 	ldrbteq	r0, [r5], #412	; 0x19c
    842c:	50010000 	andpl	r0, r1, r0
    8430:	00000d1c 	andeq	r0, r0, ip, lsl sp
    8434:	019c0100 	orrseq	r0, ip, r0, lsl #2
    8438:	0000009e 	muleq	r0, lr, r0
    843c:	1b005101 	blne	1c848 <_Min_Stack_Size+0x1c448>
    8440:	000025df 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    8444:	3c01b101 	stfccd	f3, [r1], {1}
    8448:	04080037 	streq	r0, [r8], #-55	; 0x37
    844c:	01000000 	mrseq	r0, (UNDEF: 0)
    8450:	0007119c 	muleq	r7, ip, r1
    8454:	33181c00 	tstcc	r8, #0, 24
    8458:	b1010000 	mrslt	r0, (UNDEF: 1)
    845c:	0004f501 	andeq	pc, r4, r1, lsl #10
    8460:	1c500100 	ldfnee	f0, [r0], {-0}
    8464:	0000000d 	andeq	r0, r0, sp
    8468:	9e01b101 	mvflss	f3, f1
    846c:	01000000 	mrseq	r0, (UNDEF: 0)
    8470:	371b0051 			; <UNDEFINED> instruction: 0x371b0051
    8474:	01000025 	tsteq	r0, r5, lsr #32
    8478:	374001c7 	strbcc	r0, [r0, -r7, asr #3]
    847c:	000a0800 	andeq	r0, sl, r0, lsl #16
    8480:	9c010000 	stcls	0, cr0, [r1], {-0}
    8484:	00000752 	andeq	r0, r0, r2, asr r7
    8488:	0033181c 	eorseq	r1, r3, ip, lsl r8
    848c:	01c70100 	biceq	r0, r7, r0, lsl #2
    8490:	000004f5 	strdeq	r0, [r0], -r5
    8494:	0d1c5001 	ldceq	0, cr5, [ip, #-4]
    8498:	01000000 	mrseq	r0, (UNDEF: 0)
    849c:	009e01c7 	addseq	r0, lr, r7, asr #3
    84a0:	51010000 	mrspl	r0, (UNDEF: 1)
    84a4:	0025261c 	eoreq	r2, r5, ip, lsl r6
    84a8:	01c70100 	biceq	r0, r7, r0, lsl #2
    84ac:	00000257 	andeq	r0, r0, r7, asr r2
    84b0:	1b005201 	blne	1ccbc <_Min_Stack_Size+0x1c8bc>
    84b4:	00002693 	muleq	r0, r3, r6
    84b8:	4c01e001 	stcmi	0, cr14, [r1], {1}
    84bc:	04080037 	streq	r0, [r8], #-55	; 0x37
    84c0:	01000000 	mrseq	r0, (UNDEF: 0)
    84c4:	0007859c 	muleq	r7, ip, r5
    84c8:	33181c00 	tstcc	r8, #0, 24
    84cc:	e0010000 	and	r0, r1, r0
    84d0:	0004f501 	andeq	pc, r4, r1, lsl #10
    84d4:	1c500100 	ldfnee	f0, [r0], {-0}
    84d8:	00002641 	andeq	r2, r0, r1, asr #12
    84dc:	9e01e001 	cdpls	0, 0, cr14, cr1, cr1, {0}
    84e0:	01000000 	mrseq	r0, (UNDEF: 0)
    84e4:	6b1b0051 	blvs	6c8630 <_Min_Stack_Size+0x6c8230>
    84e8:	01000002 	tsteq	r0, r2
    84ec:	375001f0 	smmlsrcc	r0, r0, r1, r0
    84f0:	00080800 	andeq	r0, r8, r0, lsl #16
    84f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    84f8:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
    84fc:	0033181c 	eorseq	r1, r3, ip, lsl r8
    8500:	01f00100 	mvnseq	r0, r0, lsl #2
    8504:	000004f5 	strdeq	r0, [r0], -r5
    8508:	0d1f5001 	ldceq	0, cr5, [pc, #-4]	; 850c <_Min_Stack_Size+0x810c>
    850c:	01000000 	mrseq	r0, (UNDEF: 0)
    8510:	009e01f0 			; <UNDEFINED> instruction: 0x009e01f0
    8514:	58b70000 	ldmpl	r7!, {}	; <UNPREDICTABLE>
    8518:	1b000000 	blne	8520 <_Min_Stack_Size+0x8120>
    851c:	000026a5 	andeq	r2, r0, r5, lsr #13
    8520:	58024301 	stmdapl	r2, {r0, r8, r9, lr}
    8524:	28080037 	stmdacs	r8, {r0, r1, r2, r4, r5}
    8528:	01000000 	mrseq	r0, (UNDEF: 0)
    852c:	0008219c 	muleq	r8, ip, r1
    8530:	33181f00 	tstcc	r8, #0, 30
    8534:	43010000 	movwmi	r0, #4096	; 0x1000
    8538:	0004f502 	andeq	pc, r4, r2, lsl #10
    853c:	0058d800 	subseq	sp, r8, r0, lsl #16
    8540:	26491f00 	strbcs	r1, [r9], -r0, lsl #30
    8544:	43010000 	movwmi	r0, #4096	; 0x1000
    8548:	00009e02 	andeq	r9, r0, r2, lsl #28
    854c:	0058f900 	subseq	pc, r8, r0, lsl #18
    8550:	25091f00 	strcs	r1, [r9, #-3840]	; 0xf00
    8554:	43010000 	movwmi	r0, #4096	; 0x1000
    8558:	00009302 	andeq	r9, r0, r2, lsl #6
    855c:	00591a00 	subseq	r1, r9, r0, lsl #20
    8560:	25112000 	ldrcs	r2, [r1, #-0]
    8564:	45010000 	strmi	r0, [r1, #-0]
    8568:	0000b402 	andeq	fp, r0, r2, lsl #8
    856c:	00593b00 	subseq	r3, r9, r0, lsl #22
    8570:	269e2000 	ldrcs	r2, [lr], r0
    8574:	46010000 	strmi	r0, [r1], -r0
    8578:	0000b402 	andeq	fp, r0, r2, lsl #8
    857c:	00597600 	subseq	r7, r9, r0, lsl #12
    8580:	1b210000 	blne	848588 <_Min_Stack_Size+0x848188>
    8584:	06000004 	streq	r0, [r0], -r4
    8588:	00e006a7 	rsceq	r0, r0, r7, lsr #13
    858c:	1a220000 	bne	888594 <_Min_Stack_Size+0x888194>
    8590:	07000026 	streq	r0, [r0, -r6, lsr #32]
    8594:	b4230246 	strtlt	r0, [r3], #-582	; 0x246
    8598:	23000000 	movwcs	r0, #0
    859c:	000000fb 	strdeq	r0, [r0], -fp
    85a0:	0eca0000 	cdpeq	0, 12, cr0, cr10, cr0, {0}
    85a4:	00040000 	andeq	r0, r4, r0
    85a8:	00001a93 	muleq	r0, r3, sl
    85ac:	02f30104 	rscseq	r0, r3, #4, 2
    85b0:	a7010000 	strge	r0, [r1, -r0]
    85b4:	b000002a 	andlt	r0, r0, sl, lsr #32
    85b8:	0000000e 	andeq	r0, r0, lr
    85bc:	07000000 	streq	r0, [r0, -r0]
    85c0:	02000035 	andeq	r0, r0, #53	; 0x35
    85c4:	02020601 	andeq	r0, r2, #1048576	; 0x100000
    85c8:	df030000 	svcle	0x00030000
    85cc:	02000005 	andeq	r0, r0, #5
    85d0:	0000331d 	andeq	r3, r0, sp, lsl r3
    85d4:	08010200 	stmdaeq	r1, {r9}
    85d8:	00000200 	andeq	r0, r0, r0, lsl #4
    85dc:	38050202 	stmdacc	r5, {r1, r9}
    85e0:	03000000 	movweq	r0, #0
    85e4:	00000094 	muleq	r0, r4, r0
    85e8:	004c2b02 	subeq	r2, ip, r2, lsl #22
    85ec:	02020000 	andeq	r0, r2, #0
    85f0:	0002aa07 	andeq	sl, r2, r7, lsl #20
    85f4:	044c0300 	strbeq	r0, [ip], #-768	; 0x300
    85f8:	3f020000 	svccc	0x00020000
    85fc:	0000005e 	andeq	r0, r0, lr, asr r0
    8600:	5d050402 	cfstrspl	mvf0, [r5, #-8]
    8604:	03000001 	movweq	r0, #1
    8608:	00000089 	andeq	r0, r0, r9, lsl #1
    860c:	00704102 	rsbseq	r4, r0, r2, lsl #2
    8610:	04020000 	streq	r0, [r2], #-0
    8614:	00021d07 	andeq	r1, r2, r7, lsl #26
    8618:	05080200 	streq	r0, [r8, #-512]	; 0x200
    861c:	00000158 	andeq	r0, r0, r8, asr r1
    8620:	18070802 	stmdane	r7, {r1, fp}
    8624:	04000002 	streq	r0, [r0], #-2
    8628:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    862c:	04020074 	streq	r0, [r2], #-116	; 0x74
    8630:	00022207 	andeq	r2, r2, r7, lsl #4
    8634:	05e10300 	strbeq	r0, [r1, #768]!	; 0x300
    8638:	2a030000 	bcs	c8640 <_Min_Stack_Size+0xc8240>
    863c:	00000028 	andeq	r0, r0, r8, lsr #32
    8640:	00009603 	andeq	r9, r0, r3, lsl #12
    8644:	41360300 	teqmi	r6, r0, lsl #6
    8648:	03000000 	movweq	r0, #0
    864c:	0000044e 	andeq	r0, r0, lr, asr #8
    8650:	00534103 	subseq	r4, r3, r3, lsl #2
    8654:	8b030000 	blhi	c865c <_Min_Stack_Size+0xc825c>
    8658:	03000000 	movweq	r0, #0
    865c:	00006542 	andeq	r6, r0, r2, asr #10
    8660:	07040200 	streq	r0, [r4, -r0, lsl #4]
    8664:	00000042 	andeq	r0, r0, r2, asr #32
    8668:	0000b405 	andeq	fp, r0, r5, lsl #8
    866c:	00b40600 	adcseq	r0, r4, r0, lsl #12
    8670:	00db0000 	sbcseq	r0, fp, r0
    8674:	bf070000 	svclt	0x00070000
    8678:	01000000 	mrseq	r0, (UNDEF: 0)
    867c:	00a90500 	adceq	r0, r9, r0, lsl #10
    8680:	01080000 	mrseq	r0, (UNDEF: 8)
    8684:	f601f704 			; <UNDEFINED> instruction: 0xf601f704
    8688:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    868c:	00002531 	andeq	r2, r0, r1, lsr r5
    8690:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xa00
    8694:	00010054 	andeq	r0, r1, r4, asr r0
    8698:	003b3f0b 	eorseq	r3, fp, fp, lsl #30
    869c:	01f70400 	mvnseq	r0, r0, lsl #8
    86a0:	000000e0 	andeq	r0, r0, r0, ror #1
    86a4:	003ab60b 	eorseq	fp, sl, fp, lsl #12
    86a8:	01f70400 	mvnseq	r0, r0, lsl #8
    86ac:	000000e0 	andeq	r0, r0, r0, ror #1
    86b0:	f9040108 			; <UNDEFINED> instruction: 0xf9040108
    86b4:	00012401 	andeq	r2, r1, r1, lsl #8
    86b8:	02a20900 	adceq	r0, r2, #0, 18
    86bc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    86c0:	000000b7 	strheq	r0, [r0], -r7
    86c4:	910b0001 	tstls	fp, r1
    86c8:	04000004 	streq	r0, [r0], #-4
    86cc:	010e01f9 	strdeq	r0, [lr, -r9]
    86d0:	01080000 	mrseq	r0, (UNDEF: 8)
    86d4:	4601fc04 	strmi	pc, [r1], -r4, lsl #24
    86d8:	09000001 	stmdbeq	r0, {r0}
    86dc:	00002a23 	andeq	r2, r0, r3, lsr #20
    86e0:	2d300900 	ldccs	9, cr0, [r0, #-0]
    86e4:	00010000 	andeq	r0, r1, r0
    86e8:	0028910b 	eoreq	r9, r8, fp, lsl #2
    86ec:	01fc0400 	mvnseq	r0, r0, lsl #8
    86f0:	00000130 	andeq	r0, r0, r0, lsr r1
    86f4:	5504900c 	strpl	r9, [r4, #-12]
    86f8:	0002fb04 	andeq	pc, r2, r4, lsl #22
    86fc:	52430d00 	subpl	r0, r3, #0, 26
    8700:	04570400 	ldrbeq	r0, [r7], #-1024	; 0x400
    8704:	000000c6 	andeq	r0, r0, r6, asr #1
    8708:	052e0e00 	streq	r0, [lr, #-3584]!	; 0xe00
    870c:	58040000 	stmdapl	r4, {}	; <UNPREDICTABLE>
    8710:	0000c604 	andeq	ip, r0, r4, lsl #12
    8714:	110e0400 	tstne	lr, r0, lsl #8
    8718:	04000007 	streq	r0, [r0], #-7
    871c:	00c60459 	sbceq	r0, r6, r9, asr r4
    8720:	0d080000 	stceq	0, cr0, [r8, #-0]
    8724:	00524943 	subseq	r4, r2, r3, asr #18
    8728:	c6045a04 	strgt	r5, [r4], -r4, lsl #20
    872c:	0c000000 	stceq	0, cr0, [r0], {-0}
    8730:	0005820e 	andeq	r8, r5, lr, lsl #4
    8734:	045b0400 	ldrbeq	r0, [fp], #-1024	; 0x400
    8738:	000000c6 	andeq	r0, r0, r6, asr #1
    873c:	05470e10 	strbeq	r0, [r7, #-3600]	; 0xe10
    8740:	5c040000 	stcpl	0, cr0, [r4], {-0}
    8744:	0000c604 	andeq	ip, r0, r4, lsl #12
    8748:	f40e1400 	vst3.8	{d1-d3}, [lr], r0
    874c:	04000006 	streq	r0, [r0], #-6
    8750:	00c6045d 	sbceq	r0, r6, sp, asr r4
    8754:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    8758:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    875c:	b4045e04 	strlt	r5, [r4], #-3588	; 0xe04
    8760:	1c000000 	stcne	0, cr0, [r0], {-0}
    8764:	0005360e 	andeq	r3, r5, lr, lsl #12
    8768:	045f0400 	ldrbeq	r0, [pc], #-1024	; 8770 <_Min_Stack_Size+0x8370>
    876c:	000000c6 	andeq	r0, r0, r6, asr #1
    8770:	05d60e20 	ldrbeq	r0, [r6, #3616]	; 0xe20
    8774:	60040000 	andvs	r0, r4, r0
    8778:	0000c604 	andeq	ip, r0, r4, lsl #12
    877c:	a90e2400 	stmdbge	lr, {sl, sp}
    8780:	04000006 	streq	r0, [r0], #-6
    8784:	00cb0461 	sbceq	r0, fp, r1, ror #8
    8788:	0e280000 	cdpeq	0, 2, cr0, cr8, cr0, {0}
    878c:	000006e7 	andeq	r0, r0, r7, ror #13
    8790:	c6046204 	strgt	r6, [r4], -r4, lsl #4
    8794:	30000000 	andcc	r0, r0, r0
    8798:	00053f0e 	andeq	r3, r5, lr, lsl #30
    879c:	04630400 	strbteq	r0, [r3], #-1024	; 0x400
    87a0:	000000c6 	andeq	r0, r0, r6, asr #1
    87a4:	05ff0e34 	ldrbeq	r0, [pc, #3636]!	; 95e0 <_Min_Stack_Size+0x91e0>
    87a8:	64040000 	strvs	r0, [r4], #-0
    87ac:	0000c604 	andeq	ip, r0, r4, lsl #12
    87b0:	b30e3800 	movwlt	r3, #59392	; 0xe800
    87b4:	04000006 	streq	r0, [r0], #-6
    87b8:	00b40465 	adcseq	r0, r4, r5, ror #8
    87bc:	0e3c0000 	cdpeq	0, 3, cr0, cr12, cr0, {0}
    87c0:	000005a8 	andeq	r0, r0, r8, lsr #11
    87c4:	c6046604 	strgt	r6, [r4], -r4, lsl #12
    87c8:	40000000 	andmi	r0, r0, r0
    87cc:	0006170e 	andeq	r1, r6, lr, lsl #14
    87d0:	04670400 	strbteq	r0, [r7], #-1024	; 0x400
    87d4:	000000c6 	andeq	r0, r0, r6, asr #1
    87d8:	05950e44 	ldreq	r0, [r5, #3652]	; 0xe44
    87dc:	68040000 	stmdavs	r4, {}	; <UNPREDICTABLE>
    87e0:	0000cb04 	andeq	ip, r0, r4, lsl #22
    87e4:	b60e4800 	strlt	r4, [lr], -r0, lsl #16
    87e8:	04000004 	streq	r0, [r0], #-4
    87ec:	00c60469 	sbceq	r0, r6, r9, ror #8
    87f0:	0e500000 	cdpeq	0, 5, cr0, cr0, cr0, {0}
    87f4:	00000690 	muleq	r0, r0, r6
    87f8:	c6046a04 	strgt	r6, [r4], -r4, lsl #20
    87fc:	54000000 	strpl	r0, [r0], #-0
    8800:	00058b0e 	andeq	r8, r5, lr, lsl #22
    8804:	046b0400 	strbteq	r0, [fp], #-1024	; 0x400
    8808:	000000c6 	andeq	r0, r0, r6, asr #1
    880c:	06c90e58 			; <UNDEFINED> instruction: 0x06c90e58
    8810:	6c040000 	stcvs	0, cr0, [r4], {-0}
    8814:	0000b404 	andeq	fp, r0, r4, lsl #8
    8818:	5b0e5c00 	blpl	39f820 <_Min_Stack_Size+0x39f420>
    881c:	04000006 	streq	r0, [r0], #-6
    8820:	00c6046d 	sbceq	r0, r6, sp, ror #8
    8824:	0e600000 	cdpeq	0, 6, cr0, cr0, cr0, {0}
    8828:	0000071c 	andeq	r0, r0, ip, lsl r7
    882c:	c6046e04 	strgt	r6, [r4], -r4, lsl #28
    8830:	64000000 	strvs	r0, [r0], #-0
    8834:	0006d30e 	andeq	sp, r6, lr, lsl #6
    8838:	046f0400 	strbteq	r0, [pc], #-1024	; 8840 <_Min_Stack_Size+0x8440>
    883c:	000000cb 	andeq	r0, r0, fp, asr #1
    8840:	05500e68 	ldrbeq	r0, [r0, #-3688]	; 0xe68
    8844:	70040000 	andvc	r0, r4, r0
    8848:	0000c604 	andeq	ip, r0, r4, lsl #12
    884c:	430d7000 	movwmi	r7, #53248	; 0xd000
    8850:	04005253 	streq	r5, [r0], #-595	; 0x253
    8854:	00c60471 	sbceq	r0, r6, r1, ror r4
    8858:	0e740000 	cdpeq	0, 7, cr0, cr4, cr0, {0}
    885c:	000006dd 	ldrdeq	r0, [r0], -sp
    8860:	cb047204 	blgt	125078 <_Min_Stack_Size+0x124c78>
    8864:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    8868:	00056c0e 	andeq	r6, r5, lr, lsl #24
    886c:	04730400 	ldrbteq	r0, [r3], #-1024	; 0x400
    8870:	000000c6 	andeq	r0, r0, r6, asr #1
    8874:	05550e80 	ldrbeq	r0, [r5, #-3712]	; 0xe80
    8878:	74040000 	strvc	r0, [r4], #-0
    887c:	0000c604 	andeq	ip, r0, r4, lsl #12
    8880:	0b0e8400 	bleq	3a9888 <_Min_Stack_Size+0x3a9488>
    8884:	04000007 	streq	r0, [r0], #-7
    8888:	00c60475 	sbceq	r0, r6, r5, ror r4
    888c:	0e880000 	cdpeq	0, 8, cr0, cr8, cr0, {0}
    8890:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
    8894:	c6047604 	strgt	r7, [r4], -r4, lsl #12
    8898:	8c000000 	stchi	0, cr0, [r0], {-0}
    889c:	05ca0b00 	strbeq	r0, [sl, #2816]	; 0xb00
    88a0:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
    88a4:	00015204 	andeq	r5, r1, r4, lsl #4
    88a8:	05100f00 	ldreq	r0, [r0, #-3840]	; 0xf00
    88ac:	00034030 	andeq	r4, r3, r0, lsr r0
    88b0:	27141000 	ldrcs	r1, [r4, -r0]
    88b4:	32050000 	andcc	r0, r5, #0
    88b8:	000000b4 	strheq	r0, [r0], -r4
    88bc:	28d51000 	ldmcs	r5, {ip}^
    88c0:	33050000 	movwcc	r0, #20480	; 0x5000
    88c4:	000000b4 	strheq	r0, [r0], -r4
    88c8:	2bec1004 	blcs	ffb0c8e0 <_estack+0xdfadc8e0>
    88cc:	34050000 	strcc	r0, [r5], #-0
    88d0:	000000b4 	strheq	r0, [r0], -r4
    88d4:	27e21008 	strbcs	r1, [r2, r8]!
    88d8:	35050000 	strcc	r0, [r5, #-0]
    88dc:	000000b4 	strheq	r0, [r0], -r4
    88e0:	4603000c 	strmi	r0, [r3], -ip
    88e4:	0500002d 	streq	r0, [r0, #-45]	; 0x2d
    88e8:	00030736 	andeq	r0, r3, r6, lsr r7
    88ec:	29ce1100 	stmibcs	lr, {r8, ip}^
    88f0:	2c010000 	stccs	0, cr0, [r1], {-0}
    88f4:	0000f608 	andeq	pc, r0, r8, lsl #12
    88f8:	038d0100 	orreq	r0, sp, #0, 2
    88fc:	75120000 	ldrvc	r0, [r2, #-0]
    8900:	01000028 	tsteq	r0, r8, lsr #32
    8904:	0093082c 	addseq	r0, r3, ip, lsr #16
    8908:	74130000 	ldrvc	r0, [r3], #-0
    890c:	0100706d 	tsteq	r0, sp, rrx
    8910:	00b4082e 	adcseq	r0, r4, lr, lsr #16
    8914:	0a140000 	beq	50891c <_Min_Stack_Size+0x50851c>
    8918:	01000027 	tsteq	r0, r7, lsr #32
    891c:	00b4082f 	adcseq	r0, r4, pc, lsr #16
    8920:	10140000 	andsne	r0, r4, r0
    8924:	01000026 	tsteq	r0, r6, lsr #32
    8928:	00f60830 	rscseq	r0, r6, r0, lsr r8
    892c:	15000000 	strne	r0, [r0, #-0]
    8930:	00002c66 	andeq	r2, r0, r6, ror #24
    8934:	3780d501 	strcc	sp, [r0, r1, lsl #10]
    8938:	00500800 	subseq	r0, r0, r0, lsl #16
    893c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8940:	002b3316 	eoreq	r3, fp, r6, lsl r3
    8944:	01080100 	mrseq	r0, (UNDEF: 24)
    8948:	080037d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, ip, sp}
    894c:	00000010 	andeq	r0, r0, r0, lsl r0
    8950:	03c39c01 	biceq	r9, r3, #256	; 0x100
    8954:	e4170000 	ldr	r0, [r7], #-0
    8958:	0100002b 	tsteq	r0, fp, lsr #32
    895c:	00930108 	addseq	r0, r3, r8, lsl #2
    8960:	50010000 	andpl	r0, r1, r0
    8964:	28bf1800 	ldmcs	pc!, {fp, ip}	; <UNPREDICTABLE>
    8968:	20010000 	andcs	r0, r1, r0
    896c:	00014601 	andeq	r4, r1, r1, lsl #12
    8970:	0037e000 	eorseq	lr, r7, r0
    8974:	00003808 	andeq	r3, r0, r8, lsl #16
    8978:	849c0100 	ldrhi	r0, [ip], #256	; 0x100
    897c:	19000004 	stmdbne	r0, {r2}
    8980:	00002cae 	andeq	r2, r0, lr, lsr #25
    8984:	c6012201 	strgt	r2, [r1], -r1, lsl #4
    8988:	02000000 	andeq	r0, r0, #0
    898c:	721a7c91 	andsvc	r7, sl, #37120	; 0x9100
    8990:	01000037 	tsteq	r0, r7, lsr r0
    8994:	01460123 	cmpeq	r6, r3, lsr #2
    8998:	59950000 	ldmibpl	r5, {}	; <UNPREDICTABLE>
    899c:	2b140000 	blcs	5089a4 <_Min_Stack_Size+0x5085a4>
    89a0:	0100002c 	tsteq	r0, ip, lsr #32
    89a4:	00f60124 	rscseq	r0, r6, r4, lsr #2
    89a8:	4b1b0000 	blmi	6c89b0 <_Min_Stack_Size+0x6c85b0>
    89ac:	e4000003 	str	r0, [r0], #-3
    89b0:	98080037 	stmdals	r8, {r0, r1, r2, r4, r5}
    89b4:	0100000e 	tsteq	r0, lr
    89b8:	04440128 	strbeq	r0, [r4], #-296	; 0x128
    89bc:	5c1c0000 	ldcpl	0, cr0, [ip], {-0}
    89c0:	31000003 	tstcc	r0, r3
    89c4:	000e981d 	andeq	r9, lr, sp, lsl r8
    89c8:	03681e00 	cmneq	r8, #0, 28
    89cc:	59c60000 	stmibpl	r6, {}^	; <UNPREDICTABLE>
    89d0:	741e0000 	ldrvc	r0, [lr], #-0
    89d4:	e6000003 	str	r0, [r0], -r3
    89d8:	1e000059 	mcrne	0, 0, r0, cr0, cr9, {2}
    89dc:	00000380 	andeq	r0, r0, r0, lsl #7
    89e0:	00005a05 	andeq	r5, r0, r5, lsl #20
    89e4:	4b1f0000 	blmi	7c89ec <_Min_Stack_Size+0x7c85ec>
    89e8:	fc000003 	stc2	0, cr0, [r0], {3}
    89ec:	04080037 	streq	r0, [r8], #-55	; 0x37
    89f0:	01000000 	mrseq	r0, (UNDEF: 0)
    89f4:	5c20012c 	stfpls	f0, [r0], #-176	; 0xffffff50
    89f8:	25000003 	strcs	r0, [r0, #-3]
    89fc:	2100005a 	qaddcs	r0, sl, r0
    8a00:	080037fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp}
    8a04:	00000004 	andeq	r0, r0, r4
    8a08:	0003681e 	andeq	r6, r3, lr, lsl r8
    8a0c:	005a3a00 	subseq	r3, sl, r0, lsl #20
    8a10:	03741e00 	cmneq	r4, #0, 28
    8a14:	5a5a0000 	bpl	1688a1c <_Min_Stack_Size+0x168861c>
    8a18:	801e0000 	andshi	r0, lr, r0
    8a1c:	79000003 	stmdbvc	r0, {r0, r1}
    8a20:	0000005a 	andeq	r0, r0, sl, asr r0
    8a24:	0d160000 	ldceq	0, cr0, [r6, #-0]
    8a28:	0100002c 	tsteq	r0, ip, lsr #32
    8a2c:	3818013f 	ldmdacc	r8, {r0, r1, r2, r3, r4, r5, r8}
    8a30:	00140800 	andseq	r0, r4, r0, lsl #16
    8a34:	9c010000 	stcls	0, cr0, [r1], {-0}
    8a38:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    8a3c:	002c1722 	eoreq	r1, ip, r2, lsr #14
    8a40:	013f0100 	teqeq	pc, r0, lsl #2
    8a44:	00000093 	muleq	r0, r3, r0
    8a48:	00005a8d 	andeq	r5, r0, sp, lsl #21
    8a4c:	0027db1a 	eoreq	sp, r7, sl, lsl fp
    8a50:	01410100 	mrseq	r0, (UNDEF: 81)
    8a54:	000000b4 	strheq	r0, [r0], -r4
    8a58:	00005aae 	andeq	r5, r0, lr, lsr #21
    8a5c:	29b41600 	ldmibcs	r4!, {r9, sl, ip}
    8a60:	63010000 	movwvs	r0, #4096	; 0x1000
    8a64:	00382c01 	eorseq	r2, r8, r1, lsl #24
    8a68:	00000c08 	andeq	r0, r0, r8, lsl #24
    8a6c:	e09c0100 	adds	r0, ip, r0, lsl #2
    8a70:	17000004 	strne	r0, [r0, -r4]
    8a74:	00002346 	andeq	r2, r0, r6, asr #6
    8a78:	24016301 	strcs	r6, [r1], #-769	; 0x301
    8a7c:	01000001 	tsteq	r0, r1
    8a80:	67160050 			; <UNDEFINED> instruction: 0x67160050
    8a84:	01000028 	tsteq	r0, r8, lsr #32
    8a88:	3838017c 	ldmdacc	r8!, {r2, r3, r4, r5, r6, r8}
    8a8c:	00200800 	eoreq	r0, r0, r0, lsl #16
    8a90:	9c010000 	stcls	0, cr0, [r1], {-0}
    8a94:	00000505 	andeq	r0, r0, r5, lsl #10
    8a98:	0026d617 	eoreq	sp, r6, r7, lsl r6
    8a9c:	017c0100 	cmneq	ip, r0, lsl #2
    8aa0:	00000093 	muleq	r0, r3, r0
    8aa4:	16005001 	strne	r5, [r0], -r1
    8aa8:	00002d01 	andeq	r2, r0, r1, lsl #26
    8aac:	5801a401 	stmdapl	r1, {r0, sl, sp, pc}
    8ab0:	0c080038 	stceq	0, cr0, [r8], {56}	; 0x38
    8ab4:	01000000 	mrseq	r0, (UNDEF: 0)
    8ab8:	00052a9c 	muleq	r5, ip, sl
    8abc:	23461700 	movtcs	r1, #26368	; 0x6700
    8ac0:	a4010000 	strge	r0, [r1], #-0
    8ac4:	00012401 	andeq	r2, r1, r1, lsl #8
    8ac8:	00500100 	subseq	r0, r0, r0, lsl #2
    8acc:	002d3816 	eoreq	r3, sp, r6, lsl r8
    8ad0:	01cf0100 	biceq	r0, pc, r0, lsl #2
    8ad4:	08003864 	stmdaeq	r0, {r2, r5, r6, fp, ip, sp}
    8ad8:	00000024 	andeq	r0, r0, r4, lsr #32
    8adc:	05919c01 	ldreq	r9, [r1, #3073]	; 0xc01
    8ae0:	9d220000 	stcls	0, cr0, [r2, #-0]
    8ae4:	01000028 	tsteq	r0, r8, lsr #32
    8ae8:	00b401cf 	adcseq	r0, r4, pc, asr #3
    8aec:	5ad80000 	bpl	ff608af4 <_estack+0xdf5d8af4>
    8af0:	8a220000 	bhi	888af8 <_Min_Stack_Size+0x8886f8>
    8af4:	01000027 	tsteq	r0, r7, lsr #32
    8af8:	00b401cf 	adcseq	r0, r4, pc, asr #3
    8afc:	5af90000 	bpl	ffe48b04 <_estack+0xdfe18b04>
    8b00:	4b220000 	blmi	888b08 <_Min_Stack_Size+0x888708>
    8b04:	01000027 	tsteq	r0, r7, lsr #32
    8b08:	00b401cf 	adcseq	r0, r4, pc, asr #3
    8b0c:	5b1a0000 	blpl	688b14 <_Min_Stack_Size+0x688714>
    8b10:	6a220000 	bvs	888b18 <_Min_Stack_Size+0x888718>
    8b14:	01000027 	tsteq	r0, r7, lsr #32
    8b18:	00b401cf 	adcseq	r0, r4, pc, asr #3
    8b1c:	5b3b0000 	blpl	ec8b24 <_Min_Stack_Size+0xec8724>
    8b20:	6f220000 	svcvs	0x00220000
    8b24:	01000027 	tsteq	r0, r7, lsr #32
    8b28:	00b401cf 	adcseq	r0, r4, pc, asr #3
    8b2c:	5b5c0000 	blpl	1708b34 <_Min_Stack_Size+0x1708734>
    8b30:	16000000 	strne	r0, [r0], -r0
    8b34:	00002b84 	andeq	r2, r0, r4, lsl #23
    8b38:	8801e601 	stmdahi	r1, {r0, r9, sl, sp, lr, pc}
    8b3c:	0c080038 	stceq	0, cr0, [r8], {56}	; 0x38
    8b40:	01000000 	mrseq	r0, (UNDEF: 0)
    8b44:	0005b69c 	muleq	r5, ip, r6
    8b48:	23461700 	movtcs	r1, #26368	; 0x6700
    8b4c:	e6010000 	str	r0, [r1], -r0
    8b50:	00012401 	andeq	r2, r1, r1, lsl #8
    8b54:	00500100 	subseq	r0, r0, r0, lsl #2
    8b58:	0029a316 	eoreq	sl, r9, r6, lsl r3
    8b5c:	02280100 	eoreq	r0, r8, #0, 2
    8b60:	08003894 	stmdaeq	r0, {r2, r4, r7, fp, ip, sp}
    8b64:	00000018 	andeq	r0, r0, r8, lsl r0
    8b68:	05fd9c01 	ldrbeq	r9, [sp, #3073]!	; 0xc01
    8b6c:	35220000 	strcc	r0, [r2, #-0]!
    8b70:	0100002c 	tsteq	r0, ip, lsr #32
    8b74:	00b40228 	adcseq	r0, r4, r8, lsr #4
    8b78:	5b700000 	blpl	1c08b80 <_Min_Stack_Size+0x1c08780>
    8b7c:	71220000 	teqvc	r2, r0
    8b80:	0100002c 	tsteq	r0, ip, lsr #32
    8b84:	00b40228 	adcseq	r0, r4, r8, lsr #4
    8b88:	5b910000 	blpl	fe448b90 <_estack+0xde418b90>
    8b8c:	79220000 	stmdbvc	r2!, {}	; <UNPREDICTABLE>
    8b90:	0100002c 	tsteq	r0, ip, lsr #32
    8b94:	00b40228 	adcseq	r0, r4, r8, lsr #4
    8b98:	5bb20000 	blpl	fec88ba0 <_estack+0xdec58ba0>
    8b9c:	16000000 	strne	r0, [r0], -r0
    8ba0:	0000291e 	andeq	r2, r0, lr, lsl r9
    8ba4:	ac023901 	stcge	9, cr3, [r2], {1}
    8ba8:	0c080038 	stceq	0, cr0, [r8], {56}	; 0x38
    8bac:	01000000 	mrseq	r0, (UNDEF: 0)
    8bb0:	0006229c 	muleq	r6, ip, r2
    8bb4:	23461700 	movtcs	r1, #26368	; 0x6700
    8bb8:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    8bbc:	00012402 	andeq	r2, r1, r2, lsl #8
    8bc0:	00500100 	subseq	r0, r0, r0, lsl #2
    8bc4:	002a5316 	eoreq	r5, sl, r6, lsl r3
    8bc8:	02560100 	subseq	r0, r6, #0, 2
    8bcc:	080038b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, ip, sp}
    8bd0:	00000018 	andeq	r0, r0, r8, lsl r0
    8bd4:	06699c01 	strbteq	r9, [r9], -r1, lsl #24
    8bd8:	58220000 	stmdapl	r2!, {}	; <UNPREDICTABLE>
    8bdc:	0100002b 	tsteq	r0, fp, lsr #32
    8be0:	00b40256 	adcseq	r0, r4, r6, asr r2
    8be4:	5bd30000 	blpl	ff4c8bec <_estack+0xdf498bec>
    8be8:	60220000 	eorvs	r0, r2, r0
    8bec:	0100002b 	tsteq	r0, fp, lsr #32
    8bf0:	00b40256 	adcseq	r0, r4, r6, asr r2
    8bf4:	5bf40000 	blpl	ffd08bfc <_estack+0xdfcd8bfc>
    8bf8:	68220000 	stmdavs	r2!, {}	; <UNPREDICTABLE>
    8bfc:	0100002b 	tsteq	r0, fp, lsr #32
    8c00:	00b40256 	adcseq	r0, r4, r6, asr r2
    8c04:	5c150000 	ldcpl	0, cr0, [r5], {-0}
    8c08:	16000000 	strne	r0, [r0], -r0
    8c0c:	000026de 	ldrdeq	r2, [r0], -lr
    8c10:	d0026801 	andle	r6, r2, r1, lsl #16
    8c14:	0c080038 	stceq	0, cr0, [r8], {56}	; 0x38
    8c18:	01000000 	mrseq	r0, (UNDEF: 0)
    8c1c:	00068e9c 	muleq	r6, ip, lr
    8c20:	23461700 	movtcs	r1, #26368	; 0x6700
    8c24:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    8c28:	00012402 	andeq	r2, r1, r2, lsl #8
    8c2c:	00500100 	subseq	r0, r0, r0, lsl #2
    8c30:	002a2916 	eoreq	r2, sl, r6, lsl r9
    8c34:	027a0100 	rsbseq	r0, sl, #0, 2
    8c38:	080038dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip, sp}
    8c3c:	0000000c 	andeq	r0, r0, ip
    8c40:	06b39c01 	ldrteq	r9, [r3], r1, lsl #24
    8c44:	46170000 	ldrmi	r0, [r7], -r0
    8c48:	01000023 	tsteq	r0, r3, lsr #32
    8c4c:	0124027a 	teqeq	r4, sl, ror r2
    8c50:	50010000 	andpl	r0, r1, r0
    8c54:	29041600 	stmdbcs	r4, {r9, sl, ip}
    8c58:	93010000 	movwls	r0, #4096	; 0x1000
    8c5c:	0038e802 	eorseq	lr, r8, r2, lsl #16
    8c60:	00001408 	andeq	r1, r0, r8, lsl #8
    8c64:	fa9c0100 	blx	fe70906c <_estack+0xde6d906c>
    8c68:	22000006 	andcs	r0, r0, #6
    8c6c:	00002725 	andeq	r2, r0, r5, lsr #14
    8c70:	b4029301 	strlt	r9, [r2], #-769	; 0x301
    8c74:	36000000 	strcc	r0, [r0], -r0
    8c78:	2200005c 	andcs	r0, r0, #92	; 0x5c
    8c7c:	00002a64 	andeq	r2, r0, r4, ror #20
    8c80:	b4029301 	strlt	r9, [r2], #-769	; 0x301
    8c84:	57000000 	strpl	r0, [r0, -r0]
    8c88:	1a00005c 	bne	8e00 <_Min_Stack_Size+0x8a00>
    8c8c:	000027db 	ldrdeq	r2, [r0], -fp
    8c90:	b4029501 	strlt	r9, [r2], #-1281	; 0x501
    8c94:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    8c98:	0000005c 	andeq	r0, r0, ip, asr r0
    8c9c:	002cf216 	eoreq	pc, ip, r6, lsl r2	; <UNPREDICTABLE>
    8ca0:	02b90100 	adcseq	r0, r9, #0, 2
    8ca4:	080038fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, sp}
    8ca8:	00000014 	andeq	r0, r0, r4, lsl r0
    8cac:	07419c01 	strbeq	r9, [r1, -r1, lsl #24]
    8cb0:	87220000 	strhi	r0, [r2, -r0]!
    8cb4:	0100002a 	tsteq	r0, sl, lsr #32
    8cb8:	00b402b9 	ldrhteq	r0, [r4], r9
    8cbc:	5cb50000 	ldcpl	0, cr0, [r5]
    8cc0:	ef220000 	svc	0x00220000
    8cc4:	01000029 	tsteq	r0, r9, lsr #32
    8cc8:	00b402b9 	ldrhteq	r0, [r4], r9
    8ccc:	5cd60000 	ldclpl	0, cr0, [r6], {0}
    8cd0:	db1a0000 	blle	688cd8 <_Min_Stack_Size+0x6888d8>
    8cd4:	01000027 	tsteq	r0, r7, lsr #32
    8cd8:	00b402bb 	ldrhteq	r0, [r4], fp
    8cdc:	5cf70000 	ldclpl	0, cr0, [r7]
    8ce0:	16000000 	strne	r0, [r0], -r0
    8ce4:	00002856 	andeq	r2, r0, r6, asr r8
    8ce8:	10035f01 	andne	r5, r3, r1, lsl #30
    8cec:	14080039 	strne	r0, [r8], #-57	; 0x39
    8cf0:	01000000 	mrseq	r0, (UNDEF: 0)
    8cf4:	0007789c 	muleq	r7, ip, r8
    8cf8:	2bd32200 	blcs	ff4d1500 <_estack+0xdf4a1500>
    8cfc:	5f010000 	svcpl	0x00010000
    8d00:	0000b403 	andeq	fp, r0, r3, lsl #8
    8d04:	005d3400 	subseq	r3, sp, r0, lsl #8
    8d08:	27db1a00 	ldrbcs	r1, [fp, r0, lsl #20]
    8d0c:	61010000 	mrsvs	r0, (UNDEF: 1)
    8d10:	0000b403 	andeq	fp, r0, r3, lsl #8
    8d14:	005d5500 	subseq	r5, sp, r0, lsl #10
    8d18:	ab230000 	blge	8c8d20 <_Min_Stack_Size+0x8c8920>
    8d1c:	01000028 	tsteq	r0, r8, lsr #32
    8d20:	0093037b 	addseq	r0, r3, fp, ror r3
    8d24:	39240000 	stmdbcc	r4!, {}	; <UNPREDICTABLE>
    8d28:	00100800 	andseq	r0, r0, r0, lsl #16
    8d2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8d30:	00284716 	eoreq	r4, r8, r6, lsl r7
    8d34:	03940100 	orrseq	r0, r4, #0, 2
    8d38:	08003934 	stmdaeq	r0, {r2, r4, r5, r8, fp, ip, sp}
    8d3c:	00000014 	andeq	r0, r0, r4, lsl r0
    8d40:	07c59c01 	strbeq	r9, [r5, r1, lsl #24]
    8d44:	13220000 	teqne	r2, #0
    8d48:	01000029 	tsteq	r0, r9, lsr #32
    8d4c:	00b40394 	umlalseq	r0, r4, r4, r3
    8d50:	5d7f0000 	ldclpl	0, cr0, [pc, #-0]	; 8d58 <_Min_Stack_Size+0x8958>
    8d54:	db1a0000 	blle	688d5c <_Min_Stack_Size+0x68895c>
    8d58:	01000027 	tsteq	r0, r7, lsr #32
    8d5c:	00b40396 	umlalseq	r0, r4, r6, r3
    8d60:	5da00000 	stcpl	0, cr0, [r0]
    8d64:	16000000 	strne	r0, [r0], -r0
    8d68:	00002809 	andeq	r2, r0, r9, lsl #16
    8d6c:	4803b401 	stmdami	r3, {r0, sl, ip, sp, pc}
    8d70:	14080039 	strne	r0, [r8], #-57	; 0x39
    8d74:	01000000 	mrseq	r0, (UNDEF: 0)
    8d78:	0007fc9c 	muleq	r7, ip, ip
    8d7c:	26cd2200 	strbcs	r2, [sp], r0, lsl #4
    8d80:	b4010000 	strlt	r0, [r1], #-0
    8d84:	0000b403 	andeq	fp, r0, r3, lsl #8
    8d88:	005dca00 	subseq	ip, sp, r0, lsl #20
    8d8c:	27db1a00 	ldrbcs	r1, [fp, r0, lsl #20]
    8d90:	b6010000 	strlt	r0, [r1], -r0
    8d94:	0000b403 	andeq	fp, r0, r3, lsl #8
    8d98:	005deb00 	subseq	lr, sp, r0, lsl #22
    8d9c:	c3160000 	tstgt	r6, #0
    8da0:	0100002b 	tsteq	r0, fp, lsr #32
    8da4:	395c03d3 	ldmdbcc	ip, {r0, r1, r4, r6, r7, r8, r9}^
    8da8:	00140800 	andseq	r0, r4, r0, lsl #16
    8dac:	9c010000 	stcls	0, cr0, [r1], {-0}
    8db0:	00000833 	andeq	r0, r0, r3, lsr r8
    8db4:	0026cd22 	eoreq	ip, r6, r2, lsr #26
    8db8:	03d30100 	bicseq	r0, r3, #0, 2
    8dbc:	000000b4 	strheq	r0, [r0], -r4
    8dc0:	00005e15 	andeq	r5, r0, r5, lsl lr
    8dc4:	0027db1a 	eoreq	sp, r7, sl, lsl fp
    8dc8:	03d50100 	bicseq	r0, r5, #0, 2
    8dcc:	000000b4 	strheq	r0, [r0], -r4
    8dd0:	00005e36 	andeq	r5, r0, r6, lsr lr
    8dd4:	2c3d1600 	ldccs	6, cr1, [sp], #-0
    8dd8:	07010000 	streq	r0, [r1, -r0]
    8ddc:	00397004 	eorseq	r7, r9, r4
    8de0:	00009008 	andeq	r9, r0, r8
    8de4:	b89c0100 	ldmlt	ip, {r8}
    8de8:	17000008 	strne	r0, [r0, -r8]
    8dec:	0000279e 	muleq	r0, lr, r7
    8df0:	b8040701 	stmdalt	r4, {r0, r8, r9, sl}
    8df4:	01000008 	tsteq	r0, r8
    8df8:	6d742450 	cfldrdvs	mvd2, [r4, #-320]!	; 0xfffffec0
    8dfc:	09010070 	stmdbeq	r1, {r4, r5, r6}
    8e00:	0000b404 	andeq	fp, r0, r4, lsl #8
    8e04:	005e6000 	subseq	r6, lr, r0
    8e08:	292c1a00 	stmdbcs	ip!, {r9, fp, ip}
    8e0c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    8e10:	0000b404 	andeq	fp, r0, r4, lsl #8
    8e14:	005ef700 	subseq	pc, lr, r0, lsl #14
    8e18:	06651a00 	strbteq	r1, [r5], -r0, lsl #20
    8e1c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    8e20:	0000b404 	andeq	fp, r0, r4, lsl #8
    8e24:	005f4700 	subseq	r4, pc, r0, lsl #14
    8e28:	060c1a00 	streq	r1, [ip], -r0, lsl #20
    8e2c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    8e30:	0000b404 	andeq	fp, r0, r4, lsl #8
    8e34:	005f7200 	subseq	r7, pc, r0, lsl #4
    8e38:	05f51a00 	ldrbeq	r1, [r5, #2560]!	; 0xa00
    8e3c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    8e40:	0000b404 	andeq	fp, r0, r4, lsl #8
    8e44:	005fa900 	subseq	sl, pc, r0, lsl #18
    8e48:	06071a00 	streq	r1, [r7], -r0, lsl #20
    8e4c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    8e50:	0000b404 	andeq	fp, r0, r4, lsl #8
    8e54:	005fdc00 	subseq	sp, pc, r0, lsl #24
    8e58:	04250000 	strteq	r0, [r5], #-0
    8e5c:	00000340 	andeq	r0, r0, r0, asr #6
    8e60:	0028f316 	eoreq	pc, r8, r6, lsl r3	; <UNPREDICTABLE>
    8e64:	04840100 	streq	r0, [r4], #256	; 0x100
    8e68:	08003a00 	stmdaeq	r0, {r9, fp, ip, sp}
    8e6c:	00000030 	andeq	r0, r0, r0, lsr r0
    8e70:	08f59c01 	ldmeq	r5!, {r0, sl, fp, ip, pc}^
    8e74:	32220000 	eorcc	r0, r2, #0
    8e78:	01000029 	tsteq	r0, r9, lsr #32
    8e7c:	00b40484 	adcseq	r0, r4, r4, lsl #9
    8e80:	60070000 	andvs	r0, r7, r0
    8e84:	db1a0000 	blle	688e8c <_Min_Stack_Size+0x688a8c>
    8e88:	01000027 	tsteq	r0, r7, lsr #32
    8e8c:	00b40486 	adcseq	r0, r4, r6, lsl #9
    8e90:	60280000 	eorvs	r0, r8, r0
    8e94:	16000000 	strne	r0, [r0], -r0
    8e98:	00002a15 	andeq	r2, r0, r5, lsl sl
    8e9c:	3004a401 	andcc	sl, r4, r1, lsl #8
    8ea0:	0c08003a 	stceq	0, cr0, [r8], {58}	; 0x3a
    8ea4:	01000000 	mrseq	r0, (UNDEF: 0)
    8ea8:	00091a9c 	muleq	r9, ip, sl
    8eac:	23461700 	movtcs	r1, #26368	; 0x6700
    8eb0:	a4010000 	strge	r0, [r1], #-0
    8eb4:	00012404 	andeq	r2, r1, r4, lsl #8
    8eb8:	00500100 	subseq	r0, r0, r0, lsl #2
    8ebc:	00287e16 	eoreq	r7, r8, r6, lsl lr
    8ec0:	04b50100 	ldrteq	r0, [r5], #256	; 0x100
    8ec4:	08003a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, ip, sp}
    8ec8:	0000000c 	andeq	r0, r0, ip
    8ecc:	093f9c01 	ldmdbeq	pc!, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
    8ed0:	46170000 	ldrmi	r0, [r7], -r0
    8ed4:	01000023 	tsteq	r0, r3, lsr #32
    8ed8:	012404b5 			; <UNDEFINED> instruction: 0x012404b5
    8edc:	50010000 	andpl	r0, r1, r0
    8ee0:	2ce11600 	stclcs	6, cr1, [r1]
    8ee4:	c6010000 	strgt	r0, [r1], -r0
    8ee8:	003a4804 	eorseq	r4, sl, r4, lsl #16
    8eec:	00000c08 	andeq	r0, r0, r8, lsl #24
    8ef0:	649c0100 	ldrvs	r0, [ip], #256	; 0x100
    8ef4:	17000009 	strne	r0, [r0, -r9]
    8ef8:	00002a96 	muleq	r0, r6, sl
    8efc:	b404c601 	strlt	ip, [r4], #-1537	; 0x601
    8f00:	01000000 	mrseq	r0, (UNDEF: 0)
    8f04:	fb160050 	blx	58904e <_Min_Stack_Size+0x588c4e>
    8f08:	01000029 	tsteq	r0, r9, lsr #32
    8f0c:	3a5404db 	bcc	150a280 <_Min_Stack_Size+0x1509e80>
    8f10:	00180800 	andseq	r0, r8, r0, lsl #16
    8f14:	9c010000 	stcls	0, cr0, [r1], {-0}
    8f18:	0000099b 	muleq	r0, fp, r9
    8f1c:	002a4422 	eoreq	r4, sl, r2, lsr #8
    8f20:	04db0100 	ldrbeq	r0, [fp], #256	; 0x100
    8f24:	000000b4 	strheq	r0, [r0], -r4
    8f28:	00006052 	andeq	r6, r0, r2, asr r0
    8f2c:	0027db1a 	eoreq	sp, r7, sl, lsl fp
    8f30:	04dd0100 	ldrbeq	r0, [sp], #256	; 0x100
    8f34:	000000b4 	strheq	r0, [r0], -r4
    8f38:	00006072 	andeq	r6, r0, r2, ror r0
    8f3c:	27501600 	ldrbcs	r1, [r0, -r0, lsl #12]
    8f40:	fb010000 	blx	48f4a <_Min_Stack_Size+0x48b4a>
    8f44:	003a6c04 	eorseq	r6, sl, r4, lsl #24
    8f48:	00001c08 	andeq	r1, r0, r8, lsl #24
    8f4c:	d29c0100 	addsle	r0, ip, #0, 2
    8f50:	22000009 	andcs	r0, r0, #9
    8f54:	000026ec 	andeq	r2, r0, ip, ror #13
    8f58:	b404fb01 	strlt	pc, [r4], #-2817	; 0xb01
    8f5c:	91000000 	mrsls	r0, (UNDEF: 0)
    8f60:	1a000060 	bne	90e8 <_Min_Stack_Size+0x8ce8>
    8f64:	000027db 	ldrdeq	r2, [r0], -fp
    8f68:	b404fd01 	strlt	pc, [r4], #-3329	; 0xd01
    8f6c:	b1000000 	mrslt	r0, (UNDEF: 0)
    8f70:	00000060 	andeq	r0, r0, r0, rrx
    8f74:	00283016 	eoreq	r3, r8, r6, lsl r0
    8f78:	051f0100 	ldreq	r0, [pc, #-256]	; 8e80 <_Min_Stack_Size+0x8a80>
    8f7c:	08003a88 	stmdaeq	r0, {r3, r7, r9, fp, ip, sp}
    8f80:	00000018 	andeq	r0, r0, r8, lsl r0
    8f84:	0a099c01 	beq	26ff90 <_Min_Stack_Size+0x26fb90>
    8f88:	43220000 	teqmi	r2, #0
    8f8c:	01000029 	tsteq	r0, r9, lsr #32
    8f90:	00b4051f 	adcseq	r0, r4, pc, lsl r5
    8f94:	60d00000 	sbcsvs	r0, r0, r0
    8f98:	db1a0000 	blle	688fa0 <_Min_Stack_Size+0x688ba0>
    8f9c:	01000027 	tsteq	r0, r7, lsr #32
    8fa0:	00b40521 	adcseq	r0, r4, r1, lsr #10
    8fa4:	60f10000 	rscsvs	r0, r1, r0
    8fa8:	16000000 	strne	r0, [r0], -r0
    8fac:	00002b41 	andeq	r2, r0, r1, asr #22
    8fb0:	a0054301 	andge	r4, r5, r1, lsl #6
    8fb4:	1808003a 	stmdane	r8, {r1, r3, r4, r5}
    8fb8:	01000000 	mrseq	r0, (UNDEF: 0)
    8fbc:	000a409c 	muleq	sl, ip, r0
    8fc0:	295a2200 	ldmdbcs	sl, {r9, sp}^
    8fc4:	43010000 	movwmi	r0, #4096	; 0x1000
    8fc8:	0000b405 	andeq	fp, r0, r5, lsl #8
    8fcc:	00611b00 	rsbeq	r1, r1, r0, lsl #22
    8fd0:	27db1a00 	ldrbcs	r1, [fp, r0, lsl #20]
    8fd4:	45010000 	strmi	r0, [r1, #-0]
    8fd8:	0000b405 	andeq	fp, r0, r5, lsl #8
    8fdc:	00613c00 	rsbeq	r3, r1, r0, lsl #24
    8fe0:	71160000 	tstvc	r6, r0
    8fe4:	01000029 	tsteq	r0, r9, lsr #32
    8fe8:	3ab80564 	bcc	fee0a580 <_estack+0xdedda580>
    8fec:	00180800 	andseq	r0, r8, r0, lsl #16
    8ff0:	9c010000 	stcls	0, cr0, [r1], {-0}
    8ff4:	00000a77 	andeq	r0, r0, r7, ror sl
    8ff8:	0026fb22 	eoreq	pc, r6, r2, lsr #22
    8ffc:	05640100 	strbeq	r0, [r4, #-256]!	; 0x100
    9000:	000000b4 	strheq	r0, [r0], -r4
    9004:	00006166 	andeq	r6, r0, r6, ror #2
    9008:	0027db1a 	eoreq	sp, r7, sl, lsl fp
    900c:	05660100 	strbeq	r0, [r6, #-256]!	; 0x100
    9010:	000000b4 	strheq	r0, [r0], -r4
    9014:	00006187 	andeq	r6, r0, r7, lsl #3
    9018:	2ccc1600 	stclcs	6, cr1, [ip], {0}
    901c:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    9020:	003ad005 	eorseq	sp, sl, r5
    9024:	00000c08 	andeq	r0, r0, r8, lsl #24
    9028:	9c9c0100 	ldflss	f0, [ip], {0}
    902c:	1700000a 	strne	r0, [r0, -sl]
    9030:	00002b70 	andeq	r2, r0, r0, ror fp
    9034:	b4058901 	strlt	r8, [r5], #-2305	; 0x901
    9038:	01000000 	mrseq	r0, (UNDEF: 0)
    903c:	7b160050 	blvc	589184 <_Min_Stack_Size+0x588d84>
    9040:	01000002 	tsteq	r0, r2
    9044:	3adc05b4 	bcc	ff70a71c <_estack+0xdf6da71c>
    9048:	00180800 	andseq	r0, r8, r0, lsl #16
    904c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9050:	00000ad1 	ldrdeq	r0, [r0], -r1
    9054:	00278f22 	eoreq	r8, r7, r2, lsr #30
    9058:	05b40100 	ldreq	r0, [r4, #256]!	; 0x100
    905c:	000000b4 	strheq	r0, [r0], -r4
    9060:	000061b1 			; <UNDEFINED> instruction: 0x000061b1
    9064:	00234617 	eoreq	r4, r3, r7, lsl r6
    9068:	05b40100 	ldreq	r0, [r4, #256]!	; 0x100
    906c:	00000124 	andeq	r0, r0, r4, lsr #2
    9070:	16005101 	strne	r5, [r0], -r1, lsl #2
    9074:	000027f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    9078:	f405d401 	vst3.8	{d13-d15}, [r5], r1
    907c:	1808003a 	stmdane	r8, {r1, r3, r4, r5}
    9080:	01000000 	mrseq	r0, (UNDEF: 0)
    9084:	000b069c 	muleq	fp, ip, r6
    9088:	29bf2200 	ldmibcs	pc!, {r9, sp}	; <UNPREDICTABLE>
    908c:	d4010000 	strle	r0, [r1], #-0
    9090:	0000b405 	andeq	fp, r0, r5, lsl #8
    9094:	0061eb00 	rsbeq	lr, r1, r0, lsl #22
    9098:	23461700 	movtcs	r1, #26368	; 0x6700
    909c:	d4010000 	strle	r0, [r1], #-0
    90a0:	00012405 	andeq	r2, r1, r5, lsl #8
    90a4:	00510100 	subseq	r0, r1, r0, lsl #2
    90a8:	002d7516 	eoreq	r7, sp, r6, lsl r5
    90ac:	05f00100 	ldrbeq	r0, [r0, #256]!	; 0x100
    90b0:	08003b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, ip, sp}
    90b4:	00000018 	andeq	r0, r0, r8, lsl r0
    90b8:	0b3b9c01 	bleq	ef00c4 <_Min_Stack_Size+0xeefcc4>
    90bc:	e0220000 	eor	r0, r2, r0
    90c0:	01000029 	tsteq	r0, r9, lsr #32
    90c4:	00b405f0 	ldrshteq	r0, [r4], r0
    90c8:	62250000 	eorvs	r0, r5, #0
    90cc:	46170000 	ldrmi	r0, [r7], -r0
    90d0:	01000023 	tsteq	r0, r3, lsr #32
    90d4:	012405f0 	strdeq	r0, [r4, -r0]!	; <UNPREDICTABLE>
    90d8:	51010000 	mrspl	r0, (UNDEF: 1)
    90dc:	2d0c1600 	stccs	6, cr1, [ip, #-0]
    90e0:	24010000 	strcs	r0, [r1], #-0
    90e4:	003b2406 	eorseq	r2, fp, r6, lsl #8
    90e8:	00001808 	andeq	r1, r0, r8, lsl #16
    90ec:	709c0100 	addsvc	r0, ip, r0, lsl #2
    90f0:	2200000b 	andcs	r0, r0, #11
    90f4:	000028e4 	andeq	r2, r0, r4, ror #17
    90f8:	b4062401 	strlt	r2, [r6], #-1025	; 0x401
    90fc:	5f000000 	svcpl	0x00000000
    9100:	17000062 	strne	r0, [r0, -r2, rrx]
    9104:	00002346 	andeq	r2, r0, r6, asr #6
    9108:	24062401 	strcs	r2, [r6], #-1025	; 0x401
    910c:	01000001 	tsteq	r0, r1
    9110:	4f160051 	svcmi	0x00160051
    9114:	0100002c 	tsteq	r0, ip, lsr #32
    9118:	3b3c0651 	blcc	f0aa64 <_Min_Stack_Size+0xf0a664>
    911c:	00180800 	andseq	r0, r8, r0, lsl #16
    9120:	9c010000 	stcls	0, cr0, [r1], {-0}
    9124:	00000ba5 	andeq	r0, r0, r5, lsr #23
    9128:	002cbd22 	eoreq	fp, ip, r2, lsr #26
    912c:	06510100 	ldrbeq	r0, [r1], -r0, lsl #2
    9130:	000000b4 	strheq	r0, [r0], -r4
    9134:	00006299 	muleq	r0, r9, r2
    9138:	00234617 	eoreq	r4, r3, r7, lsl r6
    913c:	06510100 	ldrbeq	r0, [r1], -r0, lsl #2
    9140:	00000124 	andeq	r0, r0, r4, lsr #2
    9144:	16005101 	strne	r5, [r0], -r1, lsl #2
    9148:	0000261a 	andeq	r2, r0, sl, lsl r6
    914c:	54067b01 	strpl	r7, [r6], #-2817	; 0xb01
    9150:	1808003b 	stmdane	r8, {r0, r1, r3, r4, r5}
    9154:	01000000 	mrseq	r0, (UNDEF: 0)
    9158:	000bda9c 	muleq	fp, ip, sl
    915c:	278f2200 	strcs	r2, [pc, r0, lsl #4]
    9160:	7b010000 	blvc	49168 <_Min_Stack_Size+0x48d68>
    9164:	0000b406 	andeq	fp, r0, r6, lsl #8
    9168:	0062d300 	rsbeq	sp, r2, r0, lsl #6
    916c:	23461700 	movtcs	r1, #26368	; 0x6700
    9170:	7b010000 	blvc	49178 <_Min_Stack_Size+0x48d78>
    9174:	00012406 	andeq	r2, r1, r6, lsl #8
    9178:	00510100 	subseq	r0, r1, r0, lsl #2
    917c:	002b8f16 	eoreq	r8, fp, r6, lsl pc
    9180:	06980100 	ldreq	r0, [r8], r0, lsl #2
    9184:	08003b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp, ip, sp}
    9188:	00000018 	andeq	r0, r0, r8, lsl r0
    918c:	0c0f9c01 	stceq	12, cr9, [pc], {1}
    9190:	bf220000 	svclt	0x00220000
    9194:	01000029 	tsteq	r0, r9, lsr #32
    9198:	00b40698 	umlalseq	r0, r4, r8, r6
    919c:	630d0000 	movwvs	r0, #53248	; 0xd000
    91a0:	46170000 	ldrmi	r0, [r7], -r0
    91a4:	01000023 	tsteq	r0, r3, lsr #32
    91a8:	01240698 			; <UNDEFINED> instruction: 0x01240698
    91ac:	51010000 	mrspl	r0, (UNDEF: 1)
    91b0:	28191600 	ldmdacs	r9, {r9, sl, ip}
    91b4:	b1010000 	mrslt	r0, (UNDEF: 1)
    91b8:	003b8406 	eorseq	r8, fp, r6, lsl #8
    91bc:	00001808 	andeq	r1, r0, r8, lsl #16
    91c0:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    91c4:	2200000c 	andcs	r0, r0, #12
    91c8:	000029e0 	andeq	r2, r0, r0, ror #19
    91cc:	b406b101 	strlt	fp, [r6], #-257	; 0x101
    91d0:	47000000 	strmi	r0, [r0, -r0]
    91d4:	17000063 	strne	r0, [r0, -r3, rrx]
    91d8:	00002346 	andeq	r2, r0, r6, asr #6
    91dc:	2406b101 	strcs	fp, [r6], #-257	; 0x101
    91e0:	01000001 	tsteq	r0, r1
    91e4:	34160051 	ldrcc	r0, [r6], #-81	; 0x51
    91e8:	01000027 	tsteq	r0, r7, lsr #32
    91ec:	3b9c06e2 	blcc	fe70ad7c <_estack+0xde6dad7c>
    91f0:	00180800 	andseq	r0, r8, r0, lsl #16
    91f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    91f8:	00000c79 	andeq	r0, r0, r9, ror ip
    91fc:	0028e422 	eoreq	lr, r8, r2, lsr #8
    9200:	06e20100 	strbteq	r0, [r2], r0, lsl #2
    9204:	000000b4 	strheq	r0, [r0], -r4
    9208:	00006381 	andeq	r6, r0, r1, lsl #7
    920c:	00234617 	eoreq	r4, r3, r7, lsl r6
    9210:	06e20100 	strbteq	r0, [r2], r0, lsl #2
    9214:	00000124 	andeq	r0, r0, r4, lsr #2
    9218:	16005101 	strne	r5, [r0], -r1, lsl #2
    921c:	00002a70 	andeq	r2, r0, r0, ror sl
    9220:	b4070b01 	strlt	r0, [r7], #-2817	; 0xb01
    9224:	1808003b 	stmdane	r8, {r0, r1, r3, r4, r5}
    9228:	01000000 	mrseq	r0, (UNDEF: 0)
    922c:	000cae9c 	muleq	ip, ip, lr
    9230:	2cbd2200 	lfmcs	f2, 4, [sp]
    9234:	0b010000 	bleq	4923c <_Min_Stack_Size+0x48e3c>
    9238:	0000b407 	andeq	fp, r0, r7, lsl #8
    923c:	0063bb00 	rsbeq	fp, r3, r0, lsl #22
    9240:	23461700 	movtcs	r1, #26368	; 0x6700
    9244:	0b010000 	bleq	4924c <_Min_Stack_Size+0x48e4c>
    9248:	00012407 	andeq	r2, r1, r7, lsl #8
    924c:	00510100 	subseq	r0, r1, r0, lsl #2
    9250:	002d5816 	eoreq	r5, sp, r6, lsl r8
    9254:	073c0100 	ldreq	r0, [ip, -r0, lsl #2]!
    9258:	08003bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, ip, sp}
    925c:	00000018 	andeq	r0, r0, r8, lsl r0
    9260:	0ce39c01 	stcleq	12, cr9, [r3], #4
    9264:	8f220000 	svchi	0x00220000
    9268:	01000027 	tsteq	r0, r7, lsr #32
    926c:	00b4073c 	adcseq	r0, r4, ip, lsr r7
    9270:	63f50000 	mvnsvs	r0, #0
    9274:	46170000 	ldrmi	r0, [r7], -r0
    9278:	01000023 	tsteq	r0, r3, lsr #32
    927c:	0124073c 	teqeq	r4, ip, lsr r7
    9280:	51010000 	mrspl	r0, (UNDEF: 1)
    9284:	29861600 	stmibcs	r6, {r9, sl, ip}
    9288:	5c010000 	stcpl	0, cr0, [r1], {-0}
    928c:	003be407 	eorseq	lr, fp, r7, lsl #8
    9290:	00001808 	andeq	r1, r0, r8, lsl #16
    9294:	189c0100 	ldmne	ip, {r8}
    9298:	2200000d 	andcs	r0, r0, #13
    929c:	000029bf 			; <UNDEFINED> instruction: 0x000029bf
    92a0:	b4075c01 	strlt	r5, [r7], #-3073	; 0xc01
    92a4:	2f000000 	svccs	0x00000000
    92a8:	17000064 	strne	r0, [r0, -r4, rrx]
    92ac:	00002346 	andeq	r2, r0, r6, asr #6
    92b0:	24075c01 	strcs	r5, [r7], #-3073	; 0xc01
    92b4:	01000001 	tsteq	r0, r1
    92b8:	91160051 	tstls	r6, r1, asr r0
    92bc:	0100002c 	tsteq	r0, ip, lsr #32
    92c0:	3bfc0778 	blcc	fff0b0a8 <_estack+0xdfedb0a8>
    92c4:	00180800 	andseq	r0, r8, r0, lsl #16
    92c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    92cc:	00000d4d 	andeq	r0, r0, sp, asr #26
    92d0:	0029e022 	eoreq	lr, r9, r2, lsr #32
    92d4:	07780100 	ldrbeq	r0, [r8, -r0, lsl #2]!
    92d8:	000000b4 	strheq	r0, [r0], -r4
    92dc:	00006469 	andeq	r6, r0, r9, ror #8
    92e0:	00234617 	eoreq	r4, r3, r7, lsl r6
    92e4:	07780100 	ldrbeq	r0, [r8, -r0, lsl #2]!
    92e8:	00000124 	andeq	r0, r0, r4, lsr #2
    92ec:	16005101 	strne	r5, [r0], -r1, lsl #2
    92f0:	00002ba6 	andeq	r2, r0, r6, lsr #23
    92f4:	1407ac01 	strne	sl, [r7], #-3073	; 0xc01
    92f8:	1808003c 	stmdane	r8, {r2, r3, r4, r5}
    92fc:	01000000 	mrseq	r0, (UNDEF: 0)
    9300:	000d829c 	muleq	sp, ip, r2
    9304:	28e42200 	stmiacs	r4!, {r9, sp}^
    9308:	ac010000 	stcge	0, cr0, [r1], {-0}
    930c:	0000b407 	andeq	fp, r0, r7, lsl #8
    9310:	0064a300 	rsbeq	sl, r4, r0, lsl #6
    9314:	23461700 	movtcs	r1, #26368	; 0x6700
    9318:	ac010000 	stcge	0, cr0, [r1], {-0}
    931c:	00012407 	andeq	r2, r1, r7, lsl #8
    9320:	00510100 	subseq	r0, r1, r0, lsl #2
    9324:	0027a916 	eoreq	sl, r7, r6, lsl r9
    9328:	07d90100 	ldrbeq	r0, [r9, r0, lsl #2]
    932c:	08003c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, ip, sp}
    9330:	00000018 	andeq	r0, r0, r8, lsl r0
    9334:	0db79c01 	ldceq	12, cr9, [r7, #4]!
    9338:	bd220000 	stclt	0, cr0, [r2, #-0]
    933c:	0100002c 	tsteq	r0, ip, lsr #32
    9340:	00b407d9 	ldrsbteq	r0, [r4], r9
    9344:	64dd0000 	ldrbvs	r0, [sp], #0
    9348:	46170000 	ldrmi	r0, [r7], -r0
    934c:	01000023 	tsteq	r0, r3, lsr #32
    9350:	012407d9 	ldrdeq	r0, [r4, -r9]!
    9354:	51010000 	mrspl	r0, (UNDEF: 1)
    9358:	2d231600 	stccs	6, cr1, [r3, #-0]
    935c:	07010000 	streq	r0, [r1, -r0]
    9360:	003c4408 	eorseq	r4, ip, r8, lsl #8
    9364:	00001808 	andeq	r1, r0, r8, lsl #16
    9368:	ec9c0100 	ldfs	f0, [ip], {0}
    936c:	2200000d 	andcs	r0, r0, #13
    9370:	000027d4 	ldrdeq	r2, [r0], -r4
    9374:	93080701 	movwls	r0, #34561	; 0x8701
    9378:	17000000 	strne	r0, [r0, -r0]
    937c:	17000065 	strne	r0, [r0, -r5, rrx]
    9380:	00002346 	andeq	r2, r0, r6, asr #6
    9384:	24080701 	strcs	r0, [r8], #-1793	; 0x701
    9388:	01000001 	tsteq	r0, r1
    938c:	4b260051 	blmi	9894d8 <_Min_Stack_Size+0x9890d8>
    9390:	5c000003 	stcpl	0, cr0, [r0], {3}
    9394:	3408003c 	strcc	r0, [r8], #-60	; 0x3c
    9398:	01000000 	mrseq	r0, (UNDEF: 0)
    939c:	000e249c 	muleq	lr, ip, r4
    93a0:	035c2000 	cmpeq	ip, #0
    93a4:	65510000 	ldrbvs	r0, [r1, #-0]
    93a8:	681e0000 	ldmdavs	lr, {}	; <UNPREDICTABLE>
    93ac:	8b000003 	blhi	93c0 <_Min_Stack_Size+0x8fc0>
    93b0:	1e000065 	cdpne	0, 0, cr0, cr0, cr5, {3}
    93b4:	00000374 	andeq	r0, r0, r4, ror r3
    93b8:	000065f7 	strdeq	r6, [r0], -r7
    93bc:	0003801e 	andeq	r8, r3, lr, lsl r0
    93c0:	00662d00 	rsbeq	r2, r6, r0, lsl #26
    93c4:	c6270000 	strtgt	r0, [r7], -r0
    93c8:	01000027 	tsteq	r0, r7, lsr #32
    93cc:	3c900859 	ldccc	8, cr0, [r0], {89}	; 0x59
    93d0:	00100800 	andseq	r0, r0, r0, lsl #16
    93d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    93d8:	002c8118 	eoreq	r8, ip, r8, lsl r1
    93dc:	086d0100 	stmdaeq	sp!, {r8}^
    93e0:	00000102 	andeq	r0, r0, r2, lsl #2
    93e4:	08003ca0 	stmdaeq	r0, {r5, r7, sl, fp, ip, sp}
    93e8:	00000014 	andeq	r0, r0, r4, lsl r0
    93ec:	0e719c01 	cdpeq	12, 7, cr9, cr1, cr1, {0}
    93f0:	d4220000 	strtle	r0, [r2], #-0
    93f4:	01000027 	tsteq	r0, r7, lsr #32
    93f8:	0093086d 	addseq	r0, r3, sp, ror #16
    93fc:	667b0000 	ldrbtvs	r0, [fp], -r0
    9400:	101a0000 	andsne	r0, sl, r0
    9404:	01000026 	tsteq	r0, r6, lsr #32
    9408:	0102086f 	tsteq	r2, pc, ror #16
    940c:	669c0000 	ldrvs	r0, [ip], r0
    9410:	16000000 	strne	r0, [r0], -r0
    9414:	00002774 	andeq	r2, r0, r4, ror r7
    9418:	b4088f01 	strlt	r8, [r8], #-3841	; 0xf01
    941c:	0c08003c 	stceq	0, cr0, [r8], {60}	; 0x3c
    9420:	01000000 	mrseq	r0, (UNDEF: 0)
    9424:	000e969c 	muleq	lr, ip, r6
    9428:	27d41700 	ldrbcs	r1, [r4, r0, lsl #14]
    942c:	8f010000 	svchi	0x00010000
    9430:	00009308 	andeq	r9, r0, r8, lsl #6
    9434:	00500100 	subseq	r0, r0, r0, lsl #2
    9438:	00009306 	andeq	r9, r0, r6, lsl #6
    943c:	000ea600 	andeq	sl, lr, r0, lsl #12
    9440:	00bf0700 	adcseq	r0, pc, r0, lsl #14
    9444:	000f0000 	andeq	r0, pc, r0
    9448:	002bfc28 	eoreq	pc, fp, r8, lsr #24
    944c:	b78d0100 	strlt	r0, [sp, r0, lsl #2]
    9450:	0500000e 	streq	r0, [r0, #-14]
    9454:	00001c03 	andeq	r1, r0, r3, lsl #24
    9458:	0ebc2920 	cdpeq	9, 11, cr2, cr12, cr0, {1}
    945c:	96050000 	strls	r0, [r5], -r0
    9460:	2a00000e 	bcs	94a0 <_Min_Stack_Size+0x90a0>
    9464:	0000041b 	andeq	r0, r0, fp, lsl r4
    9468:	db06a706 	blle	1b3088 <_Min_Stack_Size+0x1b2c88>
    946c:	00000000 	andeq	r0, r0, r0
    9470:	00000ba7 	andeq	r0, r0, r7, lsr #23
    9474:	1ce80004 	stclne	0, cr0, [r8], #16
    9478:	01040000 	mrseq	r0, (UNDEF: 4)
    947c:	000002f3 	strdeq	r0, [r0], -r3
    9480:	002e5201 	eoreq	r5, lr, r1, lsl #4
    9484:	00105800 	andseq	r5, r0, r0, lsl #16
    9488:	00000000 	andeq	r0, r0, r0
    948c:	003bf900 	eorseq	pc, fp, r0, lsl #18
    9490:	06010200 	streq	r0, [r1], -r0, lsl #4
    9494:	00000202 	andeq	r0, r0, r2, lsl #4
    9498:	0005df03 	andeq	sp, r5, r3, lsl #30
    949c:	331d0200 	tstcc	sp, #0, 4
    94a0:	02000000 	andeq	r0, r0, #0
    94a4:	02000801 	andeq	r0, r0, #65536	; 0x10000
    94a8:	02020000 	andeq	r0, r2, #0
    94ac:	00003805 	andeq	r3, r0, r5, lsl #16
    94b0:	00940300 	addseq	r0, r4, r0, lsl #6
    94b4:	2b020000 	blcs	894bc <_Min_Stack_Size+0x890bc>
    94b8:	0000004c 	andeq	r0, r0, ip, asr #32
    94bc:	aa070202 	bge	1c9ccc <_Min_Stack_Size+0x1c98cc>
    94c0:	03000002 	movweq	r0, #2
    94c4:	0000044c 	andeq	r0, r0, ip, asr #8
    94c8:	005e3f02 	subseq	r3, lr, r2, lsl #30
    94cc:	04020000 	streq	r0, [r2], #-0
    94d0:	00015d05 	andeq	r5, r1, r5, lsl #26
    94d4:	00890300 	addeq	r0, r9, r0, lsl #6
    94d8:	41020000 	mrsmi	r0, (UNDEF: 2)
    94dc:	00000070 	andeq	r0, r0, r0, ror r0
    94e0:	1d070402 	cfstrsne	mvf0, [r7, #-8]
    94e4:	02000002 	andeq	r0, r0, #2
    94e8:	01580508 	cmpeq	r8, r8, lsl #10
    94ec:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    94f0:	00021807 	andeq	r1, r2, r7, lsl #16
    94f4:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    94f8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    94fc:	22070402 	andcs	r0, r7, #33554432	; 0x2000000
    9500:	03000002 	movweq	r0, #2
    9504:	000005e1 	andeq	r0, r0, r1, ror #11
    9508:	00282a03 	eoreq	r2, r8, r3, lsl #20
    950c:	96030000 	strls	r0, [r3], -r0
    9510:	03000000 	movweq	r0, #0
    9514:	00004136 	andeq	r4, r0, r6, lsr r1
    9518:	044e0300 	strbeq	r0, [lr], #-768	; 0x300
    951c:	41030000 	mrsmi	r0, (UNDEF: 3)
    9520:	00000053 	andeq	r0, r0, r3, asr r0
    9524:	00008b03 	andeq	r8, r0, r3, lsl #22
    9528:	65420300 	strbvs	r0, [r2, #-768]	; 0x300
    952c:	02000000 	andeq	r0, r0, #0
    9530:	00420704 	subeq	r0, r2, r4, lsl #14
    9534:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
    9538:	05000000 	streq	r0, [r0, #-0]
    953c:	000000a9 	andeq	r0, r0, r9, lsr #1
    9540:	f7040106 			; <UNDEFINED> instruction: 0xf7040106
    9544:	0000e601 	andeq	lr, r0, r1, lsl #12
    9548:	25310700 	ldrcs	r0, [r1, #-1792]!	; 0x700
    954c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9550:	00544553 	subseq	r4, r4, r3, asr r5
    9554:	3f090001 	svccc	0x00090001
    9558:	0400003b 	streq	r0, [r0], #-59	; 0x3b
    955c:	00d001f7 	ldrsheq	r0, [r0], #23
    9560:	b6090000 	strlt	r0, [r9], -r0
    9564:	0400003a 	streq	r0, [r0], #-58	; 0x3a
    9568:	00d001f7 	ldrsheq	r0, [r0], #23
    956c:	01060000 	mrseq	r0, (UNDEF: 6)
    9570:	1401f904 	strne	pc, [r1], #-2308	; 0x904
    9574:	07000001 	streq	r0, [r0, -r1]
    9578:	000002a2 	andeq	r0, r0, r2, lsr #5
    957c:	00b70700 	adcseq	r0, r7, r0, lsl #14
    9580:	00010000 	andeq	r0, r1, r0
    9584:	00049109 	andeq	r9, r4, r9, lsl #2
    9588:	01f90400 	mvnseq	r0, r0, lsl #8
    958c:	000000fe 	strdeq	r0, [r0], -lr
    9590:	26041c0a 	strcs	r1, [r4], -sl, lsl #24
    9594:	0001de05 	andeq	sp, r1, r5, lsl #28
    9598:	52530b00 	subspl	r0, r3, #0, 22
    959c:	05280400 	streq	r0, [r8, #-1024]!	; 0x400
    95a0:	000000c6 	andeq	r0, r0, r6, asr #1
    95a4:	069f0c00 	ldreq	r0, [pc], r0, lsl #24
    95a8:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
    95ac:	00009e05 	andeq	r9, r0, r5, lsl #28
    95b0:	440b0200 	strmi	r0, [fp], #-512	; 0x200
    95b4:	2a040052 	bcs	109704 <_Min_Stack_Size+0x109304>
    95b8:	0000c605 	andeq	ip, r0, r5, lsl #12
    95bc:	a90c0400 	stmdbge	ip, {sl}
    95c0:	04000006 	streq	r0, [r0], #-6
    95c4:	009e052b 	addseq	r0, lr, fp, lsr #10
    95c8:	0b060000 	bleq	1895d0 <_Min_Stack_Size+0x1891d0>
    95cc:	00525242 	subseq	r5, r2, r2, asr #4
    95d0:	c6052c04 	strgt	r2, [r5], -r4, lsl #24
    95d4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    95d8:	0006b30c 	andeq	fp, r6, ip, lsl #6
    95dc:	052d0400 	streq	r0, [sp, #-1024]!	; 0x400
    95e0:	0000009e 	muleq	r0, lr, r0
    95e4:	52430b0a 	subpl	r0, r3, #10240	; 0x2800
    95e8:	2e040031 	mcrcs	0, 0, r0, cr4, cr1, {1}
    95ec:	0000c605 	andeq	ip, r0, r5, lsl #12
    95f0:	950c0c00 	strls	r0, [ip, #-3072]	; 0xc00
    95f4:	04000005 	streq	r0, [r0], #-5
    95f8:	009e052f 	addseq	r0, lr, pc, lsr #10
    95fc:	0b0e0000 	bleq	389604 <_Min_Stack_Size+0x389204>
    9600:	00325243 	eorseq	r5, r2, r3, asr #4
    9604:	c6053004 	strgt	r3, [r5], -r4
    9608:	10000000 	andne	r0, r0, r0
    960c:	0006c90c 	andeq	ip, r6, ip, lsl #18
    9610:	05310400 	ldreq	r0, [r1, #-1024]!	; 0x400
    9614:	0000009e 	muleq	r0, lr, r0
    9618:	52430b12 	subpl	r0, r3, #18432	; 0x4800
    961c:	32040033 	andcc	r0, r4, #51	; 0x33
    9620:	0000c605 	andeq	ip, r0, r5, lsl #12
    9624:	d30c1400 	movwle	r1, #50176	; 0xc400
    9628:	04000006 	streq	r0, [r0], #-6
    962c:	009e0533 	addseq	r0, lr, r3, lsr r5
    9630:	0c160000 	ldceq	0, cr0, [r6], {-0}
    9634:	00002da6 	andeq	r2, r0, r6, lsr #27
    9638:	c6053404 	strgt	r3, [r5], -r4, lsl #8
    963c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9640:	0006dd0c 	andeq	sp, r6, ip, lsl #26
    9644:	05350400 	ldreq	r0, [r5, #-1024]!	; 0x400
    9648:	0000009e 	muleq	r0, lr, r0
    964c:	fc09001a 	stc2	0, cr0, [r9], {26}
    9650:	0400002d 	streq	r0, [r0], #-45	; 0x2d
    9654:	01200536 	teqeq	r0, r6, lsr r5
    9658:	100d0000 	andne	r0, sp, r0
    965c:	02233005 	eoreq	r3, r3, #5
    9660:	140e0000 	strne	r0, [lr], #-0
    9664:	05000027 	streq	r0, [r0, #-39]	; 0x27
    9668:	0000b432 	andeq	fp, r0, r2, lsr r4
    966c:	d50e0000 	strle	r0, [lr, #-0]
    9670:	05000028 	streq	r0, [r0, #-40]	; 0x28
    9674:	0000b433 	andeq	fp, r0, r3, lsr r4
    9678:	ec0e0400 	cfstrs	mvf0, [lr], {-0}
    967c:	0500002b 	streq	r0, [r0, #-43]	; 0x2b
    9680:	0000b434 	andeq	fp, r0, r4, lsr r4
    9684:	e20e0800 	and	r0, lr, #0, 16
    9688:	05000027 	streq	r0, [r0, #-39]	; 0x27
    968c:	0000b435 	andeq	fp, r0, r5, lsr r4
    9690:	03000c00 	movweq	r0, #3072	; 0xc00
    9694:	00002d46 	andeq	r2, r0, r6, asr #26
    9698:	01ea3605 	mvneq	r3, r5, lsl #12
    969c:	100d0000 	andne	r0, sp, r0
    96a0:	027f3606 	rsbseq	r3, pc, #6291456	; 0x600000
    96a4:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    96a8:	0600002f 	streq	r0, [r0], -pc, lsr #32
    96ac:	0000b438 	andeq	fp, r0, r8, lsr r4
    96b0:	e00e0000 	and	r0, lr, r0
    96b4:	0600002e 	streq	r0, [r0], -lr, lsr #32
    96b8:	00009e3e 	andeq	r9, r0, lr, lsr lr
    96bc:	0a0e0400 	beq	38a6c4 <_Min_Stack_Size+0x38a2c4>
    96c0:	0600002e 	streq	r0, [r0], -lr, lsr #32
    96c4:	00009e41 	andeq	r9, r0, r1, asr #28
    96c8:	b70e0600 	strlt	r0, [lr, -r0, lsl #12]
    96cc:	0600002f 	streq	r0, [r0], -pc, lsr #32
    96d0:	00009e44 	andeq	r9, r0, r4, asr #28
    96d4:	a10e0800 	tstge	lr, r0, lsl #16
    96d8:	06000030 			; <UNDEFINED> instruction: 0x06000030
    96dc:	00009e4b 	andeq	r9, r0, fp, asr #28
    96e0:	740e0a00 	strvc	r0, [lr], #-2560	; 0xa00
    96e4:	06000030 			; <UNDEFINED> instruction: 0x06000030
    96e8:	00009e4e 	andeq	r9, r0, lr, asr #28
    96ec:	03000c00 	movweq	r0, #3072	; 0xc00
    96f0:	00003029 	andeq	r3, r0, r9, lsr #32
    96f4:	022e5106 	eoreq	r5, lr, #-2147483647	; 0x80000001
    96f8:	080d0000 	stmdaeq	sp, {}	; <UNPREDICTABLE>
    96fc:	02c35706 	sbceq	r5, r3, #1572864	; 0x180000
    9700:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    9704:	06000031 			; <UNDEFINED> instruction: 0x06000031
    9708:	00009e5a 	andeq	r9, r0, sl, asr lr
    970c:	d90e0000 	stmdble	lr, {}	; <UNPREDICTABLE>
    9710:	06000031 			; <UNDEFINED> instruction: 0x06000031
    9714:	00009e5d 	andeq	r9, r0, sp, asr lr
    9718:	9b0e0200 	blls	389f20 <_Min_Stack_Size+0x389b20>
    971c:	0600002d 	streq	r0, [r0], -sp, lsr #32
    9720:	00009e60 	andeq	r9, r0, r0, ror #28
    9724:	fe0e0400 	cdp2	4, 0, cr0, cr14, cr0, {0}
    9728:	0600002e 	streq	r0, [r0], -lr, lsr #32
    972c:	00009e63 	andeq	r9, r0, r3, ror #28
    9730:	03000600 	movweq	r0, #1536	; 0x600
    9734:	00002e19 	andeq	r2, r0, r9, lsl lr
    9738:	028a6606 	addeq	r6, sl, #6291456	; 0x600000
    973c:	940f0000 	strls	r0, [pc], #-0	; 9744 <_Min_Stack_Size+0x9344>
    9740:	0100002f 	tsteq	r0, pc, lsr #32
    9744:	003cc0bb 	ldrhteq	ip, [ip], -fp
    9748:	00010c08 	andeq	r0, r1, r8, lsl #24
    974c:	8b9c0100 	blhi	fe709b54 <_estack+0xde6d9b54>
    9750:	10000004 	andne	r0, r0, r4
    9754:	00003057 	andeq	r3, r0, r7, asr r0
    9758:	048bbb01 	streq	fp, [fp], #2817	; 0xb01
    975c:	66db0000 	ldrbvs	r0, [fp], r0
    9760:	fe110000 	cdp2	0, 1, cr0, cr1, cr0, {0}
    9764:	6408003c 	strvs	r0, [r8], #-60	; 0x3c
    9768:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    976c:	12000003 	andne	r0, r0, #3
    9770:	31015101 	tstcc	r1, r1, lsl #2
    9774:	04500112 	ldrbeq	r0, [r0], #-274	; 0x112
    9778:	1f244b40 	svcne	0x00244b40
    977c:	3d0c1300 	stccc	3, cr1, [ip, #-0]
    9780:	0b640800 	bleq	190b788 <_Min_Stack_Size+0x190b388>
    9784:	03280000 	teqeq	r8, #0
    9788:	01120000 	tsteq	r2, r0
    978c:	12300151 	eorsne	r0, r0, #1073741844	; 0x40000014
    9790:	40045001 	andmi	r5, r4, r1
    9794:	001f244b 	andseq	r2, pc, fp, asr #8
    9798:	003d1411 	eorseq	r1, sp, r1, lsl r4
    979c:	000b7b08 	andeq	r7, fp, r8, lsl #22
    97a0:	00034000 	andeq	r4, r3, r0
    97a4:	51011200 	mrspl	r1, R9_usr
    97a8:	01123101 	tsteq	r2, r1, lsl #2
    97ac:	00400150 	subeq	r0, r0, r0, asr r1
    97b0:	003d2013 	eorseq	r2, sp, r3, lsl r0
    97b4:	000b7b08 	andeq	r7, fp, r8, lsl #22
    97b8:	00035800 	andeq	r5, r3, r0, lsl #16
    97bc:	51011200 	mrspl	r1, R9_usr
    97c0:	01123001 	tsteq	r2, r1
    97c4:	00400150 	subeq	r0, r0, r0, asr r1
    97c8:	003d2a11 	eorseq	r2, sp, r1, lsl sl
    97cc:	000b6408 	andeq	r6, fp, r8, lsl #8
    97d0:	00037200 	andeq	r7, r3, r0, lsl #4
    97d4:	51011200 	mrspl	r1, R9_usr
    97d8:	01123101 	tsteq	r2, r1, lsl #2
    97dc:	3d400350 	stclcc	3, cr0, [r0, #-320]	; 0xfffffec0
    97e0:	38130024 	ldmdacc	r3, {r2, r5}
    97e4:	6408003d 	strvs	r0, [r8], #-61	; 0x3d
    97e8:	8c00000b 	stchi	0, cr0, [r0], {11}
    97ec:	12000003 	andne	r0, r0, #3
    97f0:	30015101 	andcc	r5, r1, r1, lsl #2
    97f4:	03500112 	cmpeq	r0, #-2147483644	; 0x80000004
    97f8:	00243d40 	eoreq	r3, r4, r0, asr #26
    97fc:	003d4211 	eorseq	r4, sp, r1, lsl r2
    9800:	000b6408 	andeq	r6, fp, r8, lsl #8
    9804:	0003a600 	andeq	sl, r3, r0, lsl #12
    9808:	51011200 	mrspl	r1, R9_usr
    980c:	01123101 	tsteq	r2, r1, lsl #2
    9810:	3e400350 	mcrcc	3, 2, r0, cr0, cr0, {2}
    9814:	50130024 	andspl	r0, r3, r4, lsr #32
    9818:	6408003d 	strvs	r0, [r8], #-61	; 0x3d
    981c:	c000000b 	andgt	r0, r0, fp
    9820:	12000003 	andne	r0, r0, #3
    9824:	30015101 	andcc	r5, r1, r1, lsl #2
    9828:	03500112 	cmpeq	r0, #-2147483644	; 0x80000004
    982c:	00243e40 	eoreq	r3, r4, r0, asr #28
    9830:	003d5a11 	eorseq	r5, sp, r1, lsl sl
    9834:	000b6408 	andeq	r6, fp, r8, lsl #8
    9838:	0003da00 	andeq	sp, r3, r0, lsl #20
    983c:	51011200 	mrspl	r1, R9_usr
    9840:	01123101 	tsteq	r2, r1, lsl #2
    9844:	3f400350 	svccc	0x00400350
    9848:	68130024 	ldmdavs	r3, {r2, r5}
    984c:	6408003d 	strvs	r0, [r8], #-61	; 0x3d
    9850:	f400000b 	vst4.8	{d0-d3}, [r0], fp
    9854:	12000003 	andne	r0, r0, #3
    9858:	30015101 	andcc	r5, r1, r1, lsl #2
    985c:	03500112 	cmpeq	r0, #-2147483644	; 0x80000004
    9860:	00243f40 	eoreq	r3, r4, r0, asr #30
    9864:	003d7211 	eorseq	r7, sp, r1, lsl r2
    9868:	000b6408 	andeq	r6, fp, r8, lsl #8
    986c:	00040e00 	andeq	r0, r4, r0, lsl #28
    9870:	51011200 	mrspl	r1, R9_usr
    9874:	01123101 	tsteq	r2, r1, lsl #2
    9878:	40400350 	submi	r0, r0, r0, asr r3
    987c:	80130024 	andshi	r0, r3, r4, lsr #32
    9880:	6408003d 	strvs	r0, [r8], #-61	; 0x3d
    9884:	2800000b 	stmdacs	r0, {r0, r1, r3}
    9888:	12000004 	andne	r0, r0, #4
    988c:	30015101 	andcc	r5, r1, r1, lsl #2
    9890:	03500112 	cmpeq	r0, #-2147483644	; 0x80000004
    9894:	00244040 	eoreq	r4, r4, r0, asr #32
    9898:	003d8811 	eorseq	r8, sp, r1, lsl r8
    989c:	000b7b08 	andeq	r7, fp, r8, lsl #22
    98a0:	00044100 	andeq	r4, r4, r0, lsl #2
    98a4:	51011200 	mrspl	r1, R9_usr
    98a8:	01123101 	tsteq	r2, r1, lsl #2
    98ac:	20080250 	andcs	r0, r8, r0, asr r2
    98b0:	3d941300 	ldccc	3, cr1, [r4]
    98b4:	0b7b0800 	bleq	1ecb8bc <_Min_Stack_Size+0x1ecb4bc>
    98b8:	045a0000 	ldrbeq	r0, [sl], #-0
    98bc:	01120000 	tsteq	r2, r0
    98c0:	12300151 	eorsne	r0, r0, #1073741844	; 0x40000014
    98c4:	08025001 	stmdaeq	r2, {r0, ip, lr}
    98c8:	9e110020 	cdpls	0, 1, cr0, cr1, cr0, {1}
    98cc:	6408003d 	strvs	r0, [r8], #-61	; 0x3d
    98d0:	7400000b 	strvc	r0, [r0], #-11
    98d4:	12000004 	andne	r0, r0, #4
    98d8:	31015101 	tstcc	r1, r1, lsl #2
    98dc:	03500112 	cmpeq	r0, #-2147483644	; 0x80000004
    98e0:	00244a40 	eoreq	r4, r4, r0, asr #20
    98e4:	003dac14 	eorseq	sl, sp, r4, lsl ip
    98e8:	000b6408 	andeq	r6, fp, r8, lsl #8
    98ec:	51011200 	mrspl	r1, R9_usr
    98f0:	01123001 	tsteq	r2, r1
    98f4:	4a400350 	bmi	100a63c <_Min_Stack_Size+0x100a23c>
    98f8:	15000024 	strne	r0, [r0, #-36]	; 0x24
    98fc:	0001de04 	andeq	sp, r1, r4, lsl #28
    9900:	2dd60f00 	ldclcs	15, cr0, [r6]
    9904:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    9908:	08003dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, ip, sp}
    990c:	000000c4 	andeq	r0, r0, r4, asr #1
    9910:	051f9c01 	ldreq	r9, [pc, #-3073]	; 8d17 <_Min_Stack_Size+0x8917>
    9914:	57100000 	ldrpl	r0, [r0, -r0]
    9918:	01000030 	tsteq	r0, r0, lsr r0
    991c:	00048bf6 	strdeq	r8, [r4], -r6
    9920:	0067ab00 	rsbeq	sl, r7, r0, lsl #22
    9924:	315f1000 	cmpcc	pc, r0
    9928:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    992c:	0000051f 	andeq	r0, r0, pc, lsl r5
    9930:	000067d7 	ldrdeq	r6, [r0], -r7
    9934:	0027db16 	eoreq	sp, r7, r6, lsl fp
    9938:	b4f80100 	ldrbtlt	r0, [r8], #256	; 0x100
    993c:	1c000000 	stcne	0, cr0, [r0], {-0}
    9940:	16000068 	strne	r0, [r0], -r8, rrx
    9944:	00002f37 	andeq	r2, r0, r7, lsr pc
    9948:	00b4f801 	adcseq	pc, r4, r1, lsl #16
    994c:	68cd0000 	stmiavs	sp, {}^	; <UNPREDICTABLE>
    9950:	8c160000 	ldchi	0, cr0, [r6], {-0}
    9954:	0100002d 	tsteq	r0, sp, lsr #32
    9958:	0000b4f9 	strdeq	fp, [r0], -r9
    995c:	00690300 	rsbeq	r0, r9, r0, lsl #6
    9960:	31221600 	teqcc	r2, r0, lsl #12
    9964:	fa010000 	blx	4996c <_Min_Stack_Size+0x4956c>
    9968:	000000b4 	strheq	r0, [r0], -r4
    996c:	0000692e 	andeq	r6, r0, lr, lsr #18
    9970:	00317017 	eorseq	r7, r1, r7, lsl r0
    9974:	23fb0100 	mvnscs	r0, #0, 2
    9978:	02000002 	andeq	r0, r0, #2
    997c:	12185891 	andsne	r5, r8, #9502720	; 0x910000
    9980:	9208003e 	andls	r0, r8, #62	; 0x3e
    9984:	1200000b 	andne	r0, r0, #11
    9988:	7d025001 	stcvc	0, cr5, [r2, #-4]
    998c:	15000000 	strne	r0, [r0, #-0]
    9990:	00027f04 	andeq	r7, r2, r4, lsl #30
    9994:	31b81900 			; <UNDEFINED> instruction: 0x31b81900
    9998:	67010000 	strvs	r0, [r1, -r0]
    999c:	003e9001 	eorseq	r9, lr, r1
    99a0:	00001608 	andeq	r1, r0, r8, lsl #12
    99a4:	4a9c0100 	bmi	fe709dac <_estack+0xde6d9dac>
    99a8:	1a000005 	bne	99c4 <_Min_Stack_Size+0x95c4>
    99ac:	0000315f 	andeq	r3, r0, pc, asr r1
    99b0:	1f016701 	svcne	0x00016701
    99b4:	01000005 	tsteq	r0, r5
    99b8:	81190050 	tsthi	r9, r0, asr r0
    99bc:	01000031 	tsteq	r0, r1, lsr r0
    99c0:	3ea8017b 	mcrcc	1, 5, r0, cr8, cr11, {3}
    99c4:	00220800 	eoreq	r0, r2, r0, lsl #16
    99c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    99cc:	0000058f 	andeq	r0, r0, pc, lsl #11
    99d0:	0030571a 	eorseq	r5, r0, sl, lsl r7
    99d4:	017b0100 	cmneq	fp, r0, lsl #2
    99d8:	0000048b 	andeq	r0, r0, fp, lsl #9
    99dc:	a11b5001 	tstge	fp, r1
    99e0:	0100002f 	tsteq	r0, pc, lsr #32
    99e4:	058f017b 	streq	r0, [pc, #379]	; 9b67 <_Min_Stack_Size+0x9767>
    99e8:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
    99ec:	db1c0000 	blle	7099f4 <_Min_Stack_Size+0x7095f4>
    99f0:	01000027 	tsteq	r0, r7, lsr #32
    99f4:	00b4017d 	adcseq	r0, r4, sp, ror r1
    99f8:	69850000 	stmibvs	r5, {}	; <UNPREDICTABLE>
    99fc:	15000000 	strne	r0, [r0, #-0]
    9a00:	0002c304 	andeq	ip, r2, r4, lsl #6
    9a04:	2fc41900 	svccs	0x00c41900
    9a08:	9a010000 	bls	49a10 <_Min_Stack_Size+0x49610>
    9a0c:	003ecc01 	eorseq	ip, lr, r1, lsl #24
    9a10:	00000c08 	andeq	r0, r0, r8, lsl #24
    9a14:	ba9c0100 	blt	fe709e1c <_estack+0xde6d9e1c>
    9a18:	1a000005 	bne	9a34 <_Min_Stack_Size+0x9634>
    9a1c:	00002fa1 	andeq	r2, r0, r1, lsr #31
    9a20:	8f019a01 	svchi	0x00019a01
    9a24:	01000005 	tsteq	r0, r5
    9a28:	30190050 	andscc	r0, r9, r0, asr r0
    9a2c:	0100002e 	tsteq	r0, lr, lsr #32
    9a30:	3ed801ab 	cdpcc	1, 13, cr0, cr8, cr11, {5}
    9a34:	001a0800 	andseq	r0, sl, r0, lsl #16
    9a38:	9c010000 	stcls	0, cr0, [r1], {-0}
    9a3c:	000005ed 	andeq	r0, r0, sp, ror #11
    9a40:	0030571a 	eorseq	r5, r0, sl, lsl r7
    9a44:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    9a48:	0000048b 	andeq	r0, r0, fp, lsl #9
    9a4c:	461a5001 	ldrmi	r5, [sl], -r1
    9a50:	01000023 	tsteq	r0, r3, lsr #32
    9a54:	011401ab 	tsteq	r4, fp, lsr #3
    9a58:	51010000 	mrspl	r0, (UNDEF: 1)
    9a5c:	2dc31900 	stclcs	9, cr1, [r3]
    9a60:	c5010000 	strgt	r0, [r1, #-0]
    9a64:	003ef401 	eorseq	pc, lr, r1, lsl #8
    9a68:	00001208 	andeq	r1, r0, r8, lsl #4
    9a6c:	229c0100 	addscs	r0, ip, #0, 2
    9a70:	1a000006 	bne	9a90 <_Min_Stack_Size+0x9690>
    9a74:	00003057 	andeq	r3, r0, r7, asr r0
    9a78:	8b01c501 	blhi	7ae84 <_Min_Stack_Size+0x7aa84>
    9a7c:	01000004 	tsteq	r0, r4
    9a80:	31c91b50 	biccc	r1, r9, r0, asr fp
    9a84:	c5010000 	strgt	r0, [r1, #-0]
    9a88:	00009301 	andeq	r9, r0, r1, lsl #6
    9a8c:	0069d300 	rsbeq	sp, r9, r0, lsl #6
    9a90:	c1190000 	tstgt	r9, r0
    9a94:	01000030 	tsteq	r0, r0, lsr r0
    9a98:	3f0801da 	svccc	0x000801da
    9a9c:	001a0800 	andseq	r0, sl, r0, lsl #16
    9aa0:	9c010000 	stcls	0, cr0, [r1], {-0}
    9aa4:	00000655 	andeq	r0, r0, r5, asr r6
    9aa8:	0030571a 	eorseq	r5, r0, sl, lsl r7
    9aac:	01da0100 	bicseq	r0, sl, r0, lsl #2
    9ab0:	0000048b 	andeq	r0, r0, fp, lsl #9
    9ab4:	461a5001 	ldrmi	r5, [sl], -r1
    9ab8:	01000023 	tsteq	r0, r3, lsr #32
    9abc:	011401da 			; <UNDEFINED> instruction: 0x011401da
    9ac0:	51010000 	mrspl	r0, (UNDEF: 1)
    9ac4:	305e1900 	subscc	r1, lr, r0, lsl #18
    9ac8:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    9acc:	003f2401 	eorseq	r2, pc, r1, lsl #8
    9ad0:	00001a08 	andeq	r1, r0, r8, lsl #20
    9ad4:	889c0100 	ldmhi	ip, {r8}
    9ad8:	1a000006 	bne	9af8 <_Min_Stack_Size+0x96f8>
    9adc:	00003057 	andeq	r3, r0, r7, asr r0
    9ae0:	8b01f401 	blhi	86aec <_Min_Stack_Size+0x866ec>
    9ae4:	01000004 	tsteq	r0, r4
    9ae8:	23461a50 	movtcs	r1, #27216	; 0x6a50
    9aec:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    9af0:	00011401 	andeq	r1, r1, r1, lsl #8
    9af4:	00510100 	subseq	r0, r1, r0, lsl #2
    9af8:	002e3a19 	eoreq	r3, lr, r9, lsl sl
    9afc:	022d0100 	eoreq	r0, sp, #0, 2
    9b00:	08003f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, ip, sp}
    9b04:	00000008 	andeq	r0, r0, r8
    9b08:	06bd9c01 	ldrteq	r9, [sp], r1, lsl #24
    9b0c:	571a0000 	ldrpl	r0, [sl, -r0]
    9b10:	01000030 	tsteq	r0, r0, lsr r0
    9b14:	048b022d 	streq	r0, [fp], #557	; 0x22d
    9b18:	50010000 	andpl	r0, r1, r0
    9b1c:	00347b1b 	eorseq	r7, r4, fp, lsl fp
    9b20:	022d0100 	eoreq	r0, sp, #0, 2
    9b24:	0000009e 	muleq	r0, lr, r0
    9b28:	000069f4 	strdeq	r6, [r0], -r4
    9b2c:	31eb1d00 	mvncc	r1, r0, lsl #26
    9b30:	3d010000 	stccc	0, cr0, [r1, #-0]
    9b34:	00009e02 	andeq	r9, r0, r2, lsl #28
    9b38:	003f4800 	eorseq	r4, pc, r0, lsl #16
    9b3c:	00000808 	andeq	r0, r0, r8, lsl #16
    9b40:	e89c0100 	ldm	ip, {r8}
    9b44:	1b000006 	blne	9b64 <_Min_Stack_Size+0x9764>
    9b48:	00003057 	andeq	r3, r0, r7, asr r0
    9b4c:	8b023d01 	blhi	98f58 <_Min_Stack_Size+0x98b58>
    9b50:	15000004 	strne	r0, [r0, #-4]
    9b54:	0000006a 	andeq	r0, r0, sl, rrx
    9b58:	002ff519 	eoreq	pc, pc, r9, lsl r5	; <UNPREDICTABLE>
    9b5c:	02710100 	rsbseq	r0, r1, #0, 2
    9b60:	08003f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, ip, sp}
    9b64:	00000016 	andeq	r0, r0, r6, lsl r0
    9b68:	071d9c01 	ldreq	r9, [sp, -r1, lsl #24]
    9b6c:	571a0000 	ldrpl	r0, [sl, -r0]
    9b70:	01000030 	tsteq	r0, r0, lsr r0
    9b74:	048b0271 	streq	r0, [fp], #625	; 0x271
    9b78:	50010000 	andpl	r0, r1, r0
    9b7c:	0030ac1b 	eorseq	sl, r0, fp, lsl ip
    9b80:	02710100 	rsbseq	r0, r1, #0, 2
    9b84:	00000093 	muleq	r0, r3, r0
    9b88:	00006a36 	andeq	r6, r0, r6, lsr sl
    9b8c:	2dab1900 	stccs	9, cr1, [fp]
    9b90:	85010000 	strhi	r0, [r1, #-0]
    9b94:	003f6802 	eorseq	r6, pc, r2, lsl #16
    9b98:	00001a08 	andeq	r1, r0, r8, lsl #20
    9b9c:	509c0100 	addspl	r0, ip, r0, lsl #2
    9ba0:	1a000007 	bne	9bc4 <_Min_Stack_Size+0x97c4>
    9ba4:	00003057 	andeq	r3, r0, r7, asr r0
    9ba8:	8b028501 	blhi	aafb4 <_Min_Stack_Size+0xaabb4>
    9bac:	01000004 	tsteq	r0, r4
    9bb0:	23461a50 	movtcs	r1, #27216	; 0x6a50
    9bb4:	85010000 	strhi	r0, [r1, #-0]
    9bb8:	00011402 	andeq	r1, r1, r2, lsl #8
    9bbc:	00510100 	subseq	r0, r1, r0, lsl #2
    9bc0:	00319119 	eorseq	r9, r1, r9, lsl r1
    9bc4:	02a00100 	adceq	r0, r0, #0, 2
    9bc8:	08003f84 	stmdaeq	r0, {r2, r7, r8, r9, sl, fp, ip, sp}
    9bcc:	00000016 	andeq	r0, r0, r6, lsl r0
    9bd0:	07859c01 	streq	r9, [r5, r1, lsl #24]
    9bd4:	571a0000 	ldrpl	r0, [sl, -r0]
    9bd8:	01000030 	tsteq	r0, r0, lsr r0
    9bdc:	048b02a0 	streq	r0, [fp], #672	; 0x2a0
    9be0:	50010000 	andpl	r0, r1, r0
    9be4:	002f2a1b 	eoreq	r2, pc, fp, lsl sl	; <UNPREDICTABLE>
    9be8:	02a00100 	adceq	r0, r0, #0, 2
    9bec:	0000009e 	muleq	r0, lr, r0
    9bf0:	00006a57 	andeq	r6, r0, r7, asr sl
    9bf4:	2f681900 	svccs	0x00681900
    9bf8:	e5010000 	str	r0, [r1, #-0]
    9bfc:	003f9c02 	eorseq	r9, pc, r2, lsl #24
    9c00:	00001608 	andeq	r1, r0, r8, lsl #12
    9c04:	ba9c0100 	blt	fe70a00c <_estack+0xde6da00c>
    9c08:	1a000007 	bne	9c2c <_Min_Stack_Size+0x982c>
    9c0c:	00003057 	andeq	r3, r0, r7, asr r0
    9c10:	8b02e501 	blhi	c301c <_Min_Stack_Size+0xc2c1c>
    9c14:	01000004 	tsteq	r0, r4
    9c18:	2de11b50 	stclcs	11, cr1, [r1, #320]!	; 0x140
    9c1c:	e5010000 	str	r0, [r1, #-0]
    9c20:	00009e02 	andeq	r9, r0, r2, lsl #28
    9c24:	006a7800 	rsbeq	r7, sl, r0, lsl #16
    9c28:	ea190000 	b	649c30 <_Min_Stack_Size+0x649830>
    9c2c:	01000030 	tsteq	r0, r0, lsr r0
    9c30:	3fb402f7 	svccc	0x00b402f7
    9c34:	001a0800 	andseq	r0, sl, r0, lsl #16
    9c38:	9c010000 	stcls	0, cr0, [r1], {-0}
    9c3c:	000007ed 	andeq	r0, r0, sp, ror #15
    9c40:	0030571a 	eorseq	r5, r0, sl, lsl r7
    9c44:	02f70100 	rscseq	r0, r7, #0, 2
    9c48:	0000048b 	andeq	r0, r0, fp, lsl #9
    9c4c:	461a5001 	ldrmi	r5, [sl], -r1
    9c50:	01000023 	tsteq	r0, r3, lsr #32
    9c54:	011402f7 			; <UNDEFINED> instruction: 0x011402f7
    9c58:	51010000 	mrspl	r0, (UNDEF: 1)
    9c5c:	30191900 	andscc	r1, r9, r0, lsl #18
    9c60:	0f010000 	svceq	0x00010000
    9c64:	003fd003 	eorseq	sp, pc, r3
    9c68:	00000c08 	andeq	r0, r0, r8, lsl #24
    9c6c:	129c0100 	addsne	r0, ip, #0, 2
    9c70:	1a000008 	bne	9c98 <_Min_Stack_Size+0x9898>
    9c74:	00003057 	andeq	r3, r0, r7, asr r0
    9c78:	8b030f01 	blhi	cd884 <_Min_Stack_Size+0xcd484>
    9c7c:	01000004 	tsteq	r0, r4
    9c80:	a4190050 	ldrge	r0, [r9], #-80	; 0x50
    9c84:	01000031 	tsteq	r0, r1, lsr r0
    9c88:	3fdc0344 	svccc	0x00dc0344
    9c8c:	001a0800 	andseq	r0, sl, r0, lsl #16
    9c90:	9c010000 	stcls	0, cr0, [r1], {-0}
    9c94:	00000845 	andeq	r0, r0, r5, asr #16
    9c98:	0030571a 	eorseq	r5, r0, sl, lsl r7
    9c9c:	03440100 	movteq	r0, #16640	; 0x4100
    9ca0:	0000048b 	andeq	r0, r0, fp, lsl #9
    9ca4:	461a5001 	ldrmi	r5, [sl], -r1
    9ca8:	01000023 	tsteq	r0, r3, lsr #32
    9cac:	01140344 	tsteq	r4, r4, asr #6
    9cb0:	51010000 	mrspl	r0, (UNDEF: 1)
    9cb4:	30061900 	andcc	r1, r6, r0, lsl #18
    9cb8:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    9cbc:	003ff803 	eorseq	pc, pc, r3, lsl #16
    9cc0:	00001208 	andeq	r1, r0, r8, lsl #4
    9cc4:	7a9c0100 	bvc	fe70a0cc <_estack+0xde6da0cc>
    9cc8:	1a000008 	bne	9cf0 <_Min_Stack_Size+0x98f0>
    9ccc:	00003057 	andeq	r3, r0, r7, asr r0
    9cd0:	8b039801 	blhi	efcdc <_Min_Stack_Size+0xef8dc>
    9cd4:	01000004 	tsteq	r0, r4
    9cd8:	2f581b50 	svccs	0x00581b50
    9cdc:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    9ce0:	00009303 	andeq	r9, r0, r3, lsl #6
    9ce4:	006a9900 	rsbeq	r9, sl, r0, lsl #18
    9ce8:	8e190000 	cdphi	0, 1, cr0, cr9, cr0, {0}
    9cec:	01000030 	tsteq	r0, r0, lsr r0
    9cf0:	400c03ab 	andmi	r0, ip, fp, lsr #7
    9cf4:	001a0800 	andseq	r0, sl, r0, lsl #16
    9cf8:	9c010000 	stcls	0, cr0, [r1], {-0}
    9cfc:	000008ad 	andeq	r0, r0, sp, lsr #17
    9d00:	0030571a 	eorseq	r5, r0, sl, lsl r7
    9d04:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    9d08:	0000048b 	andeq	r0, r0, fp, lsl #9
    9d0c:	461a5001 	ldrmi	r5, [sl], -r1
    9d10:	01000023 	tsteq	r0, r3, lsr #32
    9d14:	011403ab 	tsteq	r4, fp, lsr #7
    9d18:	51010000 	mrspl	r0, (UNDEF: 1)
    9d1c:	31341900 	teqcc	r4, r0, lsl #18
    9d20:	c4010000 	strgt	r0, [r1], #-0
    9d24:	00402803 	subeq	r2, r0, r3, lsl #16
    9d28:	00001a08 	andeq	r1, r0, r8, lsl #20
    9d2c:	e09c0100 	adds	r0, ip, r0, lsl #2
    9d30:	1a000008 	bne	9d58 <_Min_Stack_Size+0x9958>
    9d34:	00003057 	andeq	r3, r0, r7, asr r0
    9d38:	8b03c401 	blhi	fad44 <_Min_Stack_Size+0xfa944>
    9d3c:	01000004 	tsteq	r0, r4
    9d40:	23461a50 	movtcs	r1, #27216	; 0x6a50
    9d44:	c4010000 	strgt	r0, [r1], #-0
    9d48:	00011403 	andeq	r1, r1, r3, lsl #8
    9d4c:	00510100 	subseq	r0, r1, r0, lsl #2
    9d50:	0030f719 	eorseq	pc, r0, r9, lsl r7	; <UNPREDICTABLE>
    9d54:	040b0100 	streq	r0, [fp], #-256	; 0x100
    9d58:	08004044 	stmdaeq	r0, {r2, r6, lr}
    9d5c:	00000016 	andeq	r0, r0, r6, lsl r0
    9d60:	09159c01 	ldmdbeq	r5, {r0, sl, fp, ip, pc}
    9d64:	571a0000 	ldrpl	r0, [sl, -r0]
    9d68:	01000030 	tsteq	r0, r0, lsr r0
    9d6c:	048b040b 	streq	r0, [fp], #1035	; 0x40b
    9d70:	50010000 	andpl	r0, r1, r0
    9d74:	002f1b1b 	eoreq	r1, pc, fp, lsl fp	; <UNPREDICTABLE>
    9d78:	040b0100 	streq	r0, [fp], #-256	; 0x100
    9d7c:	0000009e 	muleq	r0, lr, r0
    9d80:	00006aba 			; <UNDEFINED> instruction: 0x00006aba
    9d84:	31141900 	tstcc	r4, r0, lsl #18
    9d88:	1d010000 	stcne	0, cr0, [r1, #-0]
    9d8c:	00405c04 	subeq	r5, r0, r4, lsl #24
    9d90:	00001a08 	andeq	r1, r0, r8, lsl #20
    9d94:	489c0100 	ldmmi	ip, {r8}
    9d98:	1a000009 	bne	9dc4 <_Min_Stack_Size+0x99c4>
    9d9c:	00003057 	andeq	r3, r0, r7, asr r0
    9da0:	8b041d01 	blhi	1111ac <_Min_Stack_Size+0x110dac>
    9da4:	01000004 	tsteq	r0, r4
    9da8:	23461a50 	movtcs	r1, #27216	; 0x6a50
    9dac:	1d010000 	stcne	0, cr0, [r1, #-0]
    9db0:	00011404 	andeq	r1, r1, r4, lsl #8
    9db4:	00510100 	subseq	r0, r1, r0, lsl #2
    9db8:	002ef119 	eoreq	pc, lr, r9, lsl r1	; <UNPREDICTABLE>
    9dbc:	044b0100 	strbeq	r0, [fp], #-256	; 0x100
    9dc0:	08004078 	stmdaeq	r0, {r3, r4, r5, r6, lr}
    9dc4:	00000014 	andeq	r0, r0, r4, lsl r0
    9dc8:	098b9c01 	stmibeq	fp, {r0, sl, fp, ip, pc}
    9dcc:	571a0000 	ldrpl	r0, [sl, -r0]
    9dd0:	01000030 	tsteq	r0, r0, lsr r0
    9dd4:	048b044b 	streq	r0, [fp], #1099	; 0x44b
    9dd8:	50010000 	andpl	r0, r1, r0
    9ddc:	00304a1b 	eorseq	r4, r0, fp, lsl sl
    9de0:	044b0100 	strbeq	r0, [fp], #-256	; 0x100
    9de4:	0000009e 	muleq	r0, lr, r0
    9de8:	00006adb 	ldrdeq	r6, [r0], -fp
    9dec:	0023461a 	eoreq	r4, r3, sl, lsl r6
    9df0:	044b0100 	strbeq	r0, [fp], #-256	; 0x100
    9df4:	00000114 	andeq	r0, r0, r4, lsl r1
    9df8:	19005201 	stmdbne	r0, {r0, r9, ip, lr}
    9dfc:	0000303b 	andeq	r3, r0, fp, lsr r0
    9e00:	8c04cf01 	stchi	15, cr12, [r4], {1}
    9e04:	3a080040 	bcc	209f0c <_Min_Stack_Size+0x209b0c>
    9e08:	01000000 	mrseq	r0, (UNDEF: 0)
    9e0c:	000a0e9c 	muleq	sl, ip, lr
    9e10:	30571b00 	subscc	r1, r7, r0, lsl #22
    9e14:	cf010000 	svcgt	0x00010000
    9e18:	00048b04 	andeq	r8, r4, r4, lsl #22
    9e1c:	006b1500 	rsbeq	r1, fp, r0, lsl #10
    9e20:	2e491b00 	vmlacs.f64	d17, d9, d0
    9e24:	cf010000 	svcgt	0x00010000
    9e28:	00009e04 	andeq	r9, r0, r4, lsl #28
    9e2c:	006b4e00 	rsbeq	r4, fp, r0, lsl #28
    9e30:	23461a00 	movtcs	r1, #27136	; 0x6a00
    9e34:	cf010000 	svcgt	0x00010000
    9e38:	00011404 	andeq	r1, r1, r4, lsl #8
    9e3c:	1c520100 	ldfnee	f0, [r2], {-0}
    9e40:	000031fd 	strdeq	r3, [r0], -sp
    9e44:	b404d101 	strlt	sp, [r4], #-257	; 0x101
    9e48:	6f000000 	svcvs	0x00000000
    9e4c:	1c00006b 	stcne	0, cr0, [r0], {107}	; 0x6b
    9e50:	000030bb 	strheq	r3, [r0], -fp
    9e54:	b404d101 	strlt	sp, [r4], #-257	; 0x101
    9e58:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    9e5c:	1c00006b 	stcne	0, cr0, [r0], {107}	; 0x6b
    9e60:	000031e4 	andeq	r3, r0, r4, ror #3
    9e64:	b404d101 	strlt	sp, [r4], #-257	; 0x101
    9e68:	a2000000 	andge	r0, r0, #0
    9e6c:	1e00006b 	cdpne	0, 0, cr0, cr0, cr11, {3}
    9e70:	00002fda 	ldrdeq	r2, [r0], -sl
    9e74:	b404d201 	strlt	sp, [r4], #-513	; 0x201
    9e78:	01000000 	mrseq	r0, (UNDEF: 0)
    9e7c:	4b1d0050 	blmi	749fc4 <_Min_Stack_Size+0x749bc4>
    9e80:	01000031 	tsteq	r0, r1, lsr r0
    9e84:	00e6050f 	rsceq	r0, r6, pc, lsl #10
    9e88:	40c80000 	sbcmi	r0, r8, r0
    9e8c:	000c0800 	andeq	r0, ip, r0, lsl #16
    9e90:	9c010000 	stcls	0, cr0, [r1], {-0}
    9e94:	00000a57 	andeq	r0, r0, r7, asr sl
    9e98:	0030571b 	eorseq	r5, r0, fp, lsl r7
    9e9c:	050f0100 	streq	r0, [pc, #-256]	; 9da4 <_Min_Stack_Size+0x99a4>
    9ea0:	0000048b 	andeq	r0, r0, fp, lsl #9
    9ea4:	00006bd7 	ldrdeq	r6, [r0], -r7
    9ea8:	002f891a 	eoreq	r8, pc, sl, lsl r9	; <UNPREDICTABLE>
    9eac:	050f0100 	streq	r0, [pc, #-256]	; 9db4 <_Min_Stack_Size+0x99b4>
    9eb0:	0000009e 	muleq	r0, lr, r0
    9eb4:	101c5101 	andsne	r5, ip, r1, lsl #2
    9eb8:	01000026 	tsteq	r0, r6, lsr #32
    9ebc:	00e60511 	rsceq	r0, r6, r1, lsl r5
    9ec0:	6bf80000 	blvs	ffe09ec8 <_estack+0xdfdd9ec8>
    9ec4:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    9ec8:	00002fe5 	andeq	r2, r0, r5, ror #31
    9ecc:	d4054001 	strle	r4, [r5], #-1
    9ed0:	08080040 	stmdaeq	r8, {r6}
    9ed4:	01000000 	mrseq	r0, (UNDEF: 0)
    9ed8:	000a8c9c 	muleq	sl, ip, ip
    9edc:	30571a00 	subscc	r1, r7, r0, lsl #20
    9ee0:	40010000 	andmi	r0, r1, r0
    9ee4:	00048b05 	andeq	r8, r4, r5, lsl #22
    9ee8:	1b500100 	blne	140a2f0 <_Min_Stack_Size+0x1409ef0>
    9eec:	00002f89 	andeq	r2, r0, r9, lsl #31
    9ef0:	9e054001 	cdpls	0, 0, cr4, cr5, cr1, {0}
    9ef4:	20000000 	andcs	r0, r0, r0
    9ef8:	0000006c 	andeq	r0, r0, ip, rrx
    9efc:	0030d81d 	eorseq	sp, r0, sp, lsl r8
    9f00:	05620100 	strbeq	r0, [r2, #-256]!	; 0x100
    9f04:	000000f2 	strdeq	r0, [r0], -r2
    9f08:	080040dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, lr}
    9f0c:	0000004c 	andeq	r0, r0, ip, asr #32
    9f10:	0b079c01 	bleq	1f0f1c <_Min_Stack_Size+0x1f0b1c>
    9f14:	571b0000 	ldrpl	r0, [fp, -r0]
    9f18:	01000030 	tsteq	r0, r0, lsr r0
    9f1c:	048b0562 	streq	r0, [fp], #1378	; 0x562
    9f20:	6c410000 	marvs	acc0, r0, r1
    9f24:	491b0000 	ldmdbmi	fp, {}	; <UNPREDICTABLE>
    9f28:	0100002e 	tsteq	r0, lr, lsr #32
    9f2c:	009e0562 	addseq	r0, lr, r2, ror #10
    9f30:	6c860000 	stcvs	0, cr0, [r6], {0}
    9f34:	ba1c0000 	blt	709f3c <_Min_Stack_Size+0x709b3c>
    9f38:	01000030 	tsteq	r0, r0, lsr r0
    9f3c:	00b40564 	adcseq	r0, r4, r4, ror #10
    9f40:	6cb20000 	ldcvs	0, cr0, [r2]
    9f44:	e41c0000 	ldr	r0, [ip], #-0
    9f48:	01000031 	tsteq	r0, r1, lsr r0
    9f4c:	00b40564 	adcseq	r0, r4, r4, ror #10
    9f50:	6d1f0000 	ldcvs	0, cr0, [pc, #-0]	; 9f58 <_Min_Stack_Size+0x9b58>
    9f54:	fd1c0000 	ldc2	0, cr0, [ip, #-0]
    9f58:	01000031 	tsteq	r0, r1, lsr r0
    9f5c:	00b40564 	adcseq	r0, r4, r4, ror #10
    9f60:	6d7d0000 	ldclvs	0, cr0, [sp, #-0]
    9f64:	101c0000 	andsne	r0, ip, r0
    9f68:	01000026 	tsteq	r0, r6, lsr #32
    9f6c:	00f20565 	rscseq	r0, r2, r5, ror #10
    9f70:	6ddd0000 	ldclvs	0, cr0, [sp]
    9f74:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    9f78:	00002f40 	andeq	r2, r0, r0, asr #30
    9f7c:	2805ac01 	stmdacs	r5, {r0, sl, fp, sp, pc}
    9f80:	10080041 	andne	r0, r8, r1, asr #32
    9f84:	01000000 	mrseq	r0, (UNDEF: 0)
    9f88:	000b589c 	muleq	fp, ip, r8
    9f8c:	30571a00 	subscc	r1, r7, r0, lsl #20
    9f90:	ac010000 	stcge	0, cr0, [r1], {-0}
    9f94:	00048b05 	andeq	r8, r4, r5, lsl #22
    9f98:	1b500100 	blne	140a3a0 <_Min_Stack_Size+0x1409fa0>
    9f9c:	00002e49 	andeq	r2, r0, r9, asr #28
    9fa0:	9e05ac01 	cdpls	12, 0, cr10, cr5, cr1, {0}
    9fa4:	1f000000 	svcne	0x00000000
    9fa8:	1c00006e 	stcne	0, cr0, [r0], {110}	; 0x6e
    9fac:	000030ba 	strheq	r3, [r0], -sl
    9fb0:	9e05ae01 	cdpls	14, 0, cr10, cr5, cr1, {0}
    9fb4:	40000000 	andmi	r0, r0, r0
    9fb8:	1f00006e 	svcne	0x0000006e
    9fbc:	000031e4 	andeq	r3, r0, r4, ror #3
    9fc0:	9e05ae01 	cdpls	14, 0, cr10, cr5, cr1, {0}
    9fc4:	00000000 	andeq	r0, r0, r0
    9fc8:	00041b20 	andeq	r1, r4, r0, lsr #22
    9fcc:	06a70700 	strteq	r0, [r7], r0, lsl #14
    9fd0:	000000cb 	andeq	r0, r0, fp, asr #1
    9fd4:	00273421 	eoreq	r3, r7, r1, lsr #8
    9fd8:	02490500 	subeq	r0, r9, #0, 10
    9fdc:	00000b7b 	andeq	r0, r0, fp, ror fp
    9fe0:	0000b422 	andeq	fp, r0, r2, lsr #8
    9fe4:	01142200 	tsteq	r4, r0, lsl #4
    9fe8:	21000000 	mrscs	r0, (UNDEF: 0)
    9fec:	00002a70 	andeq	r2, r0, r0, ror sl
    9ff0:	92024a05 	andls	r4, r2, #20480	; 0x5000
    9ff4:	2200000b 	andcs	r0, r0, #11
    9ff8:	000000b4 	strheq	r0, [r0], -r4
    9ffc:	00011422 	andeq	r1, r1, r2, lsr #8
    a000:	3d210000 	stccc	0, cr0, [r1, #-0]
    a004:	0500002c 	streq	r0, [r0, #-44]	; 0x2c
    a008:	0ba40232 	bleq	fe90a8d8 <_estack+0xde8da8d8>
    a00c:	a4220000 	strtge	r0, [r2], #-0
    a010:	0000000b 	andeq	r0, r0, fp
    a014:	02230415 	eoreq	r0, r3, #352321536	; 0x15000000
    a018:	d4000000 	strle	r0, [r0], #-0
    a01c:	04000002 	streq	r0, [r0], #-2
    a020:	001ed300 	andseq	sp, lr, r0, lsl #6
    a024:	f3010400 	vshl.u8	d0, d0, d1
    a028:	01000002 	tsteq	r0, r2
    a02c:	0000331e 	andeq	r3, r0, lr, lsl r3
    a030:	00001148 	andeq	r1, r0, r8, asr #2
    a034:	00000000 	andeq	r0, r0, r0
    a038:	000041c0 	andeq	r4, r0, r0, asr #3
    a03c:	02060102 	andeq	r0, r6, #-2147483648	; 0x80000000
    a040:	03000002 	movweq	r0, #2
    a044:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    a048:	00331d02 	eorseq	r1, r3, r2, lsl #26
    a04c:	01020000 	mrseq	r0, (UNDEF: 2)
    a050:	00020008 	andeq	r0, r2, r8
    a054:	05020200 	streq	r0, [r2, #-512]	; 0x200
    a058:	00000038 	andeq	r0, r0, r8, lsr r0
    a05c:	aa070202 	bge	1ca86c <_Min_Stack_Size+0x1ca46c>
    a060:	03000002 	movweq	r0, #2
    a064:	0000044c 	andeq	r0, r0, ip, asr #8
    a068:	00533f02 	subseq	r3, r3, r2, lsl #30
    a06c:	04020000 	streq	r0, [r2], #-0
    a070:	00015d05 	andeq	r5, r1, r5, lsl #26
    a074:	00890300 	addeq	r0, r9, r0, lsl #6
    a078:	41020000 	mrsmi	r0, (UNDEF: 2)
    a07c:	00000065 	andeq	r0, r0, r5, rrx
    a080:	1d070402 	cfstrsne	mvf0, [r7, #-8]
    a084:	02000002 	andeq	r0, r0, #2
    a088:	01580508 	cmpeq	r8, r8, lsl #10
    a08c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    a090:	00021807 	andeq	r1, r2, r7, lsl #16
    a094:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    a098:	00746e69 	rsbseq	r6, r4, r9, ror #28
    a09c:	22070402 	andcs	r0, r7, #33554432	; 0x2000000
    a0a0:	03000002 	movweq	r0, #2
    a0a4:	000005e1 	andeq	r0, r0, r1, ror #11
    a0a8:	00282a03 	eoreq	r2, r8, r3, lsl #20
    a0ac:	4e030000 	cdpmi	0, 0, cr0, cr3, cr0, {0}
    a0b0:	03000004 	movweq	r0, #4
    a0b4:	00004841 	andeq	r4, r0, r1, asr #16
    a0b8:	008b0300 	addeq	r0, fp, r0, lsl #6
    a0bc:	42030000 	andmi	r0, r3, #0
    a0c0:	0000005a 	andeq	r0, r0, sl, asr r0
    a0c4:	42070402 	andmi	r0, r7, #33554432	; 0x2000000
    a0c8:	05000000 	streq	r0, [r0, #-0]
    a0cc:	0000009e 	muleq	r0, lr, r0
    a0d0:	00009e06 	andeq	r9, r0, r6, lsl #28
    a0d4:	0000c500 	andeq	ip, r0, r0, lsl #10
    a0d8:	00a90700 	adceq	r0, r9, r0, lsl #14
    a0dc:	00010000 	andeq	r0, r1, r0
    a0e0:	00009e06 	andeq	r9, r0, r6, lsl #28
    a0e4:	0000d500 	andeq	sp, r0, r0, lsl #10
    a0e8:	00a90700 	adceq	r0, r9, r0, lsl #14
    a0ec:	00030000 	andeq	r0, r3, r0
    a0f0:	00009305 	andeq	r9, r0, r5, lsl #6
    a0f4:	04010800 	streq	r0, [r1], #-2048	; 0x800
    a0f8:	00f001f7 	ldrshteq	r0, [r0], #23
    a0fc:	31090000 	mrscc	r0, (UNDEF: 9)
    a100:	00000025 	andeq	r0, r0, r5, lsr #32
    a104:	5445530a 	strbpl	r5, [r5], #-778	; 0x30a
    a108:	0b000100 	bleq	a510 <_Min_Stack_Size+0xa110>
    a10c:	00003b3f 	andeq	r3, r0, pc, lsr fp
    a110:	da01f704 	ble	87d28 <_Min_Stack_Size+0x87928>
    a114:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a118:	01f90401 	mvnseq	r0, r1, lsl #8
    a11c:	00000112 	andeq	r0, r0, r2, lsl r1
    a120:	0002a209 	andeq	sl, r2, r9, lsl #4
    a124:	b7090000 	strlt	r0, [r9, -r0]
    a128:	01000000 	mrseq	r0, (UNDEF: 0)
    a12c:	04910b00 	ldreq	r0, [r1], #2816	; 0xb00
    a130:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    a134:	0000fc01 	andeq	pc, r0, r1, lsl #24
    a138:	04240c00 	strteq	r0, [r4], #-3072	; 0xc00
    a13c:	016903e6 	smultteq	r9, r6, r3
    a140:	6c0d0000 	stcvs	0, cr0, [sp], {-0}
    a144:	04000032 	streq	r0, [r0], #-50	; 0x32
    a148:	00b003e8 	adcseq	r0, r0, r8, ror #7
    a14c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    a150:	00434d50 	subeq	r4, r3, r0, asr sp
    a154:	b003e904 	andlt	lr, r3, r4, lsl #18
    a158:	04000000 	streq	r0, [r0], #-0
    a15c:	0032b00d 	eorseq	fp, r2, sp
    a160:	03ea0400 	mvneq	r0, #0, 8
    a164:	00000169 	andeq	r0, r0, r9, ror #2
    a168:	328d0d08 	addcc	r0, sp, #8, 26	; 0x200
    a16c:	eb040000 	bl	10a174 <_Min_Stack_Size+0x109d74>
    a170:	0000b503 	andeq	fp, r0, r3, lsl #10
    a174:	660d1800 	strvs	r1, [sp], -r0, lsl #16
    a178:	04000032 	streq	r0, [r0], #-50	; 0x32
    a17c:	00b003ec 	adcseq	r0, r0, ip, ror #7
    a180:	00200000 	eoreq	r0, r0, r0
    a184:	0000c505 	andeq	ip, r0, r5, lsl #10
    a188:	32fa0b00 	rscscc	r0, sl, #0, 22
    a18c:	ed040000 	stc	0, cr0, [r4, #-0]
    a190:	00011e03 	andeq	r1, r1, r3, lsl #28
    a194:	32420f00 	subcc	r0, r2, #0, 30
    a198:	64010000 	strvs	r0, [r1], #-0
    a19c:	08004138 	stmdaeq	r0, {r3, r4, r5, r8, lr}
    a1a0:	0000001a 	andeq	r0, r0, sl, lsl r0
    a1a4:	01c09c01 	biceq	r9, r0, r1, lsl #24
    a1a8:	44100000 	ldrmi	r0, [r0], #-0
    a1ac:	c4080041 	strgt	r0, [r8], #-65	; 0x41
    a1b0:	a9000002 	stmdbge	r0, {r1}
    a1b4:	11000001 	tstne	r0, r1
    a1b8:	31015101 	tstcc	r1, r1, lsl #2
    a1bc:	03500111 	cmpeq	r0, #1073741828	; 0x40000004
    a1c0:	0040000a 	subeq	r0, r0, sl
    a1c4:	00415212 	subeq	r5, r1, r2, lsl r2
    a1c8:	0002c408 	andeq	ip, r2, r8, lsl #8
    a1cc:	51011100 	mrspl	r1, (UNDEF: 17)
    a1d0:	01113001 	tsteq	r1, r1
    a1d4:	000a0350 	andeq	r0, sl, r0, asr r3
    a1d8:	0f000040 	svceq	0x00000040
    a1dc:	000033ad 	andeq	r3, r0, sp, lsr #7
    a1e0:	41547601 	cmpmi	r4, r1, lsl #12
    a1e4:	000c0800 	andeq	r0, ip, r0, lsl #16
    a1e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    a1ec:	000001e3 	andeq	r0, r0, r3, ror #3
    a1f0:	0032e713 	eorseq	lr, r2, r3, lsl r7
    a1f4:	88760100 	ldmdahi	r6!, {r8}^
    a1f8:	01000000 	mrseq	r0, (UNDEF: 0)
    a1fc:	960f0050 			; <UNDEFINED> instruction: 0x960f0050
    a200:	01000032 	tsteq	r0, r2, lsr r0
    a204:	0041608b 	subeq	r6, r1, fp, lsl #1
    a208:	00000c08 	andeq	r0, r0, r8, lsl #24
    a20c:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    a210:	13000002 	movwne	r0, #2
    a214:	00002346 	andeq	r2, r0, r6, asr #6
    a218:	01128b01 	tsteq	r2, r1, lsl #22
    a21c:	50010000 	andpl	r0, r1, r0
    a220:	32500f00 	subscc	r0, r0, #0, 30
    a224:	a2010000 	andge	r0, r1, #0
    a228:	0800416c 	stmdaeq	r0, {r2, r3, r5, r6, r8, lr}
    a22c:	0000002e 	andeq	r0, r0, lr, lsr #32
    a230:	02499c01 	subeq	r9, r9, #256	; 0x100
    a234:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    a238:	01000033 	tsteq	r0, r3, lsr r0
    a23c:	000088a2 	andeq	r8, r0, r2, lsr #17
    a240:	006e6700 	rsbeq	r6, lr, r0, lsl #14
    a244:	32b71400 	adcscc	r1, r7, #0, 8
    a248:	a2010000 	andge	r0, r1, #0
    a24c:	00000088 	andeq	r0, r0, r8, lsl #1
    a250:	00006e88 	andeq	r6, r0, r8, lsl #29
    a254:	706d7415 	rsbvc	r7, sp, r5, lsl r4
    a258:	9ea40100 	fdvlss	f0, f4, f0
    a25c:	a9000000 	stmdbge	r0, {}	; <UNPREDICTABLE>
    a260:	0000006e 	andeq	r0, r0, lr, rrx
    a264:	0032c70f 	eorseq	ip, r2, pc, lsl #14
    a268:	9cb70100 	ldflss	f0, [r7]
    a26c:	0c080041 	stceq	0, cr0, [r8], {65}	; 0x41
    a270:	01000000 	mrseq	r0, (UNDEF: 0)
    a274:	00026c9c 	muleq	r2, ip, ip
    a278:	32731300 	rsbscc	r1, r3, #0, 6
    a27c:	b7010000 	strlt	r0, [r1, -r0]
    a280:	0000009e 	muleq	r0, lr, r0
    a284:	0f005001 	svceq	0x00005001
    a288:	00003206 	andeq	r3, r0, r6, lsl #4
    a28c:	41a8c801 			; <UNDEFINED> instruction: 0x41a8c801
    a290:	000c0800 	andeq	r0, ip, r0, lsl #16
    a294:	9c010000 	stcls	0, cr0, [r1], {-0}
    a298:	0000028f 	andeq	r0, r0, pc, lsl #5
    a29c:	00234613 	eoreq	r4, r3, r3, lsl r6
    a2a0:	12c80100 	sbcne	r0, r8, #0, 2
    a2a4:	01000001 	tsteq	r0, r1
    a2a8:	21160050 	tstcs	r6, r0, asr r0
    a2ac:	01000032 	tsteq	r0, r2, lsr r0
    a2b0:	0000f0d5 	ldrdeq	pc, [r0], -r5
    a2b4:	0041b400 	subeq	fp, r1, r0, lsl #8
    a2b8:	00001008 	andeq	r1, r0, r8
    a2bc:	b89c0100 	ldmlt	ip, {r8}
    a2c0:	17000002 	strne	r0, [r0, -r2]
    a2c4:	00002610 	andeq	r2, r0, r0, lsl r6
    a2c8:	00f0d701 	rscseq	sp, r0, r1, lsl #14
    a2cc:	6ee60000 	cdpvs	0, 14, cr0, cr6, cr0, {0}
    a2d0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    a2d4:	0000041b 	andeq	r0, r0, fp, lsl r4
    a2d8:	d506a705 	strle	sl, [r6, #-1797]	; 0x705
    a2dc:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    a2e0:	00002a70 	andeq	r2, r0, r0, ror sl
    a2e4:	1a024a06 	bne	9cb04 <_Min_Stack_Size+0x9c704>
    a2e8:	0000009e 	muleq	r0, lr, r0
    a2ec:	0001121a 	andeq	r1, r1, sl, lsl r2
    a2f0:	4f000000 	svcmi	0x00000000
    a2f4:	0400000c 	streq	r0, [r0], #-12
    a2f8:	00203a00 	eoreq	r3, r0, r0, lsl #20
    a2fc:	f3010400 	vshl.u8	d0, d0, d1
    a300:	01000002 	tsteq	r0, r2
    a304:	00003530 	andeq	r3, r0, r0, lsr r5
    a308:	00001188 	andeq	r1, r0, r8, lsl #3
    a30c:	00000000 	andeq	r0, r0, r0
    a310:	000044dd 	ldrdeq	r4, [r0], -sp
    a314:	18070802 	stmdane	r7, {r1, fp}
    a318:	02000002 	andeq	r0, r0, #2
    a31c:	02220704 	eoreq	r0, r2, #4, 14	; 0x100000
    a320:	01020000 	mrseq	r0, (UNDEF: 2)
    a324:	00020206 	andeq	r0, r2, r6, lsl #4
    a328:	05df0300 	ldrbeq	r0, [pc, #768]	; a630 <_Min_Stack_Size+0xa230>
    a32c:	1d020000 	stcne	0, cr0, [r2, #-0]
    a330:	00000041 	andeq	r0, r0, r1, asr #32
    a334:	00080102 	andeq	r0, r8, r2, lsl #2
    a338:	02000002 	andeq	r0, r0, #2
    a33c:	00380502 	eorseq	r0, r8, r2, lsl #10
    a340:	94030000 	strls	r0, [r3], #-0
    a344:	02000000 	andeq	r0, r0, #0
    a348:	00005a2b 	andeq	r5, r0, fp, lsr #20
    a34c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    a350:	000002aa 	andeq	r0, r0, sl, lsr #5
    a354:	00044c03 	andeq	r4, r4, r3, lsl #24
    a358:	6c3f0200 	lfmvs	f0, 4, [pc], #-0	; a360 <_Min_Stack_Size+0x9f60>
    a35c:	02000000 	andeq	r0, r0, #0
    a360:	015d0504 	cmpeq	sp, r4, lsl #10
    a364:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
    a368:	02000000 	andeq	r0, r0, #0
    a36c:	00007e41 	andeq	r7, r0, r1, asr #28
    a370:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a374:	0000021d 	andeq	r0, r0, sp, lsl r2
    a378:	58050802 	stmdapl	r5, {r1, fp}
    a37c:	04000001 	streq	r0, [r0], #-1
    a380:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    a384:	e1030074 	hlt	0x3004
    a388:	03000005 	movweq	r0, #5
    a38c:	0000362a 	andeq	r3, r0, sl, lsr #12
    a390:	00960300 	addseq	r0, r6, r0, lsl #6
    a394:	36030000 	strcc	r0, [r3], -r0
    a398:	0000004f 	andeq	r0, r0, pc, asr #32
    a39c:	00044e03 	andeq	r4, r4, r3, lsl #28
    a3a0:	61410300 	mrsvs	r0, (UNDEF: 113)
    a3a4:	03000000 	movweq	r0, #0
    a3a8:	0000008b 	andeq	r0, r0, fp, lsl #1
    a3ac:	00734203 	rsbseq	r4, r3, r3, lsl #4
    a3b0:	04020000 	streq	r0, [r2], #-0
    a3b4:	00004207 	andeq	r4, r0, r7, lsl #4
    a3b8:	00b40500 	adcseq	r0, r4, r0, lsl #10
    a3bc:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
    a3c0:	05000000 	streq	r0, [r0, #-0]
    a3c4:	000000a9 	andeq	r0, r0, r9, lsr #1
    a3c8:	f7040106 			; <UNDEFINED> instruction: 0xf7040106
    a3cc:	0000eb01 	andeq	lr, r0, r1, lsl #22
    a3d0:	25310700 	ldrcs	r0, [r1, #-1792]!	; 0x700
    a3d4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a3d8:	00544553 	subseq	r4, r4, r3, asr r5
    a3dc:	3f090001 	svccc	0x00090001
    a3e0:	0400003b 	streq	r0, [r0], #-59	; 0x3b
    a3e4:	00d501f7 	ldrsheq	r0, [r5], #23
    a3e8:	b6090000 	strlt	r0, [r9], -r0
    a3ec:	0400003a 	streq	r0, [r0], #-58	; 0x3a
    a3f0:	00d501f7 	ldrsheq	r0, [r5], #23
    a3f4:	01060000 	mrseq	r0, (UNDEF: 6)
    a3f8:	1901f904 	stmdbne	r1, {r2, r8, fp, ip, sp, lr, pc}
    a3fc:	07000001 	streq	r0, [r0, -r1]
    a400:	000002a2 	andeq	r0, r0, r2, lsr #5
    a404:	00b70700 	adcseq	r0, r7, r0, lsl #14
    a408:	00010000 	andeq	r0, r1, r0
    a40c:	00049109 	andeq	r9, r4, r9, lsl #2
    a410:	01f90400 	mvnseq	r0, r0, lsl #8
    a414:	00000103 	andeq	r0, r0, r3, lsl #2
    a418:	fc040106 	stc2	1, cr0, [r4], {6}
    a41c:	00013b01 	andeq	r3, r1, r1, lsl #22
    a420:	2a230700 	bcs	8cc028 <_Min_Stack_Size+0x8cbc28>
    a424:	07000000 	streq	r0, [r0, -r0]
    a428:	00002d30 	andeq	r2, r0, r0, lsr sp
    a42c:	91090001 	tstls	r9, r1
    a430:	04000028 	streq	r0, [r0], #-40	; 0x28
    a434:	012501fc 	strdeq	r0, [r5, -ip]!
    a438:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    a43c:	5403f304 	strpl	pc, [r3], #-772	; 0x304
    a440:	0b000002 	bleq	a450 <_Min_Stack_Size+0xa050>
    a444:	00315243 	eorseq	r5, r1, r3, asr #4
    a448:	cb03f504 	blgt	107860 <_Min_Stack_Size+0x107460>
    a44c:	00000000 	andeq	r0, r0, r0
    a450:	00069f0c 	andeq	r9, r6, ip, lsl #30
    a454:	03f60400 	mvnseq	r0, #0, 8
    a458:	0000009e 	muleq	r0, lr, r0
    a45c:	52430b02 	subpl	r0, r3, #2048	; 0x800
    a460:	f7040032 			; <UNDEFINED> instruction: 0xf7040032
    a464:	0000cb03 	andeq	ip, r0, r3, lsl #22
    a468:	a90c0400 	stmdbge	ip, {sl}
    a46c:	04000006 	streq	r0, [r0], #-6
    a470:	009e03f8 			; <UNDEFINED> instruction: 0x009e03f8
    a474:	0c060000 	stceq	0, cr0, [r6], {-0}
    a478:	000034b8 			; <UNDEFINED> instruction: 0x000034b8
    a47c:	cb03f904 	blgt	108894 <_Min_Stack_Size+0x108494>
    a480:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a484:	0006b30c 	andeq	fp, r6, ip, lsl #6
    a488:	03fa0400 	mvnseq	r0, #0, 8
    a48c:	0000009e 	muleq	r0, lr, r0
    a490:	37ed0c0a 	strbcc	r0, [sp, sl, lsl #24]!
    a494:	fb040000 	blx	10a49e <_Min_Stack_Size+0x10a09e>
    a498:	0000cb03 	andeq	ip, r0, r3, lsl #22
    a49c:	950c0c00 	strls	r0, [ip, #-3072]	; 0xc00
    a4a0:	04000005 	streq	r0, [r0], #-5
    a4a4:	009e03fc 			; <UNDEFINED> instruction: 0x009e03fc
    a4a8:	0b0e0000 	bleq	38a4b0 <_Min_Stack_Size+0x38a0b0>
    a4ac:	04005244 	streq	r5, [r0], #-580	; 0x244
    a4b0:	00cb03fd 	strdeq	r0, [fp], #61	; 0x3d
    a4b4:	0c100000 	ldceq	0, cr0, [r0], {-0}
    a4b8:	000006c9 	andeq	r0, r0, r9, asr #13
    a4bc:	9e03fe04 	cdpls	14, 0, cr15, cr3, cr4, {0}
    a4c0:	12000000 	andne	r0, r0, #0
    a4c4:	3152530b 	cmpcc	r2, fp, lsl #6
    a4c8:	03ff0400 	mvnseq	r0, #0, 8
    a4cc:	000000cb 	andeq	r0, r0, fp, asr #1
    a4d0:	06d30c14 			; <UNDEFINED> instruction: 0x06d30c14
    a4d4:	00040000 	andeq	r0, r4, r0
    a4d8:	00009e04 	andeq	r9, r0, r4, lsl #28
    a4dc:	530b1600 	movwpl	r1, #46592	; 0xb600
    a4e0:	04003252 	streq	r3, [r0], #-594	; 0x252
    a4e4:	00cb0401 	sbceq	r0, fp, r1, lsl #8
    a4e8:	0c180000 	ldceq	0, cr0, [r8], {-0}
    a4ec:	000006dd 	ldrdeq	r0, [r0], -sp
    a4f0:	9e040204 	cdpls	2, 0, cr0, cr4, cr4, {0}
    a4f4:	1a000000 	bne	a4fc <_Min_Stack_Size+0xa0fc>
    a4f8:	5243430b 	subpl	r4, r3, #738197504	; 0x2c000000
    a4fc:	04030400 	streq	r0, [r3], #-1024	; 0x400
    a500:	000000cb 	andeq	r0, r0, fp, asr #1
    a504:	369f0c1c 			; <UNDEFINED> instruction: 0x369f0c1c
    a508:	04040000 	streq	r0, [r4], #-0
    a50c:	00009e04 	andeq	r9, r0, r4, lsl #28
    a510:	1a0c1e00 	bne	311d18 <_Min_Stack_Size+0x311918>
    a514:	04000034 	streq	r0, [r0], #-52	; 0x34
    a518:	00cb0405 	sbceq	r0, fp, r5, lsl #8
    a51c:	0c200000 	stceq	0, cr0, [r0], #-0
    a520:	000036a9 	andeq	r3, r0, r9, lsr #13
    a524:	9e040604 	cfmadd32ls	mvax0, mvfx0, mvfx4, mvfx4
    a528:	22000000 	andcs	r0, r0, #0
    a52c:	0034bd0c 	eorseq	fp, r4, ip, lsl #26
    a530:	04070400 	streq	r0, [r7], #-1024	; 0x400
    a534:	000000cb 	andeq	r0, r0, fp, asr #1
    a538:	36b30c24 	ldrtcc	r0, [r3], r4, lsr #24
    a53c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    a540:	00009e04 	andeq	r9, r0, r4, lsl #28
    a544:	09002600 	stmdbeq	r0, {r9, sl, sp}
    a548:	000034ee 	andeq	r3, r0, lr, ror #9
    a54c:	47040904 	strmi	r0, [r4, -r4, lsl #18]
    a550:	0d000001 	stceq	0, cr0, [r0, #-4]
    a554:	99300510 	ldmdbls	r0!, {r4, r8, sl}
    a558:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    a55c:	00002714 	andeq	r2, r0, r4, lsl r7
    a560:	00b43205 	adcseq	r3, r4, r5, lsl #4
    a564:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    a568:	000028d5 	ldrdeq	r2, [r0], -r5
    a56c:	00b43305 	adcseq	r3, r4, r5, lsl #6
    a570:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    a574:	00002bec 	andeq	r2, r0, ip, ror #23
    a578:	00b43405 	adcseq	r3, r4, r5, lsl #8
    a57c:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    a580:	000027e2 	andeq	r2, r0, r2, ror #15
    a584:	00b43505 	adcseq	r3, r4, r5, lsl #10
    a588:	000c0000 	andeq	r0, ip, r0
    a58c:	002d4603 	eoreq	r4, sp, r3, lsl #12
    a590:	60360500 	eorsvs	r0, r6, r0, lsl #10
    a594:	0d000002 	stceq	0, cr0, [r0, #-8]
    a598:	f5360610 			; <UNDEFINED> instruction: 0xf5360610
    a59c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    a5a0:	00003491 	muleq	r0, r1, r4
    a5a4:	00b43806 	adcseq	r3, r4, r6, lsl #16
    a5a8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    a5ac:	000034a0 	andeq	r3, r0, r0, lsr #9
    a5b0:	009e3b06 	addseq	r3, lr, r6, lsl #22
    a5b4:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    a5b8:	000035d0 	ldrdeq	r3, [r0], -r0
    a5bc:	009e3e06 	addseq	r3, lr, r6, lsl #28
    a5c0:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    a5c4:	000036bd 			; <UNDEFINED> instruction: 0x000036bd
    a5c8:	009e4106 	addseq	r4, lr, r6, lsl #2
    a5cc:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    a5d0:	000036d8 	ldrdeq	r3, [r0], -r8
    a5d4:	009e4406 	addseq	r4, lr, r6, lsl #8
    a5d8:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    a5dc:	00003708 	andeq	r3, r0, r8, lsl #14
    a5e0:	009e4706 	addseq	r4, lr, r6, lsl #14
    a5e4:	000c0000 	andeq	r0, ip, r0
    a5e8:	00367a03 	eorseq	r7, r6, r3, lsl #20
    a5ec:	a4490600 	strbge	r0, [r9], #-1536	; 0x600
    a5f0:	0f000002 	svceq	0x00000002
    a5f4:	00003642 	andeq	r3, r0, r2, asr #12
    a5f8:	41c48901 	bicmi	r8, r4, r1, lsl #18
    a5fc:	006c0800 	rsbeq	r0, ip, r0, lsl #16
    a600:	9c010000 	stcls	0, cr0, [r1], {-0}
    a604:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    a608:	00360410 	eorseq	r0, r6, r0, lsl r4
    a60c:	bd890100 	stflts	f0, [r9]
    a610:	0d000003 	stceq	0, cr0, [r0, #-12]
    a614:	1100006f 	tstne	r0, pc, rrx
    a618:	080041e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, lr}
    a61c:	00000c23 	andeq	r0, r0, r3, lsr #24
    a620:	0000033e 	andeq	r0, r0, lr, lsr r3
    a624:	01510112 	cmpeq	r1, r2, lsl r1
    a628:	50011231 	andpl	r1, r1, r1, lsr r2
    a62c:	24434003 	strbcs	r4, [r3], #-3
    a630:	41f21300 	mvnsmi	r1, r0, lsl #6
    a634:	0c230800 	stceq	8, cr0, [r3], #-0
    a638:	03580000 	cmpeq	r8, #0
    a63c:	01120000 	tsteq	r2, r0
    a640:	12300151 	eorsne	r0, r0, #1073741844	; 0x40000014
    a644:	40035001 	andmi	r5, r3, r1
    a648:	11002443 	tstne	r0, r3, asr #8
    a64c:	080041fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, lr}
    a650:	00000c23 	andeq	r0, r0, r3, lsr #24
    a654:	00000372 	andeq	r0, r0, r2, ror r3
    a658:	01510112 	cmpeq	r1, r2, lsl r1
    a65c:	50011231 	andpl	r1, r1, r1, lsr r2
    a660:	24414003 	strbcs	r4, [r1], #-3
    a664:	420a1300 	andmi	r1, sl, #0, 6
    a668:	0c230800 	stceq	8, cr0, [r3], #-0
    a66c:	038c0000 	orreq	r0, ip, #0
    a670:	01120000 	tsteq	r2, r0
    a674:	12300151 	eorsne	r0, r0, #1073741844	; 0x40000014
    a678:	40035001 	andmi	r5, r3, r1
    a67c:	11002441 	tstne	r0, r1, asr #8
    a680:	08004214 	stmdaeq	r0, {r2, r4, r9, lr}
    a684:	00000c23 	andeq	r0, r0, r3, lsr #24
    a688:	000003a6 	andeq	r0, r0, r6, lsr #7
    a68c:	01510112 	cmpeq	r1, r2, lsl r1
    a690:	50011231 	andpl	r1, r1, r1, lsr r2
    a694:	24424003 	strbcs	r4, [r2], #-3
    a698:	42221400 	eormi	r1, r2, #0, 8
    a69c:	0c230800 	stceq	8, cr0, [r3], #-0
    a6a0:	01120000 	tsteq	r2, r0
    a6a4:	12300151 	eorsne	r0, r0, #1073741844	; 0x40000014
    a6a8:	40035001 	andmi	r5, r3, r1
    a6ac:	00002442 	andeq	r2, r0, r2, asr #8
    a6b0:	02540415 	subseq	r0, r4, #352321536	; 0x15000000
    a6b4:	bc0f0000 	stclt	0, cr0, [pc], {-0}
    a6b8:	01000035 	tsteq	r0, r5, lsr r0
    a6bc:	004230b4 	strheq	r3, [r2], #-4
    a6c0:	0000e008 	andeq	lr, r0, r8
    a6c4:	519c0100 	orrspl	r0, ip, r0, lsl #2
    a6c8:	10000004 	andne	r0, r0, r4
    a6cc:	00003604 	andeq	r3, r0, r4, lsl #12
    a6d0:	03bdb401 			; <UNDEFINED> instruction: 0x03bdb401
    a6d4:	6f600000 	svcvs	0x00600000
    a6d8:	5a100000 	bpl	40a6e0 <_Min_Stack_Size+0x40a2e0>
    a6dc:	01000034 	tsteq	r0, r4, lsr r0
    a6e0:	000451b4 			; <UNDEFINED> instruction: 0x000451b4
    a6e4:	006f7e00 	rsbeq	r7, pc, r0, lsl #28
    a6e8:	27db1600 	ldrbcs	r1, [fp, r0, lsl #12]
    a6ec:	b6010000 	strlt	r0, [r1], -r0
    a6f0:	0000009e 	muleq	r0, lr, r0
    a6f4:	00006f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
    a6f8:	00346916 	eorseq	r6, r4, r6, lsl r9
    a6fc:	9eb60100 	frdlss	f0, f6, f0
    a700:	21000000 	mrscs	r0, (UNDEF: 0)
    a704:	16000070 			; <UNDEFINED> instruction: 0x16000070
    a708:	00003839 	andeq	r3, r0, r9, lsr r8
    a70c:	009eb701 	addseq	fp, lr, r1, lsl #14
    a710:	70840000 	addvc	r0, r4, r0
    a714:	91160000 	tstls	r6, r0
    a718:	01000036 	tsteq	r0, r6, lsr r0
    a71c:	0000b4b8 			; <UNDEFINED> instruction: 0x0000b4b8
    a720:	0070d100 	rsbseq	sp, r0, r0, lsl #2
    a724:	36cd1700 	strbcc	r1, [sp], r0, lsl #14
    a728:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    a72c:	00000299 	muleq	r0, r9, r2
    a730:	18589102 	ldmdane	r8, {r1, r8, ip, pc}^
    a734:	08004240 	stmdaeq	r0, {r6, r9, lr}
    a738:	00000c3a 	andeq	r0, r0, sl, lsr ip
    a73c:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
    a740:	0000007d 	andeq	r0, r0, sp, ror r0
    a744:	02f50415 	rscseq	r0, r5, #352321536	; 0x15000000
    a748:	a9190000 	ldmdbge	r9, {}	; <UNPREDICTABLE>
    a74c:	01000034 	tsteq	r0, r4, lsr r0
    a750:	43100121 	tstmi	r0, #1073741832	; 0x40000008
    a754:	00220800 	eoreq	r0, r2, r0, lsl #16
    a758:	9c010000 	stcls	0, cr0, [r1], {-0}
    a75c:	0000047c 	andeq	r0, r0, ip, ror r4
    a760:	00345a1a 	eorseq	r5, r4, sl, lsl sl
    a764:	01210100 	teqeq	r1, r0, lsl #2
    a768:	00000451 	andeq	r0, r0, r1, asr r4
    a76c:	19005001 	stmdbne	r0, {r0, ip, lr}
    a770:	00003697 	muleq	r0, r7, r6
    a774:	34013901 	strcc	r3, [r1], #-2305	; 0x901
    a778:	1a080043 	bne	20a88c <_Min_Stack_Size+0x20a48c>
    a77c:	01000000 	mrseq	r0, (UNDEF: 0)
    a780:	0004af9c 	muleq	r4, ip, pc	; <UNPREDICTABLE>
    a784:	36041a00 	strcc	r1, [r4], -r0, lsl #20
    a788:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    a78c:	0003bd01 	andeq	fp, r3, r1, lsl #26
    a790:	1a500100 	bne	140ab98 <_Min_Stack_Size+0x140a798>
    a794:	00002346 	andeq	r2, r0, r6, asr #6
    a798:	19013901 	stmdbne	r1, {r0, r8, fp, ip, sp}
    a79c:	01000001 	tsteq	r0, r1
    a7a0:	25190051 	ldrcs	r0, [r9, #-81]	; 0x51
    a7a4:	01000038 	tsteq	r0, r8, lsr r0
    a7a8:	43500156 	cmpmi	r0, #-2147483627	; 0x80000015
    a7ac:	001a0800 	andseq	r0, sl, r0, lsl #16
    a7b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    a7b4:	000004e2 	andeq	r0, r0, r2, ror #9
    a7b8:	0036041a 	eorseq	r0, r6, sl, lsl r4
    a7bc:	01560100 	cmpeq	r6, r0, lsl #2
    a7c0:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    a7c4:	461a5001 	ldrmi	r5, [sl], -r1
    a7c8:	01000023 	tsteq	r0, r3, lsr #32
    a7cc:	01190156 	tsteq	r9, r6, asr r1
    a7d0:	51010000 	mrspl	r0, (UNDEF: 1)
    a7d4:	34fa1900 	ldrbtcc	r1, [sl], #2304	; 0x900
    a7d8:	73010000 	movwvc	r0, #4096	; 0x1000
    a7dc:	00436c01 	subeq	r6, r3, r1, lsl #24
    a7e0:	00001208 	andeq	r1, r0, r8, lsl #4
    a7e4:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
    a7e8:	1a000005 	bne	a804 <_Min_Stack_Size+0xa404>
    a7ec:	00003604 	andeq	r3, r0, r4, lsl #12
    a7f0:	bd017301 	stclt	3, cr7, [r1, #-4]
    a7f4:	01000003 	tsteq	r0, r3
    a7f8:	37f21b50 	ubfxcc	r1, r0, #22, #19
    a7fc:	73010000 	movwvc	r0, #4096	; 0x1000
    a800:	00009e01 	andeq	r9, r0, r1, lsl #28
    a804:	00712200 	rsbseq	r2, r1, r0, lsl #4
    a808:	27db1c00 	ldrbcs	r1, [fp, r0, lsl #24]
    a80c:	75010000 	strvc	r0, [r1, #-0]
    a810:	00009e01 	andeq	r9, r0, r1, lsl #28
    a814:	00714300 	rsbseq	r4, r1, r0, lsl #6
    a818:	dc190000 	ldcle	0, cr0, [r9], {-0}
    a81c:	01000033 	tsteq	r0, r3, lsr r0
    a820:	4380018f 	orrmi	r0, r0, #-1073741789	; 0xc0000023
    a824:	001a0800 	andseq	r0, sl, r0, lsl #16
    a828:	9c010000 	stcls	0, cr0, [r1], {-0}
    a82c:	0000055a 	andeq	r0, r0, sl, asr r5
    a830:	0036041a 	eorseq	r0, r6, sl, lsl r4
    a834:	018f0100 	orreq	r0, pc, r0, lsl #2
    a838:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    a83c:	461a5001 	ldrmi	r5, [sl], -r1
    a840:	01000023 	tsteq	r0, r3, lsr #32
    a844:	0119018f 	tsteq	r9, pc, lsl #3
    a848:	51010000 	mrspl	r0, (UNDEF: 1)
    a84c:	38041900 	stmdacc	r4, {r8, fp, ip}
    a850:	a7010000 	strge	r0, [r1, -r0]
    a854:	00439c01 	subeq	r9, r3, r1, lsl #24
    a858:	00001a08 	andeq	r1, r0, r8, lsl #20
    a85c:	8d9c0100 	ldfhis	f0, [ip]
    a860:	1a000005 	bne	a87c <_Min_Stack_Size+0xa47c>
    a864:	00003604 	andeq	r3, r0, r4, lsl #12
    a868:	bd01a701 	stclt	7, cr10, [r1, #-4]
    a86c:	01000003 	tsteq	r0, r3
    a870:	23461a50 	movtcs	r1, #27216	; 0x6a50
    a874:	a7010000 	strge	r0, [r1, -r0]
    a878:	00011901 	andeq	r1, r1, r1, lsl #18
    a87c:	00510100 	subseq	r0, r1, r0, lsl #2
    a880:	0037d019 	eorseq	sp, r7, r9, lsl r0
    a884:	01c30100 	biceq	r0, r3, r0, lsl #2
    a888:	080043b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, lr}
    a88c:	00000012 	andeq	r0, r0, r2, lsl r0
    a890:	05d09c01 	ldrbeq	r9, [r0, #3073]	; 0xc01
    a894:	041a0000 	ldreq	r0, [sl], #-0
    a898:	01000036 	tsteq	r0, r6, lsr r0
    a89c:	03bd01c3 			; <UNDEFINED> instruction: 0x03bd01c3
    a8a0:	50010000 	andpl	r0, r1, r0
    a8a4:	0030b21b 	eorseq	fp, r0, fp, lsl r2
    a8a8:	01c30100 	biceq	r0, r3, r0, lsl #2
    a8ac:	00000093 	muleq	r0, r3, r0
    a8b0:	00007172 	andeq	r7, r0, r2, ror r1
    a8b4:	0036091a 	eorseq	r0, r6, sl, lsl r9
    a8b8:	01c30100 	biceq	r0, r3, r0, lsl #2
    a8bc:	00000093 	muleq	r0, r3, r0
    a8c0:	19005201 	stmdbne	r0, {r0, r9, ip, lr}
    a8c4:	00003779 	andeq	r3, r0, r9, ror r7
    a8c8:	cc01de01 	stcgt	14, cr13, [r1], {1}
    a8cc:	1a080043 	bne	20a9e0 <_Min_Stack_Size+0x20a5e0>
    a8d0:	01000000 	mrseq	r0, (UNDEF: 0)
    a8d4:	0006039c 	muleq	r6, ip, r3
    a8d8:	36041a00 	strcc	r1, [r4], -r0, lsl #20
    a8dc:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    a8e0:	0003bd01 	andeq	fp, r3, r1, lsl #26
    a8e4:	1a500100 	bne	140acec <_Min_Stack_Size+0x140a8ec>
    a8e8:	00002346 	andeq	r2, r0, r6, asr #6
    a8ec:	1901de01 	stmdbne	r1, {r0, r9, sl, fp, ip, lr, pc}
    a8f0:	01000001 	tsteq	r0, r1
    a8f4:	44190051 	ldrmi	r0, [r9], #-81	; 0x51
    a8f8:	01000034 	tsteq	r0, r4, lsr r0
    a8fc:	43e801f5 	mvnmi	r0, #1073741885	; 0x4000003d
    a900:	00120800 	andseq	r0, r2, r0, lsl #16
    a904:	9c010000 	stcls	0, cr0, [r1], {-0}
    a908:	00000648 	andeq	r0, r0, r8, asr #12
    a90c:	0036041a 	eorseq	r0, r6, sl, lsl r4
    a910:	01f50100 	mvnseq	r0, r0, lsl #2
    a914:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    a918:	b21b5001 	andslt	r5, fp, #1
    a91c:	01000030 	tsteq	r0, r0, lsr r0
    a920:	009301f5 			; <UNDEFINED> instruction: 0x009301f5
    a924:	71900000 	orrsvc	r0, r0, r0
    a928:	db1c0000 	blle	70a930 <_Min_Stack_Size+0x70a530>
    a92c:	01000027 	tsteq	r0, r7, lsr #32
    a930:	009e01f7 			; <UNDEFINED> instruction: 0x009e01f7
    a934:	71b10000 			; <UNDEFINED> instruction: 0x71b10000
    a938:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    a93c:	0000374d 	andeq	r3, r0, sp, asr #14
    a940:	fc021001 	stc2	0, cr1, [r2], {1}
    a944:	1a080043 	bne	20aa58 <_Min_Stack_Size+0x20a658>
    a948:	01000000 	mrseq	r0, (UNDEF: 0)
    a94c:	00067b9c 	muleq	r6, ip, fp
    a950:	36041a00 	strcc	r1, [r4], -r0, lsl #20
    a954:	10010000 	andne	r0, r1, r0
    a958:	0003bd02 	andeq	fp, r3, r2, lsl #26
    a95c:	1a500100 	bne	140ad64 <_Min_Stack_Size+0x140a964>
    a960:	00002346 	andeq	r2, r0, r6, asr #6
    a964:	19021001 	stmdbne	r2, {r0, ip}
    a968:	01000001 	tsteq	r0, r1
    a96c:	4d190051 	ldcmi	0, cr0, [r9, #-324]	; 0xfffffebc
    a970:	01000036 	tsteq	r0, r6, lsr r0
    a974:	44180228 	ldrmi	r0, [r8], #-552	; 0x228
    a978:	001a0800 	andseq	r0, sl, r0, lsl #16
    a97c:	9c010000 	stcls	0, cr0, [r1], {-0}
    a980:	000006ae 	andeq	r0, r0, lr, lsr #13
    a984:	0036041a 	eorseq	r0, r6, sl, lsl r4
    a988:	02280100 	eoreq	r0, r8, #0, 2
    a98c:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    a990:	461a5001 	ldrmi	r5, [sl], -r1
    a994:	01000023 	tsteq	r0, r3, lsr #32
    a998:	01190228 	tsteq	r9, r8, lsr #4
    a99c:	51010000 	mrspl	r0, (UNDEF: 1)
    a9a0:	37bb1900 	ldrcc	r1, [fp, r0, lsl #18]!
    a9a4:	42010000 	andmi	r0, r1, #0
    a9a8:	00443402 	subeq	r3, r4, r2, lsl #8
    a9ac:	00001a08 	andeq	r1, r0, r8, lsl #20
    a9b0:	e19c0100 	orrs	r0, ip, r0, lsl #2
    a9b4:	1a000006 	bne	a9d4 <_Min_Stack_Size+0xa5d4>
    a9b8:	00003604 	andeq	r3, r0, r4, lsl #12
    a9bc:	bd024201 	sfmlt	f4, 4, [r2, #-4]
    a9c0:	01000003 	tsteq	r0, r3
    a9c4:	23461a50 	movtcs	r1, #27216	; 0x6a50
    a9c8:	42010000 	andmi	r0, r1, #0
    a9cc:	00011902 	andeq	r1, r1, r2, lsl #18
    a9d0:	00510100 	subseq	r0, r1, r0, lsl #2
    a9d4:	0033f919 	eorseq	pc, r3, r9, lsl r9	; <UNPREDICTABLE>
    a9d8:	025a0100 	subseq	r0, sl, #0, 2
    a9dc:	08004450 	stmdaeq	r0, {r4, r6, sl, lr}
    a9e0:	0000001a 	andeq	r0, r0, sl, lsl r0
    a9e4:	07149c01 	ldreq	r9, [r4, -r1, lsl #24]
    a9e8:	041a0000 	ldreq	r0, [sl], #-0
    a9ec:	01000036 	tsteq	r0, r6, lsr r0
    a9f0:	03bd025a 			; <UNDEFINED> instruction: 0x03bd025a
    a9f4:	50010000 	andpl	r0, r1, r0
    a9f8:	0023461a 	eoreq	r4, r3, sl, lsl r6
    a9fc:	025a0100 	subseq	r0, sl, #0, 2
    aa00:	00000119 	andeq	r0, r0, r9, lsl r1
    aa04:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    aa08:	00003731 	andeq	r3, r0, r1, lsr r7
    aa0c:	6c027401 	cfstrsvs	mvf7, [r2], {1}
    aa10:	1e080044 	cdpne	0, 0, cr0, cr8, cr4, {2}
    aa14:	01000000 	mrseq	r0, (UNDEF: 0)
    aa18:	0007479c 	muleq	r7, ip, r7
    aa1c:	36041a00 	strcc	r1, [r4], -r0, lsl #20
    aa20:	74010000 	strvc	r0, [r1], #-0
    aa24:	0003bd02 	andeq	fp, r3, r2, lsl #26
    aa28:	1a500100 	bne	140ae30 <_Min_Stack_Size+0x140aa30>
    aa2c:	000035d0 	ldrdeq	r3, [r0], -r0
    aa30:	9e027401 	cdpls	4, 0, cr7, cr2, cr1, {0}
    aa34:	01000000 	mrseq	r0, (UNDEF: 0)
    aa38:	2d190051 	ldccs	0, cr0, [r9, #-324]	; 0xfffffebc
    aa3c:	01000034 	tsteq	r0, r4, lsr r0
    aa40:	448c029a 	strmi	r0, [ip], #666	; 0x29a
    aa44:	001e0800 	andseq	r0, lr, r0, lsl #16
    aa48:	9c010000 	stcls	0, cr0, [r1], {-0}
    aa4c:	0000077a 	andeq	r0, r0, sl, ror r7
    aa50:	0036041a 	eorseq	r0, r6, sl, lsl r4
    aa54:	029a0100 	addseq	r0, sl, #0, 2
    aa58:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    aa5c:	171a5001 	ldrne	r5, [sl, -r1]
    aa60:	01000036 	tsteq	r0, r6, lsr r0
    aa64:	009e029a 	umullseq	r0, lr, sl, r2
    aa68:	51010000 	mrspl	r0, (UNDEF: 1)
    aa6c:	34d91900 	ldrbcc	r1, [r9], #2304	; 0x900
    aa70:	b6010000 	strlt	r0, [r1], -r0
    aa74:	0044ac02 	subeq	sl, r4, r2, lsl #24
    aa78:	00001e08 	andeq	r1, r0, r8, lsl #28
    aa7c:	ad9c0100 	ldfges	f0, [ip]
    aa80:	1a000007 	bne	aaa4 <_Min_Stack_Size+0xa6a4>
    aa84:	00003604 	andeq	r3, r0, r4, lsl #12
    aa88:	bd02b601 	stclt	6, cr11, [r2, #-4]
    aa8c:	01000003 	tsteq	r0, r3
    aa90:	35f51a50 	ldrbcc	r1, [r5, #2640]!	; 0xa50
    aa94:	b6010000 	strlt	r0, [r1], -r0
    aa98:	00009e02 	andeq	r9, r0, r2, lsl #28
    aa9c:	00510100 	subseq	r0, r1, r0, lsl #2
    aaa0:	0035c519 	eorseq	ip, r5, r9, lsl r5
    aaa4:	02ce0100 	sbceq	r0, lr, #0, 2
    aaa8:	080044cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, lr}
    aaac:	0000001a 	andeq	r0, r0, sl, lsl r0
    aab0:	07e09c01 	strbeq	r9, [r0, r1, lsl #24]!
    aab4:	041a0000 	ldreq	r0, [sl], #-0
    aab8:	01000036 	tsteq	r0, r6, lsr r0
    aabc:	03bd02ce 			; <UNDEFINED> instruction: 0x03bd02ce
    aac0:	50010000 	andpl	r0, r1, r0
    aac4:	0023461a 	eoreq	r4, r3, sl, lsl r6
    aac8:	02ce0100 	sbceq	r0, lr, #0, 2
    aacc:	00000119 	andeq	r0, r0, r9, lsl r1
    aad0:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    aad4:	00003473 	andeq	r3, r0, r3, ror r4
    aad8:	e802f401 	stmda	r2, {r0, sl, ip, sp, lr, pc}
    aadc:	04080044 	streq	r0, [r8], #-68	; 0x44
    aae0:	01000000 	mrseq	r0, (UNDEF: 0)
    aae4:	0008139c 	muleq	r8, ip, r3
    aae8:	36041a00 	strcc	r1, [r4], -r0, lsl #20
    aaec:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    aaf0:	0003bd02 	andeq	fp, r3, r2, lsl #26
    aaf4:	1a500100 	bne	140aefc <_Min_Stack_Size+0x140aafc>
    aaf8:	0000347b 	andeq	r3, r0, fp, ror r4
    aafc:	9302f401 	movwls	pc, #9217	; 0x2401	; <UNPREDICTABLE>
    ab00:	01000000 	mrseq	r0, (UNDEF: 0)
    ab04:	ea1d0051 	b	74ac50 <_Min_Stack_Size+0x74a850>
    ab08:	01000036 	tsteq	r0, r6, lsr r0
    ab0c:	00930301 	addseq	r0, r3, r1, lsl #6
    ab10:	44ec0000 	strbtmi	r0, [ip], #0
    ab14:	00060800 	andeq	r0, r6, r0, lsl #16
    ab18:	9c010000 	stcls	0, cr0, [r1], {-0}
    ab1c:	0000083e 	andeq	r0, r0, lr, lsr r8
    ab20:	0036041b 	eorseq	r0, r6, fp, lsl r4
    ab24:	03010100 	movweq	r0, #4352	; 0x1100
    ab28:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    ab2c:	000071e1 	andeq	r7, r0, r1, ror #3
    ab30:	35e51900 	strbcc	r1, [r5, #2304]!	; 0x900
    ab34:	20010000 	andcs	r0, r1, r0
    ab38:	0044f403 	subeq	pc, r4, r3, lsl #8
    ab3c:	00001a08 	andeq	r1, r0, r8, lsl #20
    ab40:	719c0100 	orrsvc	r0, ip, r0, lsl #2
    ab44:	1a000008 	bne	ab6c <_Min_Stack_Size+0xa76c>
    ab48:	00003604 	andeq	r3, r0, r4, lsl #12
    ab4c:	bd032001 	stclt	0, cr2, [r3, #-4]
    ab50:	01000003 	tsteq	r0, r3
    ab54:	23461a50 	movtcs	r1, #27216	; 0x6a50
    ab58:	20010000 	andcs	r0, r1, r0
    ab5c:	00011903 	andeq	r1, r1, r3, lsl #18
    ab60:	00510100 	subseq	r0, r1, r0, lsl #2
    ab64:	00351219 	eorseq	r1, r5, r9, lsl r2
    ab68:	033f0100 	teqeq	pc, #0, 2
    ab6c:	08004510 	stmdaeq	r0, {r4, r8, sl, lr}
    ab70:	0000001e 	andeq	r0, r0, lr, lsl r0
    ab74:	08a49c01 	stmiaeq	r4!, {r0, sl, fp, ip, pc}
    ab78:	041a0000 	ldreq	r0, [sl], #-0
    ab7c:	01000036 	tsteq	r0, r6, lsr r0
    ab80:	03bd033f 			; <UNDEFINED> instruction: 0x03bd033f
    ab84:	50010000 	andpl	r0, r1, r0
    ab88:	00378f1a 	eorseq	r8, r7, sl, lsl pc
    ab8c:	033f0100 	teqeq	pc, #0, 2
    ab90:	0000009e 	muleq	r0, lr, r0
    ab94:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
    ab98:	00003480 	andeq	r3, r0, r0, lsl #9
    ab9c:	30035701 	andcc	r5, r3, r1, lsl #14
    aba0:	1a080045 	bne	20acbc <_Min_Stack_Size+0x20a8bc>
    aba4:	01000000 	mrseq	r0, (UNDEF: 0)
    aba8:	0008d79c 	muleq	r8, ip, r7
    abac:	36041a00 	strcc	r1, [r4], -r0, lsl #20
    abb0:	57010000 	strpl	r0, [r1, -r0]
    abb4:	0003bd03 	andeq	fp, r3, r3, lsl #26
    abb8:	1a500100 	bne	140afc0 <_Min_Stack_Size+0x140abc0>
    abbc:	00002346 	andeq	r2, r0, r6, asr #6
    abc0:	19035701 	stmdbne	r3, {r0, r8, r9, sl, ip, lr}
    abc4:	01000001 	tsteq	r0, r1
    abc8:	ee1d0051 	mrc	0, 0, r0, cr13, cr1, {2}
    abcc:	01000033 	tsteq	r0, r3, lsr r0
    abd0:	0093036d 	addseq	r0, r3, sp, ror #6
    abd4:	454c0000 	strbmi	r0, [ip, #-0]
    abd8:	00080800 	andeq	r0, r8, r0, lsl #16
    abdc:	9c010000 	stcls	0, cr0, [r1], {-0}
    abe0:	00000902 	andeq	r0, r0, r2, lsl #18
    abe4:	0036041b 	eorseq	r0, r6, fp, lsl r4
    abe8:	036d0100 	cmneq	sp, #0, 2
    abec:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    abf0:	00007202 	andeq	r7, r0, r2, lsl #4
    abf4:	366f1900 	strbtcc	r1, [pc], -r0, lsl #18
    abf8:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    abfc:	00455403 	subeq	r5, r5, r3, lsl #8
    ac00:	00001a08 	andeq	r1, r0, r8, lsl #20
    ac04:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
    ac08:	1a000009 	bne	ac34 <_Min_Stack_Size+0xa834>
    ac0c:	00003604 	andeq	r3, r0, r4, lsl #12
    ac10:	bd038e01 	stclt	14, cr8, [r3, #-4]
    ac14:	01000003 	tsteq	r0, r3
    ac18:	23461a50 	movtcs	r1, #27216	; 0x6a50
    ac1c:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    ac20:	00011903 	andeq	r1, r1, r3, lsl #18
    ac24:	00510100 	subseq	r0, r1, r0, lsl #2
    ac28:	0034c219 	eorseq	ip, r4, r9, lsl r2
    ac2c:	03a60100 			; <UNDEFINED> instruction: 0x03a60100
    ac30:	08004570 	stmdaeq	r0, {r4, r5, r6, r8, sl, lr}
    ac34:	0000001a 	andeq	r0, r0, sl, lsl r0
    ac38:	09689c01 	stmdbeq	r8!, {r0, sl, fp, ip, pc}^
    ac3c:	041a0000 	ldreq	r0, [sl], #-0
    ac40:	01000036 	tsteq	r0, r6, lsr r0
    ac44:	03bd03a6 			; <UNDEFINED> instruction: 0x03bd03a6
    ac48:	50010000 	andpl	r0, r1, r0
    ac4c:	0023461a 	eoreq	r4, r3, sl, lsl r6
    ac50:	03a60100 			; <UNDEFINED> instruction: 0x03a60100
    ac54:	00000119 	andeq	r0, r0, r9, lsl r1
    ac58:	1d005101 	stfnes	f5, [r0, #-4]
    ac5c:	00003720 	andeq	r3, r0, r0, lsr #14
    ac60:	9e043001 	cdpls	0, 0, cr3, cr4, cr1, {0}
    ac64:	8c000000 	stchi	0, cr0, [r0], {-0}
    ac68:	18080045 	stmdane	r8, {r0, r2, r6}
    ac6c:	01000000 	mrseq	r0, (UNDEF: 0)
    ac70:	0009b29c 	muleq	r9, ip, r2
    ac74:	36041b00 	strcc	r1, [r4], -r0, lsl #22
    ac78:	30010000 	andcc	r0, r1, r0
    ac7c:	0003bd04 	andeq	fp, r3, r4, lsl #26
    ac80:	00722300 	rsbseq	r2, r2, r0, lsl #6
    ac84:	340d1b00 	strcc	r1, [sp], #-2816	; 0xb00
    ac88:	30010000 	andcc	r0, r1, r0
    ac8c:	00009304 	andeq	r9, r0, r4, lsl #6
    ac90:	00724400 	rsbseq	r4, r2, r0, lsl #8
    ac94:	6d741e00 	ldclvs	14, cr1, [r4, #-0]
    ac98:	32010070 	andcc	r0, r1, #112	; 0x70
    ac9c:	0000c604 	andeq	ip, r0, r4, lsl #12
    aca0:	7c910200 	lfmvc	f0, 4, [r1], {0}
    aca4:	34201900 	strtcc	r1, [r0], #-2304	; 0x900
    aca8:	4b010000 	blmi	4acb0 <_Min_Stack_Size+0x4a8b0>
    acac:	0045a404 	subeq	sl, r5, r4, lsl #8
    acb0:	00001408 	andeq	r1, r0, r8, lsl #8
    acb4:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
    acb8:	1a000009 	bne	ace4 <_Min_Stack_Size+0xa8e4>
    acbc:	00003604 	andeq	r3, r0, r4, lsl #12
    acc0:	bd044b01 	vstrlt	d4, [r4, #-4]
    acc4:	01000003 	tsteq	r0, r3
    acc8:	368a1b50 	pkhtbcc	r1, sl, r0, asr #22
    accc:	4b010000 	blmi	4acd4 <_Min_Stack_Size+0x4a8d4>
    acd0:	00009e04 	andeq	r9, r0, r4, lsl #28
    acd4:	00726500 	rsbseq	r6, r2, r0, lsl #10
    acd8:	23461a00 	movtcs	r1, #27136	; 0x6a00
    acdc:	4b010000 	blmi	4ace4 <_Min_Stack_Size+0x4a8e4>
    ace0:	00011904 	andeq	r1, r1, r4, lsl #18
    ace4:	00520100 	subseq	r0, r2, r0, lsl #2
    ace8:	0036601d 	eorseq	r6, r6, sp, lsl r0
    acec:	04860100 	streq	r0, [r6], #256	; 0x100
    acf0:	0000013b 	andeq	r0, r0, fp, lsr r1
    acf4:	080045b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, lr}
    acf8:	00000018 	andeq	r0, r0, r8, lsl r0
    acfc:	0a6e9c01 	beq	1bb1d08 <_Min_Stack_Size+0x1bb1908>
    ad00:	041b0000 	ldreq	r0, [fp], #-0
    ad04:	01000036 	tsteq	r0, r6, lsr r0
    ad08:	03bd0486 			; <UNDEFINED> instruction: 0x03bd0486
    ad0c:	729f0000 	addsvc	r0, pc, #0
    ad10:	e01a0000 	ands	r0, sl, r0
    ad14:	01000036 	tsteq	r0, r6, lsr r0
    ad18:	00b40486 	adcseq	r0, r4, r6, lsl #9
    ad1c:	51010000 	mrspl	r0, (UNDEF: 1)
    ad20:	0037b11c 	eorseq	fp, r7, ip, lsl r1
    ad24:	04880100 	streq	r0, [r8], #256	; 0x100
    ad28:	000000b4 	strheq	r0, [r0], -r4
    ad2c:	000072c0 	andeq	r7, r0, r0, asr #5
    ad30:	0037601c 	eorseq	r6, r7, ip, lsl r0
    ad34:	04890100 	streq	r0, [r9], #256	; 0x100
    ad38:	000000b4 	strheq	r0, [r0], -r4
    ad3c:	00007314 	andeq	r7, r0, r4, lsl r3
    ad40:	0037661c 	eorseq	r6, r7, ip, lsl r6
    ad44:	04890100 	streq	r0, [r9], #256	; 0x100
    ad48:	000000b4 	strheq	r0, [r0], -r4
    ad4c:	0000734a 	andeq	r7, r0, sl, asr #6
    ad50:	0037721c 	eorseq	r7, r7, ip, lsl r2
    ad54:	048a0100 	streq	r0, [sl], #256	; 0x100
    ad58:	0000013b 	andeq	r0, r0, fp, lsr r1
    ad5c:	00007371 	andeq	r7, r0, r1, ror r3
    ad60:	36281d00 	strtcc	r1, [r8], -r0, lsl #26
    ad64:	b6010000 	strlt	r0, [r1], -r0
    ad68:	0000b404 	andeq	fp, r0, r4, lsl #8
    ad6c:	0045d000 	subeq	sp, r5, r0
    ad70:	00001008 	andeq	r1, r0, r8
    ad74:	c99c0100 	ldmibgt	ip, {r8}
    ad78:	1b00000a 	blne	ada8 <_Min_Stack_Size+0xa9a8>
    ad7c:	00003604 	andeq	r3, r0, r4, lsl #12
    ad80:	bd04b601 	stclt	6, cr11, [r4, #-4]
    ad84:	d1000003 	tstle	r0, r3
    ad88:	1c000073 	stcne	0, cr0, [r0], {115}	; 0x73
    ad8c:	000037b1 			; <UNDEFINED> instruction: 0x000037b1
    ad90:	b404b801 	strlt	fp, [r4], #-2049	; 0x801
    ad94:	f2000000 	vhadd.s8	d0, d0, d0
    ad98:	1c000073 	stcne	0, cr0, [r0], {115}	; 0x73
    ad9c:	00003760 	andeq	r3, r0, r0, ror #14
    ada0:	b404b901 	strlt	fp, [r4], #-2305	; 0x901
    ada4:	46000000 	strmi	r0, [r0], -r0
    ada8:	1c000074 	stcne	0, cr0, [r0], {116}	; 0x74
    adac:	00003766 	andeq	r3, r0, r6, ror #14
    adb0:	b404b901 	strlt	fp, [r4], #-2305	; 0x901
    adb4:	7c000000 	stcvc	0, cr0, [r0], {-0}
    adb8:	00000074 	andeq	r0, r0, r4, ror r0
    adbc:	00379f1d 	eorseq	r9, r7, sp, lsl pc
    adc0:	04ed0100 	strbteq	r0, [sp], #256	; 0x100
    adc4:	000000eb 	andeq	r0, r0, fp, ror #1
    adc8:	080045e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, lr}
    adcc:	00000036 	andeq	r0, r0, r6, lsr r0
    add0:	0b329c01 	bleq	cb1ddc <_Min_Stack_Size+0xcb19dc>
    add4:	041b0000 	ldreq	r0, [fp], #-0
    add8:	01000036 	tsteq	r0, r6, lsr r0
    addc:	03bd04ed 			; <UNDEFINED> instruction: 0x03bd04ed
    ade0:	74a30000 	strtvc	r0, [r3], #0
    ade4:	391b0000 	ldmdbcc	fp, {}	; <UNPREDICTABLE>
    ade8:	01000036 	tsteq	r0, r6, lsr r0
    adec:	00b404ed 	adcseq	r0, r4, sp, ror #9
    adf0:	74cf0000 	strbvc	r0, [pc], #0	; adf8 <_Min_Stack_Size+0xa9f8>
    adf4:	101c0000 	andsne	r0, ip, r0
    adf8:	01000026 	tsteq	r0, r6, lsr #32
    adfc:	00eb04ef 	rsceq	r0, fp, pc, ror #9
    ae00:	74ed0000 	strbtvc	r0, [sp], #0
    ae04:	de1f0000 	cdple	0, 1, cr0, cr15, cr0, {0}
    ae08:	01000035 	tsteq	r0, r5, lsr r0
    ae0c:	00c604f0 	strdeq	r0, [r6], #64	; 0x40
    ae10:	91020000 	mrsls	r0, (UNDEF: 2)
    ae14:	37e41f78 			; <UNDEFINED> instruction: 0x37e41f78
    ae18:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    ae1c:	0000c604 	andeq	ip, r0, r4, lsl #12
    ae20:	7c910200 	lfmvc	f0, 4, [r1], {0}
    ae24:	36fa1900 	ldrbtcc	r1, [sl], r0, lsl #18
    ae28:	3a010000 	bcc	4ae30 <_Min_Stack_Size+0x4aa30>
    ae2c:	00461805 	subeq	r1, r6, r5, lsl #16
    ae30:	00000808 	andeq	r0, r0, r8, lsl #16
    ae34:	779c0100 	ldrvc	r0, [ip, r0, lsl #2]
    ae38:	1a00000b 	bne	ae6c <_Min_Stack_Size+0xaa6c>
    ae3c:	00003604 	andeq	r3, r0, r4, lsl #12
    ae40:	bd053a01 	vstrlt	s6, [r5, #-4]
    ae44:	01000003 	tsteq	r0, r3
    ae48:	36391b50 			; <UNDEFINED> instruction: 0x36391b50
    ae4c:	3a010000 	bcc	4ae54 <_Min_Stack_Size+0x4aa54>
    ae50:	0000b405 	andeq	fp, r0, r5, lsl #8
    ae54:	00751f00 	rsbseq	r1, r5, r0, lsl #30
    ae58:	35281c00 	strcc	r1, [r8, #-3072]!	; 0xc00
    ae5c:	3c010000 	stccc	0, cr0, [r1], {-0}
    ae60:	0000b405 	andeq	fp, r0, r5, lsl #8
    ae64:	00754e00 	rsbseq	r4, r5, r0, lsl #28
    ae68:	151d0000 	ldrne	r0, [sp, #-0]
    ae6c:	01000038 	tsteq	r0, r8, lsr r0
    ae70:	00f7055c 	rscseq	r0, r7, ip, asr r5
    ae74:	46200000 	strtmi	r0, [r0], -r0
    ae78:	001c0800 	andseq	r0, ip, r0, lsl #16
    ae7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    ae80:	00000bd2 	ldrdeq	r0, [r0], -r2
    ae84:	0036041b 	eorseq	r0, r6, fp, lsl r4
    ae88:	055c0100 	ldrbeq	r0, [ip, #-256]	; 0x100
    ae8c:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    ae90:	00007591 	muleq	r0, r1, r5
    ae94:	00368a1b 	eorseq	r8, r6, fp, lsl sl
    ae98:	055c0100 	ldrbeq	r0, [ip, #-256]	; 0x100
    ae9c:	000000b4 	strheq	r0, [r0], -r4
    aea0:	000075b2 			; <UNDEFINED> instruction: 0x000075b2
    aea4:	0026101c 	eoreq	r1, r6, ip, lsl r0
    aea8:	055e0100 	ldrbeq	r0, [lr, #-256]	; 0x100
    aeac:	000000f7 	strdeq	r0, [r0], -r7
    aeb0:	000075ec 	andeq	r7, r0, ip, ror #11
    aeb4:	00376c1c 	eorseq	r6, r7, ip, lsl ip
    aeb8:	055f0100 	ldrbeq	r0, [pc, #-256]	; adc0 <_Min_Stack_Size+0xa9c0>
    aebc:	000000b4 	strheq	r0, [r0], -r4
    aec0:	0000760b 	andeq	r7, r0, fp, lsl #12
    aec4:	33c61900 	biccc	r1, r6, #0, 18
    aec8:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    aecc:	00463c05 	subeq	r3, r6, r5, lsl #24
    aed0:	00000808 	andeq	r0, r0, r8, lsl #16
    aed4:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    aed8:	1a00000c 	bne	af10 <_Min_Stack_Size+0xab10>
    aedc:	00003604 	andeq	r3, r0, r4, lsl #12
    aee0:	bd059801 	stclt	8, cr9, [r5, #-4]
    aee4:	01000003 	tsteq	r0, r3
    aee8:	368a1b50 	pkhtbcc	r1, sl, r0, asr #22
    aeec:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    aef0:	0000b405 	andeq	fp, r0, r5, lsl #8
    aef4:	00766a00 	rsbseq	r6, r6, r0, lsl #20
    aef8:	35281c00 	strcc	r1, [r8, #-3072]!	; 0xc00
    aefc:	9a010000 	bls	4af04 <_Min_Stack_Size+0x4ab04>
    af00:	0000b405 	andeq	fp, r0, r5, lsl #8
    af04:	00769900 	rsbseq	r9, r6, r0, lsl #18
    af08:	1b200000 	blne	80af10 <_Min_Stack_Size+0x80ab10>
    af0c:	07000004 	streq	r0, [r0, -r4]
    af10:	00d006a7 	sbcseq	r0, r0, r7, lsr #13
    af14:	34210000 	strtcc	r0, [r1], #-0
    af18:	05000027 	streq	r0, [r0, #-39]	; 0x27
    af1c:	0c3a0249 	lfmeq	f0, 4, [sl], #-292	; 0xfffffedc
    af20:	b4220000 	strtlt	r0, [r2], #-0
    af24:	22000000 	andcs	r0, r0, #0
    af28:	00000119 	andeq	r0, r0, r9, lsl r1
    af2c:	2c3d2100 	ldfcss	f2, [sp], #-0
    af30:	32050000 	andcc	r0, r5, #0
    af34:	000c4c02 	andeq	r4, ip, r2, lsl #24
    af38:	0c4c2200 	sfmeq	f2, 2, [ip], {-0}
    af3c:	15000000 	strne	r0, [r0, #-0]
    af40:	00029904 	andeq	r9, r2, r4, lsl #18
    af44:	07370000 	ldreq	r0, [r7, -r0]!
    af48:	00040000 	andeq	r0, r4, r0
    af4c:	00002227 	andeq	r2, r0, r7, lsr #4
    af50:	02f30104 	rscseq	r0, r3, #4, 2
    af54:	17010000 	strne	r0, [r1, -r0]
    af58:	a8000039 	stmdage	r0, {r0, r3, r4, r5}
    af5c:	00000012 	andeq	r0, r0, r2, lsl r0
    af60:	db000000 	blle	af68 <_Min_Stack_Size+0xab68>
    af64:	0200004a 	andeq	r0, r0, #74	; 0x4a
    af68:	02020601 	andeq	r0, r2, #1048576	; 0x100000
    af6c:	01020000 	mrseq	r0, (UNDEF: 2)
    af70:	00020008 	andeq	r0, r2, r8
    af74:	05020200 	streq	r0, [r2, #-512]	; 0x200
    af78:	00000038 	andeq	r0, r0, r8, lsr r0
    af7c:	00009403 	andeq	r9, r0, r3, lsl #8
    af80:	412b0200 	teqmi	fp, r0, lsl #4
    af84:	02000000 	andeq	r0, r0, #0
    af88:	02aa0702 	adceq	r0, sl, #524288	; 0x80000
    af8c:	4c030000 	stcmi	0, cr0, [r3], {-0}
    af90:	02000004 	andeq	r0, r0, #4
    af94:	0000533f 	andeq	r5, r0, pc, lsr r3
    af98:	05040200 	streq	r0, [r4, #-512]	; 0x200
    af9c:	0000015d 	andeq	r0, r0, sp, asr r1
    afa0:	00008903 	andeq	r8, r0, r3, lsl #18
    afa4:	65410200 	strbvs	r0, [r1, #-512]	; 0x200
    afa8:	02000000 	andeq	r0, r0, #0
    afac:	021d0704 	andseq	r0, sp, #4, 14	; 0x100000
    afb0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    afb4:	00015805 	andeq	r5, r1, r5, lsl #16
    afb8:	07080200 	streq	r0, [r8, -r0, lsl #4]
    afbc:	00000218 	andeq	r0, r0, r8, lsl r2
    afc0:	69050404 	stmdbvs	r5, {r2, sl}
    afc4:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    afc8:	02220704 	eoreq	r0, r2, #4, 14	; 0x100000
    afcc:	96030000 	strls	r0, [r3], -r0
    afd0:	03000000 	movweq	r0, #0
    afd4:	00003636 	andeq	r3, r0, r6, lsr r6
    afd8:	044e0300 	strbeq	r0, [lr], #-768	; 0x300
    afdc:	41030000 	mrsmi	r0, (UNDEF: 3)
    afe0:	00000048 	andeq	r0, r0, r8, asr #32
    afe4:	00008b03 	andeq	r8, r0, r3, lsl #22
    afe8:	5a420300 	bpl	108bbf0 <_Min_Stack_Size+0x108b7f0>
    afec:	02000000 	andeq	r0, r0, #0
    aff0:	00420704 	subeq	r0, r2, r4, lsl #14
    aff4:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
    aff8:	05000000 	streq	r0, [r0, #-0]
    affc:	00000093 	muleq	r0, r3, r0
    b000:	f7040106 			; <UNDEFINED> instruction: 0xf7040106
    b004:	0000d001 	andeq	sp, r0, r1
    b008:	25310700 	ldrcs	r0, [r1, #-1792]!	; 0x700
    b00c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b010:	00544553 	subseq	r4, r4, r3, asr r5
    b014:	3f090001 	svccc	0x00090001
    b018:	0400003b 	streq	r0, [r0], #-59	; 0x3b
    b01c:	00ba01f7 	ldrshteq	r0, [sl], r7
    b020:	b6090000 	strlt	r0, [r9], -r0
    b024:	0400003a 	streq	r0, [r0], #-58	; 0x3a
    b028:	00ba01f7 	ldrshteq	r0, [sl], r7
    b02c:	01060000 	mrseq	r0, (UNDEF: 6)
    b030:	fe01f904 	cdp2	9, 0, cr15, cr1, cr4, {0}
    b034:	07000000 	streq	r0, [r0, -r0]
    b038:	000002a2 	andeq	r0, r0, r2, lsr #5
    b03c:	00b70700 	adcseq	r0, r7, r0, lsl #14
    b040:	00010000 	andeq	r0, r1, r0
    b044:	00049109 	andeq	r9, r4, r9, lsl #2
    b048:	01f90400 	mvnseq	r0, r0, lsl #8
    b04c:	000000e8 	andeq	r0, r0, r8, ror #1
    b050:	b104180a 	tstlt	r4, sl, lsl #16
    b054:	00016102 	andeq	r6, r1, r2, lsl #2
    b058:	52430b00 	subpl	r0, r3, #0, 22
    b05c:	02b30400 	adcseq	r0, r3, #0, 8
    b060:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    b064:	3b550c00 	blcc	154e06c <_Min_Stack_Size+0x154dc6c>
    b068:	b4040000 	strlt	r0, [r4], #-0
    b06c:	0000b002 	andeq	fp, r0, r2
    b070:	500b0400 	andpl	r0, fp, r0, lsl #8
    b074:	04005241 	streq	r5, [r0], #-577	; 0x241
    b078:	00b002b5 	ldrhteq	r0, [r0], r5
    b07c:	0c080000 	stceq	0, cr0, [r8], {-0}
    b080:	00003b50 	andeq	r3, r0, r0, asr fp
    b084:	b002b604 	andlt	fp, r2, r4, lsl #12
    b088:	0c000000 	stceq	0, cr0, [r0], {-0}
    b08c:	003ade0c 	eorseq	sp, sl, ip, lsl #28
    b090:	02b70400 	adcseq	r0, r7, #0, 8
    b094:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    b098:	43460b10 	movtmi	r0, #27408	; 0x6b10
    b09c:	b8040052 	stmdalt	r4, {r1, r4, r6}
    b0a0:	0000b002 	andeq	fp, r0, r2
    b0a4:	09001400 	stmdbeq	r0, {sl, ip}
    b0a8:	0000385a 	andeq	r3, r0, sl, asr r8
    b0ac:	0a02b904 	beq	b94c4 <_Min_Stack_Size+0xb90c4>
    b0b0:	0a000001 	beq	b0bc <_Min_Stack_Size+0xacbc>
    b0b4:	02bb0410 	adcseq	r0, fp, #16, 8	; 0x10000000
    b0b8:	000001ab 	andeq	r0, r0, fp, lsr #3
    b0bc:	003a310c 	eorseq	r3, sl, ip, lsl #2
    b0c0:	02bd0400 	adcseq	r0, sp, #0, 8
    b0c4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    b0c8:	3abf0c00 	bcc	fefce0d0 <_estack+0xdef9e0d0>
    b0cc:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
    b0d0:	0000b002 	andeq	fp, r0, r2
    b0d4:	4a0c0400 	bmi	30c0dc <_Min_Stack_Size+0x30bcdc>
    b0d8:	0400003b 	streq	r0, [r0], #-59	; 0x3b
    b0dc:	00b002bf 	ldrhteq	r0, [r0], pc
    b0e0:	0c080000 	stceq	0, cr0, [r8], {-0}
    b0e4:	000039c8 	andeq	r3, r0, r8, asr #19
    b0e8:	b002c004 	andlt	ip, r2, r4
    b0ec:	0c000000 	stceq	0, cr0, [r0], {-0}
    b0f0:	38c50900 	stmiacc	r5, {r8, fp}^
    b0f4:	c1040000 	mrsgt	r0, (UNDEF: 4)
    b0f8:	00016d02 	andeq	r6, r1, r2, lsl #26
    b0fc:	053c0d00 	ldreq	r0, [ip, #-3328]!	; 0xd00
    b100:	00027436 	andeq	r7, r2, r6, lsr r4
    b104:	3b880e00 	blcc	fe20e90c <_estack+0xde1de90c>
    b108:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    b10c:	0000009e 	muleq	r0, lr, r0
    b110:	39a30e00 	stmibcc	r3!, {r9, sl, fp}
    b114:	3b050000 	blcc	14b11c <_Min_Stack_Size+0x14ad1c>
    b118:	0000009e 	muleq	r0, lr, r0
    b11c:	3ba30e04 	blcc	fe8ce934 <_estack+0xde89e934>
    b120:	3d050000 	stccc	0, cr0, [r5, #-0]
    b124:	0000009e 	muleq	r0, lr, r0
    b128:	390f0e08 	stmdbcc	pc, {r3, r9, sl, fp}	; <UNPREDICTABLE>
    b12c:	41050000 	mrsmi	r0, (UNDEF: 5)
    b130:	0000009e 	muleq	r0, lr, r0
    b134:	3bb70e0c 	blcc	fedce96c <_estack+0xded9e96c>
    b138:	45050000 	strmi	r0, [r5, #-0]
    b13c:	0000009e 	muleq	r0, lr, r0
    b140:	39fe0e10 	ldmibcc	lr!, {r4, r9, sl, fp}^
    b144:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    b148:	0000009e 	muleq	r0, lr, r0
    b14c:	39ba0e14 	ldmibcc	sl!, {r2, r4, r9, sl, fp}
    b150:	4c050000 	stcmi	0, cr0, [r5], {-0}
    b154:	0000009e 	muleq	r0, lr, r0
    b158:	3a5b0e18 	bcc	16ce9c0 <_Min_Stack_Size+0x16ce5c0>
    b15c:	4f050000 	svcmi	0x00050000
    b160:	0000009e 	muleq	r0, lr, r0
    b164:	3bfa0e1c 	blcc	ffe8e9dc <_estack+0xdfe5e9dc>
    b168:	52050000 	andpl	r0, r5, #0
    b16c:	0000009e 	muleq	r0, lr, r0
    b170:	3bc60e20 	blcc	ff18e9f8 <_estack+0xdf15e9f8>
    b174:	55050000 	strpl	r0, [r5, #-0]
    b178:	0000009e 	muleq	r0, lr, r0
    b17c:	38730e24 	ldmdacc	r3!, {r2, r5, r9, sl, fp}^
    b180:	5a050000 	bpl	14b188 <_Min_Stack_Size+0x14ad88>
    b184:	0000009e 	muleq	r0, lr, r0
    b188:	3b6a0e28 	blcc	1a8ea30 <_Min_Stack_Size+0x1a8e630>
    b18c:	5d050000 	stcpl	0, cr0, [r5, #-0]
    b190:	0000009e 	muleq	r0, lr, r0
    b194:	3a9d0e2c 	bcc	fe74ea4c <_estack+0xde71ea4c>
    b198:	62050000 	andvs	r0, r5, #0
    b19c:	0000009e 	muleq	r0, lr, r0
    b1a0:	38800e30 	stmcc	r0, {r4, r5, r9, sl, fp}
    b1a4:	65050000 	strvs	r0, [r5, #-0]
    b1a8:	0000009e 	muleq	r0, lr, r0
    b1ac:	389f0e34 	ldmcc	pc, {r2, r4, r5, r9, sl, fp}	; <UNPREDICTABLE>
    b1b0:	6a050000 	bvs	14b1b8 <_Min_Stack_Size+0x14adb8>
    b1b4:	0000009e 	muleq	r0, lr, r0
    b1b8:	72030038 	andvc	r0, r3, #56	; 0x38
    b1bc:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    b1c0:	0001b76e 	andeq	fp, r1, lr, ror #14
    b1c4:	3b2d0f00 	blcc	b4edcc <_Min_Stack_Size+0xb4e9cc>
    b1c8:	c4010000 	strgt	r0, [r1], #-0
    b1cc:	08004644 	stmdaeq	r0, {r2, r6, r9, sl, lr}
    b1d0:	00000130 	andeq	r0, r0, r0, lsr r1
    b1d4:	02a29c01 	adceq	r9, r2, #256	; 0x100
    b1d8:	02100000 	andseq	r0, r0, #0
    b1dc:	01000039 	tsteq	r0, r9, lsr r0
    b1e0:	0002a2c4 	andeq	sl, r2, r4, asr #5
    b1e4:	00500100 	subseq	r0, r0, r0, lsl #2
    b1e8:	01610411 	cmneq	r1, r1, lsl r4
    b1ec:	28120000 	ldmdacs	r2, {}	; <UNPREDICTABLE>
    b1f0:	0100003a 	tsteq	r0, sl, lsr r0
    b1f4:	4774013f 			; <UNDEFINED> instruction: 0x4774013f
    b1f8:	00700800 	rsbseq	r0, r0, r0, lsl #16
    b1fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    b200:	000002ed 	andeq	r0, r0, sp, ror #5
    b204:	00390213 	eorseq	r0, r9, r3, lsl r2
    b208:	013f0100 	teqeq	pc, r0, lsl #2
    b20c:	000002a2 	andeq	r0, r0, r2, lsr #5
    b210:	c4145001 	ldrgt	r5, [r4], #-1
    b214:	0100003a 	tsteq	r0, sl, lsr r0
    b218:	02ed013f 	rsceq	r0, sp, #-1073741809	; 0xc000000f
    b21c:	76dc0000 	ldrbvc	r0, [ip], r0
    b220:	db150000 	blle	54b228 <_Min_Stack_Size+0x54ae28>
    b224:	01000027 	tsteq	r0, r7, lsr #32
    b228:	009e0141 	addseq	r0, lr, r1, asr #2
    b22c:	76fd0000 	ldrbtvc	r0, [sp], r0
    b230:	11000000 	mrsne	r0, (UNDEF: 0)
    b234:	00027404 	andeq	r7, r2, r4, lsl #8
    b238:	38901200 	ldmcc	r0, {r9, ip}
    b23c:	93010000 	movwls	r0, #4096	; 0x1000
    b240:	0047e401 	subeq	lr, r7, r1, lsl #8
    b244:	00002208 	andeq	r2, r0, r8, lsl #4
    b248:	189c0100 	ldmne	ip, {r8}
    b24c:	13000003 	movwne	r0, #3
    b250:	00003ac4 	andeq	r3, r0, r4, asr #21
    b254:	ed019301 	stc	3, cr9, [r1, #-4]
    b258:	01000002 	tsteq	r0, r2
    b25c:	52120050 	andspl	r0, r2, #80	; 0x50
    b260:	01000038 	tsteq	r0, r8, lsr r0
    b264:	480801de 	stmdami	r8, {r1, r2, r3, r4, r6, r7, r8}
    b268:	00140800 	andseq	r0, r4, r0, lsl #16
    b26c:	9c010000 	stcls	0, cr0, [r1], {-0}
    b270:	0000034b 	andeq	r0, r0, fp, asr #6
    b274:	00390213 	eorseq	r0, r9, r3, lsl r2
    b278:	01de0100 	bicseq	r0, lr, r0, lsl #2
    b27c:	000002a2 	andeq	r0, r0, r2, lsr #5
    b280:	46135001 	ldrmi	r5, [r3], -r1
    b284:	01000023 	tsteq	r0, r3, lsr #32
    b288:	00fe01de 	ldrsbteq	r0, [lr], #30
    b28c:	51010000 	mrspl	r0, (UNDEF: 1)
    b290:	3b0f1200 	blcc	3cfa98 <_Min_Stack_Size+0x3cf698>
    b294:	02010000 	andeq	r0, r1, #0
    b298:	00481c02 	subeq	r1, r8, r2, lsl #24
    b29c:	00001408 	andeq	r1, r0, r8, lsl #8
    b2a0:	7e9c0100 	fmlvce	f0, f4, f0
    b2a4:	13000003 	movwne	r0, #3
    b2a8:	00003902 	andeq	r3, r0, r2, lsl #18
    b2ac:	a2020201 	andge	r0, r2, #268435456	; 0x10000000
    b2b0:	01000002 	tsteq	r0, r2
    b2b4:	3ad31350 	bcc	ff4cfffc <_estack+0xdf49fffc>
    b2b8:	02010000 	andeq	r0, r1, #0
    b2bc:	00009e02 	andeq	r9, r0, r2, lsl #28
    b2c0:	00510100 	subseq	r0, r1, r0, lsl #2
    b2c4:	0039ce12 	eorseq	ip, r9, r2, lsl lr
    b2c8:	02260100 	eoreq	r0, r6, #0, 2
    b2cc:	08004830 	stmdaeq	r0, {r4, r5, fp, lr}
    b2d0:	00000014 	andeq	r0, r0, r4, lsl r0
    b2d4:	03b19c01 			; <UNDEFINED> instruction: 0x03b19c01
    b2d8:	02130000 	andseq	r0, r3, #0
    b2dc:	01000039 	tsteq	r0, r9, lsr r0
    b2e0:	02a20226 	adceq	r0, r2, #1610612738	; 0x60000002
    b2e4:	50010000 	andpl	r0, r1, r0
    b2e8:	003ae313 	eorseq	lr, sl, r3, lsl r3
    b2ec:	02260100 	eoreq	r0, r6, #0, 2
    b2f0:	0000009e 	muleq	r0, lr, r0
    b2f4:	12005101 	andne	r5, r0, #1073741824	; 0x40000000
    b2f8:	00003a44 	andeq	r3, r0, r4, asr #20
    b2fc:	44027801 	strmi	r7, [r2], #-2049	; 0x801
    b300:	04080048 	streq	r0, [r8], #-72	; 0x48
    b304:	01000000 	mrseq	r0, (UNDEF: 0)
    b308:	0003e49c 	muleq	r3, ip, r4
    b30c:	39021300 	stmdbcc	r2, {r8, r9, ip}
    b310:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    b314:	0002a202 	andeq	sl, r2, r2, lsl #4
    b318:	13500100 	cmpne	r0, #0, 2
    b31c:	00003bde 	ldrdeq	r3, [r0], -lr
    b320:	88027801 	stmdahi	r2, {r0, fp, ip, sp, lr}
    b324:	01000000 	mrseq	r0, (UNDEF: 0)
    b328:	cf160051 	svcgt	0x00160051
    b32c:	0100003b 	tsteq	r0, fp, lsr r0
    b330:	00880287 	addeq	r0, r8, r7, lsl #5
    b334:	48480000 	stmdami	r8, {}^	; <UNPREDICTABLE>
    b338:	00060800 	andeq	r0, r6, r0, lsl #16
    b33c:	9c010000 	stcls	0, cr0, [r1], {-0}
    b340:	0000040f 	andeq	r0, r0, pc, lsl #8
    b344:	00390214 	eorseq	r0, r9, r4, lsl r2
    b348:	02870100 	addeq	r0, r7, #0, 2
    b34c:	000002a2 	andeq	r0, r0, r2, lsr #5
    b350:	0000773d 	andeq	r7, r0, sp, lsr r7
    b354:	3a821200 	bcc	fe08fb5c <_estack+0xde05fb5c>
    b358:	da010000 	ble	4b360 <_Min_Stack_Size+0x4af60>
    b35c:	00485002 	subeq	r5, r8, r2
    b360:	00001808 	andeq	r1, r0, r8, lsl #16
    b364:	509c0100 	addspl	r0, ip, r0, lsl #2
    b368:	13000004 	movwne	r0, #4
    b36c:	00003902 	andeq	r3, r0, r2, lsl #18
    b370:	a202da01 	andge	sp, r2, #4096	; 0x1000
    b374:	01000002 	tsteq	r0, r2
    b378:	3b5a1350 	blcc	16900c0 <_Min_Stack_Size+0x168fcc0>
    b37c:	da010000 	ble	4b384 <_Min_Stack_Size+0x4af84>
    b380:	00009e02 	andeq	r9, r0, r2, lsl #28
    b384:	13510100 	cmpne	r1, #0, 2
    b388:	00003840 	andeq	r3, r0, r0, asr #16
    b38c:	9e02db01 	vmlals.f64	d13, d2, d1
    b390:	01000000 	mrseq	r0, (UNDEF: 0)
    b394:	10120052 	andsne	r0, r2, r2, asr r0
    b398:	0100003a 	tsteq	r0, sl, lsr r0
    b39c:	486802f9 	stmdami	r8!, {r0, r3, r4, r5, r6, r7, r9}^
    b3a0:	00140800 	andseq	r0, r4, r0, lsl #16
    b3a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    b3a8:	00000483 	andeq	r0, r0, r3, lsl #9
    b3ac:	00390213 	eorseq	r0, r9, r3, lsl r2
    b3b0:	02f90100 	rscseq	r0, r9, #0, 2
    b3b4:	000002a2 	andeq	r0, r0, r2, lsr #5
    b3b8:	46135001 	ldrmi	r5, [r3], -r1
    b3bc:	01000023 	tsteq	r0, r3, lsr #32
    b3c0:	00fe02f9 	ldrshteq	r0, [lr], #41	; 0x29
    b3c4:	51010000 	mrspl	r0, (UNDEF: 1)
    b3c8:	39e71200 	stmibcc	r7!, {r9, ip}^
    b3cc:	22010000 	andcs	r0, r1, #0
    b3d0:	00487c03 	subeq	r7, r8, r3, lsl #24
    b3d4:	00000a08 	andeq	r0, r0, r8, lsl #20
    b3d8:	c49c0100 	ldrgt	r0, [ip], #256	; 0x100
    b3dc:	13000004 	movwne	r0, #4
    b3e0:	00003902 	andeq	r3, r0, r2, lsl #18
    b3e4:	a2032201 	andge	r2, r3, #268435456	; 0x10000000
    b3e8:	01000002 	tsteq	r0, r2
    b3ec:	3b941350 	blcc	fe510134 <_estack+0xde4e0134>
    b3f0:	22010000 	andcs	r0, r1, #0
    b3f4:	00009e03 	andeq	r9, r0, r3, lsl #28
    b3f8:	13510100 	cmpne	r1, #0, 2
    b3fc:	000038ec 	andeq	r3, r0, ip, ror #17
    b400:	9e032301 	cdpls	3, 0, cr2, cr3, cr1, {0}
    b404:	01000000 	mrseq	r0, (UNDEF: 0)
    b408:	d1160052 	tstle	r6, r2, asr r0
    b40c:	01000038 	tsteq	r0, r8, lsr r0
    b410:	009e033c 	addseq	r0, lr, ip, lsr r3
    b414:	48880000 	stmmi	r8, {}	; <UNPREDICTABLE>
    b418:	00080800 	andeq	r0, r8, r0, lsl #16
    b41c:	9c010000 	stcls	0, cr0, [r1], {-0}
    b420:	000004ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    b424:	00390214 	eorseq	r0, r9, r4, lsl r2
    b428:	033c0100 	teqeq	ip, #0, 2
    b42c:	000002a2 	andeq	r0, r0, r2, lsr #5
    b430:	0000775e 	andeq	r7, r0, lr, asr r7
    b434:	706d7417 	rsbvc	r7, sp, r7, lsl r4
    b438:	033e0100 	teqeq	lr, #0, 2
    b43c:	0000009e 	muleq	r0, lr, r0
    b440:	0000777f 	andeq	r7, r0, pc, ror r7
    b444:	3b771600 	blcc	1dd0c4c <_Min_Stack_Size+0x1dd084c>
    b448:	af010000 	svcge	0x00010000
    b44c:	0000fe03 	andeq	pc, r0, r3, lsl #28
    b450:	00489000 	subeq	r9, r8, r0
    b454:	00000808 	andeq	r0, r0, r8, lsl #16
    b458:	3a9c0100 	bcc	fe70b860 <_estack+0xde6db860>
    b45c:	14000005 	strne	r0, [r0], #-5
    b460:	00003902 	andeq	r3, r0, r2, lsl #18
    b464:	a203af01 	andge	sl, r3, #1, 30
    b468:	a9000002 	stmdbge	r0, {r1}
    b46c:	15000077 	strne	r0, [r0, #-119]	; 0x77
    b470:	0000386d 	andeq	r3, r0, sp, ror #16
    b474:	fe03b101 	cdp2	1, 0, cr11, cr3, cr1, {0}
    b478:	ca000000 	bgt	b480 <_Min_Stack_Size+0xb080>
    b47c:	00000077 	andeq	r0, r0, r7, ror r0
    b480:	0038b316 	eorseq	fp, r8, r6, lsl r3
    b484:	03d10100 	bicseq	r0, r1, #0, 2
    b488:	0000009e 	muleq	r0, lr, r0
    b48c:	08004898 	stmdaeq	r0, {r3, r4, r7, fp, lr}
    b490:	00000008 	andeq	r0, r0, r8
    b494:	05759c01 	ldrbeq	r9, [r5, #-3073]!	; 0xc01
    b498:	02140000 	andseq	r0, r4, #0
    b49c:	01000039 	tsteq	r0, r9, lsr r0
    b4a0:	02a203d1 	adceq	r0, r2, #1140850691	; 0x44000003
    b4a4:	77ed0000 	strbvc	r0, [sp, r0]!
    b4a8:	db150000 	blle	54b4b0 <_Min_Stack_Size+0x54b0b0>
    b4ac:	01000027 	tsteq	r0, r7, lsr #32
    b4b0:	009e03d3 			; <UNDEFINED> instruction: 0x009e03d3
    b4b4:	780e0000 	stmdavc	lr, {}	; <UNPREDICTABLE>
    b4b8:	16000000 	strne	r0, [r0], -r0
    b4bc:	00003b38 	andeq	r3, r0, r8, lsr fp
    b4c0:	d003ec01 	andle	lr, r3, r1, lsl #24
    b4c4:	a0000000 	andge	r0, r0, r0
    b4c8:	3c080048 	stccc	0, cr0, [r8], {72}	; 0x48
    b4cc:	01000000 	mrseq	r0, (UNDEF: 0)
    b4d0:	0005e09c 	muleq	r5, ip, r0
    b4d4:	39021400 	stmdbcc	r2, {sl, ip}
    b4d8:	ec010000 	stc	0, cr0, [r1], {-0}
    b4dc:	0002a203 	andeq	sl, r2, r3, lsl #4
    b4e0:	00783d00 	rsbseq	r3, r8, r0, lsl #26
    b4e4:	3af01400 	bcc	ffc104ec <_estack+0xdfbe04ec>
    b4e8:	ec010000 	stc	0, cr0, [r1], {-0}
    b4ec:	00009e03 	andeq	r9, r0, r3, lsl #28
    b4f0:	00785e00 	rsbseq	r5, r8, r0, lsl #28
    b4f4:	26101500 	ldrcs	r1, [r0], -r0, lsl #10
    b4f8:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    b4fc:	0000d003 	andeq	sp, r0, r3
    b500:	00787f00 	rsbseq	r7, r8, r0, lsl #30
    b504:	38fd1500 	ldmcc	sp!, {r8, sl, ip}^
    b508:	ef010000 	svc	0x00010000
    b50c:	0005e003 	andeq	lr, r5, r3
    b510:	0078c400 	rsbseq	ip, r8, r0, lsl #8
    b514:	27db1500 	ldrbcs	r1, [fp, r0, lsl #10]
    b518:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    b51c:	00009e03 	andeq	r9, r0, r3, lsl #28
    b520:	0078fb00 	rsbseq	pc, r8, r0, lsl #22
    b524:	04110000 	ldreq	r0, [r1], #-0
    b528:	000001ab 	andeq	r0, r0, fp, lsr #3
    b52c:	003a3612 	eorseq	r3, sl, r2, lsl r6
    b530:	042f0100 	strteq	r0, [pc], #-256	; b538 <_Min_Stack_Size+0xb138>
    b534:	080048dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, lr}
    b538:	00000034 	andeq	r0, r0, r4, lsr r0
    b53c:	062b9c01 	strteq	r9, [fp], -r1, lsl #24
    b540:	02140000 	andseq	r0, r4, #0
    b544:	01000039 	tsteq	r0, r9, lsr r0
    b548:	02a2042f 	adceq	r0, r2, #788529152	; 0x2f000000
    b54c:	792d0000 	pushvc	{}	; <UNPREDICTABLE>
    b550:	f0140000 			; <UNDEFINED> instruction: 0xf0140000
    b554:	0100003a 	tsteq	r0, sl, lsr r0
    b558:	009e042f 	addseq	r0, lr, pc, lsr #8
    b55c:	794e0000 	stmdbvc	lr, {}^	; <UNPREDICTABLE>
    b560:	fd180000 	ldc2	0, cr0, [r8, #-0]
    b564:	01000038 	tsteq	r0, r8, lsr r0
    b568:	05e00431 	strbeq	r0, [r0, #1073]!	; 0x431
    b56c:	50010000 	andpl	r0, r1, r0
    b570:	3be61200 	blcc	ff98fd78 <_estack+0xdf95fd78>
    b574:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    b578:	00491004 	subeq	r1, r9, r4
    b57c:	00004008 	andeq	r4, r0, r8
    b580:	6e9c0100 	fmlvse	f0, f4, f0
    b584:	13000006 	movwne	r0, #6
    b588:	00003902 	andeq	r3, r0, r2, lsl #18
    b58c:	a2045e01 	andge	r5, r4, #1, 28
    b590:	01000002 	tsteq	r0, r2
    b594:	3bf31450 	blcc	ffcd06dc <_estack+0xdfca06dc>
    b598:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    b59c:	00009e04 	andeq	r9, r0, r4, lsl #28
    b5a0:	00796f00 	rsbseq	r6, r9, r0, lsl #30
    b5a4:	23461300 	movtcs	r1, #25344	; 0x6300
    b5a8:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    b5ac:	0000fe04 	andeq	pc, r0, r4, lsl #28
    b5b0:	00520100 	subseq	r0, r2, r0, lsl #2
    b5b4:	003aaf16 	eorseq	sl, sl, r6, lsl pc
    b5b8:	04920100 	ldreq	r0, [r2], #256	; 0x100
    b5bc:	000000dc 	ldrdeq	r0, [r0], -ip
    b5c0:	08004950 	stmdaeq	r0, {r4, r6, r8, fp, lr}
    b5c4:	00000054 	andeq	r0, r0, r4, asr r0
    b5c8:	06e99c01 	strbteq	r9, [r9], r1, lsl #24
    b5cc:	02140000 	andseq	r0, r4, #0
    b5d0:	01000039 	tsteq	r0, r9, lsr r0
    b5d4:	02a20492 	adceq	r0, r2, #-1845493760	; 0x92000000
    b5d8:	79b40000 	ldmibvc	r4!, {}	; <UNPREDICTABLE>
    b5dc:	f3140000 	vhadd.u16	d0, d4, d0
    b5e0:	0100003b 	tsteq	r0, fp, lsr r0
    b5e4:	009e0492 	umullseq	r0, lr, r2, r4
    b5e8:	79e00000 	stmibvc	r0!, {}^	; <UNPREDICTABLE>
    b5ec:	10150000 	andsne	r0, r5, r0
    b5f0:	01000026 	tsteq	r0, r6, lsr #32
    b5f4:	00dc0494 	smullseq	r0, ip, r4, r4
    b5f8:	7a0c0000 	bvc	30b600 <_Min_Stack_Size+0x30b200>
    b5fc:	fd150000 	ldc2	0, cr0, [r5, #-0]
    b600:	01000038 	tsteq	r0, r8, lsr r0
    b604:	05e00495 	strbeq	r0, [r0, #1173]!	; 0x495
    b608:	7a370000 	bvc	dcb610 <_Min_Stack_Size+0xdcb210>
    b60c:	db150000 	blle	54b614 <_Min_Stack_Size+0x54b214>
    b610:	01000027 	tsteq	r0, r7, lsr #32
    b614:	009e0496 	umullseq	r0, lr, r6, r4
    b618:	7acb0000 	bvc	ff2cb620 <_estack+0xdf29b620>
    b61c:	6c150000 	ldcvs	0, cr0, [r5], {-0}
    b620:	01000037 	tsteq	r0, r7, lsr r0
    b624:	009e0496 	umullseq	r0, lr, r6, r4
    b628:	7b1a0000 	blvc	68b630 <_Min_Stack_Size+0x68b230>
    b62c:	12000000 	andne	r0, r0, #0
    b630:	00003af9 	strdeq	r3, [r0], -r9
    b634:	a404e401 	strge	lr, [r4], #-1025	; 0x401
    b638:	34080049 	strcc	r0, [r8], #-73	; 0x49
    b63c:	01000000 	mrseq	r0, (UNDEF: 0)
    b640:	00072e9c 	muleq	r7, ip, lr
    b644:	39021400 	stmdbcc	r2, {sl, ip}
    b648:	e4010000 	str	r0, [r1], #-0
    b64c:	0002a204 	andeq	sl, r2, r4, lsl #4
    b650:	007b5000 	rsbseq	r5, fp, r0
    b654:	3bf31400 	blcc	ffcd065c <_estack+0xdfca065c>
    b658:	e4010000 	str	r0, [r1], #-0
    b65c:	00009e04 	andeq	r9, r0, r4, lsl #28
    b660:	007b7100 	rsbseq	r7, fp, r0, lsl #2
    b664:	38fd1800 	ldmcc	sp!, {fp, ip}^
    b668:	e6010000 	str	r0, [r1], -r0
    b66c:	0005e004 	andeq	lr, r5, r4
    b670:	00500100 	subseq	r0, r0, r0, lsl #2
    b674:	00041b19 	andeq	r1, r4, r9, lsl fp
    b678:	06a70600 	strteq	r0, [r7], r0, lsl #12
    b67c:	000000b5 	strheq	r0, [r0], -r5
    b680:	000c7800 	andeq	r7, ip, r0, lsl #16
    b684:	9a000400 	bls	c68c <_Min_Stack_Size+0xc28c>
    b688:	04000023 	streq	r0, [r0], #-35	; 0x23
    b68c:	0002f301 	andeq	pc, r2, r1, lsl #6
    b690:	3ebf0100 	frdcce	f0, f7, f0
    b694:	13480000 	movtne	r0, #32768	; 0x8000
    b698:	00000000 	andeq	r0, r0, r0
    b69c:	4fd60000 	svcmi	0x00d60000
    b6a0:	01020000 	mrseq	r0, (UNDEF: 2)
    b6a4:	00020206 	andeq	r0, r2, r6, lsl #4
    b6a8:	05df0300 	ldrbeq	r0, [pc, #768]	; b9b0 <_Min_Stack_Size+0xb5b0>
    b6ac:	1d020000 	stcne	0, cr0, [r2, #-0]
    b6b0:	00000033 	andeq	r0, r0, r3, lsr r0
    b6b4:	00080102 	andeq	r0, r8, r2, lsl #2
    b6b8:	02000002 	andeq	r0, r0, #2
    b6bc:	00380502 	eorseq	r0, r8, r2, lsl #10
    b6c0:	94030000 	strls	r0, [r3], #-0
    b6c4:	02000000 	andeq	r0, r0, #0
    b6c8:	00004c2b 	andeq	r4, r0, fp, lsr #24
    b6cc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    b6d0:	000002aa 	andeq	r0, r0, sl, lsr #5
    b6d4:	00044c03 	andeq	r4, r4, r3, lsl #24
    b6d8:	5e3f0200 	cdppl	2, 3, cr0, cr15, cr0, {0}
    b6dc:	02000000 	andeq	r0, r0, #0
    b6e0:	015d0504 	cmpeq	sp, r4, lsl #10
    b6e4:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
    b6e8:	02000000 	andeq	r0, r0, #0
    b6ec:	00007041 	andeq	r7, r0, r1, asr #32
    b6f0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b6f4:	0000021d 	andeq	r0, r0, sp, lsl r2
    b6f8:	58050802 	stmdapl	r5, {r1, fp}
    b6fc:	02000001 	andeq	r0, r0, #1
    b700:	02180708 	andseq	r0, r8, #8, 14	; 0x200000
    b704:	04040000 	streq	r0, [r4], #-0
    b708:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    b70c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b710:	00000222 	andeq	r0, r0, r2, lsr #4
    b714:	0005e103 	andeq	lr, r5, r3, lsl #2
    b718:	282a0300 	stmdacs	sl!, {r8, r9}
    b71c:	03000000 	movweq	r0, #0
    b720:	00000096 	muleq	r0, r6, r0
    b724:	00413603 	subeq	r3, r1, r3, lsl #12
    b728:	4e030000 	cdpmi	0, 0, cr0, cr3, cr0, {0}
    b72c:	03000004 	movweq	r0, #4
    b730:	00005341 	andeq	r5, r0, r1, asr #6
    b734:	008b0300 	addeq	r0, fp, r0, lsl #6
    b738:	42030000 	andmi	r0, r3, #0
    b73c:	00000065 	andeq	r0, r0, r5, rrx
    b740:	42070402 	andmi	r0, r7, #33554432	; 0x2000000
    b744:	05000000 	streq	r0, [r0, #-0]
    b748:	000000b4 	strheq	r0, [r0], -r4
    b74c:	0000b406 	andeq	fp, r0, r6, lsl #8
    b750:	0000db00 	andeq	sp, r0, r0, lsl #22
    b754:	00bf0700 	adcseq	r0, pc, r0, lsl #14
    b758:	00010000 	andeq	r0, r1, r0
    b75c:	00009e05 	andeq	r9, r0, r5, lsl #28
    b760:	00a90500 	adceq	r0, r9, r0, lsl #10
    b764:	01080000 	mrseq	r0, (UNDEF: 8)
    b768:	fb01f704 	blx	89382 <_Min_Stack_Size+0x88f82>
    b76c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    b770:	00002531 	andeq	r2, r0, r1, lsr r5
    b774:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xa00
    b778:	00010054 	andeq	r0, r1, r4, asr r0
    b77c:	003b3f0b 	eorseq	r3, fp, fp, lsl #30
    b780:	01f70400 	mvnseq	r0, r0, lsl #8
    b784:	000000e5 	andeq	r0, r0, r5, ror #1
    b788:	003ab60b 	eorseq	fp, sl, fp, lsl #12
    b78c:	01f70400 	mvnseq	r0, r0, lsl #8
    b790:	000000e5 	andeq	r0, r0, r5, ror #1
    b794:	f9040108 			; <UNDEFINED> instruction: 0xf9040108
    b798:	00012901 	andeq	r2, r1, r1, lsl #18
    b79c:	02a20900 	adceq	r0, r2, #0, 18
    b7a0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    b7a4:	000000b7 	strheq	r0, [r0], -r7
    b7a8:	910b0001 	tstls	fp, r1
    b7ac:	04000004 	streq	r0, [r0], #-4
    b7b0:	011301f9 			; <UNDEFINED> instruction: 0x011301f9
    b7b4:	900c0000 	andls	r0, ip, r0
    b7b8:	de045504 	cfsh32le	mvfx5, mvfx4, #4
    b7bc:	0d000002 	stceq	0, cr0, [r0, #-8]
    b7c0:	04005243 	streq	r5, [r0], #-579	; 0x243
    b7c4:	00c60457 	sbceq	r0, r6, r7, asr r4
    b7c8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    b7cc:	0000052e 	andeq	r0, r0, lr, lsr #10
    b7d0:	c6045804 	strgt	r5, [r4], -r4, lsl #16
    b7d4:	04000000 	streq	r0, [r0], #-0
    b7d8:	0007110e 	andeq	r1, r7, lr, lsl #2
    b7dc:	04590400 	ldrbeq	r0, [r9], #-1024	; 0x400
    b7e0:	000000c6 	andeq	r0, r0, r6, asr #1
    b7e4:	49430d08 	stmdbmi	r3, {r3, r8, sl, fp}^
    b7e8:	5a040052 	bpl	10b938 <_Min_Stack_Size+0x10b538>
    b7ec:	0000c604 	andeq	ip, r0, r4, lsl #12
    b7f0:	820e0c00 	andhi	r0, lr, #0, 24
    b7f4:	04000005 	streq	r0, [r0], #-5
    b7f8:	00c6045b 	sbceq	r0, r6, fp, asr r4
    b7fc:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    b800:	00000547 	andeq	r0, r0, r7, asr #10
    b804:	c6045c04 	strgt	r5, [r4], -r4, lsl #24
    b808:	14000000 	strne	r0, [r0], #-0
    b80c:	0006f40e 	andeq	pc, r6, lr, lsl #8
    b810:	045d0400 	ldrbeq	r0, [sp], #-1024	; 0x400
    b814:	000000c6 	andeq	r0, r0, r6, asr #1
    b818:	069f0e18 			; <UNDEFINED> instruction: 0x069f0e18
    b81c:	5e040000 	cdppl	0, 0, cr0, cr4, cr0, {0}
    b820:	0000b404 	andeq	fp, r0, r4, lsl #8
    b824:	360e1c00 	strcc	r1, [lr], -r0, lsl #24
    b828:	04000005 	streq	r0, [r0], #-5
    b82c:	00c6045f 	sbceq	r0, r6, pc, asr r4
    b830:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
    b834:	000005d6 	ldrdeq	r0, [r0], -r6
    b838:	c6046004 	strgt	r6, [r4], -r4
    b83c:	24000000 	strcs	r0, [r0], #-0
    b840:	0006a90e 	andeq	sl, r6, lr, lsl #18
    b844:	04610400 	strbteq	r0, [r1], #-1024	; 0x400
    b848:	000000cb 	andeq	r0, r0, fp, asr #1
    b84c:	06e70e28 	strbteq	r0, [r7], r8, lsr #28
    b850:	62040000 	andvs	r0, r4, #0
    b854:	0000c604 	andeq	ip, r0, r4, lsl #12
    b858:	3f0e3000 	svccc	0x000e3000
    b85c:	04000005 	streq	r0, [r0], #-5
    b860:	00c60463 	sbceq	r0, r6, r3, ror #8
    b864:	0e340000 	cdpeq	0, 3, cr0, cr4, cr0, {0}
    b868:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    b86c:	c6046404 	strgt	r6, [r4], -r4, lsl #8
    b870:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    b874:	0006b30e 	andeq	fp, r6, lr, lsl #6
    b878:	04650400 	strbteq	r0, [r5], #-1024	; 0x400
    b87c:	000000b4 	strheq	r0, [r0], -r4
    b880:	05a80e3c 	streq	r0, [r8, #3644]!	; 0xe3c
    b884:	66040000 	strvs	r0, [r4], -r0
    b888:	0000c604 	andeq	ip, r0, r4, lsl #12
    b88c:	170e4000 	strne	r4, [lr, -r0]
    b890:	04000006 	streq	r0, [r0], #-6
    b894:	00c60467 	sbceq	r0, r6, r7, ror #8
    b898:	0e440000 	cdpeq	0, 4, cr0, cr4, cr0, {0}
    b89c:	00000595 	muleq	r0, r5, r5
    b8a0:	cb046804 	blgt	1258b8 <_Min_Stack_Size+0x1254b8>
    b8a4:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    b8a8:	0004b60e 	andeq	fp, r4, lr, lsl #12
    b8ac:	04690400 	strbteq	r0, [r9], #-1024	; 0x400
    b8b0:	000000c6 	andeq	r0, r0, r6, asr #1
    b8b4:	06900e50 			; <UNDEFINED> instruction: 0x06900e50
    b8b8:	6a040000 	bvs	10b8c0 <_Min_Stack_Size+0x10b4c0>
    b8bc:	0000c604 	andeq	ip, r0, r4, lsl #12
    b8c0:	8b0e5400 	blhi	3a08c8 <_Min_Stack_Size+0x3a04c8>
    b8c4:	04000005 	streq	r0, [r0], #-5
    b8c8:	00c6046b 	sbceq	r0, r6, fp, ror #8
    b8cc:	0e580000 	cdpeq	0, 5, cr0, cr8, cr0, {0}
    b8d0:	000006c9 	andeq	r0, r0, r9, asr #13
    b8d4:	b4046c04 	strlt	r6, [r4], #-3076	; 0xc04
    b8d8:	5c000000 	stcpl	0, cr0, [r0], {-0}
    b8dc:	00065b0e 	andeq	r5, r6, lr, lsl #22
    b8e0:	046d0400 	strbteq	r0, [sp], #-1024	; 0x400
    b8e4:	000000c6 	andeq	r0, r0, r6, asr #1
    b8e8:	071c0e60 	ldreq	r0, [ip, -r0, ror #28]
    b8ec:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
    b8f0:	0000c604 	andeq	ip, r0, r4, lsl #12
    b8f4:	d30e6400 	movwle	r6, #58368	; 0xe400
    b8f8:	04000006 	streq	r0, [r0], #-6
    b8fc:	00cb046f 	sbceq	r0, fp, pc, ror #8
    b900:	0e680000 	cdpeq	0, 6, cr0, cr8, cr0, {0}
    b904:	00000550 	andeq	r0, r0, r0, asr r5
    b908:	c6047004 	strgt	r7, [r4], -r4
    b90c:	70000000 	andvc	r0, r0, r0
    b910:	5253430d 	subspl	r4, r3, #872415232	; 0x34000000
    b914:	04710400 	ldrbteq	r0, [r1], #-1024	; 0x400
    b918:	000000c6 	andeq	r0, r0, r6, asr #1
    b91c:	06dd0e74 			; <UNDEFINED> instruction: 0x06dd0e74
    b920:	72040000 	andvc	r0, r4, #0
    b924:	0000cb04 	andeq	ip, r0, r4, lsl #22
    b928:	6c0e7800 	stcvs	8, cr7, [lr], {-0}
    b92c:	04000005 	streq	r0, [r0], #-5
    b930:	00c60473 	sbceq	r0, r6, r3, ror r4
    b934:	0e800000 	cdpeq	0, 8, cr0, cr0, cr0, {0}
    b938:	00000555 	andeq	r0, r0, r5, asr r5
    b93c:	c6047404 	strgt	r7, [r4], -r4, lsl #8
    b940:	84000000 	strhi	r0, [r0], #-0
    b944:	00070b0e 	andeq	r0, r7, lr, lsl #22
    b948:	04750400 	ldrbteq	r0, [r5], #-1024	; 0x400
    b94c:	000000c6 	andeq	r0, r0, r6, asr #1
    b950:	05b00e88 	ldreq	r0, [r0, #3720]!	; 0xe88
    b954:	76040000 	strvc	r0, [r4], -r0
    b958:	0000c604 	andeq	ip, r0, r4, lsl #12
    b95c:	0b008c00 	bleq	2e964 <_Min_Stack_Size+0x2e564>
    b960:	000005ca 	andeq	r0, r0, sl, asr #11
    b964:	35047804 	strcc	r7, [r4, #-2052]	; 0x804
    b968:	0c000001 	stceq	0, cr0, [r0], {1}
    b96c:	04e00424 	strbteq	r0, [r0], #1060	; 0x424
    b970:	000003dc 	ldrdeq	r0, [r0], -ip
    b974:	3152430d 	cmpcc	r2, sp, lsl #6
    b978:	04e20400 	strbteq	r0, [r2], #1024	; 0x400
    b97c:	000000db 	ldrdeq	r0, [r0], -fp
    b980:	069f0e00 	ldreq	r0, [pc], r0, lsl #28
    b984:	e3040000 	movw	r0, #16384	; 0x4000
    b988:	00009e04 	andeq	r9, r0, r4, lsl #28
    b98c:	430d0200 	movwmi	r0, #53760	; 0xd200
    b990:	04003252 	streq	r3, [r0], #-594	; 0x252
    b994:	00db04e4 	sbcseq	r0, fp, r4, ror #9
    b998:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    b99c:	000006a9 	andeq	r0, r0, r9, lsr #13
    b9a0:	9e04e504 	cfsh32ls	mvfx14, mvfx4, #4
    b9a4:	06000000 	streq	r0, [r0], -r0
    b9a8:	0052530d 	subseq	r5, r2, sp, lsl #6
    b9ac:	db04e604 	blle	1451c4 <_Min_Stack_Size+0x144dc4>
    b9b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b9b4:	0006b30e 	andeq	fp, r6, lr, lsl #6
    b9b8:	04e70400 	strbteq	r0, [r7], #1024	; 0x400
    b9bc:	0000009e 	muleq	r0, lr, r0
    b9c0:	52440d0a 	subpl	r0, r4, #640	; 0x280
    b9c4:	04e80400 	strbteq	r0, [r8], #1024	; 0x400
    b9c8:	000000db 	ldrdeq	r0, [r0], -fp
    b9cc:	05950e0c 	ldreq	r0, [r5, #3596]	; 0xe0c
    b9d0:	e9040000 	stmdb	r4, {}	; <UNPREDICTABLE>
    b9d4:	00009e04 	andeq	r9, r0, r4, lsl #28
    b9d8:	360e0e00 	strcc	r0, [lr], -r0, lsl #28
    b9dc:	0400003c 	streq	r0, [r0], #-60	; 0x3c
    b9e0:	00db04ea 	sbcseq	r0, fp, sl, ror #9
    b9e4:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    b9e8:	000006c9 	andeq	r0, r0, r9, asr #13
    b9ec:	9e04eb04 	vmlals.f64	d14, d4, d4
    b9f0:	12000000 	andne	r0, r0, #0
    b9f4:	003c0d0e 	eorseq	r0, ip, lr, lsl #26
    b9f8:	04ec0400 	strbteq	r0, [ip], #1024	; 0x400
    b9fc:	000000db 	ldrdeq	r0, [r0], -fp
    ba00:	06d30e14 			; <UNDEFINED> instruction: 0x06d30e14
    ba04:	ed040000 	stc	0, cr0, [r4, #-0]
    ba08:	00009e04 	andeq	r9, r0, r4, lsl #28
    ba0c:	2f0e1600 	svccs	0x000e1600
    ba10:	0400003d 	streq	r0, [r0], #-61	; 0x3d
    ba14:	00db04ee 	sbcseq	r0, fp, lr, ror #9
    ba18:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    ba1c:	000006dd 	ldrdeq	r0, [r0], -sp
    ba20:	9e04ef04 	cdpls	15, 0, cr14, cr4, cr4, {0}
    ba24:	1a000000 	bne	ba2c <_Min_Stack_Size+0xb62c>
    ba28:	0005580e 	andeq	r5, r5, lr, lsl #16
    ba2c:	04f00400 	ldrbteq	r0, [r0], #1024	; 0x400
    ba30:	000000db 	ldrdeq	r0, [r0], -fp
    ba34:	369f0e1c 			; <UNDEFINED> instruction: 0x369f0e1c
    ba38:	f1040000 	cps	#0
    ba3c:	00009e04 	andeq	r9, r0, r4, lsl #28
    ba40:	100e1e00 	andne	r1, lr, r0, lsl #28
    ba44:	0400003e 	streq	r0, [r0], #-62	; 0x3e
    ba48:	00db04f2 	ldrsheq	r0, [fp], #66	; 0x42
    ba4c:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
    ba50:	000036a9 	andeq	r3, r0, r9, lsr #13
    ba54:	9e04f304 	cdpls	3, 0, cr15, cr4, cr4, {0}
    ba58:	22000000 	andcs	r0, r0, #0
    ba5c:	3e980b00 	vfnmscc.f64	d0, d8, d0
    ba60:	f4040000 	vst4.8	{d0-d3}, [r4], r0
    ba64:	0002ea04 	andeq	lr, r2, r4, lsl #20
    ba68:	05120f00 	ldreq	r0, [r2, #-3840]	; 0xf00
    ba6c:	00045d36 	andeq	r5, r4, r6, lsr sp
    ba70:	3d361000 	ldccc	0, cr1, [r6, #-0]
    ba74:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    ba78:	0000009e 	muleq	r0, lr, r0
    ba7c:	3ea41000 	cdpcc	0, 10, cr1, cr4, cr0, {0}
    ba80:	3b050000 	blcc	14ba88 <_Min_Stack_Size+0x14b688>
    ba84:	0000009e 	muleq	r0, lr, r0
    ba88:	3f9c1002 	svccc	0x009c1002
    ba8c:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    ba90:	0000009e 	muleq	r0, lr, r0
    ba94:	3e561004 	cdpcc	0, 5, cr1, cr6, cr4, {0}
    ba98:	41050000 	mrsmi	r0, (UNDEF: 5)
    ba9c:	0000009e 	muleq	r0, lr, r0
    baa0:	3e741006 	cdpcc	0, 7, cr1, cr4, cr6, {0}
    baa4:	44050000 	strmi	r0, [r5], #-0
    baa8:	0000009e 	muleq	r0, lr, r0
    baac:	3f4b1008 	svccc	0x004b1008
    bab0:	47050000 	strmi	r0, [r5, -r0]
    bab4:	0000009e 	muleq	r0, lr, r0
    bab8:	3e82100a 	cdpcc	0, 8, cr1, cr2, cr10, {0}
    babc:	4b050000 	blmi	14bac4 <_Min_Stack_Size+0x14b6c4>
    bac0:	0000009e 	muleq	r0, lr, r0
    bac4:	3e67100c 	cdpcc	0, 6, cr1, cr7, cr12, {0}
    bac8:	51050000 	mrspl	r0, (UNDEF: 5)
    bacc:	0000009e 	muleq	r0, lr, r0
    bad0:	3daa100e 	stccc	0, cr1, [sl, #56]!	; 0x38
    bad4:	54050000 	strpl	r0, [r5], #-0
    bad8:	0000009e 	muleq	r0, lr, r0
    badc:	c5030010 	strgt	r0, [r3, #-16]
    bae0:	0500003d 	streq	r0, [r0, #-61]	; 0x3d
    bae4:	0003e855 	andeq	lr, r3, r5, asr r8
    bae8:	05100f00 	ldreq	r0, [r0, #-3840]	; 0xf00
    baec:	0004b95b 	andeq	fp, r4, fp, asr r9
    baf0:	3e1e1000 	cdpcc	0, 1, cr1, cr14, cr0, {0}
    baf4:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
    baf8:	0000009e 	muleq	r0, lr, r0
    bafc:	3c6c1000 	stclcc	0, cr1, [ip], #-0
    bb00:	61050000 	mrsvs	r0, (UNDEF: 5)
    bb04:	0000009e 	muleq	r0, lr, r0
    bb08:	3e011002 	cdpcc	0, 0, cr1, cr1, cr2, {0}
    bb0c:	64050000 	strvs	r0, [r5], #-0
    bb10:	0000009e 	muleq	r0, lr, r0
    bb14:	3d701004 	ldclcc	0, cr1, [r0, #-16]!
    bb18:	67050000 	strvs	r0, [r5, -r0]
    bb1c:	0000009e 	muleq	r0, lr, r0
    bb20:	3e481006 	cdpcc	0, 4, cr1, cr8, cr6, {0}
    bb24:	6a050000 	bvs	14bb2c <_Min_Stack_Size+0x14b72c>
    bb28:	000000b4 	strheq	r0, [r0], -r4
    bb2c:	3dbc1008 	ldccc	0, cr1, [ip, #32]!
    bb30:	6d050000 	stcvs	0, cr0, [r5, #-0]
    bb34:	0000009e 	muleq	r0, lr, r0
    bb38:	4d03000c 	stcmi	0, cr0, [r3, #-48]	; 0xffffffd0
    bb3c:	0500003c 	streq	r0, [r0, #-60]	; 0x3c
    bb40:	0004686f 	andeq	r6, r4, pc, ror #16
    bb44:	3c5d1100 	ldfcce	f1, [sp], {-0}
    bb48:	e0010000 	and	r0, r1, r0
    bb4c:	080049d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp, lr}
    bb50:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    bb54:	061d9c01 	ldreq	r9, [sp], -r1, lsl #24
    bb58:	7d120000 	ldcvc	0, cr0, [r2, #-0]
    bb5c:	0100003e 	tsteq	r0, lr, lsr r0
    bb60:	00061de0 	andeq	r1, r6, r0, ror #27
    bb64:	007b9200 	rsbseq	r9, fp, r0, lsl #4
    bb68:	4a0a1300 	bmi	290770 <_Min_Stack_Size+0x290370>
    bb6c:	0c510800 	mrrceq	8, 0, r0, r1, cr0
    bb70:	05020000 	streq	r0, [r2, #-0]
    bb74:	01140000 	tsteq	r4, r0
    bb78:	14310151 	ldrtne	r0, [r1], #-337	; 0x151
    bb7c:	40035001 	andmi	r5, r3, r1
    bb80:	15002441 	strne	r2, [r0, #-1089]	; 0x441
    bb84:	08004a18 	stmdaeq	r0, {r3, r4, r9, fp, lr}
    bb88:	00000c51 	andeq	r0, r0, r1, asr ip
    bb8c:	0000051c 	andeq	r0, r0, ip, lsl r5
    bb90:	01510114 	cmpeq	r1, r4, lsl r1
    bb94:	50011430 	andpl	r1, r1, r0, lsr r4
    bb98:	24414003 	strbcs	r4, [r1], #-3
    bb9c:	4a221300 	bmi	8907a4 <_Min_Stack_Size+0x8903a4>
    bba0:	0c510800 	mrrceq	8, 0, r0, r1, cr0
    bba4:	05360000 	ldreq	r0, [r6, #-0]!
    bba8:	01140000 	tsteq	r4, r0
    bbac:	14310151 	ldrtne	r0, [r1], #-337	; 0x151
    bbb0:	0a035001 	beq	dfbbc <_Min_Stack_Size+0xdf7bc>
    bbb4:	15001000 	strne	r1, [r0, #-0]
    bbb8:	08004a30 	stmdaeq	r0, {r4, r5, r9, fp, lr}
    bbbc:	00000c51 	andeq	r0, r0, r1, asr ip
    bbc0:	00000550 	andeq	r0, r0, r0, asr r5
    bbc4:	01510114 	cmpeq	r1, r4, lsl r1
    bbc8:	50011430 	andpl	r1, r1, r0, lsr r4
    bbcc:	10000a03 	andne	r0, r0, r3, lsl #20
    bbd0:	4a3a1300 	bmi	e907d8 <_Min_Stack_Size+0xe903d8>
    bbd4:	0c680800 	stcleq	8, cr0, [r8], #-0
    bbd8:	056a0000 	strbeq	r0, [sl, #-0]!
    bbdc:	01140000 	tsteq	r4, r0
    bbe0:	14310151 	ldrtne	r0, [r1], #-337	; 0x151
    bbe4:	0a035001 	beq	dfbf0 <_Min_Stack_Size+0xdf7f0>
    bbe8:	15004000 	strne	r4, [r0, #-0]
    bbec:	08004a48 	stmdaeq	r0, {r3, r6, r9, fp, lr}
    bbf0:	00000c68 	andeq	r0, r0, r8, ror #24
    bbf4:	00000584 	andeq	r0, r0, r4, lsl #11
    bbf8:	01510114 	cmpeq	r1, r4, lsl r1
    bbfc:	50011430 	andpl	r1, r1, r0, lsr r4
    bc00:	40000a03 	andmi	r0, r0, r3, lsl #20
    bc04:	4a521300 	bmi	149080c <_Min_Stack_Size+0x149040c>
    bc08:	0c680800 	stcleq	8, cr0, [r8], #-0
    bc0c:	059e0000 	ldreq	r0, [lr]
    bc10:	01140000 	tsteq	r4, r0
    bc14:	14310151 	ldrtne	r0, [r1], #-337	; 0x151
    bc18:	0a035001 	beq	dfc24 <_Min_Stack_Size+0xdf824>
    bc1c:	15008000 	strne	r8, [r0, #-0]
    bc20:	08004a60 	stmdaeq	r0, {r5, r6, r9, fp, lr}
    bc24:	00000c68 	andeq	r0, r0, r8, ror #24
    bc28:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    bc2c:	01510114 	cmpeq	r1, r4, lsl r1
    bc30:	50011430 	andpl	r1, r1, r0, lsr r4
    bc34:	80000a03 	andhi	r0, r0, r3, lsl #20
    bc38:	4a6a1300 	bmi	1a90840 <_Min_Stack_Size+0x1a90440>
    bc3c:	0c510800 	mrrceq	8, 0, r0, r1, cr0
    bc40:	05d20000 	ldrbeq	r0, [r2]
    bc44:	01140000 	tsteq	r4, r0
    bc48:	14310151 	ldrtne	r0, [r1], #-337	; 0x151
    bc4c:	0a035001 	beq	dfc58 <_Min_Stack_Size+0xdf858>
    bc50:	15002000 	strne	r2, [r0, #-0]
    bc54:	08004a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp, lr}
    bc58:	00000c51 	andeq	r0, r0, r1, asr ip
    bc5c:	000005ec 	andeq	r0, r0, ip, ror #11
    bc60:	01510114 	cmpeq	r1, r4, lsl r1
    bc64:	50011430 	andpl	r1, r1, r0, lsr r4
    bc68:	20000a03 	andcs	r0, r0, r3, lsl #20
    bc6c:	4a821300 	bmi	fe090874 <_estack+0xde060874>
    bc70:	0c510800 	mrrceq	8, 0, r0, r1, cr0
    bc74:	06060000 	streq	r0, [r6], -r0
    bc78:	01140000 	tsteq	r4, r0
    bc7c:	14310151 	ldrtne	r0, [r1], #-337	; 0x151
    bc80:	40035001 	andmi	r5, r3, r1
    bc84:	16002440 	strne	r2, [r0], -r0, asr #8
    bc88:	08004a90 	stmdaeq	r0, {r4, r7, r9, fp, lr}
    bc8c:	00000c51 	andeq	r0, r0, r1, asr ip
    bc90:	01510114 	cmpeq	r1, r4, lsl r1
    bc94:	50011430 	andpl	r1, r1, r0, lsr r4
    bc98:	24404003 	strbcs	r4, [r0], #-3
    bc9c:	04170000 	ldreq	r0, [r7], #-0
    bca0:	000003dc 	ldrdeq	r0, [r0], -ip
    bca4:	003c1918 	eorseq	r1, ip, r8, lsl r9
    bca8:	011c0100 	tsteq	ip, r0, lsl #2
    bcac:	08004aa8 	stmdaeq	r0, {r3, r5, r7, r9, fp, lr}
    bcb0:	00000052 	andeq	r0, r0, r2, asr r0
    bcb4:	06689c01 	strbteq	r9, [r8], -r1, lsl #24
    bcb8:	7d190000 	ldcvc	0, cr0, [r9, #-0]
    bcbc:	0100003e 	tsteq	r0, lr, lsr r0
    bcc0:	061d011c 			; <UNDEFINED> instruction: 0x061d011c
    bcc4:	50010000 	andpl	r0, r1, r0
    bcc8:	003de41a 	eorseq	lr, sp, sl, lsl r4
    bccc:	011c0100 	tsteq	ip, r0, lsl #2
    bcd0:	00000668 	andeq	r0, r0, r8, ror #12
    bcd4:	00007c30 	andeq	r7, r0, r0, lsr ip
    bcd8:	0027db1b 	eoreq	sp, r7, fp, lsl fp
    bcdc:	011e0100 	tsteq	lr, r0, lsl #2
    bce0:	0000009e 	muleq	r0, lr, r0
    bce4:	00007c51 	andeq	r7, r0, r1, asr ip
    bce8:	5d041700 	stcpl	7, cr1, [r4, #-0]
    bcec:	18000004 	stmdane	r0, {r2}
    bcf0:	00003f7e 	andeq	r3, r0, lr, ror pc
    bcf4:	fc015c01 	stc2	12, cr5, [r1], {1}
    bcf8:	ec08004a 	stc	0, cr0, [r8], {74}	; 0x4a
    bcfc:	01000000 	mrseq	r0, (UNDEF: 0)
    bd00:	0007339c 	muleq	r7, ip, r3
    bd04:	3e7d1900 	cdpcc	9, 7, cr1, cr13, cr0, {0}
    bd08:	5c010000 	stcpl	0, cr0, [r1], {-0}
    bd0c:	00061d01 	andeq	r1, r6, r1, lsl #26
    bd10:	1a500100 	bne	140c118 <_Min_Stack_Size+0x140bd18>
    bd14:	00003c27 	andeq	r3, r0, r7, lsr #24
    bd18:	33015c01 	movwcc	r5, #7169	; 0x1c01
    bd1c:	7b000007 	blvc	bd40 <_Min_Stack_Size+0xb940>
    bd20:	1b00007c 	blne	bf18 <_Min_Stack_Size+0xbb18>
    bd24:	000027db 	ldrdeq	r2, [r0], -fp
    bd28:	9e015e01 	cdpls	14, 0, cr5, cr1, cr1, {0}
    bd2c:	a7000000 	strge	r0, [r0, -r0]
    bd30:	1b00007c 	blne	bf28 <_Min_Stack_Size+0xbb28>
    bd34:	00003e41 	andeq	r3, r0, r1, asr #28
    bd38:	9e015e01 	cdpls	14, 0, cr5, cr1, cr1, {0}
    bd3c:	dc000000 	stcle	0, cr0, [r0], {-0}
    bd40:	1b00007c 	blne	bf38 <_Min_Stack_Size+0xbb38>
    bd44:	00003fa9 	andeq	r3, r0, r9, lsr #31
    bd48:	9e015e01 	cdpls	14, 0, cr5, cr1, cr1, {0}
    bd4c:	07000000 	streq	r0, [r0, -r0]
    bd50:	1b00007d 	blne	bf4c <_Min_Stack_Size+0xbb4c>
    bd54:	00003fb0 			; <UNDEFINED> instruction: 0x00003fb0
    bd58:	9e015e01 	cdpls	14, 0, cr5, cr1, cr1, {0}
    bd5c:	45000000 	strmi	r0, [r0, #-0]
    bd60:	1c00007d 	stcne	0, cr0, [r0], {125}	; 0x7d
    bd64:	00706d74 	rsbseq	r6, r0, r4, ror sp
    bd68:	b4015f01 	strlt	r5, [r1], #-3841	; 0xf01
    bd6c:	65000000 	strvs	r0, [r0, #-0]
    bd70:	1b00007d 	blne	bf6c <_Min_Stack_Size+0xbb6c>
    bd74:	00003fe2 	andeq	r3, r0, r2, ror #31
    bd78:	b4015f01 	strlt	r5, [r1], #-3841	; 0xf01
    bd7c:	a6000000 	strge	r0, [r0], -r0
    bd80:	1b00007d 	blne	bf7c <_Min_Stack_Size+0xbb7c>
    bd84:	00000607 	andeq	r0, r0, r7, lsl #12
    bd88:	b4016101 	strlt	r6, [r1], #-257	; 0x101
    bd8c:	dc000000 	stcle	0, cr0, [r0], {-0}
    bd90:	1b00007d 	blne	bf8c <_Min_Stack_Size+0xbb8c>
    bd94:	00003c14 	andeq	r3, r0, r4, lsl ip
    bd98:	b4016101 	strlt	r6, [r1], #-257	; 0x101
    bd9c:	22000000 	andcs	r0, r0, #0
    bda0:	1b00007e 	blne	bfa0 <_Min_Stack_Size+0xbba0>
    bda4:	00003c22 	andeq	r3, r0, r2, lsr #24
    bda8:	b4016101 	strlt	r6, [r1], #-257	; 0x101
    bdac:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    bdb0:	0000007e 	andeq	r0, r0, lr, ror r0
    bdb4:	04b90417 	ldrteq	r0, [r9], #1047	; 0x417
    bdb8:	f2180000 	vhadd.s16	d0, d8, d0
    bdbc:	0100003c 	tsteq	r0, ip, lsr r0
    bdc0:	4be801e0 	blmi	ffa0c548 <_estack+0xdf9dc548>
    bdc4:	00180800 	andseq	r0, r8, r0, lsl #16
    bdc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    bdcc:	0000075e 	andeq	r0, r0, lr, asr r7
    bdd0:	003de419 	eorseq	lr, sp, r9, lsl r4
    bdd4:	01e00100 	mvneq	r0, r0, lsl #2
    bdd8:	00000668 	andeq	r0, r0, r8, ror #12
    bddc:	18005001 	stmdane	r0, {r0, ip, lr}
    bde0:	00003f6f 	andeq	r3, r0, pc, ror #30
    bde4:	0001fc01 	andeq	pc, r1, r1, lsl #24
    bde8:	0e08004c 	cdpeq	0, 0, cr0, cr8, cr12, {2}
    bdec:	01000000 	mrseq	r0, (UNDEF: 0)
    bdf0:	0007839c 	muleq	r7, ip, r3
    bdf4:	3c271900 	stccc	9, cr1, [r7], #-0
    bdf8:	fc010000 	stc2	0, cr0, [r1], {-0}
    bdfc:	00073301 	andeq	r3, r7, r1, lsl #6
    be00:	00500100 	subseq	r0, r0, r0, lsl #2
    be04:	003e1618 	eorseq	r1, lr, r8, lsl r6
    be08:	02190100 	andseq	r0, r9, #0, 2
    be0c:	08004c10 	stmdaeq	r0, {r4, sl, fp, lr}
    be10:	0000001a 	andeq	r0, r0, sl, lsl r0
    be14:	07b69c01 	ldreq	r9, [r6, r1, lsl #24]!
    be18:	7d190000 	ldcvc	0, cr0, [r9, #-0]
    be1c:	0100003e 	tsteq	r0, lr, lsr r0
    be20:	061d0219 			; <UNDEFINED> instruction: 0x061d0219
    be24:	50010000 	andpl	r0, r1, r0
    be28:	00234619 	eoreq	r4, r3, r9, lsl r6
    be2c:	02190100 	andseq	r0, r9, #0, 2
    be30:	00000129 	andeq	r0, r0, r9, lsr #2
    be34:	18005101 	stmdane	r0, {r0, r8, ip, lr}
    be38:	00003e5f 	andeq	r3, r0, pc, asr lr
    be3c:	2c023201 	sfmcs	f3, 4, [r2], {1}
    be40:	1a08004c 	bne	20bf78 <_Min_Stack_Size+0x20bb78>
    be44:	01000000 	mrseq	r0, (UNDEF: 0)
    be48:	0007e99c 	muleq	r7, ip, r9
    be4c:	3e7d1900 	cdpcc	9, 7, cr1, cr13, cr0, {0}
    be50:	32010000 	andcc	r0, r1, #0
    be54:	00061d02 	andeq	r1, r6, r2, lsl #26
    be58:	19500100 	ldmdbne	r0, {r8}^
    be5c:	00002346 	andeq	r2, r0, r6, asr #6
    be60:	29023201 	stmdbcs	r2, {r0, r9, ip, sp}
    be64:	01000001 	tsteq	r0, r1
    be68:	97180051 			; <UNDEFINED> instruction: 0x97180051
    be6c:	0100003d 	tsteq	r0, sp, lsr r0
    be70:	4c48024d 	sfmmi	f0, 2, [r8], {77}	; 0x4d
    be74:	00160800 	andseq	r0, r6, r0, lsl #16
    be78:	9c010000 	stcls	0, cr0, [r1], {-0}
    be7c:	0000081e 	andeq	r0, r0, lr, lsl r8
    be80:	003e7d19 	eorseq	r7, lr, r9, lsl sp
    be84:	024d0100 	subeq	r0, sp, #0, 2
    be88:	0000061d 	andeq	r0, r0, sp, lsl r6
    be8c:	9c1a5001 	ldcls	0, cr5, [sl], {1}
    be90:	0100003f 	tsteq	r0, pc, lsr r0
    be94:	009e024d 	addseq	r0, lr, sp, asr #4
    be98:	7e9b0000 	cdpvc	0, 9, cr0, cr11, cr0, {0}
    be9c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    bea0:	00003c79 	andeq	r3, r0, r9, ror ip
    bea4:	60026101 	andvs	r6, r2, r1, lsl #2
    bea8:	1e08004c 	cdpne	0, 0, cr0, cr8, cr12, {2}
    beac:	01000000 	mrseq	r0, (UNDEF: 0)
    beb0:	0008519c 	muleq	r8, ip, r1
    beb4:	3e7d1900 	cdpcc	9, 7, cr1, cr13, cr0, {0}
    beb8:	61010000 	mrsvs	r0, (UNDEF: 1)
    bebc:	00061d02 	andeq	r1, r6, r2, lsl #26
    bec0:	19500100 	ldmdbne	r0, {r8}^
    bec4:	00003d36 	andeq	r3, r0, r6, lsr sp
    bec8:	9e026101 	adflss	f6, f2, f1
    becc:	01000000 	mrseq	r0, (UNDEF: 0)
    bed0:	d4180051 	ldrle	r0, [r8], #-81	; 0x51
    bed4:	0100003c 	tsteq	r0, ip, lsr r0
    bed8:	4c80027b 	sfmmi	f0, 4, [r0], {123}	; 0x7b
    bedc:	00200800 	eoreq	r0, r0, r0, lsl #16
    bee0:	9c010000 	stcls	0, cr0, [r1], {-0}
    bee4:	00000884 	andeq	r0, r0, r4, lsl #17
    bee8:	003e7d19 	eorseq	r7, lr, r9, lsl sp
    beec:	027b0100 	rsbseq	r0, fp, #0, 2
    bef0:	0000061d 	andeq	r0, r0, sp, lsl r6
    bef4:	4c195001 	ldcmi	0, cr5, [r9], {1}
    bef8:	0100003d 	tsteq	r0, sp, lsr r0
    befc:	009e027b 	addseq	r0, lr, fp, ror r2
    bf00:	51010000 	mrspl	r0, (UNDEF: 1)
    bf04:	3d171800 	ldccc	8, cr1, [r7, #-0]
    bf08:	93010000 	movwls	r0, #4096	; 0x1000
    bf0c:	004ca002 	subeq	sl, ip, r2
    bf10:	00001a08 	andeq	r1, r0, r8, lsl #20
    bf14:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    bf18:	19000008 	stmdbne	r0, {r3}
    bf1c:	00003e7d 	andeq	r3, r0, sp, ror lr
    bf20:	1d029301 	stcne	3, cr9, [r2, #-4]
    bf24:	01000006 	tsteq	r0, r6
    bf28:	23461950 	movtcs	r1, #26960	; 0x6950
    bf2c:	93010000 	movwls	r0, #4096	; 0x1000
    bf30:	00012902 	andeq	r2, r1, r2, lsl #18
    bf34:	00510100 	subseq	r0, r1, r0, lsl #2
    bf38:	003df318 	eorseq	pc, sp, r8, lsl r3	; <UNPREDICTABLE>
    bf3c:	02b20100 	adcseq	r0, r2, #0, 2
    bf40:	08004cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, lr}
    bf44:	0000001a 	andeq	r0, r0, sl, lsl r0
    bf48:	08ea9c01 	stmiaeq	sl!, {r0, sl, fp, ip, pc}^
    bf4c:	7d190000 	ldcvc	0, cr0, [r9, #-0]
    bf50:	0100003e 	tsteq	r0, lr, lsr r0
    bf54:	061d02b2 			; <UNDEFINED> instruction: 0x061d02b2
    bf58:	50010000 	andpl	r0, r1, r0
    bf5c:	00234619 	eoreq	r4, r3, r9, lsl r6
    bf60:	02b20100 	adcseq	r0, r2, #0, 2
    bf64:	00000129 	andeq	r0, r0, r9, lsr #2
    bf68:	18005101 	stmdane	r0, {r0, r8, ip, lr}
    bf6c:	00003f87 	andeq	r3, r0, r7, lsl #31
    bf70:	d802d701 	stmdale	r2, {r0, r8, r9, sl, ip, lr, pc}
    bf74:	4608004c 	strmi	r0, [r8], -ip, asr #32
    bf78:	01000000 	mrseq	r0, (UNDEF: 0)
    bf7c:	00093f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    bf80:	3d271900 	stccc	9, cr1, [r7, #-0]
    bf84:	d7010000 	strle	r0, [r1, -r0]
    bf88:	00061d02 	andeq	r1, r6, r2, lsl #26
    bf8c:	1a500100 	bne	140c394 <_Min_Stack_Size+0x140bf94>
    bf90:	00003c27 	andeq	r3, r0, r7, lsr #24
    bf94:	3302d701 	movwcc	sp, #9985	; 0x2701
    bf98:	bc000007 	stclt	0, cr0, [r0], {7}
    bf9c:	1b00007e 	blne	c19c <_Min_Stack_Size+0xbd9c>
    bfa0:	000027db 	ldrdeq	r2, [r0], -fp
    bfa4:	9e02d901 	cdpls	9, 0, cr13, cr2, cr1, {0}
    bfa8:	dd000000 	stcle	0, cr0, [r0, #-0]
    bfac:	1c00007e 	stcne	0, cr0, [r0], {126}	; 0x7e
    bfb0:	00706d74 	rsbseq	r6, r0, r4, ror sp
    bfb4:	9e02d901 	cdpls	9, 0, cr13, cr2, cr1, {0}
    bfb8:	07000000 	streq	r0, [r0, -r0]
    bfbc:	0000007f 	andeq	r0, r0, pc, ror r0
    bfc0:	003fce1d 	eorseq	ip, pc, sp, lsl lr	; <UNPREDICTABLE>
    bfc4:	03210100 	teqeq	r1, #0, 2
    bfc8:	0000009e 	muleq	r0, lr, r0
    bfcc:	08004d20 	stmdaeq	r0, {r5, r8, sl, fp, lr}
    bfd0:	00000006 	andeq	r0, r0, r6
    bfd4:	096a9c01 	stmdbeq	sl!, {r0, sl, fp, ip, pc}^
    bfd8:	7d1a0000 	ldcvc	0, cr0, [sl, #-0]
    bfdc:	0100003e 	tsteq	r0, lr, lsr r0
    bfe0:	061d0321 	ldreq	r0, [sp], -r1, lsr #6
    bfe4:	7f260000 	svcvc	0x00260000
    bfe8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    bfec:	00003fbd 			; <UNDEFINED> instruction: 0x00003fbd
    bff0:	28033101 	stmdacs	r3, {r0, r8, ip, sp}
    bff4:	0408004d 	streq	r0, [r8], #-77	; 0x4d
    bff8:	01000000 	mrseq	r0, (UNDEF: 0)
    bffc:	00099d9c 	muleq	r9, ip, sp
    c000:	3e7d1900 	cdpcc	9, 7, cr1, cr13, cr0, {0}
    c004:	31010000 	mrscc	r0, (UNDEF: 1)
    c008:	00061d03 	andeq	r1, r6, r3, lsl #26
    c00c:	19500100 	ldmdbne	r0, {r8}^
    c010:	0000347b 	andeq	r3, r0, fp, ror r4
    c014:	9e033101 	adflss	f3, f3, f1
    c018:	01000000 	mrseq	r0, (UNDEF: 0)
    c01c:	53180051 	tstpl	r8, #81	; 0x51
    c020:	0100003f 	tsteq	r0, pc, lsr r0
    c024:	4d2c038b 	stcmi	3, cr0, [ip, #-556]!	; 0xfffffdd4
    c028:	001a0800 	andseq	r0, sl, r0, lsl #16
    c02c:	9c010000 	stcls	0, cr0, [r1], {-0}
    c030:	000009d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    c034:	003e7d19 	eorseq	r7, lr, r9, lsl sp
    c038:	038b0100 	orreq	r0, fp, #0, 2
    c03c:	0000061d 	andeq	r0, r0, sp, lsl r6
    c040:	46195001 	ldrmi	r5, [r9], -r1
    c044:	01000023 	tsteq	r0, r3, lsr #32
    c048:	0129038b 	smlawbeq	r9, fp, r3, r0
    c04c:	51010000 	mrspl	r0, (UNDEF: 1)
    c050:	3d601800 	stclcc	8, cr1, [r0, #-0]
    c054:	a1010000 	mrsge	r0, (UNDEF: 1)
    c058:	004d4803 	subeq	r4, sp, r3, lsl #16
    c05c:	00000c08 	andeq	r0, r0, r8, lsl #24
    c060:	f59c0100 			; <UNDEFINED> instruction: 0xf59c0100
    c064:	19000009 	stmdbne	r0, {r0, r3}
    c068:	00003e7d 	andeq	r3, r0, sp, ror lr
    c06c:	1d03a101 	stfned	f2, [r3, #-4]
    c070:	01000006 	tsteq	r0, r6
    c074:	641d0050 	ldrvs	r0, [sp], #-80	; 0x50
    c078:	0100003f 	tsteq	r0, pc, lsr r0
    c07c:	009e03b3 			; <UNDEFINED> instruction: 0x009e03b3
    c080:	4d540000 	ldclmi	0, cr0, [r4, #-0]
    c084:	000c0800 	andeq	r0, ip, r0, lsl #16
    c088:	9c010000 	stcls	0, cr0, [r1], {-0}
    c08c:	00000a3e 	andeq	r0, r0, lr, lsr sl
    c090:	003e7d1a 	eorseq	r7, lr, sl, lsl sp
    c094:	03b30100 			; <UNDEFINED> instruction: 0x03b30100
    c098:	0000061d 	andeq	r0, r0, sp, lsl r6
    c09c:	00007f47 	andeq	r7, r0, r7, asr #30
    c0a0:	003d4419 	eorseq	r4, sp, r9, lsl r4
    c0a4:	03b30100 			; <UNDEFINED> instruction: 0x03b30100
    c0a8:	00000093 	muleq	r0, r3, r0
    c0ac:	aa1b5101 	bge	6e04b8 <_Min_Stack_Size+0x6e00b8>
    c0b0:	0100003c 	tsteq	r0, ip, lsr r0
    c0b4:	009e03b5 			; <UNDEFINED> instruction: 0x009e03b5
    c0b8:	7f680000 	svcvc	0x00680000
    c0bc:	1d000000 	stcne	0, cr0, [r0, #-0]
    c0c0:	00003c95 	muleq	r0, r5, ip
    c0c4:	9e03cc01 	cdpls	12, 0, cr12, cr3, cr1, {0}
    c0c8:	60000000 	andvs	r0, r0, r0
    c0cc:	0608004d 	streq	r0, [r8], -sp, asr #32
    c0d0:	01000000 	mrseq	r0, (UNDEF: 0)
    c0d4:	000a699c 	muleq	sl, ip, r9
    c0d8:	3e7d1a00 	vaddcc.f32	s3, s26, s0
    c0dc:	cc010000 	stcgt	0, cr0, [r1], {-0}
    c0e0:	00061d03 	andeq	r1, r6, r3, lsl #26
    c0e4:	007f8700 	rsbseq	r8, pc, r0, lsl #14
    c0e8:	b1180000 	tstlt	r8, r0
    c0ec:	0100003c 	tsteq	r0, ip, lsr r0
    c0f0:	4d6803f1 	stclmi	3, cr0, [r8, #-964]!	; 0xfffffc3c
    c0f4:	00140800 	andseq	r0, r4, r0, lsl #16
    c0f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    c0fc:	00000aac 	andeq	r0, r0, ip, lsr #21
    c100:	003e7d19 	eorseq	r7, lr, r9, lsl sp
    c104:	03f10100 	mvnseq	r0, #0, 2
    c108:	0000061d 	andeq	r0, r0, sp, lsl r6
    c10c:	d51a5001 	ldrle	r5, [sl, #-1]
    c110:	0100003d 	tsteq	r0, sp, lsr r0
    c114:	009e03f1 			; <UNDEFINED> instruction: 0x009e03f1
    c118:	7fa80000 	svcvc	0x00a80000
    c11c:	46190000 	ldrmi	r0, [r9], -r0
    c120:	01000023 	tsteq	r0, r3, lsr #32
    c124:	012903f1 	strdeq	r0, [r9, -r1]!
    c128:	52010000 	andpl	r0, r1, #0
    c12c:	3c3c1800 	ldccc	8, cr1, [ip], #-0
    c130:	5d010000 	stcpl	0, cr0, [r1, #-0]
    c134:	004d7c04 	subeq	r7, sp, r4, lsl #24
    c138:	00001e08 	andeq	r1, r0, r8, lsl #28
    c13c:	0f9c0100 	svceq	0x009c0100
    c140:	1900000b 	stmdbne	r0, {r0, r1, r3}
    c144:	00003e7d 	andeq	r3, r0, sp, ror lr
    c148:	1d045d01 	stcne	13, cr5, [r4, #-4]
    c14c:	01000006 	tsteq	r0, r6
    c150:	3d8c1a50 	vstrcc	s2, [ip, #320]	; 0x140
    c154:	5d010000 	stcpl	0, cr0, [r1, #-0]
    c158:	00009304 	andeq	r9, r0, r4, lsl #6
    c15c:	007fe200 	rsbseq	lr, pc, r0, lsl #4
    c160:	23461900 	movtcs	r1, #26880	; 0x6900
    c164:	5d010000 	stcpl	0, cr0, [r1, #-0]
    c168:	00012904 	andeq	r2, r1, r4, lsl #18
    c16c:	1b520100 	blne	148c574 <_Min_Stack_Size+0x148c174>
    c170:	000030bb 	strheq	r3, [r0], -fp
    c174:	9e045f01 	cdpls	15, 0, cr5, cr4, cr1, {0}
    c178:	03000000 	movweq	r0, #0
    c17c:	1b000080 	blne	c384 <_Min_Stack_Size+0xbf84>
    c180:	000031e4 	andeq	r3, r0, r4, ror #3
    c184:	9e045f01 	cdpls	15, 0, cr5, cr4, cr1, {0}
    c188:	30000000 	andcc	r0, r0, r0
    c18c:	00000080 	andeq	r0, r0, r0, lsl #1
    c190:	003d011d 	eorseq	r0, sp, sp, lsl r1
    c194:	04890100 	streq	r0, [r9], #256	; 0x100
    c198:	000000fb 	strdeq	r0, [r0], -fp
    c19c:	08004d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, lr}
    c1a0:	0000000c 	andeq	r0, r0, ip
    c1a4:	0b589c01 	bleq	16331b0 <_Min_Stack_Size+0x1632db0>
    c1a8:	7d1a0000 	ldcvc	0, cr0, [sl, #-0]
    c1ac:	0100003e 	tsteq	r0, lr, lsr r0
    c1b0:	061d0489 	ldreq	r0, [sp], -r9, lsl #9
    c1b4:	805a0000 	subshi	r0, sl, r0
    c1b8:	7f190000 	svcvc	0x00190000
    c1bc:	0100003d 	tsteq	r0, sp, lsr r0
    c1c0:	009e0489 	addseq	r0, lr, r9, lsl #9
    c1c4:	51010000 	mrspl	r0, (UNDEF: 1)
    c1c8:	0026101b 	eoreq	r1, r6, fp, lsl r0
    c1cc:	048b0100 	streq	r0, [fp], #256	; 0x100
    c1d0:	000000fb 	strdeq	r0, [r0], -fp
    c1d4:	0000807b 	andeq	r8, r0, fp, ror r0
    c1d8:	3ead1800 	cdpcc	8, 10, cr1, cr13, cr0, {0}
    c1dc:	b2010000 	andlt	r0, r1, #0
    c1e0:	004da804 	subeq	sl, sp, r4, lsl #16
    c1e4:	00000808 	andeq	r0, r0, r8, lsl #16
    c1e8:	8d9c0100 	ldfhis	f0, [ip]
    c1ec:	1900000b 	stmdbne	r0, {r0, r1, r3}
    c1f0:	00003e7d 	andeq	r3, r0, sp, ror lr
    c1f4:	1d04b201 	sfmne	f3, 1, [r4, #-4]
    c1f8:	01000006 	tsteq	r0, r6
    c1fc:	3d7f1a50 	vldmdbcc	pc!, {s3-s82}
    c200:	b2010000 	andlt	r0, r1, #0
    c204:	00009e04 	andeq	r9, r0, r4, lsl #28
    c208:	0080a300 	addeq	sl, r0, r0, lsl #6
    c20c:	c01d0000 	andsgt	r0, sp, r0
    c210:	0100003c 	tsteq	r0, ip, lsr r0
    c214:	010704cb 	smlabteq	r7, fp, r4, r0
    c218:	4db00000 	ldcmi	0, cr0, [r0]
    c21c:	002a0800 	eoreq	r0, sl, r0, lsl #16
    c220:	9c010000 	stcls	0, cr0, [r1], {-0}
    c224:	00000c04 	andeq	r0, r0, r4, lsl #24
    c228:	003e7d1a 	eorseq	r7, lr, sl, lsl sp
    c22c:	04cb0100 	strbeq	r0, [fp], #256	; 0x100
    c230:	0000061d 	andeq	r0, r0, sp, lsl r6
    c234:	000080c4 	andeq	r8, r0, r4, asr #1
    c238:	003d8c1a 	eorseq	r8, sp, sl, lsl ip
    c23c:	04cb0100 	strbeq	r0, [fp], #256	; 0x100
    c240:	00000093 	muleq	r0, r3, r0
    c244:	000080e5 	andeq	r8, r0, r5, ror #1
    c248:	0026101b 	eoreq	r1, r6, fp, lsl r0
    c24c:	04cd0100 	strbeq	r0, [sp], #256	; 0x100
    c250:	00000107 	andeq	r0, r0, r7, lsl #2
    c254:	00008106 	andeq	r8, r0, r6, lsl #2
    c258:	0030bb1e 	eorseq	fp, r0, lr, lsl fp
    c25c:	04ce0100 	strbeq	r0, [lr], #256	; 0x100
    c260:	0000009e 	muleq	r0, lr, r0
    c264:	0031e41b 	eorseq	lr, r1, fp, lsl r4
    c268:	04ce0100 	strbeq	r0, [lr], #256	; 0x100
    c26c:	0000009e 	muleq	r0, lr, r0
    c270:	00008125 	andeq	r8, r0, r5, lsr #2
    c274:	00376c1b 	eorseq	r6, r7, fp, lsl ip
    c278:	04ce0100 	strbeq	r0, [lr], #256	; 0x100
    c27c:	0000009e 	muleq	r0, lr, r0
    c280:	00008141 	andeq	r8, r0, r1, asr #2
    c284:	3e271800 	cdpcc	8, 2, cr1, cr7, cr0, {0}
    c288:	02010000 	andeq	r0, r1, #0
    c28c:	004ddc05 	subeq	sp, sp, r5, lsl #24
    c290:	00001208 	andeq	r1, r0, r8, lsl #4
    c294:	459c0100 	ldrmi	r0, [ip, #256]	; 0x100
    c298:	1900000c 	stmdbne	r0, {r2, r3}
    c29c:	00003e7d 	andeq	r3, r0, sp, ror lr
    c2a0:	1d050201 	sfmne	f0, 4, [r5, #-4]
    c2a4:	01000006 	tsteq	r0, r6
    c2a8:	3d8c1a50 	vstrcc	s2, [ip, #320]	; 0x140
    c2ac:	02010000 	andeq	r0, r1, #0
    c2b0:	00009305 	andeq	r9, r0, r5, lsl #6
    c2b4:	00816c00 	addeq	r6, r1, r0, lsl #24
    c2b8:	30bb1e00 	adcscc	r1, fp, r0, lsl #28
    c2bc:	04010000 	streq	r0, [r1], #-0
    c2c0:	00009e05 	andeq	r9, r0, r5, lsl #28
    c2c4:	1b1f0000 	blne	7cc2cc <_Min_Stack_Size+0x7cbecc>
    c2c8:	06000004 	streq	r0, [r0], -r4
    c2cc:	00e006a7 	rsceq	r0, r0, r7, lsr #13
    c2d0:	70200000 	eorvc	r0, r0, r0
    c2d4:	0700002a 	streq	r0, [r0, -sl, lsr #32]
    c2d8:	0c68024a 	sfmeq	f0, 2, [r8], #-296	; 0xfffffed8
    c2dc:	b4210000 	strtlt	r0, [r1], #-0
    c2e0:	21000000 	mrscs	r0, (UNDEF: 0)
    c2e4:	00000129 	andeq	r0, r0, r9, lsr #2
    c2e8:	27342200 	ldrcs	r2, [r4, -r0, lsl #4]!
    c2ec:	49070000 	stmdbmi	r7, {}	; <UNPREDICTABLE>
    c2f0:	00b42102 	adcseq	r2, r4, r2, lsl #2
    c2f4:	29210000 	stmdbcs	r1!, {}	; <UNPREDICTABLE>
    c2f8:	00000001 	andeq	r0, r0, r1
    c2fc:	00033800 	andeq	r3, r3, r0, lsl #16
    c300:	7f000400 	svcvc	0x00000400
    c304:	04000025 	streq	r0, [r0], #-37	; 0x25
    c308:	0002f301 	andeq	pc, r2, r1, lsl #6
    c30c:	40fa0100 	rscsmi	r0, sl, r0, lsl #2
    c310:	14180000 	ldrne	r0, [r8], #-0
    c314:	00000000 	andeq	r0, r0, r0
    c318:	555b0000 	ldrbpl	r0, [fp, #-0]
    c31c:	01020000 	mrseq	r0, (UNDEF: 2)
    c320:	00020206 	andeq	r0, r2, r6, lsl #4
    c324:	08010200 	stmdaeq	r1, {r9}
    c328:	00000200 	andeq	r0, r0, r0, lsl #4
    c32c:	38050202 	stmdacc	r5, {r1, r9}
    c330:	02000000 	andeq	r0, r0, #0
    c334:	02aa0702 	adceq	r0, sl, #524288	; 0x80000
    c338:	4c030000 	stcmi	0, cr0, [r3], {-0}
    c33c:	02000004 	andeq	r0, r0, #4
    c340:	0000483f 	andeq	r4, r0, pc, lsr r8
    c344:	05040200 	streq	r0, [r4, #-512]	; 0x200
    c348:	0000015d 	andeq	r0, r0, sp, asr r1
    c34c:	00008903 	andeq	r8, r0, r3, lsl #18
    c350:	5a410200 	bpl	104cb58 <_Min_Stack_Size+0x104c758>
    c354:	02000000 	andeq	r0, r0, #0
    c358:	021d0704 	andseq	r0, sp, #4, 14	; 0x100000
    c35c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    c360:	00015805 	andeq	r5, r1, r5, lsl #16
    c364:	07080200 	streq	r0, [r8, -r0, lsl #4]
    c368:	00000218 	andeq	r0, r0, r8, lsl r2
    c36c:	69050404 	stmdbvs	r5, {r2, sl}
    c370:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    c374:	02220704 	eoreq	r0, r2, #4, 14	; 0x100000
    c378:	4e030000 	cdpmi	0, 0, cr0, cr3, cr0, {0}
    c37c:	03000004 	movweq	r0, #4
    c380:	00003d41 	andeq	r3, r0, r1, asr #26
    c384:	008b0300 	addeq	r0, fp, r0, lsl #6
    c388:	42030000 	andmi	r0, r3, #0
    c38c:	0000004f 	andeq	r0, r0, pc, asr #32
    c390:	42070402 	andmi	r0, r7, #33554432	; 0x2000000
    c394:	05000000 	streq	r0, [r0, #-0]
    c398:	00000088 	andeq	r0, r0, r8, lsl #1
    c39c:	00007d05 	andeq	r7, r0, r5, lsl #26
    c3a0:	04010600 	streq	r0, [r1], #-1536	; 0x600
    c3a4:	00ba01f7 	ldrshteq	r0, [sl], r7
    c3a8:	31070000 	mrscc	r0, (UNDEF: 7)
    c3ac:	00000025 	andeq	r0, r0, r5, lsr #32
    c3b0:	54455308 	strbpl	r5, [r5], #-776	; 0x308
    c3b4:	09000100 	stmdbeq	r0, {r8}
    c3b8:	00003b3f 	andeq	r3, r0, pc, lsr fp
    c3bc:	a401f704 	strge	pc, [r1], #-1796	; 0x704
    c3c0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    c3c4:	00003ab6 			; <UNDEFINED> instruction: 0x00003ab6
    c3c8:	a401f704 	strge	pc, [r1], #-1796	; 0x704
    c3cc:	06000000 	streq	r0, [r0], -r0
    c3d0:	01f90401 	mvnseq	r0, r1, lsl #8
    c3d4:	000000e8 	andeq	r0, r0, r8, ror #1
    c3d8:	0002a207 	andeq	sl, r2, r7, lsl #4
    c3dc:	b7070000 	strlt	r0, [r7, -r0]
    c3e0:	01000000 	mrseq	r0, (UNDEF: 0)
    c3e4:	04910900 	ldreq	r0, [r1], #2304	; 0x900
    c3e8:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    c3ec:	0000d201 	andeq	sp, r0, r1, lsl #4
    c3f0:	04180a00 	ldreq	r0, [r8], #-2560	; 0xa00
    c3f4:	014b0330 	cmpeq	fp, r0, lsr r3
    c3f8:	490b0000 	stmdbmi	fp, {}	; <UNPREDICTABLE>
    c3fc:	0400524d 	streq	r5, [r0], #-589	; 0x24d
    c400:	009a0332 	addseq	r0, sl, r2, lsr r3
    c404:	0b000000 	bleq	c40c <_Min_Stack_Size+0xc00c>
    c408:	00524d45 	subseq	r4, r2, r5, asr #26
    c40c:	9a033304 	bls	d9024 <_Min_Stack_Size+0xd8c24>
    c410:	04000000 	streq	r0, [r0], #-0
    c414:	0040980c 	subeq	r9, r0, ip, lsl #16
    c418:	03340400 	teqeq	r4, #0, 8
    c41c:	0000009a 	muleq	r0, sl, r0
    c420:	41ce0c08 	bicmi	r0, lr, r8, lsl #24
    c424:	35040000 	strcc	r0, [r4, #-0]
    c428:	00009a03 	andeq	r9, r0, r3, lsl #20
    c42c:	e70c0c00 	str	r0, [ip, -r0, lsl #24]
    c430:	04000041 	streq	r0, [r0], #-65	; 0x41
    c434:	009a0336 	addseq	r0, sl, r6, lsr r3
    c438:	0b100000 	bleq	40c440 <_Min_Stack_Size+0x40c040>
    c43c:	04005250 	streq	r5, [r0], #-592	; 0x250
    c440:	009a0337 	addseq	r0, sl, r7, lsr r3
    c444:	00140000 	andseq	r0, r4, r0
    c448:	00408b09 	subeq	r8, r0, r9, lsl #22
    c44c:	03380400 	teqeq	r8, #0, 8
    c450:	000000f4 	strdeq	r0, [r0], -r4
    c454:	3705010d 	strcc	r0, [r5, -sp, lsl #2]
    c458:	0000016c 	andeq	r0, r0, ip, ror #2
    c45c:	00405707 	subeq	r5, r0, r7, lsl #14
    c460:	0d070000 	stceq	0, cr0, [r7, #-0]
    c464:	04000040 	streq	r0, [r0], #-64	; 0x40
    c468:	407a0300 	rsbsmi	r0, sl, r0, lsl #6
    c46c:	3a050000 	bcc	14c474 <_Min_Stack_Size+0x14c074>
    c470:	00000157 	andeq	r0, r0, r7, asr r1
    c474:	4305010d 	movwmi	r0, #20749	; 0x510d
    c478:	00000192 	muleq	r0, r2, r1
    c47c:	00409d07 	subeq	r9, r0, r7, lsl #26
    c480:	af070800 	svcge	0x00070800
    c484:	0c000041 	stceq	0, cr0, [r0], {65}	; 0x41
    c488:	0040b107 	subeq	fp, r0, r7, lsl #2
    c48c:	03001000 	movweq	r1, #0
    c490:	000041d3 	ldrdeq	r4, [r0], -r3
    c494:	01774705 	cmneq	r7, r5, lsl #14
    c498:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    c49c:	01d65005 	bicseq	r5, r6, r5
    c4a0:	e90f0000 	stmdb	pc, {}	; <UNPREDICTABLE>
    c4a4:	0500003f 	streq	r0, [r0, #-63]	; 0x3f
    c4a8:	00008852 	andeq	r8, r0, r2, asr r8
    c4ac:	c40f0000 	strgt	r0, [pc], #-0	; c4b4 <_Min_Stack_Size+0xc0b4>
    c4b0:	05000041 	streq	r0, [r0, #-65]	; 0x41
    c4b4:	00016c55 	andeq	r6, r1, r5, asr ip
    c4b8:	000f0400 	andeq	r0, pc, r0, lsl #8
    c4bc:	05000040 	streq	r0, [r0, #-64]	; 0x40
    c4c0:	00019258 	andeq	r9, r1, r8, asr r2
    c4c4:	f30f0500 	vrshl.u8	d0, d0, d15
    c4c8:	0500003f 	streq	r0, [r0, #-63]	; 0x3f
    c4cc:	0000e85b 	andeq	lr, r0, fp, asr r8
    c4d0:	03000600 	movweq	r0, #1536	; 0x600
    c4d4:	00004036 	andeq	r4, r0, r6, lsr r0
    c4d8:	019d5d05 	orrseq	r5, sp, r5, lsl #26
    c4dc:	ed100000 	ldc	0, cr0, [r0, #-0]
    c4e0:	01000041 	tsteq	r0, r1, asr #32
    c4e4:	004df06e 	subeq	pc, sp, lr, rrx
    c4e8:	00001c08 	andeq	r1, r0, r8, lsl #24
    c4ec:	119c0100 	orrsne	r0, ip, r0, lsl #2
    c4f0:	000040cd 	andeq	r4, r0, sp, asr #1
    c4f4:	4e0c7e01 	cdpmi	14, 0, cr7, cr12, cr1, {0}
    c4f8:	00800800 	addeq	r0, r0, r0, lsl #16
    c4fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    c500:	00000226 	andeq	r0, r0, r6, lsr #4
    c504:	00404712 	subeq	r4, r0, r2, lsl r7
    c508:	267e0100 	ldrbtcs	r0, [lr], -r0, lsl #2
    c50c:	8d000002 	stchi	0, cr0, [r0, #-8]
    c510:	13000081 	movwne	r0, #129	; 0x81
    c514:	00706d74 	rsbseq	r6, r0, r4, ror sp
    c518:	00888001 	addeq	r8, r8, r1
    c51c:	81c70000 	bichi	r0, r7, r0
    c520:	14000000 	strne	r0, [r0], #-0
    c524:	0001d604 	andeq	sp, r1, r4, lsl #12
    c528:	40ea1100 	rscmi	r1, sl, r0, lsl #2
    c52c:	b6010000 	strlt	r0, [r1], -r0
    c530:	08004e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, lr}
    c534:	0000000e 	andeq	r0, r0, lr
    c538:	024f9c01 	subeq	r9, pc, #256	; 0x100
    c53c:	47150000 	ldrmi	r0, [r5, -r0]
    c540:	01000040 	tsteq	r0, r0, asr #32
    c544:	000226b6 			; <UNDEFINED> instruction: 0x000226b6
    c548:	00500100 	subseq	r0, r0, r0, lsl #2
    c54c:	00401d11 	subeq	r1, r0, r1, lsl sp
    c550:	9cc50100 	stflse	f0, [r5], {0}
    c554:	1008004e 	andne	r0, r8, lr, asr #32
    c558:	01000000 	mrseq	r0, (UNDEF: 0)
    c55c:	0002749c 	muleq	r2, ip, r4
    c560:	3fe91200 	svccc	0x00e91200
    c564:	c5010000 	strgt	r0, [r1, #-0]
    c568:	00000088 	andeq	r0, r0, r8, lsl #1
    c56c:	00008259 	andeq	r8, r0, r9, asr r2
    c570:	40d71600 	sbcsmi	r1, r7, r0, lsl #12
    c574:	e3010000 	movw	r0, #4096	; 0x1000
    c578:	000000ba 	strheq	r0, [r0], -sl
    c57c:	08004eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, lr}
    c580:	00000014 	andeq	r0, r0, r4, lsl r0
    c584:	02ac9c01 	adceq	r9, ip, #256	; 0x100
    c588:	e9120000 	ldmdb	r2, {}	; <UNPREDICTABLE>
    c58c:	0100003f 	tsteq	r0, pc, lsr r0
    c590:	000088e3 	andeq	r8, r0, r3, ror #17
    c594:	00827a00 	addeq	r7, r2, r0, lsl #20
    c598:	26101700 	ldrcs	r1, [r0], -r0, lsl #14
    c59c:	e5010000 	str	r0, [r1, #-0]
    c5a0:	000000ba 	strheq	r0, [r0], -sl
    c5a4:	0000829b 	muleq	r0, fp, r2
    c5a8:	406b1100 	rsbmi	r1, fp, r0, lsl #2
    c5ac:	fa010000 	blx	4c5b4 <_Min_Stack_Size+0x4c1b4>
    c5b0:	08004ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, lr}
    c5b4:	0000000c 	andeq	r0, r0, ip
    c5b8:	02cf9c01 	sbceq	r9, pc, #256	; 0x100
    c5bc:	e9150000 	ldmdb	r5, {}	; <UNPREDICTABLE>
    c5c0:	0100003f 	tsteq	r0, pc, lsr r0
    c5c4:	000088fa 	strdeq	r8, [r0], -sl
    c5c8:	00500100 	subseq	r0, r0, r0, lsl #2
    c5cc:	00418718 	subeq	r8, r1, r8, lsl r7
    c5d0:	01080100 	mrseq	r0, (UNDEF: 24)
    c5d4:	000000c6 	andeq	r0, r0, r6, asr #1
    c5d8:	08004ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, lr}
    c5dc:	00000014 	andeq	r0, r0, r4, lsl r0
    c5e0:	030a9c01 	movweq	r9, #44033	; 0xac01
    c5e4:	e9190000 	ldmdb	r9, {}	; <UNPREDICTABLE>
    c5e8:	0100003f 	tsteq	r0, pc, lsr r0
    c5ec:	00880108 	addeq	r0, r8, r8, lsl #2
    c5f0:	82d40000 	sbcshi	r0, r4, #0
    c5f4:	101a0000 	andsne	r0, sl, r0
    c5f8:	01000026 	tsteq	r0, r6, lsr #32
    c5fc:	00ba010a 	adcseq	r0, sl, sl, lsl #2
    c600:	82f50000 	rscshi	r0, r5, #0
    c604:	1b000000 	blne	c60c <_Min_Stack_Size+0xc20c>
    c608:	00004198 	muleq	r0, r8, r1
    c60c:	e0012001 	and	r2, r1, r1
    c610:	0c08004e 	stceq	0, cr0, [r8], {78}	; 0x4e
    c614:	01000000 	mrseq	r0, (UNDEF: 0)
    c618:	00032f9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
    c61c:	3fe91c00 	svccc	0x00e91c00
    c620:	20010000 	andcs	r0, r1, r0
    c624:	00008801 	andeq	r8, r0, r1, lsl #16
    c628:	00500100 	subseq	r0, r0, r0, lsl #2
    c62c:	00041b1d 	andeq	r1, r4, sp, lsl fp
    c630:	06a70600 	strteq	r0, [r7], r0, lsl #12
    c634:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    c638:	00113f00 	andseq	r3, r1, r0, lsl #30
    c63c:	42000400 	andmi	r0, r0, #0, 8
    c640:	04000027 	streq	r0, [r0], #-39	; 0x27
    c644:	0002f301 	andeq	pc, r2, r1, lsl #6
    c648:	48940100 	ldmmi	r4, {r8}
    c64c:	14600000 	strbtne	r0, [r0], #-0
    c650:	00000000 	andeq	r0, r0, r0
    c654:	58b90000 	ldmpl	r9!, {}	; <UNPREDICTABLE>
    c658:	46020000 	strmi	r0, [r2], -r0
    c65c:	01000048 	tsteq	r0, r8, asr #32
    c660:	029bab04 	addseq	sl, fp, #4, 22	; 0x1000
    c664:	e4030000 	str	r0, [r3], #-0
    c668:	72000044 	andvc	r0, r0, #68	; 0x44
    c66c:	00451303 	subeq	r1, r5, r3, lsl #6
    c670:	77037400 	strvc	r7, [r3, -r0, lsl #8]
    c674:	75000045 	strvc	r0, [r0, #-69]	; 0x45
    c678:	0043e703 	subeq	lr, r3, r3, lsl #14
    c67c:	d1037600 	tstle	r3, r0, lsl #12
    c680:	7b000045 	blvc	c79c <_Min_Stack_Size+0xc39c>
    c684:	0047dd03 	subeq	sp, r7, r3, lsl #26
    c688:	60037c00 	andvs	r7, r3, r0, lsl #24
    c68c:	7e000049 	cdpvc	0, 0, cr0, cr0, cr9, {2}
    c690:	00435003 	subeq	r5, r3, r3
    c694:	f8037f00 			; <UNDEFINED> instruction: 0xf8037f00
    c698:	00000044 	andeq	r0, r0, r4, asr #32
    c69c:	0047a503 	subeq	sl, r7, r3, lsl #10
    c6a0:	29030100 	stmdbcs	r3, {r8}
    c6a4:	02000045 	andeq	r0, r0, #69	; 0x45
    c6a8:	00420903 	subeq	r0, r2, r3, lsl #18
    c6ac:	98030300 	stmdals	r3, {r8, r9}
    c6b0:	04000042 	streq	r0, [r0], #-66	; 0x42
    c6b4:	00481d03 	subeq	r1, r8, r3, lsl #26
    c6b8:	ae030500 	cfsh32ge	mvfx0, mvfx3, #0
    c6bc:	06000047 	streq	r0, [r0], -r7, asr #32
    c6c0:	00448403 	subeq	r8, r4, r3, lsl #8
    c6c4:	17030700 	strne	r0, [r3, -r0, lsl #14]
    c6c8:	08000042 	stmdaeq	r0, {r1, r6}
    c6cc:	00495503 	subeq	r5, r9, r3, lsl #10
    c6d0:	3b030900 	blcc	cead8 <_Min_Stack_Size+0xce6d8>
    c6d4:	0a000046 	beq	c7f4 <_Min_Stack_Size+0xc3f4>
    c6d8:	0046eb03 	subeq	lr, r6, r3, lsl #22
    c6dc:	8a030b00 	bhi	cf2e4 <_Min_Stack_Size+0xceee4>
    c6e0:	0c000046 	stceq	0, cr0, [r0], {70}	; 0x46
    c6e4:	00438103 	subeq	r8, r3, r3, lsl #2
    c6e8:	26030d00 	strcs	r0, [r3], -r0, lsl #26
    c6ec:	0e000048 	cdpeq	0, 0, cr0, cr0, cr8, {2}
    c6f0:	0047b903 	subeq	fp, r7, r3, lsl #18
    c6f4:	9c030f00 	stcls	15, cr0, [r3], {-0}
    c6f8:	10000044 	andne	r0, r0, r4, asr #32
    c6fc:	00422203 	subeq	r2, r2, r3, lsl #4
    c700:	90031100 	andls	r1, r3, r0, lsl #2
    c704:	12000047 	andne	r0, r0, #71	; 0x47
    c708:	00448f03 	subeq	r8, r4, r3, lsl #30
    c70c:	01031300 	mrseq	r1, SP_svc
    c710:	14000044 	strne	r0, [r0], #-68	; 0x44
    c714:	00490203 	subeq	r0, r9, r3, lsl #4
    c718:	39031500 	stmdbcc	r3, {r8, sl, ip}
    c71c:	16000045 	strne	r0, [r0], -r5, asr #32
    c720:	00493103 	subeq	r3, r9, r3, lsl #2
    c724:	90031700 	andls	r1, r3, r0, lsl #14
    c728:	18000045 	stmdane	r0, {r0, r2, r6}
    c72c:	00483803 	subeq	r3, r8, r3, lsl #16
    c730:	2e031900 	cdpcs	9, 0, cr1, cr3, cr0, {0}
    c734:	1a000043 	bne	c848 <_Min_Stack_Size+0xc448>
    c738:	00446903 	subeq	r6, r4, r3, lsl #18
    c73c:	b8031b00 	stmdalt	r3, {r8, r9, fp, ip}
    c740:	1c000042 	stcne	0, cr0, [r0], {66}	; 0x42
    c744:	00475803 	subeq	r5, r7, r3, lsl #16
    c748:	23031d00 	movwcs	r1, #15616	; 0x3d00
    c74c:	1e000044 	cdpne	0, 0, cr0, cr0, cr4, {2}
    c750:	00445403 	subeq	r5, r4, r3, lsl #8
    c754:	af031f00 	svcge	0x00031f00
    c758:	20000043 	andcs	r0, r0, r3, asr #32
    c75c:	00465f03 	subeq	r5, r6, r3, lsl #30
    c760:	6a032100 	bvs	d4b68 <_Min_Stack_Size+0xd4768>
    c764:	22000045 	andcs	r0, r0, #69	; 0x45
    c768:	0045c703 	subeq	ip, r5, r3, lsl #14
    c76c:	ef032300 	svc	0x00032300
    c770:	24000042 	strcs	r0, [r0], #-66	; 0x42
    c774:	00476203 	subeq	r6, r7, r3, lsl #4
    c778:	2d032500 	cfstr32cs	mvfx2, [r3, #-0]
    c77c:	26000044 	strcs	r0, [r0], -r4, asr #32
    c780:	00435d03 	subeq	r5, r3, r3, lsl #26
    c784:	49032700 	stmdbmi	r3, {r8, r9, sl, sp}
    c788:	28000047 	stmdacs	r0, {r0, r1, r2, r6}
    c78c:	00471003 	subeq	r1, r7, r3
    c790:	19032900 	stmdbne	r3, {r8, fp, sp}
    c794:	2a000046 	bcs	c8b4 <_Min_Stack_Size+0xc4b4>
    c798:	0042f903 	subeq	pc, r2, r3, lsl #18
    c79c:	34032b00 	strcc	r2, [r3], #-2816	; 0xb00
    c7a0:	2c000042 	stccs	0, cr0, [r0], {66}	; 0x42
    c7a4:	0044ae03 	subeq	sl, r4, r3, lsl #28
    c7a8:	3e032d00 	cdpcc	13, 0, cr2, cr3, cr0, {0}
    c7ac:	2e000049 	cdpcs	0, 0, cr0, cr0, cr9, {2}
    c7b0:	00497f03 	subeq	r7, r9, r3, lsl #30
    c7b4:	29032f00 	stmdbcs	r3, {r8, r9, sl, fp, sp}
    c7b8:	30000047 	andcc	r0, r0, r7, asr #32
    c7bc:	00494b03 	subeq	r4, r9, r3, lsl #22
    c7c0:	dd033100 	stfles	f3, [r3, #-0]
    c7c4:	32000043 	andcc	r0, r0, #67	; 0x43
    c7c8:	00428e03 	subeq	r8, r2, r3, lsl #28
    c7cc:	0e033300 	cdpeq	3, 0, cr3, cr3, cr0, {0}
    c7d0:	34000046 	strcc	r0, [r0], #-70	; 0x46
    c7d4:	00458503 	subeq	r8, r5, r3, lsl #10
    c7d8:	46033500 	strmi	r3, [r3], -r0, lsl #10
    c7dc:	36000046 	strcc	r0, [r0], -r6, asr #32
    c7e0:	0045a303 	subeq	sl, r5, r3, lsl #6
    c7e4:	47033700 	strmi	r3, [r3, -r0, lsl #14]
    c7e8:	38000045 	stmdacc	r0, {r0, r2, r6}
    c7ec:	00427c03 	subeq	r7, r2, r3, lsl #24
    c7f0:	91033900 	tstls	r3, r0, lsl #18
    c7f4:	3a000049 	bcc	c920 <_Min_Stack_Size+0xc520>
    c7f8:	0046a603 	subeq	sl, r6, r3, lsl #12
    c7fc:	93033b00 	movwls	r3, #15104	; 0x3b00
    c800:	3c000043 	stccc	0, cr0, [r0], {67}	; 0x43
    c804:	00480803 	subeq	r0, r8, r3, lsl #16
    c808:	ad033d00 	stcge	13, cr3, [r3, #-0]
    c80c:	3e000045 	cdpcc	0, 0, cr0, cr0, cr5, {2}
    c810:	0046b803 	subeq	fp, r6, r3, lsl #16
    c814:	d5033f00 	strle	r3, [r3, #-3840]	; 0xf00
    c818:	c0000042 	andgt	r0, r0, r2, asr #32
    c81c:	47820300 	strmi	r0, [r2, r0, lsl #6]
    c820:	00c10000 	sbceq	r0, r1, r0
    c824:	0043bc03 	subeq	fp, r3, r3, lsl #24
    c828:	0300c200 	movweq	ip, #512	; 0x200
    c82c:	000044d8 	ldrdeq	r4, [r0], -r8
    c830:	1c0300c3 	stcne	0, cr0, [r3], {195}	; 0xc3
    c834:	c4000043 	strgt	r0, [r0], #-67	; 0x43
    c838:	47cb0300 	strbmi	r0, [fp, r0, lsl #6]
    c83c:	00c50000 	sbceq	r0, r5, r0
    c840:	0044c603 	subeq	ip, r4, r3, lsl #12
    c844:	0300c600 	movweq	ip, #1536	; 0x600
    c848:	000042e3 	andeq	r4, r0, r3, ror #5
    c84c:	fb0300c7 	blx	ccb72 <_Min_Stack_Size+0xcc772>
    c850:	c8000047 	stmdagt	r0, {r0, r1, r2, r6}
    c854:	47320300 	ldrmi	r0, [r2, -r0, lsl #6]!
    c858:	00c90000 	sbceq	r0, r9, r0
    c85c:	00488003 	subeq	r8, r8, r3
    c860:	0300ca00 	movweq	ip, #2560	; 0xa00
    c864:	0000496c 	andeq	r4, r0, ip, ror #18
    c868:	020300cb 	andeq	r0, r3, #203	; 0xcb
    c86c:	cc000045 	stcgt	0, cr0, [r0], {69}	; 0x45
    c870:	45bb0300 	ldrmi	r0, [fp, #768]!	; 0x300
    c874:	00cd0000 	sbceq	r0, sp, r0
    c878:	0042ae03 	subeq	sl, r2, r3, lsl #28
    c87c:	0300ce00 	movweq	ip, #3584	; 0xe00
    c880:	0000473f 	andeq	r4, r0, pc, lsr r7
    c884:	760300cf 	strvc	r0, [r3], -pc, asr #1
    c888:	d0000044 	andle	r0, r0, r4, asr #32
    c88c:	46050300 	strmi	r0, [r5], -r0, lsl #6
    c890:	00d10000 	sbcseq	r0, r1, r0
    c894:	00476e03 	subeq	r6, r7, r3, lsl #28
    c898:	0300d200 	movweq	sp, #512	; 0x200
    c89c:	00004439 	andeq	r4, r0, r9, lsr r4
    c8a0:	1f0300d3 	svcne	0x000300d3
    c8a4:	d4000047 	strle	r0, [r0], #-71	; 0x47
    c8a8:	440f0300 	strmi	r0, [pc], #-768	; c8b0 <_Min_Stack_Size+0xc4b0>
    c8ac:	00d50000 	sbcseq	r0, r5, r0
    c8b0:	0043a503 	subeq	sl, r3, r3, lsl #10
    c8b4:	0300d600 	movweq	sp, #1536	; 0x600
    c8b8:	00004419 	andeq	r4, r0, r9, lsl r4
    c8bc:	f70300d7 			; <UNDEFINED> instruction: 0xf70300d7
    c8c0:	d8000043 	stmdale	r0, {r0, r1, r6}
    c8c4:	48730300 	ldmdami	r3!, {r8, r9}^
    c8c8:	00d90000 	sbcseq	r0, r9, r0
    c8cc:	00465403 	subeq	r5, r6, r3, lsl #8
    c8d0:	0000da00 	andeq	sp, r0, r0, lsl #20
    c8d4:	02060104 	andeq	r0, r6, #4, 2
    c8d8:	05000002 	streq	r0, [r0, #-2]
    c8dc:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    c8e0:	02ad1d02 	adceq	r1, sp, #2, 26	; 0x80
    c8e4:	01040000 	mrseq	r0, (UNDEF: 4)
    c8e8:	00020008 	andeq	r0, r2, r8
    c8ec:	05020400 	streq	r0, [r2, #-1024]	; 0x400
    c8f0:	00000038 	andeq	r0, r0, r8, lsr r0
    c8f4:	00009405 	andeq	r9, r0, r5, lsl #8
    c8f8:	c62b0200 	strtgt	r0, [fp], -r0, lsl #4
    c8fc:	04000002 	streq	r0, [r0], #-2
    c900:	02aa0702 	adceq	r0, sl, #524288	; 0x80000
    c904:	4c050000 	stcmi	0, cr0, [r5], {-0}
    c908:	02000004 	andeq	r0, r0, #4
    c90c:	0002d83f 	andeq	sp, r2, pc, lsr r8
    c910:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    c914:	0000015d 	andeq	r0, r0, sp, asr r1
    c918:	00008905 	andeq	r8, r0, r5, lsl #18
    c91c:	ea410200 	b	104d124 <_Min_Stack_Size+0x104cd24>
    c920:	04000002 	streq	r0, [r0], #-2
    c924:	021d0704 	andseq	r0, sp, #4, 14	; 0x100000
    c928:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    c92c:	00015805 	andeq	r5, r1, r5, lsl #16
    c930:	07080400 	streq	r0, [r8, -r0, lsl #8]
    c934:	00000218 	andeq	r0, r0, r8, lsl r2
    c938:	69050406 	stmdbvs	r5, {r1, r2, sl}
    c93c:	0400746e 	streq	r7, [r0], #-1134	; 0x46e
    c940:	02220704 	eoreq	r0, r2, #4, 14	; 0x100000
    c944:	e1050000 	mrs	r0, (UNDEF: 5)
    c948:	03000005 	movweq	r0, #5
    c94c:	0002a22a 	andeq	sl, r2, sl, lsr #4
    c950:	00960500 	addseq	r0, r6, r0, lsl #10
    c954:	36030000 	strcc	r0, [r3], -r0
    c958:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
    c95c:	00044e05 	andeq	r4, r4, r5, lsl #28
    c960:	cd410300 	stclgt	3, cr0, [r1, #-0]
    c964:	05000002 	streq	r0, [r0, #-2]
    c968:	0000008b 	andeq	r0, r0, fp, lsl #1
    c96c:	02df4203 	sbcseq	r4, pc, #805306368	; 0x30000000
    c970:	04040000 	streq	r0, [r4], #-0
    c974:	00004207 	andeq	r4, r0, r7, lsl #4
    c978:	032e0700 	teqeq	lr, #0, 14
    c97c:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    c980:	55000003 	strpl	r0, [r0, #-3]
    c984:	09000003 	stmdbeq	r0, {r0, r1}
    c988:	00000339 	andeq	r0, r0, r9, lsr r3
    c98c:	2e080001 	cdpcs	0, 0, cr0, cr8, cr1, {0}
    c990:	65000003 	strvs	r0, [r0, #-3]
    c994:	09000003 	stmdbeq	r0, {r0, r1}
    c998:	00000339 	andeq	r0, r0, r9, lsr r3
    c99c:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    c9a0:	07000003 	streq	r0, [r0, -r3]
    c9a4:	00000323 	andeq	r0, r0, r3, lsr #6
    c9a8:	f904010a 			; <UNDEFINED> instruction: 0xf904010a
    c9ac:	00038501 	andeq	r8, r3, r1, lsl #10
    c9b0:	02a20300 	adceq	r0, r2, #0, 6
    c9b4:	03000000 	movweq	r0, #0
    c9b8:	000000b7 	strheq	r0, [r0], -r7
    c9bc:	910b0001 	tstls	fp, r1
    c9c0:	04000004 	streq	r0, [r0], #-4
    c9c4:	036f01f9 	cmneq	pc, #1073741886	; 0x4000003e
    c9c8:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    c9cc:	e802b104 	stmda	r2, {r2, r8, ip, sp, pc}
    c9d0:	0d000003 	stceq	0, cr0, [r0, #-12]
    c9d4:	04005243 	streq	r5, [r0], #-579	; 0x243
    c9d8:	034002b3 	movteq	r0, #691	; 0x2b3
    c9dc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    c9e0:	00003b55 	andeq	r3, r0, r5, asr fp
    c9e4:	4002b404 	andmi	fp, r2, r4, lsl #8
    c9e8:	04000003 	streq	r0, [r0], #-3
    c9ec:	5241500d 	subpl	r5, r1, #13
    c9f0:	02b50400 	adcseq	r0, r5, #0, 8
    c9f4:	00000340 	andeq	r0, r0, r0, asr #6
    c9f8:	3b500e08 	blcc	1410220 <_Min_Stack_Size+0x140fe20>
    c9fc:	b6040000 	strlt	r0, [r4], -r0
    ca00:	00034002 	andeq	r4, r3, r2
    ca04:	de0e0c00 	cdple	12, 0, cr0, cr14, cr0, {0}
    ca08:	0400003a 	streq	r0, [r0], #-58	; 0x3a
    ca0c:	034002b7 	movteq	r0, #695	; 0x2b7
    ca10:	0d100000 	ldceq	0, cr0, [r0, #-0]
    ca14:	00524346 	subseq	r4, r2, r6, asr #6
    ca18:	4002b804 	andmi	fp, r2, r4, lsl #16
    ca1c:	14000003 	strne	r0, [r0], #-3
    ca20:	385a0b00 	ldmdacc	sl, {r8, r9, fp}^
    ca24:	b9040000 	stmdblt	r4, {}	; <UNPREDICTABLE>
    ca28:	00039102 	andeq	r9, r3, r2, lsl #2
    ca2c:	04280c00 	strteq	r0, [r8], #-3072	; 0xc00
    ca30:	048003d4 	streq	r0, [r0], #980	; 0x3d4
    ca34:	be0e0000 	cdplt	0, 0, cr0, cr14, cr0, {0}
    ca38:	04000001 	streq	r0, [r0], #-1
    ca3c:	034003d6 	movteq	r0, #982	; 0x3d6
    ca40:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    ca44:	000000e0 	andeq	r0, r0, r0, ror #1
    ca48:	4003d704 	andmi	sp, r3, r4, lsl #14
    ca4c:	04000003 	streq	r0, [r0], #-3
    ca50:	0002eb0e 	andeq	lr, r2, lr, lsl #22
    ca54:	03d80400 	bicseq	r0, r8, #0, 8
    ca58:	00000340 	andeq	r0, r0, r0, asr #6
    ca5c:	017f0e08 	cmneq	pc, r8, lsl #28
    ca60:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
    ca64:	00034003 	andeq	r4, r3, r3
    ca68:	490d0c00 	stmdbmi	sp, {sl, fp}
    ca6c:	04005244 	streq	r5, [r0], #-580	; 0x244
    ca70:	034003da 	movteq	r0, #986	; 0x3da
    ca74:	0d100000 	ldceq	0, cr0, [r0, #-0]
    ca78:	0052444f 	subseq	r4, r2, pc, asr #8
    ca7c:	4003db04 	andmi	sp, r3, r4, lsl #22
    ca80:	14000003 	strne	r0, [r0], #-3
    ca84:	0004a10e 	andeq	sl, r4, lr, lsl #2
    ca88:	03dc0400 	bicseq	r0, ip, #0, 8
    ca8c:	00000365 	andeq	r0, r0, r5, ror #6
    ca90:	01a60e18 			; <UNDEFINED> instruction: 0x01a60e18
    ca94:	dd040000 	stcle	0, cr0, [r4, #-0]
    ca98:	00036503 	andeq	r6, r3, r3, lsl #10
    ca9c:	a70e1a00 	strge	r1, [lr, -r0, lsl #20]
    caa0:	04000004 	streq	r0, [r0], #-4
    caa4:	034003de 	movteq	r0, #990	; 0x3de
    caa8:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    caac:	00524641 	subseq	r4, r2, r1, asr #12
    cab0:	8003df04 	andhi	sp, r3, r4, lsl #30
    cab4:	20000004 	andcs	r0, r0, r4
    cab8:	03450700 	movteq	r0, #22272	; 0x5700
    cabc:	000b0000 	andeq	r0, fp, r0
    cac0:	04000000 	streq	r0, [r0], #-0
    cac4:	03f403e0 	mvnseq	r0, #224, 6	; 0x80000003
    cac8:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
    cacc:	9e03f304 	cdpls	3, 0, cr15, cr3, cr4, {0}
    cad0:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    cad4:	00315243 	eorseq	r5, r1, r3, asr #4
    cad8:	6503f504 	strvs	pc, [r3, #-1284]	; 0x504
    cadc:	00000003 	andeq	r0, r0, r3
    cae0:	00069f0e 	andeq	r9, r6, lr, lsl #30
    cae4:	03f60400 	mvnseq	r0, #0, 8
    cae8:	00000318 	andeq	r0, r0, r8, lsl r3
    caec:	52430d02 	subpl	r0, r3, #2, 26	; 0x80
    caf0:	f7040032 			; <UNDEFINED> instruction: 0xf7040032
    caf4:	00036503 	andeq	r6, r3, r3, lsl #10
    caf8:	a90e0400 	stmdbge	lr, {sl}
    cafc:	04000006 	streq	r0, [r0], #-6
    cb00:	031803f8 	tsteq	r8, #248, 6	; 0xe0000003
    cb04:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    cb08:	000034b8 			; <UNDEFINED> instruction: 0x000034b8
    cb0c:	6503f904 	strvs	pc, [r3, #-2308]	; 0x904
    cb10:	08000003 	stmdaeq	r0, {r0, r1}
    cb14:	0006b30e 	andeq	fp, r6, lr, lsl #6
    cb18:	03fa0400 	mvnseq	r0, #0, 8
    cb1c:	00000318 	andeq	r0, r0, r8, lsl r3
    cb20:	37ed0e0a 	strbcc	r0, [sp, sl, lsl #28]!
    cb24:	fb040000 	blx	10cb2e <_Min_Stack_Size+0x10c72e>
    cb28:	00036503 	andeq	r6, r3, r3, lsl #10
    cb2c:	950e0c00 	strls	r0, [lr, #-3072]	; 0xc00
    cb30:	04000005 	streq	r0, [r0], #-5
    cb34:	031803fc 	tsteq	r8, #252, 6	; 0xf0000003
    cb38:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    cb3c:	04005244 	streq	r5, [r0], #-580	; 0x244
    cb40:	036503fd 	cmneq	r5, #-201326589	; 0xf4000003
    cb44:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    cb48:	000006c9 	andeq	r0, r0, r9, asr #13
    cb4c:	1803fe04 	stmdane	r3, {r2, r9, sl, fp, ip, sp, lr, pc}
    cb50:	12000003 	andne	r0, r0, #3
    cb54:	3152530d 	cmpcc	r2, sp, lsl #6
    cb58:	03ff0400 	mvnseq	r0, #0, 8
    cb5c:	00000365 	andeq	r0, r0, r5, ror #6
    cb60:	06d30e14 			; <UNDEFINED> instruction: 0x06d30e14
    cb64:	00040000 	andeq	r0, r4, r0
    cb68:	00031804 	andeq	r1, r3, r4, lsl #16
    cb6c:	530d1600 	movwpl	r1, #54784	; 0xd600
    cb70:	04003252 	streq	r3, [r0], #-594	; 0x252
    cb74:	03650401 	cmneq	r5, #16777216	; 0x1000000
    cb78:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    cb7c:	000006dd 	ldrdeq	r0, [r0], -sp
    cb80:	18040204 	stmdane	r4, {r2, r9}
    cb84:	1a000003 	bne	cb98 <_Min_Stack_Size+0xc798>
    cb88:	5243430d 	subpl	r4, r3, #872415232	; 0x34000000
    cb8c:	04030400 	streq	r0, [r3], #-1024	; 0x400
    cb90:	00000365 	andeq	r0, r0, r5, ror #6
    cb94:	369f0e1c 			; <UNDEFINED> instruction: 0x369f0e1c
    cb98:	04040000 	streq	r0, [r4], #-0
    cb9c:	00031804 	andeq	r1, r3, r4, lsl #16
    cba0:	1a0e1e00 	bne	3943a8 <_Min_Stack_Size+0x393fa8>
    cba4:	04000034 	streq	r0, [r0], #-52	; 0x34
    cba8:	03650405 	cmneq	r5, #83886080	; 0x5000000
    cbac:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
    cbb0:	000036a9 	andeq	r3, r0, r9, lsr #13
    cbb4:	18040604 	stmdane	r4, {r2, r9, sl}
    cbb8:	22000003 	andcs	r0, r0, #3
    cbbc:	0034bd0e 	eorseq	fp, r4, lr, lsl #26
    cbc0:	04070400 	streq	r0, [r7], #-1024	; 0x400
    cbc4:	00000365 	andeq	r0, r0, r5, ror #6
    cbc8:	36b30e24 	ldrtcc	r0, [r3], r4, lsr #28
    cbcc:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    cbd0:	00031804 	andeq	r1, r3, r4, lsl #16
    cbd4:	0b002600 	bleq	163dc <_Min_Stack_Size+0x15fdc>
    cbd8:	000034ee 	andeq	r3, r0, lr, ror #9
    cbdc:	91040904 	tstls	r4, r4, lsl #18
    cbe0:	0f000004 	svceq	0x00000004
    cbe4:	6736053c 			; <UNDEFINED> instruction: 0x6736053c
    cbe8:	10000006 	andne	r0, r0, r6
    cbec:	00003b88 	andeq	r3, r0, r8, lsl #23
    cbf0:	032e3805 	teqeq	lr, #327680	; 0x50000
    cbf4:	10000000 	andne	r0, r0, r0
    cbf8:	000039a3 	andeq	r3, r0, r3, lsr #19
    cbfc:	032e3b05 	teqeq	lr, #5120	; 0x1400
    cc00:	10040000 	andne	r0, r4, r0
    cc04:	00003ba3 	andeq	r3, r0, r3, lsr #23
    cc08:	032e3d05 	teqeq	lr, #320	; 0x140
    cc0c:	10080000 	andne	r0, r8, r0
    cc10:	0000390f 	andeq	r3, r0, pc, lsl #18
    cc14:	032e4105 	teqeq	lr, #1073741825	; 0x40000001
    cc18:	100c0000 	andne	r0, ip, r0
    cc1c:	00003bb7 			; <UNDEFINED> instruction: 0x00003bb7
    cc20:	032e4505 	teqeq	lr, #20971520	; 0x1400000
    cc24:	10100000 	andsne	r0, r0, r0
    cc28:	000039fe 	strdeq	r3, [r0], -lr
    cc2c:	032e4905 	teqeq	lr, #81920	; 0x14000
    cc30:	10140000 	andsne	r0, r4, r0
    cc34:	000039ba 			; <UNDEFINED> instruction: 0x000039ba
    cc38:	032e4c05 	teqeq	lr, #1280	; 0x500
    cc3c:	10180000 	andsne	r0, r8, r0
    cc40:	00003a5b 	andeq	r3, r0, fp, asr sl
    cc44:	032e4f05 	teqeq	lr, #5, 30
    cc48:	101c0000 	andsne	r0, ip, r0
    cc4c:	00003bfa 	strdeq	r3, [r0], -sl
    cc50:	032e5205 	teqeq	lr, #1342177280	; 0x50000000
    cc54:	10200000 	eorne	r0, r0, r0
    cc58:	00003bc6 	andeq	r3, r0, r6, asr #23
    cc5c:	032e5505 	teqeq	lr, #20971520	; 0x1400000
    cc60:	10240000 	eorne	r0, r4, r0
    cc64:	00003873 	andeq	r3, r0, r3, ror r8
    cc68:	032e5a05 	teqeq	lr, #20480	; 0x5000
    cc6c:	10280000 	eorne	r0, r8, r0
    cc70:	00003b6a 	andeq	r3, r0, sl, ror #22
    cc74:	032e5d05 	teqeq	lr, #320	; 0x140
    cc78:	102c0000 	eorne	r0, ip, r0
    cc7c:	00003a9d 	muleq	r0, sp, sl
    cc80:	032e6205 	teqeq	lr, #1342177280	; 0x50000000
    cc84:	10300000 	eorsne	r0, r0, r0
    cc88:	00003880 	andeq	r3, r0, r0, lsl #17
    cc8c:	032e6505 	teqeq	lr, #20971520	; 0x1400000
    cc90:	10340000 	eorsne	r0, r4, r0
    cc94:	0000389f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    cc98:	032e6a05 	teqeq	lr, #20480	; 0x5000
    cc9c:	00380000 	eorseq	r0, r8, r0
    cca0:	003a7205 	eorseq	r7, sl, r5, lsl #4
    cca4:	aa6e0500 	bge	1b8e0ac <_Min_Stack_Size+0x1b8dcac>
    cca8:	11000005 	tstne	r0, r5
    ccac:	87370601 	ldrhi	r0, [r7, -r1, lsl #12]!
    ccb0:	03000006 	movweq	r0, #6
    ccb4:	00004057 	andeq	r4, r0, r7, asr r0
    ccb8:	400d0300 	andmi	r0, sp, r0, lsl #6
    ccbc:	00040000 	andeq	r0, r4, r0
    ccc0:	00407a05 	subeq	r7, r0, r5, lsl #20
    ccc4:	723a0600 	eorsvc	r0, sl, #0, 12
    ccc8:	11000006 	tstne	r0, r6
    cccc:	ad430601 	stclge	6, cr0, [r3, #-4]
    ccd0:	03000006 	movweq	r0, #6
    ccd4:	0000409d 	muleq	r0, sp, r0
    ccd8:	41af0308 			; <UNDEFINED> instruction: 0x41af0308
    ccdc:	030c0000 	movweq	r0, #49152	; 0xc000
    cce0:	000040b1 	strheq	r4, [r0], -r1
    cce4:	d3050010 	movwle	r0, #20496	; 0x5010
    cce8:	06000041 	streq	r0, [r0], -r1, asr #32
    ccec:	00069247 	andeq	r9, r6, r7, asr #4
    ccf0:	06080f00 	streq	r0, [r8], -r0, lsl #30
    ccf4:	0006f150 	andeq	pc, r6, r0, asr r1	; <UNPREDICTABLE>
    ccf8:	3fe91000 	svccc	0x00e91000
    ccfc:	52060000 	andpl	r0, r6, #0
    cd00:	0000032e 	andeq	r0, r0, lr, lsr #6
    cd04:	41c41000 	bicmi	r1, r4, r0
    cd08:	55060000 	strpl	r0, [r6, #-0]
    cd0c:	00000687 	andeq	r0, r0, r7, lsl #13
    cd10:	40001004 	andmi	r1, r0, r4
    cd14:	58060000 	stmdapl	r6, {}	; <UNPREDICTABLE>
    cd18:	000006ad 	andeq	r0, r0, sp, lsr #13
    cd1c:	3ff31005 	svccc	0x00f31005
    cd20:	5b060000 	blpl	18cd28 <_Min_Stack_Size+0x18c928>
    cd24:	00000385 	andeq	r0, r0, r5, lsl #7
    cd28:	36050006 	strcc	r0, [r5], -r6
    cd2c:	06000040 	streq	r0, [r0], -r0, asr #32
    cd30:	0006b85d 	andeq	fp, r6, sp, asr r8
    cd34:	07011100 	streq	r1, [r1, -r0, lsl #2]
    cd38:	00071d42 	andeq	r1, r7, r2, asr #26
    cd3c:	01990300 	orrseq	r0, r9, r0, lsl #6
    cd40:	03000000 	movweq	r0, #0
    cd44:	00000171 	andeq	r0, r0, r1, ror r1
    cd48:	00aa0301 	adceq	r0, sl, r1, lsl #6
    cd4c:	03020000 	movweq	r0, #8192	; 0x2000
    cd50:	000000d3 	ldrdeq	r0, [r0], -r3
    cd54:	73050003 	movwvc	r0, #20483	; 0x5003
    cd58:	07000004 	streq	r0, [r0, -r4]
    cd5c:	0006fc47 	andeq	pc, r6, r7, asr #24
    cd60:	07011100 	streq	r1, [r1, -r0, lsl #2]
    cd64:	00073d4f 	andeq	r3, r7, pc, asr #26
    cd68:	01f20300 	mvnseq	r0, r0, lsl #6
    cd6c:	03000000 	movweq	r0, #0
    cd70:	00000066 	andeq	r0, r0, r6, rrx
    cd74:	41050001 	tstmi	r5, r1
    cd78:	07000001 	streq	r0, [r0, -r1]
    cd7c:	00072852 	andeq	r2, r7, r2, asr r8
    cd80:	07011100 	streq	r1, [r1, -r0, lsl #2]
    cd84:	0007695a 	andeq	r6, r7, sl, asr r9
    cd88:	02ca0300 	sbceq	r0, sl, #0, 6
    cd8c:	03000000 	movweq	r0, #0
    cd90:	000002d9 	ldrdeq	r0, [r0], -r9
    cd94:	02920301 	addseq	r0, r2, #67108864	; 0x4000000
    cd98:	03020000 	movweq	r0, #8192	; 0x2000
    cd9c:	000001e2 	andeq	r0, r0, r2, ror #3
    cda0:	fa050003 	blx	14cdb4 <_Min_Stack_Size+0x14c9b4>
    cda4:	07000003 	streq	r0, [r0, -r3]
    cda8:	0007485f 	andeq	r4, r7, pc, asr r8
    cdac:	07011100 	streq	r1, [r1, -r0, lsl #2]
    cdb0:	00078f6e 	andeq	r8, r7, lr, ror #30
    cdb4:	04280300 	strteq	r0, [r8], #-768	; 0x300
    cdb8:	03000000 	movweq	r0, #0
    cdbc:	00000484 	andeq	r0, r0, r4, lsl #9
    cdc0:	040c0301 	streq	r0, [ip], #-769	; 0x301
    cdc4:	00020000 	andeq	r0, r2, r0
    cdc8:	00046205 	andeq	r6, r4, r5, lsl #4
    cdcc:	74720700 	ldrbtvc	r0, [r2], #-1792	; 0x700
    cdd0:	0f000007 	svceq	0x00000007
    cdd4:	df840708 	svcle	0x00840708
    cdd8:	10000007 	andne	r0, r0, r7
    cddc:	0000000d 	andeq	r0, r0, sp
    cde0:	032e8607 	teqeq	lr, #7340032	; 0x700000
    cde4:	10000000 	andne	r0, r0, r0
    cde8:	000004ac 	andeq	r0, r0, ip, lsr #9
    cdec:	071d8907 	ldreq	r8, [sp, -r7, lsl #18]
    cdf0:	10040000 	andne	r0, r4, r0
    cdf4:	000000be 	strheq	r0, [r0], -lr
    cdf8:	07698c07 	strbeq	r8, [r9, -r7, lsl #24]!
    cdfc:	10050000 	andne	r0, r5, r0
    ce00:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    ce04:	073d8f07 	ldreq	r8, [sp, -r7, lsl #30]!
    ce08:	10060000 	andne	r0, r6, r0
    ce0c:	0000020e 	andeq	r0, r0, lr, lsl #4
    ce10:	078f9207 	streq	r9, [pc, r7, lsl #4]
    ce14:	00070000 	andeq	r0, r7, r0
    ce18:	00024d05 	andeq	r4, r2, r5, lsl #26
    ce1c:	9a940700 	bls	fe50ea24 <_estack+0xde4dea24>
    ce20:	0f000007 	svceq	0x00000007
    ce24:	23360804 	teqcs	r6, #4, 16	; 0x40000
    ce28:	10000008 	andne	r0, r0, r8
    ce2c:	000023de 	ldrdeq	r2, [r0], -lr
    ce30:	030d3808 	movweq	r3, #55304	; 0xd808
    ce34:	10000000 	andne	r0, r0, r0
    ce38:	0000248c 	andeq	r2, r0, ip, lsl #9
    ce3c:	030d3d08 	movweq	r3, #56584	; 0xdd08
    ce40:	10010000 	andne	r0, r1, r0
    ce44:	000023ee 	andeq	r2, r0, lr, ror #7
    ce48:	030d4208 	movweq	r4, #53768	; 0xd208
    ce4c:	10020000 	andne	r0, r2, r0
    ce50:	000022e8 	andeq	r2, r0, r8, ror #5
    ce54:	03854708 	orreq	r4, r5, #8, 14	; 0x200000
    ce58:	00030000 	andeq	r0, r3, r0
    ce5c:	0022d705 	eoreq	sp, r2, r5, lsl #14
    ce60:	ea4a0800 	b	128ee68 <_Min_Stack_Size+0x128ea68>
    ce64:	11000007 	tstne	r0, r7
    ce68:	433c0901 	teqmi	ip, #16384	; 0x4000
    ce6c:	03000008 	movweq	r0, #8
    ce70:	0000469c 	muleq	r0, ip, r6
    ce74:	46a10300 	strtmi	r0, [r1], r0, lsl #6
    ce78:	00010000 	andeq	r0, r1, r0
    ce7c:	00481105 	subeq	r1, r8, r5, lsl #2
    ce80:	2e3f0900 	cdpcs	9, 3, cr0, cr15, cr0, {0}
    ce84:	11000008 	tstne	r0, r8
    ce88:	5d420901 	stclpl	9, cr0, [r2, #-4]
    ce8c:	03000008 	movweq	r0, #8
    ce90:	000046df 	ldrdeq	r4, [r0], -pc	; <UNPREDICTABLE>
    ce94:	72050000 	andvc	r0, r5, #0
    ce98:	09000043 	stmdbeq	r0, {r0, r1, r6}
    ce9c:	00084e44 	andeq	r4, r8, r4, asr #28
    cea0:	09011100 	stmdbeq	r1, {r8, ip}
    cea4:	00087d47 	andeq	r7, r8, r7, asr #26
    cea8:	462a0300 	strtmi	r0, [sl], -r0, lsl #6
    ceac:	03000000 	movweq	r0, #0
    ceb0:	000045dd 	ldrdeq	r4, [r0], -sp
    ceb4:	fd050001 	stc2	0, cr0, [r5, #-4]
    ceb8:	09000046 	stmdbeq	r0, {r1, r2, r6}
    cebc:	0008684a 	andeq	r6, r8, sl, asr #16
    cec0:	45591200 	ldrbmi	r1, [r9, #-512]	; 0x200
    cec4:	7a010000 	bvc	4cecc <_Min_Stack_Size+0x4cacc>
    cec8:	08004eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, lr}
    cecc:	0000004c 	andeq	r0, r0, ip, asr #32
    ced0:	08ed9c01 	stmiaeq	sp!, {r0, sl, fp, ip, pc}^
    ced4:	4c130000 	ldcmi	0, cr0, [r3], {-0}
    ced8:	01006465 	tsteq	r0, r5, ror #8
    cedc:	0008437a 	andeq	r4, r8, sl, ror r3
    cee0:	00832e00 	addeq	r2, r3, r0, lsl #28
    cee4:	04391400 	ldrteq	r1, [r9], #-1024	; 0x400
    cee8:	7c010000 	stcvc	0, cr0, [r1], {-0}
    ceec:	000007df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    cef0:	15709102 	ldrbne	r9, [r0, #-258]!	; 0x102
    cef4:	08004efe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
    cef8:	00000fa4 	andeq	r0, r0, r4, lsr #31
    cefc:	000008dc 	ldrdeq	r0, [r0], -ip
    cf00:	01510116 	cmpeq	r1, r6, lsl r1
    cf04:	50011631 	andpl	r1, r1, r1, lsr r6
    cf08:	3200740b 	andcc	r7, r0, #184549376	; 0xb000000
    cf0c:	53140324 	tstpl	r4, #36, 6	; 0x90000000
    cf10:	06220800 	strteq	r0, [r2], -r0, lsl #16
    cf14:	4f281700 	svcmi	0x00281700
    cf18:	0fbb0800 	svceq	0x00bb0800
    cf1c:	01160000 	tsteq	r6, r0
    cf20:	007d0251 	rsbseq	r0, sp, r1, asr r2
    cf24:	0d120000 	ldceq	0, cr0, [r2, #-0]
    cf28:	01000043 	tsteq	r0, r3, asr #32
    cf2c:	004f3892 	umaaleq	r3, pc, r2, r8	; <UNPREDICTABLE>
    cf30:	00001808 	andeq	r1, r0, r8, lsl #16
    cf34:	109c0100 	addsne	r0, ip, r0, lsl #2
    cf38:	18000009 	stmdane	r0, {r0, r3}
    cf3c:	0064654c 	rsbeq	r6, r4, ip, asr #10
    cf40:	08439201 	stmdaeq	r3, {r0, r9, ip, pc}^
    cf44:	50010000 	andpl	r0, r1, r0
    cf48:	44441200 	strbmi	r1, [r4], #-512	; 0x200
    cf4c:	9f010000 	svcls	0x00010000
    cf50:	08004f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, lr}
    cf54:	00000018 	andeq	r0, r0, r8, lsl r0
    cf58:	09339c01 	ldmdbeq	r3!, {r0, sl, fp, ip, pc}
    cf5c:	4c180000 	ldcmi	0, cr0, [r8], {-0}
    cf60:	01006465 	tsteq	r0, r5, ror #8
    cf64:	0008439f 	muleq	r8, pc, r3	; <UNPREDICTABLE>
    cf68:	00500100 	subseq	r0, r0, r0, lsl #2
    cf6c:	00466c12 	subeq	r6, r6, r2, lsl ip
    cf70:	68ac0100 	stmiavs	ip!, {r8}
    cf74:	1c08004f 	stcne	0, cr0, [r8], {79}	; 0x4f
    cf78:	01000000 	mrseq	r0, (UNDEF: 0)
    cf7c:	0009569c 	muleq	r9, ip, r6
    cf80:	654c1800 	strbvs	r1, [ip, #-2048]	; 0x800
    cf84:	ac010064 	stcge	0, cr0, [r1], {100}	; 0x64
    cf88:	00000843 	andeq	r0, r0, r3, asr #16
    cf8c:	12005001 	andne	r5, r0, #1
    cf90:	000041f9 	strdeq	r4, [r0], -r9
    cf94:	4f84bc01 	svcmi	0x0084bc01
    cf98:	00840800 	addeq	r0, r4, r0, lsl #16
    cf9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    cfa0:	00000a38 	andeq	r0, r0, r8, lsr sl
    cfa4:	0046d819 	subeq	sp, r6, r9, lsl r8
    cfa8:	5dbc0100 	ldfpls	f0, [ip]
    cfac:	4f000008 	svcmi	0x00000008
    cfb0:	19000083 	stmdbne	r0, {r0, r1, r7}
    cfb4:	00004910 	andeq	r4, r0, r0, lsl r9
    cfb8:	087dbc01 	ldmdaeq	sp!, {r0, sl, fp, ip, sp, pc}^
    cfbc:	83700000 	cmnhi	r0, #0
    cfc0:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    cfc4:	01000004 	tsteq	r0, r4
    cfc8:	0007dfbe 			; <UNDEFINED> instruction: 0x0007dfbe
    cfcc:	60910200 	addsvs	r0, r1, r0, lsl #4
    cfd0:	0046c514 	subeq	ip, r6, r4, lsl r5
    cfd4:	f1bf0100 			; <UNDEFINED> instruction: 0xf1bf0100
    cfd8:	02000006 	andeq	r0, r0, #6
    cfdc:	c2146891 	andsgt	r6, r4, #9502720	; 0x910000
    cfe0:	01000042 	tsteq	r0, r2, asr #32
    cfe4:	000823c0 	andeq	r2, r8, r0, asr #7
    cfe8:	5c910200 	lfmpl	f0, 4, [r1], {0}
    cfec:	004f9415 	subeq	r9, pc, r5, lsl r4	; <UNPREDICTABLE>
    cff0:	000fa408 	andeq	sl, pc, r8, lsl #8
    cff4:	0009cb00 	andeq	ip, r9, r0, lsl #22
    cff8:	51011600 	tstpl	r1, r0, lsl #12
    cffc:	01163101 	tsteq	r6, r1, lsl #2
    d000:	00310150 	eorseq	r0, r1, r0, asr r1
    d004:	004f9e15 	subeq	r9, pc, r5, lsl lr	; <UNPREDICTABLE>
    d008:	000fd808 	andeq	sp, pc, r8, lsl #16
    d00c:	0009e500 	andeq	lr, r9, r0, lsl #10
    d010:	51011600 	tstpl	r1, r0, lsl #12
    d014:	01163101 	tsteq	r6, r1, lsl #2
    d018:	000a0350 	andeq	r0, sl, r0, asr r3
    d01c:	be150040 	cdplt	0, 1, cr0, cr5, cr0, {2}
    d020:	bb08004f 	bllt	20d164 <_Min_Stack_Size+0x20cd64>
    d024:	f900000f 			; <UNDEFINED> instruction: 0xf900000f
    d028:	16000009 	strne	r0, [r0], -r9
    d02c:	91025101 	tstls	r2, r1, lsl #2
    d030:	ce150060 	cdpgt	0, 1, cr0, cr5, cr0, {3}
    d034:	ef08004f 	svc	0x0008004f
    d038:	1300000f 	movwne	r0, #15
    d03c:	1600000a 	strne	r0, [r0], -sl
    d040:	75025101 	strvc	r5, [r2, #-257]	; 0x101
    d044:	50011600 	andpl	r1, r1, r0, lsl #12
    d048:	00007502 	andeq	r7, r0, r2, lsl #10
    d04c:	004fe415 	subeq	lr, pc, r5, lsl r4	; <UNPREDICTABLE>
    d050:	00100508 	andseq	r0, r0, r8, lsl #10
    d054:	000a2700 	andeq	r2, sl, r0, lsl #14
    d058:	50011600 	andpl	r1, r1, r0, lsl #12
    d05c:	00689102 	rsbeq	r9, r8, r2, lsl #2
    d060:	004ffe17 	subeq	pc, pc, r7, lsl lr	; <UNPREDICTABLE>
    d064:	00101c08 	andseq	r1, r0, r8, lsl #24
    d068:	50011600 	andpl	r1, r1, r0, lsl #12
    d06c:	005c9102 	subseq	r9, ip, r2, lsl #2
    d070:	485f1a00 	ldmdami	pc, {r9, fp, ip}^	; <UNPREDICTABLE>
    d074:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    d078:	0000032e 	andeq	r0, r0, lr, lsr #6
    d07c:	08005008 	stmdaeq	r0, {r3, ip, lr}
    d080:	00000014 	andeq	r0, r0, r4, lsl r0
    d084:	0a709c01 	beq	1c34090 <_Min_Stack_Size+0x1c33c90>
    d088:	d8190000 	ldmdale	r9, {}	; <UNPREDICTABLE>
    d08c:	01000046 	tsteq	r0, r6, asr #32
    d090:	00085de8 	andeq	r5, r8, r8, ror #27
    d094:	00839100 	addeq	r9, r3, r0, lsl #2
    d098:	50161700 	andspl	r1, r6, r0, lsl #14
    d09c:	10330800 	eorsne	r0, r3, r0, lsl #16
    d0a0:	01160000 	tsteq	r6, r0
    d0a4:	00310151 	eorseq	r0, r1, r1, asr r1
    d0a8:	484b1200 	stmdami	fp, {r9, ip}^
    d0ac:	f2010000 	vhadd.s8	d0, d1, d0
    d0b0:	0800501c 	stmdaeq	r0, {r2, r3, r4, ip, lr}
    d0b4:	000000a0 	andeq	r0, r0, r0, lsr #1
    d0b8:	0b969c01 	bleq	fe5b40c4 <_estack+0xde5840c4>
    d0bc:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    d0c0:	01000004 	tsteq	r0, r4
    d0c4:	0007dff4 	strdeq	sp, [r7], -r4
    d0c8:	60910200 	addsvs	r0, r1, r0, lsl #4
    d0cc:	00503015 	subseq	r3, r0, r5, lsl r0
    d0d0:	00104e08 	andseq	r4, r0, r8, lsl #28
    d0d4:	000aac00 	andeq	sl, sl, r0, lsl #24
    d0d8:	51011600 	tstpl	r1, r0, lsl #12
    d0dc:	01163001 	tsteq	r6, r1
    d0e0:	00740250 	rsbseq	r0, r4, r0, asr r2
    d0e4:	50361500 	eorspl	r1, r6, r0, lsl #10
    d0e8:	106b0800 	rsbne	r0, fp, r0, lsl #16
    d0ec:	0ac00000 	beq	ff00d0f4 <_estack+0xdefdd0f4>
    d0f0:	01160000 	tsteq	r6, r0
    d0f4:	00740250 	rsbseq	r0, r4, r0, asr r2
    d0f8:	50421500 	subpl	r1, r2, r0, lsl #10
    d0fc:	107d0800 	rsbsne	r0, sp, r0, lsl #16
    d100:	0adb0000 	beq	ff6cd108 <_estack+0xdf69d108>
    d104:	01160000 	tsteq	r6, r0
    d108:	00740251 	rsbseq	r0, r4, r1, asr r2
    d10c:	03500116 	cmpeq	r0, #-2147483643	; 0x80000005
    d110:	00244340 	eoreq	r4, r4, r0, asr #6
    d114:	00505815 	subseq	r5, r0, r5, lsl r8
    d118:	000fbb08 	andeq	fp, pc, r8, lsl #22
    d11c:	000af800 	andeq	pc, sl, r0, lsl #16
    d120:	51011600 	tstpl	r1, r0, lsl #12
    d124:	16007d02 	strne	r7, [r0], -r2, lsl #26
    d128:	0c055001 	stceq	0, cr5, [r5], {1}
    d12c:	40020000 	andmi	r0, r2, r0
    d130:	50661500 	rsbpl	r1, r6, r0, lsl #10
    d134:	0fbb0800 	svceq	0x00bb0800
    d138:	0b150000 	bleq	54d140 <_Min_Stack_Size+0x54cd40>
    d13c:	01160000 	tsteq	r6, r0
    d140:	007d0251 	rsbseq	r0, sp, r1, asr r2
    d144:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
    d148:	0208000c 	andeq	r0, r8, #12
    d14c:	76150040 	ldrvc	r0, [r5], -r0, asr #32
    d150:	1c080050 	stcne	0, cr0, [r8], {80}	; 0x50
    d154:	29000010 	stmdbcs	r0, {r4}
    d158:	1600000b 	strne	r0, [r0], -fp
    d15c:	75025001 	strvc	r5, [r2, #-1]
    d160:	84150000 	ldrhi	r0, [r5], #-0
    d164:	1c080050 	stcne	0, cr0, [r8], {80}	; 0x50
    d168:	3d000010 	stccc	0, cr0, [r0, #-64]	; 0xffffffc0
    d16c:	1600000b 	strne	r0, [r0], -fp
    d170:	75025001 	strvc	r5, [r2, #-1]
    d174:	8c150000 	ldchi	0, cr0, [r5], {-0}
    d178:	94080050 	strls	r0, [r8], #-80	; 0x50
    d17c:	57000010 	smladpl	r0, r0, r0, r0
    d180:	1600000b 	strne	r0, [r0], -fp
    d184:	74025101 	strvc	r5, [r2], #-257	; 0x101
    d188:	50011600 	andpl	r1, r1, r0, lsl #12
    d18c:	00007702 	andeq	r7, r0, r2, lsl #14
    d190:	00509415 	subseq	r9, r0, r5, lsl r4
    d194:	00109408 	andseq	r9, r0, r8, lsl #8
    d198:	000b7100 	andeq	r7, fp, r0, lsl #2
    d19c:	51011600 	tstpl	r1, r0, lsl #12
    d1a0:	16007402 	strne	r7, [r0], -r2, lsl #8
    d1a4:	76025001 	strvc	r5, [r2], -r1
    d1a8:	9a150000 	bls	54d1b0 <_Min_Stack_Size+0x54cdb0>
    d1ac:	b1080050 	qaddlt	r0, r0, r8
    d1b0:	85000010 	strhi	r0, [r0, #-16]
    d1b4:	1600000b 	strne	r0, [r0], -fp
    d1b8:	77025001 	strvc	r5, [r2, -r1]
    d1bc:	a0170000 	andsge	r0, r7, r0
    d1c0:	b1080050 	qaddlt	r0, r0, r8
    d1c4:	16000010 			; <UNDEFINED> instruction: 0x16000010
    d1c8:	76025001 	strvc	r5, [r2], -r1
    d1cc:	1b000000 	blne	d1d4 <_Min_Stack_Size+0xcdd4>
    d1d0:	00004247 	andeq	r4, r0, r7, asr #4
    d1d4:	bc012301 	stclt	3, cr2, [r1], {1}
    d1d8:	74080050 	strvc	r0, [r8], #-80	; 0x50
    d1dc:	01000001 	tsteq	r0, r1
    d1e0:	000df49c 	muleq	sp, ip, r4
    d1e4:	04391c00 	ldrteq	r1, [r9], #-3072	; 0xc00
    d1e8:	25010000 	strcs	r0, [r1, #-0]
    d1ec:	0007df01 	andeq	sp, r7, r1, lsl #30
    d1f0:	50910200 	addspl	r0, r1, r0, lsl #4
    d1f4:	0050cc15 	subseq	ip, r0, r5, lsl ip
    d1f8:	00107d08 	andseq	r7, r0, r8, lsl #26
    d1fc:	000bd500 	andeq	sp, fp, r0, lsl #10
    d200:	51011600 	tstpl	r1, r0, lsl #12
    d204:	01163101 	tsteq	r6, r1, lsl #2
    d208:	43400350 	movtmi	r0, #848	; 0x350
    d20c:	d4150024 	ldrle	r0, [r5], #-36	; 0x24
    d210:	a4080050 	strge	r0, [r8], #-80	; 0x50
    d214:	ed00000f 	stc	0, cr0, [r0, #-60]	; 0xffffffc4
    d218:	1600000b 	strne	r0, [r0], -fp
    d21c:	31015101 	tstcc	r1, r1, lsl #2
    d220:	01500116 	cmpeq	r0, r6, lsl r1
    d224:	de150035 	mrcle	0, 0, r0, cr5, cr5, {1}
    d228:	d8080050 	stmdale	r8, {r4, r6}
    d22c:	0700000f 	streq	r0, [r0, -pc]
    d230:	1600000c 	strne	r0, [r0], -ip
    d234:	31015101 	tstcc	r1, r1, lsl #2
    d238:	03500116 	cmpeq	r0, #-2147483643	; 0x80000005
    d23c:	0040000a 	subeq	r0, r0, sl
    d240:	0050fc15 	subseq	pc, r0, r5, lsl ip	; <UNPREDICTABLE>
    d244:	0010c308 	andseq	ip, r0, r8, lsl #6
    d248:	000c2100 	andeq	r2, ip, r0, lsl #2
    d24c:	51011600 	tstpl	r1, r0, lsl #12
    d250:	01163101 	tsteq	r6, r1, lsl #2
    d254:	43400350 	movtmi	r0, #848	; 0x350
    d258:	08150024 	ldmdaeq	r5, {r2, r5}
    d25c:	c3080051 	movwgt	r0, #32849	; 0x8051
    d260:	3c000010 	stccc	0, cr0, [r0], {16}
    d264:	1600000c 	strne	r0, [r0], -ip
    d268:	75025101 	strvc	r5, [r2, #-257]	; 0x101
    d26c:	50011600 	andpl	r1, r1, r0, lsl #12
    d270:	24434003 	strbcs	r4, [r3], #-3
    d274:	512a1500 	teqpl	sl, r0, lsl #10
    d278:	0fbb0800 	svceq	0x00bb0800
    d27c:	0c560000 	mraeq	r0, r6, acc0
    d280:	01160000 	tsteq	r6, r0
    d284:	007d0251 	rsbseq	r0, sp, r1, asr r2
    d288:	02500116 	subseq	r0, r0, #-2147483643	; 0x80000005
    d28c:	1500007b 	strne	r0, [r0, #-123]	; 0x7b
    d290:	08005138 	stmdaeq	r0, {r3, r4, r5, r8, ip, lr}
    d294:	00000fbb 			; <UNDEFINED> instruction: 0x00000fbb
    d298:	00000c70 	andeq	r0, r0, r0, ror ip
    d29c:	02510116 	subseq	r0, r1, #-2147483643	; 0x80000005
    d2a0:	0116007d 	tsteq	r6, sp, ror r0
    d2a4:	007a0250 	rsbseq	r0, sl, r0, asr r2
    d2a8:	51421500 	cmppl	r2, r0, lsl #10
    d2ac:	10da0800 	sbcsne	r0, sl, r0, lsl #16
    d2b0:	0c8e0000 	stceq	0, cr0, [lr], {0}
    d2b4:	01160000 	tsteq	r6, r0
    d2b8:	16340152 			; <UNDEFINED> instruction: 0x16340152
    d2bc:	38015101 	stmdacc	r1, {r0, r8, ip, lr}
    d2c0:	02500116 	subseq	r0, r0, #-2147483643	; 0x80000005
    d2c4:	1500007b 	strne	r0, [r0, #-123]	; 0x7b
    d2c8:	0800514c 	stmdaeq	r0, {r2, r3, r6, r8, ip, lr}
    d2cc:	000010da 	ldrdeq	r1, [r0], -sl
    d2d0:	00000cac 	andeq	r0, r0, ip, lsr #25
    d2d4:	01520116 	cmpeq	r2, r6, lsl r1
    d2d8:	51011634 	tstpl	r1, r4, lsr r6
    d2dc:	01163901 	tsteq	r6, r1, lsl #18
    d2e0:	007a0250 	rsbseq	r0, sl, r0, asr r2
    d2e4:	515c1500 	cmppl	ip, r0, lsl #10
    d2e8:	101c0800 	andsne	r0, ip, r0, lsl #16
    d2ec:	0cc00000 	stcleq	0, cr0, [r0], {0}
    d2f0:	01160000 	tsteq	r6, r0
    d2f4:	00760250 	rsbseq	r0, r6, r0, asr r2
    d2f8:	516a1500 	cmnpl	sl, r0, lsl #10
    d2fc:	101c0800 	andsne	r0, ip, r0, lsl #16
    d300:	0cd40000 	ldcleq	0, cr0, [r4], {0}
    d304:	01160000 	tsteq	r6, r0
    d308:	00760250 	rsbseq	r0, r6, r0, asr r2
    d30c:	51741500 	cmnpl	r4, r0, lsl #10
    d310:	0fa40800 	svceq	0x00a40800
    d314:	0cef0000 	stcleq	0, cr0, [pc]	; d31c <_Min_Stack_Size+0xcf1c>
    d318:	01160000 	tsteq	r6, r0
    d31c:	00770251 	rsbseq	r0, r7, r1, asr r2
    d320:	03500116 	cmpeq	r0, #-2147483643	; 0x80000005
    d324:	00244140 	eoreq	r4, r4, r0, asr #2
    d328:	00517c15 	subseq	r7, r1, r5, lsl ip
    d32c:	0010f608 	andseq	pc, r0, r8, lsl #12
    d330:	000d0c00 	andeq	r0, sp, r0, lsl #24
    d334:	51011600 	tstpl	r1, r0, lsl #12
    d338:	003d0c05 	eorseq	r0, sp, r5, lsl #24
    d33c:	01162000 	tsteq	r6, r0
    d340:	00790250 	rsbseq	r0, r9, r0, asr r2
    d344:	51841500 	orrpl	r1, r4, r0, lsl #10
    d348:	10940800 	addsne	r0, r4, r0, lsl #16
    d34c:	0d260000 	stceq	0, cr0, [r6, #-0]
    d350:	01160000 	tsteq	r6, r0
    d354:	00750251 	rsbseq	r0, r5, r1, asr r2
    d358:	02500116 	subseq	r0, r0, #-2147483643	; 0x80000005
    d35c:	15000079 	strne	r0, [r0, #-121]	; 0x79
    d360:	0800518a 	stmdaeq	r0, {r1, r3, r7, r8, ip, lr}
    d364:	000010b1 	strheq	r1, [r0], -r1	; <UNPREDICTABLE>
    d368:	00000d3a 	andeq	r0, r0, sl, lsr sp
    d36c:	02500116 	subseq	r0, r0, #-2147483643	; 0x80000005
    d370:	15000079 	strne	r0, [r0, #-121]	; 0x79
    d374:	080051d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, ip, lr}
    d378:	0000110d 	andeq	r1, r0, sp, lsl #2
    d37c:	00000d54 	andeq	r0, r0, r4, asr sp
    d380:	02510116 	subseq	r0, r1, #-2147483643	; 0x80000005
    d384:	01160074 	tsteq	r6, r4, ror r0
    d388:	00790250 	rsbseq	r0, r9, r0, asr r2
    d38c:	51e01500 	mvnpl	r1, r0, lsl #10
    d390:	10f60800 	rscsne	r0, r6, r0, lsl #16
    d394:	0d710000 	ldcleq	0, cr0, [r1, #-0]
    d398:	01160000 	tsteq	r6, r0
    d39c:	000c0551 	andeq	r0, ip, r1, asr r5
    d3a0:	16103d00 	ldrne	r3, [r0], -r0, lsl #26
    d3a4:	78025001 	stmdavc	r2, {r0, ip, lr}
    d3a8:	e8150000 	ldmda	r5, {}	; <UNPREDICTABLE>
    d3ac:	94080051 	strls	r0, [r8], #-81	; 0x51
    d3b0:	8b000010 	blhi	d3f8 <_Min_Stack_Size+0xcff8>
    d3b4:	1600000d 	strne	r0, [r0], -sp
    d3b8:	75025101 	strvc	r5, [r2, #-257]	; 0x101
    d3bc:	50011600 	andpl	r1, r1, r0, lsl #12
    d3c0:	00007802 	andeq	r7, r0, r2, lsl #16
    d3c4:	0051ee15 	subseq	lr, r1, r5, lsl lr
    d3c8:	0010b108 	andseq	fp, r0, r8, lsl #2
    d3cc:	000d9f00 	andeq	r9, sp, r0, lsl #30
    d3d0:	50011600 	andpl	r1, r1, r0, lsl #12
    d3d4:	00007802 	andeq	r7, r0, r2, lsl #16
    d3d8:	0051f615 	subseq	pc, r1, r5, lsl r6	; <UNPREDICTABLE>
    d3dc:	00110d08 	andseq	r0, r1, r8, lsl #26
    d3e0:	000db900 	andeq	fp, sp, r0, lsl #18
    d3e4:	51011600 	tstpl	r1, r0, lsl #12
    d3e8:	16007402 	strne	r7, [r0], -r2, lsl #8
    d3ec:	78025001 	stmdavc	r2, {r0, ip, lr}
    d3f0:	00150000 	andseq	r0, r5, r0
    d3f4:	2a080052 	bcs	20d544 <_Min_Stack_Size+0x20d144>
    d3f8:	d8000011 	stmdale	r0, {r0, r4}
    d3fc:	1600000d 	strne	r0, [r0], -sp
    d400:	77025201 	strvc	r5, [r2, -r1, lsl #4]
    d404:	51011600 	tstpl	r1, r0, lsl #12
    d408:	01164001 	tsteq	r6, r1
    d40c:	00790250 	rsbseq	r0, r9, r0, asr r2
    d410:	520a1700 	andpl	r1, sl, #0, 14
    d414:	112a0800 	teqne	sl, r0, lsl #16
    d418:	01160000 	tsteq	r6, r0
    d41c:	00770252 	rsbseq	r0, r7, r2, asr r2
    d420:	01510116 	cmpeq	r1, r6, lsl r1
    d424:	50011640 	andpl	r1, r1, r0, asr #12
    d428:	00007802 	andeq	r7, r0, r2, lsl #16
    d42c:	45ee1b00 	strbmi	r1, [lr, #2816]!	; 0xb00
    d430:	83010000 	movwhi	r0, #4096	; 0x1000
    d434:	00523001 	subseq	r3, r2, r1
    d438:	00003008 	andeq	r3, r0, r8
    d43c:	4e9c0100 	fmlmie	f0, f4, f0
    d440:	1d00000e 	stcne	0, cr0, [r0, #-56]	; 0xffffffc8
    d444:	00004461 	andeq	r4, r0, r1, ror #8
    d448:	2e018301 	cdpcs	3, 0, cr8, cr1, cr1, {0}
    d44c:	b2000003 	andlt	r0, r0, #3
    d450:	1d000083 	stcne	0, cr0, [r0, #-524]	; 0xfffffdf4
    d454:	00003bbb 			; <UNDEFINED> instruction: 0x00003bbb
    d458:	2e018301 	cdpcs	3, 0, cr8, cr1, cr1, {0}
    d45c:	f4000003 	vst4.8	{d0-d3}, [r0], r3
    d460:	1d000083 	stcne	0, cr0, [r0, #-524]	; 0xfffffdf4
    d464:	0000360d 	andeq	r3, r0, sp, lsl #12
    d468:	2e018301 	cdpcs	3, 0, cr8, cr1, cr1, {0}
    d46c:	3a000003 	bcc	d480 <_Min_Stack_Size+0xd080>
    d470:	1e000084 	cdpne	0, 0, cr0, cr0, cr4, {4}
    d474:	0800524c 	stmdaeq	r0, {r2, r3, r6, r9, ip, lr}
    d478:	0000110d 	andeq	r1, r0, sp, lsl #2
    d47c:	05510116 	ldrbeq	r0, [r1, #-278]	; 0x116
    d480:	012e4003 	teqeq	lr, r3
    d484:	1f000020 	svcne	0x00000020
    d488:	0000041b 	andeq	r0, r0, fp, lsl r4
    d48c:	6a06a70a 	bvs	1b70bc <_Min_Stack_Size+0x1b6cbc>
    d490:	08000003 	stmdaeq	r0, {r0, r1}
    d494:	00000e6a 	andeq	r0, r0, sl, ror #28
    d498:	00000e6a 	andeq	r0, r0, sl, ror #28
    d49c:	00033909 	andeq	r3, r3, r9, lsl #18
    d4a0:	20000100 	andcs	r0, r0, r0, lsl #2
    d4a4:	00048504 	andeq	r8, r4, r4, lsl #10
    d4a8:	43462100 	movtmi	r2, #24832	; 0x6100
    d4ac:	4d010000 	stcmi	0, cr0, [r1, #-0]
    d4b0:	00000e5a 	andeq	r0, r0, sl, asr lr
    d4b4:	002c0305 	eoreq	r0, ip, r5, lsl #6
    d4b8:	18082000 	stmdane	r8, {sp}
    d4bc:	91000003 	tstls	r0, r3
    d4c0:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    d4c4:	00000339 	andeq	r0, r0, r9, lsr r3
    d4c8:	79210001 	stmdbvc	r1!, {r0}
    d4cc:	01000047 	tsteq	r0, r7, asr #32
    d4d0:	000ea24e 	andeq	sl, lr, lr, asr #4
    d4d4:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    d4d8:	22080053 	andcs	r0, r8, #83	; 0x53
    d4dc:	00000e81 	andeq	r0, r0, r1, lsl #29
    d4e0:	00436921 	subeq	r6, r3, r1, lsr #18
    d4e4:	b84f0100 	stmdalt	pc, {r8}^	; <UNPREDICTABLE>
    d4e8:	0500000e 	streq	r0, [r0, #-14]
    d4ec:	00531403 	subseq	r1, r3, r3, lsl #8
    d4f0:	03452208 	movteq	r2, #21000	; 0x5208
    d4f4:	6a080000 	bvs	20d4fc <_Min_Stack_Size+0x20d0fc>
    d4f8:	cd00000e 	stcgt	0, cr0, [r0, #-56]	; 0xffffffc8
    d4fc:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    d500:	00000339 	andeq	r0, r0, r9, lsr r3
    d504:	99210000 	stmdbls	r1!, {}	; <UNPREDICTABLE>
    d508:	01000047 	tsteq	r0, r7, asr #32
    d50c:	000ebd51 	andeq	fp, lr, r1, asr sp
    d510:	34030500 	strcc	r0, [r3], #-1280	; 0x500
    d514:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    d518:	00000318 	andeq	r0, r0, r8, lsl r3
    d51c:	00000eee 	andeq	r0, r0, lr, ror #29
    d520:	00033909 	andeq	r3, r3, r9, lsl #18
    d524:	21000000 	mrscs	r0, (UNDEF: 0)
    d528:	0000467f 	andeq	r4, r0, pc, ror r6
    d52c:	0eff5301 	cdpeq	3, 15, cr5, cr15, cr1, {0}
    d530:	03050000 	movweq	r0, #20480	; 0x5000
    d534:	08005310 	stmdaeq	r0, {r4, r8, r9, ip, lr}
    d538:	000ede22 	andeq	sp, lr, r2, lsr #28
    d53c:	42a32100 	adcmi	r2, r3, #0, 2
    d540:	55010000 	strpl	r0, [r1, #-0]
    d544:	00000f15 	andeq	r0, r0, r5, lsl pc
    d548:	53200305 	teqpl	r0, #335544320	; 0x14000000
    d54c:	55220800 	strpl	r0, [r2, #-2048]!	; 0x800
    d550:	21000003 	tstcs	r0, r3
    d554:	00004259 	andeq	r4, r0, r9, asr r2
    d558:	0f2b5701 	svceq	0x002b5701
    d55c:	03050000 	movweq	r0, #20480	; 0x5000
    d560:	0800532c 	stmdaeq	r0, {r2, r3, r5, r8, r9, ip, lr}
    d564:	000ede22 	andeq	sp, lr, r2, lsr #28
    d568:	030d0800 	movweq	r0, #55296	; 0xd800
    d56c:	0f400000 	svceq	0x00400000
    d570:	39090000 	stmdbcc	r9, {}	; <UNPREDICTABLE>
    d574:	00000003 	andeq	r0, r0, r3
    d578:	43ca2100 	bicmi	r2, sl, #0, 2
    d57c:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    d580:	00000f51 	andeq	r0, r0, r1, asr pc
    d584:	53240305 	teqpl	r4, #335544320	; 0x14000000
    d588:	30220800 	eorcc	r0, r2, r0, lsl #16
    d58c:	2100000f 	tstcs	r0, pc
    d590:	0000426a 	andeq	r4, r0, sl, ror #4
    d594:	0f675b01 	svceq	0x00675b01
    d598:	03050000 	movweq	r0, #20480	; 0x5000
    d59c:	08005328 	stmdaeq	r0, {r3, r5, r8, r9, ip, lr}
    d5a0:	000f3022 	andeq	r3, pc, r2, lsr #32
    d5a4:	47ef2100 	strbmi	r2, [pc, r0, lsl #2]!
    d5a8:	5c010000 	stcpl	0, cr0, [r1], {-0}
    d5ac:	00000f7d 	andeq	r0, r0, sp, ror pc
    d5b0:	530c0305 	movwpl	r0, #49925	; 0xc305
    d5b4:	30220800 	eorcc	r0, r2, r0, lsl #16
    d5b8:	2100000f 	tstcs	r0, pc
    d5bc:	0000491c 	andeq	r4, r0, ip, lsl r9
    d5c0:	06675e01 	strbteq	r5, [r7], -r1, lsl #28
    d5c4:	03050000 	movweq	r0, #20480	; 0x5000
    d5c8:	20012e40 	andcs	r2, r1, r0, asr #28
    d5cc:	0042c221 	subeq	ip, r2, r1, lsr #4
    d5d0:	235f0100 	cmpcs	pc, #0, 2
    d5d4:	05000008 	streq	r0, [r0, #-8]
    d5d8:	012e3c03 	teqeq	lr, r3, lsl #24
    d5dc:	027b2320 	rsbseq	r2, fp, #32, 6	; 0x80000000
    d5e0:	400b0000 	andmi	r0, fp, r0
    d5e4:	000fbb02 	andeq	fp, pc, r2, lsl #22
    d5e8:	032e2400 	teqeq	lr, #0, 8
    d5ec:	85240000 	strhi	r0, [r4, #-0]!
    d5f0:	00000003 	andeq	r0, r0, r3
    d5f4:	0000c923 	andeq	ip, r0, r3, lsr #18
    d5f8:	01c90700 	biceq	r0, r9, r0, lsl #14
    d5fc:	00000fd2 	ldrdeq	r0, [r0], -r2
    d600:	000e6a24 	andeq	r6, lr, r4, lsr #20
    d604:	0fd22400 	svceq	0x00d22400
    d608:	20000000 	andcs	r0, r0, r0
    d60c:	0007df04 	andeq	sp, r7, r4, lsl #30
    d610:	2c4f2300 	mcrrcs	3, 0, r2, pc, cr0
    d614:	440b0000 	strmi	r0, [fp], #-0
    d618:	000fef02 	andeq	lr, pc, r2, lsl #30
    d61c:	032e2400 	teqeq	lr, #0, 8
    d620:	85240000 	strhi	r0, [r4, #-0]!
    d624:	00000003 	andeq	r0, r0, r3
    d628:	00325025 	eorseq	r5, r2, r5, lsr #32
    d62c:	05bf0c00 	ldreq	r0, [pc, #3072]!	; e234 <_Min_Stack_Size+0xde34>
    d630:	24000010 	strcs	r0, [r0], #-16
    d634:	0000030d 	andeq	r0, r0, sp, lsl #6
    d638:	00030d24 	andeq	r0, r3, r4, lsr #26
    d63c:	cd250000 	stcgt	0, cr0, [r5, #-0]
    d640:	06000040 	streq	r0, [r0], -r0, asr #32
    d644:	0010169f 	mulseq	r0, pc, r6	; <UNPREDICTABLE>
    d648:	10162400 	andsne	r2, r6, r0, lsl #8
    d64c:	20000000 	andcs	r0, r0, r0
    d650:	0006f104 	andeq	pc, r6, r4, lsl #2
    d654:	23302500 	teqcs	r0, #0, 10
    d658:	9f080000 	svcls	0x00080000
    d65c:	0000102d 	andeq	r1, r0, sp, lsr #32
    d660:	00102d24 	andseq	r2, r0, r4, lsr #26
    d664:	04200000 	strteq	r0, [r0], #-0
    d668:	00000823 	andeq	r0, r0, r3, lsr #16
    d66c:	0025fa26 	eoreq	pc, r5, r6, lsr #20
    d670:	01ce0700 	biceq	r0, lr, r0, lsl #14
    d674:	0000030d 	andeq	r0, r0, sp, lsl #6
    d678:	0000104e 	andeq	r1, r0, lr, asr #32
    d67c:	000e6a24 	andeq	r6, lr, r4, lsr #20
    d680:	03182400 	tsteq	r8, #0, 8
    d684:	23000000 	movwcs	r0, #0
    d688:	00003697 	muleq	r0, r7, r6
    d68c:	6502290d 	strvs	r2, [r2, #-2317]	; 0x90d
    d690:	24000010 	strcs	r0, [r0], #-16
    d694:	00001065 	andeq	r1, r0, r5, rrx
    d698:	00038524 	andeq	r8, r3, r4, lsr #10
    d69c:	04200000 	strteq	r0, [r0], #-0
    d6a0:	0000059e 	muleq	r0, lr, r5
    d6a4:	00364223 	eorseq	r4, r6, r3, lsr #4
    d6a8:	02240d00 	eoreq	r0, r4, #0, 26
    d6ac:	0000107d 	andeq	r1, r0, sp, ror r0
    d6b0:	00106524 	andseq	r6, r0, r4, lsr #10
    d6b4:	0c230000 	stceq	0, cr0, [r3], #-0
    d6b8:	0b00002d 	bleq	d774 <_Min_Stack_Size+0xd374>
    d6bc:	10940243 	addsne	r0, r4, r3, asr #4
    d6c0:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
    d6c4:	24000003 	strcs	r0, [r0], #-3
    d6c8:	00000385 	andeq	r0, r0, r5, lsl #7
    d6cc:	38522300 	ldmdacc	r2, {r8, r9, sp}^
    d6d0:	37050000 	strcc	r0, [r5, -r0]
    d6d4:	0010ab02 	andseq	sl, r0, r2, lsl #22
    d6d8:	10ab2400 	adcne	r2, fp, r0, lsl #8
    d6dc:	85240000 	strhi	r0, [r4, #-0]!
    d6e0:	00000003 	andeq	r0, r0, r3
    d6e4:	03e80420 	mvneq	r0, #32, 8	; 0x20000000
    d6e8:	2d230000 	stccs	0, cr0, [r3, #-0]
    d6ec:	0500003b 	streq	r0, [r0, #-59]	; 0x3b
    d6f0:	10c30232 	sbcne	r0, r3, r2, lsr r2
    d6f4:	ab240000 	blge	90d6fc <_Min_Stack_Size+0x90d2fc>
    d6f8:	00000010 	andeq	r0, r0, r0, lsl r0
    d6fc:	00273423 	eoreq	r3, r7, r3, lsr #8
    d700:	02490b00 	subeq	r0, r9, #0, 22
    d704:	000010da 	ldrdeq	r1, [r0], -sl
    d708:	00032e24 	andeq	r2, r3, r4, lsr #28
    d70c:	03852400 	orreq	r2, r5, #0, 8
    d710:	23000000 	movwcs	r0, #0
    d714:	000026a5 	andeq	r2, r0, r5, lsr #13
    d718:	f601d907 			; <UNDEFINED> instruction: 0xf601d907
    d71c:	24000010 	strcs	r0, [r0], #-16
    d720:	00000e6a 	andeq	r0, r0, sl, ror #28
    d724:	00031824 	andeq	r1, r3, r4, lsr #16
    d728:	030d2400 	movweq	r2, #54272	; 0xd400
    d72c:	23000000 	movwcs	r0, #0
    d730:	00003a36 	andeq	r3, r0, r6, lsr sl
    d734:	0d024d05 	stceq	13, cr4, [r2, #-20]	; 0xffffffec
    d738:	24000011 	strcs	r0, [r0], #-17
    d73c:	000010ab 	andeq	r1, r0, fp, lsr #1
    d740:	00032e24 	andeq	r2, r3, r4, lsr #28
    d744:	28230000 	stmdacs	r3!, {}	; <UNPREDICTABLE>
    d748:	0500003a 	streq	r0, [r0, #-58]	; 0x3a
    d74c:	11240235 	teqne	r4, r5, lsr r2
    d750:	ab240000 	blge	90d758 <_Min_Stack_Size+0x90d358>
    d754:	24000010 	strcs	r0, [r0], #-16
    d758:	00001124 	andeq	r1, r0, r4, lsr #2
    d75c:	67042000 	strvs	r2, [r4, -r0]
    d760:	27000006 	strcs	r0, [r0, -r6]
    d764:	00003be6 	andeq	r3, r0, r6, ror #23
    d768:	24024e05 	strcs	r4, [r2], #-3589	; 0xe05
    d76c:	000010ab 	andeq	r1, r0, fp, lsr #1
    d770:	00032e24 	andeq	r2, r3, r4, lsr #28
    d774:	03852400 	orreq	r2, r5, #0, 8
    d778:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
       c:	00051308 	andeq	r1, r5, r8, lsl #6
      10:	11010000 	mrsne	r0, (UNDEF: 1)
      14:	130e2501 	movwne	r2, #58625	; 0xe501
      18:	550e030b 	strpl	r0, [lr, #-779]	; 0x30b
      1c:	10011117 	andne	r1, r1, r7, lsl r1
      20:	02000017 	andeq	r0, r0, #23
      24:	0b0b0024 	bleq	2c00bc <_Min_Stack_Size+0x2bfcbc>
      28:	0e030b3e 	vmoveq.16	d3[0], r0
      2c:	16030000 	strne	r0, [r3], -r0
      30:	3a0e0300 	bcc	380c38 <_Min_Stack_Size+0x380838>
      34:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      38:	04000013 	streq	r0, [r0], #-19
      3c:	0b0b0024 	bleq	2c00d4 <_Min_Stack_Size+0x2bfcd4>
      40:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      44:	35050000 	strcc	r0, [r5, #-0]
      48:	00134900 	andseq	r4, r3, r0, lsl #18
      4c:	01010600 	tsteq	r1, r0, lsl #12
      50:	13011349 	movwne	r1, #4937	; 0x1349
      54:	21070000 	mrscs	r0, (UNDEF: 7)
      58:	2f134900 	svccs	0x00134900
      5c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
      60:	13490026 	movtne	r0, #36902	; 0x9026
      64:	04090000 	streq	r0, [r9], #-0
      68:	3a0b0b01 	bcc	2c2c74 <_Min_Stack_Size+0x2c2874>
      6c:	01053b0b 	tsteq	r5, fp, lsl #22
      70:	0a000013 	beq	c4 <_Min_Heap_Size+0xc4>
      74:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
      78:	00000d1c 	andeq	r0, r0, ip, lsl sp
      7c:	0300160b 	movweq	r1, #1547	; 0x60b
      80:	3b0b3a0e 	blcc	2ce8c0 <_Min_Stack_Size+0x2ce4c0>
      84:	00134905 	andseq	r4, r3, r5, lsl #18
      88:	01130c00 	tsteq	r3, r0, lsl #24
      8c:	0b3a0b0b 	bleq	e82cc0 <_Min_Stack_Size+0xe828c0>
      90:	1301053b 	movwne	r0, #5435	; 0x153b
      94:	0d0d0000 	stceq	0, cr0, [sp, #-0]
      98:	3a0e0300 	bcc	380ca0 <_Min_Stack_Size+0x3808a0>
      9c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      a0:	000b3813 	andeq	r3, fp, r3, lsl r8
      a4:	000d0e00 	andeq	r0, sp, r0, lsl #28
      a8:	0b3a0803 	bleq	e820bc <_Min_Stack_Size+0xe81cbc>
      ac:	1349053b 	movtne	r0, #38203	; 0x953b
      b0:	00000b38 	andeq	r0, r0, r8, lsr fp
      b4:	0b01040f 	bleq	410f8 <_Min_Stack_Size+0x40cf8>
      b8:	3b0b3a0b 	blcc	2ce8ec <_Min_Stack_Size+0x2ce4ec>
      bc:	0013010b 	andseq	r0, r3, fp, lsl #2
      c0:	01131000 	tsteq	r3, r0
      c4:	0b3a0b0b 	bleq	e82cf8 <_Min_Stack_Size+0xe828f8>
      c8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      cc:	0d110000 	ldceq	0, cr0, [r1, #-0]
      d0:	3a0e0300 	bcc	380cd8 <_Min_Stack_Size+0x3808d8>
      d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      d8:	000b3813 	andeq	r3, fp, r3, lsl r8
      dc:	000f1200 	andeq	r1, pc, r0, lsl #4
      e0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
      e4:	15130000 	ldrne	r0, [r3, #-0]
      e8:	01192701 	tsteq	r9, r1, lsl #14
      ec:	14000013 	strne	r0, [r0], #-19
      f0:	13490005 	movtne	r0, #36869	; 0x9005
      f4:	0f150000 	svceq	0x00150000
      f8:	000b0b00 	andeq	r0, fp, r0, lsl #22
      fc:	01131600 	tsteq	r3, r0, lsl #12
     100:	0b0b0e03 	bleq	2c3914 <_Min_Stack_Size+0x2c3514>
     104:	0b3b0b3a 	bleq	ec2df4 <_Min_Stack_Size+0xec29f4>
     108:	00001301 	andeq	r1, r0, r1, lsl #6
     10c:	3f002e17 	svccc	0x00002e17
     110:	3a0e0319 	bcc	380d7c <_Min_Stack_Size+0x38097c>
     114:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     118:	000b2019 	andeq	r2, fp, r9, lsl r0
     11c:	012e1800 	teqeq	lr, r0, lsl #16
     120:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     124:	0b3b0b3a 	bleq	ec2e14 <_Min_Stack_Size+0xec2a14>
     128:	01111927 	tsteq	r1, r7, lsr #18
     12c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     130:	01194297 			; <UNDEFINED> instruction: 0x01194297
     134:	19000013 	stmdbne	r0, {r0, r1, r4}
     138:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     13c:	0b3b0b3a 	bleq	ec2e2c <_Min_Stack_Size+0xec2a2c>
     140:	17021349 	strne	r1, [r2, -r9, asr #6]
     144:	891a0000 	ldmdbhi	sl, {}	; <UNPREDICTABLE>
     148:	11010182 	smlabbne	r1, r2, r1, r0
     14c:	01133101 	tsteq	r3, r1, lsl #2
     150:	1b000013 	blne	1a4 <_Min_Heap_Size+0x1a4>
     154:	0001828a 	andeq	r8, r1, sl, lsl #5
     158:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     15c:	1c000018 	stcne	0, cr0, [r0], {24}
     160:	01018289 	smlabbeq	r1, r9, r2, r8
     164:	13310111 	teqne	r1, #1073741828	; 0x40000004
     168:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
     16c:	11133101 	tstne	r3, r1, lsl #2
     170:	40061201 	andmi	r1, r6, r1, lsl #4
     174:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     178:	00001301 	andeq	r1, r0, r1, lsl #6
     17c:	0182891e 	orreq	r8, r2, lr, lsl r9
     180:	95011101 	strls	r1, [r1, #-257]	; 0x101
     184:	13311942 	teqne	r1, #1081344	; 0x108000
     188:	341f0000 	ldrcc	r0, [pc], #-0	; 190 <_Min_Heap_Size+0x190>
     18c:	3a0e0300 	bcc	380d94 <_Min_Stack_Size+0x380994>
     190:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     194:	00180213 	andseq	r0, r8, r3, lsl r2
     198:	012e2000 	teqeq	lr, r0
     19c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     1a0:	0b3b0b3a 	bleq	ec2e90 <_Min_Stack_Size+0xec2a90>
     1a4:	13491927 	movtne	r1, #39207	; 0x9927
     1a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     1ac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     1b0:	00130119 	andseq	r0, r3, r9, lsl r1
     1b4:	011d2100 	tsteq	sp, r0, lsl #2
     1b8:	01521331 	cmpeq	r2, r1, lsr r3
     1bc:	0b581755 	bleq	1605f18 <_Min_Stack_Size+0x1605b18>
     1c0:	13010b59 	movwne	r0, #7001	; 0x1b59
     1c4:	89220000 	stmdbhi	r2!, {}	; <UNPREDICTABLE>
     1c8:	11000182 	smlabbne	r0, r2, r1, r0
     1cc:	00133101 	andseq	r3, r3, r1, lsl #2
     1d0:	00342300 	eorseq	r2, r4, r0, lsl #6
     1d4:	0b3a0e03 	bleq	e839e8 <_Min_Stack_Size+0xe835e8>
     1d8:	1349053b 	movtne	r0, #38203	; 0x953b
     1dc:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     1e0:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
     1e4:	03193f01 	tsteq	r9, #1, 30
     1e8:	3b0b3a0e 	blcc	2cea28 <_Min_Stack_Size+0x2ce628>
     1ec:	3c192705 	ldccc	7, cr2, [r9], {5}
     1f0:	00130119 	andseq	r0, r3, r9, lsl r1
     1f4:	012e2500 	teqeq	lr, r0, lsl #10
     1f8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     1fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     200:	13491927 	movtne	r1, #39207	; 0x9927
     204:	1301193c 	movwne	r1, #6460	; 0x193c
     208:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
     20c:	03193f00 	tsteq	r9, #0, 30
     210:	3b0b3a0e 	blcc	2cea50 <_Min_Stack_Size+0x2ce650>
     214:	3c192705 	ldccc	7, cr2, [r9], {5}
     218:	00000019 	andeq	r0, r0, r9, lsl r0
     21c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     220:	030b130e 	movweq	r1, #45838	; 0xb30e
     224:	1117550e 	tstne	r7, lr, lsl #10
     228:	00171001 	andseq	r1, r7, r1
     22c:	00240200 	eoreq	r0, r4, r0, lsl #4
     230:	0b3e0b0b 	bleq	f82e64 <_Min_Stack_Size+0xf82a64>
     234:	00000e03 	andeq	r0, r0, r3, lsl #28
     238:	03001603 	movweq	r1, #1539	; 0x603
     23c:	3b0b3a0e 	blcc	2cea7c <_Min_Stack_Size+0x2ce67c>
     240:	0013490b 	andseq	r4, r3, fp, lsl #18
     244:	00240400 	eoreq	r0, r4, r0, lsl #8
     248:	0b3e0b0b 	bleq	f82e7c <_Min_Stack_Size+0xf82a7c>
     24c:	00000803 	andeq	r0, r0, r3, lsl #16
     250:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     254:	06000013 			; <UNDEFINED> instruction: 0x06000013
     258:	0b0b0113 	bleq	2c06ac <_Min_Stack_Size+0x2c02ac>
     25c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     260:	00001301 	andeq	r1, r0, r1, lsl #6
     264:	03000d07 	movweq	r0, #3335	; 0xd07
     268:	3b0b3a0e 	blcc	2ceaa8 <_Min_Stack_Size+0x2ce6a8>
     26c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     270:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     274:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     278:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     27c:	0b381349 	bleq	e04fa8 <_Min_Stack_Size+0xe04ba8>
     280:	26090000 	strcs	r0, [r9], -r0
     284:	00134900 	andseq	r4, r3, r0, lsl #18
     288:	01010a00 	tsteq	r1, r0, lsl #20
     28c:	13011349 	movwne	r1, #4937	; 0x1349
     290:	210b0000 	mrscs	r0, (UNDEF: 11)
     294:	2f134900 	svccs	0x00134900
     298:	0c00000b 	stceq	0, cr0, [r0], {11}
     29c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     2a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     2a4:	00001349 	andeq	r1, r0, r9, asr #6
     2a8:	0b01040d 	bleq	412e4 <_Min_Stack_Size+0x40ee4>
     2ac:	3b0b3a0b 	blcc	2ceae0 <_Min_Stack_Size+0x2ce6e0>
     2b0:	00130105 	andseq	r0, r3, r5, lsl #2
     2b4:	00280e00 	eoreq	r0, r8, r0, lsl #28
     2b8:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     2bc:	280f0000 	stmdacs	pc, {}	; <UNPREDICTABLE>
     2c0:	1c080300 	stcne	3, cr0, [r8], {-0}
     2c4:	1000000d 	andne	r0, r0, sp
     2c8:	0e03012e 	adfeqsp	f0, f3, #0.5
     2cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     2d0:	0b201927 	bleq	806774 <_Min_Stack_Size+0x806374>
     2d4:	00001301 	andeq	r1, r0, r1, lsl #6
     2d8:	03003411 	movweq	r3, #1041	; 0x411
     2dc:	3b0b3a0e 	blcc	2ceb1c <_Min_Stack_Size+0x2ce71c>
     2e0:	00134905 	andseq	r4, r3, r5, lsl #18
     2e4:	012e1200 	teqeq	lr, r0, lsl #4
     2e8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     2ec:	0b3b0b3a 	bleq	ec2fdc <_Min_Stack_Size+0xec2bdc>
     2f0:	01111927 	tsteq	r1, r7, lsr #18
     2f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     2f8:	01194297 			; <UNDEFINED> instruction: 0x01194297
     2fc:	13000013 	movwne	r0, #19
     300:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     304:	17550152 			; <UNDEFINED> instruction: 0x17550152
     308:	0b590b58 	bleq	1643070 <_Min_Stack_Size+0x1642c70>
     30c:	0b140000 	bleq	500314 <_Min_Stack_Size+0x4fff14>
     310:	00175501 	andseq	r5, r7, r1, lsl #10
     314:	00341500 	eorseq	r1, r4, r0, lsl #10
     318:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     31c:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
     320:	03193f01 	tsteq	r9, #1, 30
     324:	3b0b3a0e 	blcc	2ceb64 <_Min_Stack_Size+0x2ce764>
     328:	11192705 	tstne	r9, r5, lsl #14
     32c:	40061201 	andmi	r1, r6, r1, lsl #4
     330:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     334:	00001301 	andeq	r1, r0, r1, lsl #6
     338:	03003417 	movweq	r3, #1047	; 0x417
     33c:	3b0b3a08 	blcc	2ceb64 <_Min_Stack_Size+0x2ce764>
     340:	02134905 	andseq	r4, r3, #81920	; 0x14000
     344:	18000017 	stmdane	r0, {r0, r1, r2, r4}
     348:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     34c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     350:	17021349 	strne	r1, [r2, -r9, asr #6]
     354:	34190000 	ldrcc	r0, [r9], #-0
     358:	3a0e0300 	bcc	380f60 <_Min_Stack_Size+0x380b60>
     35c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     360:	3c193f13 	ldccc	15, cr3, [r9], {19}
     364:	1a000019 	bne	3d0 <_Min_Heap_Size+0x3d0>
     368:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     36c:	0b3b0b3a 	bleq	ec305c <_Min_Stack_Size+0xec2c5c>
     370:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     374:	00001802 	andeq	r1, r0, r2, lsl #16
     378:	01110100 	tsteq	r1, r0, lsl #2
     37c:	0b130e25 	bleq	4c3c18 <_Min_Stack_Size+0x4c3818>
     380:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
     384:	17100111 			; <UNDEFINED> instruction: 0x17100111
     388:	24020000 	strcs	r0, [r2], #-0
     38c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     390:	000e030b 	andeq	r0, lr, fp, lsl #6
     394:	00160300 	andseq	r0, r6, r0, lsl #6
     398:	0b3a0e03 	bleq	e83bac <_Min_Stack_Size+0xe837ac>
     39c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3a0:	24040000 	strcs	r0, [r4], #-0
     3a4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     3a8:	0008030b 	andeq	r0, r8, fp, lsl #6
     3ac:	00350500 	eorseq	r0, r5, r0, lsl #10
     3b0:	00001349 	andeq	r1, r0, r9, asr #6
     3b4:	3f002e06 	svccc	0x00002e06
     3b8:	3a0e0319 	bcc	381024 <_Min_Stack_Size+0x380c24>
     3bc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     3c0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     3c4:	97184006 	ldrls	r4, [r8, -r6]
     3c8:	00001942 	andeq	r1, r0, r2, asr #18
     3cc:	03003407 	movweq	r3, #1031	; 0x407
     3d0:	3b0b3a0e 	blcc	2cec10 <_Min_Stack_Size+0x2ce810>
     3d4:	3f134905 	svccc	0x00134905
     3d8:	00193c19 	andseq	r3, r9, r9, lsl ip
     3dc:	11010000 	mrsne	r0, (UNDEF: 1)
     3e0:	130e2501 	movwne	r2, #58625	; 0xe501
     3e4:	550e030b 	strpl	r0, [lr, #-779]	; 0x30b
     3e8:	10011117 	andne	r1, r1, r7, lsl r1
     3ec:	02000017 	andeq	r0, r0, #23
     3f0:	0b0b0024 	bleq	2c0488 <_Min_Stack_Size+0x2c0088>
     3f4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     3f8:	16030000 	strne	r0, [r3], -r0
     3fc:	3a0e0300 	bcc	381004 <_Min_Stack_Size+0x380c04>
     400:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     404:	04000013 	streq	r0, [r0], #-19
     408:	0b0b0024 	bleq	2c04a0 <_Min_Stack_Size+0x2c00a0>
     40c:	0e030b3e 	vmoveq.16	d3[0], r0
     410:	0f050000 	svceq	0x00050000
     414:	000b0b00 	andeq	r0, fp, r0, lsl #22
     418:	01130600 	tsteq	r3, r0, lsl #12
     41c:	0b0b0e03 	bleq	2c3c30 <_Min_Stack_Size+0x2c3830>
     420:	0b3b0b3a 	bleq	ec3110 <_Min_Stack_Size+0xec2d10>
     424:	00001301 	andeq	r1, r0, r1, lsl #6
     428:	03000d07 	movweq	r0, #3335	; 0xd07
     42c:	3b0b3a0e 	blcc	2cec6c <_Min_Stack_Size+0x2ce86c>
     430:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     434:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     438:	0b0b000f 	bleq	2c047c <_Min_Stack_Size+0x2c007c>
     43c:	00001349 	andeq	r1, r0, r9, asr #6
     440:	27011509 	strcs	r1, [r1, -r9, lsl #10]
     444:	00130119 	andseq	r0, r3, r9, lsl r1
     448:	00050a00 	andeq	r0, r5, r0, lsl #20
     44c:	00001349 	andeq	r1, r0, r9, asr #6
     450:	03012e0b 	movweq	r2, #7691	; 0x1e0b
     454:	3b0b3a0e 	blcc	2cec94 <_Min_Stack_Size+0x2ce894>
     458:	20192705 	andscs	r2, r9, r5, lsl #14
     45c:	0013010b 	andseq	r0, r3, fp, lsl #2
     460:	00340c00 	eorseq	r0, r4, r0, lsl #24
     464:	0b3a0e03 	bleq	e83c78 <_Min_Stack_Size+0xe83878>
     468:	1349053b 	movtne	r0, #38203	; 0x953b
     46c:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
     470:	03193f01 	tsteq	r9, #1, 30
     474:	3b0b3a0e 	blcc	2cecb4 <_Min_Stack_Size+0x2ce8b4>
     478:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     47c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     480:	97184006 	ldrls	r4, [r8, -r6]
     484:	13011942 	movwne	r1, #6466	; 0x1942
     488:	050e0000 	streq	r0, [lr, #-0]
     48c:	3a0e0300 	bcc	381094 <_Min_Stack_Size+0x380c94>
     490:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     494:	00170213 	andseq	r0, r7, r3, lsl r2
     498:	00340f00 	eorseq	r0, r4, r0, lsl #30
     49c:	0b3a0e03 	bleq	e83cb0 <_Min_Stack_Size+0xe838b0>
     4a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4a4:	00001702 	andeq	r1, r0, r2, lsl #14
     4a8:	31011d10 	tstcc	r1, r0, lsl sp
     4ac:	55015213 	strpl	r5, [r1, #-531]	; 0x213
     4b0:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
     4b4:	0013010b 	andseq	r0, r3, fp, lsl #2
     4b8:	010b1100 	mrseq	r1, (UNDEF: 27)
     4bc:	00001755 	andeq	r1, r0, r5, asr r7
     4c0:	31003412 	tstcc	r0, r2, lsl r4
     4c4:	00170213 	andseq	r0, r7, r3, lsl r2
     4c8:	82891300 	addhi	r1, r9, #0, 6
     4cc:	01110101 	tsteq	r1, r1, lsl #2
     4d0:	13011331 	movwne	r1, #4913	; 0x1331
     4d4:	8a140000 	bhi	5004dc <_Min_Stack_Size+0x5000dc>
     4d8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     4dc:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     4e0:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
     4e4:	11010182 	smlabbne	r1, r2, r1, r0
     4e8:	00133101 	andseq	r3, r3, r1, lsl #2
     4ec:	012e1600 	teqeq	lr, r0, lsl #12
     4f0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     4f4:	0b3b0b3a 	bleq	ec31e4 <_Min_Stack_Size+0xec2de4>
     4f8:	01111927 	tsteq	r1, r7, lsr #18
     4fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     500:	01194297 			; <UNDEFINED> instruction: 0x01194297
     504:	17000013 	smladne	r0, r3, r0, r0
     508:	00018289 	andeq	r8, r1, r9, lsl #5
     50c:	13310111 	teqne	r1, #1073741828	; 0x40000004
     510:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
     514:	11010182 	smlabbne	r1, r2, r1, r0
     518:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     51c:	00001331 	andeq	r1, r0, r1, lsr r3
     520:	03012e19 	movweq	r2, #7705	; 0x1e19
     524:	3b0b3a0e 	blcc	2ced64 <_Min_Stack_Size+0x2ce964>
     528:	2019270b 	andscs	r2, r9, fp, lsl #14
     52c:	0013010b 	andseq	r0, r3, fp, lsl #2
     530:	010b1a00 	tsteq	fp, r0, lsl #20
     534:	341b0000 	ldrcc	r0, [fp], #-0
     538:	3a0e0300 	bcc	381140 <_Min_Stack_Size+0x380d40>
     53c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     540:	1c000013 	stcne	0, cr0, [r0], {19}
     544:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     548:	0b3a0e03 	bleq	e83d5c <_Min_Stack_Size+0xe8395c>
     54c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     550:	06120111 			; <UNDEFINED> instruction: 0x06120111
     554:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     558:	00130119 	andseq	r0, r3, r9, lsl r1
     55c:	011d1d00 	tsteq	sp, r0, lsl #26
     560:	01111331 	tsteq	r1, r1, lsr r3
     564:	0b580612 	bleq	1601db4 <_Min_Stack_Size+0x16019b4>
     568:	13010559 	movwne	r0, #5465	; 0x1559
     56c:	1d1e0000 	ldcne	0, cr0, [lr, #-0]
     570:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     574:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     578:	0105590b 	tsteq	r5, fp, lsl #18
     57c:	1f000013 	svcne	0x00000013
     580:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
     584:	00001301 	andeq	r1, r0, r1, lsl #6
     588:	03003420 	movweq	r3, #1056	; 0x420
     58c:	3b0b3a0e 	blcc	2cedcc <_Min_Stack_Size+0x2ce9cc>
     590:	02134905 	andseq	r4, r3, #81920	; 0x14000
     594:	21000017 	tstcs	r0, r7, lsl r0
     598:	13490026 	movtne	r0, #36902	; 0x9026
     59c:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
     5a0:	03193f01 	tsteq	r9, #1, 30
     5a4:	3b0b3a0e 	blcc	2cede4 <_Min_Stack_Size+0x2ce9e4>
     5a8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     5ac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     5b0:	97184006 	ldrls	r4, [r8, -r6]
     5b4:	13011942 	movwne	r1, #6466	; 0x1942
     5b8:	05230000 	streq	r0, [r3, #-0]!
     5bc:	3a0e0300 	bcc	3811c4 <_Min_Stack_Size+0x380dc4>
     5c0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     5c4:	00170213 	andseq	r0, r7, r3, lsl r2
     5c8:	01012400 	tsteq	r1, r0, lsl #8
     5cc:	13011349 	movwne	r1, #4937	; 0x1349
     5d0:	21250000 	teqcs	r5, r0
     5d4:	2f134900 	svccs	0x00134900
     5d8:	2600000b 	strcs	r0, [r0], -fp
     5dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     5e0:	0b3b0b3a 	bleq	ec32d0 <_Min_Stack_Size+0xec2ed0>
     5e4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     5e8:	34270000 	strtcc	r0, [r7], #-0
     5ec:	3a0e0300 	bcc	3811f4 <_Min_Stack_Size+0x380df4>
     5f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5f4:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     5f8:	28000018 	stmdacs	r0, {r3, r4}
     5fc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     600:	0b3a0e03 	bleq	e83e14 <_Min_Stack_Size+0xe83a14>
     604:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     608:	1301193c 	movwne	r1, #6460	; 0x193c
     60c:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
     610:	03193f01 	tsteq	r9, #1, 30
     614:	3b0b3a0e 	blcc	2cee54 <_Min_Stack_Size+0x2cea54>
     618:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     61c:	01193c13 	tsteq	r9, r3, lsl ip
     620:	2a000013 	bcs	674 <_Min_Stack_Size+0x274>
     624:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     628:	0b3a0e03 	bleq	e83e3c <_Min_Stack_Size+0xe83a3c>
     62c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     630:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     634:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
     638:	03193f01 	tsteq	r9, #1, 30
     63c:	3b0b3a0e 	blcc	2cee7c <_Min_Stack_Size+0x2cea7c>
     640:	3c19270b 	ldccc	7, cr2, [r9], {11}
     644:	00130119 	andseq	r0, r3, r9, lsl r1
     648:	002e2c00 	eoreq	r2, lr, r0, lsl #24
     64c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     650:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     654:	13491927 	movtne	r1, #39207	; 0x9927
     658:	0000193c 	andeq	r1, r0, ip, lsr r9
     65c:	01110100 	tsteq	r1, r0, lsl #2
     660:	0b130e25 	bleq	4c3efc <_Min_Stack_Size+0x4c3afc>
     664:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
     668:	17100111 			; <UNDEFINED> instruction: 0x17100111
     66c:	16020000 	strne	r0, [r2], -r0
     670:	3a0e0300 	bcc	381278 <_Min_Stack_Size+0x380e78>
     674:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     678:	03000013 	movweq	r0, #19
     67c:	0b0b0024 	bleq	2c0714 <_Min_Stack_Size+0x2c0314>
     680:	0e030b3e 	vmoveq.16	d3[0], r0
     684:	24040000 	strcs	r0, [r4], #-0
     688:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     68c:	0008030b 	andeq	r0, r8, fp, lsl #6
     690:	000f0500 	andeq	r0, pc, r0, lsl #10
     694:	00000b0b 	andeq	r0, r0, fp, lsl #22
     698:	03011306 	movweq	r1, #4870	; 0x1306
     69c:	3a0b0b0e 	bcc	2c32dc <_Min_Stack_Size+0x2c2edc>
     6a0:	010b3b0b 	tsteq	fp, fp, lsl #22
     6a4:	07000013 	smladeq	r0, r3, r0, r0
     6a8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     6ac:	0b3b0b3a 	bleq	ec339c <_Min_Stack_Size+0xec2f9c>
     6b0:	0b381349 	bleq	e053dc <_Min_Stack_Size+0xe04fdc>
     6b4:	0f080000 	svceq	0x00080000
     6b8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     6bc:	09000013 	stmdbeq	r0, {r0, r1, r4}
     6c0:	0e03012e 	adfeqsp	f0, f3, #0.5
     6c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     6c8:	13491927 	movtne	r1, #39207	; 0x9927
     6cc:	13010b20 	movwne	r0, #6944	; 0x1b20
     6d0:	050a0000 	streq	r0, [sl, #-0]
     6d4:	3a0e0300 	bcc	3812dc <_Min_Stack_Size+0x380edc>
     6d8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     6dc:	0b000013 	bleq	730 <_Min_Stack_Size+0x330>
     6e0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     6e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     6e8:	00001349 	andeq	r1, r0, r9, asr #6
     6ec:	4900260c 	stmdbmi	r0, {r2, r3, r9, sl, sp}
     6f0:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     6f4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     6f8:	0b3a0e03 	bleq	e83f0c <_Min_Stack_Size+0xe83b0c>
     6fc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     700:	01111349 	tsteq	r1, r9, asr #6
     704:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     708:	01194297 			; <UNDEFINED> instruction: 0x01194297
     70c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     710:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     714:	0b3b0b3a 	bleq	ec3404 <_Min_Stack_Size+0xec3004>
     718:	17021349 	strne	r1, [r2, -r9, asr #6]
     71c:	890f0000 	stmdbhi	pc, {}	; <UNPREDICTABLE>
     720:	11010182 	smlabbne	r1, r2, r1, r0
     724:	01133101 	tsteq	r3, r1, lsl #2
     728:	10000013 	andne	r0, r0, r3, lsl r0
     72c:	0001828a 	andeq	r8, r1, sl, lsl #5
     730:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     734:	11000018 	tstne	r0, r8, lsl r0
     738:	01018289 	smlabbeq	r1, r9, r2, r8
     73c:	13310111 	teqne	r1, #1073741828	; 0x40000004
     740:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     744:	03193f01 	tsteq	r9, #1, 30
     748:	3b0b3a0e 	blcc	2cef88 <_Min_Stack_Size+0x2ceb88>
     74c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     750:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     754:	97184006 	ldrls	r4, [r8, -r6]
     758:	13011942 	movwne	r1, #6466	; 0x1942
     75c:	05130000 	ldreq	r0, [r3, #-0]
     760:	3a0e0300 	bcc	381368 <_Min_Stack_Size+0x380f68>
     764:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     768:	00170213 	andseq	r0, r7, r3, lsl r2
     76c:	00341400 	eorseq	r1, r4, r0, lsl #8
     770:	0b3a0e03 	bleq	e83f84 <_Min_Stack_Size+0xe83b84>
     774:	1349053b 	movtne	r0, #38203	; 0x953b
     778:	00001702 	andeq	r1, r0, r2, lsl #14
     77c:	03003415 	movweq	r3, #1045	; 0x415
     780:	3b0b3a0e 	blcc	2cefc0 <_Min_Stack_Size+0x2cebc0>
     784:	1c134905 	ldcne	9, cr4, [r3], {5}
     788:	1600000b 	strne	r0, [r0], -fp
     78c:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
     790:	00001301 	andeq	r1, r0, r1, lsl #6
     794:	31011d17 	tstcc	r1, r7, lsl sp
     798:	55015213 	strpl	r5, [r1, #-531]	; 0x213
     79c:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
     7a0:	00130105 	andseq	r0, r3, r5, lsl #2
     7a4:	00051800 	andeq	r1, r5, r0, lsl #16
     7a8:	17021331 	smladxne	r2, r1, r3, r1
     7ac:	0b190000 	bleq	6407b4 <_Min_Stack_Size+0x6403b4>
     7b0:	00175501 	andseq	r5, r7, r1, lsl #10
     7b4:	00341a00 	eorseq	r1, r4, r0, lsl #20
     7b8:	17021331 	smladxne	r2, r1, r3, r1
     7bc:	051b0000 	ldreq	r0, [fp, #-0]
     7c0:	02133100 	andseq	r3, r3, #0, 2
     7c4:	1c000018 	stcne	0, cr0, [r0], {24}
     7c8:	00018289 	andeq	r8, r1, r9, lsl #5
     7cc:	13310111 	teqne	r1, #1073741828	; 0x40000004
     7d0:	341d0000 	ldrcc	r0, [sp], #-0
     7d4:	3a0e0300 	bcc	3813dc <_Min_Stack_Size+0x380fdc>
     7d8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     7dc:	00180213 	andseq	r0, r8, r3, lsl r2
     7e0:	012e1e00 	teqeq	lr, r0, lsl #28
     7e4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     7e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     7ec:	13491927 	movtne	r1, #39207	; 0x9927
     7f0:	13010b20 	movwne	r0, #6944	; 0x1b20
     7f4:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     7f8:	11133101 	tstne	r3, r1, lsl #2
     7fc:	40061201 	andmi	r1, r6, r1, lsl #4
     800:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     804:	00001301 	andeq	r1, r0, r1, lsl #6
     808:	31003420 	tstcc	r0, r0, lsr #8
     80c:	00180213 	andseq	r0, r8, r3, lsl r2
     810:	00052100 	andeq	r2, r5, r0, lsl #2
     814:	0b3a0e03 	bleq	e84028 <_Min_Stack_Size+0xe83c28>
     818:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     81c:	00001702 	andeq	r1, r0, r2, lsl #14
     820:	3f012e22 	svccc	0x00012e22
     824:	3a0e0319 	bcc	381490 <_Min_Stack_Size+0x381090>
     828:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     82c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     830:	97184006 	ldrls	r4, [r8, -r6]
     834:	13011942 	movwne	r1, #6466	; 0x1942
     838:	89230000 	stmdbhi	r3!, {}	; <UNPREDICTABLE>
     83c:	11000182 	smlabbne	r0, r2, r1, r0
     840:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     844:	00001331 	andeq	r1, r0, r1, lsr r3
     848:	31011d24 	tstcc	r1, r4, lsr #26
     84c:	55015213 	strpl	r5, [r1, #-531]	; 0x213
     850:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
     854:	25000005 	strcs	r0, [r0, #-5]
     858:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     85c:	0b3a0e03 	bleq	e84070 <_Min_Stack_Size+0xe83c70>
     860:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     864:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     868:	00001301 	andeq	r1, r0, r1, lsl #6
     86c:	49000526 	stmdbmi	r0, {r1, r2, r5, r8, sl}
     870:	27000013 	smladcs	r0, r3, r0, r0
     874:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     878:	0b3a0e03 	bleq	e8408c <_Min_Stack_Size+0xe83c8c>
     87c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     880:	1301193c 	movwne	r1, #6460	; 0x193c
     884:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
     888:	03193f00 	tsteq	r9, #0, 30
     88c:	3b0b3a0e 	blcc	2cf0cc <_Min_Stack_Size+0x2ceccc>
     890:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     894:	00193c13 	andseq	r3, r9, r3, lsl ip
     898:	002e2900 	eoreq	r2, lr, r0, lsl #18
     89c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     8a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     8a4:	13491927 	movtne	r1, #39207	; 0x9927
     8a8:	0000193c 	andeq	r1, r0, ip, lsr r9
     8ac:	3f002e2a 	svccc	0x00002e2a
     8b0:	3a0e0319 	bcc	38151c <_Min_Stack_Size+0x38111c>
     8b4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     8b8:	00193c19 	andseq	r3, r9, r9, lsl ip
     8bc:	002e2b00 	eoreq	r2, lr, r0, lsl #22
     8c0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     8c4:	0b3b0b3a 	bleq	ec35b4 <_Min_Stack_Size+0xec31b4>
     8c8:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     8cc:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
     8d0:	03193f01 	tsteq	r9, #1, 30
     8d4:	3b0b3a0e 	blcc	2cf114 <_Min_Stack_Size+0x2ced14>
     8d8:	3c19270b 	ldccc	7, cr2, [r9], {11}
     8dc:	00130119 	andseq	r0, r3, r9, lsl r1
     8e0:	012e2d00 	teqeq	lr, r0, lsl #26
     8e4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     8e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     8ec:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     8f0:	01000000 	mrseq	r0, (UNDEF: 0)
     8f4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     8f8:	0e030b13 	vmoveq.32	d3[0], r0
     8fc:	01111755 	tsteq	r1, r5, asr r7
     900:	00001710 	andeq	r1, r0, r0, lsl r7
     904:	0b002402 	bleq	9914 <_Min_Stack_Size+0x9514>
     908:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     90c:	0300000e 	movweq	r0, #14
     910:	0b0b0024 	bleq	2c09a8 <_Min_Stack_Size+0x2c05a8>
     914:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     918:	16040000 	strne	r0, [r4], -r0
     91c:	3a0e0300 	bcc	381524 <_Min_Stack_Size+0x381124>
     920:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     924:	05000013 	streq	r0, [r0, #-19]
     928:	0b0b000f 	bleq	2c096c <_Min_Stack_Size+0x2c056c>
     92c:	13060000 	movwne	r0, #24576	; 0x6000
     930:	0b0e0301 	bleq	38153c <_Min_Stack_Size+0x38113c>
     934:	3b0b3a0b 	blcc	2cf168 <_Min_Stack_Size+0x2ced68>
     938:	0013010b 	andseq	r0, r3, fp, lsl #2
     93c:	000d0700 	andeq	r0, sp, r0, lsl #14
     940:	0b3a0e03 	bleq	e84154 <_Min_Stack_Size+0xe83d54>
     944:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     948:	00000b38 	andeq	r0, r0, r8, lsr fp
     94c:	0b000f08 	bleq	4574 <_Min_Stack_Size+0x4174>
     950:	0013490b 	andseq	r4, r3, fp, lsl #18
     954:	012e0900 	teqeq	lr, r0, lsl #18
     958:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     95c:	0b3b0b3a 	bleq	ec364c <_Min_Stack_Size+0xec324c>
     960:	01111927 	tsteq	r1, r7, lsr #18
     964:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     968:	01194297 			; <UNDEFINED> instruction: 0x01194297
     96c:	0a000013 	beq	9c0 <_Min_Stack_Size+0x5c0>
     970:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     974:	0b3b0b3a 	bleq	ec3664 <_Min_Stack_Size+0xec3264>
     978:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     97c:	260b0000 	strcs	r0, [fp], -r0
     980:	00134900 	andseq	r4, r3, r0, lsl #18
     984:	00340c00 	eorseq	r0, r4, r0, lsl #24
     988:	0b3a0e03 	bleq	e8419c <_Min_Stack_Size+0xe83d9c>
     98c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     990:	00001802 	andeq	r1, r0, r2, lsl #16
     994:	0300340d 	movweq	r3, #1037	; 0x40d
     998:	3b0b3a0e 	blcc	2cf1d8 <_Min_Stack_Size+0x2cedd8>
     99c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     9a0:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
     9a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     9a8:	0b3a0e03 	bleq	e841bc <_Min_Stack_Size+0xe83dbc>
     9ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     9b0:	01111349 	tsteq	r1, r9, asr #6
     9b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     9b8:	00194297 	mulseq	r9, r7, r2
     9bc:	00050f00 	andeq	r0, r5, r0, lsl #30
     9c0:	0b3a0e03 	bleq	e841d4 <_Min_Stack_Size+0xe83dd4>
     9c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9c8:	00001702 	andeq	r1, r0, r2, lsl #14
     9cc:	01110100 	tsteq	r1, r0, lsl #2
     9d0:	0b130e25 	bleq	4c426c <_Min_Stack_Size+0x4c3e6c>
     9d4:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
     9d8:	17100111 			; <UNDEFINED> instruction: 0x17100111
     9dc:	16020000 	strne	r0, [r2], -r0
     9e0:	3a0e0300 	bcc	3815e8 <_Min_Stack_Size+0x3811e8>
     9e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9e8:	03000013 	movweq	r0, #19
     9ec:	0b0b0024 	bleq	2c0a84 <_Min_Stack_Size+0x2c0684>
     9f0:	0e030b3e 	vmoveq.16	d3[0], r0
     9f4:	24040000 	strcs	r0, [r4], #-0
     9f8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     9fc:	0008030b 	andeq	r0, r8, fp, lsl #6
     a00:	000f0500 	andeq	r0, pc, r0, lsl #10
     a04:	00000b0b 	andeq	r0, r0, fp, lsl #22
     a08:	0b000f06 	bleq	4628 <_Min_Stack_Size+0x4228>
     a0c:	0013490b 	andseq	r4, r3, fp, lsl #18
     a10:	00260700 	eoreq	r0, r6, r0, lsl #14
     a14:	00001349 	andeq	r1, r0, r9, asr #6
     a18:	00002608 	andeq	r2, r0, r8, lsl #12
     a1c:	01130900 	tsteq	r3, r0, lsl #18
     a20:	0b0b0e03 	bleq	2c4234 <_Min_Stack_Size+0x2c3e34>
     a24:	0b3b0b3a 	bleq	ec3714 <_Min_Stack_Size+0xec3314>
     a28:	00001301 	andeq	r1, r0, r1, lsl #6
     a2c:	03000d0a 	movweq	r0, #3338	; 0xd0a
     a30:	3b0b3a0e 	blcc	2cf270 <_Min_Stack_Size+0x2cee70>
     a34:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     a38:	0b00000b 	bleq	a6c <_Min_Stack_Size+0x66c>
     a3c:	0b0b0117 	bleq	2c0ea0 <_Min_Stack_Size+0x2c0aa0>
     a40:	0b3b0b3a 	bleq	ec3730 <_Min_Stack_Size+0xec3330>
     a44:	00001301 	andeq	r1, r0, r1, lsl #6
     a48:	03000d0c 	movweq	r0, #3340	; 0xd0c
     a4c:	3b0b3a0e 	blcc	2cf28c <_Min_Stack_Size+0x2cee8c>
     a50:	0013490b 	andseq	r4, r3, fp, lsl #18
     a54:	000d0d00 	andeq	r0, sp, r0, lsl #26
     a58:	0b3a0803 	bleq	e82a6c <_Min_Stack_Size+0xe8266c>
     a5c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a60:	00000b38 	andeq	r0, r0, r8, lsr fp
     a64:	4900350e 	stmdbmi	r0, {r1, r2, r3, r8, sl, ip, sp}
     a68:	0f000013 	svceq	0x00000013
     a6c:	0e03012e 	adfeqsp	f0, f3, #0.5
     a70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a74:	13491927 	movtne	r1, #39207	; 0x9927
     a78:	13010b20 	movwne	r0, #6944	; 0x1b20
     a7c:	05100000 	ldreq	r0, [r0, #-0]
     a80:	3a0e0300 	bcc	381688 <_Min_Stack_Size+0x381288>
     a84:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a88:	11000013 	tstne	r0, r3, lsl r0
     a8c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     a90:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a94:	00001349 	andeq	r1, r0, r9, asr #6
     a98:	3f012e12 	svccc	0x00012e12
     a9c:	3a0e0319 	bcc	381708 <_Min_Stack_Size+0x381308>
     aa0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     aa4:	010b2019 	tsteq	fp, r9, lsl r0
     aa8:	13000013 	movwne	r0, #19
     aac:	08030034 	stmdaeq	r3, {r2, r4, r5}
     ab0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ab4:	00001349 	andeq	r1, r0, r9, asr #6
     ab8:	03012e14 	movweq	r2, #7700	; 0x1e14
     abc:	3b0b3a0e 	blcc	2cf2fc <_Min_Stack_Size+0x2ceefc>
     ac0:	11192705 	tstne	r9, r5, lsl #14
     ac4:	40061201 	andmi	r1, r6, r1, lsl #4
     ac8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     acc:	00001301 	andeq	r1, r0, r1, lsl #6
     ad0:	03000515 	movweq	r0, #1301	; 0x515
     ad4:	3b0b3a0e 	blcc	2cf314 <_Min_Stack_Size+0x2cef14>
     ad8:	02134905 	andseq	r4, r3, #81920	; 0x14000
     adc:	16000017 			; <UNDEFINED> instruction: 0x16000017
     ae0:	01018289 	smlabbeq	r1, r9, r2, r8
     ae4:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     ae8:	00133119 	andseq	r3, r3, r9, lsl r1
     aec:	828a1700 	addhi	r1, sl, #0, 14
     af0:	18020001 	stmdane	r2, {r0}
     af4:	00184291 	mulseq	r8, r1, r2
     af8:	012e1800 	teqeq	lr, r0, lsl #16
     afc:	0b3a0e03 	bleq	e84310 <_Min_Stack_Size+0xe83f10>
     b00:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     b04:	13010b20 	movwne	r0, #6944	; 0x1b20
     b08:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     b0c:	11133101 	tstne	r3, r1, lsl #2
     b10:	40061201 	andmi	r1, r6, r1, lsl #4
     b14:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b18:	00001301 	andeq	r1, r0, r1, lsl #6
     b1c:	3100051a 	tstcc	r0, sl, lsl r5
     b20:	00170213 	andseq	r0, r7, r3, lsl r2
     b24:	82891b00 	addhi	r1, r9, #0, 22
     b28:	01110001 	tsteq	r1, r1
     b2c:	00001331 	andeq	r1, r0, r1, lsr r3
     b30:	0182891c 	orreq	r8, r2, ip, lsl r9
     b34:	31011101 	tstcc	r1, r1, lsl #2
     b38:	00130113 	andseq	r0, r3, r3, lsl r1
     b3c:	82891d00 	addhi	r1, r9, #0, 26
     b40:	01110001 	tsteq	r1, r1
     b44:	31194295 			; <UNDEFINED> instruction: 0x31194295
     b48:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     b4c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     b50:	0b3a0e03 	bleq	e84364 <_Min_Stack_Size+0xe83f64>
     b54:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     b58:	0b201349 	bleq	805884 <_Min_Stack_Size+0x805484>
     b5c:	00001301 	andeq	r1, r0, r1, lsl #6
     b60:	0300051f 	movweq	r0, #1311	; 0x51f
     b64:	3b0b3a0e 	blcc	2cf3a4 <_Min_Stack_Size+0x2cefa4>
     b68:	0013490b 	andseq	r4, r3, fp, lsl #18
     b6c:	00342000 	eorseq	r2, r4, r0
     b70:	17021331 	smladxne	r2, r1, r3, r1
     b74:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     b78:	03193f01 	tsteq	r9, #1, 30
     b7c:	3b0b3a0e 	blcc	2cf3bc <_Min_Stack_Size+0x2cefbc>
     b80:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     b84:	010b2013 	tsteq	fp, r3, lsl r0
     b88:	22000013 	andcs	r0, r0, #19
     b8c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     b90:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b94:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
     b98:	00001301 	andeq	r1, r0, r1, lsl #6
     b9c:	11010b23 	tstne	r1, r3, lsr #22
     ba0:	00061201 	andeq	r1, r6, r1, lsl #4
     ba4:	012e2400 	teqeq	lr, r0, lsl #8
     ba8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     bac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     bb0:	13491927 	movtne	r1, #39207	; 0x9927
     bb4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     bb8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     bbc:	00130119 	andseq	r0, r3, r9, lsl r1
     bc0:	00342500 	eorseq	r2, r4, r0, lsl #10
     bc4:	0b3a0e03 	bleq	e843d8 <_Min_Stack_Size+0xe83fd8>
     bc8:	1349053b 	movtne	r0, #38203	; 0x953b
     bcc:	00001802 	andeq	r1, r0, r2, lsl #16
     bd0:	31011d26 	tstcc	r1, r6, lsr #26
     bd4:	55015213 	strpl	r5, [r1, #-531]	; 0x213
     bd8:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
     bdc:	00130105 	andseq	r0, r3, r5, lsl #2
     be0:	010b2700 	tsteq	fp, r0, lsl #14
     be4:	00001755 	andeq	r1, r0, r5, asr r7
     be8:	03003428 	movweq	r3, #1064	; 0x428
     bec:	3b0b3a0e 	blcc	2cf42c <_Min_Stack_Size+0x2cf02c>
     bf0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     bf4:	29000017 	stmdbcs	r0, {r0, r1, r2, r4}
     bf8:	01018289 	smlabbeq	r1, r9, r2, r8
     bfc:	13310111 	teqne	r1, #1073741828	; 0x40000004
     c00:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
     c04:	03193f01 	tsteq	r9, #1, 30
     c08:	3b0b3a0e 	blcc	2cf448 <_Min_Stack_Size+0x2cf048>
     c0c:	11192705 	tstne	r9, r5, lsl #14
     c10:	40061201 	andmi	r1, r6, r1, lsl #4
     c14:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     c18:	00001301 	andeq	r1, r0, r1, lsl #6
     c1c:	3100052b 	tstcc	r0, fp, lsr #10
     c20:	2c000013 	stccs	0, cr0, [r0], {19}
     c24:	01018289 	smlabbeq	r1, r9, r2, r8
     c28:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     c2c:	01133119 	tsteq	r3, r9, lsl r1
     c30:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     c34:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     c38:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c3c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     c40:	342e0000 	strtcc	r0, [lr], #-0
     c44:	3a080300 	bcc	20184c <_Min_Stack_Size+0x20144c>
     c48:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c4c:	00170213 	andseq	r0, r7, r3, lsl r2
     c50:	00052f00 	andeq	r2, r5, r0, lsl #30
     c54:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     c58:	01300000 	teqeq	r0, r0
     c5c:	01134901 	tsteq	r3, r1, lsl #18
     c60:	31000013 	tstcc	r0, r3, lsl r0
     c64:	13490021 	movtne	r0, #36897	; 0x9021
     c68:	00000b2f 	andeq	r0, r0, pc, lsr #22
     c6c:	03003432 	movweq	r3, #1074	; 0x432
     c70:	3b0b3a0e 	blcc	2cf4b0 <_Min_Stack_Size+0x2cf0b0>
     c74:	3f13490b 	svccc	0x0013490b
     c78:	00180219 	andseq	r0, r8, r9, lsl r2
     c7c:	012e3300 	teqeq	lr, r0, lsl #6
     c80:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     c84:	13491927 	movtne	r1, #39207	; 0x9927
     c88:	193c1934 	ldmdbne	ip!, {r2, r4, r5, r8, fp, ip}
     c8c:	00001301 	andeq	r1, r0, r1, lsl #6
     c90:	49000534 	stmdbmi	r0, {r2, r4, r5, r8, sl}
     c94:	35000013 	strcc	r0, [r0, #-19]
     c98:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     c9c:	0b3a0e03 	bleq	e844b0 <_Min_Stack_Size+0xe840b0>
     ca0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     ca4:	0000193c 	andeq	r1, r0, ip, lsr r9
     ca8:	3f012e36 	svccc	0x00012e36
     cac:	3a0e0319 	bcc	381918 <_Min_Stack_Size+0x381518>
     cb0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     cb4:	3c134919 	ldccc	9, cr4, [r3], {25}
     cb8:	00130119 	andseq	r0, r3, r9, lsl r1
     cbc:	002e3700 	eoreq	r3, lr, r0, lsl #14
     cc0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     cc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     cc8:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     ccc:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
     cd0:	03193f01 	tsteq	r9, #1, 30
     cd4:	3b0b3a0e 	blcc	2cf514 <_Min_Stack_Size+0x2cf114>
     cd8:	3c192705 	ldccc	7, cr2, [r9], {5}
     cdc:	00130119 	andseq	r0, r3, r9, lsl r1
     ce0:	002e3900 	eoreq	r3, lr, r0, lsl #18
     ce4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ce8:	0b3b0b3a 	bleq	ec39d8 <_Min_Stack_Size+0xec35d8>
     cec:	13491927 	movtne	r1, #39207	; 0x9927
     cf0:	0000193c 	andeq	r1, r0, ip, lsr r9
     cf4:	3f002e3a 	svccc	0x00002e3a
     cf8:	3a0e0319 	bcc	381964 <_Min_Stack_Size+0x381564>
     cfc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     d00:	3c134919 	ldccc	9, cr4, [r3], {25}
     d04:	3b000019 	blcc	d70 <_Min_Stack_Size+0x970>
     d08:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d0c:	0b3a0e03 	bleq	e84520 <_Min_Stack_Size+0xe84120>
     d10:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d14:	1301193c 	movwne	r1, #6460	; 0x193c
     d18:	2e3c0000 	cdpcs	0, 3, cr0, cr12, cr0, {0}
     d1c:	03193f01 	tsteq	r9, #1, 30
     d20:	3b0b3a0e 	blcc	2cf560 <_Min_Stack_Size+0x2cf160>
     d24:	3c192705 	ldccc	7, cr2, [r9], {5}
     d28:	00000019 	andeq	r0, r0, r9, lsl r0
     d2c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     d30:	030b130e 	movweq	r1, #45838	; 0xb30e
     d34:	1117550e 	tstne	r7, lr, lsl #10
     d38:	00171001 	andseq	r1, r7, r1
     d3c:	00160200 	andseq	r0, r6, r0, lsl #4
     d40:	0b3a0e03 	bleq	e84554 <_Min_Stack_Size+0xe84154>
     d44:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d48:	24030000 	strcs	r0, [r3], #-0
     d4c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     d50:	000e030b 	andeq	r0, lr, fp, lsl #6
     d54:	00240400 	eoreq	r0, r4, r0, lsl #8
     d58:	0b3e0b0b 	bleq	f8398c <_Min_Stack_Size+0xf8358c>
     d5c:	00000803 	andeq	r0, r0, r3, lsl #16
     d60:	0b000f05 	bleq	497c <_Min_Stack_Size+0x457c>
     d64:	0600000b 	streq	r0, [r0], -fp
     d68:	0b0b000f 	bleq	2c0dac <_Min_Stack_Size+0x2c09ac>
     d6c:	00001349 	andeq	r1, r0, r9, asr #6
     d70:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
     d74:	08000013 	stmdaeq	r0, {r0, r1, r4}
     d78:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     d7c:	00001301 	andeq	r1, r0, r1, lsl #6
     d80:	49000509 	stmdbmi	r0, {r0, r3, r8, sl}
     d84:	0a000013 	beq	dd8 <_Min_Stack_Size+0x9d8>
     d88:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     d8c:	0b3a0b0b 	bleq	e839c0 <_Min_Stack_Size+0xe835c0>
     d90:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     d94:	0d0b0000 	stceq	0, cr0, [fp, #-0]
     d98:	3a0e0300 	bcc	3819a0 <_Min_Stack_Size+0x3815a0>
     d9c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     da0:	000b3813 	andeq	r3, fp, r3, lsl r8
     da4:	01040c00 	tsteq	r4, r0, lsl #24
     da8:	0b3a0b0b 	bleq	e839dc <_Min_Stack_Size+0xe835dc>
     dac:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     db0:	280d0000 	stmdacs	sp, {}	; <UNPREDICTABLE>
     db4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     db8:	0e00000d 	cdpeq	0, 0, cr0, cr0, cr13, {0}
     dbc:	13490035 	movtne	r0, #36917	; 0x9035
     dc0:	010f0000 	mrseq	r0, CPSR
     dc4:	01134901 	tsteq	r3, r1, lsl #18
     dc8:	10000013 	andne	r0, r0, r3, lsl r0
     dcc:	13490021 	movtne	r0, #36897	; 0x9021
     dd0:	00000b2f 	andeq	r0, r0, pc, lsr #22
     dd4:	03012e11 	movweq	r2, #7697	; 0x1e11
     dd8:	3b0b3a0e 	blcc	2cf618 <_Min_Stack_Size+0x2cf218>
     ddc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     de0:	010b2013 	tsteq	fp, r3, lsl r0
     de4:	12000013 	andne	r0, r0, #19
     de8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     dec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     df0:	00001349 	andeq	r1, r0, r9, asr #6
     df4:	03003413 	movweq	r3, #1043	; 0x413
     df8:	3b0b3a0e 	blcc	2cf638 <_Min_Stack_Size+0x2cf238>
     dfc:	00134905 	andseq	r4, r3, r5, lsl #18
     e00:	010b1400 	tsteq	fp, r0, lsl #8
     e04:	00001301 	andeq	r1, r0, r1, lsl #6
     e08:	00010b15 	andeq	r0, r1, r5, lsl fp
     e0c:	012e1600 	teqeq	lr, r0, lsl #12
     e10:	0b3a0e03 	bleq	e84624 <_Min_Stack_Size+0xe84224>
     e14:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     e18:	13010b20 	movwne	r0, #6944	; 0x1b20
     e1c:	34170000 	ldrcc	r0, [r7], #-0
     e20:	3a080300 	bcc	201a28 <_Min_Stack_Size+0x201628>
     e24:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e28:	18000013 	stmdane	r0, {r0, r1, r4}
     e2c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     e30:	0b3a0e03 	bleq	e84644 <_Min_Stack_Size+0xe84244>
     e34:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     e38:	00000b20 	andeq	r0, r0, r0, lsr #22
     e3c:	3f012e19 	svccc	0x00012e19
     e40:	3a0e0319 	bcc	381aac <_Min_Stack_Size+0x3816ac>
     e44:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     e48:	010b2019 	tsteq	fp, r9, lsl r0
     e4c:	1a000013 	bne	ea0 <_Min_Stack_Size+0xaa0>
     e50:	0e03012e 	adfeqsp	f0, f3, #0.5
     e54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e58:	01111927 	tsteq	r1, r7, lsr #18
     e5c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     e60:	01194297 			; <UNDEFINED> instruction: 0x01194297
     e64:	1b000013 	blne	eb8 <_Min_Stack_Size+0xab8>
     e68:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     e6c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e70:	17021349 	strne	r1, [r2, -r9, asr #6]
     e74:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
     e78:	11010182 	smlabbne	r1, r2, r1, r0
     e7c:	01133101 	tsteq	r3, r1, lsl #2
     e80:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     e84:	0001828a 	andeq	r8, r1, sl, lsl #5
     e88:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     e8c:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
     e90:	01018289 	smlabbeq	r1, r9, r2, r8
     e94:	13310111 	teqne	r1, #1073741828	; 0x40000004
     e98:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     e9c:	03193f01 	tsteq	r9, #1, 30
     ea0:	3b0b3a0e 	blcc	2cf6e0 <_Min_Stack_Size+0x2cf2e0>
     ea4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     ea8:	010b2013 	tsteq	fp, r3, lsl r0
     eac:	20000013 	andcs	r0, r0, r3, lsl r0
     eb0:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     eb4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     eb8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     ebc:	00130119 	andseq	r0, r3, r9, lsl r1
     ec0:	00052100 	andeq	r2, r5, r0, lsl #2
     ec4:	17021331 	smladxne	r2, r1, r3, r1
     ec8:	34220000 	strtcc	r0, [r2], #-0
     ecc:	02133100 	andseq	r3, r3, #0, 2
     ed0:	23000017 	movwcs	r0, #23
     ed4:	13310034 	teqne	r1, #52	; 0x34
     ed8:	00001802 	andeq	r1, r0, r2, lsl #16
     edc:	31011d24 	tstcc	r1, r4, lsr #26
     ee0:	55015213 	strpl	r5, [r1, #-531]	; 0x213
     ee4:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
     ee8:	00130105 	andseq	r0, r3, r5, lsl #2
     eec:	010b2500 	tsteq	fp, r0, lsl #10
     ef0:	00001755 	andeq	r1, r0, r5, asr r7
     ef4:	55010b26 	strpl	r0, [r1, #-2854]	; 0xb26
     ef8:	00130117 	andseq	r0, r3, r7, lsl r1
     efc:	82892700 	addhi	r2, r9, #0, 14
     f00:	01110001 	tsteq	r1, r1
     f04:	00001331 	andeq	r1, r0, r1, lsr r3
     f08:	3f012e28 	svccc	0x00012e28
     f0c:	3a0e0319 	bcc	381b78 <_Min_Stack_Size+0x381778>
     f10:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     f14:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     f18:	97184006 	ldrls	r4, [r8, -r6]
     f1c:	13011942 	movwne	r1, #6466	; 0x1942
     f20:	05290000 	streq	r0, [r9, #-0]!
     f24:	3a0e0300 	bcc	381b2c <_Min_Stack_Size+0x38172c>
     f28:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f2c:	00170213 	andseq	r0, r7, r3, lsl r2
     f30:	011d2a00 	tsteq	sp, r0, lsl #20
     f34:	01111331 	tsteq	r1, r1, lsr r3
     f38:	0b580612 	bleq	1602788 <_Min_Stack_Size+0x1602388>
     f3c:	13010559 	movwne	r0, #5465	; 0x1559
     f40:	0b2b0000 	bleq	ac0f48 <_Min_Stack_Size+0xac0b48>
     f44:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     f48:	2c000006 	stccs	0, cr0, [r0], {6}
     f4c:	13310034 	teqne	r1, #52	; 0x34
     f50:	892d0000 	pushhi	{}	; <UNPREDICTABLE>
     f54:	11000182 	smlabbne	r0, r2, r1, r0
     f58:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     f5c:	00001331 	andeq	r1, r0, r1, lsr r3
     f60:	3f012e2e 	svccc	0x00012e2e
     f64:	3a0e0319 	bcc	381bd0 <_Min_Stack_Size+0x3817d0>
     f68:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     f6c:	11134919 	tstne	r3, r9, lsl r9
     f70:	40061201 	andmi	r1, r6, r1, lsl #4
     f74:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     f78:	00001301 	andeq	r1, r0, r1, lsl #6
     f7c:	11010b2f 	tstne	r1, pc, lsr #22
     f80:	01061201 	tsteq	r6, r1, lsl #4
     f84:	30000013 	andcc	r0, r0, r3, lsl r0
     f88:	13310005 	teqne	r1, #5
     f8c:	00001802 	andeq	r1, r0, r2, lsl #16
     f90:	31000531 	tstcc	r0, r1, lsr r5
     f94:	000b1c13 	andeq	r1, fp, r3, lsl ip
     f98:	00053200 	andeq	r3, r5, r0, lsl #4
     f9c:	00001331 	andeq	r1, r0, r1, lsr r3
     fa0:	31002e33 	tstcc	r0, r3, lsr lr
     fa4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     fa8:	97184006 	ldrls	r4, [r8, -r6]
     fac:	00001942 	andeq	r1, r0, r2, asr #18
     fb0:	3f002e34 	svccc	0x00002e34
     fb4:	3a0e0319 	bcc	381c20 <_Min_Stack_Size+0x381820>
     fb8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     fbc:	11134919 	tstne	r3, r9, lsl r9
     fc0:	40061201 	andmi	r1, r6, r1, lsl #4
     fc4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     fc8:	1d350000 	ldcne	0, cr0, [r5, #-0]
     fcc:	52133100 	andspl	r3, r3, #0, 2
     fd0:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     fd4:	0005590b 	andeq	r5, r5, fp, lsl #18
     fd8:	011d3600 	tsteq	sp, r0, lsl #12
     fdc:	01521331 	cmpeq	r2, r1, lsr r3
     fe0:	0b581755 	bleq	1606d3c <_Min_Stack_Size+0x160693c>
     fe4:	00000559 	andeq	r0, r0, r9, asr r5
     fe8:	31011d37 	tstcc	r1, r7, lsr sp
     fec:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     ff0:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     ff4:	38000005 	stmdacc	r0, {r0, r2}
     ff8:	01018289 	smlabbeq	r1, r9, r2, r8
     ffc:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    1000:	01133119 	tsteq	r3, r9, lsl r1
    1004:	39000013 	stmdbcc	r0, {r0, r1, r4}
    1008:	01018289 	smlabbeq	r1, r9, r2, r8
    100c:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    1010:	00133119 	andseq	r3, r3, r9, lsl r1
    1014:	00343a00 	eorseq	r3, r4, r0, lsl #20
    1018:	0b3a0e03 	bleq	e8482c <_Min_Stack_Size+0xe8442c>
    101c:	1349053b 	movtne	r0, #38203	; 0x953b
    1020:	00001802 	andeq	r1, r0, r2, lsl #16
    1024:	3f002e3b 	svccc	0x00002e3b
    1028:	3a0e0319 	bcc	381c94 <_Min_Stack_Size+0x381894>
    102c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1030:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1034:	97184006 	ldrls	r4, [r8, -r6]
    1038:	00001942 	andeq	r1, r0, r2, asr #18
    103c:	0300053c 	movweq	r0, #1340	; 0x53c
    1040:	3b0b3a0e 	blcc	2cf880 <_Min_Stack_Size+0x2cf480>
    1044:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1048:	3d000018 	stccc	0, cr0, [r0, #-96]	; 0xffffffa0
    104c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1050:	0b3b0b3a 	bleq	ec3d40 <_Min_Stack_Size+0xec3940>
    1054:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1058:	343e0000 	ldrtcc	r0, [lr], #-0
    105c:	3a0e0300 	bcc	381c64 <_Min_Stack_Size+0x381864>
    1060:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1064:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    1068:	3f000018 	svccc	0x00000018
    106c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1070:	0b3a0e03 	bleq	e84884 <_Min_Stack_Size+0xe84484>
    1074:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1078:	1301193c 	movwne	r1, #6460	; 0x193c
    107c:	2e400000 	cdpcs	0, 4, cr0, cr0, cr0, {0}
    1080:	03193f01 	tsteq	r9, #1, 30
    1084:	3b0b3a0e 	blcc	2cf8c4 <_Min_Stack_Size+0x2cf4c4>
    1088:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    108c:	01193c13 	tsteq	r9, r3, lsl ip
    1090:	41000013 	tstmi	r0, r3, lsl r0
    1094:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1098:	0b3a0e03 	bleq	e848ac <_Min_Stack_Size+0xe844ac>
    109c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    10a0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    10a4:	00001301 	andeq	r1, r0, r1, lsl #6
    10a8:	3f002e42 	svccc	0x00002e42
    10ac:	3a0e0319 	bcc	381d18 <_Min_Stack_Size+0x381918>
    10b0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    10b4:	00193c19 	andseq	r3, r9, r9, lsl ip
    10b8:	002e4300 	eoreq	r4, lr, r0, lsl #6
    10bc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    10c0:	0b3b0b3a 	bleq	ec3db0 <_Min_Stack_Size+0xec39b0>
    10c4:	13491927 	movtne	r1, #39207	; 0x9927
    10c8:	0000193c 	andeq	r1, r0, ip, lsr r9
    10cc:	3f012e44 	svccc	0x00012e44
    10d0:	3a0e0319 	bcc	381d3c <_Min_Stack_Size+0x38193c>
    10d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    10d8:	01193c19 	tsteq	r9, r9, lsl ip
    10dc:	45000013 	strmi	r0, [r0, #-19]
    10e0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    10e4:	0b3a0e03 	bleq	e848f8 <_Min_Stack_Size+0xe844f8>
    10e8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    10ec:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    10f0:	2e460000 	cdpcs	0, 4, cr0, cr6, cr0, {0}
    10f4:	03193f00 	tsteq	r9, #0, 30
    10f8:	3b0b3a0e 	blcc	2cf938 <_Min_Stack_Size+0x2cf538>
    10fc:	3c192705 	ldccc	7, cr2, [r9], {5}
    1100:	47000019 	smladmi	r0, r9, r0, r0
    1104:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1108:	0b3a0e03 	bleq	e8491c <_Min_Stack_Size+0xe8451c>
    110c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1110:	0000193c 	andeq	r1, r0, ip, lsr r9
    1114:	01110100 	tsteq	r1, r0, lsl #2
    1118:	0b130e25 	bleq	4c49b4 <_Min_Stack_Size+0x4c45b4>
    111c:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
    1120:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1124:	16020000 	strne	r0, [r2], -r0
    1128:	3a0e0300 	bcc	381d30 <_Min_Stack_Size+0x381930>
    112c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1130:	03000013 	movweq	r0, #19
    1134:	0b0b0024 	bleq	2c11cc <_Min_Stack_Size+0x2c0dcc>
    1138:	0e030b3e 	vmoveq.16	d3[0], r0
    113c:	24040000 	strcs	r0, [r4], #-0
    1140:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1144:	0008030b 	andeq	r0, r8, fp, lsl #6
    1148:	000f0500 	andeq	r0, pc, r0, lsl #10
    114c:	00000b0b 	andeq	r0, r0, fp, lsl #22
    1150:	0b000f06 	bleq	4d70 <_Min_Stack_Size+0x4970>
    1154:	0013490b 	andseq	r4, r3, fp, lsl #18
    1158:	00260700 	eoreq	r0, r6, r0, lsl #14
    115c:	00001349 	andeq	r1, r0, r9, asr #6
    1160:	00002608 	andeq	r2, r0, r8, lsl #12
    1164:	01150900 	tsteq	r5, r0, lsl #18
    1168:	13011927 	movwne	r1, #6439	; 0x1927
    116c:	050a0000 	streq	r0, [sl, #-0]
    1170:	00134900 	andseq	r4, r3, r0, lsl #18
    1174:	01130b00 	tsteq	r3, r0, lsl #22
    1178:	0b0b0e03 	bleq	2c498c <_Min_Stack_Size+0x2c458c>
    117c:	0b3b0b3a 	bleq	ec3e6c <_Min_Stack_Size+0xec3a6c>
    1180:	00001301 	andeq	r1, r0, r1, lsl #6
    1184:	03000d0c 	movweq	r0, #3340	; 0xd0c
    1188:	3b0b3a0e 	blcc	2cf9c8 <_Min_Stack_Size+0x2cf5c8>
    118c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1190:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    1194:	0b0b0117 	bleq	2c15f8 <_Min_Stack_Size+0x2c11f8>
    1198:	0b3b0b3a 	bleq	ec3e88 <_Min_Stack_Size+0xec3a88>
    119c:	00001301 	andeq	r1, r0, r1, lsl #6
    11a0:	03000d0e 	movweq	r0, #3342	; 0xd0e
    11a4:	3b0b3a0e 	blcc	2cf9e4 <_Min_Stack_Size+0x2cf5e4>
    11a8:	0013490b 	andseq	r4, r3, fp, lsl #18
    11ac:	000d0f00 	andeq	r0, sp, r0, lsl #30
    11b0:	0b3a0803 	bleq	e831c4 <_Min_Stack_Size+0xe82dc4>
    11b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    11b8:	00000b38 	andeq	r0, r0, r8, lsr fp
    11bc:	03012e10 	movweq	r2, #7696	; 0x1e10
    11c0:	3b0b3a0e 	blcc	2cfa00 <_Min_Stack_Size+0x2cf600>
    11c4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    11c8:	010b2013 	tsteq	fp, r3, lsl r0
    11cc:	11000013 	tstne	r0, r3, lsl r0
    11d0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    11d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    11d8:	00001349 	andeq	r1, r0, r9, asr #6
    11dc:	03003412 	movweq	r3, #1042	; 0x412
    11e0:	3b0b3a0e 	blcc	2cfa20 <_Min_Stack_Size+0x2cf620>
    11e4:	00134905 	andseq	r4, r3, r5, lsl #18
    11e8:	002e1300 	eoreq	r1, lr, r0, lsl #6
    11ec:	0b3a0e03 	bleq	e84a00 <_Min_Stack_Size+0xe84600>
    11f0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    11f4:	00000b20 	andeq	r0, r0, r0, lsr #22
    11f8:	3f012e14 	svccc	0x00012e14
    11fc:	3a0e0319 	bcc	381e68 <_Min_Stack_Size+0x381a68>
    1200:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1204:	11134919 	tstne	r3, r9, lsl r9
    1208:	40061201 	andmi	r1, r6, r1, lsl #4
    120c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1210:	00001301 	andeq	r1, r0, r1, lsl #6
    1214:	03003415 	movweq	r3, #1045	; 0x415
    1218:	3b0b3a0e 	blcc	2cfa58 <_Min_Stack_Size+0x2cf658>
    121c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1220:	16000017 			; <UNDEFINED> instruction: 0x16000017
    1224:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1228:	17550152 			; <UNDEFINED> instruction: 0x17550152
    122c:	0b590b58 	bleq	1643f94 <_Min_Stack_Size+0x1643b94>
    1230:	00001301 	andeq	r1, r0, r1, lsl #6
    1234:	01828917 	orreq	r8, r2, r7, lsl r9
    1238:	31011100 	mrscc	r1, (UNDEF: 17)
    123c:	18000013 	stmdane	r0, {r0, r1, r4}
    1240:	01018289 	smlabbeq	r1, r9, r2, r8
    1244:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1248:	00001301 	andeq	r1, r0, r1, lsl #6
    124c:	01828a19 	orreq	r8, r2, r9, lsl sl
    1250:	91180200 	tstls	r8, r0, lsl #4
    1254:	00001842 	andeq	r1, r0, r2, asr #16
    1258:	3f012e1a 	svccc	0x00012e1a
    125c:	3a0e0319 	bcc	381ec8 <_Min_Stack_Size+0x381ac8>
    1260:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1264:	11134919 	tstne	r3, r9, lsl r9
    1268:	40061201 	andmi	r1, r6, r1, lsl #4
    126c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1270:	00001301 	andeq	r1, r0, r1, lsl #6
    1274:	0300051b 	movweq	r0, #1307	; 0x51b
    1278:	3b0b3a0e 	blcc	2cfab8 <_Min_Stack_Size+0x2cf6b8>
    127c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1280:	1c000017 	stcne	0, cr0, [r0], {23}
    1284:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1288:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    128c:	17021349 	strne	r1, [r2, -r9, asr #6]
    1290:	1d1d0000 	ldcne	0, cr0, [sp, #-0]
    1294:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1298:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    129c:	0105590b 	tsteq	r5, fp, lsl #18
    12a0:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    12a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    12a8:	0b3a0e03 	bleq	e84abc <_Min_Stack_Size+0xe846bc>
    12ac:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    12b0:	0b201349 	bleq	805fdc <_Min_Stack_Size+0x805bdc>
    12b4:	00001301 	andeq	r1, r0, r1, lsl #6
    12b8:	31012e1f 	tstcc	r1, pc, lsl lr
    12bc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    12c0:	97184006 	ldrls	r4, [r8, -r6]
    12c4:	13011942 	movwne	r1, #6466	; 0x1942
    12c8:	05200000 	streq	r0, [r0, #-0]!
    12cc:	02133100 	andseq	r3, r3, #0, 2
    12d0:	21000017 	tstcs	r0, r7, lsl r0
    12d4:	13310034 	teqne	r1, #52	; 0x34
    12d8:	00001702 	andeq	r1, r0, r2, lsl #14
    12dc:	31003422 	tstcc	r0, r2, lsr #8
    12e0:	00180213 	andseq	r0, r8, r3, lsl r2
    12e4:	82892300 	addhi	r2, r9, #0, 6
    12e8:	01110101 	tsteq	r1, r1, lsl #2
    12ec:	00001331 	andeq	r1, r0, r1, lsr r3
    12f0:	03012e24 	movweq	r2, #7716	; 0x1e24
    12f4:	3b0b3a0e 	blcc	2cfb34 <_Min_Stack_Size+0x2cf734>
    12f8:	20192705 	andscs	r2, r9, r5, lsl #14
    12fc:	0013010b 	andseq	r0, r3, fp, lsl #2
    1300:	012e2500 	teqeq	lr, r0, lsl #10
    1304:	0b3a0e03 	bleq	e84b18 <_Min_Stack_Size+0xe84718>
    1308:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    130c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1310:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1314:	00130119 	andseq	r0, r3, r9, lsl r1
    1318:	00342600 	eorseq	r2, r4, r0, lsl #12
    131c:	0b3a0e03 	bleq	e84b30 <_Min_Stack_Size+0xe84730>
    1320:	1349053b 	movtne	r0, #38203	; 0x953b
    1324:	00001802 	andeq	r1, r0, r2, lsl #16
    1328:	31000527 	tstcc	r0, r7, lsr #10
    132c:	00180213 	andseq	r0, r8, r3, lsl r2
    1330:	010b2800 	tsteq	fp, r0, lsl #16
    1334:	00001755 	andeq	r1, r0, r5, asr r7
    1338:	31003429 	tstcc	r0, r9, lsr #8
    133c:	2a000013 	bcs	1390 <_Min_Stack_Size+0xf90>
    1340:	13310005 	teqne	r1, #5
    1344:	892b0000 	stmdbhi	fp!, {}	; <UNPREDICTABLE>
    1348:	11010182 	smlabbne	r1, r2, r1, r0
    134c:	00130101 	andseq	r0, r3, r1, lsl #2
    1350:	010b2c00 	tsteq	fp, r0, lsl #24
    1354:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1358:	00001301 	andeq	r1, r0, r1, lsl #6
    135c:	11010b2d 	tstne	r1, sp, lsr #22
    1360:	00061201 	andeq	r1, r6, r1, lsl #4
    1364:	011d2e00 	tsteq	sp, r0, lsl #28
    1368:	01111331 	tsteq	r1, r1, lsr r3
    136c:	0b580612 	bleq	1602bbc <_Min_Stack_Size+0x16027bc>
    1370:	13010559 	movwne	r0, #5465	; 0x1559
    1374:	1d2f0000 	stcne	0, cr0, [pc, #-0]	; 137c <_Min_Stack_Size+0xf7c>
    1378:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    137c:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    1380:	0005590b 	andeq	r5, r5, fp, lsl #18
    1384:	010b3000 	mrseq	r3, (UNDEF: 11)
    1388:	13011755 	movwne	r1, #5973	; 0x1755
    138c:	34310000 	ldrtcc	r0, [r1], #-0
    1390:	3a0e0300 	bcc	381f98 <_Min_Stack_Size+0x381b98>
    1394:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1398:	00180213 	andseq	r0, r8, r3, lsl r2
    139c:	002e3200 	eoreq	r3, lr, r0, lsl #4
    13a0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    13a4:	0b3b0b3a 	bleq	ec4094 <_Min_Stack_Size+0xec3c94>
    13a8:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    13ac:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
    13b0:	03193f01 	tsteq	r9, #1, 30
    13b4:	3b0b3a0e 	blcc	2cfbf4 <_Min_Stack_Size+0x2cf7f4>
    13b8:	3c192705 	ldccc	7, cr2, [r9], {5}
    13bc:	00130119 	andseq	r0, r3, r9, lsl r1
    13c0:	012e3400 	teqeq	lr, r0, lsl #8
    13c4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    13c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    13cc:	13491927 	movtne	r1, #39207	; 0x9927
    13d0:	1301193c 	movwne	r1, #6460	; 0x193c
    13d4:	2e350000 	cdpcs	0, 3, cr0, cr5, cr0, {0}
    13d8:	03193f00 	tsteq	r9, #0, 30
    13dc:	3b0b3a0e 	blcc	2cfc1c <_Min_Stack_Size+0x2cf81c>
    13e0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    13e4:	00193c13 	andseq	r3, r9, r3, lsl ip
    13e8:	002e3600 	eoreq	r3, lr, r0, lsl #12
    13ec:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    13f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    13f4:	13491927 	movtne	r1, #39207	; 0x9927
    13f8:	0000193c 	andeq	r1, r0, ip, lsr r9
    13fc:	3f002e37 	svccc	0x00002e37
    1400:	3a0e0319 	bcc	38206c <_Min_Stack_Size+0x381c6c>
    1404:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1408:	00193c19 	andseq	r3, r9, r9, lsl ip
    140c:	012e3800 	teqeq	lr, r0, lsl #16
    1410:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1414:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1418:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    141c:	01000000 	mrseq	r0, (UNDEF: 0)
    1420:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1424:	0e030b13 	vmoveq.32	d3[0], r0
    1428:	01111755 	tsteq	r1, r5, asr r7
    142c:	00001710 	andeq	r1, r0, r0, lsl r7
    1430:	0b002402 	bleq	a440 <_Min_Stack_Size+0xa040>
    1434:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1438:	03000008 	movweq	r0, #8
    143c:	0b0b0024 	bleq	2c14d4 <_Min_Stack_Size+0x2c10d4>
    1440:	0e030b3e 	vmoveq.16	d3[0], r0
    1444:	16040000 	strne	r0, [r4], -r0
    1448:	3a0e0300 	bcc	382050 <_Min_Stack_Size+0x381c50>
    144c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1450:	05000013 	streq	r0, [r0, #-19]
    1454:	0b0b000f 	bleq	2c1498 <_Min_Stack_Size+0x2c1098>
    1458:	00001349 	andeq	r1, r0, r9, asr #6
    145c:	27011506 	strcs	r1, [r1, -r6, lsl #10]
    1460:	00130119 	andseq	r0, r3, r9, lsl r1
    1464:	00050700 	andeq	r0, r5, r0, lsl #14
    1468:	00001349 	andeq	r1, r0, r9, asr #6
    146c:	0b000f08 	bleq	5094 <_Min_Stack_Size+0x4c94>
    1470:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    1474:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    1478:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    147c:	01111927 	tsteq	r1, r7, lsr #18
    1480:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1484:	00194297 	mulseq	r9, r7, r2
    1488:	012e0a00 	teqeq	lr, r0, lsl #20
    148c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1490:	0b3b0b3a 	bleq	ec4180 <_Min_Stack_Size+0xec3d80>
    1494:	13491927 	movtne	r1, #39207	; 0x9927
    1498:	06120111 			; <UNDEFINED> instruction: 0x06120111
    149c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    14a0:	00130119 	andseq	r0, r3, r9, lsl r1
    14a4:	00050b00 	andeq	r0, r5, r0, lsl #22
    14a8:	0b3a0e03 	bleq	e84cbc <_Min_Stack_Size+0xe848bc>
    14ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    14b0:	00001702 	andeq	r1, r0, r2, lsl #14
    14b4:	0300050c 	movweq	r0, #1292	; 0x50c
    14b8:	3b0b3a0e 	blcc	2cfcf8 <_Min_Stack_Size+0x2cf8f8>
    14bc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    14c0:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
    14c4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    14c8:	0b3a0e03 	bleq	e84cdc <_Min_Stack_Size+0xe848dc>
    14cc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    14d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    14d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    14d8:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
    14dc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    14e0:	0b3a0e03 	bleq	e84cf4 <_Min_Stack_Size+0xe848f4>
    14e4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    14e8:	01111349 	tsteq	r1, r9, asr #6
    14ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    14f0:	00194297 	mulseq	r9, r7, r2
    14f4:	012e0f00 	teqeq	lr, r0, lsl #30
    14f8:	0b3a0e03 	bleq	e84d0c <_Min_Stack_Size+0xe8490c>
    14fc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1500:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1504:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1508:	00130119 	andseq	r0, r3, r9, lsl r1
    150c:	82891000 	addhi	r1, r9, #0
    1510:	01110001 	tsteq	r1, r1
    1514:	00001331 	andeq	r1, r0, r1, lsr r3
    1518:	3f012e11 	svccc	0x00012e11
    151c:	3a0e0319 	bcc	382188 <_Min_Stack_Size+0x381d88>
    1520:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1524:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1528:	97184006 	ldrls	r4, [r8, -r6]
    152c:	13011942 	movwne	r1, #6466	; 0x1942
    1530:	05120000 	ldreq	r0, [r2, #-0]
    1534:	3a0e0300 	bcc	38213c <_Min_Stack_Size+0x381d3c>
    1538:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    153c:	00170213 	andseq	r0, r7, r3, lsl r2
    1540:	82891300 	addhi	r1, r9, #0, 6
    1544:	01110001 	tsteq	r1, r1
    1548:	31194295 			; <UNDEFINED> instruction: 0x31194295
    154c:	14000013 	strne	r0, [r0], #-19
    1550:	01018289 	smlabbeq	r1, r9, r2, r8
    1554:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    1558:	00133119 	andseq	r3, r3, r9, lsl r1
    155c:	828a1500 	addhi	r1, sl, #0, 10
    1560:	18020001 	stmdane	r2, {r0}
    1564:	00184291 	mulseq	r8, r1, r2
    1568:	012e1600 	teqeq	lr, r0, lsl #12
    156c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1570:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1574:	13491927 	movtne	r1, #39207	; 0x9927
    1578:	06120111 			; <UNDEFINED> instruction: 0x06120111
    157c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1580:	00130119 	andseq	r0, r3, r9, lsl r1
    1584:	010b1700 	tsteq	fp, r0, lsl #14
    1588:	13011755 	movwne	r1, #5973	; 0x1755
    158c:	34180000 	ldrcc	r0, [r8], #-0
    1590:	3a0e0300 	bcc	382198 <_Min_Stack_Size+0x381d98>
    1594:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1598:	00180213 	andseq	r0, r8, r3, lsl r2
    159c:	00341900 	eorseq	r1, r4, r0, lsl #18
    15a0:	0b3a0e03 	bleq	e84db4 <_Min_Stack_Size+0xe849b4>
    15a4:	1349053b 	movtne	r0, #38203	; 0x953b
    15a8:	00000d1c 	andeq	r0, r0, ip, lsl sp
    15ac:	4900351a 	stmdbmi	r0, {r1, r3, r4, r8, sl, ip, sp}
    15b0:	1b000013 	blne	1604 <_Min_Stack_Size+0x1204>
    15b4:	13490026 	movtne	r0, #36902	; 0x9026
    15b8:	341c0000 	ldrcc	r0, [ip], #-0
    15bc:	3a0e0300 	bcc	3821c4 <_Min_Stack_Size+0x381dc4>
    15c0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    15c4:	00170213 	andseq	r0, r7, r3, lsl r2
    15c8:	00341d00 	eorseq	r1, r4, r0, lsl #26
    15cc:	0b3a0e03 	bleq	e84de0 <_Min_Stack_Size+0xe849e0>
    15d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    15d4:	00001802 	andeq	r1, r0, r2, lsl #16
    15d8:	0300341e 	movweq	r3, #1054	; 0x41e
    15dc:	3b0b3a0e 	blcc	2cfe1c <_Min_Stack_Size+0x2cfa1c>
    15e0:	1c13490b 	ldcne	9, cr4, [r3], {11}
    15e4:	1f00000d 	svcne	0x0000000d
    15e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    15ec:	0b3b0b3a 	bleq	ec42dc <_Min_Stack_Size+0xec3edc>
    15f0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    15f4:	0000193c 	andeq	r1, r0, ip, lsr r9
    15f8:	3f002e20 	svccc	0x00002e20
    15fc:	3a0e0319 	bcc	382268 <_Min_Stack_Size+0x381e68>
    1600:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1604:	3c134919 	ldccc	9, cr4, [r3], {25}
    1608:	00000019 	andeq	r0, r0, r9, lsl r0
    160c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    1610:	030b130e 	movweq	r1, #45838	; 0xb30e
    1614:	1117550e 	tstne	r7, lr, lsl #10
    1618:	00171001 	andseq	r1, r7, r1
    161c:	00160200 	andseq	r0, r6, r0, lsl #4
    1620:	0b3a0e03 	bleq	e84e34 <_Min_Stack_Size+0xe84a34>
    1624:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1628:	24030000 	strcs	r0, [r3], #-0
    162c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1630:	000e030b 	andeq	r0, lr, fp, lsl #6
    1634:	00240400 	eoreq	r0, r4, r0, lsl #8
    1638:	0b3e0b0b 	bleq	f8426c <_Min_Stack_Size+0xf83e6c>
    163c:	00000803 	andeq	r0, r0, r3, lsl #16
    1640:	0b000f05 	bleq	525c <_Min_Stack_Size+0x4e5c>
    1644:	0600000b 	streq	r0, [r0], -fp
    1648:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    164c:	0b3a0e03 	bleq	e84e60 <_Min_Stack_Size+0xe84a60>
    1650:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1654:	01111349 	tsteq	r1, r9, asr #6
    1658:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    165c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1660:	07000013 	smladeq	r0, r3, r0, r0
    1664:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1668:	0b3b0b3a 	bleq	ec4358 <_Min_Stack_Size+0xec3f58>
    166c:	17021349 	strne	r1, [r2, -r9, asr #6]
    1670:	34080000 	strcc	r0, [r8], #-0
    1674:	3a0e0300 	bcc	38227c <_Min_Stack_Size+0x381e7c>
    1678:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    167c:	00170213 	andseq	r0, r7, r3, lsl r2
    1680:	00340900 	eorseq	r0, r4, r0, lsl #18
    1684:	0b3a0e03 	bleq	e84e98 <_Min_Stack_Size+0xe84a98>
    1688:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    168c:	00001802 	andeq	r1, r0, r2, lsl #16
    1690:	0182890a 	orreq	r8, r2, sl, lsl #18
    1694:	31011100 	mrscc	r1, (UNDEF: 17)
    1698:	0b000013 	bleq	16ec <_Min_Stack_Size+0x12ec>
    169c:	0b0b000f 	bleq	2c16e0 <_Min_Stack_Size+0x2c12e0>
    16a0:	00001349 	andeq	r1, r0, r9, asr #6
    16a4:	3f012e0c 	svccc	0x00012e0c
    16a8:	3a0e0319 	bcc	382314 <_Min_Stack_Size+0x381f14>
    16ac:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    16b0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    16b4:	97184006 	ldrls	r4, [r8, -r6]
    16b8:	13011942 	movwne	r1, #6466	; 0x1942
    16bc:	050d0000 	streq	r0, [sp, #-0]
    16c0:	3a080300 	bcc	2022c8 <_Min_Stack_Size+0x201ec8>
    16c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    16c8:	00170213 	andseq	r0, r7, r3, lsl r2
    16cc:	002e0e00 	eoreq	r0, lr, r0, lsl #28
    16d0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    16d4:	0b3b0b3a 	bleq	ec43c4 <_Min_Stack_Size+0xec3fc4>
    16d8:	01111927 	tsteq	r1, r7, lsr #18
    16dc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    16e0:	00194297 	mulseq	r9, r7, r2
    16e4:	002e0f00 	eoreq	r0, lr, r0, lsl #30
    16e8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    16ec:	0b3b0b3a 	bleq	ec43dc <_Min_Stack_Size+0xec3fdc>
    16f0:	13491927 	movtne	r1, #39207	; 0x9927
    16f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    16f8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    16fc:	10000019 	andne	r0, r0, r9, lsl r0
    1700:	13490101 	movtne	r0, #37121	; 0x9101
    1704:	00001301 	andeq	r1, r0, r1, lsl #6
    1708:	49002111 	stmdbmi	r0, {r0, r4, r8, sp}
    170c:	00062f13 	andeq	r2, r6, r3, lsl pc
    1710:	002e1200 	eoreq	r1, lr, r0, lsl #4
    1714:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1718:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    171c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    1720:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    1724:	03193f00 	tsteq	r9, #0, 30
    1728:	3b0b3a0e 	blcc	2cff68 <_Min_Stack_Size+0x2cfb68>
    172c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1730:	00193c13 	andseq	r3, r9, r3, lsl ip
    1734:	002e1400 	eoreq	r1, lr, r0, lsl #8
    1738:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    173c:	0b3b0b3a 	bleq	ec442c <_Min_Stack_Size+0xec402c>
    1740:	13491927 	movtne	r1, #39207	; 0x9927
    1744:	0000193c 	andeq	r1, r0, ip, lsr r9
    1748:	01110100 	tsteq	r1, r0, lsl #2
    174c:	0b130e25 	bleq	4c4fe8 <_Min_Stack_Size+0x4c4be8>
    1750:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
    1754:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1758:	24020000 	strcs	r0, [r2], #-0
    175c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1760:	000e030b 	andeq	r0, lr, fp, lsl #6
    1764:	00160300 	andseq	r0, r6, r0, lsl #6
    1768:	0b3a0e03 	bleq	e84f7c <_Min_Stack_Size+0xe84b7c>
    176c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1770:	24040000 	strcs	r0, [r4], #-0
    1774:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1778:	0008030b 	andeq	r0, r8, fp, lsl #6
    177c:	01130500 	tsteq	r3, r0, lsl #10
    1780:	0b3a050b 	bleq	e82bb4 <_Min_Stack_Size+0xe827b4>
    1784:	1301053b 	movwne	r0, #5435	; 0x153b
    1788:	0d060000 	stceq	0, cr0, [r6, #-0]
    178c:	3a0e0300 	bcc	382394 <_Min_Stack_Size+0x381f94>
    1790:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1794:	000b3813 	andeq	r3, fp, r3, lsl r8
    1798:	000d0700 	andeq	r0, sp, r0, lsl #14
    179c:	0b3a0e03 	bleq	e84fb0 <_Min_Stack_Size+0xe84bb0>
    17a0:	1349053b 	movtne	r0, #38203	; 0x953b
    17a4:	00000538 	andeq	r0, r0, r8, lsr r5
    17a8:	03000d08 	movweq	r0, #3336	; 0xd08
    17ac:	3b0b3a08 	blcc	2cffd4 <_Min_Stack_Size+0x2cfbd4>
    17b0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    17b4:	09000005 	stmdbeq	r0, {r0, r2}
    17b8:	13490101 	movtne	r0, #37121	; 0x9101
    17bc:	00001301 	andeq	r1, r0, r1, lsl #6
    17c0:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
    17c4:	000b2f13 	andeq	r2, fp, r3, lsl pc
    17c8:	00350b00 	eorseq	r0, r5, r0, lsl #22
    17cc:	00001349 	andeq	r1, r0, r9, asr #6
    17d0:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
    17d4:	00052f13 	andeq	r2, r5, r3, lsl pc
    17d8:	00160d00 	andseq	r0, r6, r0, lsl #26
    17dc:	0b3a0e03 	bleq	e84ff0 <_Min_Stack_Size+0xe84bf0>
    17e0:	1349053b 	movtne	r0, #38203	; 0x953b
    17e4:	130e0000 	movwne	r0, #57344	; 0xe000
    17e8:	3a0b0b01 	bcc	2c43f4 <_Min_Stack_Size+0x2c3ff4>
    17ec:	01053b0b 	tsteq	r5, fp, lsl #22
    17f0:	0f000013 	svceq	0x00000013
    17f4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    17f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    17fc:	0b381349 	bleq	e06528 <_Min_Stack_Size+0xe06128>
    1800:	26100000 	ldrcs	r0, [r0], -r0
    1804:	00134900 	andseq	r4, r3, r0, lsl #18
    1808:	01041100 	mrseq	r1, (UNDEF: 20)
    180c:	0b3a0b0b 	bleq	e84440 <_Min_Stack_Size+0xe84040>
    1810:	1301053b 	movwne	r0, #5435	; 0x153b
    1814:	28120000 	ldmdacs	r2, {}	; <UNPREDICTABLE>
    1818:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    181c:	1300000d 	movwne	r0, #13
    1820:	0b0b0113 	bleq	2c1c74 <_Min_Stack_Size+0x2c1874>
    1824:	0b3b0b3a 	bleq	ec4514 <_Min_Stack_Size+0xec4114>
    1828:	00001301 	andeq	r1, r0, r1, lsl #6
    182c:	03000d14 	movweq	r0, #3348	; 0xd14
    1830:	3b0b3a0e 	blcc	2d0070 <_Min_Stack_Size+0x2cfc70>
    1834:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1838:	1500000b 	strne	r0, [r0, #-11]
    183c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1840:	0b3a0e03 	bleq	e85054 <_Min_Stack_Size+0xe84c54>
    1844:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1848:	06120111 			; <UNDEFINED> instruction: 0x06120111
    184c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1850:	00130119 	andseq	r0, r3, r9, lsl r1
    1854:	00051600 	andeq	r1, r5, r0, lsl #12
    1858:	0b3a0e03 	bleq	e8506c <_Min_Stack_Size+0xe84c6c>
    185c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1860:	00001702 	andeq	r1, r0, r2, lsl #14
    1864:	03003417 	movweq	r3, #1047	; 0x417
    1868:	3b0b3a0e 	blcc	2d00a8 <_Min_Stack_Size+0x2cfca8>
    186c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1870:	18000017 	stmdane	r0, {r0, r1, r2, r4}
    1874:	0b0b000f 	bleq	2c18b8 <_Min_Stack_Size+0x2c14b8>
    1878:	00001349 	andeq	r1, r0, r9, asr #6
    187c:	03000519 	movweq	r0, #1305	; 0x519
    1880:	3b0b3a0e 	blcc	2d00c0 <_Min_Stack_Size+0x2cfcc0>
    1884:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1888:	1a000018 	bne	18f0 <_Min_Stack_Size+0x14f0>
    188c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1890:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1894:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1898:	0000193c 	andeq	r1, r0, ip, lsr r9
    189c:	01110100 	tsteq	r1, r0, lsl #2
    18a0:	0b130e25 	bleq	4c513c <_Min_Stack_Size+0x4c4d3c>
    18a4:	17550e03 	ldrbne	r0, [r5, -r3, lsl #28]
    18a8:	17100111 			; <UNDEFINED> instruction: 0x17100111
    18ac:	24020000 	strcs	r0, [r2], #-0
    18b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    18b4:	000e030b 	andeq	r0, lr, fp, lsl #6
    18b8:	00160300 	andseq	r0, r6, r0, lsl #6
    18bc:	0b3a0e03 	bleq	e850d0 <_Min_Stack_Size+0xe84cd0>
    18c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    18c4:	24040000 	strcs	r0, [r4], #-0
    18c8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    18cc:	0008030b 	andeq	r0, r8, fp, lsl #6
    18d0:	00350500 	eorseq	r0, r5, r0, lsl #10
    18d4:	00001349 	andeq	r1, r0, r9, asr #6
    18d8:	49010106 	stmdbmi	r1, {r1, r2, r8}
    18dc:	00130113 	andseq	r0, r3, r3, lsl r1
    18e0:	00210700 	eoreq	r0, r1, r0, lsl #14
    18e4:	0b2f1349 	bleq	bc6610 <_Min_Stack_Size+0xbc6210>
    18e8:	04080000 	streq	r0, [r8], #-0
    18ec:	3a0b0b01 	bcc	2c44f8 <_Min_Stack_Size+0x2c40f8>
    18f0:	01053b0b 	tsteq	r5, fp, lsl #22
    18f4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    18f8:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    18fc:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1900:	0300160a 	movweq	r1, #1546	; 0x60a
    1904:	3b0b3a0e 	blcc	2d0144 <_Min_Stack_Size+0x2cfd44>
    1908:	00134905 	andseq	r4, r3, r5, lsl #18
    190c:	01130b00 	tsteq	r3, r0, lsl #22
    1910:	0b3a0b0b 	bleq	e84544 <_Min_Stack_Size+0xe84144>
    1914:	1301053b 	movwne	r0, #5435	; 0x153b
    1918:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    191c:	3a0e0300 	bcc	382524 <_Min_Stack_Size+0x382124>
    1920:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1924:	000b3813 	andeq	r3, fp, r3, lsl r8
    1928:	000d0d00 	andeq	r0, sp, r0, lsl #26
    192c:	0b3a0803 	bleq	e83940 <_Min_Stack_Size+0xe83540>
    1930:	1349053b 	movtne	r0, #38203	; 0x953b
    1934:	00000b38 	andeq	r0, r0, r8, lsr fp
    1938:	0b01040e 	bleq	42978 <_Min_Stack_Size+0x42578>
    193c:	3b0b3a0b 	blcc	2d0170 <_Min_Stack_Size+0x2cfd70>
    1940:	0013010b 	andseq	r0, r3, fp, lsl #2
    1944:	01130f00 	tsteq	r3, r0, lsl #30
    1948:	0b3a0b0b 	bleq	e8457c <_Min_Stack_Size+0xe8417c>
    194c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1950:	0d100000 	ldceq	0, cr0, [r0, #-0]
    1954:	3a0e0300 	bcc	38255c <_Min_Stack_Size+0x38215c>
    1958:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    195c:	000b3813 	andeq	r3, fp, r3, lsl r8
    1960:	012e1100 	teqeq	lr, r0, lsl #2
    1964:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1968:	0b3b0b3a 	bleq	ec4658 <_Min_Stack_Size+0xec4258>
    196c:	01111927 	tsteq	r1, r7, lsr #18
    1970:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1974:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1978:	12000013 	andne	r0, r0, #19
    197c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1980:	0b3b0b3a 	bleq	ec4670 <_Min_Stack_Size+0xec4270>
    1984:	17021349 	strne	r1, [r2, -r9, asr #6]
    1988:	89130000 	ldmdbhi	r3, {}	; <UNPREDICTABLE>
    198c:	11010182 	smlabbne	r1, r2, r1, r0
    1990:	01133101 	tsteq	r3, r1, lsl #2
    1994:	14000013 	strne	r0, [r0], #-19
    1998:	0001828a 	andeq	r8, r1, sl, lsl #5
    199c:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    19a0:	15000018 	strne	r0, [r0, #-24]
    19a4:	01018289 	smlabbeq	r1, r9, r2, r8
    19a8:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    19ac:	01133119 	tsteq	r3, r9, lsl r1
    19b0:	16000013 			; <UNDEFINED> instruction: 0x16000013
    19b4:	01018289 	smlabbeq	r1, r9, r2, r8
    19b8:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    19bc:	00133119 	andseq	r3, r3, r9, lsl r1
    19c0:	000f1700 	andeq	r1, pc, r0, lsl #14
    19c4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    19c8:	05180000 	ldreq	r0, [r8, #-0]
    19cc:	3a0e0300 	bcc	3825d4 <_Min_Stack_Size+0x3821d4>
    19d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    19d4:	00180213 	andseq	r0, r8, r3, lsl r2
    19d8:	00341900 	eorseq	r1, r4, r0, lsl #18
    19dc:	0b3a0e03 	bleq	e851f0 <_Min_Stack_Size+0xe84df0>
    19e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    19e4:	00001702 	andeq	r1, r0, r2, lsl #14
    19e8:	0300341a 	movweq	r3, #1050	; 0x41a
    19ec:	3b0b3a08 	blcc	2d0214 <_Min_Stack_Size+0x2cfe14>
    19f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    19f4:	1b000017 	blne	1a58 <_Min_Stack_Size+0x1658>
    19f8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    19fc:	0b3a0e03 	bleq	e85210 <_Min_Stack_Size+0xe84e10>
    1a00:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1a04:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1a08:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1a0c:	00130119 	andseq	r0, r3, r9, lsl r1
    1a10:	00051c00 	andeq	r1, r5, r0, lsl #24
    1a14:	0b3a0e03 	bleq	e85228 <_Min_Stack_Size+0xe84e28>
    1a18:	1349053b 	movtne	r0, #38203	; 0x953b
    1a1c:	00001802 	andeq	r1, r0, r2, lsl #16
    1a20:	0300341d 	movweq	r3, #1053	; 0x41d
    1a24:	3b0b3a08 	blcc	2d024c <_Min_Stack_Size+0x2cfe4c>
    1a28:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1a2c:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
    1a30:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1a34:	0b3a0e03 	bleq	e85248 <_Min_Stack_Size+0xe84e48>
    1a38:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1a3c:	01111349 	tsteq	r1, r9, asr #6
    1a40:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1a44:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1a48:	1f000013 	svcne	0x00000013
    1a4c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1a50:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1a54:	17021349 	strne	r1, [r2, -r9, asr #6]
    1a58:	34200000 	strtcc	r0, [r0], #-0
    1a5c:	3a0e0300 	bcc	382664 <_Min_Stack_Size+0x382264>
    1a60:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a64:	00170213 	andseq	r0, r7, r3, lsl r2
    1a68:	00342100 	eorseq	r2, r4, r0, lsl #2
    1a6c:	0b3a0e03 	bleq	e85280 <_Min_Stack_Size+0xe84e80>
    1a70:	1349053b 	movtne	r0, #38203	; 0x953b
    1a74:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1a78:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
    1a7c:	03193f01 	tsteq	r9, #1, 30
    1a80:	3b0b3a0e 	blcc	2d02c0 <_Min_Stack_Size+0x2cfec0>
    1a84:	3c192705 	ldccc	7, cr2, [r9], {5}
    1a88:	23000019 	movwcs	r0, #25
    1a8c:	13490005 	movtne	r0, #36869	; 0x9005
    1a90:	01000000 	mrseq	r0, (UNDEF: 0)
    1a94:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1a98:	0e030b13 	vmoveq.32	d3[0], r0
    1a9c:	01111755 	tsteq	r1, r5, asr r7
    1aa0:	00001710 	andeq	r1, r0, r0, lsl r7
    1aa4:	0b002402 	bleq	aab4 <_Min_Stack_Size+0xa6b4>
    1aa8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1aac:	0300000e 	movweq	r0, #14
    1ab0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1ab4:	0b3b0b3a 	bleq	ec47a4 <_Min_Stack_Size+0xec43a4>
    1ab8:	00001349 	andeq	r1, r0, r9, asr #6
    1abc:	0b002404 	bleq	aad4 <_Min_Stack_Size+0xa6d4>
    1ac0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1ac4:	05000008 	streq	r0, [r0, #-8]
    1ac8:	13490035 	movtne	r0, #36917	; 0x9035
    1acc:	01060000 	mrseq	r0, (UNDEF: 6)
    1ad0:	01134901 	tsteq	r3, r1, lsl #18
    1ad4:	07000013 	smladeq	r0, r3, r0, r0
    1ad8:	13490021 	movtne	r0, #36897	; 0x9021
    1adc:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1ae0:	0b010408 	bleq	42b08 <_Min_Stack_Size+0x42708>
    1ae4:	3b0b3a0b 	blcc	2d0318 <_Min_Stack_Size+0x2cff18>
    1ae8:	00130105 	andseq	r0, r3, r5, lsl #2
    1aec:	00280900 	eoreq	r0, r8, r0, lsl #18
    1af0:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    1af4:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    1af8:	1c080300 	stcne	3, cr0, [r8], {-0}
    1afc:	0b00000d 	bleq	1b38 <_Min_Stack_Size+0x1738>
    1b00:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1b04:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1b08:	00001349 	andeq	r1, r0, r9, asr #6
    1b0c:	0b01130c 	bleq	46744 <_Min_Stack_Size+0x46344>
    1b10:	3b0b3a0b 	blcc	2d0344 <_Min_Stack_Size+0x2cff44>
    1b14:	00130105 	andseq	r0, r3, r5, lsl #2
    1b18:	000d0d00 	andeq	r0, sp, r0, lsl #26
    1b1c:	0b3a0803 	bleq	e83b30 <_Min_Stack_Size+0xe83730>
    1b20:	1349053b 	movtne	r0, #38203	; 0x953b
    1b24:	00000b38 	andeq	r0, r0, r8, lsr fp
    1b28:	03000d0e 	movweq	r0, #3342	; 0xd0e
    1b2c:	3b0b3a0e 	blcc	2d036c <_Min_Stack_Size+0x2cff6c>
    1b30:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1b34:	0f00000b 	svceq	0x0000000b
    1b38:	0b0b0113 	bleq	2c1f8c <_Min_Stack_Size+0x2c1b8c>
    1b3c:	0b3b0b3a 	bleq	ec482c <_Min_Stack_Size+0xec442c>
    1b40:	00001301 	andeq	r1, r0, r1, lsl #6
    1b44:	03000d10 	movweq	r0, #3344	; 0xd10
    1b48:	3b0b3a0e 	blcc	2d0388 <_Min_Stack_Size+0x2cff88>
    1b4c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1b50:	1100000b 	tstne	r0, fp
    1b54:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1b58:	0b3a0e03 	bleq	e8536c <_Min_Stack_Size+0xe84f6c>
    1b5c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1b60:	0b201349 	bleq	80688c <_Min_Stack_Size+0x80648c>
    1b64:	00001301 	andeq	r1, r0, r1, lsl #6
    1b68:	03000512 	movweq	r0, #1298	; 0x512
    1b6c:	3b0b3a0e 	blcc	2d03ac <_Min_Stack_Size+0x2cffac>
    1b70:	00134905 	andseq	r4, r3, r5, lsl #18
    1b74:	00341300 	eorseq	r1, r4, r0, lsl #6
    1b78:	0b3a0803 	bleq	e83b8c <_Min_Stack_Size+0xe8378c>
    1b7c:	1349053b 	movtne	r0, #38203	; 0x953b
    1b80:	34140000 	ldrcc	r0, [r4], #-0
    1b84:	3a0e0300 	bcc	38278c <_Min_Stack_Size+0x38238c>
    1b88:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b8c:	15000013 	strne	r0, [r0, #-19]
    1b90:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1b94:	0b3a0e03 	bleq	e853a8 <_Min_Stack_Size+0xe84fa8>
    1b98:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1b9c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1ba0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1ba4:	16000019 			; <UNDEFINED> instruction: 0x16000019
    1ba8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1bac:	0b3a0e03 	bleq	e853c0 <_Min_Stack_Size+0xe84fc0>
    1bb0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1bb4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1bb8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1bbc:	00130119 	andseq	r0, r3, r9, lsl r1
    1bc0:	00051700 	andeq	r1, r5, r0, lsl #14
    1bc4:	0b3a0e03 	bleq	e853d8 <_Min_Stack_Size+0xe84fd8>
    1bc8:	1349053b 	movtne	r0, #38203	; 0x953b
    1bcc:	00001802 	andeq	r1, r0, r2, lsl #16
    1bd0:	3f012e18 	svccc	0x00012e18
    1bd4:	3a0e0319 	bcc	382840 <_Min_Stack_Size+0x382440>
    1bd8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1bdc:	11134919 	tstne	r3, r9, lsl r9
    1be0:	40061201 	andmi	r1, r6, r1, lsl #4
    1be4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1be8:	00001301 	andeq	r1, r0, r1, lsl #6
    1bec:	03003419 	movweq	r3, #1049	; 0x419
    1bf0:	3b0b3a0e 	blcc	2d0430 <_Min_Stack_Size+0x2d0030>
    1bf4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1bf8:	1a000018 	bne	1c60 <_Min_Stack_Size+0x1860>
    1bfc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1c00:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1c04:	17021349 	strne	r1, [r2, -r9, asr #6]
    1c08:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
    1c0c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1c10:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    1c14:	0105590b 	tsteq	r5, fp, lsl #18
    1c18:	1c000013 	stcne	0, cr0, [r0], {19}
    1c1c:	13310005 	teqne	r1, #5
    1c20:	00000b1c 	andeq	r0, r0, ip, lsl fp
    1c24:	55010b1d 	strpl	r0, [r1, #-2845]	; 0xb1d
    1c28:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
    1c2c:	13310034 	teqne	r1, #52	; 0x34
    1c30:	00001702 	andeq	r1, r0, r2, lsl #14
    1c34:	31011d1f 	tstcc	r1, pc, lsl sp
    1c38:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1c3c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1c40:	20000005 	andcs	r0, r0, r5
    1c44:	13310005 	teqne	r1, #5
    1c48:	00001702 	andeq	r1, r0, r2, lsl #14
    1c4c:	11010b21 	tstne	r1, r1, lsr #22
    1c50:	00061201 	andeq	r1, r6, r1, lsl #4
    1c54:	00052200 	andeq	r2, r5, r0, lsl #4
    1c58:	0b3a0e03 	bleq	e8546c <_Min_Stack_Size+0xe8506c>
    1c5c:	1349053b 	movtne	r0, #38203	; 0x953b
    1c60:	00001702 	andeq	r1, r0, r2, lsl #14
    1c64:	3f002e23 	svccc	0x00002e23
    1c68:	3a0e0319 	bcc	3828d4 <_Min_Stack_Size+0x3824d4>
    1c6c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1c70:	11134919 	tstne	r3, r9, lsl r9
    1c74:	40061201 	andmi	r1, r6, r1, lsl #4
    1c78:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1c7c:	34240000 	strtcc	r0, [r4], #-0
    1c80:	3a080300 	bcc	202888 <_Min_Stack_Size+0x202488>
    1c84:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c88:	00170213 	andseq	r0, r7, r3, lsl r2
    1c8c:	000f2500 	andeq	r2, pc, r0, lsl #10
    1c90:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1c94:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
    1c98:	11133101 	tstne	r3, r1, lsl #2
    1c9c:	40061201 	andmi	r1, r6, r1, lsl #4
    1ca0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1ca4:	00001301 	andeq	r1, r0, r1, lsl #6
    1ca8:	3f002e27 	svccc	0x00002e27
    1cac:	3a0e0319 	bcc	382918 <_Min_Stack_Size+0x382518>
    1cb0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1cb4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1cb8:	97184006 	ldrls	r4, [r8, -r6]
    1cbc:	00001942 	andeq	r1, r0, r2, asr #18
    1cc0:	03003428 	movweq	r3, #1064	; 0x428
    1cc4:	3b0b3a0e 	blcc	2d0504 <_Min_Stack_Size+0x2d0104>
    1cc8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1ccc:	29000018 	stmdbcs	r0, {r3, r4}
    1cd0:	13490026 	movtne	r0, #36902	; 0x9026
    1cd4:	342a0000 	strtcc	r0, [sl], #-0
    1cd8:	3a0e0300 	bcc	3828e0 <_Min_Stack_Size+0x3824e0>
    1cdc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ce0:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1ce4:	00000019 	andeq	r0, r0, r9, lsl r0
    1ce8:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    1cec:	030b130e 	movweq	r1, #45838	; 0xb30e
    1cf0:	1117550e 	tstne	r7, lr, lsl #10
    1cf4:	00171001 	andseq	r1, r7, r1
    1cf8:	00240200 	eoreq	r0, r4, r0, lsl #4
    1cfc:	0b3e0b0b 	bleq	f84930 <_Min_Stack_Size+0xf84530>
    1d00:	00000e03 	andeq	r0, r0, r3, lsl #28
    1d04:	03001603 	movweq	r1, #1539	; 0x603
    1d08:	3b0b3a0e 	blcc	2d0548 <_Min_Stack_Size+0x2d0148>
    1d0c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1d10:	00240400 	eoreq	r0, r4, r0, lsl #8
    1d14:	0b3e0b0b 	bleq	f84948 <_Min_Stack_Size+0xf84548>
    1d18:	00000803 	andeq	r0, r0, r3, lsl #16
    1d1c:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
    1d20:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1d24:	0b0b0104 	bleq	2c213c <_Min_Stack_Size+0x2c1d3c>
    1d28:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1d2c:	00001301 	andeq	r1, r0, r1, lsl #6
    1d30:	03002807 	movweq	r2, #2055	; 0x807
    1d34:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    1d38:	00280800 	eoreq	r0, r8, r0, lsl #16
    1d3c:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    1d40:	16090000 	strne	r0, [r9], -r0
    1d44:	3a0e0300 	bcc	38294c <_Min_Stack_Size+0x38254c>
    1d48:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d4c:	0a000013 	beq	1da0 <_Min_Stack_Size+0x19a0>
    1d50:	0b0b0113 	bleq	2c21a4 <_Min_Stack_Size+0x2c1da4>
    1d54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1d58:	00001301 	andeq	r1, r0, r1, lsl #6
    1d5c:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1d60:	3b0b3a08 	blcc	2d0588 <_Min_Stack_Size+0x2d0188>
    1d64:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1d68:	0c00000b 	stceq	0, cr0, [r0], {11}
    1d6c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1d70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1d74:	0b381349 	bleq	e06aa0 <_Min_Stack_Size+0xe066a0>
    1d78:	130d0000 	movwne	r0, #53248	; 0xd000
    1d7c:	3a0b0b01 	bcc	2c4988 <_Min_Stack_Size+0x2c4588>
    1d80:	010b3b0b 	tsteq	fp, fp, lsl #22
    1d84:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1d88:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1d8c:	0b3b0b3a 	bleq	ec4a7c <_Min_Stack_Size+0xec467c>
    1d90:	0b381349 	bleq	e06abc <_Min_Stack_Size+0xe066bc>
    1d94:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    1d98:	03193f01 	tsteq	r9, #1, 30
    1d9c:	3b0b3a0e 	blcc	2d05dc <_Min_Stack_Size+0x2d01dc>
    1da0:	1119270b 	tstne	r9, fp, lsl #14
    1da4:	40061201 	andmi	r1, r6, r1, lsl #4
    1da8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1dac:	00001301 	andeq	r1, r0, r1, lsl #6
    1db0:	03000510 	movweq	r0, #1296	; 0x510
    1db4:	3b0b3a0e 	blcc	2d05f4 <_Min_Stack_Size+0x2d01f4>
    1db8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1dbc:	11000017 	tstne	r0, r7, lsl r0
    1dc0:	01018289 	smlabbeq	r1, r9, r2, r8
    1dc4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1dc8:	00001301 	andeq	r1, r0, r1, lsl #6
    1dcc:	01828a12 	orreq	r8, r2, r2, lsl sl
    1dd0:	91180200 	tstls	r8, r0, lsl #4
    1dd4:	00001842 	andeq	r1, r0, r2, asr #16
    1dd8:	01828913 	orreq	r8, r2, r3, lsl r9
    1ddc:	95011101 	strls	r1, [r1, #-257]	; 0x101
    1de0:	13311942 	teqne	r1, #1081344	; 0x108000
    1de4:	00001301 	andeq	r1, r0, r1, lsl #6
    1de8:	01828914 	orreq	r8, r2, r4, lsl r9
    1dec:	95011101 	strls	r1, [r1, #-257]	; 0x101
    1df0:	13311942 	teqne	r1, #1081344	; 0x108000
    1df4:	0f150000 	svceq	0x00150000
    1df8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1dfc:	16000013 			; <UNDEFINED> instruction: 0x16000013
    1e00:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1e04:	0b3b0b3a 	bleq	ec4af4 <_Min_Stack_Size+0xec46f4>
    1e08:	17021349 	strne	r1, [r2, -r9, asr #6]
    1e0c:	34170000 	ldrcc	r0, [r7], #-0
    1e10:	3a0e0300 	bcc	382a18 <_Min_Stack_Size+0x382618>
    1e14:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e18:	00180213 	andseq	r0, r8, r3, lsl r2
    1e1c:	82891800 	addhi	r1, r9, #0, 16
    1e20:	01110101 	tsteq	r1, r1, lsl #2
    1e24:	00001331 	andeq	r1, r0, r1, lsr r3
    1e28:	3f012e19 	svccc	0x00012e19
    1e2c:	3a0e0319 	bcc	382a98 <_Min_Stack_Size+0x382698>
    1e30:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1e34:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1e38:	97184006 	ldrls	r4, [r8, -r6]
    1e3c:	13011942 	movwne	r1, #6466	; 0x1942
    1e40:	051a0000 	ldreq	r0, [sl, #-0]
    1e44:	3a0e0300 	bcc	382a4c <_Min_Stack_Size+0x38264c>
    1e48:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e4c:	00180213 	andseq	r0, r8, r3, lsl r2
    1e50:	00051b00 	andeq	r1, r5, r0, lsl #22
    1e54:	0b3a0e03 	bleq	e85668 <_Min_Stack_Size+0xe85268>
    1e58:	1349053b 	movtne	r0, #38203	; 0x953b
    1e5c:	00001702 	andeq	r1, r0, r2, lsl #14
    1e60:	0300341c 	movweq	r3, #1052	; 0x41c
    1e64:	3b0b3a0e 	blcc	2d06a4 <_Min_Stack_Size+0x2d02a4>
    1e68:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1e6c:	1d000017 	stcne	0, cr0, [r0, #-92]	; 0xffffffa4
    1e70:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1e74:	0b3a0e03 	bleq	e85688 <_Min_Stack_Size+0xe85288>
    1e78:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1e7c:	01111349 	tsteq	r1, r9, asr #6
    1e80:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1e84:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1e88:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    1e8c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1e90:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1e94:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1e98:	341f0000 	ldrcc	r0, [pc], #-0	; 1ea0 <_Min_Stack_Size+0x1aa0>
    1e9c:	3a0e0300 	bcc	382aa4 <_Min_Stack_Size+0x3826a4>
    1ea0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ea4:	20000013 	andcs	r0, r0, r3, lsl r0
    1ea8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1eac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1eb0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1eb4:	0000193c 	andeq	r1, r0, ip, lsr r9
    1eb8:	3f012e21 	svccc	0x00012e21
    1ebc:	3a0e0319 	bcc	382b28 <_Min_Stack_Size+0x382728>
    1ec0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1ec4:	01193c19 	tsteq	r9, r9, lsl ip
    1ec8:	22000013 	andcs	r0, r0, #19
    1ecc:	13490005 	movtne	r0, #36869	; 0x9005
    1ed0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ed4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1ed8:	0e030b13 	vmoveq.32	d3[0], r0
    1edc:	01111755 	tsteq	r1, r5, asr r7
    1ee0:	00001710 	andeq	r1, r0, r0, lsl r7
    1ee4:	0b002402 	bleq	aef4 <_Min_Stack_Size+0xaaf4>
    1ee8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1eec:	0300000e 	movweq	r0, #14
    1ef0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1ef4:	0b3b0b3a 	bleq	ec4be4 <_Min_Stack_Size+0xec47e4>
    1ef8:	00001349 	andeq	r1, r0, r9, asr #6
    1efc:	0b002404 	bleq	af14 <_Min_Stack_Size+0xab14>
    1f00:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1f04:	05000008 	streq	r0, [r0, #-8]
    1f08:	13490035 	movtne	r0, #36917	; 0x9035
    1f0c:	01060000 	mrseq	r0, (UNDEF: 6)
    1f10:	01134901 	tsteq	r3, r1, lsl #18
    1f14:	07000013 	smladeq	r0, r3, r0, r0
    1f18:	13490021 	movtne	r0, #36897	; 0x9021
    1f1c:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1f20:	0b010408 	bleq	42f48 <_Min_Stack_Size+0x42b48>
    1f24:	3b0b3a0b 	blcc	2d0758 <_Min_Stack_Size+0x2d0358>
    1f28:	00130105 	andseq	r0, r3, r5, lsl #2
    1f2c:	00280900 	eoreq	r0, r8, r0, lsl #18
    1f30:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    1f34:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    1f38:	1c080300 	stcne	3, cr0, [r8], {-0}
    1f3c:	0b00000d 	bleq	1f78 <_Min_Stack_Size+0x1b78>
    1f40:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1f44:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1f48:	00001349 	andeq	r1, r0, r9, asr #6
    1f4c:	0b01130c 	bleq	46b84 <_Min_Stack_Size+0x46784>
    1f50:	3b0b3a0b 	blcc	2d0784 <_Min_Stack_Size+0x2d0384>
    1f54:	00130105 	andseq	r0, r3, r5, lsl #2
    1f58:	000d0d00 	andeq	r0, sp, r0, lsl #26
    1f5c:	0b3a0e03 	bleq	e85770 <_Min_Stack_Size+0xe85370>
    1f60:	1349053b 	movtne	r0, #38203	; 0x953b
    1f64:	00000b38 	andeq	r0, r0, r8, lsr fp
    1f68:	03000d0e 	movweq	r0, #3342	; 0xd0e
    1f6c:	3b0b3a08 	blcc	2d0794 <_Min_Stack_Size+0x2d0394>
    1f70:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1f74:	0f00000b 	svceq	0x0000000b
    1f78:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1f7c:	0b3a0e03 	bleq	e85790 <_Min_Stack_Size+0xe85390>
    1f80:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1f84:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1f88:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1f8c:	00130119 	andseq	r0, r3, r9, lsl r1
    1f90:	82891000 	addhi	r1, r9, #0
    1f94:	01110101 	tsteq	r1, r1, lsl #2
    1f98:	13011331 	movwne	r1, #4913	; 0x1331
    1f9c:	8a110000 	bhi	441fa4 <_Min_Stack_Size+0x441ba4>
    1fa0:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    1fa4:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    1fa8:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
    1fac:	11010182 	smlabbne	r1, r2, r1, r0
    1fb0:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    1fb4:	00001331 	andeq	r1, r0, r1, lsr r3
    1fb8:	03000513 	movweq	r0, #1299	; 0x513
    1fbc:	3b0b3a0e 	blcc	2d07fc <_Min_Stack_Size+0x2d03fc>
    1fc0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1fc4:	14000018 	strne	r0, [r0], #-24
    1fc8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1fcc:	0b3b0b3a 	bleq	ec4cbc <_Min_Stack_Size+0xec48bc>
    1fd0:	17021349 	strne	r1, [r2, -r9, asr #6]
    1fd4:	34150000 	ldrcc	r0, [r5], #-0
    1fd8:	3a080300 	bcc	202be0 <_Min_Stack_Size+0x2027e0>
    1fdc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1fe0:	00170213 	andseq	r0, r7, r3, lsl r2
    1fe4:	012e1600 	teqeq	lr, r0, lsl #12
    1fe8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1fec:	0b3b0b3a 	bleq	ec4cdc <_Min_Stack_Size+0xec48dc>
    1ff0:	13491927 	movtne	r1, #39207	; 0x9927
    1ff4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1ff8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1ffc:	00130119 	andseq	r0, r3, r9, lsl r1
    2000:	00341700 	eorseq	r1, r4, r0, lsl #14
    2004:	0b3a0e03 	bleq	e85818 <_Min_Stack_Size+0xe85418>
    2008:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    200c:	00001702 	andeq	r1, r0, r2, lsl #14
    2010:	03003418 	movweq	r3, #1048	; 0x418
    2014:	3b0b3a0e 	blcc	2d0854 <_Min_Stack_Size+0x2d0454>
    2018:	3f134905 	svccc	0x00134905
    201c:	00193c19 	andseq	r3, r9, r9, lsl ip
    2020:	012e1900 	teqeq	lr, r0, lsl #18
    2024:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2028:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    202c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    2030:	051a0000 	ldreq	r0, [sl, #-0]
    2034:	00134900 	andseq	r4, r3, r0, lsl #18
    2038:	11010000 	mrsne	r0, (UNDEF: 1)
    203c:	130e2501 	movwne	r2, #58625	; 0xe501
    2040:	550e030b 	strpl	r0, [lr, #-779]	; 0x30b
    2044:	10011117 	andne	r1, r1, r7, lsl r1
    2048:	02000017 	andeq	r0, r0, #23
    204c:	0b0b0024 	bleq	2c20e4 <_Min_Stack_Size+0x2c1ce4>
    2050:	0e030b3e 	vmoveq.16	d3[0], r0
    2054:	16030000 	strne	r0, [r3], -r0
    2058:	3a0e0300 	bcc	382c60 <_Min_Stack_Size+0x382860>
    205c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2060:	04000013 	streq	r0, [r0], #-19
    2064:	0b0b0024 	bleq	2c20fc <_Min_Stack_Size+0x2c1cfc>
    2068:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    206c:	35050000 	strcc	r0, [r5, #-0]
    2070:	00134900 	andseq	r4, r3, r0, lsl #18
    2074:	01040600 	tsteq	r4, r0, lsl #12
    2078:	0b3a0b0b 	bleq	e84cac <_Min_Stack_Size+0xe848ac>
    207c:	1301053b 	movwne	r0, #5435	; 0x153b
    2080:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
    2084:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    2088:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    208c:	08030028 	stmdaeq	r3, {r3, r5}
    2090:	00000d1c 	andeq	r0, r0, ip, lsl sp
    2094:	03001609 	movweq	r1, #1545	; 0x609
    2098:	3b0b3a0e 	blcc	2d08d8 <_Min_Stack_Size+0x2d04d8>
    209c:	00134905 	andseq	r4, r3, r5, lsl #18
    20a0:	01130a00 	tsteq	r3, r0, lsl #20
    20a4:	0b3a0b0b 	bleq	e84cd8 <_Min_Stack_Size+0xe848d8>
    20a8:	1301053b 	movwne	r0, #5435	; 0x153b
    20ac:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    20b0:	3a080300 	bcc	202cb8 <_Min_Stack_Size+0x2028b8>
    20b4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    20b8:	000b3813 	andeq	r3, fp, r3, lsl r8
    20bc:	000d0c00 	andeq	r0, sp, r0, lsl #24
    20c0:	0b3a0e03 	bleq	e858d4 <_Min_Stack_Size+0xe854d4>
    20c4:	1349053b 	movtne	r0, #38203	; 0x953b
    20c8:	00000b38 	andeq	r0, r0, r8, lsr fp
    20cc:	0b01130d 	bleq	46d08 <_Min_Stack_Size+0x46908>
    20d0:	3b0b3a0b 	blcc	2d0904 <_Min_Stack_Size+0x2d0504>
    20d4:	0013010b 	andseq	r0, r3, fp, lsl #2
    20d8:	000d0e00 	andeq	r0, sp, r0, lsl #28
    20dc:	0b3a0e03 	bleq	e858f0 <_Min_Stack_Size+0xe854f0>
    20e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    20e4:	00000b38 	andeq	r0, r0, r8, lsr fp
    20e8:	3f012e0f 	svccc	0x00012e0f
    20ec:	3a0e0319 	bcc	382d58 <_Min_Stack_Size+0x382958>
    20f0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    20f4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    20f8:	97184006 	ldrls	r4, [r8, -r6]
    20fc:	13011942 	movwne	r1, #6466	; 0x1942
    2100:	05100000 	ldreq	r0, [r0, #-0]
    2104:	3a0e0300 	bcc	382d0c <_Min_Stack_Size+0x38290c>
    2108:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    210c:	00170213 	andseq	r0, r7, r3, lsl r2
    2110:	82891100 	addhi	r1, r9, #0, 2
    2114:	01110101 	tsteq	r1, r1, lsl #2
    2118:	13011331 	movwne	r1, #4913	; 0x1331
    211c:	8a120000 	bhi	482124 <_Min_Stack_Size+0x481d24>
    2120:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    2124:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    2128:	89130000 	ldmdbhi	r3, {}	; <UNPREDICTABLE>
    212c:	11010182 	smlabbne	r1, r2, r1, r0
    2130:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    2134:	13011331 	movwne	r1, #4913	; 0x1331
    2138:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
    213c:	11010182 	smlabbne	r1, r2, r1, r0
    2140:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    2144:	00001331 	andeq	r1, r0, r1, lsr r3
    2148:	0b000f15 	bleq	5da4 <_Min_Stack_Size+0x59a4>
    214c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2150:	00341600 	eorseq	r1, r4, r0, lsl #12
    2154:	0b3a0e03 	bleq	e85968 <_Min_Stack_Size+0xe85568>
    2158:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    215c:	00001702 	andeq	r1, r0, r2, lsl #14
    2160:	03003417 	movweq	r3, #1047	; 0x417
    2164:	3b0b3a0e 	blcc	2d09a4 <_Min_Stack_Size+0x2d05a4>
    2168:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    216c:	18000018 	stmdane	r0, {r3, r4}
    2170:	01018289 	smlabbeq	r1, r9, r2, r8
    2174:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2178:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    217c:	03193f01 	tsteq	r9, #1, 30
    2180:	3b0b3a0e 	blcc	2d09c0 <_Min_Stack_Size+0x2d05c0>
    2184:	11192705 	tstne	r9, r5, lsl #14
    2188:	40061201 	andmi	r1, r6, r1, lsl #4
    218c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2190:	00001301 	andeq	r1, r0, r1, lsl #6
    2194:	0300051a 	movweq	r0, #1306	; 0x51a
    2198:	3b0b3a0e 	blcc	2d09d8 <_Min_Stack_Size+0x2d05d8>
    219c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    21a0:	1b000018 	blne	2208 <_Min_Stack_Size+0x1e08>
    21a4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    21a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    21ac:	17021349 	strne	r1, [r2, -r9, asr #6]
    21b0:	341c0000 	ldrcc	r0, [ip], #-0
    21b4:	3a0e0300 	bcc	382dbc <_Min_Stack_Size+0x3829bc>
    21b8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    21bc:	00170213 	andseq	r0, r7, r3, lsl r2
    21c0:	012e1d00 	teqeq	lr, r0, lsl #26
    21c4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    21c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    21cc:	13491927 	movtne	r1, #39207	; 0x9927
    21d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    21d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    21d8:	00130119 	andseq	r0, r3, r9, lsl r1
    21dc:	00341e00 	eorseq	r1, r4, r0, lsl #28
    21e0:	0b3a0803 	bleq	e841f4 <_Min_Stack_Size+0xe83df4>
    21e4:	1349053b 	movtne	r0, #38203	; 0x953b
    21e8:	00001802 	andeq	r1, r0, r2, lsl #16
    21ec:	0300341f 	movweq	r3, #1055	; 0x41f
    21f0:	3b0b3a0e 	blcc	2d0a30 <_Min_Stack_Size+0x2d0630>
    21f4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    21f8:	20000018 	andcs	r0, r0, r8, lsl r0
    21fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2200:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2204:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    2208:	0000193c 	andeq	r1, r0, ip, lsr r9
    220c:	3f012e21 	svccc	0x00012e21
    2210:	3a0e0319 	bcc	382e7c <_Min_Stack_Size+0x382a7c>
    2214:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2218:	01193c19 	tsteq	r9, r9, lsl ip
    221c:	22000013 	andcs	r0, r0, #19
    2220:	13490005 	movtne	r0, #36869	; 0x9005
    2224:	01000000 	mrseq	r0, (UNDEF: 0)
    2228:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    222c:	0e030b13 	vmoveq.32	d3[0], r0
    2230:	01111755 	tsteq	r1, r5, asr r7
    2234:	00001710 	andeq	r1, r0, r0, lsl r7
    2238:	0b002402 	bleq	b248 <_Min_Stack_Size+0xae48>
    223c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2240:	0300000e 	movweq	r0, #14
    2244:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2248:	0b3b0b3a 	bleq	ec4f38 <_Min_Stack_Size+0xec4b38>
    224c:	00001349 	andeq	r1, r0, r9, asr #6
    2250:	0b002404 	bleq	b268 <_Min_Stack_Size+0xae68>
    2254:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2258:	05000008 	streq	r0, [r0, #-8]
    225c:	13490035 	movtne	r0, #36917	; 0x9035
    2260:	04060000 	streq	r0, [r6], #-0
    2264:	3a0b0b01 	bcc	2c4e70 <_Min_Stack_Size+0x2c4a70>
    2268:	01053b0b 	tsteq	r5, fp, lsl #22
    226c:	07000013 	smladeq	r0, r3, r0, r0
    2270:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    2274:	00000d1c 	andeq	r0, r0, ip, lsl sp
    2278:	03002808 	movweq	r2, #2056	; 0x808
    227c:	000d1c08 	andeq	r1, sp, r8, lsl #24
    2280:	00160900 	andseq	r0, r6, r0, lsl #18
    2284:	0b3a0e03 	bleq	e85a98 <_Min_Stack_Size+0xe85698>
    2288:	1349053b 	movtne	r0, #38203	; 0x953b
    228c:	130a0000 	movwne	r0, #40960	; 0xa000
    2290:	3a0b0b01 	bcc	2c4e9c <_Min_Stack_Size+0x2c4a9c>
    2294:	01053b0b 	tsteq	r5, fp, lsl #22
    2298:	0b000013 	bleq	22ec <_Min_Stack_Size+0x1eec>
    229c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    22a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    22a4:	0b381349 	bleq	e06fd0 <_Min_Stack_Size+0xe06bd0>
    22a8:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    22ac:	3a0e0300 	bcc	382eb4 <_Min_Stack_Size+0x382ab4>
    22b0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    22b4:	000b3813 	andeq	r3, fp, r3, lsl r8
    22b8:	01130d00 	tsteq	r3, r0, lsl #26
    22bc:	0b3a0b0b 	bleq	e84ef0 <_Min_Stack_Size+0xe84af0>
    22c0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    22c4:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    22c8:	3a0e0300 	bcc	382ed0 <_Min_Stack_Size+0x382ad0>
    22cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    22d0:	000b3813 	andeq	r3, fp, r3, lsl r8
    22d4:	012e0f00 	teqeq	lr, r0, lsl #30
    22d8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    22dc:	0b3b0b3a 	bleq	ec4fcc <_Min_Stack_Size+0xec4bcc>
    22e0:	01111927 	tsteq	r1, r7, lsr #18
    22e4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    22e8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    22ec:	10000013 	andne	r0, r0, r3, lsl r0
    22f0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    22f4:	0b3b0b3a 	bleq	ec4fe4 <_Min_Stack_Size+0xec4be4>
    22f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    22fc:	0f110000 	svceq	0x00110000
    2300:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2304:	12000013 	andne	r0, r0, #19
    2308:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    230c:	0b3a0e03 	bleq	e85b20 <_Min_Stack_Size+0xe85720>
    2310:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2314:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2318:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    231c:	00130119 	andseq	r0, r3, r9, lsl r1
    2320:	00051300 	andeq	r1, r5, r0, lsl #6
    2324:	0b3a0e03 	bleq	e85b38 <_Min_Stack_Size+0xe85738>
    2328:	1349053b 	movtne	r0, #38203	; 0x953b
    232c:	00001802 	andeq	r1, r0, r2, lsl #16
    2330:	03000514 	movweq	r0, #1300	; 0x514
    2334:	3b0b3a0e 	blcc	2d0b74 <_Min_Stack_Size+0x2d0774>
    2338:	02134905 	andseq	r4, r3, #81920	; 0x14000
    233c:	15000017 	strne	r0, [r0, #-23]
    2340:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2344:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2348:	17021349 	strne	r1, [r2, -r9, asr #6]
    234c:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    2350:	03193f01 	tsteq	r9, #1, 30
    2354:	3b0b3a0e 	blcc	2d0b94 <_Min_Stack_Size+0x2d0794>
    2358:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    235c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2360:	97184006 	ldrls	r4, [r8, -r6]
    2364:	13011942 	movwne	r1, #6466	; 0x1942
    2368:	34170000 	ldrcc	r0, [r7], #-0
    236c:	3a080300 	bcc	202f74 <_Min_Stack_Size+0x202b74>
    2370:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2374:	00170213 	andseq	r0, r7, r3, lsl r2
    2378:	00341800 	eorseq	r1, r4, r0, lsl #16
    237c:	0b3a0e03 	bleq	e85b90 <_Min_Stack_Size+0xe85790>
    2380:	1349053b 	movtne	r0, #38203	; 0x953b
    2384:	00001802 	andeq	r1, r0, r2, lsl #16
    2388:	03003419 	movweq	r3, #1049	; 0x419
    238c:	3b0b3a0e 	blcc	2d0bcc <_Min_Stack_Size+0x2d07cc>
    2390:	3f134905 	svccc	0x00134905
    2394:	00193c19 	andseq	r3, r9, r9, lsl ip
    2398:	11010000 	mrsne	r0, (UNDEF: 1)
    239c:	130e2501 	movwne	r2, #58625	; 0xe501
    23a0:	550e030b 	strpl	r0, [lr, #-779]	; 0x30b
    23a4:	10011117 	andne	r1, r1, r7, lsl r1
    23a8:	02000017 	andeq	r0, r0, #23
    23ac:	0b0b0024 	bleq	2c2444 <_Min_Stack_Size+0x2c2044>
    23b0:	0e030b3e 	vmoveq.16	d3[0], r0
    23b4:	16030000 	strne	r0, [r3], -r0
    23b8:	3a0e0300 	bcc	382fc0 <_Min_Stack_Size+0x382bc0>
    23bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    23c0:	04000013 	streq	r0, [r0], #-19
    23c4:	0b0b0024 	bleq	2c245c <_Min_Stack_Size+0x2c205c>
    23c8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    23cc:	35050000 	strcc	r0, [r5, #-0]
    23d0:	00134900 	andseq	r4, r3, r0, lsl #18
    23d4:	01010600 	tsteq	r1, r0, lsl #12
    23d8:	13011349 	movwne	r1, #4937	; 0x1349
    23dc:	21070000 	mrscs	r0, (UNDEF: 7)
    23e0:	2f134900 	svccs	0x00134900
    23e4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    23e8:	0b0b0104 	bleq	2c2800 <_Min_Stack_Size+0x2c2400>
    23ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    23f0:	00001301 	andeq	r1, r0, r1, lsl #6
    23f4:	03002809 	movweq	r2, #2057	; 0x809
    23f8:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    23fc:	00280a00 	eoreq	r0, r8, r0, lsl #20
    2400:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    2404:	160b0000 	strne	r0, [fp], -r0
    2408:	3a0e0300 	bcc	383010 <_Min_Stack_Size+0x382c10>
    240c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2410:	0c000013 	stceq	0, cr0, [r0], {19}
    2414:	0b0b0113 	bleq	2c2868 <_Min_Stack_Size+0x2c2468>
    2418:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    241c:	00001301 	andeq	r1, r0, r1, lsl #6
    2420:	03000d0d 	movweq	r0, #3341	; 0xd0d
    2424:	3b0b3a08 	blcc	2d0c4c <_Min_Stack_Size+0x2d084c>
    2428:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    242c:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    2430:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2434:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2438:	0b381349 	bleq	e07164 <_Min_Stack_Size+0xe06d64>
    243c:	130f0000 	movwne	r0, #61440	; 0xf000
    2440:	3a0b0b01 	bcc	2c504c <_Min_Stack_Size+0x2c4c4c>
    2444:	010b3b0b 	tsteq	fp, fp, lsl #22
    2448:	10000013 	andne	r0, r0, r3, lsl r0
    244c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2450:	0b3b0b3a 	bleq	ec5140 <_Min_Stack_Size+0xec4d40>
    2454:	0b381349 	bleq	e07180 <_Min_Stack_Size+0xe06d80>
    2458:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    245c:	03193f01 	tsteq	r9, #1, 30
    2460:	3b0b3a0e 	blcc	2d0ca0 <_Min_Stack_Size+0x2d08a0>
    2464:	1119270b 	tstne	r9, fp, lsl #14
    2468:	40061201 	andmi	r1, r6, r1, lsl #4
    246c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2470:	00001301 	andeq	r1, r0, r1, lsl #6
    2474:	03000512 	movweq	r0, #1298	; 0x512
    2478:	3b0b3a0e 	blcc	2d0cb8 <_Min_Stack_Size+0x2d08b8>
    247c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2480:	13000017 	movwne	r0, #23
    2484:	01018289 	smlabbeq	r1, r9, r2, r8
    2488:	13310111 	teqne	r1, #1073741828	; 0x40000004
    248c:	00001301 	andeq	r1, r0, r1, lsl #6
    2490:	01828a14 	orreq	r8, r2, r4, lsl sl
    2494:	91180200 	tstls	r8, r0, lsl #4
    2498:	00001842 	andeq	r1, r0, r2, asr #16
    249c:	01828915 	orreq	r8, r2, r5, lsl r9
    24a0:	95011101 	strls	r1, [r1, #-257]	; 0x101
    24a4:	13311942 	teqne	r1, #1081344	; 0x108000
    24a8:	00001301 	andeq	r1, r0, r1, lsl #6
    24ac:	01828916 	orreq	r8, r2, r6, lsl r9
    24b0:	95011101 	strls	r1, [r1, #-257]	; 0x101
    24b4:	13311942 	teqne	r1, #1081344	; 0x108000
    24b8:	0f170000 	svceq	0x00170000
    24bc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    24c0:	18000013 	stmdane	r0, {r0, r1, r4}
    24c4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    24c8:	0b3a0e03 	bleq	e85cdc <_Min_Stack_Size+0xe858dc>
    24cc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    24d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    24d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    24d8:	00130119 	andseq	r0, r3, r9, lsl r1
    24dc:	00051900 	andeq	r1, r5, r0, lsl #18
    24e0:	0b3a0e03 	bleq	e85cf4 <_Min_Stack_Size+0xe858f4>
    24e4:	1349053b 	movtne	r0, #38203	; 0x953b
    24e8:	00001802 	andeq	r1, r0, r2, lsl #16
    24ec:	0300051a 	movweq	r0, #1306	; 0x51a
    24f0:	3b0b3a0e 	blcc	2d0d30 <_Min_Stack_Size+0x2d0930>
    24f4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    24f8:	1b000017 	blne	255c <_Min_Stack_Size+0x215c>
    24fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2500:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2504:	17021349 	strne	r1, [r2, -r9, asr #6]
    2508:	341c0000 	ldrcc	r0, [ip], #-0
    250c:	3a080300 	bcc	203114 <_Min_Stack_Size+0x202d14>
    2510:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2514:	00170213 	andseq	r0, r7, r3, lsl r2
    2518:	012e1d00 	teqeq	lr, r0, lsl #26
    251c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2520:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2524:	13491927 	movtne	r1, #39207	; 0x9927
    2528:	06120111 			; <UNDEFINED> instruction: 0x06120111
    252c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2530:	00130119 	andseq	r0, r3, r9, lsl r1
    2534:	00341e00 	eorseq	r1, r4, r0, lsl #28
    2538:	0b3a0e03 	bleq	e85d4c <_Min_Stack_Size+0xe8594c>
    253c:	1349053b 	movtne	r0, #38203	; 0x953b
    2540:	341f0000 	ldrcc	r0, [pc], #-0	; 2548 <_Min_Stack_Size+0x2148>
    2544:	3a0e0300 	bcc	38314c <_Min_Stack_Size+0x382d4c>
    2548:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    254c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    2550:	20000019 	andcs	r0, r0, r9, lsl r0
    2554:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2558:	0b3a0e03 	bleq	e85d6c <_Min_Stack_Size+0xe8596c>
    255c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2560:	1301193c 	movwne	r1, #6460	; 0x193c
    2564:	05210000 	streq	r0, [r1, #-0]!
    2568:	00134900 	andseq	r4, r3, r0, lsl #18
    256c:	012e2200 	teqeq	lr, r0, lsl #4
    2570:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2574:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2578:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    257c:	01000000 	mrseq	r0, (UNDEF: 0)
    2580:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2584:	0e030b13 	vmoveq.32	d3[0], r0
    2588:	01111755 	tsteq	r1, r5, asr r7
    258c:	00001710 	andeq	r1, r0, r0, lsl r7
    2590:	0b002402 	bleq	b5a0 <_Min_Stack_Size+0xb1a0>
    2594:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2598:	0300000e 	movweq	r0, #14
    259c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    25a0:	0b3b0b3a 	bleq	ec5290 <_Min_Stack_Size+0xec4e90>
    25a4:	00001349 	andeq	r1, r0, r9, asr #6
    25a8:	0b002404 	bleq	b5c0 <_Min_Stack_Size+0xb1c0>
    25ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    25b0:	05000008 	streq	r0, [r0, #-8]
    25b4:	13490035 	movtne	r0, #36917	; 0x9035
    25b8:	04060000 	streq	r0, [r6], #-0
    25bc:	3a0b0b01 	bcc	2c51c8 <_Min_Stack_Size+0x2c4dc8>
    25c0:	01053b0b 	tsteq	r5, fp, lsl #22
    25c4:	07000013 	smladeq	r0, r3, r0, r0
    25c8:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    25cc:	00000d1c 	andeq	r0, r0, ip, lsl sp
    25d0:	03002808 	movweq	r2, #2056	; 0x808
    25d4:	000d1c08 	andeq	r1, sp, r8, lsl #24
    25d8:	00160900 	andseq	r0, r6, r0, lsl #18
    25dc:	0b3a0e03 	bleq	e85df0 <_Min_Stack_Size+0xe859f0>
    25e0:	1349053b 	movtne	r0, #38203	; 0x953b
    25e4:	130a0000 	movwne	r0, #40960	; 0xa000
    25e8:	3a0b0b01 	bcc	2c51f4 <_Min_Stack_Size+0x2c4df4>
    25ec:	01053b0b 	tsteq	r5, fp, lsl #22
    25f0:	0b000013 	bleq	2644 <_Min_Stack_Size+0x2244>
    25f4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    25f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    25fc:	0b381349 	bleq	e07328 <_Min_Stack_Size+0xe06f28>
    2600:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    2604:	3a0e0300 	bcc	38320c <_Min_Stack_Size+0x382e0c>
    2608:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    260c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2610:	01040d00 	tsteq	r4, r0, lsl #26
    2614:	0b3a0b0b 	bleq	e85248 <_Min_Stack_Size+0xe84e48>
    2618:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    261c:	130e0000 	movwne	r0, #57344	; 0xe000
    2620:	3a0b0b01 	bcc	2c522c <_Min_Stack_Size+0x2c4e2c>
    2624:	010b3b0b 	tsteq	fp, fp, lsl #22
    2628:	0f000013 	svceq	0x00000013
    262c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2630:	0b3b0b3a 	bleq	ec5320 <_Min_Stack_Size+0xec4f20>
    2634:	0b381349 	bleq	e07360 <_Min_Stack_Size+0xe06f60>
    2638:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    263c:	03193f00 	tsteq	r9, #0, 30
    2640:	3b0b3a0e 	blcc	2d0e80 <_Min_Stack_Size+0x2d0a80>
    2644:	1119270b 	tstne	r9, fp, lsl #14
    2648:	40061201 	andmi	r1, r6, r1, lsl #4
    264c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2650:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    2654:	03193f01 	tsteq	r9, #1, 30
    2658:	3b0b3a0e 	blcc	2d0e98 <_Min_Stack_Size+0x2d0a98>
    265c:	1119270b 	tstne	r9, fp, lsl #14
    2660:	40061201 	andmi	r1, r6, r1, lsl #4
    2664:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2668:	00001301 	andeq	r1, r0, r1, lsl #6
    266c:	03000512 	movweq	r0, #1298	; 0x512
    2670:	3b0b3a0e 	blcc	2d0eb0 <_Min_Stack_Size+0x2d0ab0>
    2674:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2678:	13000017 	movwne	r0, #23
    267c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2680:	0b3b0b3a 	bleq	ec5370 <_Min_Stack_Size+0xec4f70>
    2684:	17021349 	strne	r1, [r2, -r9, asr #6]
    2688:	0f140000 	svceq	0x00140000
    268c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2690:	15000013 	strne	r0, [r0, #-19]
    2694:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2698:	0b3b0b3a 	bleq	ec5388 <_Min_Stack_Size+0xec4f88>
    269c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    26a0:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    26a4:	03193f01 	tsteq	r9, #1, 30
    26a8:	3b0b3a0e 	blcc	2d0ee8 <_Min_Stack_Size+0x2d0ae8>
    26ac:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    26b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    26b4:	97184006 	ldrls	r4, [r8, -r6]
    26b8:	13011942 	movwne	r1, #6466	; 0x1942
    26bc:	34170000 	ldrcc	r0, [r7], #-0
    26c0:	3a0e0300 	bcc	3832c8 <_Min_Stack_Size+0x382ec8>
    26c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    26c8:	00170213 	andseq	r0, r7, r3, lsl r2
    26cc:	012e1800 	teqeq	lr, r0, lsl #16
    26d0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    26d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    26d8:	13491927 	movtne	r1, #39207	; 0x9927
    26dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    26e0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    26e4:	00130119 	andseq	r0, r3, r9, lsl r1
    26e8:	00051900 	andeq	r1, r5, r0, lsl #18
    26ec:	0b3a0e03 	bleq	e85f00 <_Min_Stack_Size+0xe85b00>
    26f0:	1349053b 	movtne	r0, #38203	; 0x953b
    26f4:	00001702 	andeq	r1, r0, r2, lsl #14
    26f8:	0300341a 	movweq	r3, #1050	; 0x41a
    26fc:	3b0b3a0e 	blcc	2d0f3c <_Min_Stack_Size+0x2d0b3c>
    2700:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2704:	1b000017 	blne	2768 <_Min_Stack_Size+0x2368>
    2708:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    270c:	0b3a0e03 	bleq	e85f20 <_Min_Stack_Size+0xe85b20>
    2710:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2714:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2718:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    271c:	00130119 	andseq	r0, r3, r9, lsl r1
    2720:	00051c00 	andeq	r1, r5, r0, lsl #24
    2724:	0b3a0e03 	bleq	e85f38 <_Min_Stack_Size+0xe85b38>
    2728:	1349053b 	movtne	r0, #38203	; 0x953b
    272c:	00001802 	andeq	r1, r0, r2, lsl #16
    2730:	0300341d 	movweq	r3, #1053	; 0x41d
    2734:	3b0b3a0e 	blcc	2d0f74 <_Min_Stack_Size+0x2d0b74>
    2738:	3f134905 	svccc	0x00134905
    273c:	00193c19 	andseq	r3, r9, r9, lsl ip
    2740:	11010000 	mrsne	r0, (UNDEF: 1)
    2744:	130e2501 	movwne	r2, #58625	; 0xe501
    2748:	550e030b 	strpl	r0, [lr, #-779]	; 0x30b
    274c:	10011117 	andne	r1, r1, r7, lsl r1
    2750:	02000017 	andeq	r0, r0, #23
    2754:	0e030104 	adfeqs	f0, f3, f4
    2758:	0b3a0b0b 	bleq	e8538c <_Min_Stack_Size+0xe84f8c>
    275c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2760:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    2764:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    2768:	0400000d 	streq	r0, [r0], #-13
    276c:	0b0b0024 	bleq	2c2804 <_Min_Stack_Size+0x2c2404>
    2770:	0e030b3e 	vmoveq.16	d3[0], r0
    2774:	16050000 	strne	r0, [r5], -r0
    2778:	3a0e0300 	bcc	383380 <_Min_Stack_Size+0x382f80>
    277c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2780:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2784:	0b0b0024 	bleq	2c281c <_Min_Stack_Size+0x2c241c>
    2788:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    278c:	35070000 	strcc	r0, [r7, #-0]
    2790:	00134900 	andseq	r4, r3, r0, lsl #18
    2794:	01010800 	tsteq	r1, r0, lsl #16
    2798:	13011349 	movwne	r1, #4937	; 0x1349
    279c:	21090000 	mrscs	r0, (UNDEF: 9)
    27a0:	2f134900 	svccs	0x00134900
    27a4:	0a00000b 	beq	27d8 <_Min_Stack_Size+0x23d8>
    27a8:	0b0b0104 	bleq	2c2bc0 <_Min_Stack_Size+0x2c27c0>
    27ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    27b0:	00001301 	andeq	r1, r0, r1, lsl #6
    27b4:	0300160b 	movweq	r1, #1547	; 0x60b
    27b8:	3b0b3a0e 	blcc	2d0ff8 <_Min_Stack_Size+0x2d0bf8>
    27bc:	00134905 	andseq	r4, r3, r5, lsl #18
    27c0:	01130c00 	tsteq	r3, r0, lsl #24
    27c4:	0b3a0b0b 	bleq	e853f8 <_Min_Stack_Size+0xe84ff8>
    27c8:	1301053b 	movwne	r0, #5435	; 0x153b
    27cc:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    27d0:	3a080300 	bcc	2033d8 <_Min_Stack_Size+0x202fd8>
    27d4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    27d8:	000b3813 	andeq	r3, fp, r3, lsl r8
    27dc:	000d0e00 	andeq	r0, sp, r0, lsl #28
    27e0:	0b3a0e03 	bleq	e85ff4 <_Min_Stack_Size+0xe85bf4>
    27e4:	1349053b 	movtne	r0, #38203	; 0x953b
    27e8:	00000b38 	andeq	r0, r0, r8, lsr fp
    27ec:	0b01130f 	bleq	47430 <_Min_Stack_Size+0x47030>
    27f0:	3b0b3a0b 	blcc	2d1024 <_Min_Stack_Size+0x2d0c24>
    27f4:	0013010b 	andseq	r0, r3, fp, lsl #2
    27f8:	000d1000 	andeq	r1, sp, r0
    27fc:	0b3a0e03 	bleq	e86010 <_Min_Stack_Size+0xe85c10>
    2800:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2804:	00000b38 	andeq	r0, r0, r8, lsr fp
    2808:	0b010411 	bleq	43854 <_Min_Stack_Size+0x43454>
    280c:	3b0b3a0b 	blcc	2d1040 <_Min_Stack_Size+0x2d0c40>
    2810:	0013010b 	andseq	r0, r3, fp, lsl #2
    2814:	012e1200 	teqeq	lr, r0, lsl #4
    2818:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    281c:	0b3b0b3a 	bleq	ec550c <_Min_Stack_Size+0xec510c>
    2820:	01111927 	tsteq	r1, r7, lsr #18
    2824:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2828:	01194297 			; <UNDEFINED> instruction: 0x01194297
    282c:	13000013 	movwne	r0, #19
    2830:	08030005 	stmdaeq	r3, {r0, r2}
    2834:	0b3b0b3a 	bleq	ec5524 <_Min_Stack_Size+0xec5124>
    2838:	17021349 	strne	r1, [r2, -r9, asr #6]
    283c:	34140000 	ldrcc	r0, [r4], #-0
    2840:	3a0e0300 	bcc	383448 <_Min_Stack_Size+0x383048>
    2844:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2848:	00180213 	andseq	r0, r8, r3, lsl r2
    284c:	82891500 	addhi	r1, r9, #0, 10
    2850:	01110101 	tsteq	r1, r1, lsl #2
    2854:	13011331 	movwne	r1, #4913	; 0x1331
    2858:	8a160000 	bhi	582860 <_Min_Stack_Size+0x582460>
    285c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    2860:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    2864:	89170000 	ldmdbhi	r7, {}	; <UNPREDICTABLE>
    2868:	11010182 	smlabbne	r1, r2, r1, r0
    286c:	00133101 	andseq	r3, r3, r1, lsl #2
    2870:	00051800 	andeq	r1, r5, r0, lsl #16
    2874:	0b3a0803 	bleq	e84888 <_Min_Stack_Size+0xe84488>
    2878:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    287c:	00001802 	andeq	r1, r0, r2, lsl #16
    2880:	03000519 	movweq	r0, #1305	; 0x519
    2884:	3b0b3a0e 	blcc	2d10c4 <_Min_Stack_Size+0x2d0cc4>
    2888:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    288c:	1a000017 	bne	28f0 <_Min_Stack_Size+0x24f0>
    2890:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2894:	0b3a0e03 	bleq	e860a8 <_Min_Stack_Size+0xe85ca8>
    2898:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    289c:	01111349 	tsteq	r1, r9, asr #6
    28a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    28a4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    28a8:	1b000013 	blne	28fc <_Min_Stack_Size+0x24fc>
    28ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    28b0:	0b3a0e03 	bleq	e860c4 <_Min_Stack_Size+0xe85cc4>
    28b4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    28b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    28bc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    28c0:	00130119 	andseq	r0, r3, r9, lsl r1
    28c4:	00341c00 	eorseq	r1, r4, r0, lsl #24
    28c8:	0b3a0e03 	bleq	e860dc <_Min_Stack_Size+0xe85cdc>
    28cc:	1349053b 	movtne	r0, #38203	; 0x953b
    28d0:	00001802 	andeq	r1, r0, r2, lsl #16
    28d4:	0300051d 	movweq	r0, #1309	; 0x51d
    28d8:	3b0b3a0e 	blcc	2d1118 <_Min_Stack_Size+0x2d0d18>
    28dc:	02134905 	andseq	r4, r3, #81920	; 0x14000
    28e0:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
    28e4:	01018289 	smlabbeq	r1, r9, r2, r8
    28e8:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    28ec:	00133119 	andseq	r3, r3, r9, lsl r1
    28f0:	00341f00 	eorseq	r1, r4, r0, lsl #30
    28f4:	0b3a0e03 	bleq	e86108 <_Min_Stack_Size+0xe85d08>
    28f8:	1349053b 	movtne	r0, #38203	; 0x953b
    28fc:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    2900:	0f200000 	svceq	0x00200000
    2904:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2908:	21000013 	tstcs	r0, r3, lsl r0
    290c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2910:	0b3b0b3a 	bleq	ec5600 <_Min_Stack_Size+0xec5200>
    2914:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    2918:	00001802 	andeq	r1, r0, r2, lsl #16
    291c:	49002622 	stmdbmi	r0, {r1, r5, r9, sl, sp}
    2920:	23000013 	movwcs	r0, #19
    2924:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2928:	0b3a0e03 	bleq	e8613c <_Min_Stack_Size+0xe85d3c>
    292c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2930:	1301193c 	movwne	r1, #6460	; 0x193c
    2934:	05240000 	streq	r0, [r4, #-0]!
    2938:	00134900 	andseq	r4, r3, r0, lsl #18
    293c:	012e2500 	teqeq	lr, r0, lsl #10
    2940:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2944:	0b3b0b3a 	bleq	ec5634 <_Min_Stack_Size+0xec5234>
    2948:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    294c:	00001301 	andeq	r1, r0, r1, lsl #6
    2950:	3f012e26 	svccc	0x00012e26
    2954:	3a0e0319 	bcc	3835c0 <_Min_Stack_Size+0x3831c0>
    2958:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    295c:	3c134919 	ldccc	9, cr4, [r3], {25}
    2960:	00130119 	andseq	r0, r3, r9, lsl r1
    2964:	012e2700 	teqeq	lr, r0, lsl #14
    2968:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    296c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2970:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    2974:	Address 0x0000000000002974 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
  14:	00000044 	andeq	r0, r0, r4, asr #32
  18:	08000338 	stmdaeq	r0, {r3, r4, r5, r8, r9}
  1c:	00000002 	andeq	r0, r0, r2
	...
  28:	00000034 	andeq	r0, r0, r4, lsr r0
  2c:	00ca0002 	sbceq	r0, sl, r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
  3c:	00000030 	andeq	r0, r0, r0, lsr r0
  40:	0800036c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9}
  44:	00000008 	andeq	r0, r0, r8
  48:	08000374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9}
  4c:	00000030 	andeq	r0, r0, r0, lsr r0
  50:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
  54:	0000003c 	andeq	r0, r0, ip, lsr r0
	...
  60:	00000024 	andeq	r0, r0, r4, lsr #32
  64:	066e0002 	strbteq	r0, [lr], -r2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	080003e0 	stmdaeq	r0, {r5, r6, r7, r8, r9}
  74:	00000100 	andeq	r0, r0, r0, lsl #2
  78:	080004e0 	stmdaeq	r0, {r5, r6, r7, sl}
  7c:	00000070 	andeq	r0, r0, r0, ror r0
	...
  88:	0000004c 	andeq	r0, r0, ip, asr #32
  8c:	0c480002 	mcrreq	0, 0, r0, r8, cr2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	08000550 	stmdaeq	r0, {r4, r6, r8, sl}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	08000554 	stmdaeq	r0, {r2, r4, r6, r8, sl}
  a4:	00000002 	andeq	r0, r0, r2
  a8:	08000558 	stmdaeq	r0, {r3, r4, r6, r8, sl}
  ac:	00000002 	andeq	r0, r0, r2
  b0:	0800055c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl}
  b4:	00000002 	andeq	r0, r0, r2
  b8:	08000560 	stmdaeq	r0, {r5, r6, r8, sl}
  bc:	00000002 	andeq	r0, r0, r2
  c0:	08000564 	stmdaeq	r0, {r2, r5, r6, r8, sl}
  c4:	00000002 	andeq	r0, r0, r2
  c8:	08000568 	stmdaeq	r0, {r3, r5, r6, r8, sl}
  cc:	00000002 	andeq	r0, r0, r2
	...
  d8:	00000034 	andeq	r0, r0, r4, lsr r0
  dc:	0d5c0002 	ldcleq	0, cr0, [ip, #-8]
  e0:	00040000 	andeq	r0, r4, r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	0800056c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl}
  ec:	000000cc 	andeq	r0, r0, ip, asr #1
  f0:	08000638 	stmdaeq	r0, {r3, r4, r5, r9, sl}
  f4:	0000004c 	andeq	r0, r0, ip, asr #32
  f8:	08000684 	stmdaeq	r0, {r2, r7, r9, sl}
  fc:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 100:	0800083c 	stmdaeq	r0, {r2, r3, r4, r5, fp}
 104:	00000034 	andeq	r0, r0, r4, lsr r0
	...
 110:	0000005c 	andeq	r0, r0, ip, asr r0
 114:	14d10002 	ldrbne	r0, [r1], #2
 118:	00040000 	andeq	r0, r4, r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	08000870 	stmdaeq	r0, {r4, r5, r6, fp}
 124:	0000001a 	andeq	r0, r0, sl, lsl r0
 128:	0800088c 	stmdaeq	r0, {r2, r3, r7, fp}
 12c:	000000ce 	andeq	r0, r0, lr, asr #1
 130:	0800095c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp}
 134:	00000026 	andeq	r0, r0, r6, lsr #32
 138:	08000984 	stmdaeq	r0, {r2, r7, r8, fp}
 13c:	00000026 	andeq	r0, r0, r6, lsr #32
 140:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
 144:	00000070 	andeq	r0, r0, r0, ror r0
 148:	08000a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp}
 14c:	000000b2 	strheq	r0, [r0], -r2
 150:	08000ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp}
 154:	00000040 	andeq	r0, r0, r0, asr #32
 158:	08000b10 	stmdaeq	r0, {r4, r8, r9, fp}
 15c:	0000007a 	andeq	r0, r0, sl, ror r0
 160:	08000b8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, fp}
 164:	00000006 	andeq	r0, r0, r6
	...
 170:	0000003c 	andeq	r0, r0, ip, lsr r0
 174:	1f850002 	svcne	0x00850002
 178:	00040000 	andeq	r0, r4, r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
 184:	00000016 	andeq	r0, r0, r6, lsl r0
 188:	08000bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp}
 18c:	00000006 	andeq	r0, r0, r6
 190:	08000bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp}
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
 19c:	00000032 	andeq	r0, r0, r2, lsr r0
 1a0:	08000c04 	stmdaeq	r0, {r2, sl, fp}
 1a4:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 1b0:	000000dc 	ldrdeq	r0, [r0], -ip
 1b4:	22190002 	andscs	r0, r9, #2
 1b8:	00040000 	andeq	r0, r4, r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	08000c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp}
 1c4:	00000026 	andeq	r0, r0, r6, lsr #32
 1c8:	08000c54 	stmdaeq	r0, {r2, r4, r6, sl, fp}
 1cc:	00000084 	andeq	r0, r0, r4, lsl #1
 1d0:	08000cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp}
 1d4:	00000072 	andeq	r0, r0, r2, ror r0
 1d8:	08000d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp}
 1dc:	00000076 	andeq	r0, r0, r6, ror r0
 1e0:	08000dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp}
 1e4:	00000084 	andeq	r0, r0, r4, lsl #1
 1e8:	08000e48 	stmdaeq	r0, {r3, r6, r9, sl, fp}
 1ec:	00000298 	muleq	r0, r8, r2
 1f0:	080010e0 	stmdaeq	r0, {r5, r6, r7, ip}
 1f4:	00000050 	andeq	r0, r0, r0, asr r0
 1f8:	08001130 	stmdaeq	r0, {r4, r5, r8, ip}
 1fc:	00000034 	andeq	r0, r0, r4, lsr r0
 200:	08001164 	stmdaeq	r0, {r2, r5, r6, r8, ip}
 204:	00000122 	andeq	r0, r0, r2, lsr #2
 208:	08001288 	stmdaeq	r0, {r3, r7, r9, ip}
 20c:	0000025a 	andeq	r0, r0, sl, asr r2
 210:	080014e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip}
 214:	0000003c 	andeq	r0, r0, ip, lsr r0
 218:	08001520 	stmdaeq	r0, {r5, r8, sl, ip}
 21c:	00000082 	andeq	r0, r0, r2, lsl #1
 220:	080015a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip}
 224:	0000004c 	andeq	r0, r0, ip, asr #32
 228:	080015f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip}
 22c:	0000001a 	andeq	r0, r0, sl, lsl r0
 230:	0800160c 	stmdaeq	r0, {r2, r3, r9, sl, ip}
 234:	0000001e 	andeq	r0, r0, lr, lsl r0
 238:	0800162c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip}
 23c:	0000000e 	andeq	r0, r0, lr
 240:	0800163c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip}
 244:	00000094 	muleq	r0, r4, r0
 248:	080016d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip}
 24c:	00000004 	andeq	r0, r0, r4
 250:	080016d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, ip}
 254:	00000004 	andeq	r0, r0, r4
 258:	080016d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip}
 25c:	00000006 	andeq	r0, r0, r6
 260:	080016e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, ip}
 264:	00000016 	andeq	r0, r0, r6, lsl r0
 268:	080016f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, ip}
 26c:	00000016 	andeq	r0, r0, r6, lsl r0
 270:	08001710 	stmdaeq	r0, {r4, r8, r9, sl, ip}
 274:	00000058 	andeq	r0, r0, r8, asr r0
 278:	08001768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip}
 27c:	00000060 	andeq	r0, r0, r0, rrx
 280:	080017c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip}
 284:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
 290:	00000134 	andeq	r0, r0, r4, lsr r1
 294:	3bcd0002 	blcc	ff3402a4 <_estack+0xdf3102a4>
 298:	00040000 	andeq	r0, r4, r0
 29c:	00000000 	andeq	r0, r0, r0
 2a0:	08001878 	stmdaeq	r0, {r3, r4, r5, r6, fp, ip}
 2a4:	00000060 	andeq	r0, r0, r0, rrx
 2a8:	080018d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, ip}
 2ac:	000001a8 	andeq	r0, r0, r8, lsr #3
 2b0:	08001a80 	stmdaeq	r0, {r7, r9, fp, ip}
 2b4:	000000a4 	andeq	r0, r0, r4, lsr #1
 2b8:	08001b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, ip}
 2bc:	00000028 	andeq	r0, r0, r8, lsr #32
 2c0:	08001b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip}
 2c4:	000000b8 	strheq	r0, [r0], -r8
 2c8:	08001c04 	stmdaeq	r0, {r2, sl, fp, ip}
 2cc:	0000011c 	andeq	r0, r0, ip, lsl r1
 2d0:	08001d20 	stmdaeq	r0, {r5, r8, sl, fp, ip}
 2d4:	00000080 	andeq	r0, r0, r0, lsl #1
 2d8:	08001da0 	stmdaeq	r0, {r5, r7, r8, sl, fp, ip}
 2dc:	000000a4 	andeq	r0, r0, r4, lsr #1
 2e0:	08001e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip}
 2e4:	00000138 	andeq	r0, r0, r8, lsr r1
 2e8:	08001f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip}
 2ec:	00000018 	andeq	r0, r0, r8, lsl r0
 2f0:	08001f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip}
 2f4:	00000010 	andeq	r0, r0, r0, lsl r0
 2f8:	08001fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip}
 2fc:	00000018 	andeq	r0, r0, r8, lsl r0
 300:	08001fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip}
 304:	0000001c 	andeq	r0, r0, ip, lsl r0
 308:	08001fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp, ip}
 30c:	0000000c 	andeq	r0, r0, ip
 310:	08001fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, ip}
 314:	00000144 	andeq	r0, r0, r4, asr #2
 318:	08002128 	stmdaeq	r0, {r3, r5, r8, sp}
 31c:	000000e8 	andeq	r0, r0, r8, ror #1
 320:	08002210 	stmdaeq	r0, {r4, r9, sp}
 324:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 328:	080022c0 	stmdaeq	r0, {r6, r7, r9, sp}
 32c:	00000080 	andeq	r0, r0, r0, lsl #1
 330:	08002340 	stmdaeq	r0, {r6, r8, r9, sp}
 334:	00000088 	andeq	r0, r0, r8, lsl #1
 338:	080023c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sp}
 33c:	000003a0 	andeq	r0, r0, r0, lsr #7
 340:	08002768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, sp}
 344:	0000008c 	andeq	r0, r0, ip, lsl #1
 348:	080027f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, sp}
 34c:	00000084 	andeq	r0, r0, r4, lsl #1
 350:	08002878 	stmdaeq	r0, {r3, r4, r5, r6, fp, sp}
 354:	0000009c 	muleq	r0, ip, r0
 358:	08002914 	stmdaeq	r0, {r2, r4, r8, fp, sp}
 35c:	0000006c 	andeq	r0, r0, ip, rrx
 360:	08002980 	stmdaeq	r0, {r7, r8, fp, sp}
 364:	0000007c 	andeq	r0, r0, ip, ror r0
 368:	080029fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, sp}
 36c:	00000070 	andeq	r0, r0, r0, ror r0
 370:	08002a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, sp}
 374:	00000020 	andeq	r0, r0, r0, lsr #32
 378:	08002a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, sp}
 37c:	00000070 	andeq	r0, r0, r0, ror r0
 380:	08002afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, sp}
 384:	0000000c 	andeq	r0, r0, ip
 388:	08002b08 	stmdaeq	r0, {r3, r8, r9, fp, sp}
 38c:	00000006 	andeq	r0, r0, r6
 390:	08002b10 	stmdaeq	r0, {r4, r8, r9, fp, sp}
 394:	00000006 	andeq	r0, r0, r6
 398:	08002b18 	stmdaeq	r0, {r3, r4, r8, r9, fp, sp}
 39c:	0000000c 	andeq	r0, r0, ip
 3a0:	08002b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, sp}
 3a4:	00000020 	andeq	r0, r0, r0, lsr #32
 3a8:	08002b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, sp}
 3ac:	00000070 	andeq	r0, r0, r0, ror r0
 3b0:	08002bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, sp}
 3b4:	00000050 	andeq	r0, r0, r0, asr r0
 3b8:	08002c04 	stmdaeq	r0, {r2, sl, fp, sp}
 3bc:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 3c8:	00000044 	andeq	r0, r0, r4, asr #32
 3cc:	5fd10002 	svcpl	0x00d10002
 3d0:	00040000 	andeq	r0, r4, r0
 3d4:	00000000 	andeq	r0, r0, r0
 3d8:	08002c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, sp}
 3dc:	00000098 	muleq	r0, r8, r0
 3e0:	08002cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, sp}
 3e4:	000000a8 	andeq	r0, r0, r8, lsr #1
 3e8:	08002d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, sp}
 3ec:	00000058 	andeq	r0, r0, r8, asr r0
 3f0:	08002db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, sp}
 3f4:	000002dc 	ldrdeq	r0, [r0], -ip
 3f8:	08003090 	stmdaeq	r0, {r4, r7, ip, sp}
 3fc:	00000018 	andeq	r0, r0, r8, lsl r0
 400:	080030a8 	stmdaeq	r0, {r3, r5, r7, ip, sp}
 404:	00000004 	andeq	r0, r0, r4
	...
 410:	00000094 	muleq	r0, r4, r0
 414:	726a0002 	rsbvc	r0, sl, #2
 418:	00040000 	andeq	r0, r4, r0
 41c:	00000000 	andeq	r0, r0, r0
 420:	080030ac 	stmdaeq	r0, {r2, r3, r5, r7, ip, sp}
 424:	00000018 	andeq	r0, r0, r8, lsl r0
 428:	080030c8 	stmdaeq	r0, {r3, r6, r7, ip, sp}
 42c:	0000000e 	andeq	r0, r0, lr
 430:	080030dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip, sp}
 434:	0000002c 	andeq	r0, r0, ip, lsr #32
 438:	08003108 	stmdaeq	r0, {r3, r8, ip, sp}
 43c:	00000020 	andeq	r0, r0, r0, lsr #32
 440:	08003128 	stmdaeq	r0, {r3, r5, r8, ip, sp}
 444:	00000018 	andeq	r0, r0, r8, lsl r0
 448:	08003140 	stmdaeq	r0, {r6, r8, ip, sp}
 44c:	00000010 	andeq	r0, r0, r0, lsl r0
 450:	08003150 	stmdaeq	r0, {r4, r6, r8, ip, sp}
 454:	0000001c 	andeq	r0, r0, ip, lsl r0
 458:	0800316c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip, sp}
 45c:	00000018 	andeq	r0, r0, r8, lsl r0
 460:	08003184 	stmdaeq	r0, {r2, r7, r8, ip, sp}
 464:	0000001c 	andeq	r0, r0, ip, lsl r0
 468:	080031a0 	stmdaeq	r0, {r5, r7, r8, ip, sp}
 46c:	00000006 	andeq	r0, r0, r6
 470:	080031a8 	stmdaeq	r0, {r3, r5, r7, r8, ip, sp}
 474:	00000024 	andeq	r0, r0, r4, lsr #32
 478:	080031cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, ip, sp}
 47c:	00000058 	andeq	r0, r0, r8, asr r0
 480:	08003224 	stmdaeq	r0, {r2, r5, r9, ip, sp}
 484:	00000024 	andeq	r0, r0, r4, lsr #32
 488:	08003248 	stmdaeq	r0, {r3, r6, r9, ip, sp}
 48c:	00000030 	andeq	r0, r0, r0, lsr r0
 490:	08003278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, sp}
 494:	000000ac 	andeq	r0, r0, ip, lsr #1
 498:	08003324 	stmdaeq	r0, {r2, r5, r8, r9, ip, sp}
 49c:	00000044 	andeq	r0, r0, r4, asr #32
	...
 4a8:	00000034 	andeq	r0, r0, r4, lsr r0
 4ac:	76530002 	ldrbvc	r0, [r3], -r2
 4b0:	00040000 	andeq	r0, r4, r0
 4b4:	00000000 	andeq	r0, r0, r0
 4b8:	08003368 	stmdaeq	r0, {r3, r5, r6, r8, r9, ip, sp}
 4bc:	0000005c 	andeq	r0, r0, ip, asr r0
 4c0:	080033c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, ip, sp}
 4c4:	0000000c 	andeq	r0, r0, ip
 4c8:	080033d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, ip, sp}
 4cc:	0000000c 	andeq	r0, r0, ip
 4d0:	080033dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, ip, sp}
 4d4:	00000014 	andeq	r0, r0, r4, lsl r0
	...
 4e0:	0000003c 	andeq	r0, r0, ip, lsr r0
 4e4:	781e0002 	ldmdavc	lr, {r1}
 4e8:	00040000 	andeq	r0, r4, r0
 4ec:	00000000 	andeq	r0, r0, r0
 4f0:	080033f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip, sp}
 4f4:	00000014 	andeq	r0, r0, r4, lsl r0
 4f8:	08003404 	stmdaeq	r0, {r2, sl, ip, sp}
 4fc:	00000078 	andeq	r0, r0, r8, ror r0
 500:	0800347c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, ip, sp}
 504:	00000014 	andeq	r0, r0, r4, lsl r0
 508:	08003490 	stmdaeq	r0, {r4, r7, sl, ip, sp}
 50c:	00000018 	andeq	r0, r0, r8, lsl r0
 510:	080034a8 	stmdaeq	r0, {r3, r5, r7, sl, ip, sp}
 514:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 520:	00000084 	andeq	r0, r0, r4, lsl #1
 524:	7d610002 	stclvc	0, cr0, [r1, #-8]!
 528:	00040000 	andeq	r0, r4, r0
 52c:	00000000 	andeq	r0, r0, r0
 530:	080034c0 	stmdaeq	r0, {r6, r7, sl, ip, sp}
 534:	0000015c 	andeq	r0, r0, ip, asr r1
 538:	0800361c 	stmdaeq	r0, {r2, r3, r4, r9, sl, ip, sp}
 53c:	000000bc 	strheq	r0, [r0], -ip
 540:	080036d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip, sp}
 544:	00000012 	andeq	r0, r0, r2, lsl r0
 548:	080036ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, ip, sp}
 54c:	00000024 	andeq	r0, r0, r4, lsr #32
 550:	08003710 	stmdaeq	r0, {r4, r8, r9, sl, ip, sp}
 554:	0000000c 	andeq	r0, r0, ip
 558:	0800371c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, ip, sp}
 55c:	00000006 	andeq	r0, r0, r6
 560:	08003724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, sp}
 564:	0000000c 	andeq	r0, r0, ip
 568:	08003730 	stmdaeq	r0, {r4, r5, r8, r9, sl, ip, sp}
 56c:	00000006 	andeq	r0, r0, r6
 570:	08003738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, sp}
 574:	00000004 	andeq	r0, r0, r4
 578:	0800373c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip, sp}
 57c:	00000004 	andeq	r0, r0, r4
 580:	08003740 	stmdaeq	r0, {r6, r8, r9, sl, ip, sp}
 584:	0000000a 	andeq	r0, r0, sl
 588:	0800374c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip, sp}
 58c:	00000004 	andeq	r0, r0, r4
 590:	08003750 	stmdaeq	r0, {r4, r6, r8, r9, sl, ip, sp}
 594:	00000008 	andeq	r0, r0, r8
 598:	08003758 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, ip, sp}
 59c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 5a8:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
 5ac:	85a20002 	strhi	r0, [r2, #2]!
 5b0:	00040000 	andeq	r0, r4, r0
 5b4:	00000000 	andeq	r0, r0, r0
 5b8:	08003780 	stmdaeq	r0, {r7, r8, r9, sl, ip, sp}
 5bc:	00000050 	andeq	r0, r0, r0, asr r0
 5c0:	080037d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, ip, sp}
 5c4:	00000010 	andeq	r0, r0, r0, lsl r0
 5c8:	080037e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip, sp}
 5cc:	00000038 	andeq	r0, r0, r8, lsr r0
 5d0:	08003818 	stmdaeq	r0, {r3, r4, fp, ip, sp}
 5d4:	00000014 	andeq	r0, r0, r4, lsl r0
 5d8:	0800382c 	stmdaeq	r0, {r2, r3, r5, fp, ip, sp}
 5dc:	0000000c 	andeq	r0, r0, ip
 5e0:	08003838 	stmdaeq	r0, {r3, r4, r5, fp, ip, sp}
 5e4:	00000020 	andeq	r0, r0, r0, lsr #32
 5e8:	08003858 	stmdaeq	r0, {r3, r4, r6, fp, ip, sp}
 5ec:	0000000c 	andeq	r0, r0, ip
 5f0:	08003864 	stmdaeq	r0, {r2, r5, r6, fp, ip, sp}
 5f4:	00000024 	andeq	r0, r0, r4, lsr #32
 5f8:	08003888 	stmdaeq	r0, {r3, r7, fp, ip, sp}
 5fc:	0000000c 	andeq	r0, r0, ip
 600:	08003894 	stmdaeq	r0, {r2, r4, r7, fp, ip, sp}
 604:	00000018 	andeq	r0, r0, r8, lsl r0
 608:	080038ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip, sp}
 60c:	0000000c 	andeq	r0, r0, ip
 610:	080038b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, ip, sp}
 614:	00000018 	andeq	r0, r0, r8, lsl r0
 618:	080038d0 	stmdaeq	r0, {r4, r6, r7, fp, ip, sp}
 61c:	0000000c 	andeq	r0, r0, ip
 620:	080038dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip, sp}
 624:	0000000c 	andeq	r0, r0, ip
 628:	080038e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, ip, sp}
 62c:	00000014 	andeq	r0, r0, r4, lsl r0
 630:	080038fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, sp}
 634:	00000014 	andeq	r0, r0, r4, lsl r0
 638:	08003910 	stmdaeq	r0, {r4, r8, fp, ip, sp}
 63c:	00000014 	andeq	r0, r0, r4, lsl r0
 640:	08003924 	stmdaeq	r0, {r2, r5, r8, fp, ip, sp}
 644:	00000010 	andeq	r0, r0, r0, lsl r0
 648:	08003934 	stmdaeq	r0, {r2, r4, r5, r8, fp, ip, sp}
 64c:	00000014 	andeq	r0, r0, r4, lsl r0
 650:	08003948 	stmdaeq	r0, {r3, r6, r8, fp, ip, sp}
 654:	00000014 	andeq	r0, r0, r4, lsl r0
 658:	0800395c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp, ip, sp}
 65c:	00000014 	andeq	r0, r0, r4, lsl r0
 660:	08003970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, sp}
 664:	00000090 	muleq	r0, r0, r0
 668:	08003a00 	stmdaeq	r0, {r9, fp, ip, sp}
 66c:	00000030 	andeq	r0, r0, r0, lsr r0
 670:	08003a30 	stmdaeq	r0, {r4, r5, r9, fp, ip, sp}
 674:	0000000c 	andeq	r0, r0, ip
 678:	08003a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, ip, sp}
 67c:	0000000c 	andeq	r0, r0, ip
 680:	08003a48 	stmdaeq	r0, {r3, r6, r9, fp, ip, sp}
 684:	0000000c 	andeq	r0, r0, ip
 688:	08003a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, ip, sp}
 68c:	00000018 	andeq	r0, r0, r8, lsl r0
 690:	08003a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, ip, sp}
 694:	0000001c 	andeq	r0, r0, ip, lsl r0
 698:	08003a88 	stmdaeq	r0, {r3, r7, r9, fp, ip, sp}
 69c:	00000018 	andeq	r0, r0, r8, lsl r0
 6a0:	08003aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip, sp}
 6a4:	00000018 	andeq	r0, r0, r8, lsl r0
 6a8:	08003ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp, ip, sp}
 6ac:	00000018 	andeq	r0, r0, r8, lsl r0
 6b0:	08003ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp, ip, sp}
 6b4:	0000000c 	andeq	r0, r0, ip
 6b8:	08003adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp}
 6bc:	00000018 	andeq	r0, r0, r8, lsl r0
 6c0:	08003af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip, sp}
 6c4:	00000018 	andeq	r0, r0, r8, lsl r0
 6c8:	08003b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, ip, sp}
 6cc:	00000018 	andeq	r0, r0, r8, lsl r0
 6d0:	08003b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, ip, sp}
 6d4:	00000018 	andeq	r0, r0, r8, lsl r0
 6d8:	08003b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, ip, sp}
 6dc:	00000018 	andeq	r0, r0, r8, lsl r0
 6e0:	08003b54 	stmdaeq	r0, {r2, r4, r6, r8, r9, fp, ip, sp}
 6e4:	00000018 	andeq	r0, r0, r8, lsl r0
 6e8:	08003b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp, ip, sp}
 6ec:	00000018 	andeq	r0, r0, r8, lsl r0
 6f0:	08003b84 	stmdaeq	r0, {r2, r7, r8, r9, fp, ip, sp}
 6f4:	00000018 	andeq	r0, r0, r8, lsl r0
 6f8:	08003b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, ip, sp}
 6fc:	00000018 	andeq	r0, r0, r8, lsl r0
 700:	08003bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, ip, sp}
 704:	00000018 	andeq	r0, r0, r8, lsl r0
 708:	08003bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, ip, sp}
 70c:	00000018 	andeq	r0, r0, r8, lsl r0
 710:	08003be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp, ip, sp}
 714:	00000018 	andeq	r0, r0, r8, lsl r0
 718:	08003bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
 71c:	00000018 	andeq	r0, r0, r8, lsl r0
 720:	08003c14 	stmdaeq	r0, {r2, r4, sl, fp, ip, sp}
 724:	00000018 	andeq	r0, r0, r8, lsl r0
 728:	08003c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, ip, sp}
 72c:	00000018 	andeq	r0, r0, r8, lsl r0
 730:	08003c44 	stmdaeq	r0, {r2, r6, sl, fp, ip, sp}
 734:	00000018 	andeq	r0, r0, r8, lsl r0
 738:	08003c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, ip, sp}
 73c:	00000034 	andeq	r0, r0, r4, lsr r0
 740:	08003c90 	stmdaeq	r0, {r4, r7, sl, fp, ip, sp}
 744:	00000010 	andeq	r0, r0, r0, lsl r0
 748:	08003ca0 	stmdaeq	r0, {r5, r7, sl, fp, ip, sp}
 74c:	00000014 	andeq	r0, r0, r4, lsl r0
 750:	08003cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, ip, sp}
 754:	0000000c 	andeq	r0, r0, ip
	...
 760:	000000fc 	strdeq	r0, [r0], -ip
 764:	94700002 	ldrbtls	r0, [r0], #-2
 768:	00040000 	andeq	r0, r4, r0
 76c:	00000000 	andeq	r0, r0, r0
 770:	08003cc0 	stmdaeq	r0, {r6, r7, sl, fp, ip, sp}
 774:	0000010c 	andeq	r0, r0, ip, lsl #2
 778:	08003dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, ip, sp}
 77c:	000000c4 	andeq	r0, r0, r4, asr #1
 780:	08003e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip, sp}
 784:	00000016 	andeq	r0, r0, r6, lsl r0
 788:	08003ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, ip, sp}
 78c:	00000022 	andeq	r0, r0, r2, lsr #32
 790:	08003ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, ip, sp}
 794:	0000000c 	andeq	r0, r0, ip
 798:	08003ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp}
 79c:	0000001a 	andeq	r0, r0, sl, lsl r0
 7a0:	08003ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, ip, sp}
 7a4:	00000012 	andeq	r0, r0, r2, lsl r0
 7a8:	08003f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip, sp}
 7ac:	0000001a 	andeq	r0, r0, sl, lsl r0
 7b0:	08003f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, ip, sp}
 7b4:	0000001a 	andeq	r0, r0, sl, lsl r0
 7b8:	08003f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, ip, sp}
 7bc:	00000008 	andeq	r0, r0, r8
 7c0:	08003f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, ip, sp}
 7c4:	00000008 	andeq	r0, r0, r8
 7c8:	08003f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, ip, sp}
 7cc:	00000016 	andeq	r0, r0, r6, lsl r0
 7d0:	08003f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, ip, sp}
 7d4:	0000001a 	andeq	r0, r0, sl, lsl r0
 7d8:	08003f84 	stmdaeq	r0, {r2, r7, r8, r9, sl, fp, ip, sp}
 7dc:	00000016 	andeq	r0, r0, r6, lsl r0
 7e0:	08003f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip, sp}
 7e4:	00000016 	andeq	r0, r0, r6, lsl r0
 7e8:	08003fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, ip, sp}
 7ec:	0000001a 	andeq	r0, r0, sl, lsl r0
 7f0:	08003fd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, fp, ip, sp}
 7f4:	0000000c 	andeq	r0, r0, ip
 7f8:	08003fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, sp}
 7fc:	0000001a 	andeq	r0, r0, sl, lsl r0
 800:	08003ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
 804:	00000012 	andeq	r0, r0, r2, lsl r0
 808:	0800400c 	stmdaeq	r0, {r2, r3, lr}
 80c:	0000001a 	andeq	r0, r0, sl, lsl r0
 810:	08004028 	stmdaeq	r0, {r3, r5, lr}
 814:	0000001a 	andeq	r0, r0, sl, lsl r0
 818:	08004044 	stmdaeq	r0, {r2, r6, lr}
 81c:	00000016 	andeq	r0, r0, r6, lsl r0
 820:	0800405c 	stmdaeq	r0, {r2, r3, r4, r6, lr}
 824:	0000001a 	andeq	r0, r0, sl, lsl r0
 828:	08004078 	stmdaeq	r0, {r3, r4, r5, r6, lr}
 82c:	00000014 	andeq	r0, r0, r4, lsl r0
 830:	0800408c 	stmdaeq	r0, {r2, r3, r7, lr}
 834:	0000003a 	andeq	r0, r0, sl, lsr r0
 838:	080040c8 	stmdaeq	r0, {r3, r6, r7, lr}
 83c:	0000000c 	andeq	r0, r0, ip
 840:	080040d4 	stmdaeq	r0, {r2, r4, r6, r7, lr}
 844:	00000008 	andeq	r0, r0, r8
 848:	080040dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, lr}
 84c:	0000004c 	andeq	r0, r0, ip, asr #32
 850:	08004128 	stmdaeq	r0, {r3, r5, r8, lr}
 854:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 860:	0000004c 	andeq	r0, r0, ip, asr #32
 864:	a01b0002 	andsge	r0, fp, r2
 868:	00040000 	andeq	r0, r4, r0
 86c:	00000000 	andeq	r0, r0, r0
 870:	08004138 	stmdaeq	r0, {r3, r4, r5, r8, lr}
 874:	0000001a 	andeq	r0, r0, sl, lsl r0
 878:	08004154 	stmdaeq	r0, {r2, r4, r6, r8, lr}
 87c:	0000000c 	andeq	r0, r0, ip
 880:	08004160 	stmdaeq	r0, {r5, r6, r8, lr}
 884:	0000000c 	andeq	r0, r0, ip
 888:	0800416c 	stmdaeq	r0, {r2, r3, r5, r6, r8, lr}
 88c:	0000002e 	andeq	r0, r0, lr, lsr #32
 890:	0800419c 	stmdaeq	r0, {r2, r3, r4, r7, r8, lr}
 894:	0000000c 	andeq	r0, r0, ip
 898:	080041a8 	stmdaeq	r0, {r3, r5, r7, r8, lr}
 89c:	0000000c 	andeq	r0, r0, ip
 8a0:	080041b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, lr}
 8a4:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 8b0:	0000012c 	andeq	r0, r0, ip, lsr #2
 8b4:	a2f30002 	rscsge	r0, r3, #2
 8b8:	00040000 	andeq	r0, r4, r0
 8bc:	00000000 	andeq	r0, r0, r0
 8c0:	080041c4 	stmdaeq	r0, {r2, r6, r7, r8, lr}
 8c4:	0000006c 	andeq	r0, r0, ip, rrx
 8c8:	08004230 	stmdaeq	r0, {r4, r5, r9, lr}
 8cc:	000000e0 	andeq	r0, r0, r0, ror #1
 8d0:	08004310 	stmdaeq	r0, {r4, r8, r9, lr}
 8d4:	00000022 	andeq	r0, r0, r2, lsr #32
 8d8:	08004334 	stmdaeq	r0, {r2, r4, r5, r8, r9, lr}
 8dc:	0000001a 	andeq	r0, r0, sl, lsl r0
 8e0:	08004350 	stmdaeq	r0, {r4, r6, r8, r9, lr}
 8e4:	0000001a 	andeq	r0, r0, sl, lsl r0
 8e8:	0800436c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, lr}
 8ec:	00000012 	andeq	r0, r0, r2, lsl r0
 8f0:	08004380 	stmdaeq	r0, {r7, r8, r9, lr}
 8f4:	0000001a 	andeq	r0, r0, sl, lsl r0
 8f8:	0800439c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, lr}
 8fc:	0000001a 	andeq	r0, r0, sl, lsl r0
 900:	080043b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, lr}
 904:	00000012 	andeq	r0, r0, r2, lsl r0
 908:	080043cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, lr}
 90c:	0000001a 	andeq	r0, r0, sl, lsl r0
 910:	080043e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, lr}
 914:	00000012 	andeq	r0, r0, r2, lsl r0
 918:	080043fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, lr}
 91c:	0000001a 	andeq	r0, r0, sl, lsl r0
 920:	08004418 	stmdaeq	r0, {r3, r4, sl, lr}
 924:	0000001a 	andeq	r0, r0, sl, lsl r0
 928:	08004434 	stmdaeq	r0, {r2, r4, r5, sl, lr}
 92c:	0000001a 	andeq	r0, r0, sl, lsl r0
 930:	08004450 	stmdaeq	r0, {r4, r6, sl, lr}
 934:	0000001a 	andeq	r0, r0, sl, lsl r0
 938:	0800446c 	stmdaeq	r0, {r2, r3, r5, r6, sl, lr}
 93c:	0000001e 	andeq	r0, r0, lr, lsl r0
 940:	0800448c 	stmdaeq	r0, {r2, r3, r7, sl, lr}
 944:	0000001e 	andeq	r0, r0, lr, lsl r0
 948:	080044ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, lr}
 94c:	0000001e 	andeq	r0, r0, lr, lsl r0
 950:	080044cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, lr}
 954:	0000001a 	andeq	r0, r0, sl, lsl r0
 958:	080044e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, lr}
 95c:	00000004 	andeq	r0, r0, r4
 960:	080044ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, lr}
 964:	00000006 	andeq	r0, r0, r6
 968:	080044f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, lr}
 96c:	0000001a 	andeq	r0, r0, sl, lsl r0
 970:	08004510 	stmdaeq	r0, {r4, r8, sl, lr}
 974:	0000001e 	andeq	r0, r0, lr, lsl r0
 978:	08004530 	stmdaeq	r0, {r4, r5, r8, sl, lr}
 97c:	0000001a 	andeq	r0, r0, sl, lsl r0
 980:	0800454c 	stmdaeq	r0, {r2, r3, r6, r8, sl, lr}
 984:	00000008 	andeq	r0, r0, r8
 988:	08004554 	stmdaeq	r0, {r2, r4, r6, r8, sl, lr}
 98c:	0000001a 	andeq	r0, r0, sl, lsl r0
 990:	08004570 	stmdaeq	r0, {r4, r5, r6, r8, sl, lr}
 994:	0000001a 	andeq	r0, r0, sl, lsl r0
 998:	0800458c 	stmdaeq	r0, {r2, r3, r7, r8, sl, lr}
 99c:	00000018 	andeq	r0, r0, r8, lsl r0
 9a0:	080045a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, lr}
 9a4:	00000014 	andeq	r0, r0, r4, lsl r0
 9a8:	080045b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, lr}
 9ac:	00000018 	andeq	r0, r0, r8, lsl r0
 9b0:	080045d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, lr}
 9b4:	00000010 	andeq	r0, r0, r0, lsl r0
 9b8:	080045e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, lr}
 9bc:	00000036 	andeq	r0, r0, r6, lsr r0
 9c0:	08004618 	stmdaeq	r0, {r3, r4, r9, sl, lr}
 9c4:	00000008 	andeq	r0, r0, r8
 9c8:	08004620 	stmdaeq	r0, {r5, r9, sl, lr}
 9cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 9d0:	0800463c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, lr}
 9d4:	00000008 	andeq	r0, r0, r8
	...
 9e0:	000000ac 	andeq	r0, r0, ip, lsr #1
 9e4:	af460002 	svcge	0x00460002
 9e8:	00040000 	andeq	r0, r4, r0
 9ec:	00000000 	andeq	r0, r0, r0
 9f0:	08004644 	stmdaeq	r0, {r2, r6, r9, sl, lr}
 9f4:	00000130 	andeq	r0, r0, r0, lsr r1
 9f8:	08004774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, lr}
 9fc:	00000070 	andeq	r0, r0, r0, ror r0
 a00:	080047e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, lr}
 a04:	00000022 	andeq	r0, r0, r2, lsr #32
 a08:	08004808 	stmdaeq	r0, {r3, fp, lr}
 a0c:	00000014 	andeq	r0, r0, r4, lsl r0
 a10:	0800481c 	stmdaeq	r0, {r2, r3, r4, fp, lr}
 a14:	00000014 	andeq	r0, r0, r4, lsl r0
 a18:	08004830 	stmdaeq	r0, {r4, r5, fp, lr}
 a1c:	00000014 	andeq	r0, r0, r4, lsl r0
 a20:	08004844 	stmdaeq	r0, {r2, r6, fp, lr}
 a24:	00000004 	andeq	r0, r0, r4
 a28:	08004848 	stmdaeq	r0, {r3, r6, fp, lr}
 a2c:	00000006 	andeq	r0, r0, r6
 a30:	08004850 	stmdaeq	r0, {r4, r6, fp, lr}
 a34:	00000018 	andeq	r0, r0, r8, lsl r0
 a38:	08004868 	stmdaeq	r0, {r3, r5, r6, fp, lr}
 a3c:	00000014 	andeq	r0, r0, r4, lsl r0
 a40:	0800487c 	stmdaeq	r0, {r2, r3, r4, r5, r6, fp, lr}
 a44:	0000000a 	andeq	r0, r0, sl
 a48:	08004888 	stmdaeq	r0, {r3, r7, fp, lr}
 a4c:	00000008 	andeq	r0, r0, r8
 a50:	08004890 	stmdaeq	r0, {r4, r7, fp, lr}
 a54:	00000008 	andeq	r0, r0, r8
 a58:	08004898 	stmdaeq	r0, {r3, r4, r7, fp, lr}
 a5c:	00000008 	andeq	r0, r0, r8
 a60:	080048a0 	stmdaeq	r0, {r5, r7, fp, lr}
 a64:	0000003c 	andeq	r0, r0, ip, lsr r0
 a68:	080048dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, lr}
 a6c:	00000034 	andeq	r0, r0, r4, lsr r0
 a70:	08004910 	stmdaeq	r0, {r4, r8, fp, lr}
 a74:	00000040 	andeq	r0, r0, r0, asr #32
 a78:	08004950 	stmdaeq	r0, {r4, r6, r8, fp, lr}
 a7c:	00000054 	andeq	r0, r0, r4, asr r0
 a80:	080049a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, lr}
 a84:	00000034 	andeq	r0, r0, r4, lsr r0
	...
 a90:	000000dc 	ldrdeq	r0, [r0], -ip
 a94:	b6810002 	strlt	r0, [r1], r2
 a98:	00040000 	andeq	r0, r4, r0
 a9c:	00000000 	andeq	r0, r0, r0
 aa0:	080049d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp, lr}
 aa4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 aa8:	08004aa8 	stmdaeq	r0, {r3, r5, r7, r9, fp, lr}
 aac:	00000052 	andeq	r0, r0, r2, asr r0
 ab0:	08004afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, lr}
 ab4:	000000ec 	andeq	r0, r0, ip, ror #1
 ab8:	08004be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, lr}
 abc:	00000018 	andeq	r0, r0, r8, lsl r0
 ac0:	08004c00 	stmdaeq	r0, {sl, fp, lr}
 ac4:	0000000e 	andeq	r0, r0, lr
 ac8:	08004c10 	stmdaeq	r0, {r4, sl, fp, lr}
 acc:	0000001a 	andeq	r0, r0, sl, lsl r0
 ad0:	08004c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, lr}
 ad4:	0000001a 	andeq	r0, r0, sl, lsl r0
 ad8:	08004c48 	stmdaeq	r0, {r3, r6, sl, fp, lr}
 adc:	00000016 	andeq	r0, r0, r6, lsl r0
 ae0:	08004c60 	stmdaeq	r0, {r5, r6, sl, fp, lr}
 ae4:	0000001e 	andeq	r0, r0, lr, lsl r0
 ae8:	08004c80 	stmdaeq	r0, {r7, sl, fp, lr}
 aec:	00000020 	andeq	r0, r0, r0, lsr #32
 af0:	08004ca0 	stmdaeq	r0, {r5, r7, sl, fp, lr}
 af4:	0000001a 	andeq	r0, r0, sl, lsl r0
 af8:	08004cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, lr}
 afc:	0000001a 	andeq	r0, r0, sl, lsl r0
 b00:	08004cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, lr}
 b04:	00000046 	andeq	r0, r0, r6, asr #32
 b08:	08004d20 	stmdaeq	r0, {r5, r8, sl, fp, lr}
 b0c:	00000006 	andeq	r0, r0, r6
 b10:	08004d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, lr}
 b14:	00000004 	andeq	r0, r0, r4
 b18:	08004d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp, lr}
 b1c:	0000001a 	andeq	r0, r0, sl, lsl r0
 b20:	08004d48 	stmdaeq	r0, {r3, r6, r8, sl, fp, lr}
 b24:	0000000c 	andeq	r0, r0, ip
 b28:	08004d54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, lr}
 b2c:	0000000c 	andeq	r0, r0, ip
 b30:	08004d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, lr}
 b34:	00000006 	andeq	r0, r0, r6
 b38:	08004d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, lr}
 b3c:	00000014 	andeq	r0, r0, r4, lsl r0
 b40:	08004d7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, fp, lr}
 b44:	0000001e 	andeq	r0, r0, lr, lsl r0
 b48:	08004d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, lr}
 b4c:	0000000c 	andeq	r0, r0, ip
 b50:	08004da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, lr}
 b54:	00000008 	andeq	r0, r0, r8
 b58:	08004db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp, lr}
 b5c:	0000002a 	andeq	r0, r0, sl, lsr #32
 b60:	08004ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, lr}
 b64:	00000012 	andeq	r0, r0, r2, lsl r0
	...
 b70:	00000054 	andeq	r0, r0, r4, asr r0
 b74:	c2fd0002 	rscsgt	r0, sp, #2
 b78:	00040000 	andeq	r0, r4, r0
 b7c:	00000000 	andeq	r0, r0, r0
 b80:	08004df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp, lr}
 b84:	0000001c 	andeq	r0, r0, ip, lsl r0
 b88:	08004e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, lr}
 b8c:	00000080 	andeq	r0, r0, r0, lsl #1
 b90:	08004e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, lr}
 b94:	0000000e 	andeq	r0, r0, lr
 b98:	08004e9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, fp, lr}
 b9c:	00000010 	andeq	r0, r0, r0, lsl r0
 ba0:	08004eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, lr}
 ba4:	00000014 	andeq	r0, r0, r4, lsl r0
 ba8:	08004ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, lr}
 bac:	0000000c 	andeq	r0, r0, ip
 bb0:	08004ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, lr}
 bb4:	00000014 	andeq	r0, r0, r4, lsl r0
 bb8:	08004ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, lr}
 bbc:	0000000c 	andeq	r0, r0, ip
	...
 bc8:	0000005c 	andeq	r0, r0, ip, asr r0
 bcc:	c6390002 	ldrtgt	r0, [r9], -r2
 bd0:	00040000 	andeq	r0, r4, r0
 bd4:	00000000 	andeq	r0, r0, r0
 bd8:	08004eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, lr}
 bdc:	0000004c 	andeq	r0, r0, ip, asr #32
 be0:	08004f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, lr}
 be4:	00000018 	andeq	r0, r0, r8, lsl r0
 be8:	08004f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, lr}
 bec:	00000018 	andeq	r0, r0, r8, lsl r0
 bf0:	08004f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, lr}
 bf4:	0000001c 	andeq	r0, r0, ip, lsl r0
 bf8:	08004f84 	stmdaeq	r0, {r2, r7, r8, r9, sl, fp, lr}
 bfc:	00000084 	andeq	r0, r0, r4, lsl #1
 c00:	08005008 	stmdaeq	r0, {r3, ip, lr}
 c04:	00000014 	andeq	r0, r0, r4, lsl r0
 c08:	0800501c 	stmdaeq	r0, {r2, r3, r4, ip, lr}
 c0c:	000000a0 	andeq	r0, r0, r0, lsr #1
 c10:	080050bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, lr}
 c14:	00000174 	andeq	r0, r0, r4, ror r1
 c18:	08005230 	stmdaeq	r0, {r4, r5, r9, ip, lr}
 c1c:	00000030 	andeq	r0, r0, r0, lsr r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       4:	00000000 	andeq	r0, r0, r0
       8:	080002f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9}
       c:	08000338 	stmdaeq	r0, {r3, r4, r5, r8, r9}
      10:	08000338 	stmdaeq	r0, {r3, r4, r5, r8, r9}
      14:	0800033a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9}
	...
      20:	080003a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9}
      24:	080003a8 	stmdaeq	r0, {r3, r5, r7, r8, r9}
      28:	080003aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9}
      2c:	080003b0 	stmdaeq	r0, {r4, r5, r7, r8, r9}
	...
      38:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
      3c:	0800036c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9}
      40:	0800036c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9}
      44:	08000374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9}
      48:	08000374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9}
      4c:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
      50:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
      54:	080003e0 	stmdaeq	r0, {r5, r6, r7, r8, r9}
	...
      60:	08000418 	stmdaeq	r0, {r3, r4, sl}
      64:	08000458 	stmdaeq	r0, {r3, r4, r6, sl}
      68:	08000464 	stmdaeq	r0, {r2, r5, r6, sl}
      6c:	080004e0 	stmdaeq	r0, {r5, r6, r7, sl}
	...
      78:	080003e0 	stmdaeq	r0, {r5, r6, r7, r8, r9}
      7c:	080004e0 	stmdaeq	r0, {r5, r6, r7, sl}
      80:	080004e0 	stmdaeq	r0, {r5, r6, r7, sl}
      84:	08000550 	stmdaeq	r0, {r4, r6, r8, sl}
	...
      90:	08000550 	stmdaeq	r0, {r4, r6, r8, sl}
      94:	08000552 	stmdaeq	r0, {r1, r4, r6, r8, sl}
      98:	08000554 	stmdaeq	r0, {r2, r4, r6, r8, sl}
      9c:	08000556 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl}
      a0:	08000558 	stmdaeq	r0, {r3, r4, r6, r8, sl}
      a4:	0800055a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl}
      a8:	0800055c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl}
      ac:	0800055e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, sl}
      b0:	08000560 	stmdaeq	r0, {r5, r6, r8, sl}
      b4:	08000562 	stmdaeq	r0, {r1, r5, r6, r8, sl}
      b8:	08000564 	stmdaeq	r0, {r2, r5, r6, r8, sl}
      bc:	08000566 	stmdaeq	r0, {r1, r2, r5, r6, r8, sl}
      c0:	08000568 	stmdaeq	r0, {r3, r5, r6, r8, sl}
      c4:	0800056a 	stmdaeq	r0, {r1, r3, r5, r6, r8, sl}
	...
      d0:	080005d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl}
      d4:	080005de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sl}
      d8:	080005e0 	stmdaeq	r0, {r5, r6, r7, r8, sl}
      dc:	0800060a 	stmdaeq	r0, {r1, r3, r9, sl}
	...
      e8:	08000694 	stmdaeq	r0, {r2, r4, r7, r9, sl}
      ec:	08000696 	stmdaeq	r0, {r1, r2, r4, r7, r9, sl}
      f0:	08000698 	stmdaeq	r0, {r3, r4, r7, r9, sl}
      f4:	080006d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl}
	...
     100:	080006da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl}
     104:	08000788 	stmdaeq	r0, {r3, r7, r8, r9, sl}
     108:	0800078a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl}
     10c:	0800078e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, sl}
     110:	080007c0 	stmdaeq	r0, {r6, r7, r8, r9, sl}
     114:	080007e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, sl}
	...
     120:	080006e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl}
     124:	080006e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl}
     128:	080007c0 	stmdaeq	r0, {r6, r7, r8, r9, sl}
     12c:	080007ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, sl}
     130:	080007cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl}
     134:	080007d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl}
	...
     140:	080007e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl}
     144:	08000806 	stmdaeq	r0, {r1, r2, fp}
     148:	0800080a 	stmdaeq	r0, {r1, r3, fp}
     14c:	0800080c 	stmdaeq	r0, {r2, r3, fp}
	...
     158:	0800056c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl}
     15c:	08000638 	stmdaeq	r0, {r3, r4, r5, r9, sl}
     160:	08000638 	stmdaeq	r0, {r3, r4, r5, r9, sl}
     164:	08000684 	stmdaeq	r0, {r2, r7, r9, sl}
     168:	08000684 	stmdaeq	r0, {r2, r7, r9, sl}
     16c:	0800083c 	stmdaeq	r0, {r2, r3, r4, r5, fp}
     170:	0800083c 	stmdaeq	r0, {r2, r3, r4, r5, fp}
     174:	08000870 	stmdaeq	r0, {r4, r5, r6, fp}
	...
     180:	080008ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, fp}
     184:	080008d0 	stmdaeq	r0, {r4, r6, r7, fp}
     188:	080008dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp}
     18c:	080008ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, fp}
     190:	080008f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp}
     194:	0800091a 	stmdaeq	r0, {r1, r3, r4, r8, fp}
	...
     1a0:	080008bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp}
     1a4:	080008c6 	stmdaeq	r0, {r1, r2, r6, r7, fp}
     1a8:	080008dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp}
     1ac:	080008e4 	stmdaeq	r0, {r2, r5, r6, r7, fp}
	...
     1b8:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
     1bc:	08000942 	stmdaeq	r0, {r1, r6, r8, fp}
     1c0:	08000950 	stmdaeq	r0, {r4, r6, r8, fp}
     1c4:	0800095a 	stmdaeq	r0, {r1, r3, r4, r6, r8, fp}
	...
     1d0:	08000b12 	stmdaeq	r0, {r1, r4, r8, r9, fp}
     1d4:	08000b16 	stmdaeq	r0, {r1, r2, r4, r8, r9, fp}
     1d8:	08000b1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, fp}
     1dc:	08000b72 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, fp}
     1e0:	08000b76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, fp}
     1e4:	08000b82 	stmdaeq	r0, {r1, r7, r8, r9, fp}
     1e8:	08000b86 	stmdaeq	r0, {r1, r2, r7, r8, r9, fp}
     1ec:	08000b8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, fp}
	...
     1f8:	08000870 	stmdaeq	r0, {r4, r5, r6, fp}
     1fc:	0800088a 	stmdaeq	r0, {r1, r3, r7, fp}
     200:	0800088c 	stmdaeq	r0, {r2, r3, r7, fp}
     204:	0800095a 	stmdaeq	r0, {r1, r3, r4, r6, r8, fp}
     208:	0800095c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp}
     20c:	08000982 	stmdaeq	r0, {r1, r7, r8, fp}
     210:	08000984 	stmdaeq	r0, {r2, r7, r8, fp}
     214:	080009aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, fp}
     218:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
     21c:	08000a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp}
     220:	08000a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp}
     224:	08000ace 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, fp}
     228:	08000ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp}
     22c:	08000b10 	stmdaeq	r0, {r4, r8, r9, fp}
     230:	08000b10 	stmdaeq	r0, {r4, r8, r9, fp}
     234:	08000b8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, fp}
     238:	08000b8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, fp}
     23c:	08000b92 	stmdaeq	r0, {r1, r4, r7, r8, r9, fp}
	...
     248:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
     24c:	08000baa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, fp}
     250:	08000bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp}
     254:	08000bb2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, fp}
     258:	08000bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp}
     25c:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
     260:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
     264:	08000c02 	stmdaeq	r0, {r1, sl, fp}
     268:	08000c04 	stmdaeq	r0, {r2, sl, fp}
     26c:	08000c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp}
	...
     278:	08000dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp}
     27c:	08000e30 	stmdaeq	r0, {r4, r5, r9, sl, fp}
     280:	08000e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp}
     284:	08000e48 	stmdaeq	r0, {r3, r6, r9, sl, fp}
	...
     290:	08000ece 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, fp}
     294:	08000ede 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, fp}
     298:	08000fa6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, fp}
     29c:	08000faa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, fp}
	...
     2a8:	08000ede 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, fp}
     2ac:	08000f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp}
     2b0:	08000f1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, fp}
     2b4:	08000f66 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, fp}
	...
     2c0:	08000f7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl, fp}
     2c4:	08000fa2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, fp}
     2c8:	08001064 	stmdaeq	r0, {r2, r5, r6, ip}
     2cc:	08001076 	stmdaeq	r0, {r1, r2, r4, r5, r6, ip}
     2d0:	08001078 	stmdaeq	r0, {r3, r4, r5, r6, ip}
     2d4:	0800107c 	stmdaeq	r0, {r2, r3, r4, r5, r6, ip}
     2d8:	0800108a 	stmdaeq	r0, {r1, r3, r7, ip}
     2dc:	080010ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, ip}
	...
     2e8:	080011a8 	stmdaeq	r0, {r3, r5, r7, r8, ip}
     2ec:	080011b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, ip}
     2f0:	080011d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, ip}
     2f4:	080011f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, ip}
     2f8:	08001212 	stmdaeq	r0, {r1, r4, r9, ip}
     2fc:	08001214 	stmdaeq	r0, {r2, r4, r9, ip}
     300:	08001216 	stmdaeq	r0, {r1, r2, r4, r9, ip}
     304:	0800124a 	stmdaeq	r0, {r1, r3, r6, r9, ip}
     308:	0800126e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, ip}
     30c:	08001278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip}
	...
     318:	08001302 	stmdaeq	r0, {r1, r8, r9, ip}
     31c:	08001310 	stmdaeq	r0, {r4, r8, r9, ip}
     320:	080013e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, ip}
     324:	080013e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip}
	...
     330:	08001642 	stmdaeq	r0, {r1, r6, r9, sl, ip}
     334:	08001678 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl, ip}
     338:	0800168a 	stmdaeq	r0, {r1, r3, r7, r9, sl, ip}
     33c:	0800169e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, sl, ip}
     340:	080016a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, ip}
     344:	080016d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip}
	...
     350:	080017f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, ip}
     354:	08001870 	stmdaeq	r0, {r4, r5, r6, fp, ip}
     358:	08001874 	stmdaeq	r0, {r2, r4, r5, r6, fp, ip}
     35c:	08001878 	stmdaeq	r0, {r3, r4, r5, r6, fp, ip}
	...
     368:	08000c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp}
     36c:	08000c52 	stmdaeq	r0, {r1, r4, r6, sl, fp}
     370:	08000c54 	stmdaeq	r0, {r2, r4, r6, sl, fp}
     374:	08000cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp}
     378:	08000cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp}
     37c:	08000d4a 	stmdaeq	r0, {r1, r3, r6, r8, sl, fp}
     380:	08000d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp}
     384:	08000dc2 	stmdaeq	r0, {r1, r6, r7, r8, sl, fp}
     388:	08000dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp}
     38c:	08000e48 	stmdaeq	r0, {r3, r6, r9, sl, fp}
     390:	08000e48 	stmdaeq	r0, {r3, r6, r9, sl, fp}
     394:	080010e0 	stmdaeq	r0, {r5, r6, r7, ip}
     398:	080010e0 	stmdaeq	r0, {r5, r6, r7, ip}
     39c:	08001130 	stmdaeq	r0, {r4, r5, r8, ip}
     3a0:	08001130 	stmdaeq	r0, {r4, r5, r8, ip}
     3a4:	08001164 	stmdaeq	r0, {r2, r5, r6, r8, ip}
     3a8:	08001164 	stmdaeq	r0, {r2, r5, r6, r8, ip}
     3ac:	08001286 	stmdaeq	r0, {r1, r2, r7, r9, ip}
     3b0:	08001288 	stmdaeq	r0, {r3, r7, r9, ip}
     3b4:	080014e2 	stmdaeq	r0, {r1, r5, r6, r7, sl, ip}
     3b8:	080014e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip}
     3bc:	08001520 	stmdaeq	r0, {r5, r8, sl, ip}
     3c0:	08001520 	stmdaeq	r0, {r5, r8, sl, ip}
     3c4:	080015a2 	stmdaeq	r0, {r1, r5, r7, r8, sl, ip}
     3c8:	080015a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip}
     3cc:	080015f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip}
     3d0:	080015f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip}
     3d4:	0800160a 	stmdaeq	r0, {r1, r3, r9, sl, ip}
     3d8:	0800160c 	stmdaeq	r0, {r2, r3, r9, sl, ip}
     3dc:	0800162a 	stmdaeq	r0, {r1, r3, r5, r9, sl, ip}
     3e0:	0800162c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip}
     3e4:	0800163a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl, ip}
     3e8:	0800163c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip}
     3ec:	080016d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip}
     3f0:	080016d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip}
     3f4:	080016d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, ip}
     3f8:	080016d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, ip}
     3fc:	080016d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip}
     400:	080016d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip}
     404:	080016de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sl, ip}
     408:	080016e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, ip}
     40c:	080016f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl, ip}
     410:	080016f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, ip}
     414:	0800170e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, ip}
     418:	08001710 	stmdaeq	r0, {r4, r8, r9, sl, ip}
     41c:	08001768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip}
     420:	08001768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip}
     424:	080017c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip}
     428:	080017c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip}
     42c:	08001878 	stmdaeq	r0, {r3, r4, r5, r6, fp, ip}
	...
     438:	080018fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, fp, ip}
     43c:	08001922 	stmdaeq	r0, {r1, r5, r8, fp, ip}
     440:	08001a46 	stmdaeq	r0, {r1, r2, r6, r9, fp, ip}
     444:	08001a5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, fp, ip}
	...
     450:	08001922 	stmdaeq	r0, {r1, r5, r8, fp, ip}
     454:	08001a14 	stmdaeq	r0, {r2, r4, r9, fp, ip}
     458:	08001a20 	stmdaeq	r0, {r5, r9, fp, ip}
     45c:	08001a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, ip}
     460:	08001a30 	stmdaeq	r0, {r4, r5, r9, fp, ip}
     464:	08001a32 	stmdaeq	r0, {r1, r4, r5, r9, fp, ip}
     468:	08001a36 	stmdaeq	r0, {r1, r2, r4, r5, r9, fp, ip}
     46c:	08001a46 	stmdaeq	r0, {r1, r2, r6, r9, fp, ip}
	...
     478:	08001922 	stmdaeq	r0, {r1, r5, r8, fp, ip}
     47c:	08001924 	stmdaeq	r0, {r2, r5, r8, fp, ip}
     480:	08001926 	stmdaeq	r0, {r1, r2, r5, r8, fp, ip}
     484:	0800192a 	stmdaeq	r0, {r1, r3, r5, r8, fp, ip}
     488:	08001932 	stmdaeq	r0, {r1, r4, r5, r8, fp, ip}
     48c:	08001934 	stmdaeq	r0, {r2, r4, r5, r8, fp, ip}
     490:	0800193c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip}
     494:	080019ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, fp, ip}
     498:	080019b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp, ip}
     49c:	080019b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, fp, ip}
	...
     4a8:	08001d32 	stmdaeq	r0, {r1, r4, r5, r8, sl, fp, ip}
     4ac:	08001d3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, fp, ip}
     4b0:	08001d4a 	stmdaeq	r0, {r1, r3, r6, r8, sl, fp, ip}
     4b4:	08001d52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp, ip}
	...
     4c0:	08001dae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, sl, fp, ip}
     4c4:	08001db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, ip}
     4c8:	08001db6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, fp, ip}
     4cc:	08001db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, ip}
     4d0:	08001dca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sl, fp, ip}
     4d4:	08001dd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, sl, fp, ip}
	...
     4e0:	08001e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip}
     4e4:	08001f16 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl, fp, ip}
     4e8:	08001f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, ip}
     4ec:	08001f42 	stmdaeq	r0, {r1, r6, r8, r9, sl, fp, ip}
     4f0:	08001f46 	stmdaeq	r0, {r1, r2, r6, r8, r9, sl, fp, ip}
     4f4:	08001f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip}
	...
     500:	08001e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip}
     504:	08001e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip}
     508:	08001f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, ip}
     50c:	08001f42 	stmdaeq	r0, {r1, r6, r8, r9, sl, fp, ip}
     510:	08001f46 	stmdaeq	r0, {r1, r2, r6, r8, r9, sl, fp, ip}
     514:	08001f4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, fp, ip}
	...
     520:	08001e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip}
     524:	08001f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, ip}
     528:	08001f4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, fp, ip}
     52c:	08001f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip}
	...
     538:	08001e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, ip}
     53c:	08001e7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl, fp, ip}
     540:	08001e82 	stmdaeq	r0, {r1, r7, r9, sl, fp, ip}
     544:	08001ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip}
     548:	08001ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip}
     54c:	08001eb2 	stmdaeq	r0, {r1, r4, r5, r7, r9, sl, fp, ip}
     550:	08001eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, ip}
     554:	08001eb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, sl, fp, ip}
     558:	08001eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp, ip}
     55c:	08001eba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, fp, ip}
     560:	08001ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip}
     564:	08001ebe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, fp, ip}
	...
     570:	08001ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
     574:	0800207e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sp}
     578:	080020ac 	stmdaeq	r0, {r2, r3, r5, r7, sp}
     57c:	080020ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sp}
     580:	080020be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, sp}
     584:	08002128 	stmdaeq	r0, {r3, r5, r8, sp}
	...
     590:	080020ac 	stmdaeq	r0, {r2, r3, r5, r7, sp}
     594:	080020ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sp}
     598:	080020be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, sp}
     59c:	080020e8 	stmdaeq	r0, {r3, r5, r6, r7, sp}
     5a0:	080020ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sp}
     5a4:	08002128 	stmdaeq	r0, {r3, r5, r8, sp}
	...
     5b0:	080020d0 	stmdaeq	r0, {r4, r6, r7, sp}
     5b4:	080020e8 	stmdaeq	r0, {r3, r5, r6, r7, sp}
     5b8:	080020ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sp}
     5bc:	08002128 	stmdaeq	r0, {r3, r5, r8, sp}
	...
     5c8:	08002222 	stmdaeq	r0, {r1, r5, r9, sp}
     5cc:	08002224 	stmdaeq	r0, {r2, r5, r9, sp}
     5d0:	08002228 	stmdaeq	r0, {r3, r5, r9, sp}
     5d4:	0800222c 	stmdaeq	r0, {r2, r3, r5, r9, sp}
	...
     5e0:	08002224 	stmdaeq	r0, {r2, r5, r9, sp}
     5e4:	08002228 	stmdaeq	r0, {r3, r5, r9, sp}
     5e8:	0800222c 	stmdaeq	r0, {r2, r3, r5, r9, sp}
     5ec:	0800226a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sp}
     5f0:	08002272 	stmdaeq	r0, {r1, r4, r5, r6, r9, sp}
     5f4:	08002278 	stmdaeq	r0, {r3, r4, r5, r6, r9, sp}
     5f8:	0800229a 	stmdaeq	r0, {r1, r3, r4, r7, r9, sp}
     5fc:	080022c0 	stmdaeq	r0, {r6, r7, r9, sp}
	...
     608:	0800224a 	stmdaeq	r0, {r1, r3, r6, r9, sp}
     60c:	0800226a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sp}
     610:	0800229a 	stmdaeq	r0, {r1, r3, r4, r7, r9, sp}
     614:	080022c0 	stmdaeq	r0, {r6, r7, r9, sp}
	...
     620:	080022d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sp}
     624:	080022d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sp}
     628:	080022da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sp}
     62c:	080022de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sp}
	...
     638:	080022ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sp}
     63c:	0800230a 	stmdaeq	r0, {r1, r3, r8, r9, sp}
     640:	0800231a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sp}
     644:	08002340 	stmdaeq	r0, {r6, r8, r9, sp}
	...
     650:	08002352 	stmdaeq	r0, {r1, r4, r6, r8, r9, sp}
     654:	0800236a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sp}
     658:	08002378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sp}
     65c:	080023c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sp}
	...
     668:	08002356 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sp}
     66c:	08002358 	stmdaeq	r0, {r3, r4, r6, r8, r9, sp}
     670:	0800235a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sp}
     674:	0800235e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, sp}
	...
     680:	080023c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sp}
     684:	080023ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, sp}
     688:	080023ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, sp}
     68c:	080023d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sp}
     690:	080023d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sp}
     694:	080023d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, sp}
	...
     6a0:	080023f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sp}
     6a4:	08002400 	stmdaeq	r0, {sl, sp}
     6a8:	0800245a 	stmdaeq	r0, {r1, r3, r4, r6, sl, sp}
     6ac:	08002478 	stmdaeq	r0, {r3, r4, r5, r6, sl, sp}
     6b0:	0800247a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, sp}
     6b4:	0800247c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, sp}
     6b8:	08002480 	stmdaeq	r0, {r7, sl, sp}
     6bc:	080024e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, sp}
	...
     6c8:	080023f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sp}
     6cc:	080023f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sp}
     6d0:	0800245a 	stmdaeq	r0, {r1, r3, r4, r6, sl, sp}
     6d4:	08002478 	stmdaeq	r0, {r3, r4, r5, r6, sl, sp}
     6d8:	0800247a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, sp}
     6dc:	0800247c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, sp}
     6e0:	08002480 	stmdaeq	r0, {r7, sl, sp}
     6e4:	080024e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, sp}
	...
     6f0:	0800245a 	stmdaeq	r0, {r1, r3, r4, r6, sl, sp}
     6f4:	08002478 	stmdaeq	r0, {r3, r4, r5, r6, sl, sp}
     6f8:	0800247a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, sp}
     6fc:	0800247c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, sp}
	...
     708:	080024b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, sp}
     70c:	080024d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, sp}
     710:	080024e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, sp}
     714:	080024e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, sp}
	...
     720:	0800240a 	stmdaeq	r0, {r1, r3, sl, sp}
     724:	08002412 	stmdaeq	r0, {r1, r4, sl, sp}
     728:	080025b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp}
     72c:	080025c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, sp}
     730:	080025c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sl, sp}
     734:	080025ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, sl, sp}
     738:	080025d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, sl, sp}
     73c:	0800262a 	stmdaeq	r0, {r1, r3, r5, r9, sl, sp}
	...
     748:	080025b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp}
     74c:	080025c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, sp}
     750:	080025c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sl, sp}
     754:	080025ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sl, sp}
	...
     760:	08002418 	stmdaeq	r0, {r3, r4, sl, sp}
     764:	0800241c 	stmdaeq	r0, {r2, r3, r4, sl, sp}
     768:	0800241e 	stmdaeq	r0, {r1, r2, r3, r4, sl, sp}
     76c:	08002424 	stmdaeq	r0, {r2, r5, sl, sp}
     770:	08002630 	stmdaeq	r0, {r4, r5, r9, sl, sp}
     774:	08002634 	stmdaeq	r0, {r2, r4, r5, r9, sl, sp}
     778:	08002636 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, sp}
     77c:	08002650 	stmdaeq	r0, {r4, r6, r9, sl, sp}
     780:	08002652 	stmdaeq	r0, {r1, r4, r6, r9, sl, sp}
     784:	0800265a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, sp}
     788:	0800265e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sl, sp}
     78c:	080026ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, sp}
	...
     798:	0800263c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, sp}
     79c:	08002650 	stmdaeq	r0, {r4, r6, r9, sl, sp}
     7a0:	08002652 	stmdaeq	r0, {r1, r4, r6, r9, sl, sp}
     7a4:	0800265a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, sp}
     7a8:	0800265e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sl, sp}
     7ac:	080026ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, sp}
	...
     7b8:	0800263c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, sp}
     7bc:	08002650 	stmdaeq	r0, {r4, r6, r9, sl, sp}
     7c0:	08002652 	stmdaeq	r0, {r1, r4, r6, r9, sl, sp}
     7c4:	08002656 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, sp}
	...
     7d0:	08002424 	stmdaeq	r0, {r2, r5, sl, sp}
     7d4:	0800242c 	stmdaeq	r0, {r2, r3, r5, sl, sp}
     7d8:	0800242e 	stmdaeq	r0, {r1, r2, r3, r5, sl, sp}
     7dc:	08002434 	stmdaeq	r0, {r2, r4, r5, sl, sp}
     7e0:	080026ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, sp}
     7e4:	080026c2 	stmdaeq	r0, {r1, r6, r7, r9, sl, sp}
     7e8:	080026c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, sp}
     7ec:	080026e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, sp}
     7f0:	080026e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, sp}
     7f4:	080026f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl, sp}
     7f8:	080026fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, sp}
     7fc:	08002768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, sp}
	...
     808:	080026ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, sp}
     80c:	080026e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, sp}
     810:	080026e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, sp}
     814:	080026f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl, sp}
     818:	080026fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, sp}
     81c:	08002768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, sp}
	...
     828:	080026ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, sp}
     82c:	080026ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, sp}
     830:	080026d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, sp}
     834:	080026e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, sp}
     838:	080026e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, sp}
     83c:	080026ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, sp}
	...
     848:	080026ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, sp}
     84c:	080026d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, sp}
     850:	080026ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, sp}
     854:	080026f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, sp}
     858:	080026f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl, sp}
     85c:	080026f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, sp}
     860:	08002700 	stmdaeq	r0, {r8, r9, sl, sp}
     864:	08002704 	stmdaeq	r0, {r2, r8, r9, sl, sp}
     868:	0800274c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, sp}
     86c:	08002768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, sp}
	...
     878:	08002434 	stmdaeq	r0, {r2, r4, r5, sl, sp}
     87c:	0800243c 	stmdaeq	r0, {r2, r3, r4, r5, sl, sp}
     880:	08002440 	stmdaeq	r0, {r6, sl, sp}
     884:	08002444 	stmdaeq	r0, {r2, r6, sl, sp}
     888:	080024f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, sp}
     88c:	08002518 	stmdaeq	r0, {r3, r4, r8, sl, sp}
     890:	0800251a 	stmdaeq	r0, {r1, r3, r4, r8, sl, sp}
     894:	08002522 	stmdaeq	r0, {r1, r5, r8, sl, sp}
     898:	08002526 	stmdaeq	r0, {r1, r2, r5, r8, sl, sp}
     89c:	080025b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp}
	...
     8a8:	080024f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, sp}
     8ac:	0800250c 	stmdaeq	r0, {r2, r3, r8, sl, sp}
     8b0:	08002510 	stmdaeq	r0, {r4, r8, sl, sp}
     8b4:	08002514 	stmdaeq	r0, {r2, r4, r8, sl, sp}
	...
     8c0:	0800250c 	stmdaeq	r0, {r2, r3, r8, sl, sp}
     8c4:	08002510 	stmdaeq	r0, {r4, r8, sl, sp}
     8c8:	08002514 	stmdaeq	r0, {r2, r4, r8, sl, sp}
     8cc:	08002518 	stmdaeq	r0, {r3, r4, r8, sl, sp}
     8d0:	0800251a 	stmdaeq	r0, {r1, r3, r4, r8, sl, sp}
     8d4:	0800251e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, sp}
     8d8:	08002520 	stmdaeq	r0, {r5, r8, sl, sp}
     8dc:	08002522 	stmdaeq	r0, {r1, r5, r8, sl, sp}
     8e0:	08002530 	stmdaeq	r0, {r4, r5, r8, sl, sp}
     8e4:	08002534 	stmdaeq	r0, {r2, r4, r5, r8, sl, sp}
     8e8:	08002582 	stmdaeq	r0, {r1, r7, r8, sl, sp}
     8ec:	080025b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp}
	...
     8f8:	080027a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, sp}
     8fc:	080027c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp}
     900:	080027d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sl, sp}
     904:	080027f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, sp}
	...
     910:	08002816 	stmdaeq	r0, {r1, r2, r4, fp, sp}
     914:	0800281a 	stmdaeq	r0, {r1, r3, r4, fp, sp}
     918:	0800281c 	stmdaeq	r0, {r2, r3, r4, fp, sp}
     91c:	08002840 	stmdaeq	r0, {r6, fp, sp}
     920:	08002844 	stmdaeq	r0, {r2, r6, fp, sp}
     924:	0800284a 	stmdaeq	r0, {r1, r3, r6, fp, sp}
	...
     930:	0800283a 	stmdaeq	r0, {r1, r3, r4, r5, fp, sp}
     934:	08002840 	stmdaeq	r0, {r6, fp, sp}
     938:	08002844 	stmdaeq	r0, {r2, r6, fp, sp}
     93c:	0800284a 	stmdaeq	r0, {r1, r3, r6, fp, sp}
	...
     948:	080028ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, fp, sp}
     94c:	080028b2 	stmdaeq	r0, {r1, r4, r5, r7, fp, sp}
     950:	080028b4 	stmdaeq	r0, {r2, r4, r5, r7, fp, sp}
     954:	080028d2 	stmdaeq	r0, {r1, r4, r6, r7, fp, sp}
     958:	080028d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, sp}
     95c:	080028de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, fp, sp}
     960:	080028e2 	stmdaeq	r0, {r1, r5, r6, r7, fp, sp}
     964:	080028e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, sp}
	...
     970:	080028d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, sp}
     974:	080028de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, fp, sp}
     978:	080028e2 	stmdaeq	r0, {r1, r5, r6, r7, fp, sp}
     97c:	080028e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, sp}
	...
     988:	08002930 	stmdaeq	r0, {r4, r5, r8, fp, sp}
     98c:	08002934 	stmdaeq	r0, {r2, r4, r5, r8, fp, sp}
     990:	08002936 	stmdaeq	r0, {r1, r2, r4, r5, r8, fp, sp}
     994:	08002954 	stmdaeq	r0, {r2, r4, r6, r8, fp, sp}
     998:	0800295a 	stmdaeq	r0, {r1, r3, r4, r6, r8, fp, sp}
     99c:	08002960 	stmdaeq	r0, {r5, r6, r8, fp, sp}
     9a0:	08002964 	stmdaeq	r0, {r2, r5, r6, r8, fp, sp}
     9a4:	08002980 	stmdaeq	r0, {r7, r8, fp, sp}
	...
     9b0:	0800295a 	stmdaeq	r0, {r1, r3, r4, r6, r8, fp, sp}
     9b4:	08002960 	stmdaeq	r0, {r5, r6, r8, fp, sp}
     9b8:	08002964 	stmdaeq	r0, {r2, r5, r6, r8, fp, sp}
     9bc:	08002980 	stmdaeq	r0, {r7, r8, fp, sp}
	...
     9c8:	08002a9a 	stmdaeq	r0, {r1, r3, r4, r7, r9, fp, sp}
     9cc:	08002aca 	stmdaeq	r0, {r1, r3, r6, r7, r9, fp, sp}
     9d0:	08002ad2 	stmdaeq	r0, {r1, r4, r6, r7, r9, fp, sp}
     9d4:	08002ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, sp}
     9d8:	08002adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, sp}
     9dc:	08002ade 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, fp, sp}
	...
     9e8:	08002abe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, fp, sp}
     9ec:	08002ac2 	stmdaeq	r0, {r1, r6, r7, r9, fp, sp}
     9f0:	08002ac6 	stmdaeq	r0, {r1, r2, r6, r7, r9, fp, sp}
     9f4:	08002aca 	stmdaeq	r0, {r1, r3, r6, r7, r9, fp, sp}
	...
     a00:	08001878 	stmdaeq	r0, {r3, r4, r5, r6, fp, ip}
     a04:	080018d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, ip}
     a08:	080018d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, ip}
     a0c:	08001a80 	stmdaeq	r0, {r7, r9, fp, ip}
     a10:	08001a80 	stmdaeq	r0, {r7, r9, fp, ip}
     a14:	08001b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, ip}
     a18:	08001b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, ip}
     a1c:	08001b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip}
     a20:	08001b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip}
     a24:	08001c04 	stmdaeq	r0, {r2, sl, fp, ip}
     a28:	08001c04 	stmdaeq	r0, {r2, sl, fp, ip}
     a2c:	08001d20 	stmdaeq	r0, {r5, r8, sl, fp, ip}
     a30:	08001d20 	stmdaeq	r0, {r5, r8, sl, fp, ip}
     a34:	08001da0 	stmdaeq	r0, {r5, r7, r8, sl, fp, ip}
     a38:	08001da0 	stmdaeq	r0, {r5, r7, r8, sl, fp, ip}
     a3c:	08001e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip}
     a40:	08001e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip}
     a44:	08001f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip}
     a48:	08001f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip}
     a4c:	08001f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip}
     a50:	08001f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip}
     a54:	08001fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip}
     a58:	08001fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip}
     a5c:	08001fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip}
     a60:	08001fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip}
     a64:	08001fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp, ip}
     a68:	08001fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp, ip}
     a6c:	08001fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, ip}
     a70:	08001fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, ip}
     a74:	08002128 	stmdaeq	r0, {r3, r5, r8, sp}
     a78:	08002128 	stmdaeq	r0, {r3, r5, r8, sp}
     a7c:	08002210 	stmdaeq	r0, {r4, r9, sp}
     a80:	08002210 	stmdaeq	r0, {r4, r9, sp}
     a84:	080022c0 	stmdaeq	r0, {r6, r7, r9, sp}
     a88:	080022c0 	stmdaeq	r0, {r6, r7, r9, sp}
     a8c:	08002340 	stmdaeq	r0, {r6, r8, r9, sp}
     a90:	08002340 	stmdaeq	r0, {r6, r8, r9, sp}
     a94:	080023c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sp}
     a98:	080023c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sp}
     a9c:	08002768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, sp}
     aa0:	08002768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, sp}
     aa4:	080027f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, sp}
     aa8:	080027f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, sp}
     aac:	08002878 	stmdaeq	r0, {r3, r4, r5, r6, fp, sp}
     ab0:	08002878 	stmdaeq	r0, {r3, r4, r5, r6, fp, sp}
     ab4:	08002914 	stmdaeq	r0, {r2, r4, r8, fp, sp}
     ab8:	08002914 	stmdaeq	r0, {r2, r4, r8, fp, sp}
     abc:	08002980 	stmdaeq	r0, {r7, r8, fp, sp}
     ac0:	08002980 	stmdaeq	r0, {r7, r8, fp, sp}
     ac4:	080029fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, sp}
     ac8:	080029fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, sp}
     acc:	08002a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, sp}
     ad0:	08002a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, sp}
     ad4:	08002a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, sp}
     ad8:	08002a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, sp}
     adc:	08002afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, sp}
     ae0:	08002afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, sp}
     ae4:	08002b08 	stmdaeq	r0, {r3, r8, r9, fp, sp}
     ae8:	08002b08 	stmdaeq	r0, {r3, r8, r9, fp, sp}
     aec:	08002b0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, fp, sp}
     af0:	08002b10 	stmdaeq	r0, {r4, r8, r9, fp, sp}
     af4:	08002b16 	stmdaeq	r0, {r1, r2, r4, r8, r9, fp, sp}
     af8:	08002b18 	stmdaeq	r0, {r3, r4, r8, r9, fp, sp}
     afc:	08002b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, sp}
     b00:	08002b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, sp}
     b04:	08002b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, sp}
     b08:	08002b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, sp}
     b0c:	08002bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, sp}
     b10:	08002bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, sp}
     b14:	08002c04 	stmdaeq	r0, {r2, sl, fp, sp}
     b18:	08002c04 	stmdaeq	r0, {r2, sl, fp, sp}
     b1c:	08002c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, sp}
	...
     b28:	08002c1e 	stmdaeq	r0, {r1, r2, r3, r4, sl, fp, sp}
     b2c:	08002c20 	stmdaeq	r0, {r5, sl, fp, sp}
     b30:	08002c22 	stmdaeq	r0, {r1, r5, sl, fp, sp}
     b34:	08002c2e 	stmdaeq	r0, {r1, r2, r3, r5, sl, fp, sp}
     b38:	08002c50 	stmdaeq	r0, {r4, r6, sl, fp, sp}
     b3c:	08002c80 	stmdaeq	r0, {r7, sl, fp, sp}
     b40:	08002c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, sp}
     b44:	08002cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, sp}
	...
     b50:	08002cce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, fp, sp}
     b54:	08002ce2 	stmdaeq	r0, {r1, r5, r6, r7, sl, fp, sp}
     b58:	08002d06 	stmdaeq	r0, {r1, r2, r8, sl, fp, sp}
     b5c:	08002d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, sp}
	...
     b68:	08002dc2 	stmdaeq	r0, {r1, r6, r7, r8, sl, fp, sp}
     b6c:	08002dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, sp}
     b70:	08002e9a 	stmdaeq	r0, {r1, r3, r4, r7, r9, sl, fp, sp}
     b74:	08002ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, sp}
	...
     b80:	08002dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, sp}
     b84:	08002e0a 	stmdaeq	r0, {r1, r3, r9, sl, fp, sp}
     b88:	08002ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, sp}
     b8c:	08002efa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, fp, sp}
     b90:	08002f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp, sp}
     b94:	08002f6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, fp, sp}
     b98:	08002f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp, sp}
     b9c:	08002fe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp, sp}
     ba0:	0800305c 	stmdaeq	r0, {r2, r3, r4, r6, ip, sp}
     ba4:	08003068 	stmdaeq	r0, {r3, r5, r6, ip, sp}
	...
     bb0:	08002ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, sp}
     bb4:	08002dee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sl, fp, sp}
     bb8:	08002ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, sp}
     bbc:	08002edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, sp}
     bc0:	08002ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, sp}
     bc4:	08002efa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, fp, sp}
     bc8:	08002f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, sp}
     bcc:	08002f6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, fp, sp}
	...
     bd8:	08002ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, sp}
     bdc:	08002ece 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl, fp, sp}
     be0:	08002ed2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, fp, sp}
     be4:	08002edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, sp}
     be8:	08002ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, sp}
     bec:	08002efa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, fp, sp}
     bf0:	08002f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, sp}
     bf4:	08002f6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, fp, sp}
	...
     c00:	08002ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, sp}
     c04:	08002ea6 	stmdaeq	r0, {r1, r2, r5, r7, r9, sl, fp, sp}
     c08:	08002f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, sp}
     c0c:	08002f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, sp}
	...
     c18:	08002f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, sp}
     c1c:	08002f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, sp}
     c20:	08002f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp, sp}
     c24:	08002fe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp, sp}
     c28:	0800305c 	stmdaeq	r0, {r2, r3, r4, r6, ip, sp}
     c2c:	08003068 	stmdaeq	r0, {r3, r5, r6, ip, sp}
	...
     c38:	08002f9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sl, fp, sp}
     c3c:	08002f9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sl, fp, sp}
     c40:	08002fa2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, fp, sp}
     c44:	08002fbe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, sl, fp, sp}
     c48:	0800305c 	stmdaeq	r0, {r2, r3, r4, r6, ip, sp}
     c4c:	08003068 	stmdaeq	r0, {r3, r5, r6, ip, sp}
	...
     c58:	08002e0a 	stmdaeq	r0, {r1, r3, r9, sl, fp, sp}
     c5c:	08002e9a 	stmdaeq	r0, {r1, r3, r4, r7, r9, sl, fp, sp}
     c60:	08002efa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, fp, sp}
     c64:	08002f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp, sp}
     c68:	08002f6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, fp, sp}
     c6c:	08002f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp, sp}
     c70:	08002fe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp, sp}
     c74:	0800305c 	stmdaeq	r0, {r2, r3, r4, r6, ip, sp}
     c78:	08003068 	stmdaeq	r0, {r3, r5, r6, ip, sp}
     c7c:	08003090 	stmdaeq	r0, {r4, r7, ip, sp}
	...
     c88:	08002e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, sp}
     c8c:	08002e5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sl, fp, sp}
     c90:	08002e66 	stmdaeq	r0, {r1, r2, r5, r6, r9, sl, fp, sp}
     c94:	08002e9a 	stmdaeq	r0, {r1, r3, r4, r7, r9, sl, fp, sp}
     c98:	08002efa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, fp, sp}
     c9c:	08002f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp, sp}
     ca0:	08002f6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, fp, sp}
     ca4:	08002f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp, sp}
	...
     cb0:	08002fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, sp}
     cb4:	08002fee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, fp, sp}
     cb8:	08002ff0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, fp, sp}
     cbc:	08002ffe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp}
     cc0:	08003068 	stmdaeq	r0, {r3, r5, r6, ip, sp}
     cc4:	08003086 	stmdaeq	r0, {r1, r2, r7, ip, sp}
	...
     cd0:	08003034 	stmdaeq	r0, {r2, r4, r5, ip, sp}
     cd4:	08003038 	stmdaeq	r0, {r3, r4, r5, ip, sp}
     cd8:	0800303c 	stmdaeq	r0, {r2, r3, r4, r5, ip, sp}
     cdc:	08003044 	stmdaeq	r0, {r2, r6, ip, sp}
	...
     ce8:	08002c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, sp}
     cec:	08002cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, sp}
     cf0:	08002cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, sp}
     cf4:	08002d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, sp}
     cf8:	08002d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, sp}
     cfc:	08002db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, sp}
     d00:	08002db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, sp}
     d04:	08003090 	stmdaeq	r0, {r4, r7, ip, sp}
     d08:	08003090 	stmdaeq	r0, {r4, r7, ip, sp}
     d0c:	080030a8 	stmdaeq	r0, {r3, r5, r7, ip, sp}
     d10:	080030a8 	stmdaeq	r0, {r3, r5, r7, ip, sp}
     d14:	080030ac 	stmdaeq	r0, {r2, r3, r5, r7, ip, sp}
	...
     d20:	0800327a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, ip, sp}
     d24:	08003282 	stmdaeq	r0, {r1, r7, r9, ip, sp}
     d28:	08003284 	stmdaeq	r0, {r2, r7, r9, ip, sp}
     d2c:	080032cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, ip, sp}
     d30:	080032ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, ip, sp}
     d34:	080032da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, ip, sp}
	...
     d40:	080030ac 	stmdaeq	r0, {r2, r3, r5, r7, ip, sp}
     d44:	080030c4 	stmdaeq	r0, {r2, r6, r7, ip, sp}
     d48:	080030c8 	stmdaeq	r0, {r3, r6, r7, ip, sp}
     d4c:	080030d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, ip, sp}
     d50:	080030dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip, sp}
     d54:	08003108 	stmdaeq	r0, {r3, r8, ip, sp}
     d58:	08003108 	stmdaeq	r0, {r3, r8, ip, sp}
     d5c:	08003128 	stmdaeq	r0, {r3, r5, r8, ip, sp}
     d60:	08003128 	stmdaeq	r0, {r3, r5, r8, ip, sp}
     d64:	08003140 	stmdaeq	r0, {r6, r8, ip, sp}
     d68:	08003140 	stmdaeq	r0, {r6, r8, ip, sp}
     d6c:	08003150 	stmdaeq	r0, {r4, r6, r8, ip, sp}
     d70:	08003150 	stmdaeq	r0, {r4, r6, r8, ip, sp}
     d74:	0800316c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip, sp}
     d78:	0800316c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip, sp}
     d7c:	08003184 	stmdaeq	r0, {r2, r7, r8, ip, sp}
     d80:	08003184 	stmdaeq	r0, {r2, r7, r8, ip, sp}
     d84:	080031a0 	stmdaeq	r0, {r5, r7, r8, ip, sp}
     d88:	080031a0 	stmdaeq	r0, {r5, r7, r8, ip, sp}
     d8c:	080031a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, ip, sp}
     d90:	080031a8 	stmdaeq	r0, {r3, r5, r7, r8, ip, sp}
     d94:	080031cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, ip, sp}
     d98:	080031cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, ip, sp}
     d9c:	08003224 	stmdaeq	r0, {r2, r5, r9, ip, sp}
     da0:	08003224 	stmdaeq	r0, {r2, r5, r9, ip, sp}
     da4:	08003248 	stmdaeq	r0, {r3, r6, r9, ip, sp}
     da8:	08003248 	stmdaeq	r0, {r3, r6, r9, ip, sp}
     dac:	08003278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, sp}
     db0:	08003278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, sp}
     db4:	08003324 	stmdaeq	r0, {r2, r5, r8, r9, ip, sp}
     db8:	08003324 	stmdaeq	r0, {r2, r5, r8, r9, ip, sp}
     dbc:	08003368 	stmdaeq	r0, {r3, r5, r6, r8, r9, ip, sp}
	...
     dc8:	08003368 	stmdaeq	r0, {r3, r5, r6, r8, r9, ip, sp}
     dcc:	080033c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, ip, sp}
     dd0:	080033c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, ip, sp}
     dd4:	080033d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, ip, sp}
     dd8:	080033d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, ip, sp}
     ddc:	080033dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, ip, sp}
     de0:	080033dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, ip, sp}
     de4:	080033f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip, sp}
	...
     df0:	080033f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip, sp}
     df4:	08003404 	stmdaeq	r0, {r2, sl, ip, sp}
     df8:	08003404 	stmdaeq	r0, {r2, sl, ip, sp}
     dfc:	0800347c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, ip, sp}
     e00:	0800347c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, ip, sp}
     e04:	08003490 	stmdaeq	r0, {r4, r7, sl, ip, sp}
     e08:	08003490 	stmdaeq	r0, {r4, r7, sl, ip, sp}
     e0c:	080034a8 	stmdaeq	r0, {r3, r5, r7, sl, ip, sp}
     e10:	080034a8 	stmdaeq	r0, {r3, r5, r7, sl, ip, sp}
     e14:	080034c0 	stmdaeq	r0, {r6, r7, sl, ip, sp}
	...
     e20:	080034c0 	stmdaeq	r0, {r6, r7, sl, ip, sp}
     e24:	0800361c 	stmdaeq	r0, {r2, r3, r4, r9, sl, ip, sp}
     e28:	0800361c 	stmdaeq	r0, {r2, r3, r4, r9, sl, ip, sp}
     e2c:	080036d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip, sp}
     e30:	080036d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip, sp}
     e34:	080036ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, ip, sp}
     e38:	080036ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, ip, sp}
     e3c:	08003710 	stmdaeq	r0, {r4, r8, r9, sl, ip, sp}
     e40:	08003710 	stmdaeq	r0, {r4, r8, r9, sl, ip, sp}
     e44:	0800371c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, ip, sp}
     e48:	0800371c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, ip, sp}
     e4c:	08003722 	stmdaeq	r0, {r1, r5, r8, r9, sl, ip, sp}
     e50:	08003724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, sp}
     e54:	08003730 	stmdaeq	r0, {r4, r5, r8, r9, sl, ip, sp}
     e58:	08003730 	stmdaeq	r0, {r4, r5, r8, r9, sl, ip, sp}
     e5c:	08003736 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, ip, sp}
     e60:	08003738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, sp}
     e64:	0800373c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip, sp}
     e68:	0800373c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip, sp}
     e6c:	08003740 	stmdaeq	r0, {r6, r8, r9, sl, ip, sp}
     e70:	08003740 	stmdaeq	r0, {r6, r8, r9, sl, ip, sp}
     e74:	0800374a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, ip, sp}
     e78:	0800374c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip, sp}
     e7c:	08003750 	stmdaeq	r0, {r4, r6, r8, r9, sl, ip, sp}
     e80:	08003750 	stmdaeq	r0, {r4, r6, r8, r9, sl, ip, sp}
     e84:	08003758 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, ip, sp}
     e88:	08003758 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, ip, sp}
     e8c:	08003780 	stmdaeq	r0, {r7, r8, r9, sl, ip, sp}
	...
     e98:	080037e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, ip, sp}
     e9c:	080037e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, ip, sp}
     ea0:	080037e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, ip, sp}
     ea4:	080037ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, ip, sp}
	...
     eb0:	08003780 	stmdaeq	r0, {r7, r8, r9, sl, ip, sp}
     eb4:	080037d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, ip, sp}
     eb8:	080037d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, ip, sp}
     ebc:	080037e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip, sp}
     ec0:	080037e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip, sp}
     ec4:	08003818 	stmdaeq	r0, {r3, r4, fp, ip, sp}
     ec8:	08003818 	stmdaeq	r0, {r3, r4, fp, ip, sp}
     ecc:	0800382c 	stmdaeq	r0, {r2, r3, r5, fp, ip, sp}
     ed0:	0800382c 	stmdaeq	r0, {r2, r3, r5, fp, ip, sp}
     ed4:	08003838 	stmdaeq	r0, {r3, r4, r5, fp, ip, sp}
     ed8:	08003838 	stmdaeq	r0, {r3, r4, r5, fp, ip, sp}
     edc:	08003858 	stmdaeq	r0, {r3, r4, r6, fp, ip, sp}
     ee0:	08003858 	stmdaeq	r0, {r3, r4, r6, fp, ip, sp}
     ee4:	08003864 	stmdaeq	r0, {r2, r5, r6, fp, ip, sp}
     ee8:	08003864 	stmdaeq	r0, {r2, r5, r6, fp, ip, sp}
     eec:	08003888 	stmdaeq	r0, {r3, r7, fp, ip, sp}
     ef0:	08003888 	stmdaeq	r0, {r3, r7, fp, ip, sp}
     ef4:	08003894 	stmdaeq	r0, {r2, r4, r7, fp, ip, sp}
     ef8:	08003894 	stmdaeq	r0, {r2, r4, r7, fp, ip, sp}
     efc:	080038ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip, sp}
     f00:	080038ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip, sp}
     f04:	080038b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, ip, sp}
     f08:	080038b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, ip, sp}
     f0c:	080038d0 	stmdaeq	r0, {r4, r6, r7, fp, ip, sp}
     f10:	080038d0 	stmdaeq	r0, {r4, r6, r7, fp, ip, sp}
     f14:	080038dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip, sp}
     f18:	080038dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip, sp}
     f1c:	080038e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, ip, sp}
     f20:	080038e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, ip, sp}
     f24:	080038fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, sp}
     f28:	080038fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, sp}
     f2c:	08003910 	stmdaeq	r0, {r4, r8, fp, ip, sp}
     f30:	08003910 	stmdaeq	r0, {r4, r8, fp, ip, sp}
     f34:	08003924 	stmdaeq	r0, {r2, r5, r8, fp, ip, sp}
     f38:	08003924 	stmdaeq	r0, {r2, r5, r8, fp, ip, sp}
     f3c:	08003934 	stmdaeq	r0, {r2, r4, r5, r8, fp, ip, sp}
     f40:	08003934 	stmdaeq	r0, {r2, r4, r5, r8, fp, ip, sp}
     f44:	08003948 	stmdaeq	r0, {r3, r6, r8, fp, ip, sp}
     f48:	08003948 	stmdaeq	r0, {r3, r6, r8, fp, ip, sp}
     f4c:	0800395c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp, ip, sp}
     f50:	0800395c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp, ip, sp}
     f54:	08003970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, sp}
     f58:	08003970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, sp}
     f5c:	08003a00 	stmdaeq	r0, {r9, fp, ip, sp}
     f60:	08003a00 	stmdaeq	r0, {r9, fp, ip, sp}
     f64:	08003a30 	stmdaeq	r0, {r4, r5, r9, fp, ip, sp}
     f68:	08003a30 	stmdaeq	r0, {r4, r5, r9, fp, ip, sp}
     f6c:	08003a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, ip, sp}
     f70:	08003a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, ip, sp}
     f74:	08003a48 	stmdaeq	r0, {r3, r6, r9, fp, ip, sp}
     f78:	08003a48 	stmdaeq	r0, {r3, r6, r9, fp, ip, sp}
     f7c:	08003a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, ip, sp}
     f80:	08003a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, ip, sp}
     f84:	08003a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, ip, sp}
     f88:	08003a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, ip, sp}
     f8c:	08003a88 	stmdaeq	r0, {r3, r7, r9, fp, ip, sp}
     f90:	08003a88 	stmdaeq	r0, {r3, r7, r9, fp, ip, sp}
     f94:	08003aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip, sp}
     f98:	08003aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip, sp}
     f9c:	08003ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp, ip, sp}
     fa0:	08003ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp, ip, sp}
     fa4:	08003ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp, ip, sp}
     fa8:	08003ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp, ip, sp}
     fac:	08003adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp}
     fb0:	08003adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp}
     fb4:	08003af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip, sp}
     fb8:	08003af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip, sp}
     fbc:	08003b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, ip, sp}
     fc0:	08003b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, ip, sp}
     fc4:	08003b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, ip, sp}
     fc8:	08003b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, ip, sp}
     fcc:	08003b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, ip, sp}
     fd0:	08003b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, ip, sp}
     fd4:	08003b54 	stmdaeq	r0, {r2, r4, r6, r8, r9, fp, ip, sp}
     fd8:	08003b54 	stmdaeq	r0, {r2, r4, r6, r8, r9, fp, ip, sp}
     fdc:	08003b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp, ip, sp}
     fe0:	08003b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp, ip, sp}
     fe4:	08003b84 	stmdaeq	r0, {r2, r7, r8, r9, fp, ip, sp}
     fe8:	08003b84 	stmdaeq	r0, {r2, r7, r8, r9, fp, ip, sp}
     fec:	08003b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, ip, sp}
     ff0:	08003b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, ip, sp}
     ff4:	08003bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, ip, sp}
     ff8:	08003bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, ip, sp}
     ffc:	08003bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, ip, sp}
    1000:	08003bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, ip, sp}
    1004:	08003be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp, ip, sp}
    1008:	08003be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp, ip, sp}
    100c:	08003bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
    1010:	08003bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
    1014:	08003c14 	stmdaeq	r0, {r2, r4, sl, fp, ip, sp}
    1018:	08003c14 	stmdaeq	r0, {r2, r4, sl, fp, ip, sp}
    101c:	08003c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, ip, sp}
    1020:	08003c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, ip, sp}
    1024:	08003c44 	stmdaeq	r0, {r2, r6, sl, fp, ip, sp}
    1028:	08003c44 	stmdaeq	r0, {r2, r6, sl, fp, ip, sp}
    102c:	08003c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, ip, sp}
    1030:	08003c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, ip, sp}
    1034:	08003c90 	stmdaeq	r0, {r4, r7, sl, fp, ip, sp}
    1038:	08003c90 	stmdaeq	r0, {r4, r7, sl, fp, ip, sp}
    103c:	08003ca0 	stmdaeq	r0, {r5, r7, sl, fp, ip, sp}
    1040:	08003ca0 	stmdaeq	r0, {r5, r7, sl, fp, ip, sp}
    1044:	08003cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, ip, sp}
    1048:	08003cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, ip, sp}
    104c:	08003cc0 	stmdaeq	r0, {r6, r7, sl, fp, ip, sp}
	...
    1058:	08003cc0 	stmdaeq	r0, {r6, r7, sl, fp, ip, sp}
    105c:	08003dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, ip, sp}
    1060:	08003dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, ip, sp}
    1064:	08003e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip, sp}
    1068:	08003e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip, sp}
    106c:	08003ea6 	stmdaeq	r0, {r1, r2, r5, r7, r9, sl, fp, ip, sp}
    1070:	08003ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, ip, sp}
    1074:	08003eca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, fp, ip, sp}
    1078:	08003ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, ip, sp}
    107c:	08003ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp}
    1080:	08003ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp}
    1084:	08003ef2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl, fp, ip, sp}
    1088:	08003ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, ip, sp}
    108c:	08003f06 	stmdaeq	r0, {r1, r2, r8, r9, sl, fp, ip, sp}
    1090:	08003f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip, sp}
    1094:	08003f22 	stmdaeq	r0, {r1, r5, r8, r9, sl, fp, ip, sp}
    1098:	08003f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, ip, sp}
    109c:	08003f3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, sl, fp, ip, sp}
    10a0:	08003f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, ip, sp}
    10a4:	08003f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, ip, sp}
    10a8:	08003f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, ip, sp}
    10ac:	08003f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, ip, sp}
    10b0:	08003f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, ip, sp}
    10b4:	08003f66 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, fp, ip, sp}
    10b8:	08003f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, ip, sp}
    10bc:	08003f82 	stmdaeq	r0, {r1, r7, r8, r9, sl, fp, ip, sp}
    10c0:	08003f84 	stmdaeq	r0, {r2, r7, r8, r9, sl, fp, ip, sp}
    10c4:	08003f9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sl, fp, ip, sp}
    10c8:	08003f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip, sp}
    10cc:	08003fb2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, sl, fp, ip, sp}
    10d0:	08003fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, ip, sp}
    10d4:	08003fce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, sl, fp, ip, sp}
    10d8:	08003fd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, fp, ip, sp}
    10dc:	08003fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, sp}
    10e0:	08003fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, sp}
    10e4:	08003ff6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
    10e8:	08003ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
    10ec:	0800400a 	stmdaeq	r0, {r1, r3, lr}
    10f0:	0800400c 	stmdaeq	r0, {r2, r3, lr}
    10f4:	08004026 	stmdaeq	r0, {r1, r2, r5, lr}
    10f8:	08004028 	stmdaeq	r0, {r3, r5, lr}
    10fc:	08004042 	stmdaeq	r0, {r1, r6, lr}
    1100:	08004044 	stmdaeq	r0, {r2, r6, lr}
    1104:	0800405a 	stmdaeq	r0, {r1, r3, r4, r6, lr}
    1108:	0800405c 	stmdaeq	r0, {r2, r3, r4, r6, lr}
    110c:	08004076 	stmdaeq	r0, {r1, r2, r4, r5, r6, lr}
    1110:	08004078 	stmdaeq	r0, {r3, r4, r5, r6, lr}
    1114:	0800408c 	stmdaeq	r0, {r2, r3, r7, lr}
    1118:	0800408c 	stmdaeq	r0, {r2, r3, r7, lr}
    111c:	080040c6 	stmdaeq	r0, {r1, r2, r6, r7, lr}
    1120:	080040c8 	stmdaeq	r0, {r3, r6, r7, lr}
    1124:	080040d4 	stmdaeq	r0, {r2, r4, r6, r7, lr}
    1128:	080040d4 	stmdaeq	r0, {r2, r4, r6, r7, lr}
    112c:	080040dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, lr}
    1130:	080040dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, lr}
    1134:	08004128 	stmdaeq	r0, {r3, r5, r8, lr}
    1138:	08004128 	stmdaeq	r0, {r3, r5, r8, lr}
    113c:	08004138 	stmdaeq	r0, {r3, r4, r5, r8, lr}
	...
    1148:	08004138 	stmdaeq	r0, {r3, r4, r5, r8, lr}
    114c:	08004152 	stmdaeq	r0, {r1, r4, r6, r8, lr}
    1150:	08004154 	stmdaeq	r0, {r2, r4, r6, r8, lr}
    1154:	08004160 	stmdaeq	r0, {r5, r6, r8, lr}
    1158:	08004160 	stmdaeq	r0, {r5, r6, r8, lr}
    115c:	0800416c 	stmdaeq	r0, {r2, r3, r5, r6, r8, lr}
    1160:	0800416c 	stmdaeq	r0, {r2, r3, r5, r6, r8, lr}
    1164:	0800419a 	stmdaeq	r0, {r1, r3, r4, r7, r8, lr}
    1168:	0800419c 	stmdaeq	r0, {r2, r3, r4, r7, r8, lr}
    116c:	080041a8 	stmdaeq	r0, {r3, r5, r7, r8, lr}
    1170:	080041a8 	stmdaeq	r0, {r3, r5, r7, r8, lr}
    1174:	080041b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, lr}
    1178:	080041b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, lr}
    117c:	080041c4 	stmdaeq	r0, {r2, r6, r7, r8, lr}
	...
    1188:	080041c4 	stmdaeq	r0, {r2, r6, r7, r8, lr}
    118c:	08004230 	stmdaeq	r0, {r4, r5, r9, lr}
    1190:	08004230 	stmdaeq	r0, {r4, r5, r9, lr}
    1194:	08004310 	stmdaeq	r0, {r4, r8, r9, lr}
    1198:	08004310 	stmdaeq	r0, {r4, r8, r9, lr}
    119c:	08004332 	stmdaeq	r0, {r1, r4, r5, r8, r9, lr}
    11a0:	08004334 	stmdaeq	r0, {r2, r4, r5, r8, r9, lr}
    11a4:	0800434e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, lr}
    11a8:	08004350 	stmdaeq	r0, {r4, r6, r8, r9, lr}
    11ac:	0800436a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, lr}
    11b0:	0800436c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, lr}
    11b4:	0800437e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, lr}
    11b8:	08004380 	stmdaeq	r0, {r7, r8, r9, lr}
    11bc:	0800439a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, lr}
    11c0:	0800439c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, lr}
    11c4:	080043b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, lr}
    11c8:	080043b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, lr}
    11cc:	080043ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, lr}
    11d0:	080043cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, lr}
    11d4:	080043e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, lr}
    11d8:	080043e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, lr}
    11dc:	080043fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, lr}
    11e0:	080043fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, lr}
    11e4:	08004416 	stmdaeq	r0, {r1, r2, r4, sl, lr}
    11e8:	08004418 	stmdaeq	r0, {r3, r4, sl, lr}
    11ec:	08004432 	stmdaeq	r0, {r1, r4, r5, sl, lr}
    11f0:	08004434 	stmdaeq	r0, {r2, r4, r5, sl, lr}
    11f4:	0800444e 	stmdaeq	r0, {r1, r2, r3, r6, sl, lr}
    11f8:	08004450 	stmdaeq	r0, {r4, r6, sl, lr}
    11fc:	0800446a 	stmdaeq	r0, {r1, r3, r5, r6, sl, lr}
    1200:	0800446c 	stmdaeq	r0, {r2, r3, r5, r6, sl, lr}
    1204:	0800448a 	stmdaeq	r0, {r1, r3, r7, sl, lr}
    1208:	0800448c 	stmdaeq	r0, {r2, r3, r7, sl, lr}
    120c:	080044aa 	stmdaeq	r0, {r1, r3, r5, r7, sl, lr}
    1210:	080044ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, lr}
    1214:	080044ca 	stmdaeq	r0, {r1, r3, r6, r7, sl, lr}
    1218:	080044cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, lr}
    121c:	080044e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, lr}
    1220:	080044e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, lr}
    1224:	080044ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, lr}
    1228:	080044ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, lr}
    122c:	080044f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl, lr}
    1230:	080044f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, lr}
    1234:	0800450e 	stmdaeq	r0, {r1, r2, r3, r8, sl, lr}
    1238:	08004510 	stmdaeq	r0, {r4, r8, sl, lr}
    123c:	0800452e 	stmdaeq	r0, {r1, r2, r3, r5, r8, sl, lr}
    1240:	08004530 	stmdaeq	r0, {r4, r5, r8, sl, lr}
    1244:	0800454a 	stmdaeq	r0, {r1, r3, r6, r8, sl, lr}
    1248:	0800454c 	stmdaeq	r0, {r2, r3, r6, r8, sl, lr}
    124c:	08004554 	stmdaeq	r0, {r2, r4, r6, r8, sl, lr}
    1250:	08004554 	stmdaeq	r0, {r2, r4, r6, r8, sl, lr}
    1254:	0800456e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sl, lr}
    1258:	08004570 	stmdaeq	r0, {r4, r5, r6, r8, sl, lr}
    125c:	0800458a 	stmdaeq	r0, {r1, r3, r7, r8, sl, lr}
    1260:	0800458c 	stmdaeq	r0, {r2, r3, r7, r8, sl, lr}
    1264:	080045a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, lr}
    1268:	080045a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, lr}
    126c:	080045b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, lr}
    1270:	080045b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, lr}
    1274:	080045d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, lr}
    1278:	080045d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, lr}
    127c:	080045e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, lr}
    1280:	080045e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, lr}
    1284:	08004616 	stmdaeq	r0, {r1, r2, r4, r9, sl, lr}
    1288:	08004618 	stmdaeq	r0, {r3, r4, r9, sl, lr}
    128c:	08004620 	stmdaeq	r0, {r5, r9, sl, lr}
    1290:	08004620 	stmdaeq	r0, {r5, r9, sl, lr}
    1294:	0800463c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, lr}
    1298:	0800463c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, lr}
    129c:	08004644 	stmdaeq	r0, {r2, r6, r9, sl, lr}
	...
    12a8:	08004644 	stmdaeq	r0, {r2, r6, r9, sl, lr}
    12ac:	08004774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, lr}
    12b0:	08004774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, lr}
    12b4:	080047e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, lr}
    12b8:	080047e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, lr}
    12bc:	08004806 	stmdaeq	r0, {r1, r2, fp, lr}
    12c0:	08004808 	stmdaeq	r0, {r3, fp, lr}
    12c4:	0800481c 	stmdaeq	r0, {r2, r3, r4, fp, lr}
    12c8:	0800481c 	stmdaeq	r0, {r2, r3, r4, fp, lr}
    12cc:	08004830 	stmdaeq	r0, {r4, r5, fp, lr}
    12d0:	08004830 	stmdaeq	r0, {r4, r5, fp, lr}
    12d4:	08004844 	stmdaeq	r0, {r2, r6, fp, lr}
    12d8:	08004844 	stmdaeq	r0, {r2, r6, fp, lr}
    12dc:	08004848 	stmdaeq	r0, {r3, r6, fp, lr}
    12e0:	08004848 	stmdaeq	r0, {r3, r6, fp, lr}
    12e4:	0800484e 	stmdaeq	r0, {r1, r2, r3, r6, fp, lr}
    12e8:	08004850 	stmdaeq	r0, {r4, r6, fp, lr}
    12ec:	08004868 	stmdaeq	r0, {r3, r5, r6, fp, lr}
    12f0:	08004868 	stmdaeq	r0, {r3, r5, r6, fp, lr}
    12f4:	0800487c 	stmdaeq	r0, {r2, r3, r4, r5, r6, fp, lr}
    12f8:	0800487c 	stmdaeq	r0, {r2, r3, r4, r5, r6, fp, lr}
    12fc:	08004886 	stmdaeq	r0, {r1, r2, r7, fp, lr}
    1300:	08004888 	stmdaeq	r0, {r3, r7, fp, lr}
    1304:	08004890 	stmdaeq	r0, {r4, r7, fp, lr}
    1308:	08004890 	stmdaeq	r0, {r4, r7, fp, lr}
    130c:	08004898 	stmdaeq	r0, {r3, r4, r7, fp, lr}
    1310:	08004898 	stmdaeq	r0, {r3, r4, r7, fp, lr}
    1314:	080048a0 	stmdaeq	r0, {r5, r7, fp, lr}
    1318:	080048a0 	stmdaeq	r0, {r5, r7, fp, lr}
    131c:	080048dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, lr}
    1320:	080048dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, lr}
    1324:	08004910 	stmdaeq	r0, {r4, r8, fp, lr}
    1328:	08004910 	stmdaeq	r0, {r4, r8, fp, lr}
    132c:	08004950 	stmdaeq	r0, {r4, r6, r8, fp, lr}
    1330:	08004950 	stmdaeq	r0, {r4, r6, r8, fp, lr}
    1334:	080049a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, lr}
    1338:	080049a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, lr}
    133c:	080049d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp, lr}
	...
    1348:	080049d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp, lr}
    134c:	08004aa8 	stmdaeq	r0, {r3, r5, r7, r9, fp, lr}
    1350:	08004aa8 	stmdaeq	r0, {r3, r5, r7, r9, fp, lr}
    1354:	08004afa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, fp, lr}
    1358:	08004afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, lr}
    135c:	08004be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, lr}
    1360:	08004be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, lr}
    1364:	08004c00 	stmdaeq	r0, {sl, fp, lr}
    1368:	08004c00 	stmdaeq	r0, {sl, fp, lr}
    136c:	08004c0e 	stmdaeq	r0, {r1, r2, r3, sl, fp, lr}
    1370:	08004c10 	stmdaeq	r0, {r4, sl, fp, lr}
    1374:	08004c2a 	stmdaeq	r0, {r1, r3, r5, sl, fp, lr}
    1378:	08004c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, lr}
    137c:	08004c46 	stmdaeq	r0, {r1, r2, r6, sl, fp, lr}
    1380:	08004c48 	stmdaeq	r0, {r3, r6, sl, fp, lr}
    1384:	08004c5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, fp, lr}
    1388:	08004c60 	stmdaeq	r0, {r5, r6, sl, fp, lr}
    138c:	08004c7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, fp, lr}
    1390:	08004c80 	stmdaeq	r0, {r7, sl, fp, lr}
    1394:	08004ca0 	stmdaeq	r0, {r5, r7, sl, fp, lr}
    1398:	08004ca0 	stmdaeq	r0, {r5, r7, sl, fp, lr}
    139c:	08004cba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sl, fp, lr}
    13a0:	08004cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, lr}
    13a4:	08004cd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, fp, lr}
    13a8:	08004cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, lr}
    13ac:	08004d1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, fp, lr}
    13b0:	08004d20 	stmdaeq	r0, {r5, r8, sl, fp, lr}
    13b4:	08004d26 	stmdaeq	r0, {r1, r2, r5, r8, sl, fp, lr}
    13b8:	08004d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, lr}
    13bc:	08004d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp, lr}
    13c0:	08004d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp, lr}
    13c4:	08004d46 	stmdaeq	r0, {r1, r2, r6, r8, sl, fp, lr}
    13c8:	08004d48 	stmdaeq	r0, {r3, r6, r8, sl, fp, lr}
    13cc:	08004d54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, lr}
    13d0:	08004d54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, lr}
    13d4:	08004d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, lr}
    13d8:	08004d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, lr}
    13dc:	08004d66 	stmdaeq	r0, {r1, r2, r5, r6, r8, sl, fp, lr}
    13e0:	08004d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, lr}
    13e4:	08004d7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, fp, lr}
    13e8:	08004d7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, fp, lr}
    13ec:	08004d9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, sl, fp, lr}
    13f0:	08004d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, lr}
    13f4:	08004da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, lr}
    13f8:	08004da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, lr}
    13fc:	08004db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp, lr}
    1400:	08004db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp, lr}
    1404:	08004dda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, fp, lr}
    1408:	08004ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, lr}
    140c:	08004dee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sl, fp, lr}
	...
    1418:	08004df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp, lr}
    141c:	08004e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, lr}
    1420:	08004e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, lr}
    1424:	08004e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, lr}
    1428:	08004e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, lr}
    142c:	08004e9a 	stmdaeq	r0, {r1, r3, r4, r7, r9, sl, fp, lr}
    1430:	08004e9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, fp, lr}
    1434:	08004eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, lr}
    1438:	08004eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, lr}
    143c:	08004ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, lr}
    1440:	08004ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, lr}
    1444:	08004ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, lr}
    1448:	08004ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, lr}
    144c:	08004ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, lr}
    1450:	08004ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, lr}
    1454:	08004eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, lr}
	...
    1460:	08004eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, lr}
    1464:	08004f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, lr}
    1468:	08004f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, lr}
    146c:	08004f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, lr}
    1470:	08004f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, lr}
    1474:	08004f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, lr}
    1478:	08004f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, lr}
    147c:	08004f84 	stmdaeq	r0, {r2, r7, r8, r9, sl, fp, lr}
    1480:	08004f84 	stmdaeq	r0, {r2, r7, r8, r9, sl, fp, lr}
    1484:	08005008 	stmdaeq	r0, {r3, ip, lr}
    1488:	08005008 	stmdaeq	r0, {r3, ip, lr}
    148c:	0800501c 	stmdaeq	r0, {r2, r3, r4, ip, lr}
    1490:	0800501c 	stmdaeq	r0, {r2, r3, r4, ip, lr}
    1494:	080050bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, lr}
    1498:	080050bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, lr}
    149c:	08005230 	stmdaeq	r0, {r4, r5, r9, ip, lr}
    14a0:	08005230 	stmdaeq	r0, {r4, r5, r9, ip, lr}
    14a4:	08005260 	stmdaeq	r0, {r5, r6, r9, ip, lr}
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
       4:	08000340 	stmdaeq	r0, {r6, r8, r9}
       8:	40500001 	subsmi	r0, r0, r1
       c:	6c080003 	stcvs	0, cr0, [r8], {3}
      10:	04080003 	streq	r0, [r8], #-3
      14:	5001f300 	andpl	pc, r1, r0, lsl #6
      18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      1c:	00000000 	andeq	r0, r0, r0
      20:	0004e000 	andeq	lr, r4, r0
      24:	0004e408 	andeq	lr, r4, r8, lsl #8
      28:	30000208 	andcc	r0, r0, r8, lsl #4
      2c:	0004e49f 	muleq	r4, pc, r4	; <UNPREDICTABLE>
      30:	0004e808 	andeq	lr, r4, r8, lsl #16
      34:	72000508 	andvc	r0, r0, #8, 10	; 0x2000000
      38:	9f1a3c00 	svcls	0x001a3c00
      3c:	080004e8 	stmdaeq	r0, {r3, r5, r6, r7, sl}
      40:	080004f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl}
      44:	00520001 	subseq	r0, r2, r1
      48:	06080005 	streq	r0, [r8], -r5
      4c:	06080005 	streq	r0, [r8], -r5
      50:	08007100 	stmdaeq	r0, {r8, ip, sp, lr}
      54:	069f1aff 			; <UNDEFINED> instruction: 0x069f1aff
      58:	0e080005 	cdpeq	0, 0, cr0, cr8, cr5, {0}
      5c:	01080005 	tsteq	r8, r5
      60:	05365200 	ldreq	r5, [r6, #-512]!	; 0x200
      64:	05380800 	ldreq	r0, [r8, #-2048]!	; 0x800
      68:	00010800 	andeq	r0, r1, r0, lsl #16
      6c:	00000052 	andeq	r0, r0, r2, asr r0
      70:	00000000 	andeq	r0, r0, r0
      74:	0004e000 	andeq	lr, r4, r0
      78:	0004f208 	andeq	pc, r4, r8, lsl #4
      7c:	30000208 	andcc	r0, r0, r8, lsl #4
      80:	0005069f 	muleq	r5, pc, r6	; <UNPREDICTABLE>
      84:	00052408 	andeq	r2, r5, r8, lsl #8
      88:	30000208 	andcc	r0, r0, r8, lsl #4
      8c:	0005249f 	muleq	r5, pc, r4	; <UNPREDICTABLE>
      90:	00053408 	andeq	r3, r5, r8, lsl #8
      94:	52000108 	andpl	r0, r0, #8, 2
      98:	08000536 	stmdaeq	r0, {r1, r2, r4, r5, r8, sl}
      9c:	08000550 	stmdaeq	r0, {r4, r6, r8, sl}
      a0:	9f300002 	svcls	0x00300002
	...
      ac:	080004e0 	stmdaeq	r0, {r5, r6, r7, sl}
      b0:	080004f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl}
      b4:	9f320002 	svcls	0x00320002
      b8:	08000506 	stmdaeq	r0, {r1, r2, r8, sl}
      bc:	08000528 	stmdaeq	r0, {r3, r5, r8, sl}
      c0:	9f320002 	svcls	0x00320002
      c4:	08000528 	stmdaeq	r0, {r3, r5, r8, sl}
      c8:	0800052c 	stmdaeq	r0, {r2, r3, r5, r8, sl}
      cc:	0073000d 	rsbseq	r0, r3, sp
      d0:	1a243d48 	bne	90f5f8 <_Min_Stack_Size+0x90f1f8>
      d4:	01232540 	teqeq	r3, r0, asr #10
      d8:	369f2431 			; <UNDEFINED> instruction: 0x369f2431
      dc:	50080005 	andpl	r0, r8, r5
      e0:	02080005 	andeq	r0, r8, #5
      e4:	009f3200 	addseq	r3, pc, r0, lsl #4
      e8:	00000000 	andeq	r0, r0, r0
      ec:	e0000000 	and	r0, r0, r0
      f0:	f2080004 	vhadd.s8	d0, d8, d4
      f4:	02080004 	andeq	r0, r8, #4
      f8:	069f3000 	ldreq	r3, [pc], r0
      fc:	08080005 	stmdaeq	r8, {r0, r2}
     100:	02080005 	andeq	r0, r8, #5
     104:	089f3000 	ldmeq	pc, {ip, sp}	; <UNPREDICTABLE>
     108:	36080005 	strcc	r0, [r8], -r5
     10c:	09080005 	stmdbeq	r8, {r0, r2}
     110:	40007000 	andmi	r7, r0, r0
     114:	461a2442 	ldrmi	r2, [sl], -r2, asr #8
     118:	05369f25 	ldreq	r9, [r6, #-3877]!	; 0xf25
     11c:	05500800 	ldrbeq	r0, [r0, #-2048]	; 0x800
     120:	00020800 	andeq	r0, r2, r0, lsl #16
     124:	00009f30 	andeq	r9, r0, r0, lsr pc
     128:	00000000 	andeq	r0, r0, r0
     12c:	04e00000 	strbteq	r0, [r0], #0
     130:	04f20800 	ldrbteq	r0, [r2], #2048	; 0x800
     134:	00020800 	andeq	r0, r2, r0, lsl #16
     138:	05069f32 	streq	r9, [r6, #-3890]	; 0xf32
     13c:	05180800 	ldreq	r0, [r8, #-2048]	; 0x800
     140:	00020800 	andeq	r0, r2, r0, lsl #16
     144:	05189f32 	ldreq	r9, [r8, #-3890]	; 0xf32
     148:	05360800 	ldreq	r0, [r6, #-2048]!	; 0x800
     14c:	00010800 	andeq	r0, r1, r0, lsl #16
     150:	00053651 	andeq	r3, r5, r1, asr r6
     154:	00055008 	andeq	r5, r5, r8
     158:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
     15c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     160:	00000000 	andeq	r0, r0, r0
     164:	00056c00 	andeq	r6, r5, r0, lsl #24
     168:	00057408 	andeq	r7, r5, r8, lsl #8
     16c:	50000108 	andpl	r0, r0, r8, lsl #2
     170:	08000574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl}
     174:	08000612 	stmdaeq	r0, {r1, r4, r9, sl}
     178:	12570001 	subsne	r0, r7, #1
     17c:	38080006 	stmdacc	r8, {r1, r2}
     180:	04080006 	streq	r0, [r8], #-6
     184:	5001f300 	andpl	pc, r1, r0, lsl #6
     188:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     18c:	00000000 	andeq	r0, r0, r0
     190:	00056c00 	andeq	r6, r5, r0, lsl #24
     194:	00057b08 	andeq	r7, r5, r8, lsl #22
     198:	51000108 	tstpl	r0, r8, lsl #2
     19c:	0800057b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r8, sl}
     1a0:	080005c0 	stmdaeq	r0, {r6, r7, r8, sl}
     1a4:	c0560001 	subsgt	r0, r6, r1
     1a8:	d8080005 	stmdale	r8, {r0, r2}
     1ac:	16080005 	strne	r0, [r8], -r5
     1b0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     1b4:	244b4012 	strbcs	r4, [fp], #-18
     1b8:	14163122 	ldrne	r3, [r6], #-290	; 0x122
     1bc:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
     1c0:	0001282d 	andeq	r2, r1, sp, lsr #16
     1c4:	d89f1316 	ldmle	pc, {r1, r2, r4, r8, r9, ip}	; <UNPREDICTABLE>
     1c8:	12080005 	andne	r0, r8, #5
     1cc:	01080006 	tsteq	r8, r6
     1d0:	06125600 	ldreq	r5, [r2], -r0, lsl #12
     1d4:	06380800 	ldrteq	r0, [r8], -r0, lsl #16
     1d8:	00040800 	andeq	r0, r4, r0, lsl #16
     1dc:	9f5101f3 	svcls	0x005101f3
	...
     1e8:	0800056c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl}
     1ec:	0800057b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r8, sl}
     1f0:	7b520001 	blvc	14801fc <_Min_Stack_Size+0x147fdfc>
     1f4:	12080005 	andne	r0, r8, #5
     1f8:	01080006 	tsteq	r8, r6
     1fc:	06125800 	ldreq	r5, [r2], -r0, lsl #16
     200:	06380800 	ldrteq	r0, [r8], -r0, lsl #16
     204:	00040800 	andeq	r0, r4, r0, lsl #16
     208:	9f5201f3 	svcls	0x005201f3
	...
     214:	080005d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, sl}
     218:	080005d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl}
     21c:	9f310002 	svcls	0x00310002
     220:	0800060e 	stmdaeq	r0, {r1, r2, r3, r9, sl}
     224:	08000638 	stmdaeq	r0, {r3, r4, r5, r9, sl}
     228:	00500001 	subseq	r0, r0, r1
     22c:	00000000 	andeq	r0, r0, r0
     230:	7c000000 	stcvc	0, cr0, [r0], {-0}
     234:	88080005 	stmdahi	r8, {r0, r2}
     238:	01080005 	tsteq	r8, r5
     23c:	05885000 	streq	r5, [r8]
     240:	05d80800 	ldrbeq	r0, [r8, #2048]	; 0x800
     244:	00010800 	andeq	r0, r1, r0, lsl #16
     248:	0005d854 	andeq	sp, r5, r4, asr r8
     24c:	0005da08 	andeq	sp, r5, r8, lsl #20
     250:	50000108 	andpl	r0, r0, r8, lsl #2
     254:	080005da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl}
     258:	0800060a 	stmdaeq	r0, {r1, r3, r9, sl}
     25c:	0a540001 	beq	1500268 <_Min_Stack_Size+0x14ffe68>
     260:	0e080006 	cdpeq	0, 0, cr0, cr8, cr6, {0}
     264:	01080006 	tsteq	r8, r6
     268:	060e5000 	streq	r5, [lr], -r0
     26c:	06120800 	ldreq	r0, [r2], -r0, lsl #16
     270:	00010800 	andeq	r0, r1, r0, lsl #16
     274:	00000054 	andeq	r0, r0, r4, asr r0
     278:	00000000 	andeq	r0, r0, r0
     27c:	0005e000 	andeq	lr, r5, r0
     280:	0005e608 	andeq	lr, r5, r8, lsl #12
     284:	30000208 	andcc	r0, r0, r8, lsl #4
     288:	0005e69f 	muleq	r5, pc, r6	; <UNPREDICTABLE>
     28c:	0005ec08 	andeq	lr, r5, r8, lsl #24
     290:	31000208 	tstcc	r0, r8, lsl #4
     294:	0005ec9f 	muleq	r5, pc, ip	; <UNPREDICTABLE>
     298:	00060a08 	andeq	r0, r6, r8, lsl #20
     29c:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
     2a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     2a4:	00000000 	andeq	r0, r0, r0
     2a8:	00063800 	andeq	r3, r6, r0, lsl #16
     2ac:	00064608 	andeq	r4, r6, r8, lsl #12
     2b0:	50000108 	andpl	r0, r0, r8, lsl #2
     2b4:	08000646 	stmdaeq	r0, {r1, r2, r6, r9, sl}
     2b8:	08000684 	stmdaeq	r0, {r2, r7, r9, sl}
     2bc:	01f30004 	mvnseq	r0, r4
     2c0:	00009f50 	andeq	r9, r0, r0, asr pc
     2c4:	00000000 	andeq	r0, r0, r0
     2c8:	06380000 	ldrteq	r0, [r8], -r0
     2cc:	064b0800 	strbeq	r0, [fp], -r0, lsl #16
     2d0:	00010800 	andeq	r0, r1, r0, lsl #16
     2d4:	00064b51 	andeq	r4, r6, r1, asr fp
     2d8:	00066e08 	andeq	r6, r6, r8, lsl #28
     2dc:	57000108 	strpl	r0, [r0, -r8, lsl #2]
     2e0:	0800066e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl}
     2e4:	08000671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl}
     2e8:	71500001 	cmpvc	r0, r1
     2ec:	72080006 	andvc	r0, r8, #6
     2f0:	04080006 	streq	r0, [r8], #-6
     2f4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     2f8:	0006729f 	muleq	r6, pc, r2	; <UNPREDICTABLE>
     2fc:	00067408 	andeq	r7, r6, r8, lsl #8
     300:	57000108 	strpl	r0, [r0, -r8, lsl #2]
     304:	08000674 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl}
     308:	08000684 	stmdaeq	r0, {r2, r7, r9, sl}
     30c:	01f30004 	mvnseq	r0, r4
     310:	00009f51 	andeq	r9, r0, r1, asr pc
     314:	00000000 	andeq	r0, r0, r0
     318:	06440000 	strbeq	r0, [r4], -r0
     31c:	066e0800 	strbteq	r0, [lr], -r0, lsl #16
     320:	00010800 	andeq	r0, r1, r0, lsl #16
     324:	00067255 	andeq	r7, r6, r5, asr r2
     328:	00067408 	andeq	r7, r6, r8, lsl #8
     32c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
     338:	080006a2 	stmdaeq	r0, {r1, r5, r7, r9, sl}
     33c:	080006da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl}
     340:	00540001 	subseq	r0, r4, r1
     344:	00000000 	andeq	r0, r0, r0
     348:	1c000000 	stcne	0, cr0, [r0], {-0}
     34c:	88080007 	stmdahi	r8, {r0, r1, r2}
     350:	01080007 	tsteq	r8, r7
     354:	07dc5a00 	ldrbeq	r5, [ip, r0, lsl #20]
     358:	07e20800 	strbeq	r0, [r2, r0, lsl #16]!
     35c:	00010800 	andeq	r0, r1, r0, lsl #16
     360:	0000005a 	andeq	r0, r0, sl, asr r0
     364:	00000000 	andeq	r0, r0, r0
     368:	0007c600 	andeq	ip, r7, r0, lsl #12
     36c:	0007cc08 	andeq	ip, r7, r8, lsl #24
     370:	53000108 	movwpl	r0, #264	; 0x108
     374:	080007cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl}
     378:	080007d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl}
     37c:	84030005 	strhi	r0, [r3], #-5
     380:	00200000 	eoreq	r0, r0, r0
     384:	00000000 	andeq	r0, r0, r0
     388:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
     38c:	0e080007 	cdpeq	0, 0, cr0, cr8, cr7, {0}
     390:	01080008 	tsteq	r8, r8
     394:	00005600 	andeq	r5, r0, r0, lsl #12
     398:	00000000 	andeq	r0, r0, r0
     39c:	083c0000 	ldmdaeq	ip!, {}	; <UNPREDICTABLE>
     3a0:	08480800 	stmdaeq	r8, {fp}^
     3a4:	00010800 	andeq	r0, r1, r0, lsl #16
     3a8:	00084850 	andeq	r4, r8, r0, asr r8
     3ac:	00087008 	andeq	r7, r8, r8
     3b0:	f3000408 	vshl.u8	d0, d8, d0
     3b4:	009f5001 	addseq	r5, pc, r1
     3b8:	00000000 	andeq	r0, r0, r0
     3bc:	42000000 	andmi	r0, r0, #0
     3c0:	66080008 	strvs	r0, [r8], -r8
     3c4:	01080008 	tsteq	r8, r8
     3c8:	00005400 	andeq	r5, r0, r0, lsl #8
     3cc:	00000000 	andeq	r0, r0, r0
     3d0:	08540000 	ldmdaeq	r4, {}^	; <UNPREDICTABLE>
     3d4:	08660800 	stmdaeq	r6!, {fp}^
     3d8:	00190800 	andseq	r0, r9, r0, lsl #16
     3dc:	40062c74 	andmi	r2, r6, r4, ror ip
     3e0:	0322244b 	teqeq	r2, #1258291200	; 0x4b000000
     3e4:	20000064 	andcs	r0, r0, r4, rrx
     3e8:	062c2306 	strteq	r2, [ip], -r6, lsl #6
     3ec:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
     3f0:	1aff082a 	bne	fffc24a0 <_estack+0xdff924a0>
     3f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     3f8:	00000000 	andeq	r0, r0, r0
     3fc:	00087800 	andeq	r7, r8, r0, lsl #16
     400:	00088208 	andeq	r8, r8, r8, lsl #4
     404:	50000108 	andpl	r0, r0, r8, lsl #2
     408:	08000882 	stmdaeq	r0, {r1, r7, fp}
     40c:	0800088a 	stmdaeq	r0, {r1, r3, r7, fp}
     410:	00540001 	subseq	r0, r4, r1
     414:	00000000 	andeq	r0, r0, r0
     418:	8c000000 	stchi	0, cr0, [r0], {-0}
     41c:	a7080008 	strge	r0, [r8, -r8]
     420:	01080008 	tsteq	r8, r8
     424:	08a75000 	stmiaeq	r7!, {ip, lr}
     428:	08aa0800 	stmiaeq	sl!, {fp}
     42c:	00010800 	andeq	r0, r1, r0, lsl #16
     430:	0008aa56 	andeq	sl, r8, r6, asr sl
     434:	0008ad08 	andeq	sl, r8, r8, lsl #26
     438:	50000108 	andpl	r0, r0, r8, lsl #2
     43c:	080008ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, fp}
     440:	080008d0 	stmdaeq	r0, {r4, r6, r7, fp}
     444:	d0560001 	subsle	r0, r6, r1
     448:	d3080008 	movwle	r0, #32776	; 0x8008
     44c:	01080008 	tsteq	r8, r8
     450:	08d35000 	ldmeq	r3, {ip, lr}^
     454:	095a0800 	ldmdbeq	sl, {fp}^
     458:	00010800 	andeq	r0, r1, r0, lsl #16
     45c:	00000056 	andeq	r0, r0, r6, asr r0
     460:	00000000 	andeq	r0, r0, r0
     464:	00088c00 	andeq	r8, r8, r0, lsl #24
     468:	0008a708 	andeq	sl, r8, r8, lsl #14
     46c:	51000108 	tstpl	r0, r8, lsl #2
     470:	080008a7 	stmdaeq	r0, {r0, r1, r2, r5, r7, fp}
     474:	080008aa 	stmdaeq	r0, {r1, r3, r5, r7, fp}
     478:	aa540001 	bge	1500484 <_Min_Stack_Size+0x1500084>
     47c:	ad080008 	stcge	0, cr0, [r8, #-32]	; 0xffffffe0
     480:	01080008 	tsteq	r8, r8
     484:	08ad5100 	stmiaeq	sp!, {r8, ip, lr}
     488:	08cc0800 	stmiaeq	ip, {fp}^
     48c:	00010800 	andeq	r0, r1, r0, lsl #16
     490:	0008cc54 	andeq	ip, r8, r4, asr ip
     494:	0008d008 	andeq	sp, r8, r8
     498:	f3000408 	vshl.u8	d0, d8, d0
     49c:	d09f5101 	addsle	r5, pc, r1, lsl #2
     4a0:	d3080008 	movwle	r0, #32776	; 0x8008
     4a4:	01080008 	tsteq	r8, r8
     4a8:	08d35100 	ldmeq	r3, {r8, ip, lr}^
     4ac:	08ea0800 	stmiaeq	sl!, {fp}^
     4b0:	00010800 	andeq	r0, r1, r0, lsl #16
     4b4:	0008ea54 	andeq	lr, r8, r4, asr sl
     4b8:	0008f408 	andeq	pc, r8, r8, lsl #8
     4bc:	f3000408 	vshl.u8	d0, d8, d0
     4c0:	f49f5101 			; <UNDEFINED> instruction: 0xf49f5101
     4c4:	48080008 	stmdami	r8, {r3}
     4c8:	01080009 	tsteq	r8, r9
     4cc:	09485400 	stmdbeq	r8, {sl, ip, lr}^
     4d0:	09500800 	ldmdbeq	r0, {fp}^
     4d4:	00040800 	andeq	r0, r4, r0, lsl #16
     4d8:	9f5101f3 	svcls	0x005101f3
     4dc:	08000950 	stmdaeq	r0, {r4, r6, r8, fp}
     4e0:	0800095a 	stmdaeq	r0, {r1, r3, r4, r6, r8, fp}
     4e4:	00540001 	subseq	r0, r4, r1
     4e8:	00000000 	andeq	r0, r0, r0
     4ec:	8c000000 	stchi	0, cr0, [r0], {-0}
     4f0:	a7080008 	strge	r0, [r8, -r8]
     4f4:	01080008 	tsteq	r8, r8
     4f8:	08a75200 	stmiaeq	r7!, {r9, ip, lr}
     4fc:	08aa0800 	stmiaeq	sl!, {fp}
     500:	00010800 	andeq	r0, r1, r0, lsl #16
     504:	0008aa57 	andeq	sl, r8, r7, asr sl
     508:	0008ad08 	andeq	sl, r8, r8, lsl #26
     50c:	52000108 	andpl	r0, r0, #8, 2
     510:	080008ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, fp}
     514:	080008d0 	stmdaeq	r0, {r4, r6, r7, fp}
     518:	d0570001 	subsle	r0, r7, r1
     51c:	d3080008 	movwle	r0, #32776	; 0x8008
     520:	01080008 	tsteq	r8, r8
     524:	08d35200 	ldmeq	r3, {r9, ip, lr}^
     528:	095a0800 	ldmdbeq	sl, {fp}^
     52c:	00010800 	andeq	r0, r1, r0, lsl #16
     530:	00000057 	andeq	r0, r0, r7, asr r0
     534:	00000000 	andeq	r0, r0, r0
     538:	00088c00 	andeq	r8, r8, r0, lsl #24
     53c:	0008a708 	andeq	sl, r8, r8, lsl #14
     540:	53000108 	movwpl	r0, #264	; 0x108
     544:	080008a7 	stmdaeq	r0, {r0, r1, r2, r5, r7, fp}
     548:	080008aa 	stmdaeq	r0, {r1, r3, r5, r7, fp}
     54c:	aa580001 	bge	1600558 <_Min_Stack_Size+0x1600158>
     550:	ad080008 	stcge	0, cr0, [r8, #-32]	; 0xffffffe0
     554:	01080008 	tsteq	r8, r8
     558:	08ad5300 	stmiaeq	sp!, {r8, r9, ip, lr}
     55c:	08d00800 	ldmeq	r0, {fp}^
     560:	00010800 	andeq	r0, r1, r0, lsl #16
     564:	0008d058 	andeq	sp, r8, r8, asr r0
     568:	0008d308 	andeq	sp, r8, r8, lsl #6
     56c:	53000108 	movwpl	r0, #264	; 0x108
     570:	080008d3 	stmdaeq	r0, {r0, r1, r4, r6, r7, fp}
     574:	0800095a 	stmdaeq	r0, {r1, r3, r4, r6, r8, fp}
     578:	00580001 	subseq	r0, r8, r1
     57c:	00000000 	andeq	r0, r0, r0
     580:	8c000000 	stchi	0, cr0, [r0], {-0}
     584:	c6080008 	strgt	r0, [r8], -r8
     588:	02080008 	andeq	r0, r8, #8
     58c:	c6009100 	strgt	r9, [r0], -r0, lsl #2
     590:	d0080008 	andle	r0, r8, r8
     594:	02080008 	andeq	r0, r8, #8
     598:	d09f3000 	addsle	r3, pc, r0
     59c:	ea080008 	b	2005c4 <_Min_Stack_Size+0x2001c4>
     5a0:	02080008 	andeq	r0, r8, #8
     5a4:	ea009100 	b	249ac <_Min_Stack_Size+0x245ac>
     5a8:	ee080008 	cdp	0, 0, cr0, cr8, cr8, {0}
     5ac:	02080008 	andeq	r0, r8, #8
     5b0:	f49f3000 			; <UNDEFINED> instruction: 0xf49f3000
     5b4:	1a080008 	bne	2005dc <_Min_Stack_Size+0x2001dc>
     5b8:	02080009 	andeq	r0, r8, #9
     5bc:	1a207d00 	bne	81f9c4 <_Min_Stack_Size+0x81f5c4>
     5c0:	5a080009 	bpl	2005ec <_Min_Stack_Size+0x2001ec>
     5c4:	01080009 	tsteq	r8, r9
     5c8:	00005900 	andeq	r5, r0, r0, lsl #18
     5cc:	00000000 	andeq	r0, r0, r0
     5d0:	089c0000 	ldmeq	ip, {}	; <UNPREDICTABLE>
     5d4:	08a70800 	stmiaeq	r7!, {fp}
     5d8:	00010800 	andeq	r0, r1, r0, lsl #16
     5dc:	0008a750 	andeq	sl, r8, r0, asr r7
     5e0:	0008aa08 	andeq	sl, r8, r8, lsl #20
     5e4:	56000108 	strpl	r0, [r0], -r8, lsl #2
     5e8:	080008aa 	stmdaeq	r0, {r1, r3, r5, r7, fp}
     5ec:	080008ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, fp}
     5f0:	ad500001 	ldclge	0, cr0, [r0, #-4]
     5f4:	d0080008 	andle	r0, r8, r8
     5f8:	01080008 	tsteq	r8, r8
     5fc:	08d05600 	ldmeq	r0, {r9, sl, ip, lr}^
     600:	08d30800 	ldmeq	r3, {fp}^
     604:	00010800 	andeq	r0, r1, r0, lsl #16
     608:	0008d350 	andeq	sp, r8, r0, asr r3
     60c:	00095a08 	andeq	r5, r9, r8, lsl #20
     610:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
     61c:	080008c6 	stmdaeq	r0, {r1, r2, r6, r7, fp}
     620:	080008d0 	stmdaeq	r0, {r4, r6, r7, fp}
     624:	ea550001 	b	1540630 <_Min_Stack_Size+0x1540230>
     628:	f4080008 	vst4.8	{d0-d3}, [r8], r8
     62c:	01080008 	tsteq	r8, r8
     630:	091a5500 	ldmdbeq	sl, {r8, sl, ip, lr}
     634:	09280800 	stmdbeq	r8!, {fp}
     638:	00020800 	andeq	r0, r2, r0, lsl #16
     63c:	09289f30 	stmdbeq	r8!, {r4, r5, r8, r9, sl, fp, ip, pc}
     640:	09300800 	ldmdbeq	r0!, {fp}
     644:	00010800 	andeq	r0, r1, r0, lsl #16
     648:	00093050 	andeq	r3, r9, r0, asr r0
     64c:	00093208 	andeq	r3, r9, r8, lsl #4
     650:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     654:	08000932 	stmdaeq	r0, {r1, r4, r5, r8, fp}
     658:	08000935 	stmdaeq	r0, {r0, r2, r4, r5, r8, fp}
     65c:	38500001 	ldmdacc	r0, {r0}^
     660:	5a080009 	bpl	20068c <_Min_Stack_Size+0x20028c>
     664:	01080009 	tsteq	r8, r9
     668:	00005500 	andeq	r5, r0, r0, lsl #10
     66c:	00000000 	andeq	r0, r0, r0
     670:	089c0000 	ldmeq	ip, {}	; <UNPREDICTABLE>
     674:	08ee0800 	stmiaeq	lr!, {fp}^
     678:	00020800 	andeq	r0, r2, r0, lsl #16
     67c:	08f49f30 	ldmeq	r4!, {r4, r5, r8, r9, sl, fp, ip, pc}^
     680:	09080800 	stmdbeq	r8, {fp}
     684:	00020800 	andeq	r0, r2, r0, lsl #16
     688:	09089f30 	stmdbeq	r8, {r4, r5, r8, r9, sl, fp, ip, pc}
     68c:	09100800 	ldmdbeq	r0, {fp}
     690:	00010800 	andeq	r0, r1, r0, lsl #16
     694:	00091053 	andeq	r1, r9, r3, asr r0
     698:	00091408 	andeq	r1, r9, r8, lsl #8
     69c:	51000108 	tstpl	r0, r8, lsl #2
     6a0:	08000914 	stmdaeq	r0, {r2, r4, r8, fp}
     6a4:	08000919 	stmdaeq	r0, {r0, r3, r4, r8, fp}
     6a8:	4644001b 			; <UNDEFINED> instruction: 0x4644001b
     6ac:	24464024 	strbcs	r4, [r6], #-36	; 0x24
     6b0:	2e300077 	mrccs	0, 1, r0, cr0, cr7, {3}
     6b4:	16000128 	strne	r0, [r0], -r8, lsr #2
     6b8:	78007313 	stmdavc	r0, {r0, r1, r4, r8, r9, ip, sp, lr}
     6bc:	282e3000 	stmdacs	lr!, {ip, sp}
     6c0:	13160001 	tstne	r6, #1
     6c4:	0009199f 	muleq	r9, pc, r9	; <UNPREDICTABLE>
     6c8:	00095a08 	andeq	r5, r9, r8, lsl #20
     6cc:	44002608 	strmi	r2, [r0], #-1544	; 0x608
     6d0:	46402446 	strbmi	r2, [r0], -r6, asr #8
     6d4:	30007724 	andcc	r7, r0, r4, lsr #14
     6d8:	0001282e 	andeq	r2, r1, lr, lsr #16
     6dc:	44401316 	strbmi	r1, [r0], #-790	; 0x316
     6e0:	00773024 	rsbseq	r3, r7, r4, lsr #32
     6e4:	01282e30 	teqeq	r8, r0, lsr lr
     6e8:	78131600 	ldmdavc	r3, {r9, sl, ip}
     6ec:	282e3000 	stmdacs	lr!, {ip, sp}
     6f0:	13160001 	tstne	r6, #1
     6f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     6f8:	00000000 	andeq	r0, r0, r0
     6fc:	00091e00 	andeq	r1, r9, r0, lsl #28
     700:	00092308 	andeq	r2, r9, r8, lsl #6
     704:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     710:	080008bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp}
     714:	080008d0 	stmdaeq	r0, {r4, r6, r7, fp}
     718:	dc550001 	mrrcle	0, 0, r0, r5, cr1
     71c:	ee080008 	cdp	0, 0, cr0, cr8, cr8, {0}
     720:	01080008 	tsteq	r8, r8
     724:	08f45500 	ldmeq	r4!, {r8, sl, ip, lr}^
     728:	09300800 	ldmdbeq	r0!, {fp}
     72c:	00010800 	andeq	r0, r1, r0, lsl #16
     730:	00093255 	andeq	r3, r9, r5, asr r2
     734:	00093808 	andeq	r3, r9, r8, lsl #16
     738:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
     744:	080008bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp}
     748:	080008d0 	stmdaeq	r0, {r4, r6, r7, fp}
     74c:	dc580001 	mrrcle	0, 0, r0, r8, cr1
     750:	5a080008 	bpl	200778 <_Min_Stack_Size+0x200378>
     754:	01080009 	tsteq	r8, r9
     758:	00005800 	andeq	r5, r0, r0, lsl #16
     75c:	00000000 	andeq	r0, r0, r0
     760:	08bc0000 	ldmeq	ip!, {}	; <UNPREDICTABLE>
     764:	08cc0800 	stmiaeq	ip, {fp}^
     768:	00010800 	andeq	r0, r1, r0, lsl #16
     76c:	0008cc54 	andeq	ip, r8, r4, asr ip
     770:	0008d008 	andeq	sp, r8, r8
     774:	f3000408 	vshl.u8	d0, d8, d0
     778:	dc9f5101 	ldfles	f5, [pc], {1}
     77c:	ea080008 	b	2007a4 <_Min_Stack_Size+0x2003a4>
     780:	01080008 	tsteq	r8, r8
     784:	08ea5400 	stmiaeq	sl!, {sl, ip, lr}^
     788:	08f40800 	ldmeq	r4!, {fp}^
     78c:	00040800 	andeq	r0, r4, r0, lsl #16
     790:	9f5101f3 	svcls	0x005101f3
     794:	080008f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp}
     798:	08000948 	stmdaeq	r0, {r3, r6, r8, fp}
     79c:	48540001 	ldmdami	r4, {r0}^
     7a0:	50080009 	andpl	r0, r8, r9
     7a4:	04080009 	streq	r0, [r8], #-9
     7a8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     7ac:	0009509f 	muleq	r9, pc, r0	; <UNPREDICTABLE>
     7b0:	00095a08 	andeq	r5, r9, r8, lsl #20
     7b4:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
     7c0:	080008bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp}
     7c4:	080008c6 	stmdaeq	r0, {r1, r2, r6, r7, fp}
     7c8:	9f300002 	svcls	0x00300002
     7cc:	080008c6 	stmdaeq	r0, {r1, r2, r6, r7, fp}
     7d0:	080008d0 	stmdaeq	r0, {r4, r6, r7, fp}
     7d4:	9f310002 	svcls	0x00310002
     7d8:	080008dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp}
     7dc:	080008ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, fp}
     7e0:	9f300002 	svcls	0x00300002
     7e4:	080008f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp}
     7e8:	0800095a 	stmdaeq	r0, {r1, r3, r4, r6, r8, fp}
     7ec:	9f300002 	svcls	0x00300002
	...
     7f8:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
     7fc:	08000948 	stmdaeq	r0, {r3, r6, r8, fp}
     800:	48540001 	ldmdami	r4, {r0}^
     804:	50080009 	andpl	r0, r8, r9
     808:	04080009 	streq	r0, [r8], #-9
     80c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     810:	0009509f 	muleq	r9, pc, r0	; <UNPREDICTABLE>
     814:	00095a08 	andeq	r5, r9, r8, lsl #20
     818:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
     824:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
     828:	08000942 	stmdaeq	r0, {r1, r6, r8, fp}
     82c:	9f300002 	svcls	0x00300002
     830:	08000942 	stmdaeq	r0, {r1, r6, r8, fp}
     834:	0800094a 	stmdaeq	r0, {r1, r3, r6, r8, fp}
     838:	9f310002 	svcls	0x00310002
     83c:	08000950 	stmdaeq	r0, {r4, r6, r8, fp}
     840:	0800095a 	stmdaeq	r0, {r1, r3, r4, r6, r8, fp}
     844:	9f300002 	svcls	0x00300002
	...
     850:	0800095c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp}
     854:	0800096b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r8, fp}
     858:	6b500001 	blvs	1400864 <_Min_Stack_Size+0x1400464>
     85c:	6e080009 	cdpvs	0, 0, cr0, cr8, cr9, {0}
     860:	01080009 	tsteq	r8, r9
     864:	096e5600 	stmdbeq	lr!, {r9, sl, ip, lr}^
     868:	09710800 	ldmdbeq	r1!, {fp}^
     86c:	00010800 	andeq	r0, r1, r0, lsl #16
     870:	00097150 	andeq	r7, r9, r0, asr r1
     874:	00098208 	andeq	r8, r9, r8, lsl #4
     878:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
     884:	0800095c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp}
     888:	0800096b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r8, fp}
     88c:	6b510001 	blvs	1440898 <_Min_Stack_Size+0x1440498>
     890:	6e080009 	cdpvs	0, 0, cr0, cr8, cr9, {0}
     894:	01080009 	tsteq	r8, r9
     898:	096e5400 	stmdbeq	lr!, {sl, ip, lr}^
     89c:	09710800 	ldmdbeq	r1!, {fp}^
     8a0:	00010800 	andeq	r0, r1, r0, lsl #16
     8a4:	00097151 	andeq	r7, r9, r1, asr r1
     8a8:	00097808 	andeq	r7, r9, r8, lsl #16
     8ac:	54000108 	strpl	r0, [r0], #-264	; 0x108
     8b0:	08000978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp}
     8b4:	08000982 	stmdaeq	r0, {r1, r7, r8, fp}
     8b8:	01f30004 	mvnseq	r0, r4
     8bc:	00009f51 	andeq	r9, r0, r1, asr pc
     8c0:	00000000 	andeq	r0, r0, r0
     8c4:	09660000 	stmdbeq	r6!, {}^	; <UNPREDICTABLE>
     8c8:	096b0800 	stmdbeq	fp!, {fp}^
     8cc:	00010800 	andeq	r0, r1, r0, lsl #16
     8d0:	00096b50 	andeq	r6, r9, r0, asr fp
     8d4:	00096e08 	andeq	r6, r9, r8, lsl #28
     8d8:	56000108 	strpl	r0, [r0], -r8, lsl #2
     8dc:	0800096e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, fp}
     8e0:	08000971 	stmdaeq	r0, {r0, r4, r5, r6, r8, fp}
     8e4:	71500001 	cmpvc	r0, r1
     8e8:	82080009 	andhi	r0, r8, #9
     8ec:	01080009 	tsteq	r8, r9
     8f0:	00005600 	andeq	r5, r0, r0, lsl #12
     8f4:	00000000 	andeq	r0, r0, r0
     8f8:	09840000 	stmibeq	r4, {}	; <UNPREDICTABLE>
     8fc:	09930800 	ldmibeq	r3, {fp}
     900:	00010800 	andeq	r0, r1, r0, lsl #16
     904:	00099350 	andeq	r9, r9, r0, asr r3
     908:	00099608 	andeq	r9, r9, r8, lsl #12
     90c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     910:	08000996 	stmdaeq	r0, {r1, r2, r4, r7, r8, fp}
     914:	08000999 	stmdaeq	r0, {r0, r3, r4, r7, r8, fp}
     918:	99500001 	ldmdbls	r0, {r0}^
     91c:	aa080009 	bge	200948 <_Min_Stack_Size+0x200548>
     920:	01080009 	tsteq	r8, r9
     924:	00005500 	andeq	r5, r0, r0, lsl #10
     928:	00000000 	andeq	r0, r0, r0
     92c:	09840000 	stmibeq	r4, {}	; <UNPREDICTABLE>
     930:	09930800 	ldmibeq	r3, {fp}
     934:	00010800 	andeq	r0, r1, r0, lsl #16
     938:	00099351 	andeq	r9, r9, r1, asr r3
     93c:	00099608 	andeq	r9, r9, r8, lsl #12
     940:	56000108 	strpl	r0, [r0], -r8, lsl #2
     944:	08000996 	stmdaeq	r0, {r1, r2, r4, r7, r8, fp}
     948:	08000999 	stmdaeq	r0, {r0, r3, r4, r7, r8, fp}
     94c:	99510001 	ldmdbls	r1, {r0}^
     950:	a0080009 	andge	r0, r8, r9
     954:	01080009 	tsteq	r8, r9
     958:	09a05600 	stmibeq	r0!, {r9, sl, ip, lr}
     95c:	09aa0800 	stmibeq	sl!, {fp}
     960:	00040800 	andeq	r0, r4, r0, lsl #16
     964:	9f5101f3 	svcls	0x005101f3
	...
     970:	0800099a 	stmdaeq	r0, {r1, r3, r4, r7, r8, fp}
     974:	080009a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, fp}
     978:	00500001 	subseq	r0, r0, r1
     97c:	00000000 	andeq	r0, r0, r0
     980:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
     984:	93080009 	movwls	r0, #32777	; 0x8009
     988:	01080009 	tsteq	r8, r9
     98c:	09935000 	ldmibeq	r3, {ip, lr}
     990:	09960800 	ldmibeq	r6, {fp}
     994:	00010800 	andeq	r0, r1, r0, lsl #16
     998:	00099655 	andeq	r9, r9, r5, asr r6
     99c:	00099908 	andeq	r9, r9, r8, lsl #18
     9a0:	50000108 	andpl	r0, r0, r8, lsl #2
     9a4:	08000999 	stmdaeq	r0, {r0, r3, r4, r7, r8, fp}
     9a8:	080009aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, fp}
     9ac:	00550001 	subseq	r0, r5, r1
     9b0:	00000000 	andeq	r0, r0, r0
     9b4:	ac000000 	stcge	0, cr0, [r0], {-0}
     9b8:	bb080009 	bllt	2009e4 <_Min_Stack_Size+0x2005e4>
     9bc:	01080009 	tsteq	r8, r9
     9c0:	09bb5000 	ldmibeq	fp!, {ip, lr}
     9c4:	09be0800 	ldmibeq	lr!, {fp}
     9c8:	00010800 	andeq	r0, r1, r0, lsl #16
     9cc:	0009be54 	andeq	fp, r9, r4, asr lr
     9d0:	0009c108 	andeq	ip, r9, r8, lsl #2
     9d4:	50000108 	andpl	r0, r0, r8, lsl #2
     9d8:	080009c1 	stmdaeq	r0, {r0, r6, r7, r8, fp}
     9dc:	08000a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp}
     9e0:	00540001 	subseq	r0, r4, r1
     9e4:	00000000 	andeq	r0, r0, r0
     9e8:	ac000000 	stcge	0, cr0, [r0], {-0}
     9ec:	bb080009 	bllt	200a18 <_Min_Stack_Size+0x200618>
     9f0:	01080009 	tsteq	r8, r9
     9f4:	09bb5100 	ldmibeq	fp!, {r8, ip, lr}
     9f8:	09be0800 	ldmibeq	lr!, {fp}
     9fc:	00010800 	andeq	r0, r1, r0, lsl #16
     a00:	0009be56 	andeq	fp, r9, r6, asr lr
     a04:	0009c108 	andeq	ip, r9, r8, lsl #2
     a08:	51000108 	tstpl	r0, r8, lsl #2
     a0c:	080009c1 	stmdaeq	r0, {r0, r6, r7, r8, fp}
     a10:	080009cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp}
     a14:	cc560001 	mrrcgt	0, 0, r0, r6, cr1
     a18:	1c080009 	stcne	0, cr0, [r8], {9}
     a1c:	0408000a 	streq	r0, [r8], #-10
     a20:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     a24:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a28:	00000000 	andeq	r0, r0, r0
     a2c:	0009cc00 	andeq	ip, r9, r0, lsl #24
     a30:	0009e508 	andeq	lr, r9, r8, lsl #10
     a34:	50000108 	andpl	r0, r0, r8, lsl #2
     a38:	080009e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp}
     a3c:	080009ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, fp}
     a40:	ee570001 	cdp	0, 5, cr0, cr7, cr1, {0}
     a44:	04080009 	streq	r0, [r8], #-9
     a48:	0108000a 	tsteq	r8, sl
     a4c:	0a045000 	beq	114a54 <_Min_Stack_Size+0x114654>
     a50:	0a0a0800 	beq	282a58 <_Min_Stack_Size+0x282658>
     a54:	00010800 	andeq	r0, r1, r0, lsl #16
     a58:	000a1657 	andeq	r1, sl, r7, asr r6
     a5c:	000a1c08 	andeq	r1, sl, r8, lsl #24
     a60:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     a6c:	080009d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp}
     a70:	080009ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, fp}
     a74:	f2570001 	vhadd.s16	d16, d7, d1
     a78:	0a080009 	beq	200aa4 <_Min_Stack_Size+0x2006a4>
     a7c:	0108000a 	tsteq	r8, sl
     a80:	00005700 	andeq	r5, r0, r0, lsl #14
     a84:	00000000 	andeq	r0, r0, r0
     a88:	09be0000 	ldmibeq	lr!, {}	; <UNPREDICTABLE>
     a8c:	09c10800 	stmibeq	r1, {fp}^
     a90:	00030800 	andeq	r0, r3, r0, lsl #16
     a94:	c19f0470 	orrsgt	r0, pc, r0, ror r4	; <UNPREDICTABLE>
     a98:	1c080009 	stcne	0, cr0, [r8], {9}
     a9c:	0308000a 	movweq	r0, #32778	; 0x800a
     aa0:	9f047400 	svcls	0x00047400
	...
     aac:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
     ab0:	080009d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp}
     ab4:	9f300002 	svcls	0x00300002
     ab8:	080009d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp}
     abc:	08000a0a 	stmdaeq	r0, {r1, r3, r9, fp}
     ac0:	16550001 	ldrbne	r0, [r5], -r1
     ac4:	1c08000a 	stcne	0, cr0, [r8], {10}
     ac8:	0208000a 	andeq	r0, r8, #10
     acc:	009f3000 	addseq	r3, pc, r0
     ad0:	00000000 	andeq	r0, r0, r0
     ad4:	d4000000 	strle	r0, [r0], #-0
     ad8:	e5080009 	str	r0, [r8, #-9]
     adc:	01080009 	tsteq	r8, r9
     ae0:	09f25300 	ldmibeq	r2!, {r8, r9, ip, lr}^
     ae4:	09fa0800 	ldmibeq	sl!, {fp}^
     ae8:	00010800 	andeq	r0, r1, r0, lsl #16
     aec:	0009fa52 	andeq	pc, r9, r2, asr sl	; <UNPREDICTABLE>
     af0:	000a0808 	andeq	r0, sl, r8, lsl #16
     af4:	53000108 	movwpl	r0, #264	; 0x108
	...
     b00:	080009d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp}
     b04:	080009da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp}
     b08:	00720008 	rsbseq	r0, r2, r8
     b0c:	1f244440 	svcne	0x00244440
     b10:	09da9f1a 	ldmibeq	sl, {r1, r3, r4, r8, r9, sl, fp, ip, pc}^
     b14:	09e50800 	stmibeq	r5!, {fp}^
     b18:	00090800 	andeq	r0, r9, r0, lsl #16
     b1c:	40060070 	andmi	r0, r6, r0, ror r0
     b20:	1a1f2444 	bne	7c9c38 <_Min_Stack_Size+0x7c9838>
     b24:	0009f29f 	muleq	r9, pc, r2	; <UNPREDICTABLE>
     b28:	000a0808 	andeq	r0, sl, r8, lsl #16
     b2c:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
     b30:	24444000 	strbcs	r4, [r4], #-0
     b34:	009f1a1f 	addseq	r1, pc, pc, lsl sl	; <UNPREDICTABLE>
     b38:	00000000 	andeq	r0, r0, r0
     b3c:	b6000000 	strlt	r0, [r0], -r0
     b40:	bb080009 	bllt	200b6c <_Min_Stack_Size+0x20076c>
     b44:	01080009 	tsteq	r8, r9
     b48:	09bb5000 	ldmibeq	fp!, {ip, lr}
     b4c:	09be0800 	ldmibeq	lr!, {fp}
     b50:	00010800 	andeq	r0, r1, r0, lsl #16
     b54:	0009be54 	andeq	fp, r9, r4, asr lr
     b58:	0009c108 	andeq	ip, r9, r8, lsl #2
     b5c:	50000108 	andpl	r0, r0, r8, lsl #2
     b60:	080009c1 	stmdaeq	r0, {r0, r6, r7, r8, fp}
     b64:	08000a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp}
     b68:	00540001 	subseq	r0, r4, r1
     b6c:	00000000 	andeq	r0, r0, r0
     b70:	b6000000 	strlt	r0, [r0], -r0
     b74:	d8080009 	stmdale	r8, {r0, r3}
     b78:	02080009 	andeq	r0, r8, #9
     b7c:	d89f3000 	ldmle	pc, {ip, sp}	; <UNPREDICTABLE>
     b80:	e8080009 	stmda	r8, {r0, r3}
     b84:	02080009 	andeq	r0, r8, #9
     b88:	f29f3100 	vaddw.s16	<illegal reg q1.5>, <illegal reg q7.5>, d0
     b8c:	08080009 	stmdaeq	r8, {r0, r3}
     b90:	0208000a 	andeq	r0, r8, #10
     b94:	169f3000 	ldrne	r3, [pc], r0
     b98:	1c08000a 	stcne	0, cr0, [r8], {10}
     b9c:	0208000a 	andeq	r0, r8, #10
     ba0:	009f3000 	addseq	r3, pc, r0
     ba4:	00000000 	andeq	r0, r0, r0
     ba8:	1c000000 	stcne	0, cr0, [r0], {-0}
     bac:	3108000a 	tstcc	r8, sl
     bb0:	0108000a 	tsteq	r8, sl
     bb4:	0a315000 	beq	c54bbc <_Min_Stack_Size+0xc547bc>
     bb8:	0a340800 	beq	d02bc0 <_Min_Stack_Size+0xd027c0>
     bbc:	00010800 	andeq	r0, r1, r0, lsl #16
     bc0:	000a3454 	andeq	r3, sl, r4, asr r4
     bc4:	000a3708 	andeq	r3, sl, r8, lsl #14
     bc8:	50000108 	andpl	r0, r0, r8, lsl #2
     bcc:	08000a37 	stmdaeq	r0, {r0, r1, r2, r4, r5, r9, fp}
     bd0:	08000a60 	stmdaeq	r0, {r5, r6, r9, fp}
     bd4:	60540001 	subsvs	r0, r4, r1
     bd8:	6308000a 	movwvs	r0, #32778	; 0x800a
     bdc:	0108000a 	tsteq	r8, sl
     be0:	0a635000 	beq	18d4be8 <_Min_Stack_Size+0x18d47e8>
     be4:	0ace0800 	beq	ff382bec <_estack+0xdf352bec>
     be8:	00010800 	andeq	r0, r1, r0, lsl #16
     bec:	00000054 	andeq	r0, r0, r4, asr r0
     bf0:	00000000 	andeq	r0, r0, r0
     bf4:	000a1c00 	andeq	r1, sl, r0, lsl #24
     bf8:	000a3108 	andeq	r3, sl, r8, lsl #2
     bfc:	51000108 	tstpl	r0, r8, lsl #2
     c00:	08000a31 	stmdaeq	r0, {r0, r4, r5, r9, fp}
     c04:	08000a34 	stmdaeq	r0, {r2, r4, r5, r9, fp}
     c08:	34560001 	ldrbcc	r0, [r6], #-1
     c0c:	3708000a 	strcc	r0, [r8, -sl]
     c10:	0108000a 	tsteq	r8, sl
     c14:	0a375100 	beq	dd501c <_Min_Stack_Size+0xdd4c1c>
     c18:	0a4a0800 	beq	1282c20 <_Min_Stack_Size+0x1282820>
     c1c:	00010800 	andeq	r0, r1, r0, lsl #16
     c20:	000a4a56 	andeq	r4, sl, r6, asr sl
     c24:	000a4d08 	andeq	r4, sl, r8, lsl #26
     c28:	51000108 	tstpl	r0, r8, lsl #2
     c2c:	08000a4d 	stmdaeq	r0, {r0, r2, r3, r6, r9, fp}
     c30:	08000a60 	stmdaeq	r0, {r5, r6, r9, fp}
     c34:	01f30004 	mvnseq	r0, r4
     c38:	0a609f51 	beq	1828984 <_Min_Stack_Size+0x1828584>
     c3c:	0a630800 	beq	18c2c44 <_Min_Stack_Size+0x18c2844>
     c40:	00010800 	andeq	r0, r1, r0, lsl #16
     c44:	000a6351 	andeq	r6, sl, r1, asr r3
     c48:	000a7208 	andeq	r7, sl, r8, lsl #4
     c4c:	56000108 	strpl	r0, [r0], -r8, lsl #2
     c50:	08000a72 	stmdaeq	r0, {r1, r4, r5, r6, r9, fp}
     c54:	08000a75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, fp}
     c58:	75510001 	ldrbvc	r0, [r1, #-1]
     c5c:	ae08000a 	cdpge	0, 0, cr0, cr8, cr10, {0}
     c60:	0408000a 	streq	r0, [r8], #-10
     c64:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     c68:	000aae9f 	muleq	sl, pc, lr	; <UNPREDICTABLE>
     c6c:	000ab408 	andeq	fp, sl, r8, lsl #8
     c70:	56000108 	strpl	r0, [r0], -r8, lsl #2
     c74:	08000ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp}
     c78:	08000ace 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, fp}
     c7c:	01f30004 	mvnseq	r0, r4
     c80:	00009f51 	andeq	r9, r0, r1, asr pc
     c84:	00000000 	andeq	r0, r0, r0
     c88:	0a1c0000 	beq	700c90 <_Min_Stack_Size+0x700890>
     c8c:	0a310800 	beq	c42c94 <_Min_Stack_Size+0xc42894>
     c90:	00010800 	andeq	r0, r1, r0, lsl #16
     c94:	000a3152 	andeq	r3, sl, r2, asr r1
     c98:	000a3408 	andeq	r3, sl, r8, lsl #8
     c9c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     ca0:	08000a34 	stmdaeq	r0, {r2, r4, r5, r9, fp}
     ca4:	08000a37 	stmdaeq	r0, {r0, r1, r2, r4, r5, r9, fp}
     ca8:	37520001 	ldrbcc	r0, [r2, -r1]
     cac:	5c08000a 	stcpl	0, cr0, [r8], {10}
     cb0:	0108000a 	tsteq	r8, sl
     cb4:	0a5c5500 	beq	17160bc <_Min_Stack_Size+0x1715cbc>
     cb8:	0a600800 	beq	1802cc0 <_Min_Stack_Size+0x18028c0>
     cbc:	00040800 	andeq	r0, r4, r0, lsl #16
     cc0:	9f5201f3 	svcls	0x005201f3
     cc4:	08000a60 	stmdaeq	r0, {r5, r6, r9, fp}
     cc8:	08000a63 	stmdaeq	r0, {r0, r1, r5, r6, r9, fp}
     ccc:	63520001 	cmpvs	r2, #1
     cd0:	c608000a 	strgt	r0, [r8], -sl
     cd4:	0108000a 	tsteq	r8, sl
     cd8:	0ac65500 	beq	ff1960e0 <_estack+0xdf1660e0>
     cdc:	0ace0800 	beq	ff382ce4 <_estack+0xdf352ce4>
     ce0:	00040800 	andeq	r0, r4, r0, lsl #16
     ce4:	9f5201f3 	svcls	0x005201f3
	...
     cf0:	08000a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp}
     cf4:	08000a31 	stmdaeq	r0, {r0, r4, r5, r9, fp}
     cf8:	31530001 	cmpcc	r3, r1
     cfc:	3408000a 	strcc	r0, [r8], #-10
     d00:	0108000a 	tsteq	r8, sl
     d04:	0a345700 	beq	d1690c <_Min_Stack_Size+0xd1650c>
     d08:	0a370800 	beq	dc2d10 <_Min_Stack_Size+0xdc2910>
     d0c:	00010800 	andeq	r0, r1, r0, lsl #16
     d10:	000a3753 	andeq	r3, sl, r3, asr r7
     d14:	000a5808 	andeq	r5, sl, r8, lsl #16
     d18:	57000108 	strpl	r0, [r0, -r8, lsl #2]
     d1c:	08000a58 	stmdaeq	r0, {r3, r4, r6, r9, fp}
     d20:	08000a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp}
     d24:	9f300002 	svcls	0x00300002
     d28:	08000a60 	stmdaeq	r0, {r5, r6, r9, fp}
     d2c:	08000a63 	stmdaeq	r0, {r0, r1, r5, r6, r9, fp}
     d30:	63530001 	cmpvs	r3, #1
     d34:	ac08000a 	stcge	0, cr0, [r8], {10}
     d38:	0108000a 	tsteq	r8, sl
     d3c:	0aac5700 	beq	feb16944 <_estack+0xdeae6944>
     d40:	0aae0800 	beq	feb82d48 <_estack+0xdeb52d48>
     d44:	00020800 	andeq	r0, r2, r0, lsl #16
     d48:	0aae9f30 	beq	feba8a10 <_estack+0xdeb78a10>
     d4c:	0ace0800 	beq	ff382d54 <_estack+0xdf352d54>
     d50:	00010800 	andeq	r0, r1, r0, lsl #16
     d54:	00000057 	andeq	r0, r0, r7, asr r0
     d58:	00000000 	andeq	r0, r0, r0
     d5c:	000a4400 	andeq	r4, sl, r0, lsl #8
     d60:	000a4d08 	andeq	r4, sl, r8, lsl #26
     d64:	53000108 	movwpl	r0, #264	; 0x108
     d68:	08000a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp}
     d6c:	08000a75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, fp}
     d70:	00530001 	subseq	r0, r3, r1
     d74:	00000000 	andeq	r0, r0, r0
     d78:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     d7c:	6008000a 	andvs	r0, r8, sl
     d80:	0108000a 	tsteq	r8, sl
     d84:	0a8e5600 	beq	fe39658c <_estack+0xde36658c>
     d88:	0a9c0800 	beq	fe702d90 <_estack+0xde6d2d90>
     d8c:	00020800 	andeq	r0, r2, r0, lsl #16
     d90:	0a9c9f30 	beq	fe728a58 <_estack+0xde6f8a58>
     d94:	0aa40800 	beq	fe902d9c <_estack+0xde8d2d9c>
     d98:	00010800 	andeq	r0, r1, r0, lsl #16
     d9c:	000aa450 	andeq	sl, sl, r0, asr r4
     da0:	000aae08 	andeq	sl, sl, r8, lsl #28
     da4:	56000108 	strpl	r0, [r0], -r8, lsl #2
     da8:	08000ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp}
     dac:	08000ab7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, r9, fp}
     db0:	ba500001 	blt	1400dbc <_Min_Stack_Size+0x14009bc>
     db4:	ce08000a 	cdpgt	0, 0, cr0, cr8, cr10, {0}
     db8:	0108000a 	tsteq	r8, sl
     dbc:	00005600 	andeq	r5, r0, r0, lsl #12
     dc0:	00000000 	andeq	r0, r0, r0
     dc4:	0a260000 	beq	980dcc <_Min_Stack_Size+0x9809cc>
     dc8:	0a310800 	beq	c42dd0 <_Min_Stack_Size+0xc429d0>
     dcc:	00010800 	andeq	r0, r1, r0, lsl #16
     dd0:	000a3150 	andeq	r3, sl, r0, asr r1
     dd4:	000a3408 	andeq	r3, sl, r8, lsl #8
     dd8:	54000108 	strpl	r0, [r0], #-264	; 0x108
     ddc:	08000a34 	stmdaeq	r0, {r2, r4, r5, r9, fp}
     de0:	08000a37 	stmdaeq	r0, {r0, r1, r2, r4, r5, r9, fp}
     de4:	37500001 	ldrbcc	r0, [r0, -r1]
     de8:	6008000a 	andvs	r0, r8, sl
     dec:	0108000a 	tsteq	r8, sl
     df0:	0a605400 	beq	1815df8 <_Min_Stack_Size+0x18159f8>
     df4:	0a630800 	beq	18c2dfc <_Min_Stack_Size+0x18c29fc>
     df8:	00010800 	andeq	r0, r1, r0, lsl #16
     dfc:	000a6350 	andeq	r6, sl, r0, asr r3
     e00:	000ace08 	andeq	ip, sl, r8, lsl #28
     e04:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
     e10:	08000a92 	stmdaeq	r0, {r1, r4, r7, r9, fp}
     e14:	08000a97 	stmdaeq	r0, {r0, r1, r2, r4, r7, r9, fp}
     e18:	00500001 	subseq	r0, r0, r1
     e1c:	00000000 	andeq	r0, r0, r0
     e20:	26000000 	strcs	r0, [r0], -r0
     e24:	5c08000a 	stcpl	0, cr0, [r8], {10}
     e28:	0208000a 	andeq	r0, r8, #10
     e2c:	609f3000 	addsvs	r3, pc, r0
     e30:	cc08000a 	stcgt	0, cr0, [r8], {10}
     e34:	0208000a 	andeq	r0, r8, #10
     e38:	cc9f3000 	ldcgt	0, cr3, [pc], {0}
     e3c:	ce08000a 	cdpgt	0, 0, cr0, cr8, cr10, {0}
     e40:	0208000a 	andeq	r0, r8, #10
     e44:	009f3100 	addseq	r3, pc, r0, lsl #2
     e48:	00000000 	andeq	r0, r0, r0
     e4c:	d0000000 	andle	r0, r0, r0
     e50:	d708000a 	strle	r0, [r8, -sl]
     e54:	0108000a 	tsteq	r8, sl
     e58:	0ad75000 	beq	ff5d4e60 <_estack+0xdf5a4e60>
     e5c:	0b060800 	bleq	182e64 <_Min_Stack_Size+0x182a64>
     e60:	00010800 	andeq	r0, r1, r0, lsl #16
     e64:	000b0654 	andeq	r0, fp, r4, asr r6
     e68:	000b0a08 	andeq	r0, fp, r8, lsl #20
     e6c:	f3000408 	vshl.u8	d0, d8, d0
     e70:	0a9f5001 	beq	fe7d4e7c <_estack+0xde7a4e7c>
     e74:	1008000b 	andne	r0, r8, fp
     e78:	0108000b 	tsteq	r8, fp
     e7c:	00005400 	andeq	r5, r0, r0, lsl #8
     e80:	00000000 	andeq	r0, r0, r0
     e84:	0ad40000 	beq	ff500e8c <_estack+0xdf4d0e8c>
     e88:	0ad70800 	beq	ff5c2e90 <_estack+0xdf592e90>
     e8c:	00010800 	andeq	r0, r1, r0, lsl #16
     e90:	000ad750 	andeq	sp, sl, r0, asr r7
     e94:	000b0608 	andeq	r0, fp, r8, lsl #12
     e98:	54000108 	strpl	r0, [r0], #-264	; 0x108
     e9c:	08000b06 	stmdaeq	r0, {r1, r2, r8, r9, fp}
     ea0:	08000b0a 	stmdaeq	r0, {r1, r3, r8, r9, fp}
     ea4:	01f30004 	mvnseq	r0, r4
     ea8:	0b0a9f50 	bleq	2a8bf0 <_Min_Stack_Size+0x2a87f0>
     eac:	0b100800 	bleq	402eb4 <_Min_Stack_Size+0x402ab4>
     eb0:	00010800 	andeq	r0, r1, r0, lsl #16
     eb4:	00000054 	andeq	r0, r0, r4, asr r0
     eb8:	00000000 	andeq	r0, r0, r0
     ebc:	000ad400 	andeq	sp, sl, r0, lsl #8
     ec0:	000ad708 	andeq	sp, sl, r8, lsl #14
     ec4:	70000308 	andvc	r0, r0, r8, lsl #6
     ec8:	0ad79f04 	beq	ff5e8ae0 <_estack+0xdf5b8ae0>
     ecc:	0b060800 	bleq	182ed4 <_Min_Stack_Size+0x182ad4>
     ed0:	00030800 	andeq	r0, r3, r0, lsl #16
     ed4:	069f0474 			; <UNDEFINED> instruction: 0x069f0474
     ed8:	0a08000b 	beq	200f0c <_Min_Stack_Size+0x200b0c>
     edc:	0608000b 	streq	r0, [r8], -fp
     ee0:	5001f300 	andpl	pc, r1, r0, lsl #6
     ee4:	0a9f0423 	beq	fe7c1f78 <_estack+0xde791f78>
     ee8:	1008000b 	andne	r0, r8, fp
     eec:	0308000b 	movweq	r0, #32779	; 0x800b
     ef0:	9f047400 	svcls	0x00047400
	...
     efc:	08000b10 	stmdaeq	r0, {r4, r8, r9, fp}
     f00:	08000b1f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, r9, fp}
     f04:	1f500001 	svcne	0x00500001
     f08:	2208000b 	andcs	r0, r8, #11
     f0c:	0108000b 	tsteq	r8, fp
     f10:	0b225400 	bleq	895f18 <_Min_Stack_Size+0x895b18>
     f14:	0b250800 	bleq	942f1c <_Min_Stack_Size+0x942b1c>
     f18:	00010800 	andeq	r0, r1, r0, lsl #16
     f1c:	000b2550 	andeq	r2, fp, r0, asr r5
     f20:	000b7608 	andeq	r7, fp, r8, lsl #12
     f24:	54000108 	strpl	r0, [r0], #-264	; 0x108
     f28:	08000b76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, fp}
     f2c:	08000b7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, fp}
     f30:	01f30004 	mvnseq	r0, r4
     f34:	0b7a9f50 	bleq	1ea8c7c <_Min_Stack_Size+0x1ea887c>
     f38:	0b860800 	bleq	fe182f40 <_estack+0xde152f40>
     f3c:	00010800 	andeq	r0, r1, r0, lsl #16
     f40:	000b8654 	andeq	r8, fp, r4, asr r6
     f44:	000b8a08 	andeq	r8, fp, r8, lsl #20
     f48:	f3000408 	vshl.u8	d0, d8, d0
     f4c:	009f5001 	addseq	r5, pc, r1
     f50:	00000000 	andeq	r0, r0, r0
     f54:	10000000 	andne	r0, r0, r0
     f58:	1f08000b 	svcne	0x0008000b
     f5c:	0108000b 	tsteq	r8, fp
     f60:	0b1f5100 	bleq	7d5368 <_Min_Stack_Size+0x7d4f68>
     f64:	0b220800 	bleq	882f6c <_Min_Stack_Size+0x882b6c>
     f68:	00010800 	andeq	r0, r1, r0, lsl #16
     f6c:	000b2256 	andeq	r2, fp, r6, asr r2
     f70:	000b2508 	andeq	r2, fp, r8, lsl #10
     f74:	51000108 	tstpl	r0, r8, lsl #2
     f78:	08000b25 	stmdaeq	r0, {r0, r2, r5, r8, r9, fp}
     f7c:	08000b30 	stmdaeq	r0, {r4, r5, r8, r9, fp}
     f80:	30560001 	subscc	r0, r6, r1
     f84:	8a08000b 	bhi	200fb8 <_Min_Stack_Size+0x200bb8>
     f88:	0408000b 	streq	r0, [r8], #-11
     f8c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     f90:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     f94:	00000000 	andeq	r0, r0, r0
     f98:	000b1a00 	andeq	r1, fp, r0, lsl #20
     f9c:	000b1f08 	andeq	r1, fp, r8, lsl #30
     fa0:	51000108 	tstpl	r0, r8, lsl #2
     fa4:	08000b1f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, r9, fp}
     fa8:	08000b22 	stmdaeq	r0, {r1, r5, r8, r9, fp}
     fac:	22560001 	subscs	r0, r6, #1
     fb0:	2508000b 	strcs	r0, [r8, #-11]
     fb4:	0108000b 	tsteq	r8, fp
     fb8:	0b255100 	bleq	9553c0 <_Min_Stack_Size+0x954fc0>
     fbc:	0b300800 	bleq	c02fc4 <_Min_Stack_Size+0xc02bc4>
     fc0:	00010800 	andeq	r0, r1, r0, lsl #16
     fc4:	000b3056 	andeq	r3, fp, r6, asr r0
     fc8:	000b8a08 	andeq	r8, fp, r8, lsl #20
     fcc:	f3000408 	vshl.u8	d0, d8, d0
     fd0:	009f5101 	addseq	r5, pc, r1, lsl #2
     fd4:	00000000 	andeq	r0, r0, r0
     fd8:	1a000000 	bne	fe0 <_Min_Stack_Size+0xbe0>
     fdc:	1f08000b 	svcne	0x0008000b
     fe0:	0108000b 	tsteq	r8, fp
     fe4:	0b1f5000 	bleq	7d4fec <_Min_Stack_Size+0x7d4bec>
     fe8:	0b220800 	bleq	882ff0 <_Min_Stack_Size+0x882bf0>
     fec:	00010800 	andeq	r0, r1, r0, lsl #16
     ff0:	000b2254 	andeq	r2, fp, r4, asr r2
     ff4:	000b2508 	andeq	r2, fp, r8, lsl #10
     ff8:	50000108 	andpl	r0, r0, r8, lsl #2
     ffc:	08000b25 	stmdaeq	r0, {r0, r2, r5, r8, r9, fp}
    1000:	08000b76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, fp}
    1004:	76540001 	ldrbvc	r0, [r4], -r1
    1008:	7a08000b 	bvc	20103c <_Min_Stack_Size+0x200c3c>
    100c:	0408000b 	streq	r0, [r8], #-11
    1010:	5001f300 	andpl	pc, r1, r0, lsl #6
    1014:	000b7a9f 	muleq	fp, pc, sl	; <UNPREDICTABLE>
    1018:	000b8608 	andeq	r8, fp, r8, lsl #12
    101c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    1020:	08000b86 	stmdaeq	r0, {r1, r2, r7, r8, r9, fp}
    1024:	08000b8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, fp}
    1028:	01f30004 	mvnseq	r0, r4
    102c:	00009f50 	andeq	r9, r0, r0, asr pc
    1030:	00000000 	andeq	r0, r0, r0
    1034:	0b300000 	bleq	c0103c <_Min_Stack_Size+0xc00c3c>
    1038:	0b490800 	bleq	1243040 <_Min_Stack_Size+0x1242c40>
    103c:	00010800 	andeq	r0, r1, r0, lsl #16
    1040:	000b4c50 	andeq	r4, fp, r0, asr ip
    1044:	000b5208 	andeq	r5, fp, r8, lsl #4
    1048:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    104c:	08000b52 	stmdaeq	r0, {r1, r4, r6, r8, r9, fp}
    1050:	08000b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp}
    1054:	68500001 	ldmdavs	r0, {r0}^
    1058:	7608000b 	strvc	r0, [r8], -fp
    105c:	0108000b 	tsteq	r8, fp
    1060:	0b7a5700 	bleq	1e96c68 <_Min_Stack_Size+0x1e96868>
    1064:	0b890800 	bleq	fe24306c <_estack+0xde21306c>
    1068:	00010800 	andeq	r0, r1, r0, lsl #16
    106c:	00000050 	andeq	r0, r0, r0, asr r0
    1070:	00000000 	andeq	r0, r0, r0
    1074:	000b3800 	andeq	r3, fp, r0, lsl #16
    1078:	000b5208 	andeq	r5, fp, r8, lsl #4
    107c:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    1080:	08000b56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, fp}
    1084:	08000b76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, fp}
    1088:	00570001 	subseq	r0, r7, r1
    108c:	00000000 	andeq	r0, r0, r0
    1090:	30000000 	andcc	r0, r0, r0
    1094:	7608000b 	strvc	r0, [r8], -fp
    1098:	0108000b 	tsteq	r8, fp
    109c:	0b765600 	bleq	1d968a4 <_Min_Stack_Size+0x1d964a4>
    10a0:	0b7a0800 	bleq	1e830a8 <_Min_Stack_Size+0x1e82ca8>
    10a4:	00060800 	andeq	r0, r6, r0, lsl #16
    10a8:	235001f3 	cmpcs	r0, #-1073741764	; 0xc000003c
    10ac:	0b7a9f0c 	bleq	1ea8ce4 <_Min_Stack_Size+0x1ea88e4>
    10b0:	0b860800 	bleq	fe1830b8 <_estack+0xde1530b8>
    10b4:	00010800 	andeq	r0, r1, r0, lsl #16
    10b8:	000b8656 	andeq	r8, fp, r6, asr r6
    10bc:	000b8a08 	andeq	r8, fp, r8, lsl #20
    10c0:	f3000608 	vmax.u8	d0, d0, d8
    10c4:	0c235001 	stceq	0, cr5, [r3], #-4
    10c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    10cc:	00000000 	andeq	r0, r0, r0
    10d0:	000b2200 	andeq	r2, fp, r0, lsl #4
    10d4:	000b2508 	andeq	r2, fp, r8, lsl #10
    10d8:	70000308 	andvc	r0, r0, r8, lsl #6
    10dc:	0b259f04 	bleq	968cf4 <_Min_Stack_Size+0x9688f4>
    10e0:	0b760800 	bleq	1d830e8 <_Min_Stack_Size+0x1d82ce8>
    10e4:	00030800 	andeq	r0, r3, r0, lsl #16
    10e8:	769f0474 			; <UNDEFINED> instruction: 0x769f0474
    10ec:	7a08000b 	bvc	201120 <_Min_Stack_Size+0x200d20>
    10f0:	0608000b 	streq	r0, [r8], -fp
    10f4:	5001f300 	andpl	pc, r1, r0, lsl #6
    10f8:	7a9f0423 	bvc	fe7c218c <_estack+0xde79218c>
    10fc:	8608000b 	strhi	r0, [r8], -fp
    1100:	0308000b 	movweq	r0, #32779	; 0x800b
    1104:	9f047400 	svcls	0x00047400
    1108:	08000b86 	stmdaeq	r0, {r1, r2, r7, r8, r9, fp}
    110c:	08000b8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, fp}
    1110:	01f30006 	mvnseq	r0, r6
    1114:	9f042350 	svcls	0x00042350
	...
    1120:	08000b1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, fp}
    1124:	08000b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp}
    1128:	9f300002 	svcls	0x00300002
    112c:	08000b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp}
    1130:	08000b6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, fp}
    1134:	6e550001 	cdpvs	0, 5, cr0, cr5, cr1, {0}
    1138:	7608000b 	strvc	r0, [r8], -fp
    113c:	0408000b 	streq	r0, [r8], #-11
    1140:	20007500 	andcs	r7, r0, r0, lsl #10
    1144:	000b7a9f 	muleq	fp, pc, sl	; <UNPREDICTABLE>
    1148:	000b8a08 	andeq	r8, fp, r8, lsl #20
    114c:	30000208 	andcc	r0, r0, r8, lsl #4
    1150:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1154:	00000000 	andeq	r0, r0, r0
    1158:	000b3800 	andeq	r3, fp, r0, lsl #16
    115c:	000b4908 	andeq	r4, fp, r8, lsl #18
    1160:	53000108 	movwpl	r0, #264	; 0x108
    1164:	08000b56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, fp}
    1168:	08000b5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, fp}
    116c:	5e520001 	cdppl	0, 5, cr0, cr2, cr1, {0}
    1170:	6c08000b 	stcvs	0, cr0, [r8], {11}
    1174:	0108000b 	tsteq	r8, fp
    1178:	00005300 	andeq	r5, r0, r0, lsl #6
    117c:	00000000 	andeq	r0, r0, r0
    1180:	0b380000 	bleq	e01188 <_Min_Stack_Size+0xe00d88>
    1184:	0b3e0800 	bleq	f8318c <_Min_Stack_Size+0xf82d8c>
    1188:	00080800 	andeq	r0, r8, r0, lsl #16
    118c:	44400072 	strbmi	r0, [r0], #-114	; 0x72
    1190:	9f1a1f24 	svcls	0x001a1f24
    1194:	08000b3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, fp}
    1198:	08000b49 	stmdaeq	r0, {r0, r3, r6, r8, r9, fp}
    119c:	00700009 	rsbseq	r0, r0, r9
    11a0:	24444006 	strbcs	r4, [r4], #-6
    11a4:	569f1a1f 			; <UNDEFINED> instruction: 0x569f1a1f
    11a8:	6c08000b 	stcvs	0, cr0, [r8], {11}
    11ac:	0808000b 	stmdaeq	r8, {r0, r1, r3}
    11b0:	40007200 	andmi	r7, r0, r0, lsl #4
    11b4:	1a1f2444 	bne	7ca2cc <_Min_Stack_Size+0x7c9ecc>
    11b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    11bc:	00000000 	andeq	r0, r0, r0
    11c0:	000b1a00 	andeq	r1, fp, r0, lsl #20
    11c4:	000b3c08 	andeq	r3, fp, r8, lsl #24
    11c8:	30000208 	andcc	r0, r0, r8, lsl #4
    11cc:	000b3c9f 	muleq	fp, pc, ip	; <UNPREDICTABLE>
    11d0:	000b4c08 	andeq	r4, fp, r8, lsl #24
    11d4:	31000208 	tstcc	r0, r8, lsl #4
    11d8:	000b569f 	muleq	fp, pc, r6	; <UNPREDICTABLE>
    11dc:	000b6c08 	andeq	r6, fp, r8, lsl #24
    11e0:	30000208 	andcc	r0, r0, r8, lsl #4
    11e4:	000b7a9f 	muleq	fp, pc, sl	; <UNPREDICTABLE>
    11e8:	000b8a08 	andeq	r8, fp, r8, lsl #20
    11ec:	30000208 	andcc	r0, r0, r8, lsl #4
    11f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    11f4:	00000000 	andeq	r0, r0, r0
    11f8:	000b8c00 	andeq	r8, fp, r0, lsl #24
    11fc:	000b9008 	andeq	r9, fp, r8
    1200:	50000108 	andpl	r0, r0, r8, lsl #2
    1204:	08000b90 	stmdaeq	r0, {r4, r7, r8, r9, fp}
    1208:	08000b92 	stmdaeq	r0, {r1, r4, r7, r8, r9, fp}
    120c:	01f30004 	mvnseq	r0, r4
    1210:	00009f50 	andeq	r9, r0, r0, asr pc
    1214:	00000000 	andeq	r0, r0, r0
    1218:	0bdc0000 	bleq	ff701220 <_estack+0xdf6d1220>
    121c:	0bfc0800 	bleq	fff03224 <_estack+0xdfed3224>
    1220:	00010800 	andeq	r0, r1, r0, lsl #16
    1224:	000bfe52 	andeq	pc, fp, r2, asr lr	; <UNPREDICTABLE>
    1228:	000c0208 	andeq	r0, ip, r8, lsl #4
    122c:	52000108 	andpl	r0, r0, #8, 2
	...
    1238:	08000bd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp}
    123c:	08000bfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, fp}
    1240:	fa550001 	blx	154124c <_Min_Stack_Size+0x1540e4c>
    1244:	fc08000b 	stc2	0, cr0, [r8], {11}
    1248:	0208000b 	andeq	r0, r8, #11
    124c:	fc007100 	stc2	1, cr7, [r0], {-0}
    1250:	0208000b 	andeq	r0, r8, #11
    1254:	0108000c 	tsteq	r8, ip
    1258:	00005500 	andeq	r5, r0, r0, lsl #10
    125c:	00000000 	andeq	r0, r0, r0
    1260:	0c040000 	stceq	0, cr0, [r4], {-0}
    1264:	0c2a0800 	stceq	8, cr0, [sl], #-0
    1268:	00010800 	andeq	r0, r1, r0, lsl #16
    126c:	000c2a50 	andeq	r2, ip, r0, asr sl
    1270:	000c2c08 	andeq	r2, ip, r8, lsl #24
    1274:	f3000408 	vshl.u8	d0, d8, d0
    1278:	009f5001 	addseq	r5, pc, r1
    127c:	00000000 	andeq	r0, r0, r0
    1280:	2c000000 	stccs	0, cr0, [r0], {-0}
    1284:	3a08000c 	bcc	2012bc <_Min_Stack_Size+0x200ebc>
    1288:	0108000c 	tsteq	r8, ip
    128c:	0c3a5000 	ldceq	0, cr5, [sl], #-0
    1290:	0c4d0800 	mcrreq	8, 0, r0, sp, cr0
    1294:	00010800 	andeq	r0, r1, r0, lsl #16
    1298:	000c4d53 	andeq	r4, ip, r3, asr sp
    129c:	000c4e08 	andeq	r4, ip, r8, lsl #28
    12a0:	f3000408 	vshl.u8	d0, d8, d0
    12a4:	4e9f5001 	cdpmi	0, 9, cr5, cr15, cr1, {0}
    12a8:	5208000c 	andpl	r0, r8, #12
    12ac:	0108000c 	tsteq	r8, ip
    12b0:	00005000 	andeq	r5, r0, r0
    12b4:	00000000 	andeq	r0, r0, r0
    12b8:	0c2c0000 	stceq	0, cr0, [ip], #-0
    12bc:	0c4a0800 	mcrreq	8, 0, r0, sl, cr0
    12c0:	00010800 	andeq	r0, r1, r0, lsl #16
    12c4:	000c4a51 	andeq	r4, ip, r1, asr sl
    12c8:	000c4d08 	andeq	r4, ip, r8, lsl #26
    12cc:	50000108 	andpl	r0, r0, r8, lsl #2
    12d0:	08000c4d 	stmdaeq	r0, {r0, r2, r3, r6, sl, fp}
    12d4:	08000c4e 	stmdaeq	r0, {r1, r2, r3, r6, sl, fp}
    12d8:	01f30004 	mvnseq	r0, r4
    12dc:	0c4e9f51 	mcrreq	15, 5, r9, lr, cr1
    12e0:	0c520800 	mrrceq	8, 0, r0, r2, cr0
    12e4:	00010800 	andeq	r0, r1, r0, lsl #16
    12e8:	00000051 	andeq	r0, r0, r1, asr r0
    12ec:	00000000 	andeq	r0, r0, r0
    12f0:	000c5400 	andeq	r5, ip, r0, lsl #8
    12f4:	000c5b08 	andeq	r5, ip, r8, lsl #22
    12f8:	50000108 	andpl	r0, r0, r8, lsl #2
    12fc:	08000c5b 	stmdaeq	r0, {r0, r1, r3, r4, r6, sl, fp}
    1300:	08000cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp}
    1304:	d4540001 	ldrble	r0, [r4], #-1
    1308:	d808000c 	stmdale	r8, {r2, r3}
    130c:	0408000c 	streq	r0, [r8], #-12
    1310:	5001f300 	andpl	pc, r1, r0, lsl #6
    1314:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1318:	00000000 	andeq	r0, r0, r0
    131c:	000cd800 	andeq	sp, ip, r0, lsl #16
    1320:	000ce308 	andeq	lr, ip, r8, lsl #6
    1324:	50000108 	andpl	r0, r0, r8, lsl #2
    1328:	08000ce3 	stmdaeq	r0, {r0, r1, r5, r6, r7, sl, fp}
    132c:	08000d44 	stmdaeq	r0, {r2, r6, r8, sl, fp}
    1330:	44540001 	ldrbmi	r0, [r4], #-1
    1334:	4708000d 	strmi	r0, [r8, -sp]
    1338:	0108000d 	tsteq	r8, sp
    133c:	0d475000 	stcleq	0, cr5, [r7, #-0]
    1340:	0d4a0800 	stcleq	8, cr0, [sl, #-0]
    1344:	00010800 	andeq	r0, r1, r0, lsl #16
    1348:	00000054 	andeq	r0, r0, r4, asr r0
    134c:	00000000 	andeq	r0, r0, r0
    1350:	000cd800 	andeq	sp, ip, r0, lsl #16
    1354:	000ce308 	andeq	lr, ip, r8, lsl #6
    1358:	51000108 	tstpl	r0, r8, lsl #2
    135c:	08000ce3 	stmdaeq	r0, {r0, r1, r5, r6, r7, sl, fp}
    1360:	08000d44 	stmdaeq	r0, {r2, r6, r8, sl, fp}
    1364:	44550001 	ldrbmi	r0, [r5], #-1
    1368:	4708000d 	strmi	r0, [r8, -sp]
    136c:	0108000d 	tsteq	r8, sp
    1370:	0d475100 	stfeqe	f5, [r7, #-0]
    1374:	0d4a0800 	stcleq	8, cr0, [sl, #-0]
    1378:	00010800 	andeq	r0, r1, r0, lsl #16
    137c:	00000055 	andeq	r0, r0, r5, asr r0
    1380:	00000000 	andeq	r0, r0, r0
    1384:	000d4c00 	andeq	r4, sp, r0, lsl #24
    1388:	000d5a08 	andeq	r5, sp, r8, lsl #20
    138c:	50000108 	andpl	r0, r0, r8, lsl #2
    1390:	08000d5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, fp}
    1394:	08000dc2 	stmdaeq	r0, {r1, r6, r7, r8, sl, fp}
    1398:	00550001 	subseq	r0, r5, r1
    139c:	00000000 	andeq	r0, r0, r0
    13a0:	4c000000 	stcmi	0, cr0, [r0], {-0}
    13a4:	5d08000d 	stcpl	0, cr0, [r8, #-52]	; 0xffffffcc
    13a8:	0108000d 	tsteq	r8, sp
    13ac:	0d5d5100 	ldfeqe	f5, [sp, #-0]
    13b0:	0dc20800 	stcleq	8, cr0, [r2]
    13b4:	00010800 	andeq	r0, r1, r0, lsl #16
    13b8:	00000056 	andeq	r0, r0, r6, asr r0
    13bc:	00000000 	andeq	r0, r0, r0
    13c0:	000d4c00 	andeq	r4, sp, r0, lsl #24
    13c4:	000d5d08 	andeq	r5, sp, r8, lsl #26
    13c8:	52000108 	andpl	r0, r0, #8, 2
    13cc:	08000d5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, sl, fp}
    13d0:	08000dc2 	stmdaeq	r0, {r1, r6, r7, r8, sl, fp}
    13d4:	01f30004 	mvnseq	r0, r4
    13d8:	00009f52 	andeq	r9, r0, r2, asr pc
    13dc:	00000000 	andeq	r0, r0, r0
    13e0:	0d5e0000 	ldcleq	0, cr0, [lr, #-0]
    13e4:	0d660800 	stcleq	8, cr0, [r6, #-0]
    13e8:	00010800 	andeq	r0, r1, r0, lsl #16
    13ec:	000d6650 	andeq	r6, sp, r0, asr r6
    13f0:	000dbc08 	andeq	fp, sp, r8, lsl #24
    13f4:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    1400:	08000d62 	stmdaeq	r0, {r1, r5, r6, r8, sl, fp}
    1404:	08000d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp}
    1408:	00750008 	rsbseq	r0, r5, r8
    140c:	231e0076 	tstcs	lr, #118	; 0x76
    1410:	0d689f01 	stcleq	15, cr9, [r8, #-4]!
    1414:	0d6b0800 	stcleq	8, cr0, [fp, #-0]
    1418:	00010800 	andeq	r0, r1, r0, lsl #16
    141c:	000d6b50 	andeq	r6, sp, r0, asr fp
    1420:	000dbc08 	andeq	fp, sp, r8, lsl #24
    1424:	75000808 	strvc	r0, [r0, #-2056]	; 0x808
    1428:	1e007600 	cfmadd32ne	mvax0, mvfx7, mvfx0, mvfx0
    142c:	009f0123 	addseq	r0, pc, r3, lsr #2
    1430:	00000000 	andeq	r0, r0, r0
    1434:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1438:	b208000d 	andlt	r0, r8, #13
    143c:	0208000d 	andeq	r0, r8, #13
    1440:	b29f3000 	addslt	r3, pc, #0
    1444:	b608000d 	strlt	r0, [r8], -sp
    1448:	0108000d 	tsteq	r8, sp
    144c:	0db65400 	cfldrseq	mvf5, [r6]
    1450:	0dc20800 	stcleq	8, cr0, [r2]
    1454:	00020800 	andeq	r0, r2, r0, lsl #16
    1458:	00009f30 	andeq	r9, r0, r0, lsr pc
    145c:	00000000 	andeq	r0, r0, r0
    1460:	0d740000 	ldcleq	0, cr0, [r4, #-0]
    1464:	0db60800 	ldceq	8, cr0, [r6]
    1468:	00020800 	andeq	r0, r2, r0, lsl #16
    146c:	00009f31 	andeq	r9, r0, r1, lsr pc
    1470:	00000000 	andeq	r0, r0, r0
    1474:	0d740000 	ldcleq	0, cr0, [r4, #-0]
    1478:	0db60800 	ldceq	8, cr0, [r6]
    147c:	00010800 	andeq	r0, r1, r0, lsl #16
    1480:	00000054 	andeq	r0, r0, r4, asr r0
    1484:	00000000 	andeq	r0, r0, r0
    1488:	000dc400 	andeq	ip, sp, r0, lsl #8
    148c:	000dd508 	andeq	sp, sp, r8, lsl #10
    1490:	50000108 	andpl	r0, r0, r8, lsl #2
    1494:	08000dd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, sl, fp}
    1498:	08000dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp}
    149c:	d8550001 	ldmdale	r5, {r0}^
    14a0:	da08000d 	ble	2014dc <_Min_Stack_Size+0x2010dc>
    14a4:	0108000d 	tsteq	r8, sp
    14a8:	0dda5000 	ldcleq	0, cr5, [sl]
    14ac:	0e360800 	cdpeq	8, 3, cr0, cr6, cr0, {0}
    14b0:	00010800 	andeq	r0, r1, r0, lsl #16
    14b4:	000e3655 	andeq	r3, lr, r5, asr r6
    14b8:	000e3908 	andeq	r3, lr, r8, lsl #18
    14bc:	50000108 	andpl	r0, r0, r8, lsl #2
    14c0:	08000e39 	stmdaeq	r0, {r0, r3, r4, r5, r9, sl, fp}
    14c4:	08000e48 	stmdaeq	r0, {r3, r6, r9, sl, fp}
    14c8:	00550001 	subseq	r0, r5, r1
    14cc:	00000000 	andeq	r0, r0, r0
    14d0:	c4000000 	strgt	r0, [r0], #-0
    14d4:	d508000d 	strle	r0, [r8, #-13]
    14d8:	0108000d 	tsteq	r8, sp
    14dc:	0dd55100 	ldfeqe	f5, [r5]
    14e0:	0dd80800 	ldcleq	8, cr0, [r8]
    14e4:	00010800 	andeq	r0, r1, r0, lsl #16
    14e8:	000dd856 	andeq	sp, sp, r6, asr r8
    14ec:	000ddd08 	andeq	sp, sp, r8, lsl #26
    14f0:	51000108 	tstpl	r0, r8, lsl #2
    14f4:	08000ddd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sl, fp}
    14f8:	08000e36 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, fp}
    14fc:	36560001 	ldrbcc	r0, [r6], -r1
    1500:	3908000e 	stmdbcc	r8, {r1, r2, r3}
    1504:	0108000e 	tsteq	r8, lr
    1508:	0e395100 	rsfeqe	f5, f1, f0
    150c:	0e480800 	cdpeq	8, 4, cr0, cr8, cr0, {0}
    1510:	00010800 	andeq	r0, r1, r0, lsl #16
    1514:	00000056 	andeq	r0, r0, r6, asr r0
    1518:	00000000 	andeq	r0, r0, r0
    151c:	000dd800 	andeq	sp, sp, r0, lsl #16
    1520:	000e3608 	andeq	r3, lr, r8, lsl #12
    1524:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    1528:	000e3c9f 	muleq	lr, pc, ip	; <UNPREDICTABLE>
    152c:	000e4808 	andeq	r4, lr, r8, lsl #16
    1530:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    1534:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1538:	00000000 	andeq	r0, r0, r0
    153c:	000dd800 	andeq	sp, sp, r0, lsl #16
    1540:	000e3608 	andeq	r3, lr, r8, lsl #12
    1544:	30000208 	andcc	r0, r0, r8, lsl #4
    1548:	000e3c9f 	muleq	lr, pc, ip	; <UNPREDICTABLE>
    154c:	000e4808 	andeq	r4, lr, r8, lsl #16
    1550:	30000208 	andcc	r0, r0, r8, lsl #4
    1554:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1558:	00000000 	andeq	r0, r0, r0
    155c:	000dd800 	andeq	sp, sp, r0, lsl #16
    1560:	000dda08 	andeq	sp, sp, r8, lsl #20
    1564:	50000108 	andpl	r0, r0, r8, lsl #2
    1568:	08000dda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, fp}
    156c:	08000e36 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, fp}
    1570:	3c550001 	mrrccc	0, 0, r0, r5, cr1
    1574:	4808000e 	stmdami	r8, {r1, r2, r3}
    1578:	0108000e 	tsteq	r8, lr
    157c:	00005500 	andeq	r5, r0, r0, lsl #10
    1580:	00000000 	andeq	r0, r0, r0
    1584:	0dde0000 	ldcleq	0, cr0, [lr]
    1588:	0de40800 	stcleq	8, cr0, [r4]
    158c:	00010800 	andeq	r0, r1, r0, lsl #16
    1590:	000de450 	andeq	lr, sp, r0, asr r4
    1594:	000e3608 	andeq	r3, lr, r8, lsl #12
    1598:	54000108 	strpl	r0, [r0], #-264	; 0x108
    159c:	08000e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp}
    15a0:	08000e48 	stmdaeq	r0, {r3, r6, r9, sl, fp}
    15a4:	00540001 	subseq	r0, r4, r1
    15a8:	00000000 	andeq	r0, r0, r0
    15ac:	e2000000 	and	r0, r0, #0
    15b0:	3608000d 	strcc	r0, [r8], -sp
    15b4:	0208000e 	andeq	r0, r8, #14
    15b8:	3c9f3100 	ldfccs	f3, [pc], {0}
    15bc:	4208000e 	andmi	r0, r8, #14
    15c0:	0208000e 	andeq	r0, r8, #14
    15c4:	009f3100 	addseq	r3, pc, r0, lsl #2
    15c8:	00000000 	andeq	r0, r0, r0
    15cc:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    15d0:	3008000d 	andcc	r0, r8, sp
    15d4:	0208000e 	andeq	r0, r8, #14
    15d8:	309f3000 	addscc	r3, pc, r0
    15dc:	3608000e 	strcc	r0, [r8], -lr
    15e0:	0108000e 	tsteq	r8, lr
    15e4:	0e3c5400 	cfabsseq	mvf5, mvf12
    15e8:	0e480800 	cdpeq	8, 4, cr0, cr8, cr0, {0}
    15ec:	00020800 	andeq	r0, r2, r0, lsl #16
    15f0:	00009f30 	andeq	r9, r0, r0, lsr pc
    15f4:	00000000 	andeq	r0, r0, r0
    15f8:	0df20000 	ldcleq	0, cr0, [r2]
    15fc:	0e360800 	cdpeq	8, 3, cr0, cr6, cr0, {0}
    1600:	00020800 	andeq	r0, r2, r0, lsl #16
    1604:	00009f31 	andeq	r9, r0, r1, lsr pc
    1608:	00000000 	andeq	r0, r0, r0
    160c:	0df20000 	ldcleq	0, cr0, [r2]
    1610:	0e360800 	cdpeq	8, 3, cr0, cr6, cr0, {0}
    1614:	00010800 	andeq	r0, r1, r0, lsl #16
    1618:	00000054 	andeq	r0, r0, r4, asr r0
    161c:	00000000 	andeq	r0, r0, r0
    1620:	000e4800 	andeq	r4, lr, r0, lsl #16
    1624:	000e6908 	andeq	r6, lr, r8, lsl #18
    1628:	50000108 	andpl	r0, r0, r8, lsl #2
    162c:	08000e69 	stmdaeq	r0, {r0, r3, r5, r6, r9, sl, fp}
    1630:	08000f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp}
    1634:	12540001 	subsne	r0, r4, #1
    1638:	1b08000f 	blne	20167c <_Min_Stack_Size+0x20127c>
    163c:	0108000f 	tsteq	r8, pc
    1640:	0f1b5000 	svceq	0x001b5000
    1644:	10400800 	subne	r0, r0, r0, lsl #16
    1648:	00010800 	andeq	r0, r1, r0, lsl #16
    164c:	00104054 	andseq	r4, r0, r4, asr r0
    1650:	00104308 	andseq	r4, r0, r8, lsl #6
    1654:	50000108 	andpl	r0, r0, r8, lsl #2
    1658:	08001043 	stmdaeq	r0, {r0, r1, r6, ip}
    165c:	080010c0 	stmdaeq	r0, {r6, r7, ip}
    1660:	c0540001 	subsgt	r0, r4, r1
    1664:	cb080010 	blgt	2016ac <_Min_Stack_Size+0x2012ac>
    1668:	01080010 	tsteq	r8, r0, lsl r0
    166c:	10cb5000 	sbcne	r5, fp, r0
    1670:	10e00800 	rscne	r0, r0, r0, lsl #16
    1674:	00010800 	andeq	r0, r1, r0, lsl #16
    1678:	00000054 	andeq	r0, r0, r4, asr r0
    167c:	00000000 	andeq	r0, r0, r0
    1680:	000e4800 	andeq	r4, lr, r0, lsl #16
    1684:	000e6908 	andeq	r6, lr, r8, lsl #18
    1688:	51000108 	tstpl	r0, r8, lsl #2
    168c:	08000e69 	stmdaeq	r0, {r0, r3, r5, r6, r9, sl, fp}
    1690:	08000f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp}
    1694:	12560001 	subsne	r0, r6, #1
    1698:	1b08000f 	blne	2016dc <_Min_Stack_Size+0x2012dc>
    169c:	0108000f 	tsteq	r8, pc
    16a0:	0f1b5100 	svceq	0x001b5100
    16a4:	10400800 	subne	r0, r0, r0, lsl #16
    16a8:	00010800 	andeq	r0, r1, r0, lsl #16
    16ac:	00104056 	andseq	r4, r0, r6, asr r0
    16b0:	00104308 	andseq	r4, r0, r8, lsl #6
    16b4:	51000108 	tstpl	r0, r8, lsl #2
    16b8:	08001043 	stmdaeq	r0, {r0, r1, r6, ip}
    16bc:	080010c0 	stmdaeq	r0, {r6, r7, ip}
    16c0:	c0560001 	subsgt	r0, r6, r1
    16c4:	cb080010 	blgt	20170c <_Min_Stack_Size+0x20130c>
    16c8:	01080010 	tsteq	r8, r0, lsl r0
    16cc:	10cb5100 	sbcne	r5, fp, r0, lsl #2
    16d0:	10e00800 	rscne	r0, r0, r0, lsl #16
    16d4:	00010800 	andeq	r0, r1, r0, lsl #16
    16d8:	00000056 	andeq	r0, r0, r6, asr r0
    16dc:	00000000 	andeq	r0, r0, r0
    16e0:	000e4800 	andeq	r4, lr, r0, lsl #16
    16e4:	000e6908 	andeq	r6, lr, r8, lsl #18
    16e8:	52000108 	andpl	r0, r0, #8, 2
    16ec:	08000e69 	stmdaeq	r0, {r0, r3, r5, r6, r9, sl, fp}
    16f0:	08000ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp}
    16f4:	54910002 	ldrpl	r0, [r1], #2
    16f8:	08000ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp}
    16fc:	08000ec7 	stmdaeq	r0, {r0, r1, r2, r6, r7, r9, sl, fp}
    1700:	00710002 	rsbseq	r0, r1, r2
    1704:	08000ec7 	stmdaeq	r0, {r0, r1, r2, r6, r7, r9, sl, fp}
    1708:	08000f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp}
    170c:	54910002 	ldrpl	r0, [r1], #2
    1710:	08000f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp}
    1714:	08000f1b 	stmdaeq	r0, {r0, r1, r3, r4, r8, r9, sl, fp}
    1718:	1b520001 	blne	1481724 <_Min_Stack_Size+0x1481324>
    171c:	4008000f 	andmi	r0, r8, pc
    1720:	02080010 	andeq	r0, r8, #16
    1724:	40549100 	subsmi	r9, r4, r0, lsl #2
    1728:	43080010 	movwmi	r0, #32784	; 0x8010
    172c:	01080010 	tsteq	r8, r0, lsl r0
    1730:	10435200 	subne	r5, r3, r0, lsl #4
    1734:	10c00800 	sbcne	r0, r0, r0, lsl #16
    1738:	00020800 	andeq	r0, r2, r0, lsl #16
    173c:	10c05491 	smullne	r5, r0, r1, r4
    1740:	10cb0800 	sbcne	r0, fp, r0, lsl #16
    1744:	00010800 	andeq	r0, r1, r0, lsl #16
    1748:	0010cb52 	andseq	ip, r0, r2, asr fp
    174c:	0010e008 	andseq	lr, r0, r8
    1750:	91000208 	tstls	r0, r8, lsl #4
    1754:	00000054 	andeq	r0, r0, r4, asr r0
    1758:	00000000 	andeq	r0, r0, r0
    175c:	000e4800 	andeq	r4, lr, r0, lsl #16
    1760:	000e6208 	andeq	r6, lr, r8, lsl #4
    1764:	53000108 	movwpl	r0, #264	; 0x108
    1768:	08000e62 	stmdaeq	r0, {r1, r5, r6, r9, sl, fp}
    176c:	08001040 	stmdaeq	r0, {r6, ip}
    1770:	40550001 	subsmi	r0, r5, r1
    1774:	43080010 	movwmi	r0, #32784	; 0x8010
    1778:	01080010 	tsteq	r8, r0, lsl r0
    177c:	10435300 	subne	r5, r3, r0, lsl #6
    1780:	106a0800 	rsbne	r0, sl, r0, lsl #16
    1784:	00010800 	andeq	r0, r1, r0, lsl #16
    1788:	00106a55 	andseq	r6, r0, r5, asr sl
    178c:	00108a08 	andseq	r8, r0, r8, lsl #20
    1790:	f3000408 	vshl.u8	d0, d8, d0
    1794:	8a9f5301 	bhi	fe7d63a0 <_estack+0xde7a63a0>
    1798:	c0080010 	andgt	r0, r8, r0, lsl r0
    179c:	01080010 	tsteq	r8, r0, lsl r0
    17a0:	10c05500 	sbcne	r5, r0, r0, lsl #10
    17a4:	10c20800 	sbcne	r0, r2, r0, lsl #16
    17a8:	00010800 	andeq	r0, r1, r0, lsl #16
    17ac:	0010c253 	andseq	ip, r0, r3, asr r2
    17b0:	0010ce08 	andseq	ip, r0, r8, lsl #28
    17b4:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    17b8:	080010ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, ip}
    17bc:	080010e0 	stmdaeq	r0, {r5, r6, r7, ip}
    17c0:	01f30004 	mvnseq	r0, r4
    17c4:	00009f53 	andeq	r9, r0, r3, asr pc
    17c8:	00000000 	andeq	r0, r0, r0
    17cc:	0e480000 	cdpeq	0, 4, cr0, cr8, cr0, {0}
    17d0:	0e800800 	cdpeq	8, 8, cr0, cr0, cr0, {0}
    17d4:	00020800 	andeq	r0, r2, r0, lsl #16
    17d8:	0e809f30 	mcreq	15, 4, r9, cr0, cr0, {1}
    17dc:	0ea00800 	cdpeq	8, 10, cr0, cr0, cr0, {0}
    17e0:	00010800 	andeq	r0, r1, r0, lsl #16
    17e4:	000ea058 	andeq	sl, lr, r8, asr r0
    17e8:	000f1208 	andeq	r1, pc, r8, lsl #4
    17ec:	31000208 	tstcc	r0, r8, lsl #4
    17f0:	000f129f 	muleq	pc, pc, r2	; <UNPREDICTABLE>
    17f4:	000f1e08 	andeq	r1, pc, r8, lsl #28
    17f8:	30000208 	andcc	r0, r0, r8, lsl #4
    17fc:	000f1e9f 	muleq	pc, pc, lr	; <UNPREDICTABLE>
    1800:	000f7808 	andeq	r7, pc, r8, lsl #16
    1804:	31000208 	tstcc	r0, r8, lsl #4
    1808:	000f789f 	muleq	pc, pc, r8	; <UNPREDICTABLE>
    180c:	000fa208 	andeq	sl, pc, r8, lsl #4
    1810:	58000108 	stmdapl	r0, {r3, r8}
    1814:	08000fa2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, fp}
    1818:	08001038 	stmdaeq	r0, {r3, r4, r5, ip}
    181c:	9f310002 	svcls	0x00310002
    1820:	08001038 	stmdaeq	r0, {r3, r4, r5, ip}
    1824:	0800103e 	stmdaeq	r0, {r1, r2, r3, r4, r5, ip}
    1828:	3e580001 	cdpcc	0, 5, cr0, cr8, cr1, {0}
    182c:	40080010 	andmi	r0, r8, r0, lsl r0
    1830:	02080010 	andeq	r0, r8, #16
    1834:	409f3100 	addsmi	r3, pc, r0, lsl #2
    1838:	46080010 			; <UNDEFINED> instruction: 0x46080010
    183c:	02080010 	andeq	r0, r8, #16
    1840:	469f3000 	ldrmi	r3, [pc], r0
    1844:	58080010 	stmdapl	r8, {r4}
    1848:	02080010 	andeq	r0, r8, #16
    184c:	589f3100 	ldmpl	pc, {r8, ip, sp}	; <UNPREDICTABLE>
    1850:	ba080010 	blt	201898 <_Min_Stack_Size+0x201498>
    1854:	01080010 	tsteq	r8, r0, lsl r0
    1858:	10ba5800 	adcsne	r5, sl, r0, lsl #16
    185c:	10ce0800 	sbcne	r0, lr, r0, lsl #16
    1860:	00020800 	andeq	r0, r2, r0, lsl #16
    1864:	10ce9f30 	sbcne	r9, lr, r0, lsr pc
    1868:	10e00800 	rscne	r0, r0, r0, lsl #16
    186c:	00010800 	andeq	r0, r1, r0, lsl #16
    1870:	00000058 	andeq	r0, r0, r8, asr r0
    1874:	00000000 	andeq	r0, r0, r0
    1878:	000ece00 	andeq	ip, lr, r0, lsl #28
    187c:	000f1208 	andeq	r1, pc, r8, lsl #4
    1880:	54000108 	strpl	r0, [r0], #-264	; 0x108
    1884:	08000f1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, fp}
    1888:	08000f7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl, fp}
    188c:	a2540001 	subsge	r0, r4, #1
    1890:	3808000f 	stmdacc	r8, {r0, r1, r2, r3}
    1894:	01080010 	tsteq	r8, r0, lsl r0
    1898:	00005400 	andeq	r5, r0, r0, lsl #8
    189c:	00000000 	andeq	r0, r0, r0
    18a0:	0eda0000 	cdpeq	0, 13, cr0, cr10, cr0, {0}
    18a4:	0f120800 	svceq	0x00120800
    18a8:	00020800 	andeq	r0, r2, r0, lsl #16
    18ac:	0f1e9f30 	svceq	0x001e9f30
    18b0:	0f6a0800 	svceq	0x006a0800
    18b4:	00020800 	andeq	r0, r2, r0, lsl #16
    18b8:	0fa29f30 	svceq	0x00a29f30
    18bc:	10380800 	eorsne	r0, r8, r0, lsl #16
    18c0:	00020800 	andeq	r0, r2, r0, lsl #16
    18c4:	00009f31 	andeq	r9, r0, r1, lsr pc
    18c8:	00000000 	andeq	r0, r0, r0
    18cc:	0ede0000 	cdpeq	0, 13, cr0, cr14, cr0, {0}
    18d0:	0f120800 	svceq	0x00120800
    18d4:	00010800 	andeq	r0, r1, r0, lsl #16
    18d8:	000f1e54 	andeq	r1, pc, r4, asr lr	; <UNPREDICTABLE>
    18dc:	000f6a08 	andeq	r6, pc, r8, lsl #20
    18e0:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    18ec:	08000f7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl, fp}
    18f0:	08000fa2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, fp}
    18f4:	64550001 	ldrbvs	r0, [r5], #-1
    18f8:	68080010 	stmdavs	r8, {r4}
    18fc:	02080010 	andeq	r0, r8, #16
    1900:	009f3200 	addseq	r3, pc, r0, lsl #4
    1904:	00000000 	andeq	r0, r0, r0
    1908:	7a000000 	bvc	1910 <_Min_Stack_Size+0x1510>
    190c:	a208000f 	andge	r0, r8, #15
    1910:	0108000f 	tsteq	r8, pc
    1914:	10645600 	rsbne	r5, r4, r0, lsl #12
    1918:	10ba0800 	adcsne	r0, sl, r0, lsl #16
    191c:	00010800 	andeq	r0, r1, r0, lsl #16
    1920:	0010ce56 	andseq	ip, r0, r6, asr lr
    1924:	0010e008 	andseq	lr, r0, r8
    1928:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    1934:	08000f7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl, fp}
    1938:	08000fa2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, fp}
    193c:	64540001 	ldrbvs	r0, [r4], #-1
    1940:	ba080010 	blt	201988 <_Min_Stack_Size+0x201588>
    1944:	01080010 	tsteq	r8, r0, lsl r0
    1948:	10ce5400 	sbcne	r5, lr, r0, lsl #8
    194c:	10e00800 	rscne	r0, r0, r0, lsl #16
    1950:	00010800 	andeq	r0, r1, r0, lsl #16
    1954:	00000054 	andeq	r0, r0, r4, asr r0
    1958:	00000000 	andeq	r0, r0, r0
    195c:	000fb200 	andeq	fp, pc, r0, lsl #4
    1960:	00103808 	andseq	r3, r0, r8, lsl #16
    1964:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    1970:	080010e0 	stmdaeq	r0, {r5, r6, r7, ip}
    1974:	080010e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, ip}
    1978:	e6500001 	ldrb	r0, [r0], -r1
    197c:	30080010 	andcc	r0, r8, r0, lsl r0
    1980:	04080011 	streq	r0, [r8], #-17
    1984:	5001f300 	andpl	pc, r1, r0, lsl #6
    1988:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    198c:	00000000 	andeq	r0, r0, r0
    1990:	0010ea00 	andseq	lr, r0, r0, lsl #20
    1994:	00110e08 	andseq	r0, r1, r8, lsl #28
    1998:	50000108 	andpl	r0, r0, r8, lsl #2
    199c:	0800110e 	stmdaeq	r0, {r1, r2, r3, r8, ip}
    19a0:	0800112a 	stmdaeq	r0, {r1, r3, r5, r8, ip}
    19a4:	2a540001 	bcs	15019b0 <_Min_Stack_Size+0x15015b0>
    19a8:	2d080011 	stccs	0, cr0, [r8, #-68]	; 0xffffffbc
    19ac:	01080011 	tsteq	r8, r1, lsl r0
    19b0:	112d5000 	teqne	sp, r0
    19b4:	11300800 	teqne	r0, r0, lsl #16
    19b8:	00010800 	andeq	r0, r1, r0, lsl #16
    19bc:	00000054 	andeq	r0, r0, r4, asr r0
    19c0:	00000000 	andeq	r0, r0, r0
    19c4:	00113000 	andseq	r3, r1, r0
    19c8:	00113b08 	andseq	r3, r1, r8, lsl #22
    19cc:	50000108 	andpl	r0, r0, r8, lsl #2
    19d0:	0800113b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r8, ip}
    19d4:	08001144 	stmdaeq	r0, {r2, r6, r8, ip}
    19d8:	44540001 	ldrbmi	r0, [r4], #-1
    19dc:	47080011 	smladmi	r8, r1, r0, r0
    19e0:	01080011 	tsteq	r8, r1, lsl r0
    19e4:	11475000 	mrsne	r5, (UNDEF: 71)
    19e8:	11640800 	cmnne	r4, r0, lsl #16
    19ec:	00010800 	andeq	r0, r1, r0, lsl #16
    19f0:	00000054 	andeq	r0, r0, r4, asr r0
    19f4:	00000000 	andeq	r0, r0, r0
    19f8:	00115400 	andseq	r5, r1, r0, lsl #8
    19fc:	00115608 	andseq	r5, r1, r8, lsl #12
    1a00:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    1a0c:	08001164 	stmdaeq	r0, {r2, r5, r6, r8, ip}
    1a10:	0800117f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r8, ip}
    1a14:	7f500001 	svcvc	0x00500001
    1a18:	90080011 	andls	r0, r8, r1, lsl r0
    1a1c:	01080011 	tsteq	r8, r1, lsl r0
    1a20:	11905400 	orrsne	r5, r0, r0, lsl #8
    1a24:	119c0800 	orrsne	r0, ip, r0, lsl #16
    1a28:	00040800 	andeq	r0, r4, r0, lsl #16
    1a2c:	9f5001f3 	svcls	0x005001f3
    1a30:	0800119c 	stmdaeq	r0, {r2, r3, r4, r7, r8, ip}
    1a34:	080011a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, ip}
    1a38:	a5500001 	ldrbge	r0, [r0, #-1]
    1a3c:	c8080011 	stmdagt	r8, {r0, r4}
    1a40:	01080011 	tsteq	r8, r1, lsl r0
    1a44:	11c85400 	bicne	r5, r8, r0, lsl #8
    1a48:	11d20800 	bicsne	r0, r2, r0, lsl #16
    1a4c:	00040800 	andeq	r0, r4, r0, lsl #16
    1a50:	9f5001f3 	svcls	0x005001f3
    1a54:	080011d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, ip}
    1a58:	080011d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, ip}
    1a5c:	d5500001 	ldrble	r0, [r0, #-1]
    1a60:	fe080011 	mcr2	0, 0, r0, cr8, cr1, {0}
    1a64:	01080011 	tsteq	r8, r1, lsl r0
    1a68:	11fe5400 	mvnsne	r5, r0, lsl #8
    1a6c:	12080800 	andne	r0, r8, #0, 16
    1a70:	00040800 	andeq	r0, r4, r0, lsl #16
    1a74:	9f5001f3 	svcls	0x005001f3
    1a78:	08001208 	stmdaeq	r0, {r3, r9, ip}
    1a7c:	0800120b 	stmdaeq	r0, {r0, r1, r3, r9, ip}
    1a80:	0b500001 	bleq	1401a8c <_Min_Stack_Size+0x140168c>
    1a84:	58080012 	stmdapl	r8, {r1, r4}
    1a88:	01080012 	tsteq	r8, r2, lsl r0
    1a8c:	12585400 	subsne	r5, r8, #0, 8
    1a90:	126e0800 	rsbne	r0, lr, #0, 16
    1a94:	00040800 	andeq	r0, r4, r0, lsl #16
    1a98:	9f5001f3 	svcls	0x005001f3
    1a9c:	0800126e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, ip}
    1aa0:	08001278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip}
    1aa4:	78540001 	ldmdavc	r4, {r0}^
    1aa8:	83080012 	movwhi	r0, #32786	; 0x8012
    1aac:	01080012 	tsteq	r8, r2, lsl r0
    1ab0:	12835000 	addne	r5, r3, #0
    1ab4:	12860800 	addne	r0, r6, #0, 16
    1ab8:	00010800 	andeq	r0, r1, r0, lsl #16
    1abc:	00000054 	andeq	r0, r0, r4, asr r0
    1ac0:	00000000 	andeq	r0, r0, r0
    1ac4:	00116400 	andseq	r6, r1, r0, lsl #8
    1ac8:	00117f08 	andseq	r7, r1, r8, lsl #30
    1acc:	51000108 	tstpl	r0, r8, lsl #2
    1ad0:	0800117f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r8, ip}
    1ad4:	0800119c 	stmdaeq	r0, {r2, r3, r4, r7, r8, ip}
    1ad8:	9c560001 	mrrcls	0, 0, r0, r6, cr1
    1adc:	a5080011 	strge	r0, [r8, #-17]
    1ae0:	01080011 	tsteq	r8, r1, lsl r0
    1ae4:	11a55100 			; <UNDEFINED> instruction: 0x11a55100
    1ae8:	11d20800 	bicsne	r0, r2, r0, lsl #16
    1aec:	00010800 	andeq	r0, r1, r0, lsl #16
    1af0:	0011d256 	andseq	sp, r1, r6, asr r2
    1af4:	0011d508 	andseq	sp, r1, r8, lsl #10
    1af8:	51000108 	tstpl	r0, r8, lsl #2
    1afc:	080011d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, ip}
    1b00:	08001208 	stmdaeq	r0, {r3, r9, ip}
    1b04:	08560001 	ldmdaeq	r6, {r0}^
    1b08:	0b080012 	bleq	201b58 <_Min_Stack_Size+0x201758>
    1b0c:	01080012 	tsteq	r8, r2, lsl r0
    1b10:	120b5100 	andne	r5, fp, #0, 2
    1b14:	12780800 	rsbsne	r0, r8, #0, 16
    1b18:	00010800 	andeq	r0, r1, r0, lsl #16
    1b1c:	00127856 	andseq	r7, r2, r6, asr r8
    1b20:	00128308 	andseq	r8, r2, r8, lsl #6
    1b24:	51000108 	tstpl	r0, r8, lsl #2
    1b28:	08001283 	stmdaeq	r0, {r0, r1, r7, r9, ip}
    1b2c:	08001286 	stmdaeq	r0, {r1, r2, r7, r9, ip}
    1b30:	00560001 	subseq	r0, r6, r1
    1b34:	00000000 	andeq	r0, r0, r0
    1b38:	64000000 	strvs	r0, [r0], #-0
    1b3c:	7f080011 	svcvc	0x00080011
    1b40:	01080011 	tsteq	r8, r1, lsl r0
    1b44:	117f5200 	cmnne	pc, r0, lsl #4
    1b48:	119c0800 	orrsne	r0, ip, r0, lsl #16
    1b4c:	00010800 	andeq	r0, r1, r0, lsl #16
    1b50:	00119c58 	andseq	r9, r1, r8, asr ip
    1b54:	0011a508 	andseq	sl, r1, r8, lsl #10
    1b58:	52000108 	andpl	r0, r0, #8, 2
    1b5c:	080011a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, ip}
    1b60:	080011d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, ip}
    1b64:	d2580001 	subsle	r0, r8, #1
    1b68:	d5080011 	strle	r0, [r8, #-17]
    1b6c:	01080011 	tsteq	r8, r1, lsl r0
    1b70:	11d55200 	bicsne	r5, r5, r0, lsl #4
    1b74:	12080800 	andne	r0, r8, #0, 16
    1b78:	00010800 	andeq	r0, r1, r0, lsl #16
    1b7c:	00120858 	andseq	r0, r2, r8, asr r8
    1b80:	00120b08 	andseq	r0, r2, r8, lsl #22
    1b84:	52000108 	andpl	r0, r0, #8, 2
    1b88:	0800120b 	stmdaeq	r0, {r0, r1, r3, r9, ip}
    1b8c:	08001278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip}
    1b90:	78580001 	ldmdavc	r8, {r0}^
    1b94:	83080012 	movwhi	r0, #32786	; 0x8012
    1b98:	01080012 	tsteq	r8, r2, lsl r0
    1b9c:	12835200 	addne	r5, r3, #0, 4
    1ba0:	12860800 	addne	r0, r6, #0, 16
    1ba4:	00010800 	andeq	r0, r1, r0, lsl #16
    1ba8:	00000058 	andeq	r0, r0, r8, asr r0
    1bac:	00000000 	andeq	r0, r0, r0
    1bb0:	00116400 	andseq	r6, r1, r0, lsl #8
    1bb4:	00117808 	andseq	r7, r1, r8, lsl #16
    1bb8:	53000108 	movwpl	r0, #264	; 0x108
    1bbc:	08001178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip}
    1bc0:	08001190 	stmdaeq	r0, {r4, r7, r8, ip}
    1bc4:	90550001 	subsls	r0, r5, r1
    1bc8:	9c080011 	stcls	0, cr0, [r8], {17}
    1bcc:	04080011 	streq	r0, [r8], #-17
    1bd0:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    1bd4:	00119c9f 	mulseq	r1, pc, ip	; <UNPREDICTABLE>
    1bd8:	0011ae08 	andseq	sl, r1, r8, lsl #28
    1bdc:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1be0:	080011ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, ip}
    1be4:	080011d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, ip}
    1be8:	01f30004 	mvnseq	r0, r4
    1bec:	11d29f53 	bicsne	r9, r2, r3, asr pc
    1bf0:	11d50800 	bicsne	r0, r5, r0, lsl #16
    1bf4:	00010800 	andeq	r0, r1, r0, lsl #16
    1bf8:	0011d553 	andseq	sp, r1, r3, asr r5
    1bfc:	0011f608 	andseq	pc, r1, r8, lsl #12
    1c00:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1c04:	080011f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, ip}
    1c08:	08001208 	stmdaeq	r0, {r3, r9, ip}
    1c0c:	01f30004 	mvnseq	r0, r4
    1c10:	12089f53 	andne	r9, r8, #332	; 0x14c
    1c14:	124a0800 	subne	r0, sl, #0, 16
    1c18:	00010800 	andeq	r0, r1, r0, lsl #16
    1c1c:	00124a55 	andseq	r4, r2, r5, asr sl
    1c20:	00127808 	andseq	r7, r2, r8, lsl #16
    1c24:	f3000408 	vshl.u8	d0, d8, d0
    1c28:	789f5301 	ldmvc	pc, {r0, r8, r9, ip, lr}	; <UNPREDICTABLE>
    1c2c:	7a080012 	bvc	201c7c <_Min_Stack_Size+0x20187c>
    1c30:	01080012 	tsteq	r8, r2, lsl r0
    1c34:	127a5300 	rsbsne	r5, sl, #0, 6
    1c38:	12860800 	addne	r0, r6, #0, 16
    1c3c:	00010800 	andeq	r0, r1, r0, lsl #16
    1c40:	00000055 	andeq	r0, r0, r5, asr r0
    1c44:	00000000 	andeq	r0, r0, r0
    1c48:	00119000 	andseq	r9, r1, r0
    1c4c:	00119c08 	andseq	r9, r1, r8, lsl #24
    1c50:	54000108 	strpl	r0, [r0], #-264	; 0x108
    1c54:	080011c8 	stmdaeq	r0, {r3, r6, r7, r8, ip}
    1c58:	080011d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, ip}
    1c5c:	fe540001 	cdp2	0, 5, cr0, cr4, cr1, {0}
    1c60:	08080011 	stmdaeq	r8, {r0, r4}
    1c64:	01080012 	tsteq	r8, r2, lsl r0
    1c68:	12645400 	rsbne	r5, r4, #0, 8
    1c6c:	126e0800 	rsbne	r0, lr, #0, 16
    1c70:	00010800 	andeq	r0, r1, r0, lsl #16
    1c74:	00000054 	andeq	r0, r0, r4, asr r0
    1c78:	00000000 	andeq	r0, r0, r0
    1c7c:	00118c00 	andseq	r8, r1, r0, lsl #24
    1c80:	00119008 	andseq	r9, r1, r8
    1c84:	50000108 	andpl	r0, r0, r8, lsl #2
    1c88:	08001190 	stmdaeq	r0, {r4, r7, r8, ip}
    1c8c:	0800119c 	stmdaeq	r0, {r2, r3, r4, r7, r8, ip}
    1c90:	a8570001 	ldmdage	r7, {r0}^
    1c94:	b2080011 	andlt	r0, r8, #17
    1c98:	01080011 	tsteq	r8, r1, lsl r0
    1c9c:	11b25000 			; <UNDEFINED> instruction: 0x11b25000
    1ca0:	11d20800 	bicsne	r0, r2, r0, lsl #16
    1ca4:	00010800 	andeq	r0, r1, r0, lsl #16
    1ca8:	0011d857 	andseq	sp, r1, r7, asr r8
    1cac:	0011de08 	andseq	sp, r1, r8, lsl #28
    1cb0:	50000108 	andpl	r0, r0, r8, lsl #2
    1cb4:	080011de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, ip}
    1cb8:	08001208 	stmdaeq	r0, {r3, r9, ip}
    1cbc:	16570001 	ldrbne	r0, [r7], -r1
    1cc0:	1e080012 	mcrne	0, 0, r0, cr8, cr2, {0}
    1cc4:	01080012 	tsteq	r8, r2, lsl r0
    1cc8:	121e5000 	andsne	r5, lr, #0
    1ccc:	126e0800 	rsbne	r0, lr, #0, 16
    1cd0:	00010800 	andeq	r0, r1, r0, lsl #16
    1cd4:	00126e57 	andseq	r6, r2, r7, asr lr
    1cd8:	00127008 	andseq	r7, r2, r8
    1cdc:	50000108 	andpl	r0, r0, r8, lsl #2
    1ce0:	08001270 	stmdaeq	r0, {r4, r5, r6, r9, ip}
    1ce4:	08001278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip}
    1ce8:	00570001 	subseq	r0, r7, r1
    1cec:	00000000 	andeq	r0, r0, r0
    1cf0:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    1cf4:	ae080011 	mcrge	0, 0, r0, cr8, cr1, {0}
    1cf8:	01080011 	tsteq	r8, r1, lsl r0
    1cfc:	11ae5500 			; <UNDEFINED> instruction: 0x11ae5500
    1d00:	11d20800 	bicsne	r0, r2, r0, lsl #16
    1d04:	00040800 	andeq	r0, r4, r0, lsl #16
    1d08:	9f5301f3 	svcls	0x005301f3
    1d0c:	080011d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, ip}
    1d10:	080011f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, ip}
    1d14:	f6550001 			; <UNDEFINED> instruction: 0xf6550001
    1d18:	08080011 	stmdaeq	r8, {r0, r4}
    1d1c:	04080012 	streq	r0, [r8], #-18
    1d20:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    1d24:	0012169f 	mulseq	r2, pc, r6	; <UNPREDICTABLE>
    1d28:	00124a08 	andseq	r4, r2, r8, lsl #20
    1d2c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1d30:	0800124a 	stmdaeq	r0, {r1, r3, r6, r9, ip}
    1d34:	08001278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip}
    1d38:	01f30004 	mvnseq	r0, r4
    1d3c:	00009f53 	andeq	r9, r0, r3, asr pc
    1d40:	00000000 	andeq	r0, r0, r0
    1d44:	11a80000 			; <UNDEFINED> instruction: 0x11a80000
    1d48:	11d20800 	bicsne	r0, r2, r0, lsl #16
    1d4c:	00010800 	andeq	r0, r1, r0, lsl #16
    1d50:	0011d856 	andseq	sp, r1, r6, asr r8
    1d54:	00120808 	andseq	r0, r2, r8, lsl #16
    1d58:	56000108 	strpl	r0, [r0], -r8, lsl #2
    1d5c:	08001216 	stmdaeq	r0, {r1, r2, r4, r9, ip}
    1d60:	08001278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip}
    1d64:	00560001 	subseq	r0, r6, r1
    1d68:	00000000 	andeq	r0, r0, r0
    1d6c:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    1d70:	c8080011 	stmdagt	r8, {r0, r4}
    1d74:	01080011 	tsteq	r8, r1, lsl r0
    1d78:	11c85400 	bicne	r5, r8, r0, lsl #8
    1d7c:	11d20800 	bicsne	r0, r2, r0, lsl #16
    1d80:	00040800 	andeq	r0, r4, r0, lsl #16
    1d84:	9f5001f3 	svcls	0x005001f3
    1d88:	080011d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, ip}
    1d8c:	080011fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, ip}
    1d90:	fe540001 	cdp2	0, 5, cr0, cr4, cr1, {0}
    1d94:	08080011 	stmdaeq	r8, {r0, r4}
    1d98:	04080012 	streq	r0, [r8], #-18
    1d9c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1da0:	0012169f 	mulseq	r2, pc, r6	; <UNPREDICTABLE>
    1da4:	00125808 	andseq	r5, r2, r8, lsl #16
    1da8:	54000108 	strpl	r0, [r0], #-264	; 0x108
    1dac:	08001258 	stmdaeq	r0, {r3, r4, r6, r9, ip}
    1db0:	0800126e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, ip}
    1db4:	01f30004 	mvnseq	r0, r4
    1db8:	126e9f50 	rsbne	r9, lr, #80, 30	; 0x140
    1dbc:	12780800 	rsbsne	r0, r8, #0, 16
    1dc0:	00010800 	andeq	r0, r1, r0, lsl #16
    1dc4:	00000054 	andeq	r0, r0, r4, asr r0
    1dc8:	00000000 	andeq	r0, r0, r0
    1dcc:	00128800 	andseq	r8, r2, r0, lsl #16
    1dd0:	0012a508 	andseq	sl, r2, r8, lsl #10
    1dd4:	50000108 	andpl	r0, r0, r8, lsl #2
    1dd8:	080012a5 	stmdaeq	r0, {r0, r2, r5, r7, r9, ip}
    1ddc:	08001472 	stmdaeq	r0, {r1, r4, r5, r6, sl, ip}
    1de0:	72540001 	subsvc	r0, r4, #1
    1de4:	75080014 	strvc	r0, [r8, #-20]
    1de8:	01080014 	tsteq	r8, r4, lsl r0
    1dec:	14755000 	ldrbtne	r5, [r5], #-0
    1df0:	14d40800 	ldrbne	r0, [r4], #2048	; 0x800
    1df4:	00010800 	andeq	r0, r1, r0, lsl #16
    1df8:	0014d454 	andseq	sp, r4, r4, asr r4
    1dfc:	0014df08 	andseq	sp, r4, r8, lsl #30
    1e00:	50000108 	andpl	r0, r0, r8, lsl #2
    1e04:	080014df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sl, ip}
    1e08:	080014e2 	stmdaeq	r0, {r1, r5, r6, r7, sl, ip}
    1e0c:	00540001 	subseq	r0, r4, r1
    1e10:	00000000 	andeq	r0, r0, r0
    1e14:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    1e18:	a5080012 	strge	r0, [r8, #-18]
    1e1c:	01080012 	tsteq	r8, r2, lsl r0
    1e20:	12a55100 	adcne	r5, r5, #0, 2
    1e24:	13ba0800 			; <UNDEFINED> instruction: 0x13ba0800
    1e28:	00010800 	andeq	r0, r1, r0, lsl #16
    1e2c:	0013ba55 	andseq	fp, r3, r5, asr sl
    1e30:	0013bd08 	andseq	fp, r3, r8, lsl #26
    1e34:	51000108 	tstpl	r0, r8, lsl #2
    1e38:	080013bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, r9, ip}
    1e3c:	080013e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, ip}
    1e40:	01f30004 	mvnseq	r0, r4
    1e44:	13e49f51 	mvnne	r9, #324	; 0x144
    1e48:	14720800 	ldrbtne	r0, [r2], #-2048	; 0x800
    1e4c:	00010800 	andeq	r0, r1, r0, lsl #16
    1e50:	00147255 	andseq	r7, r4, r5, asr r2
    1e54:	00147508 	andseq	r7, r4, r8, lsl #10
    1e58:	51000108 	tstpl	r0, r8, lsl #2
    1e5c:	08001475 	stmdaeq	r0, {r0, r2, r4, r5, r6, sl, ip}
    1e60:	080014a6 	stmdaeq	r0, {r1, r2, r5, r7, sl, ip}
    1e64:	a6550001 	ldrbge	r0, [r5], -r1
    1e68:	ce080014 	mcrgt	0, 0, r0, cr8, cr4, {0}
    1e6c:	04080014 	streq	r0, [r8], #-20
    1e70:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1e74:	0014ce9f 	mulseq	r4, pc, lr	; <UNPREDICTABLE>
    1e78:	0014d408 	andseq	sp, r4, r8, lsl #8
    1e7c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1e80:	080014d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, ip}
    1e84:	080014df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sl, ip}
    1e88:	df510001 	svcle	0x00510001
    1e8c:	e2080014 	and	r0, r8, #20
    1e90:	01080014 	tsteq	r8, r4, lsl r0
    1e94:	00005500 	andeq	r5, r0, r0, lsl #10
    1e98:	00000000 	andeq	r0, r0, r0
    1e9c:	12880000 	addne	r0, r8, #0
    1ea0:	12a50800 	adcne	r0, r5, #0, 16
    1ea4:	00010800 	andeq	r0, r1, r0, lsl #16
    1ea8:	0012a552 	andseq	sl, r2, r2, asr r5
    1eac:	0012f808 	andseq	pc, r2, r8, lsl #16
    1eb0:	91000208 	tstls	r0, r8, lsl #4
    1eb4:	0012f854 	andseq	pc, r2, r4, asr r8	; <UNPREDICTABLE>
    1eb8:	0012fb08 	andseq	pc, r2, r8, lsl #22
    1ebc:	71000208 	tstvc	r0, r8, lsl #4
    1ec0:	0012fb00 	andseq	pc, r2, r0, lsl #22
    1ec4:	00147208 	andseq	r7, r4, r8, lsl #4
    1ec8:	91000208 	tstls	r0, r8, lsl #4
    1ecc:	00147254 	andseq	r7, r4, r4, asr r2
    1ed0:	00147508 	andseq	r7, r4, r8, lsl #10
    1ed4:	52000108 	andpl	r0, r0, #8, 2
    1ed8:	08001475 	stmdaeq	r0, {r0, r2, r4, r5, r6, sl, ip}
    1edc:	080014d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, ip}
    1ee0:	54910002 	ldrpl	r0, [r1], #2
    1ee4:	080014d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, ip}
    1ee8:	080014df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sl, ip}
    1eec:	df520001 	svcle	0x00520001
    1ef0:	e2080014 	and	r0, r8, #20
    1ef4:	02080014 	andeq	r0, r8, #20
    1ef8:	00549100 	subseq	r9, r4, r0, lsl #2
    1efc:	00000000 	andeq	r0, r0, r0
    1f00:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    1f04:	a2080012 	andge	r0, r8, #18
    1f08:	01080012 	tsteq	r8, r2, lsl r0
    1f0c:	12a25300 	adcne	r5, r2, #0, 6
    1f10:	14720800 	ldrbtne	r0, [r2], #-2048	; 0x800
    1f14:	00010800 	andeq	r0, r1, r0, lsl #16
    1f18:	00147257 	andseq	r7, r4, r7, asr r2
    1f1c:	00147508 	andseq	r7, r4, r8, lsl #10
    1f20:	53000108 	movwpl	r0, #264	; 0x108
    1f24:	08001475 	stmdaeq	r0, {r0, r2, r4, r5, r6, sl, ip}
    1f28:	080014d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, ip}
    1f2c:	d4570001 	ldrble	r0, [r7], #-1
    1f30:	d6080014 			; <UNDEFINED> instruction: 0xd6080014
    1f34:	01080014 	tsteq	r8, r4, lsl r0
    1f38:	14d65300 	ldrbne	r5, [r6], #768	; 0x300
    1f3c:	14e20800 	strbtne	r0, [r2], #2048	; 0x800
    1f40:	00010800 	andeq	r0, r1, r0, lsl #16
    1f44:	00000057 	andeq	r0, r0, r7, asr r0
    1f48:	00000000 	andeq	r0, r0, r0
    1f4c:	00128800 	andseq	r8, r2, r0, lsl #16
    1f50:	0012ba08 	andseq	fp, r2, r8, lsl #20
    1f54:	30000208 	andcc	r0, r0, r8, lsl #4
    1f58:	0012ba9f 	mulseq	r2, pc, sl	; <UNPREDICTABLE>
    1f5c:	0012d408 	andseq	sp, r2, r8, lsl #8
    1f60:	58000108 	stmdapl	r0, {r3, r8}
    1f64:	080012d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip}
    1f68:	080013b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, ip}
    1f6c:	9f310002 	svcls	0x00310002
    1f70:	080013b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, ip}
    1f74:	080013e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, ip}
    1f78:	e4580001 	ldrb	r0, [r8], #-1
    1f7c:	6a080013 	bvs	201fd0 <_Min_Stack_Size+0x201bd0>
    1f80:	02080014 	andeq	r0, r8, #20
    1f84:	6a9f3100 	bvs	fe7ce38c <_estack+0xde79e38c>
    1f88:	70080014 	andvc	r0, r8, r4, lsl r0
    1f8c:	01080014 	tsteq	r8, r4, lsl r0
    1f90:	14705800 	ldrbtne	r5, [r0], #-2048	; 0x800
    1f94:	14720800 	ldrbtne	r0, [r2], #-2048	; 0x800
    1f98:	00020800 	andeq	r0, r2, r0, lsl #16
    1f9c:	14729f31 	ldrbtne	r9, [r2], #-3889	; 0xf31
    1fa0:	14780800 	ldrbtne	r0, [r8], #-2048	; 0x800
    1fa4:	00020800 	andeq	r0, r2, r0, lsl #16
    1fa8:	14789f30 	ldrbtne	r9, [r8], #-3888	; 0xf30
    1fac:	149a0800 	ldrne	r0, [sl], #2048	; 0x800
    1fb0:	00020800 	andeq	r0, r2, r0, lsl #16
    1fb4:	149a9f31 	ldrne	r9, [sl], #3889	; 0xf31
    1fb8:	14ce0800 	strbne	r0, [lr], #2048	; 0x800
    1fbc:	00010800 	andeq	r0, r1, r0, lsl #16
    1fc0:	0014ce58 	andseq	ip, r4, r8, asr lr
    1fc4:	0014e208 	andseq	lr, r4, r8, lsl #4
    1fc8:	30000208 	andcc	r0, r0, r8, lsl #4
    1fcc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1fd0:	00000000 	andeq	r0, r0, r0
    1fd4:	0013ba00 	andseq	fp, r3, r0, lsl #20
    1fd8:	0013e408 	andseq	lr, r3, r8, lsl #8
    1fdc:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1fe0:	080014a6 	stmdaeq	r0, {r1, r2, r5, r7, sl, ip}
    1fe4:	080014ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, ip}
    1fe8:	00550001 	subseq	r0, r5, r1
    1fec:	00000000 	andeq	r0, r0, r0
    1ff0:	02000000 	andeq	r0, r0, #0
    1ff4:	b4080013 	strlt	r0, [r8], #-19
    1ff8:	01080013 	tsteq	r8, r3, lsl r0
    1ffc:	13e45400 	mvnne	r5, #0, 8
    2000:	146a0800 	strbtne	r0, [sl], #-2048	; 0x800
    2004:	00010800 	andeq	r0, r1, r0, lsl #16
    2008:	00147854 	andseq	r7, r4, r4, asr r8
    200c:	00148808 	andseq	r8, r4, r8, lsl #16
    2010:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    201c:	0800130c 	stmdaeq	r0, {r2, r3, r8, r9, ip}
    2020:	080013a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, ip}
    2024:	9f310002 	svcls	0x00310002
    2028:	080013e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, ip}
    202c:	0800146a 	stmdaeq	r0, {r1, r3, r5, r6, sl, ip}
    2030:	9f300002 	svcls	0x00300002
    2034:	08001478 	stmdaeq	r0, {r3, r4, r5, r6, sl, ip}
    2038:	08001488 	stmdaeq	r0, {r3, r7, sl, ip}
    203c:	9f310002 	svcls	0x00310002
	...
    2048:	08001324 	stmdaeq	r0, {r2, r5, r8, r9, ip}
    204c:	080013a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, ip}
    2050:	00540001 	subseq	r0, r4, r1
    2054:	00000000 	andeq	r0, r0, r0
    2058:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    205c:	6a080013 	bvs	2020b0 <_Min_Stack_Size+0x201cb0>
    2060:	01080014 	tsteq	r8, r4, lsl r0
    2064:	00005400 	andeq	r5, r0, r0, lsl #8
    2068:	00000000 	andeq	r0, r0, r0
    206c:	14e40000 	strbtne	r0, [r4], #0
    2070:	14f10800 	ldrbtne	r0, [r1], #2048	; 0x800
    2074:	00010800 	andeq	r0, r1, r0, lsl #16
    2078:	0014f150 	andseq	pc, r4, r0, asr r1	; <UNPREDICTABLE>
    207c:	00151a08 	andseq	r1, r5, r8, lsl #20
    2080:	54000108 	strpl	r0, [r0], #-264	; 0x108
    2084:	0800151a 	stmdaeq	r0, {r1, r3, r4, r8, sl, ip}
    2088:	0800151d 	stmdaeq	r0, {r0, r2, r3, r4, r8, sl, ip}
    208c:	1d500001 	ldclne	0, cr0, [r0, #-4]
    2090:	20080015 	andcs	r0, r8, r5, lsl r0
    2094:	01080015 	tsteq	r8, r5, lsl r0
    2098:	00005400 	andeq	r5, r0, r0, lsl #8
    209c:	00000000 	andeq	r0, r0, r0
    20a0:	14e40000 	strbtne	r0, [r4], #0
    20a4:	14f10800 	ldrbtne	r0, [r1], #2048	; 0x800
    20a8:	00010800 	andeq	r0, r1, r0, lsl #16
    20ac:	0014f151 	andseq	pc, r4, r1, asr r1	; <UNPREDICTABLE>
    20b0:	00151a08 	andseq	r1, r5, r8, lsl #20
    20b4:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    20b8:	0800151a 	stmdaeq	r0, {r1, r3, r4, r8, sl, ip}
    20bc:	0800151d 	stmdaeq	r0, {r0, r2, r3, r4, r8, sl, ip}
    20c0:	1d510001 	ldclne	0, cr0, [r1, #-4]
    20c4:	20080015 	andcs	r0, r8, r5, lsl r0
    20c8:	01080015 	tsteq	r8, r5, lsl r0
    20cc:	00005500 	andeq	r5, r0, r0, lsl #10
    20d0:	00000000 	andeq	r0, r0, r0
    20d4:	15020000 	strne	r0, [r2, #-0]
    20d8:	15100800 	ldrne	r0, [r0, #-2048]	; 0x800
    20dc:	00010800 	andeq	r0, r1, r0, lsl #16
    20e0:	00151650 	andseq	r1, r5, r0, asr r6
    20e4:	00151a08 	andseq	r1, r5, r8, lsl #20
    20e8:	31000208 	tstcc	r0, r8, lsl #4
    20ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    20f0:	00000000 	andeq	r0, r0, r0
    20f4:	00152000 	andseq	r2, r5, r0
    20f8:	00152f08 	andseq	r2, r5, r8, lsl #30
    20fc:	50000108 	andpl	r0, r0, r8, lsl #2
    2100:	0800152f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, sl, ip}
    2104:	0800153c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, ip}
    2108:	3c540001 	mrrccc	0, 0, r0, r4, cr1
    210c:	46080015 			; <UNDEFINED> instruction: 0x46080015
    2110:	04080015 	streq	r0, [r8], #-21
    2114:	5001f300 	andpl	pc, r1, r0, lsl #6
    2118:	0015469f 	mulseq	r5, pc, r6	; <UNPREDICTABLE>
    211c:	00154908 	andseq	r4, r5, r8, lsl #18
    2120:	50000108 	andpl	r0, r0, r8, lsl #2
    2124:	08001549 	stmdaeq	r0, {r0, r3, r6, r8, sl, ip}
    2128:	0800156a 	stmdaeq	r0, {r1, r3, r5, r6, r8, sl, ip}
    212c:	6a540001 	bvs	1502138 <_Min_Stack_Size+0x1501d38>
    2130:	72080015 	andvc	r0, r8, #21
    2134:	04080015 	streq	r0, [r8], #-21
    2138:	5001f300 	andpl	pc, r1, r0, lsl #6
    213c:	0015729f 	mulseq	r5, pc, r2	; <UNPREDICTABLE>
    2140:	00157b08 	andseq	r7, r5, r8, lsl #22
    2144:	50000108 	andpl	r0, r0, r8, lsl #2
    2148:	0800157b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r8, sl, ip}
    214c:	08001596 	stmdaeq	r0, {r1, r2, r4, r7, r8, sl, ip}
    2150:	96540001 	ldrbls	r0, [r4], -r1
    2154:	a2080015 	andge	r0, r8, #21
    2158:	04080015 	streq	r0, [r8], #-21
    215c:	5001f300 	andpl	pc, r1, r0, lsl #6
    2160:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2164:	00000000 	andeq	r0, r0, r0
    2168:	00152000 	andseq	r2, r5, r0
    216c:	00152f08 	andseq	r2, r5, r8, lsl #30
    2170:	51000108 	tstpl	r0, r8, lsl #2
    2174:	0800152f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, sl, ip}
    2178:	08001546 	stmdaeq	r0, {r1, r2, r6, r8, sl, ip}
    217c:	46560001 	ldrbmi	r0, [r6], -r1
    2180:	49080015 	stmdbmi	r8, {r0, r2, r4}
    2184:	01080015 	tsteq	r8, r5, lsl r0
    2188:	15495100 	strbne	r5, [r9, #-256]	; 0x100
    218c:	15720800 	ldrbne	r0, [r2, #-2048]!	; 0x800
    2190:	00010800 	andeq	r0, r1, r0, lsl #16
    2194:	00157256 	andseq	r7, r5, r6, asr r2
    2198:	00157b08 	andseq	r7, r5, r8, lsl #22
    219c:	51000108 	tstpl	r0, r8, lsl #2
    21a0:	0800157b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r8, sl, ip}
    21a4:	080015a2 	stmdaeq	r0, {r1, r5, r7, r8, sl, ip}
    21a8:	00560001 	subseq	r0, r6, r1
    21ac:	00000000 	andeq	r0, r0, r0
    21b0:	20000000 	andcs	r0, r0, r0
    21b4:	2f080015 	svccs	0x00080015
    21b8:	01080015 	tsteq	r8, r5, lsl r0
    21bc:	152f5200 	strne	r5, [pc, #-512]!	; 1fc4 <_Min_Stack_Size+0x1bc4>
    21c0:	15460800 	strbne	r0, [r6, #-2048]	; 0x800
    21c4:	00010800 	andeq	r0, r1, r0, lsl #16
    21c8:	00154655 	andseq	r4, r5, r5, asr r6
    21cc:	00154908 	andseq	r4, r5, r8, lsl #18
    21d0:	52000108 	andpl	r0, r0, #8, 2
    21d4:	08001549 	stmdaeq	r0, {r0, r3, r6, r8, sl, ip}
    21d8:	08001572 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, ip}
    21dc:	72550001 	subsvc	r0, r5, #1
    21e0:	7b080015 	blvc	20223c <_Min_Stack_Size+0x201e3c>
    21e4:	01080015 	tsteq	r8, r5, lsl r0
    21e8:	157b5200 	ldrbne	r5, [fp, #-512]!	; 0x200
    21ec:	15a20800 	strne	r0, [r2, #2048]!	; 0x800
    21f0:	00010800 	andeq	r0, r1, r0, lsl #16
    21f4:	00000055 	andeq	r0, r0, r5, asr r0
    21f8:	00000000 	andeq	r0, r0, r0
    21fc:	00153c00 	andseq	r3, r5, r0, lsl #24
    2200:	00154108 	andseq	r4, r5, r8, lsl #2
    2204:	53000108 	movwpl	r0, #264	; 0x108
    2208:	08001541 	stmdaeq	r0, {r0, r6, r8, sl, ip}
    220c:	08001546 	stmdaeq	r0, {r1, r2, r6, r8, sl, ip}
    2210:	6a540001 	bvs	150221c <_Min_Stack_Size+0x1501e1c>
    2214:	72080015 	andvc	r0, r8, #21
    2218:	01080015 	tsteq	r8, r5, lsl r0
    221c:	159a5400 	ldrne	r5, [sl, #1024]	; 0x400
    2220:	15a20800 	strne	r0, [r2, #2048]!	; 0x800
    2224:	00010800 	andeq	r0, r1, r0, lsl #16
    2228:	00000054 	andeq	r0, r0, r4, asr r0
    222c:	00000000 	andeq	r0, r0, r0
    2230:	00153800 	andseq	r3, r5, r0, lsl #16
    2234:	00154108 	andseq	r4, r5, r8, lsl #2
    2238:	50000108 	andpl	r0, r0, r8, lsl #2
    223c:	08001541 	stmdaeq	r0, {r0, r6, r8, sl, ip}
    2240:	08001546 	stmdaeq	r0, {r1, r2, r6, r8, sl, ip}
    2244:	4c570001 	mrrcmi	0, 0, r0, r7, cr1
    2248:	50080015 	andpl	r0, r8, r5, lsl r0
    224c:	01080015 	tsteq	r8, r5, lsl r0
    2250:	15505000 	ldrbne	r5, [r0, #-0]
    2254:	15720800 	ldrbne	r0, [r2, #-2048]!	; 0x800
    2258:	00010800 	andeq	r0, r1, r0, lsl #16
    225c:	00157e57 	andseq	r7, r5, r7, asr lr
    2260:	0015a208 	andseq	sl, r5, r8, lsl #4
    2264:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    2270:	080015a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip}
    2274:	080015b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, ip}
    2278:	b1500001 	cmplt	r0, r1
    227c:	c6080015 			; <UNDEFINED> instruction: 0xc6080015
    2280:	01080015 	tsteq	r8, r5, lsl r0
    2284:	15c65400 	strbne	r5, [r6, #1024]	; 0x400
    2288:	15c90800 	strbne	r0, [r9, #2048]	; 0x800
    228c:	00010800 	andeq	r0, r1, r0, lsl #16
    2290:	0015c950 	andseq	ip, r5, r0, asr r9
    2294:	0015e408 	andseq	lr, r5, r8, lsl #8
    2298:	54000108 	strpl	r0, [r0], #-264	; 0x108
    229c:	080015e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, ip}
    22a0:	080015ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, sl, ip}
    22a4:	ed500001 	ldcl	0, cr0, [r0, #-4]
    22a8:	f0080015 			; <UNDEFINED> instruction: 0xf0080015
    22ac:	01080015 	tsteq	r8, r5, lsl r0
    22b0:	00005400 	andeq	r5, r0, r0, lsl #8
    22b4:	00000000 	andeq	r0, r0, r0
    22b8:	15a40000 	strne	r0, [r4, #0]!
    22bc:	15b10800 	ldrne	r0, [r1, #2048]!	; 0x800
    22c0:	00010800 	andeq	r0, r1, r0, lsl #16
    22c4:	0015b151 	andseq	fp, r5, r1, asr r1
    22c8:	0015c608 	andseq	ip, r5, r8, lsl #12
    22cc:	56000108 	strpl	r0, [r0], -r8, lsl #2
    22d0:	080015c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sl, ip}
    22d4:	080015c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, sl, ip}
    22d8:	c9510001 	ldmdbgt	r1, {r0}^
    22dc:	d2080015 	andle	r0, r8, #21
    22e0:	01080015 	tsteq	r8, r5, lsl r0
    22e4:	15d25600 	ldrbne	r5, [r2, #1536]	; 0x600
    22e8:	15d70800 	ldrbne	r0, [r7, #2048]	; 0x800
    22ec:	00010800 	andeq	r0, r1, r0, lsl #16
    22f0:	0015d751 	andseq	sp, r5, r1, asr r7
    22f4:	0015e408 	andseq	lr, r5, r8, lsl #8
    22f8:	f3000408 	vshl.u8	d0, d8, d0
    22fc:	e49f5101 	ldr	r5, [pc], #257	; 2304 <_Min_Stack_Size+0x1f04>
    2300:	ed080015 	stc	0, cr0, [r8, #-84]	; 0xffffffac
    2304:	01080015 	tsteq	r8, r5, lsl r0
    2308:	15ed5100 	strbne	r5, [sp, #256]!	; 0x100
    230c:	15f00800 	ldrbne	r0, [r0, #2048]!	; 0x800
    2310:	00010800 	andeq	r0, r1, r0, lsl #16
    2314:	00000056 	andeq	r0, r0, r6, asr r0
    2318:	00000000 	andeq	r0, r0, r0
    231c:	0015bc00 	andseq	fp, r5, r0, lsl #24
    2320:	0015c608 	andseq	ip, r5, r8, lsl #12
    2324:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    2328:	080015dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, ip}
    232c:	080015e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, ip}
    2330:	00550001 	subseq	r0, r5, r1
    2334:	00000000 	andeq	r0, r0, r0
    2338:	ba000000 	blt	2340 <_Min_Stack_Size+0x1f40>
    233c:	c1080015 	tstgt	r8, r5, lsl r0
    2340:	01080015 	tsteq	r8, r5, lsl r0
    2344:	15c15000 	strbne	r5, [r1]
    2348:	15c60800 	strbne	r0, [r6, #2048]	; 0x800
    234c:	00010800 	andeq	r0, r1, r0, lsl #16
    2350:	0015cc57 	andseq	ip, r5, r7, asr ip
    2354:	0015d008 	andseq	sp, r5, r8
    2358:	50000108 	andpl	r0, r0, r8, lsl #2
    235c:	080015d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, ip}
    2360:	080015e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, ip}
    2364:	00570001 	subseq	r0, r7, r1
    2368:	00000000 	andeq	r0, r0, r0
    236c:	d2000000 	andle	r0, r0, #0
    2370:	e4080015 	str	r0, [r8], #-21
    2374:	01080015 	tsteq	r8, r5, lsl r0
    2378:	00005600 	andeq	r5, r0, r0, lsl #12
    237c:	00000000 	andeq	r0, r0, r0
    2380:	15f00000 	ldrbne	r0, [r0, #0]!
    2384:	15f90800 	ldrbne	r0, [r9, #2048]!	; 0x800
    2388:	00010800 	andeq	r0, r1, r0, lsl #16
    238c:	0015f950 	andseq	pc, r5, r0, asr r9	; <UNPREDICTABLE>
    2390:	0015fc08 	andseq	pc, r5, r8, lsl #24
    2394:	54000108 	strpl	r0, [r0], #-264	; 0x108
    2398:	080015fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, ip}
    239c:	08001604 	stmdaeq	r0, {r2, r9, sl, ip}
    23a0:	01f30004 	mvnseq	r0, r4
    23a4:	16049f50 			; <UNDEFINED> instruction: 0x16049f50
    23a8:	16070800 	strne	r0, [r7], -r0, lsl #16
    23ac:	00010800 	andeq	r0, r1, r0, lsl #16
    23b0:	00160750 	andseq	r0, r6, r0, asr r7
    23b4:	00160a08 	andseq	r0, r6, r8, lsl #20
    23b8:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    23c4:	080015fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, ip}
    23c8:	08001604 	stmdaeq	r0, {r2, r9, sl, ip}
    23cc:	00540001 	subseq	r0, r4, r1
    23d0:	00000000 	andeq	r0, r0, r0
    23d4:	0c000000 	stceq	0, cr0, [r0], {-0}
    23d8:	15080016 	strne	r0, [r8, #-22]
    23dc:	01080016 	tsteq	r8, r6, lsl r0
    23e0:	16155000 	ldrne	r5, [r5], -r0
    23e4:	161a0800 	ldrne	r0, [sl], -r0, lsl #16
    23e8:	00010800 	andeq	r0, r1, r0, lsl #16
    23ec:	00161a54 	andseq	r1, r6, r4, asr sl
    23f0:	00162408 	andseq	r2, r6, r8, lsl #8
    23f4:	f3000408 	vshl.u8	d0, d8, d0
    23f8:	249f5001 	ldrcs	r5, [pc], #1	; 2400 <_Min_Stack_Size+0x2000>
    23fc:	27080016 	smladcs	r8, r6, r0, r0
    2400:	01080016 	tsteq	r8, r6, lsl r0
    2404:	16275000 	strtne	r5, [r7], -r0
    2408:	162a0800 	strtne	r0, [sl], -r0, lsl #16
    240c:	00010800 	andeq	r0, r1, r0, lsl #16
    2410:	00000054 	andeq	r0, r0, r4, asr r0
    2414:	00000000 	andeq	r0, r0, r0
    2418:	00161c00 	andseq	r1, r6, r0, lsl #24
    241c:	00162408 	andseq	r2, r6, r8, lsl #8
    2420:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    242c:	0800162c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip}
    2430:	08001632 	stmdaeq	r0, {r1, r4, r5, r9, sl, ip}
    2434:	32500001 	subscc	r0, r0, #1
    2438:	34080016 	strcc	r0, [r8], #-22
    243c:	04080016 	streq	r0, [r8], #-22
    2440:	5001f300 	andpl	pc, r1, r0, lsl #6
    2444:	0016349f 	mulseq	r6, pc, r4	; <UNPREDICTABLE>
    2448:	00163708 	andseq	r3, r6, r8, lsl #14
    244c:	50000108 	andpl	r0, r0, r8, lsl #2
    2450:	08001637 	stmdaeq	r0, {r0, r1, r2, r4, r5, r9, sl, ip}
    2454:	0800163a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl, ip}
    2458:	01f30004 	mvnseq	r0, r4
    245c:	00009f50 	andeq	r9, r0, r0, asr pc
    2460:	00000000 	andeq	r0, r0, r0
    2464:	16320000 	ldrtne	r0, [r2], -r0
    2468:	16340800 	ldrtne	r0, [r4], -r0, lsl #16
    246c:	00010800 	andeq	r0, r1, r0, lsl #16
    2470:	00000050 	andeq	r0, r0, r0, asr r0
    2474:	00000000 	andeq	r0, r0, r0
    2478:	00163c00 	andseq	r3, r6, r0, lsl #24
    247c:	00167a08 	andseq	r7, r6, r8, lsl #20
    2480:	50000108 	andpl	r0, r0, r8, lsl #2
    2484:	0800167a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, sl, ip}
    2488:	08001686 	stmdaeq	r0, {r1, r2, r7, r9, sl, ip}
    248c:	86540001 	ldrbhi	r0, [r4], -r1
    2490:	89080016 	stmdbhi	r8, {r1, r2, r4}
    2494:	01080016 	tsteq	r8, r6, lsl r0
    2498:	16895000 	strne	r5, [r9], r0
    249c:	168a0800 	strne	r0, [sl], r0, lsl #16
    24a0:	00040800 	andeq	r0, r4, r0, lsl #16
    24a4:	9f5001f3 	svcls	0x005001f3
    24a8:	0800168a 	stmdaeq	r0, {r1, r3, r7, r9, sl, ip}
    24ac:	080016a1 	stmdaeq	r0, {r0, r5, r7, r9, sl, ip}
    24b0:	a1500001 	cmpge	r0, r1
    24b4:	a4080016 	strge	r0, [r8], #-22
    24b8:	01080016 	tsteq	r8, r6, lsl r0
    24bc:	16a45400 	strtne	r5, [r4], r0, lsl #8
    24c0:	16d00800 	ldrbne	r0, [r0], r0, lsl #16
    24c4:	00010800 	andeq	r0, r1, r0, lsl #16
    24c8:	00000050 	andeq	r0, r0, r0, asr r0
    24cc:	00000000 	andeq	r0, r0, r0
    24d0:	00164200 	andseq	r4, r6, r0, lsl #4
    24d4:	00164a08 	andseq	r4, r6, r8, lsl #20
    24d8:	30000208 	andcc	r0, r0, r8, lsl #4
    24dc:	00164a9f 	mulseq	r6, pc, sl	; <UNPREDICTABLE>
    24e0:	00165008 	andseq	r5, r6, r8
    24e4:	31000208 	tstcc	r0, r8, lsl #4
    24e8:	0016509f 	mulseq	r6, pc, r0	; <UNPREDICTABLE>
    24ec:	00165608 	andseq	r5, r6, r8, lsl #12
    24f0:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    24f4:	0016569f 	mulseq	r6, pc, r6	; <UNPREDICTABLE>
    24f8:	00165c08 	andseq	r5, r6, r8, lsl #24
    24fc:	33000208 	movwcc	r0, #520	; 0x208
    2500:	00165c9f 	mulseq	r6, pc, ip	; <UNPREDICTABLE>
    2504:	00166208 	andseq	r6, r6, r8, lsl #4
    2508:	34000208 	strcc	r0, [r0], #-520	; 0x208
    250c:	0016629f 	mulseq	r6, pc, r2	; <UNPREDICTABLE>
    2510:	00166808 	andseq	r6, r6, r8, lsl #16
    2514:	35000208 	strcc	r0, [r0, #-520]	; 0x208
    2518:	0016689f 	mulseq	r6, pc, r8	; <UNPREDICTABLE>
    251c:	00166e08 	andseq	r6, r6, r8, lsl #28
    2520:	36000208 	strcc	r0, [r0], -r8, lsl #4
    2524:	00166e9f 	mulseq	r6, pc, lr	; <UNPREDICTABLE>
    2528:	00167808 	andseq	r7, r6, r8, lsl #16
    252c:	37000208 	strcc	r0, [r0, -r8, lsl #4]
    2530:	00168a9f 	mulseq	r6, pc, sl	; <UNPREDICTABLE>
    2534:	00168c08 	andseq	r8, r6, r8, lsl #24
    2538:	36000208 	strcc	r0, [r0], -r8, lsl #4
    253c:	0016949f 	mulseq	r6, pc, r4	; <UNPREDICTABLE>
    2540:	00169e08 	andseq	r9, r6, r8, lsl #28
    2544:	33000208 	movwcc	r0, #520	; 0x208
    2548:	0016a49f 	mulseq	r6, pc, r4	; <UNPREDICTABLE>
    254c:	0016ae08 	andseq	sl, r6, r8, lsl #28
    2550:	30000208 	andcc	r0, r0, r8, lsl #4
    2554:	0016ae9f 	mulseq	r6, pc, lr	; <UNPREDICTABLE>
    2558:	0016b808 	andseq	fp, r6, r8, lsl #16
    255c:	31000208 	tstcc	r0, r8, lsl #4
    2560:	0016b89f 	mulseq	r6, pc, r8	; <UNPREDICTABLE>
    2564:	0016c208 	andseq	ip, r6, r8, lsl #4
    2568:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    256c:	0016c29f 	mulseq	r6, pc, r2	; <UNPREDICTABLE>
    2570:	0016c608 	andseq	ip, r6, r8, lsl #12
    2574:	35000208 	strcc	r0, [r0, #-520]	; 0x208
    2578:	0016c69f 	mulseq	r6, pc, r6	; <UNPREDICTABLE>
    257c:	0016d008 	andseq	sp, r6, r8
    2580:	34000208 	strcc	r0, [r0], #-520	; 0x208
    2584:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2588:	00000000 	andeq	r0, r0, r0
    258c:	0016d000 	andseq	sp, r6, r0
    2590:	0016d208 	andseq	sp, r6, r8, lsl #4
    2594:	50000108 	andpl	r0, r0, r8, lsl #2
    2598:	080016d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sl, ip}
    259c:	080016d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, ip}
    25a0:	01f30004 	mvnseq	r0, r4
    25a4:	00009f50 	andeq	r9, r0, r0, asr pc
    25a8:	00000000 	andeq	r0, r0, r0
    25ac:	16d80000 	ldrbne	r0, [r8], r0
    25b0:	16dc0800 	ldrbne	r0, [ip], r0, lsl #16
    25b4:	00010800 	andeq	r0, r1, r0, lsl #16
    25b8:	0016dc50 	andseq	sp, r6, r0, asr ip
    25bc:	0016de08 	andseq	sp, r6, r8, lsl #28
    25c0:	f3000408 	vshl.u8	d0, d8, d0
    25c4:	009f5001 	addseq	r5, pc, r1
    25c8:	00000000 	andeq	r0, r0, r0
    25cc:	e0000000 	and	r0, r0, r0
    25d0:	e6080016 			; <UNDEFINED> instruction: 0xe6080016
    25d4:	01080016 	tsteq	r8, r6, lsl r0
    25d8:	16e65000 	strbtne	r5, [r6], r0
    25dc:	16f00800 	ldrbtne	r0, [r0], r0, lsl #16
    25e0:	00040800 	andeq	r0, r4, r0, lsl #16
    25e4:	9f5001f3 	svcls	0x005001f3
    25e8:	080016f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, ip}
    25ec:	080016f3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r9, sl, ip}
    25f0:	f3500001 	vhadd.u16	d16, d0, d1
    25f4:	f6080016 			; <UNDEFINED> instruction: 0xf6080016
    25f8:	04080016 	streq	r0, [r8], #-22
    25fc:	5001f300 	andpl	pc, r1, r0, lsl #6
    2600:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2604:	00000000 	andeq	r0, r0, r0
    2608:	0016e600 	andseq	lr, r6, r0, lsl #12
    260c:	0016ea08 	andseq	lr, r6, r8, lsl #20
    2610:	70000808 	andvc	r0, r0, r8, lsl #16
    2614:	08293000 	stmdaeq	r9!, {ip, sp}
    2618:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    261c:	00000000 	andeq	r0, r0, r0
    2620:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    2624:	00080016 	andeq	r0, r8, r6, lsl r0
    2628:	01080017 	tsteq	r8, r7, lsl r0
    262c:	17005000 	strne	r5, [r0, -r0]
    2630:	17080800 	strne	r0, [r8, -r0, lsl #16]
    2634:	00040800 	andeq	r0, r4, r0, lsl #16
    2638:	9f5001f3 	svcls	0x005001f3
    263c:	08001708 	stmdaeq	r0, {r3, r8, r9, sl, ip}
    2640:	0800170b 	stmdaeq	r0, {r0, r1, r3, r8, r9, sl, ip}
    2644:	0b500001 	bleq	1402650 <_Min_Stack_Size+0x1402250>
    2648:	0e080017 	mcreq	0, 0, r0, cr8, cr7, {0}
    264c:	04080017 	streq	r0, [r8], #-23
    2650:	5001f300 	andpl	pc, r1, r0, lsl #6
    2654:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2658:	00000000 	andeq	r0, r0, r0
    265c:	0016fe00 	andseq	pc, r6, r0, lsl #28
    2660:	00170008 	andseq	r0, r7, r8
    2664:	72000a08 	andvc	r0, r0, #8, 20	; 0x8000
    2668:	063c7000 	ldrteq	r7, [ip], -r0
    266c:	1aff0829 	bne	fffc4718 <_estack+0xdff94718>
    2670:	0017009f 	mulseq	r7, pc, r0	; <UNPREDICTABLE>
    2674:	00170408 	andseq	r0, r7, r8, lsl #8
    2678:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    267c:	29007000 	stmdbcs	r0, {ip, sp, lr}
    2680:	9f1aff08 	svcls	0x001aff08
    2684:	08001704 	stmdaeq	r0, {r2, r8, r9, sl, ip}
    2688:	08001708 	stmdaeq	r0, {r3, r8, r9, sl, ip}
    268c:	0072000d 	rsbseq	r0, r2, sp
    2690:	235001f3 	cmpcs	r0, #-1073741764	; 0xc000003c
    2694:	0829063c 	stmdaeq	r9!, {r2, r3, r4, r5, r9, sl}
    2698:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    269c:	00000000 	andeq	r0, r0, r0
    26a0:	10000000 	andne	r0, r0, r0
    26a4:	18080017 	stmdane	r8, {r0, r1, r2, r4}
    26a8:	02080017 	andeq	r0, r8, #23
    26ac:	189f3000 	ldmne	pc, {ip, sp}	; <UNPREDICTABLE>
    26b0:	1c080017 	stcne	0, cr0, [r8], {23}
    26b4:	02080017 	andeq	r0, r8, #23
    26b8:	1c9f3100 	ldfnes	f3, [pc], {0}
    26bc:	20080017 	andcs	r0, r8, r7, lsl r0
    26c0:	02080017 	andeq	r0, r8, #23
    26c4:	209f3200 	addscs	r3, pc, r0, lsl #4
    26c8:	24080017 	strcs	r0, [r8], #-23
    26cc:	02080017 	andeq	r0, r8, #23
    26d0:	249f3300 	ldrcs	r3, [pc], #768	; 26d8 <_Min_Stack_Size+0x22d8>
    26d4:	28080017 	stmdacs	r8, {r0, r1, r2, r4}
    26d8:	02080017 	andeq	r0, r8, #23
    26dc:	289f3400 	ldmcs	pc, {sl, ip, sp}	; <UNPREDICTABLE>
    26e0:	2c080017 	stccs	0, cr0, [r8], {23}
    26e4:	02080017 	andeq	r0, r8, #23
    26e8:	2c9f3500 	cfldr32cs	mvfx3, [pc], {0}
    26ec:	30080017 	andcc	r0, r8, r7, lsl r0
    26f0:	02080017 	andeq	r0, r8, #23
    26f4:	309f3600 	addscc	r3, pc, r0, lsl #12
    26f8:	3a080017 	bcc	20275c <_Min_Stack_Size+0x20235c>
    26fc:	02080017 	andeq	r0, r8, #23
    2700:	3a9f3700 	bcc	fe7d0308 <_estack+0xde7a0308>
    2704:	3c080017 	stccc	0, cr0, [r8], {23}
    2708:	02080017 	andeq	r0, r8, #23
    270c:	4c9f3600 	ldcmi	6, cr3, [pc], {0}
    2710:	50080017 	andpl	r0, r8, r7, lsl r0
    2714:	02080017 	andeq	r0, r8, #23
    2718:	509f3100 	addspl	r3, pc, r0, lsl #2
    271c:	54080017 	strpl	r0, [r8], #-23
    2720:	02080017 	andeq	r0, r8, #23
    2724:	549f3200 	ldrpl	r3, [pc], #512	; 272c <_Min_Stack_Size+0x232c>
    2728:	58080017 	stmdapl	r8, {r0, r1, r2, r4}
    272c:	02080017 	andeq	r0, r8, #23
    2730:	589f3300 	ldmpl	pc, {r8, r9, ip, sp}	; <UNPREDICTABLE>
    2734:	5c080017 	stcpl	0, cr0, [r8], {23}
    2738:	02080017 	andeq	r0, r8, #23
    273c:	5c9f3400 	cfldrspl	mvf3, [pc], {0}
    2740:	60080017 	andvs	r0, r8, r7, lsl r0
    2744:	02080017 	andeq	r0, r8, #23
    2748:	609f3500 	addsvs	r3, pc, r0, lsl #10
    274c:	68080017 	stmdavs	r8, {r0, r1, r2, r4}
    2750:	02080017 	andeq	r0, r8, #23
    2754:	009f3700 	addseq	r3, pc, r0, lsl #14
    2758:	00000000 	andeq	r0, r0, r0
    275c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    2760:	70080017 	andvc	r0, r8, r7, lsl r0
    2764:	02080017 	andeq	r0, r8, #23
    2768:	709f3000 	addsvc	r3, pc, r0
    276c:	76080017 			; <UNDEFINED> instruction: 0x76080017
    2770:	02080017 	andeq	r0, r8, #23
    2774:	769f3100 	ldrvc	r3, [pc], r0, lsl #2
    2778:	7c080017 	stcvc	0, cr0, [r8], {23}
    277c:	02080017 	andeq	r0, r8, #23
    2780:	7c9f3200 	lfmvc	f3, 4, [pc], {0}
    2784:	82080017 	andhi	r0, r8, #23
    2788:	02080017 	andeq	r0, r8, #23
    278c:	829f3300 	addshi	r3, pc, #0, 6
    2790:	88080017 	stmdahi	r8, {r0, r1, r2, r4}
    2794:	02080017 	andeq	r0, r8, #23
    2798:	889f3400 	ldmhi	pc, {sl, ip, sp}	; <UNPREDICTABLE>
    279c:	8e080017 	mcrhi	0, 0, r0, cr8, cr7, {0}
    27a0:	02080017 	andeq	r0, r8, #23
    27a4:	8e9f3500 	cdphi	5, 9, cr3, cr15, cr0, {0}
    27a8:	94080017 	strls	r0, [r8], #-23
    27ac:	02080017 	andeq	r0, r8, #23
    27b0:	949f3600 	ldrls	r3, [pc], #1536	; 27b8 <_Min_Stack_Size+0x23b8>
    27b4:	a0080017 	andge	r0, r8, r7, lsl r0
    27b8:	02080017 	andeq	r0, r8, #23
    27bc:	a09f3700 	addsge	r3, pc, r0, lsl #14
    27c0:	a2080017 	andge	r0, r8, #23
    27c4:	02080017 	andeq	r0, r8, #23
    27c8:	aa9f3600 	bge	fe7cffd0 <_estack+0xde79ffd0>
    27cc:	ae080017 	mcrge	0, 0, r0, cr8, cr7, {0}
    27d0:	02080017 	andeq	r0, r8, #23
    27d4:	ae9f3000 	cdpge	0, 9, cr3, cr15, cr0, {0}
    27d8:	b2080017 	andlt	r0, r8, #23
    27dc:	02080017 	andeq	r0, r8, #23
    27e0:	b29f3100 	addslt	r3, pc, #0, 2
    27e4:	b6080017 			; <UNDEFINED> instruction: 0xb6080017
    27e8:	02080017 	andeq	r0, r8, #23
    27ec:	b69f3200 	ldrlt	r3, [pc], r0, lsl #4
    27f0:	ba080017 	blt	202854 <_Min_Stack_Size+0x202454>
    27f4:	02080017 	andeq	r0, r8, #23
    27f8:	ba9f3300 	blt	fe7cf400 <_estack+0xde79f400>
    27fc:	be080017 	mcrlt	0, 0, r0, cr8, cr7, {0}
    2800:	02080017 	andeq	r0, r8, #23
    2804:	be9f3400 	cdplt	4, 9, cr3, cr15, cr0, {0}
    2808:	c8080017 	stmdagt	r8, {r0, r1, r2, r4}
    280c:	02080017 	andeq	r0, r8, #23
    2810:	009f3500 	addseq	r3, pc, r0, lsl #10
    2814:	00000000 	andeq	r0, r0, r0
    2818:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    281c:	d1080017 	tstle	r8, r7, lsl r0
    2820:	01080017 	tsteq	r8, r7, lsl r0
    2824:	17d15000 	ldrbne	r5, [r1, r0]
    2828:	18740800 	ldmdane	r4!, {fp}^
    282c:	00010800 	andeq	r0, r1, r0, lsl #16
    2830:	00187454 	andseq	r7, r8, r4, asr r4
    2834:	00187808 	andseq	r7, r8, r8, lsl #16
    2838:	f3000408 	vshl.u8	d0, d8, d0
    283c:	009f5001 	addseq	r5, pc, r1
    2840:	00000000 	andeq	r0, r0, r0
    2844:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    2848:	d1080017 	tstle	r8, r7, lsl r0
    284c:	01080017 	tsteq	r8, r7, lsl r0
    2850:	17d15100 	ldrbne	r5, [r1, r0, lsl #2]
    2854:	180a0800 	stmdane	sl, {fp}
    2858:	00010800 	andeq	r0, r1, r0, lsl #16
    285c:	00180a55 	andseq	r0, r8, r5, asr sl
    2860:	00187808 	andseq	r7, r8, r8, lsl #16
    2864:	f3000408 	vshl.u8	d0, d8, d0
    2868:	009f5101 	addseq	r5, pc, r1, lsl #2
    286c:	00000000 	andeq	r0, r0, r0
    2870:	cc000000 	stcgt	0, cr0, [r0], {-0}
    2874:	d1080017 	tstle	r8, r7, lsl r0
    2878:	01080017 	tsteq	r8, r7, lsl r0
    287c:	17d15000 	ldrbne	r5, [r1, r0]
    2880:	18740800 	ldmdane	r4!, {fp}^
    2884:	00010800 	andeq	r0, r1, r0, lsl #16
    2888:	00187454 	andseq	r7, r8, r4, asr r4
    288c:	00187808 	andseq	r7, r8, r8, lsl #16
    2890:	f3000408 	vshl.u8	d0, d8, d0
    2894:	009f5001 	addseq	r5, pc, r1
    2898:	00000000 	andeq	r0, r0, r0
    289c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    28a0:	74080017 	strvc	r0, [r8], #-23
    28a4:	01080018 	tsteq	r8, r8, lsl r0
    28a8:	18745400 	ldmdane	r4!, {sl, ip, lr}^
    28ac:	18780800 	ldmdane	r8!, {fp}^
    28b0:	00040800 	andeq	r0, r4, r0, lsl #16
    28b4:	9f5001f3 	svcls	0x005001f3
	...
    28c0:	08001878 	stmdaeq	r0, {r3, r4, r5, r6, fp, ip}
    28c4:	0800187e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, fp, ip}
    28c8:	9f300002 	svcls	0x00300002
	...
    28d4:	080018d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, ip}
    28d8:	080018f7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, fp, ip}
    28dc:	f7500001 			; <UNDEFINED> instruction: 0xf7500001
    28e0:	fa080018 	blx	202948 <_Min_Stack_Size+0x202548>
    28e4:	01080018 	tsteq	r8, r8, lsl r0
    28e8:	18fa5700 	ldmne	sl!, {r8, r9, sl, ip, lr}^
    28ec:	18fc0800 	ldmne	ip!, {fp}^
    28f0:	00010800 	andeq	r0, r1, r0, lsl #16
    28f4:	0018fc50 	andseq	pc, r8, r0, asr ip	; <UNPREDICTABLE>
    28f8:	0019da08 	andseq	sp, r9, r8, lsl #20
    28fc:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    2900:	080019da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp, ip}
    2904:	08001a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, ip}
    2908:	01f30004 	mvnseq	r0, r4
    290c:	1a269f50 	bne	9aa654 <_Min_Stack_Size+0x9aa254>
    2910:	1a290800 	bne	a44918 <_Min_Stack_Size+0xa44518>
    2914:	00010800 	andeq	r0, r1, r0, lsl #16
    2918:	001a2950 	andseq	r2, sl, r0, asr r9
    291c:	001a2c08 	andseq	r2, sl, r8, lsl #24
    2920:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    2924:	08001a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, ip}
    2928:	08001a36 	stmdaeq	r0, {r1, r2, r4, r5, r9, fp, ip}
    292c:	01f30004 	mvnseq	r0, r4
    2930:	1a369f50 	bne	daa678 <_Min_Stack_Size+0xdaa278>
    2934:	1a440800 	bne	110493c <_Min_Stack_Size+0x110453c>
    2938:	00010800 	andeq	r0, r1, r0, lsl #16
    293c:	001a4457 	andseq	r4, sl, r7, asr r4
    2940:	001a4608 	andseq	r4, sl, r8, lsl #12
    2944:	f3000408 	vshl.u8	d0, d8, d0
    2948:	469f5001 	ldrmi	r5, [pc], r1
    294c:	6608001a 			; <UNDEFINED> instruction: 0x6608001a
    2950:	0108001a 	tsteq	r8, sl, lsl r0
    2954:	1a665700 	bne	199855c <_Min_Stack_Size+0x199815c>
    2958:	1a800800 	bne	fe004960 <_estack+0xddfd4960>
    295c:	00040800 	andeq	r0, r4, r0, lsl #16
    2960:	9f5001f3 	svcls	0x005001f3
	...
    296c:	080018d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, ip}
    2970:	080018f7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, fp, ip}
    2974:	f7510001 			; <UNDEFINED> instruction: 0xf7510001
    2978:	fa080018 	blx	2029e0 <_Min_Stack_Size+0x2025e0>
    297c:	01080018 	tsteq	r8, r8, lsl r0
    2980:	18fa5500 	ldmne	sl!, {r8, sl, ip, lr}^
    2984:	18ff0800 	ldmne	pc!, {fp}^	; <UNPREDICTABLE>
    2988:	00010800 	andeq	r0, r1, r0, lsl #16
    298c:	0018ff51 	andseq	pc, r8, r1, asr pc	; <UNPREDICTABLE>
    2990:	0019ce08 	andseq	ip, r9, r8, lsl #28
    2994:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    2998:	080019ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, fp, ip}
    299c:	08001a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, ip}
    29a0:	01f30004 	mvnseq	r0, r4
    29a4:	1a269f51 	bne	9aa6f0 <_Min_Stack_Size+0x9aa2f0>
    29a8:	1a290800 	bne	a449b0 <_Min_Stack_Size+0xa445b0>
    29ac:	00010800 	andeq	r0, r1, r0, lsl #16
    29b0:	001a2951 	andseq	r2, sl, r1, asr r9
    29b4:	001a2c08 	andseq	r2, sl, r8, lsl #24
    29b8:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    29bc:	08001a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, ip}
    29c0:	08001a46 	stmdaeq	r0, {r1, r2, r6, r9, fp, ip}
    29c4:	01f30004 	mvnseq	r0, r4
    29c8:	1a469f51 	bne	11aa714 <_Min_Stack_Size+0x11aa314>
    29cc:	1a660800 	bne	19849d4 <_Min_Stack_Size+0x19845d4>
    29d0:	00010800 	andeq	r0, r1, r0, lsl #16
    29d4:	001a6655 	andseq	r6, sl, r5, asr r6
    29d8:	001a8008 	andseq	r8, sl, r8
    29dc:	f3000408 	vshl.u8	d0, d8, d0
    29e0:	009f5101 	addseq	r5, pc, r1, lsl #2
    29e4:	00000000 	andeq	r0, r0, r0
    29e8:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    29ec:	f7080018 			; <UNDEFINED> instruction: 0xf7080018
    29f0:	01080018 	tsteq	r8, r8, lsl r0
    29f4:	18f75200 	ldmne	r7!, {r9, ip, lr}^
    29f8:	18fa0800 	ldmne	sl!, {fp}^
    29fc:	00040800 	andeq	r0, r4, r0, lsl #16
    2a00:	9f5201f3 	svcls	0x005201f3
    2a04:	080018fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, fp, ip}
    2a08:	080018ff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, fp, ip}
    2a0c:	ff520001 			; <UNDEFINED> instruction: 0xff520001
    2a10:	26080018 			; <UNDEFINED> instruction: 0x26080018
    2a14:	0408001a 	streq	r0, [r8], #-26
    2a18:	5201f300 	andpl	pc, r1, #0, 6
    2a1c:	001a269f 	mulseq	sl, pc, r6	; <UNPREDICTABLE>
    2a20:	001a2908 	andseq	r2, sl, r8, lsl #18
    2a24:	52000108 	andpl	r0, r0, #8, 2
    2a28:	08001a29 	stmdaeq	r0, {r0, r3, r5, r9, fp, ip}
    2a2c:	08001a80 	stmdaeq	r0, {r7, r9, fp, ip}
    2a30:	01f30004 	mvnseq	r0, r4
    2a34:	00009f52 	andeq	r9, r0, r2, asr pc
    2a38:	00000000 	andeq	r0, r0, r0
    2a3c:	18d80000 	ldmne	r8, {}^	; <UNPREDICTABLE>
    2a40:	18f70800 	ldmne	r7!, {fp}^
    2a44:	00010800 	andeq	r0, r1, r0, lsl #16
    2a48:	0018f753 	andseq	pc, r8, r3, asr r7	; <UNPREDICTABLE>
    2a4c:	0018fa08 	andseq	pc, r8, r8, lsl #20
    2a50:	5a000108 	bpl	2e78 <_Min_Stack_Size+0x2a78>
    2a54:	080018fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, fp, ip}
    2a58:	080018ff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, fp, ip}
    2a5c:	ff530001 			; <UNDEFINED> instruction: 0xff530001
    2a60:	26080018 			; <UNDEFINED> instruction: 0x26080018
    2a64:	0108001a 	tsteq	r8, sl, lsl r0
    2a68:	1a265a00 	bne	999270 <_Min_Stack_Size+0x998e70>
    2a6c:	1a290800 	bne	a44a74 <_Min_Stack_Size+0xa44674>
    2a70:	00010800 	andeq	r0, r1, r0, lsl #16
    2a74:	001a2953 	andseq	r2, sl, r3, asr r9
    2a78:	001a6608 	andseq	r6, sl, r8, lsl #12
    2a7c:	5a000108 	bpl	2ea4 <_Min_Stack_Size+0x2aa4>
    2a80:	08001a66 	stmdaeq	r0, {r1, r2, r5, r6, r9, fp, ip}
    2a84:	08001a80 	stmdaeq	r0, {r7, r9, fp, ip}
    2a88:	01f30004 	mvnseq	r0, r4
    2a8c:	00009f53 	andeq	r9, r0, r3, asr pc
    2a90:	00000000 	andeq	r0, r0, r0
    2a94:	18d80000 	ldmne	r8, {}^	; <UNPREDICTABLE>
    2a98:	18de0800 	ldmne	lr, {fp}^
    2a9c:	00020800 	andeq	r0, r2, r0, lsl #16
    2aa0:	18de0091 	ldmne	lr, {r0, r4, r7}^
    2aa4:	18ea0800 	stmiane	sl!, {fp}^
    2aa8:	00020800 	andeq	r0, r2, r0, lsl #16
    2aac:	18ea0076 	stmiane	sl!, {r1, r2, r4, r5, r6}^
    2ab0:	1a660800 	bne	1984ab8 <_Min_Stack_Size+0x19846b8>
    2ab4:	00020800 	andeq	r0, r2, r0, lsl #16
    2ab8:	1a66287d 	bne	198ccb4 <_Min_Stack_Size+0x198c8b4>
    2abc:	1a800800 	bne	fe004ac4 <_estack+0xddfd4ac4>
    2ac0:	00020800 	andeq	r0, r2, r0, lsl #16
    2ac4:	0000007d 	andeq	r0, r0, sp, ror r0
    2ac8:	00000000 	andeq	r0, r0, r0
    2acc:	18d80000 	ldmne	r8, {}^	; <UNPREDICTABLE>
    2ad0:	18de0800 	ldmne	lr, {fp}^
    2ad4:	00020800 	andeq	r0, r2, r0, lsl #16
    2ad8:	18de0491 	ldmne	lr, {r0, r4, r7, sl}^
    2adc:	18ea0800 	stmiane	sl!, {fp}^
    2ae0:	00020800 	andeq	r0, r2, r0, lsl #16
    2ae4:	18ea0476 	stmiane	sl!, {r1, r2, r4, r5, r6, sl}^
    2ae8:	1a660800 	bne	1984af0 <_Min_Stack_Size+0x19846f0>
    2aec:	00020800 	andeq	r0, r2, r0, lsl #16
    2af0:	1a662c7d 	bne	198dcec <_Min_Stack_Size+0x198d8ec>
    2af4:	1a800800 	bne	fe004afc <_estack+0xddfd4afc>
    2af8:	00020800 	andeq	r0, r2, r0, lsl #16
    2afc:	0000047d 	andeq	r0, r0, sp, ror r4
    2b00:	00000000 	andeq	r0, r0, r0
    2b04:	18d80000 	ldmne	r8, {}^	; <UNPREDICTABLE>
    2b08:	18de0800 	ldmne	lr, {fp}^
    2b0c:	00020800 	andeq	r0, r2, r0, lsl #16
    2b10:	18de0891 	ldmne	lr, {r0, r4, r7, fp}^
    2b14:	18ea0800 	stmiane	sl!, {fp}^
    2b18:	00020800 	andeq	r0, r2, r0, lsl #16
    2b1c:	18ea0876 	stmiane	sl!, {r1, r2, r4, r5, r6, fp}^
    2b20:	1a660800 	bne	1984b28 <_Min_Stack_Size+0x1984728>
    2b24:	00020800 	andeq	r0, r2, r0, lsl #16
    2b28:	1a66307d 	bne	198ed24 <_Min_Stack_Size+0x198e924>
    2b2c:	1a800800 	bne	fe004b34 <_estack+0xddfd4b34>
    2b30:	00020800 	andeq	r0, r2, r0, lsl #16
    2b34:	0000087d 	andeq	r0, r0, sp, ror r8
    2b38:	00000000 	andeq	r0, r0, r0
    2b3c:	18d80000 	ldmne	r8, {}^	; <UNPREDICTABLE>
    2b40:	18de0800 	ldmne	lr, {fp}^
    2b44:	00020800 	andeq	r0, r2, r0, lsl #16
    2b48:	18de0c91 	ldmne	lr, {r0, r4, r7, sl, fp}^
    2b4c:	18ea0800 	stmiane	sl!, {fp}^
    2b50:	00020800 	andeq	r0, r2, r0, lsl #16
    2b54:	18ea0c76 	stmiane	sl!, {r1, r2, r4, r5, r6, sl, fp}^
    2b58:	1a660800 	bne	1984b60 <_Min_Stack_Size+0x1984760>
    2b5c:	00020800 	andeq	r0, r2, r0, lsl #16
    2b60:	1a66347d 	bne	198fd5c <_Min_Stack_Size+0x198f95c>
    2b64:	1a800800 	bne	fe004b6c <_estack+0xddfd4b6c>
    2b68:	00020800 	andeq	r0, r2, r0, lsl #16
    2b6c:	00000c7d 	andeq	r0, r0, sp, ror ip
    2b70:	00000000 	andeq	r0, r0, r0
    2b74:	1a100000 	bne	402b7c <_Min_Stack_Size+0x40277c>
    2b78:	1a260800 	bne	984b80 <_Min_Stack_Size+0x984780>
    2b7c:	00020800 	andeq	r0, r2, r0, lsl #16
    2b80:	1a2c9f31 	bne	b2a84c <_Min_Stack_Size+0xb2a44c>
    2b84:	1a360800 	bne	d84b8c <_Min_Stack_Size+0xd8478c>
    2b88:	00020800 	andeq	r0, r2, r0, lsl #16
    2b8c:	1a5e9f31 	bne	17aa858 <_Min_Stack_Size+0x17aa458>
    2b90:	1a800800 	bne	fe004b98 <_estack+0xddfd4b98>
    2b94:	00030800 	andeq	r0, r3, r0, lsl #16
    2b98:	009fff09 	addseq	pc, pc, r9, lsl #30
    2b9c:	00000000 	andeq	r0, r0, r0
    2ba0:	fa000000 	blx	2ba8 <_Min_Stack_Size+0x27a8>
    2ba4:	1a080018 	bne	202c0c <_Min_Stack_Size+0x20280c>
    2ba8:	01080019 	tsteq	r8, r9, lsl r0
    2bac:	191a5b00 	ldmdbne	sl, {r8, r9, fp, ip, lr}
    2bb0:	1a260800 	bne	984bb8 <_Min_Stack_Size+0x9847b8>
    2bb4:	00020800 	andeq	r0, r2, r0, lsl #16
    2bb8:	1a2c307d 	bne	b0edb4 <_Min_Stack_Size+0xb0e9b4>
    2bbc:	1a460800 	bne	1184bc4 <_Min_Stack_Size+0x11847c4>
    2bc0:	00020800 	andeq	r0, r2, r0, lsl #16
    2bc4:	1a46307d 	bne	118edc0 <_Min_Stack_Size+0x118e9c0>
    2bc8:	1a4a0800 	bne	1284bd0 <_Min_Stack_Size+0x12847d0>
    2bcc:	00010800 	andeq	r0, r1, r0, lsl #16
    2bd0:	001a4a5b 	andseq	r4, sl, fp, asr sl
    2bd4:	001a6608 	andseq	r6, sl, r8, lsl #12
    2bd8:	7d000208 	sfmvc	f0, 4, [r0, #-32]	; 0xffffffe0
    2bdc:	001a6630 	andseq	r6, sl, r0, lsr r6
    2be0:	001a8008 	andseq	r8, sl, r8
    2be4:	7d000208 	sfmvc	f0, 4, [r0, #-32]	; 0xffffffe0
    2be8:	00000008 	andeq	r0, r0, r8
    2bec:	00000000 	andeq	r0, r0, r0
    2bf0:	0018fa00 	andseq	pc, r8, r0, lsl #20
    2bf4:	0018ff08 	andseq	pc, r8, r8, lsl #30
    2bf8:	52000108 	andpl	r0, r0, #8, 2
    2bfc:	080018ff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, fp, ip}
    2c00:	0800192e 	stmdaeq	r0, {r1, r2, r3, r5, r8, fp, ip}
    2c04:	2e590001 	cdpcs	0, 5, cr0, cr9, cr1, {0}
    2c08:	32080019 	andcc	r0, r8, #25
    2c0c:	07080019 	smladeq	r8, r9, r0, r0
    2c10:	80807900 	addhi	r7, r0, r0, lsl #18
    2c14:	9f7c8080 	svcls	0x007c8080
    2c18:	08001932 	stmdaeq	r0, {r1, r4, r5, r8, fp, ip}
    2c1c:	08001990 	stmdaeq	r0, {r4, r7, r8, fp, ip}
    2c20:	81790007 	cmnhi	r9, r7
    2c24:	7c808080 	stcvc	0, cr8, [r0], {128}	; 0x80
    2c28:	001a469f 	mulseq	sl, pc, r6	; <UNPREDICTABLE>
    2c2c:	001a6608 	andseq	r6, sl, r8, lsl #12
    2c30:	59000108 	stmdbpl	r0, {r3, r8}
	...
    2c3c:	08001900 	stmdaeq	r0, {r8, fp, ip}
    2c40:	08001916 	stmdaeq	r0, {r1, r2, r4, r8, fp, ip}
    2c44:	16500001 	ldrbne	r0, [r0], -r1
    2c48:	26080019 			; <UNDEFINED> instruction: 0x26080019
    2c4c:	0108001a 	tsteq	r8, sl, lsl r0
    2c50:	1a2c5400 	bne	b17c58 <_Min_Stack_Size+0xb17858>
    2c54:	1a460800 	bne	1184c5c <_Min_Stack_Size+0x118485c>
    2c58:	00010800 	andeq	r0, r1, r0, lsl #16
    2c5c:	001a4654 	andseq	r4, sl, r4, asr r6
    2c60:	001a4c08 	andseq	r4, sl, r8, lsl #24
    2c64:	50000108 	andpl	r0, r0, r8, lsl #2
    2c68:	08001a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp, ip}
    2c6c:	08001a5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, fp, ip}
    2c70:	5e540001 	cdppl	0, 5, cr0, cr4, cr1, {0}
    2c74:	8008001a 	andhi	r0, r8, sl, lsl r0
    2c78:	0208001a 	andeq	r0, r8, #26
    2c7c:	009f3000 	addseq	r3, pc, r0
    2c80:	00000000 	andeq	r0, r0, r0
    2c84:	22000000 	andcs	r0, r0, #0
    2c88:	2e080019 	mcrcs	0, 0, r0, cr8, cr9, {0}
    2c8c:	0d080019 	stceq	0, cr0, [r8, #-100]	; 0xffffff9c
    2c90:	ffff7900 			; <UNDEFINED> instruction: 0xffff7900
    2c94:	3203ffff 	andcc	pc, r3, #1020	; 0x3fc
    2c98:	06307424 	ldrteq	r7, [r0], -r4, lsr #8
    2c9c:	192e9f22 	stmdbne	lr!, {r1, r5, r8, r9, sl, fp, ip, pc}
    2ca0:	19320800 	ldmdbne	r2!, {fp}
    2ca4:	00090800 	andeq	r0, r9, r0, lsl #16
    2ca8:	24327f79 	ldrtcs	r7, [r2], #-3961	; 0xf79
    2cac:	22063074 	andcs	r3, r6, #116	; 0x74
    2cb0:	0019329f 	mulseq	r9, pc, r2	; <UNPREDICTABLE>
    2cb4:	00193c08 	andseq	r3, r9, r8, lsl #24
    2cb8:	79000908 	stmdbvc	r0, {r3, r8, fp}
    2cbc:	74243200 	strtvc	r3, [r4], #-512	; 0x200
    2cc0:	9f220630 	svcls	0x00220630
    2cc4:	0800193c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip}
    2cc8:	08001a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, ip}
    2ccc:	2c5b0001 	mrrccs	0, 0, r0, fp, cr1
    2cd0:	4608001a 			; <UNDEFINED> instruction: 0x4608001a
    2cd4:	0108001a 	tsteq	r8, sl, lsl r0
    2cd8:	00005b00 	andeq	r5, r0, r0, lsl #22
    2cdc:	00000000 	andeq	r0, r0, r0
    2ce0:	193c0000 	ldmdbne	ip!, {}	; <UNPREDICTABLE>
    2ce4:	1a260800 	bne	984cec <_Min_Stack_Size+0x9848ec>
    2ce8:	00020800 	andeq	r0, r2, r0, lsl #16
    2cec:	1a2c347d 	bne	b0fee8 <_Min_Stack_Size+0xb0fae8>
    2cf0:	1a460800 	bne	1184cf8 <_Min_Stack_Size+0x11848f8>
    2cf4:	00020800 	andeq	r0, r2, r0, lsl #16
    2cf8:	0000347d 	andeq	r3, r0, sp, ror r4
    2cfc:	00000000 	andeq	r0, r0, r0
    2d00:	193c0000 	ldmdbne	ip!, {}	; <UNPREDICTABLE>
    2d04:	1a260800 	bne	984d0c <_Min_Stack_Size+0x98490c>
    2d08:	00040800 	andeq	r0, r4, r0, lsl #16
    2d0c:	9f5201f3 	svcls	0x005201f3
    2d10:	08001a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, ip}
    2d14:	08001a46 	stmdaeq	r0, {r1, r2, r6, r9, fp, ip}
    2d18:	01f30004 	mvnseq	r0, r4
    2d1c:	00009f52 	andeq	r9, r0, r2, asr pc
    2d20:	00000000 	andeq	r0, r0, r0
    2d24:	193c0000 	ldmdbne	ip!, {}	; <UNPREDICTABLE>
    2d28:	1a260800 	bne	984d30 <_Min_Stack_Size+0x984930>
    2d2c:	00010800 	andeq	r0, r1, r0, lsl #16
    2d30:	001a2c56 	andseq	r2, sl, r6, asr ip
    2d34:	001a4608 	andseq	r4, sl, r8, lsl #12
    2d38:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    2d44:	0800193c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, ip}
    2d48:	080019ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, fp, ip}
    2d4c:	ce550001 	cdpgt	0, 5, cr0, cr5, cr1, {0}
    2d50:	26080019 			; <UNDEFINED> instruction: 0x26080019
    2d54:	0408001a 	streq	r0, [r8], #-26
    2d58:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2d5c:	001a2c9f 	mulseq	sl, pc, ip	; <UNPREDICTABLE>
    2d60:	001a4608 	andseq	r4, sl, r8, lsl #12
    2d64:	f3000408 	vshl.u8	d0, d8, d0
    2d68:	009f5101 	addseq	r5, pc, r1, lsl #2
    2d6c:	00000000 	andeq	r0, r0, r0
    2d70:	3c000000 	stccc	0, cr0, [r0], {-0}
    2d74:	26080019 			; <UNDEFINED> instruction: 0x26080019
    2d78:	0108001a 	tsteq	r8, sl, lsl r0
    2d7c:	1a2c5400 	bne	b17d84 <_Min_Stack_Size+0xb17984>
    2d80:	1a460800 	bne	1184d88 <_Min_Stack_Size+0x1184988>
    2d84:	00010800 	andeq	r0, r1, r0, lsl #16
    2d88:	00000054 	andeq	r0, r0, r4, asr r0
    2d8c:	00000000 	andeq	r0, r0, r0
    2d90:	00193c00 	andseq	r3, r9, r0, lsl #24
    2d94:	00193e08 	andseq	r3, r9, r8, lsl #28
    2d98:	30000208 	andcc	r0, r0, r8, lsl #4
    2d9c:	00193e9f 	mulseq	r9, pc, lr	; <UNPREDICTABLE>
    2da0:	00194808 	andseq	r4, r9, r8, lsl #16
    2da4:	31000208 	tstcc	r0, r8, lsl #4
    2da8:	0019489f 	mulseq	r9, pc, r8	; <UNPREDICTABLE>
    2dac:	00195208 	andseq	r5, r9, r8, lsl #4
    2db0:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    2db4:	0019529f 	mulseq	r9, pc, r2	; <UNPREDICTABLE>
    2db8:	00195c08 	andseq	r5, r9, r8, lsl #24
    2dbc:	33000208 	movwcc	r0, #520	; 0x208
    2dc0:	00195c9f 	mulseq	r9, pc, ip	; <UNPREDICTABLE>
    2dc4:	00196608 	andseq	r6, r9, r8, lsl #12
    2dc8:	34000208 	strcc	r0, [r0], #-520	; 0x208
    2dcc:	0019669f 	mulseq	r9, pc, r6	; <UNPREDICTABLE>
    2dd0:	00197008 	andseq	r7, r9, r8
    2dd4:	35000208 	strcc	r0, [r0, #-520]	; 0x208
    2dd8:	0019709f 	mulseq	r9, pc, r0	; <UNPREDICTABLE>
    2ddc:	00197a08 	andseq	r7, r9, r8, lsl #20
    2de0:	36000208 	strcc	r0, [r0], -r8, lsl #4
    2de4:	00197a9f 	mulseq	r9, pc, sl	; <UNPREDICTABLE>
    2de8:	00198408 	andseq	r8, r9, r8, lsl #8
    2dec:	37000208 	strcc	r0, [r0, -r8, lsl #4]
    2df0:	0019849f 	mulseq	r9, pc, r4	; <UNPREDICTABLE>
    2df4:	00198a08 	andseq	r8, r9, r8, lsl #20
    2df8:	38000208 	stmdacc	r0, {r3, r9}
    2dfc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2e00:	00000000 	andeq	r0, r0, r0
    2e04:	001a8000 	andseq	r8, sl, r0
    2e08:	001a8708 	andseq	r8, sl, r8, lsl #14
    2e0c:	50000108 	andpl	r0, r0, r8, lsl #2
    2e10:	08001a87 	stmdaeq	r0, {r0, r1, r2, r7, r9, fp, ip}
    2e14:	08001a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip}
    2e18:	fe540001 	cdp2	0, 5, cr0, cr4, cr1, {0}
    2e1c:	0208001a 	andeq	r0, r8, #26
    2e20:	0108001b 	tsteq	r8, fp, lsl r0
    2e24:	00005400 	andeq	r5, r0, r0, lsl #8
    2e28:	00000000 	andeq	r0, r0, r0
    2e2c:	1a8c0000 	bne	fe302e34 <_estack+0xde2d2e34>
    2e30:	1afa0800 	bne	ffe84e38 <_estack+0xdfe54e38>
    2e34:	00010800 	andeq	r0, r1, r0, lsl #16
    2e38:	00000054 	andeq	r0, r0, r4, asr r0
    2e3c:	00000000 	andeq	r0, r0, r0
    2e40:	001ade00 	andseq	sp, sl, r0, lsl #28
    2e44:	001ae208 	andseq	lr, sl, r8, lsl #4
    2e48:	72000508 	andvc	r0, r0, #8, 10	; 0x2000000
    2e4c:	0c23060c 	stceq	6, cr0, [r3], #-48	; 0xffffffd0
    2e50:	08001ae2 	stmdaeq	r0, {r1, r5, r6, r7, r9, fp, ip}
    2e54:	08001ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, ip}
    2e58:	0c720002 	ldcleq	0, cr0, [r2], #-8
    2e5c:	08001ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, ip}
    2e60:	08001ae6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, fp, ip}
    2e64:	00520001 	subseq	r0, r2, r1
    2e68:	00000000 	andeq	r0, r0, r0
    2e6c:	24000000 	strcs	r0, [r0], #-0
    2e70:	2b08001b 	blcs	202ee4 <_Min_Stack_Size+0x202ae4>
    2e74:	0108001b 	tsteq	r8, fp, lsl r0
    2e78:	1b2b5000 	blne	ad6e80 <_Min_Stack_Size+0xad6a80>
    2e7c:	1b300800 	blne	c04e84 <_Min_Stack_Size+0xc04a84>
    2e80:	00010800 	andeq	r0, r1, r0, lsl #16
    2e84:	001b3054 	andseq	r3, fp, r4, asr r0
    2e88:	001b3808 	andseq	r3, fp, r8, lsl #16
    2e8c:	f3000408 	vshl.u8	d0, d8, d0
    2e90:	389f5001 	ldmcc	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    2e94:	3c08001b 	stccc	0, cr0, [r8], {27}
    2e98:	0108001b 	tsteq	r8, fp, lsl r0
    2e9c:	00005400 	andeq	r5, r0, r0, lsl #8
    2ea0:	00000000 	andeq	r0, r0, r0
    2ea4:	1b2e0000 	blne	b82eac <_Min_Stack_Size+0xb82aac>
    2ea8:	1b300800 	blne	c04eb0 <_Min_Stack_Size+0xc04ab0>
    2eac:	00010800 	andeq	r0, r1, r0, lsl #16
    2eb0:	001b3054 	andseq	r3, fp, r4, asr r0
    2eb4:	001b3808 	andseq	r3, fp, r8, lsl #16
    2eb8:	f3000408 	vshl.u8	d0, d8, d0
    2ebc:	3c9f5001 	ldccc	0, cr5, [pc], {1}
    2ec0:	3e08001b 	mcrcc	0, 0, r0, cr8, cr11, {0}
    2ec4:	0108001b 	tsteq	r8, fp, lsl r0
    2ec8:	00005400 	andeq	r5, r0, r0, lsl #8
    2ecc:	00000000 	andeq	r0, r0, r0
    2ed0:	1b300000 	blne	c02ed8 <_Min_Stack_Size+0xc02ad8>
    2ed4:	1b380800 	blne	e04edc <_Min_Stack_Size+0xe04adc>
    2ed8:	00010800 	andeq	r0, r1, r0, lsl #16
    2edc:	001b3e54 	andseq	r3, fp, r4, asr lr
    2ee0:	001b4608 	andseq	r4, fp, r8, lsl #12
    2ee4:	54000108 	strpl	r0, [r0], #-264	; 0x108
    2ee8:	08001b46 	stmdaeq	r0, {r1, r2, r6, r8, r9, fp, ip}
    2eec:	08001b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip}
    2ef0:	00500001 	subseq	r0, r0, r1
    2ef4:	00000000 	andeq	r0, r0, r0
    2ef8:	4c000000 	stcmi	0, cr0, [r0], {-0}
    2efc:	5908001b 	stmdbpl	r8, {r0, r1, r3, r4}
    2f00:	0108001b 	tsteq	r8, fp, lsl r0
    2f04:	1b595000 	blne	1656f0c <_Min_Stack_Size+0x1656b0c>
    2f08:	1b5e0800 	blne	1784f10 <_Min_Stack_Size+0x1784b10>
    2f0c:	00010800 	andeq	r0, r1, r0, lsl #16
    2f10:	001bb654 	andseq	fp, fp, r4, asr r6
    2f14:	001bb908 	andseq	fp, fp, r8, lsl #18
    2f18:	50000108 	andpl	r0, r0, r8, lsl #2
    2f1c:	08001bb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, r9, fp, ip}
    2f20:	08001bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp, ip}
    2f24:	00540001 	subseq	r0, r4, r1
    2f28:	00000000 	andeq	r0, r0, r0
    2f2c:	4c000000 	stcmi	0, cr0, [r0], {-0}
    2f30:	5908001b 	stmdbpl	r8, {r0, r1, r3, r4}
    2f34:	0108001b 	tsteq	r8, fp, lsl r0
    2f38:	1b595100 	blne	1657340 <_Min_Stack_Size+0x1656f40>
    2f3c:	1b960800 	blne	fe584f44 <_estack+0xde554f44>
    2f40:	00010800 	andeq	r0, r1, r0, lsl #16
    2f44:	001b9655 	andseq	r9, fp, r5, asr r6
    2f48:	001ba208 	andseq	sl, fp, r8, lsl #4
    2f4c:	74000308 	strvc	r0, [r0], #-776	; 0x308
    2f50:	1ba200c8 	blne	fe883278 <_estack+0xde853278>
    2f54:	1bac0800 	blne	feb04f5c <_estack+0xdead4f5c>
    2f58:	00040800 	andeq	r0, r4, r0, lsl #16
    2f5c:	9f5101f3 	svcls	0x005101f3
    2f60:	08001bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, ip}
    2f64:	08001bb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, fp, ip}
    2f68:	b6550001 	ldrblt	r0, [r5], -r1
    2f6c:	b908001b 	stmdblt	r8, {r0, r1, r3, r4}
    2f70:	0108001b 	tsteq	r8, fp, lsl r0
    2f74:	1bb95100 	blne	fee5737c <_estack+0xdee2737c>
    2f78:	1bc20800 	blne	ff084f80 <_estack+0xdf054f80>
    2f7c:	00010800 	andeq	r0, r1, r0, lsl #16
    2f80:	001bc255 	andseq	ip, fp, r5, asr r2
    2f84:	001bce08 	andseq	ip, fp, r8, lsl #28
    2f88:	f3000408 	vshl.u8	d0, d8, d0
    2f8c:	ce9f5101 	fmlgte	f5, f7, f1
    2f90:	d508001b 	strle	r0, [r8, #-27]
    2f94:	0308001b 	movweq	r0, #32795	; 0x801b
    2f98:	00c87400 	sbceq	r7, r8, r0, lsl #8
    2f9c:	08001bd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, r9, fp, ip}
    2fa0:	08001bf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, fp, ip}
    2fa4:	01f30004 	mvnseq	r0, r4
    2fa8:	1bf29f51 	blne	ffcaacf4 <_estack+0xdfc7acf4>
    2fac:	1c040800 	stcne	8, cr0, [r4], {-0}
    2fb0:	00010800 	andeq	r0, r1, r0, lsl #16
    2fb4:	00000055 	andeq	r0, r0, r5, asr r0
    2fb8:	00000000 	andeq	r0, r0, r0
    2fbc:	001b5e00 	andseq	r5, fp, r0, lsl #28
    2fc0:	001ba808 	andseq	sl, fp, r8, lsl #16
    2fc4:	54000108 	strpl	r0, [r0], #-264	; 0x108
    2fc8:	08001bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, ip}
    2fcc:	08001bb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, fp, ip}
    2fd0:	c2540001 	subsgt	r0, r4, #1
    2fd4:	ca08001b 	bgt	203048 <_Min_Stack_Size+0x202c48>
    2fd8:	0108001b 	tsteq	r8, fp, lsl r0
    2fdc:	1bce5400 	blne	ff397fe4 <_estack+0xdf367fe4>
    2fe0:	1c040800 	stcne	8, cr0, [r4], {-0}
    2fe4:	00010800 	andeq	r0, r1, r0, lsl #16
    2fe8:	00000054 	andeq	r0, r0, r4, asr r0
    2fec:	00000000 	andeq	r0, r0, r0
    2ff0:	001b6000 	andseq	r6, fp, r0
    2ff4:	001b8408 	andseq	r8, fp, r8, lsl #8
    2ff8:	52000108 	andpl	r0, r0, #8, 2
    2ffc:	08001bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, ip}
    3000:	08001bb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, fp, ip}
    3004:	f2520001 	vhadd.s16	d16, d2, d1
    3008:	0408001b 	streq	r0, [r8], #-27
    300c:	0108001c 	tsteq	r8, ip, lsl r0
    3010:	00005200 	andeq	r5, r0, r0, lsl #4
    3014:	00000000 	andeq	r0, r0, r0
    3018:	1b7c0000 	blne	1f03020 <_Min_Stack_Size+0x1f02c20>
    301c:	1b8c0800 	blne	fe305024 <_estack+0xde2d5024>
    3020:	00010800 	andeq	r0, r1, r0, lsl #16
    3024:	00000053 	andeq	r0, r0, r3, asr r0
    3028:	00000000 	andeq	r0, r0, r0
    302c:	001b4c00 	andseq	r4, fp, r0, lsl #24
    3030:	001b7a08 	andseq	r7, fp, r8, lsl #20
    3034:	30000208 	andcc	r0, r0, r8, lsl #4
    3038:	001b7a9f 	mulseq	fp, pc, sl	; <UNPREDICTABLE>
    303c:	001ba408 	andseq	sl, fp, r8, lsl #8
    3040:	56000108 	strpl	r0, [r0], -r8, lsl #2
    3044:	08001bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, ip}
    3048:	08001bc2 	stmdaeq	r0, {r1, r6, r7, r8, r9, fp, ip}
    304c:	9f300002 	svcls	0x00300002
    3050:	08001bc2 	stmdaeq	r0, {r1, r6, r7, r8, r9, fp, ip}
    3054:	08001bca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, fp, ip}
    3058:	ce560001 	cdpgt	0, 5, cr0, cr6, cr1, {0}
    305c:	f208001b 	vqadd.s8	d0, d8, d11
    3060:	0108001b 	tsteq	r8, fp, lsl r0
    3064:	1bf25600 	blne	ffc9886c <_estack+0xdfc6886c>
    3068:	1c040800 	stcne	8, cr0, [r4], {-0}
    306c:	00020800 	andeq	r0, r2, r0, lsl #16
    3070:	00009f30 	andeq	r9, r0, r0, lsr pc
    3074:	00000000 	andeq	r0, r0, r0
    3078:	1c040000 	stcne	0, cr0, [r4], {-0}
    307c:	1c0d0800 	stcne	8, cr0, [sp], {-0}
    3080:	00010800 	andeq	r0, r1, r0, lsl #16
    3084:	001c0d50 	andseq	r0, ip, r0, asr sp
    3088:	001c1208 	andseq	r1, ip, r8, lsl #4
    308c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    3090:	08001c72 	stmdaeq	r0, {r1, r4, r5, r6, sl, fp, ip}
    3094:	08001c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp, ip}
    3098:	00540001 	subseq	r0, r4, r1
    309c:	00000000 	andeq	r0, r0, r0
    30a0:	12000000 	andne	r0, r0, #0
    30a4:	7208001c 	andvc	r0, r8, #28
    30a8:	0108001c 	tsteq	r8, ip, lsl r0
    30ac:	1c765400 	cfldrdne	mvd5, [r6], #-0
    30b0:	1c880800 	stcne	8, cr0, [r8], {0}
    30b4:	00010800 	andeq	r0, r1, r0, lsl #16
    30b8:	001c8c54 	andseq	r8, ip, r4, asr ip
    30bc:	001d2008 	andseq	r2, sp, r8
    30c0:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    30cc:	08001c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, ip}
    30d0:	08001c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, ip}
    30d4:	0c720005 	ldcleq	0, cr0, [r2], #-20	; 0xffffffec
    30d8:	5c0c2306 	stcpl	3, cr2, [ip], {6}
    30dc:	5e08001c 	mcrpl	0, 0, r0, cr8, cr12, {0}
    30e0:	0208001c 	andeq	r0, r8, #28
    30e4:	5e0c7200 	cdppl	2, 0, cr7, cr12, cr0, {0}
    30e8:	6008001c 	andvs	r0, r8, ip, lsl r0
    30ec:	0108001c 	tsteq	r8, ip, lsl r0
    30f0:	00005200 	andeq	r5, r0, r0, lsl #4
    30f4:	00000000 	andeq	r0, r0, r0
    30f8:	1cd20000 	ldclne	0, cr0, [r2], {0}
    30fc:	1cea0800 	stclne	8, cr0, [sl]
    3100:	00010800 	andeq	r0, r1, r0, lsl #16
    3104:	00000052 	andeq	r0, r0, r2, asr r0
    3108:	00000000 	andeq	r0, r0, r0
    310c:	001d2000 	andseq	r2, sp, r0
    3110:	001d3108 	andseq	r3, sp, r8, lsl #2
    3114:	50000108 	andpl	r0, r0, r8, lsl #2
    3118:	08001d31 	stmdaeq	r0, {r0, r4, r5, r8, sl, fp, ip}
    311c:	08001d3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, sl, fp, ip}
    3120:	3e540001 	cdpcc	0, 5, cr0, cr4, cr1, {0}
    3124:	4208001d 	andmi	r0, r8, #29
    3128:	0408001d 	streq	r0, [r8], #-29
    312c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3130:	001d429f 	mulseq	sp, pc, r2	; <UNPREDICTABLE>
    3134:	001d4708 	andseq	r4, sp, r8, lsl #14
    3138:	50000108 	andpl	r0, r0, r8, lsl #2
    313c:	08001d47 	stmdaeq	r0, {r0, r1, r2, r6, r8, sl, fp, ip}
    3140:	08001da0 	stmdaeq	r0, {r5, r7, r8, sl, fp, ip}
    3144:	00540001 	subseq	r0, r4, r1
    3148:	00000000 	andeq	r0, r0, r0
    314c:	32000000 	andcc	r0, r0, #0
    3150:	3e08001d 	mcrcc	0, 0, r0, cr8, cr13, {0}
    3154:	0108001d 	tsteq	r8, sp, lsl r0
    3158:	1d3e5400 	cfldrsne	mvf5, [lr, #-0]
    315c:	1d420800 	stclne	8, cr0, [r2, #-0]
    3160:	00040800 	andeq	r0, r4, r0, lsl #16
    3164:	9f5001f3 	svcls	0x005001f3
    3168:	08001d4a 	stmdaeq	r0, {r1, r3, r6, r8, sl, fp, ip}
    316c:	08001da0 	stmdaeq	r0, {r5, r7, r8, sl, fp, ip}
    3170:	00540001 	subseq	r0, r4, r1
    3174:	00000000 	andeq	r0, r0, r0
    3178:	32000000 	andcc	r0, r0, #0
    317c:	3a08001d 	bcc	2031f8 <_Min_Stack_Size+0x202df8>
    3180:	0208001d 	andeq	r0, r8, #29
    3184:	4a9f3000 	bmi	fe7cf18c <_estack+0xde79f18c>
    3188:	5208001d 	andpl	r0, r8, #29
    318c:	0208001d 	andeq	r0, r8, #29
    3190:	529f3000 	addspl	r3, pc, #0
    3194:	5d08001d 	stcpl	0, cr0, [r8, #-116]	; 0xffffff8c
    3198:	0808001d 	stmdaeq	r8, {r0, r2, r3, r4}
    319c:	30007300 	andcc	r7, r0, r0, lsl #6
    31a0:	1aff0829 	bne	fffc524c <_estack+0xdff9524c>
    31a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    31a8:	00000000 	andeq	r0, r0, r0
    31ac:	001d5200 	andseq	r5, sp, r0, lsl #4
    31b0:	001d5d08 	andseq	r5, sp, r8, lsl #26
    31b4:	73000808 	movwvc	r0, #2056	; 0x808
    31b8:	08293000 	stmdaeq	r9!, {ip, sp}
    31bc:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    31c0:	00000000 	andeq	r0, r0, r0
    31c4:	a0000000 	andge	r0, r0, r0
    31c8:	a908001d 	stmdbge	r8, {r0, r2, r3, r4}
    31cc:	0108001d 	tsteq	r8, sp, lsl r0
    31d0:	1da95000 	stcne	0, cr5, [r9]
    31d4:	1dc40800 	stclne	8, cr0, [r4]
    31d8:	00010800 	andeq	r0, r1, r0, lsl #16
    31dc:	001dc454 	andseq	ip, sp, r4, asr r4
    31e0:	001dc708 	andseq	ip, sp, r8, lsl #14
    31e4:	50000108 	andpl	r0, r0, r8, lsl #2
    31e8:	08001dc7 	stmdaeq	r0, {r0, r1, r2, r6, r7, r8, sl, fp, ip}
    31ec:	08001e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip}
    31f0:	2c540001 	mrrccs	0, 0, r0, r4, cr1
    31f4:	4408001e 	strmi	r0, [r8], #-30
    31f8:	0408001e 	streq	r0, [r8], #-30
    31fc:	5001f300 	andpl	pc, r1, r0, lsl #6
    3200:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3204:	00000000 	andeq	r0, r0, r0
    3208:	001da000 	andseq	sl, sp, r0
    320c:	001dbc08 	andseq	fp, sp, r8, lsl #24
    3210:	30000208 	andcc	r0, r0, r8, lsl #4
    3214:	001dbc9f 	mulseq	sp, pc, ip	; <UNPREDICTABLE>
    3218:	001dc408 	andseq	ip, sp, r8, lsl #8
    321c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    3220:	08001dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp, ip}
    3224:	08001df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp, ip}
    3228:	9f300002 	svcls	0x00300002
    322c:	08001df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp, ip}
    3230:	08001e1a 	stmdaeq	r0, {r1, r3, r4, r9, sl, fp, ip}
    3234:	1a550001 	bne	1543240 <_Min_Stack_Size+0x1542e40>
    3238:	2208001e 	andcs	r0, r8, #30
    323c:	0208001e 	andeq	r0, r8, #30
    3240:	229f3000 	addscs	r3, pc, #0
    3244:	2c08001e 	stccs	0, cr0, [r8], {30}
    3248:	0108001e 	tsteq	r8, lr, lsl r0
    324c:	1e2c5500 	cfsh64ne	mvdx5, mvdx12, #0
    3250:	1e440800 	cdpne	8, 4, cr0, cr4, cr0, {0}
    3254:	00010800 	andeq	r0, r1, r0, lsl #16
    3258:	00000050 	andeq	r0, r0, r0, asr r0
    325c:	00000000 	andeq	r0, r0, r0
    3260:	001db600 	andseq	fp, sp, r0, lsl #12
    3264:	001db808 	andseq	fp, sp, r8, lsl #16
    3268:	50000108 	andpl	r0, r0, r8, lsl #2
    326c:	08001db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, ip}
    3270:	08001dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp, ip}
    3274:	ca570001 	bgt	15c3280 <_Min_Stack_Size+0x15c2e80>
    3278:	ce08001d 	mcrgt	0, 0, r0, cr8, cr13, {0}
    327c:	0108001d 	tsteq	r8, sp, lsl r0
    3280:	1dce5000 	stclne	0, cr5, [lr]
    3284:	1e2c0800 	cdpne	8, 2, cr0, cr12, cr0, {0}
    3288:	00010800 	andeq	r0, r1, r0, lsl #16
    328c:	00000057 	andeq	r0, r0, r7, asr r0
    3290:	00000000 	andeq	r0, r0, r0
    3294:	001db600 	andseq	fp, sp, r0, lsl #12
    3298:	001dc408 	andseq	ip, sp, r8, lsl #8
    329c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    32a0:	08001dca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sl, fp, ip}
    32a4:	08001e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip}
    32a8:	2c540001 	mrrccs	0, 0, r0, r4, cr1
    32ac:	4408001e 	strmi	r0, [r8], #-30
    32b0:	0408001e 	streq	r0, [r8], #-30
    32b4:	5001f300 	andpl	pc, r1, r0, lsl #6
    32b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    32bc:	00000000 	andeq	r0, r0, r0
    32c0:	001db600 	andseq	fp, sp, r0, lsl #12
    32c4:	001db808 	andseq	fp, sp, r8, lsl #16
    32c8:	30000208 	andcc	r0, r0, r8, lsl #4
    32cc:	001dca9f 	mulseq	sp, pc, sl	; <UNPREDICTABLE>
    32d0:	001dd208 	andseq	sp, sp, r8, lsl #4
    32d4:	30000208 	andcc	r0, r0, r8, lsl #4
    32d8:	001dd29f 	mulseq	sp, pc, r2	; <UNPREDICTABLE>
    32dc:	001de408 	andseq	lr, sp, r8, lsl #8
    32e0:	75000808 	strvc	r0, [r0, #-2056]	; 0x808
    32e4:	08293000 	stmdaeq	r9!, {ip, sp}
    32e8:	e49f1aff 	ldr	r1, [pc], #2815	; 32f0 <_Min_Stack_Size+0x2ef0>
    32ec:	f308001d 	vqadd.u8	d0, d8, d13
    32f0:	0908001d 	stmdbeq	r8, {r0, r2, r3, r4}
    32f4:	06287400 	strteq	r7, [r8], -r0, lsl #8
    32f8:	ff082930 			; <UNDEFINED> instruction: 0xff082930
    32fc:	1e1a9f1a 	mrcne	15, 0, r9, cr10, cr10, {0}
    3300:	1e2c0800 	cdpne	8, 2, cr0, cr12, cr0, {0}
    3304:	00080800 	andeq	r0, r8, r0, lsl #16
    3308:	29300075 	ldmdbcs	r0!, {r0, r2, r4, r5, r6}
    330c:	9f1aff08 	svcls	0x001aff08
    3310:	08001e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip}
    3314:	08001e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip}
    3318:	00700008 	rsbseq	r0, r0, r8
    331c:	ff082930 			; <UNDEFINED> instruction: 0xff082930
    3320:	00009f1a 	andeq	r9, r0, sl, lsl pc
    3324:	00000000 	andeq	r0, r0, r0
    3328:	1dca0000 	stclne	0, cr0, [sl]
    332c:	1e2c0800 	cdpne	8, 2, cr0, cr12, cr0, {0}
    3330:	00010800 	andeq	r0, r1, r0, lsl #16
    3334:	001e2c54 	andseq	r2, lr, r4, asr ip
    3338:	001e4408 	andseq	r4, lr, r8, lsl #8
    333c:	f3000408 	vshl.u8	d0, d8, d0
    3340:	009f5001 	addseq	r5, pc, r1
    3344:	00000000 	andeq	r0, r0, r0
    3348:	d2000000 	andle	r0, r0, #0
    334c:	e408001d 	str	r0, [r8], #-29
    3350:	0808001d 	stmdaeq	r8, {r0, r2, r3, r4}
    3354:	30007500 	andcc	r7, r0, r0, lsl #10
    3358:	1aff0829 	bne	fffc5404 <_estack+0xdff95404>
    335c:	001de49f 	mulseq	sp, pc, r4	; <UNPREDICTABLE>
    3360:	001df308 	andseq	pc, sp, r8, lsl #6
    3364:	74000908 	strvc	r0, [r0], #-2312	; 0x908
    3368:	29300628 	ldmdbcs	r0!, {r3, r5, r9, sl}
    336c:	9f1aff08 	svcls	0x001aff08
    3370:	08001e1a 	stmdaeq	r0, {r1, r3, r4, r9, sl, fp, ip}
    3374:	08001e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp, ip}
    3378:	00750008 	rsbseq	r0, r5, r8
    337c:	ff082930 			; <UNDEFINED> instruction: 0xff082930
    3380:	1e2c9f1a 	mcrne	15, 1, r9, cr12, cr10, {0}
    3384:	1e440800 	cdpne	8, 4, cr0, cr4, cr0, {0}
    3388:	00080800 	andeq	r0, r8, r0, lsl #16
    338c:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    3390:	9f1aff08 	svcls	0x001aff08
	...
    339c:	08001f1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, fp, ip}
    33a0:	08001f23 	stmdaeq	r0, {r0, r1, r5, r8, r9, sl, fp, ip}
    33a4:	23500001 	cmpcs	r0, #1
    33a8:	2e08001f 	mcrcs	0, 0, r0, cr8, cr15, {0}
    33ac:	0108001f 	tsteq	r8, pc, lsl r0
    33b0:	1f2e5400 	svcne	0x002e5400
    33b4:	1f300800 	svcne	0x00300800
    33b8:	00050800 	andeq	r0, r5, r0, lsl #16
    33bc:	0000fc03 	andeq	pc, r0, r3, lsl #24
    33c0:	001f3420 	andseq	r3, pc, r0, lsr #8
    33c4:	001f3608 	andseq	r3, pc, r8, lsl #12
    33c8:	50000108 	andpl	r0, r0, r8, lsl #2
    33cc:	08001f3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, fp, ip}
    33d0:	08001f3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, sl, fp, ip}
    33d4:	3d500001 	ldclcc	0, cr0, [r0, #-4]
    33d8:	4008001f 	andmi	r0, r8, pc, lsl r0
    33dc:	0108001f 	tsteq	r8, pc, lsl r0
    33e0:	00005400 	andeq	r5, r0, r0, lsl #8
    33e4:	00000000 	andeq	r0, r0, r0
    33e8:	1f0c0000 	svcne	0x000c0000
    33ec:	1f360800 	svcne	0x00360800
    33f0:	00020800 	andeq	r0, r2, r0, lsl #16
    33f4:	1f3a9f31 	svcne	0x003a9f31
    33f8:	1f400800 	svcne	0x00400800
    33fc:	00020800 	andeq	r0, r2, r0, lsl #16
    3400:	00009f31 	andeq	r9, r0, r1, lsr pc
    3404:	00000000 	andeq	r0, r0, r0
    3408:	1e4e0000 	cdpne	0, 4, cr0, cr14, cr0, {0}
    340c:	1e580800 	cdpne	8, 5, cr0, cr8, cr0, {0}
    3410:	00010800 	andeq	r0, r1, r0, lsl #16
    3414:	001e5850 	andseq	r5, lr, r0, asr r8
    3418:	001f1e08 	andseq	r1, pc, r8, lsl #28
    341c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    3420:	08001f1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, fp, ip}
    3424:	08001f2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, sl, fp, ip}
    3428:	7c770003 	ldclvc	0, cr0, [r7], #-12
    342c:	001f349f 	mulseq	pc, pc, r4	; <UNPREDICTABLE>
    3430:	001f3608 	andseq	r3, pc, r8, lsl #12
    3434:	77000308 	strvc	r0, [r0, -r8, lsl #6]
    3438:	1f3a9f7c 	svcne	0x003a9f7c
    343c:	1f400800 	svcne	0x00400800
    3440:	00030800 	andeq	r0, r3, r0, lsl #16
    3444:	409f7c77 	addsmi	r7, pc, r7, ror ip	; <UNPREDICTABLE>
    3448:	4608001f 			; <UNDEFINED> instruction: 0x4608001f
    344c:	0108001f 	tsteq	r8, pc, lsl r0
    3450:	1f465400 	svcne	0x00465400
    3454:	1f490800 	svcne	0x00490800
    3458:	00010800 	andeq	r0, r1, r0, lsl #16
    345c:	001f4a50 	andseq	r4, pc, r0, asr sl	; <UNPREDICTABLE>
    3460:	001f7c08 	andseq	r7, pc, r8, lsl #24
    3464:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    3470:	08001e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip}
    3474:	08001e82 	stmdaeq	r0, {r1, r7, r9, sl, fp, ip}
    3478:	30740007 	rsbscc	r0, r4, r7
    347c:	04842306 	streq	r2, [r4], #774	; 0x306
    3480:	001e829f 	mulseq	lr, pc, r2	; <UNPREDICTABLE>
    3484:	001ea408 	andseq	sl, lr, r8, lsl #8
    3488:	53000108 	movwpl	r0, #264	; 0x108
    348c:	08001ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip}
    3490:	08001f2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, sl, fp, ip}
    3494:	34580001 	ldrbcc	r0, [r8], #-1
    3498:	3608001f 			; <UNDEFINED> instruction: 0x3608001f
    349c:	0108001f 	tsteq	r8, pc, lsl r0
    34a0:	1f3a5800 	svcne	0x003a5800
    34a4:	1f400800 	svcne	0x00400800
    34a8:	00010800 	andeq	r0, r1, r0, lsl #16
    34ac:	001f4a58 	andseq	r4, pc, r8, asr sl	; <UNPREDICTABLE>
    34b0:	001f7c08 	andseq	r7, pc, r8, lsl #24
    34b4:	58000108 	stmdapl	r0, {r3, r8}
	...
    34c0:	08001ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip}
    34c4:	08001f36 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, fp, ip}
    34c8:	9f300002 	svcls	0x00300002
    34cc:	08001f3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, fp, ip}
    34d0:	08001f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, ip}
    34d4:	9f300002 	svcls	0x00300002
    34d8:	08001f4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, fp, ip}
    34dc:	08001f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip}
    34e0:	9f300002 	svcls	0x00300002
	...
    34ec:	08001ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip}
    34f0:	08001f1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, fp, ip}
    34f4:	1e540001 	cdpne	0, 5, cr0, cr4, cr1, {0}
    34f8:	2e08001f 	mcrcs	0, 0, r0, cr8, cr15, {0}
    34fc:	0308001f 	movweq	r0, #32799	; 0x801f
    3500:	9f7c7700 	svcls	0x007c7700
    3504:	08001f34 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, fp, ip}
    3508:	08001f36 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, fp, ip}
    350c:	7c770003 	ldclvc	0, cr0, [r7], #-12
    3510:	001f3a9f 	mulseq	pc, pc, sl	; <UNPREDICTABLE>
    3514:	001f4008 	andseq	r4, pc, r8
    3518:	77000308 	strvc	r0, [r0, -r8, lsl #6]
    351c:	1f4a9f7c 	svcne	0x004a9f7c
    3520:	1f7c0800 	svcne	0x007c0800
    3524:	00010800 	andeq	r0, r1, r0, lsl #16
    3528:	00000054 	andeq	r0, r0, r4, asr r0
    352c:	00000000 	andeq	r0, r0, r0
    3530:	001ea400 	andseq	sl, lr, r0, lsl #8
    3534:	001f3608 	andseq	r3, pc, r8, lsl #12
    3538:	34000208 	strcc	r0, [r0], #-520	; 0x208
    353c:	001f3a9f 	mulseq	pc, pc, sl	; <UNPREDICTABLE>
    3540:	001f4008 	andseq	r4, pc, r8
    3544:	34000208 	strcc	r0, [r0], #-520	; 0x208
    3548:	001f4a9f 	mulseq	pc, pc, sl	; <UNPREDICTABLE>
    354c:	001f7c08 	andseq	r7, pc, r8, lsl #24
    3550:	34000208 	strcc	r0, [r0], #-520	; 0x208
    3554:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3558:	00000000 	andeq	r0, r0, r0
    355c:	001fae00 	andseq	sl, pc, r0, lsl #28
    3560:	001fb608 	andseq	fp, pc, r8, lsl #12
    3564:	54000108 	strpl	r0, [r0], #-264	; 0x108
    3568:	08001fb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, fp, ip}
    356c:	08001fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip}
    3570:	00500001 	subseq	r0, r0, r1
    3574:	00000000 	andeq	r0, r0, r0
    3578:	ca000000 	bgt	3580 <_Min_Stack_Size+0x3180>
    357c:	d208001f 	andle	r0, r8, #31
    3580:	0108001f 	tsteq	r8, pc, lsl r0
    3584:	1fd25400 	svcne	0x00d25400
    3588:	1fd80800 	svcne	0x00d80800
    358c:	00010800 	andeq	r0, r1, r0, lsl #16
    3590:	00000050 	andeq	r0, r0, r0, asr r0
    3594:	00000000 	andeq	r0, r0, r0
    3598:	001fc600 	andseq	ip, pc, r0, lsl #12
    359c:	001fcd08 	andseq	ip, pc, r8, lsl #26
    35a0:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    35ac:	08002020 	stmdaeq	r0, {r5, sp}
    35b0:	0800206c 	stmdaeq	r0, {r2, r3, r5, r6, sp}
    35b4:	e8580001 	ldmda	r8, {r0}^
    35b8:	ee080020 	cdp	0, 0, cr0, cr8, cr0, {1}
    35bc:	01080020 	tsteq	r8, r0, lsr #32
    35c0:	00005800 	andeq	r5, r0, r0, lsl #16
    35c4:	00000000 	andeq	r0, r0, r0
    35c8:	20240000 	eorcs	r0, r4, r0
    35cc:	20310800 	eorscs	r0, r1, r0, lsl #16
    35d0:	00010800 	andeq	r0, r1, r0, lsl #16
    35d4:	0020e851 	eoreq	lr, r0, r1, asr r8
    35d8:	0020ee08 	eoreq	lr, r0, r8, lsl #28
    35dc:	51000108 	tstpl	r0, r8, lsl #2
	...
    35e8:	08001fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, ip}
    35ec:	08002016 	stmdaeq	r0, {r1, r2, r4, sp}
    35f0:	9f300002 	svcls	0x00300002
    35f4:	08002016 	stmdaeq	r0, {r1, r2, r4, sp}
    35f8:	08002090 	stmdaeq	r0, {r4, r7, sp}
    35fc:	92540001 	subsls	r0, r4, #1
    3600:	9c080020 	stcls	0, cr0, [r8], {32}
    3604:	02080020 	andeq	r0, r8, #32
    3608:	9c9f3000 	ldcls	0, cr3, [pc], {0}
    360c:	a6080020 	strge	r0, [r8], -r0, lsr #32
    3610:	01080020 	tsteq	r8, r0, lsr #32
    3614:	20ac5400 	adccs	r5, ip, r0, lsl #8
    3618:	20e80800 	rsccs	r0, r8, r0, lsl #16
    361c:	00020800 	andeq	r0, r2, r0, lsl #16
    3620:	20e89f30 	rsccs	r9, r8, r0, lsr pc
    3624:	20ee0800 	rsccs	r0, lr, r0, lsl #16
    3628:	00010800 	andeq	r0, r1, r0, lsl #16
    362c:	0020ee54 	eoreq	lr, r0, r4, asr lr
    3630:	00212808 	eoreq	r2, r1, r8, lsl #16
    3634:	30000208 	andcc	r0, r0, r8, lsl #4
    3638:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    363c:	00000000 	andeq	r0, r0, r0
    3640:	001ffa00 	andseq	pc, pc, r0, lsl #20
    3644:	00209208 	eoreq	r9, r0, r8, lsl #4
    3648:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    364c:	080020ac 	stmdaeq	r0, {r2, r3, r5, r7, sp}
    3650:	08002128 	stmdaeq	r0, {r3, r5, r8, sp}
    3654:	00570001 	subseq	r0, r7, r1
    3658:	00000000 	andeq	r0, r0, r0
    365c:	c2000000 	andgt	r0, r0, #0
    3660:	e8080020 	stmda	r8, {r5}
    3664:	01080020 	tsteq	r8, r0, lsr #32
    3668:	20ee5000 	rsccs	r5, lr, r0
    366c:	21280800 	teqcs	r8, r0, lsl #16
    3670:	00010800 	andeq	r0, r1, r0, lsl #16
    3674:	00000050 	andeq	r0, r0, r0, asr r0
    3678:	00000000 	andeq	r0, r0, r0
    367c:	0020d800 	eoreq	sp, r0, r0, lsl #16
    3680:	0020de08 	eoreq	sp, r0, r8, lsl #28
    3684:	72000508 	andvc	r0, r0, #8, 10	; 0x2000000
    3688:	0c23060c 	stceq	6, cr0, [r3], #-48	; 0xffffffd0
    368c:	080020de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sp}
    3690:	080020e0 	stmdaeq	r0, {r5, r6, r7, sp}
    3694:	0c720002 	ldcleq	0, cr0, [r2], #-8
    3698:	080020e0 	stmdaeq	r0, {r5, r6, r7, sp}
    369c:	080020e2 	stmdaeq	r0, {r1, r5, r6, r7, sp}
    36a0:	00520001 	subseq	r0, r2, r1
    36a4:	00000000 	andeq	r0, r0, r0
    36a8:	6a000000 	bvs	36b0 <_Min_Stack_Size+0x32b0>
    36ac:	a2080021 	andge	r0, r8, #33	; 0x21
    36b0:	01080021 	tsteq	r8, r1, lsr #32
    36b4:	00005400 	andeq	r5, r0, r0, lsl #8
    36b8:	00000000 	andeq	r0, r0, r0
    36bc:	21280000 	teqcs	r8, r0
    36c0:	21b80800 			; <UNDEFINED> instruction: 0x21b80800
    36c4:	00020800 	andeq	r0, r2, r0, lsl #16
    36c8:	21b89f30 			; <UNDEFINED> instruction: 0x21b89f30
    36cc:	21c20800 	biccs	r0, r2, r0, lsl #16
    36d0:	00010800 	andeq	r0, r1, r0, lsl #16
    36d4:	0021c254 	eoreq	ip, r1, r4, asr r2
    36d8:	0021e008 	eoreq	lr, r1, r8
    36dc:	30000208 	andcc	r0, r0, r8, lsl #4
    36e0:	0021e09f 	mlaeq	r1, pc, r0, lr	; <UNPREDICTABLE>
    36e4:	0021e408 	eoreq	lr, r1, r8, lsl #8
    36e8:	31000208 	tstcc	r0, r8, lsl #4
    36ec:	0021e49f 	mlaeq	r1, pc, r4, lr	; <UNPREDICTABLE>
    36f0:	0021ee08 	eoreq	lr, r1, r8, lsl #28
    36f4:	54000108 	strpl	r0, [r0], #-264	; 0x108
    36f8:	080021ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sp}
    36fc:	08002210 	stmdaeq	r0, {r4, r9, sp}
    3700:	00500001 	subseq	r0, r0, r1
    3704:	00000000 	andeq	r0, r0, r0
    3708:	10000000 	andne	r0, r0, r0
    370c:	44080022 	strmi	r0, [r8], #-34	; 0x22
    3710:	01080022 	tsteq	r8, r2, lsr #32
    3714:	22445000 	subcs	r5, r4, #0
    3718:	22720800 	rsbscs	r0, r2, #0, 16
    371c:	00040800 	andeq	r0, r4, r0, lsl #16
    3720:	9f5001f3 	svcls	0x005001f3
    3724:	08002272 	stmdaeq	r0, {r1, r4, r5, r6, r9, sp}
    3728:	0800227b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r9, sp}
    372c:	7b500001 	blvc	1403738 <_Min_Stack_Size+0x1403338>
    3730:	88080022 	stmdahi	r8, {r1, r5}
    3734:	04080022 	streq	r0, [r8], #-34	; 0x22
    3738:	5001f300 	andpl	pc, r1, r0, lsl #6
    373c:	0022889f 	mlaeq	r2, pc, r8, r8	; <UNPREDICTABLE>
    3740:	00228b08 	eoreq	r8, r2, r8, lsl #22
    3744:	50000108 	andpl	r0, r0, r8, lsl #2
    3748:	0800228b 	stmdaeq	r0, {r0, r1, r3, r7, r9, sp}
    374c:	0800228e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sp}
    3750:	01f30004 	mvnseq	r0, r4
    3754:	228e9f50 	addcs	r9, lr, #80, 30	; 0x140
    3758:	22910800 	addscs	r0, r1, #0, 16
    375c:	00010800 	andeq	r0, r1, r0, lsl #16
    3760:	00229150 	eoreq	r9, r2, r0, asr r1
    3764:	00229408 	eoreq	r9, r2, r8, lsl #8
    3768:	f3000408 	vshl.u8	d0, d8, d0
    376c:	949f5001 	ldrls	r5, [pc], #1	; 3774 <_Min_Stack_Size+0x3374>
    3770:	97080022 	strls	r0, [r8, -r2, lsr #32]
    3774:	01080022 	tsteq	r8, r2, lsr #32
    3778:	22975000 	addscs	r5, r7, #0
    377c:	22c00800 	sbccs	r0, r0, #0, 16
    3780:	00040800 	andeq	r0, r4, r0, lsl #16
    3784:	9f5001f3 	svcls	0x005001f3
	...
    3790:	08002210 	stmdaeq	r0, {r4, r9, sp}
    3794:	08002249 	stmdaeq	r0, {r0, r3, r6, r9, sp}
    3798:	49510001 	ldmdbmi	r1, {r0}^
    379c:	72080022 	andvc	r0, r8, #34	; 0x22
    37a0:	04080022 	streq	r0, [r8], #-34	; 0x22
    37a4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    37a8:	0022729f 	mlaeq	r2, pc, r2, r7	; <UNPREDICTABLE>
    37ac:	00227b08 	eoreq	r7, r2, r8, lsl #22
    37b0:	51000108 	tstpl	r0, r8, lsl #2
    37b4:	0800227b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r9, sp}
    37b8:	08002288 	stmdaeq	r0, {r3, r7, r9, sp}
    37bc:	01f30004 	mvnseq	r0, r4
    37c0:	22889f51 	addcs	r9, r8, #324	; 0x144
    37c4:	228b0800 	addcs	r0, fp, #0, 16
    37c8:	00010800 	andeq	r0, r1, r0, lsl #16
    37cc:	00228b51 	eoreq	r8, r2, r1, asr fp
    37d0:	00228e08 	eoreq	r8, r2, r8, lsl #28
    37d4:	f3000408 	vshl.u8	d0, d8, d0
    37d8:	8e9f5101 	fmlhie	f5, f7, f1
    37dc:	91080022 	tstls	r8, r2, lsr #32
    37e0:	01080022 	tsteq	r8, r2, lsr #32
    37e4:	22915100 	addscs	r5, r1, #0, 2
    37e8:	22940800 	addscs	r0, r4, #0, 16
    37ec:	00040800 	andeq	r0, r4, r0, lsl #16
    37f0:	9f5101f3 	svcls	0x005101f3
    37f4:	08002294 	stmdaeq	r0, {r2, r4, r7, r9, sp}
    37f8:	08002297 	stmdaeq	r0, {r0, r1, r2, r4, r7, r9, sp}
    37fc:	97510001 	ldrbls	r0, [r1, -r1]
    3800:	c0080022 	andgt	r0, r8, r2, lsr #32
    3804:	04080022 	streq	r0, [r8], #-34	; 0x22
    3808:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    380c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3810:	00000000 	andeq	r0, r0, r0
    3814:	00223400 	eoreq	r3, r2, r0, lsl #8
    3818:	00228408 	eoreq	r8, r2, r8, lsl #8
    381c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    3820:	0800229a 	stmdaeq	r0, {r1, r3, r4, r7, r9, sp}
    3824:	080022c0 	stmdaeq	r0, {r6, r7, r9, sp}
    3828:	00540001 	subseq	r0, r4, r1
    382c:	00000000 	andeq	r0, r0, r0
    3830:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    3834:	72080022 	andvc	r0, r8, #34	; 0x22
    3838:	01080022 	tsteq	r8, r2, lsr #32
    383c:	227c5000 	rsbscs	r5, ip, #0
    3840:	22870800 	addcs	r0, r7, #0, 16
    3844:	00010800 	andeq	r0, r1, r0, lsl #16
    3848:	00000050 	andeq	r0, r0, r0, asr r0
    384c:	00000000 	andeq	r0, r0, r0
    3850:	00221000 	eoreq	r1, r2, r0
    3854:	00223e08 	eoreq	r3, r2, r8, lsl #28
    3858:	30000208 	andcc	r0, r0, r8, lsl #4
    385c:	00223e9f 	mlaeq	r2, pc, lr, r3	; <UNPREDICTABLE>
    3860:	00227008 	eoreq	r7, r2, r8
    3864:	31000208 	tstcc	r0, r8, lsl #4
    3868:	0022729f 	mlaeq	r2, pc, r2, r7	; <UNPREDICTABLE>
    386c:	00228008 	eoreq	r8, r2, r8
    3870:	30000208 	andcc	r0, r0, r8, lsl #4
    3874:	0022889f 	mlaeq	r2, pc, r8, r8	; <UNPREDICTABLE>
    3878:	00229a08 	eoreq	r9, r2, r8, lsl #20
    387c:	30000208 	andcc	r0, r0, r8, lsl #4
    3880:	00229a9f 	mlaeq	r2, pc, sl, r9	; <UNPREDICTABLE>
    3884:	0022c008 	eoreq	ip, r2, r8
    3888:	31000208 	tstcc	r0, r8, lsl #4
    388c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3890:	00000000 	andeq	r0, r0, r0
    3894:	00222e00 	eoreq	r2, r2, r0, lsl #28
    3898:	00224908 	eoreq	r4, r2, r8, lsl #18
    389c:	52000108 	andpl	r0, r0, #8, 2
    38a0:	08002272 	stmdaeq	r0, {r1, r4, r5, r6, r9, sp}
    38a4:	0800227b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r9, sp}
    38a8:	00520001 	subseq	r0, r2, r1
    38ac:	00000000 	andeq	r0, r0, r0
    38b0:	4a000000 	bmi	38b8 <_Min_Stack_Size+0x34b8>
    38b4:	70080022 	andvc	r0, r8, r2, lsr #32
    38b8:	01080022 	tsteq	r8, r2, lsr #32
    38bc:	229a5400 	addscs	r5, sl, #0, 8
    38c0:	22c00800 	sbccs	r0, r0, #0, 16
    38c4:	00010800 	andeq	r0, r1, r0, lsl #16
    38c8:	00000054 	andeq	r0, r0, r4, asr r0
    38cc:	00000000 	andeq	r0, r0, r0
    38d0:	0022c000 	eoreq	ip, r2, r0
    38d4:	0022c608 	eoreq	ip, r2, r8, lsl #12
    38d8:	50000108 	andpl	r0, r0, r8, lsl #2
    38dc:	080022c6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sp}
    38e0:	080022ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sp}
    38e4:	01f30004 	mvnseq	r0, r4
    38e8:	22ce9f50 	sbccs	r9, lr, #80, 30	; 0x140
    38ec:	22e20800 	rsccs	r0, r2, #0, 16
    38f0:	00010800 	andeq	r0, r1, r0, lsl #16
    38f4:	0022e250 	eoreq	lr, r2, r0, asr r2
    38f8:	0022e908 	eoreq	lr, r2, r8, lsl #18
    38fc:	52000108 	andpl	r0, r0, #8, 2
    3900:	080022e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, sp}
    3904:	08002314 	stmdaeq	r0, {r2, r4, r8, r9, sp}
    3908:	01f30004 	mvnseq	r0, r4
    390c:	23149f50 	tstcs	r4, #80, 30	; 0x140
    3910:	23170800 	tstcs	r7, #0, 16
    3914:	00010800 	andeq	r0, r1, r0, lsl #16
    3918:	00231750 	eoreq	r1, r3, r0, asr r7
    391c:	00234008 	eoreq	r4, r3, r8
    3920:	f3000408 	vshl.u8	d0, d8, d0
    3924:	009f5001 	addseq	r5, pc, r1
    3928:	00000000 	andeq	r0, r0, r0
    392c:	e6000000 	str	r0, [r0], -r0
    3930:	14080022 	strne	r0, [r8], #-34	; 0x22
    3934:	01080023 	tsteq	r8, r3, lsr #32
    3938:	231a5400 	tstcs	sl, #0, 8
    393c:	23400800 	movtcs	r0, #2048	; 0x800
    3940:	00010800 	andeq	r0, r1, r0, lsl #16
    3944:	00000054 	andeq	r0, r0, r4, asr r0
    3948:	00000000 	andeq	r0, r0, r0
    394c:	0022c000 	eoreq	ip, r2, r0
    3950:	0022c608 	eoreq	ip, r2, r8, lsl #12
    3954:	30000208 	andcc	r0, r0, r8, lsl #4
    3958:	0022ce9f 	mlaeq	r2, pc, lr, ip	; <UNPREDICTABLE>
    395c:	00230e08 	eoreq	r0, r3, r8, lsl #28
    3960:	30000208 	andcc	r0, r0, r8, lsl #4
    3964:	00230e9f 	mlaeq	r3, pc, lr, r0	; <UNPREDICTABLE>
    3968:	00231408 	eoreq	r1, r3, r8, lsl #8
    396c:	50000108 	andpl	r0, r0, r8, lsl #2
    3970:	08002314 	stmdaeq	r0, {r2, r4, r8, r9, sp}
    3974:	08002340 	stmdaeq	r0, {r6, r8, r9, sp}
    3978:	9f300002 	svcls	0x00300002
	...
    3984:	080022ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sp}
    3988:	08002314 	stmdaeq	r0, {r2, r4, r8, r9, sp}
    398c:	1a540001 	bne	1503998 <_Min_Stack_Size+0x1503598>
    3990:	40080023 	andmi	r0, r8, r3, lsr #32
    3994:	01080023 	tsteq	r8, r3, lsr #32
    3998:	00005400 	andeq	r5, r0, r0, lsl #8
    399c:	00000000 	andeq	r0, r0, r0
    39a0:	23400000 	movtcs	r0, #0
    39a4:	23560800 	cmpcs	r6, #0, 16
    39a8:	00010800 	andeq	r0, r1, r0, lsl #16
    39ac:	00235650 	eoreq	r5, r3, r0, asr r6
    39b0:	0023c808 	eoreq	ip, r3, r8, lsl #16
    39b4:	f3000408 	vshl.u8	d0, d8, d0
    39b8:	009f5001 	addseq	r5, pc, r1
    39bc:	00000000 	andeq	r0, r0, r0
    39c0:	5a000000 	bpl	39c8 <_Min_Stack_Size+0x35c8>
    39c4:	64080023 	strvs	r0, [r8], #-35	; 0x23
    39c8:	08080023 	stmdaeq	r8, {r0, r1, r5}
    39cc:	30007700 	andcc	r7, r0, r0, lsl #14
    39d0:	1aff0829 	bne	fffc5a7c <_estack+0xdff95a7c>
    39d4:	0023789f 	mlaeq	r3, pc, r8, r7	; <UNPREDICTABLE>
    39d8:	0023c808 	eoreq	ip, r3, r8, lsl #16
    39dc:	77000808 	strvc	r0, [r0, -r8, lsl #16]
    39e0:	08293000 	stmdaeq	r9!, {ip, sp}
    39e4:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    39e8:	00000000 	andeq	r0, r0, r0
    39ec:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    39f0:	f8080023 			; <UNDEFINED> instruction: 0xf8080023
    39f4:	01080023 	tsteq	r8, r3, lsr #32
    39f8:	23f85000 	mvnscs	r5, #0
    39fc:	24e80800 	strbtcs	r0, [r8], #2048	; 0x800
    3a00:	00020800 	andeq	r0, r2, r0, lsl #16
    3a04:	24e84c91 	strbtcs	r4, [r8], #3217	; 0xc91
    3a08:	24eb0800 	strbtcs	r0, [fp], #2048	; 0x800
    3a0c:	00010800 	andeq	r0, r1, r0, lsl #16
    3a10:	0024eb50 	eoreq	lr, r4, r0, asr fp
    3a14:	00276808 	eoreq	r6, r7, r8, lsl #16
    3a18:	91000208 	tstls	r0, r8, lsl #4
    3a1c:	0000004c 	andeq	r0, r0, ip, asr #32
    3a20:	00000000 	andeq	r0, r0, r0
    3a24:	0023c800 	eoreq	ip, r3, r0, lsl #16
    3a28:	0023f808 	eoreq	pc, r3, r8, lsl #16
    3a2c:	51000108 	tstpl	r0, r8, lsl #2
    3a30:	080023f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sp}
    3a34:	080024e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, sp}
    3a38:	01f30004 	mvnseq	r0, r4
    3a3c:	24e89f51 	strbtcs	r9, [r8], #3921	; 0xf51
    3a40:	24eb0800 	strbtcs	r0, [fp], #2048	; 0x800
    3a44:	00010800 	andeq	r0, r1, r0, lsl #16
    3a48:	0024eb51 	eoreq	lr, r4, r1, asr fp
    3a4c:	00276808 	eoreq	r6, r7, r8, lsl #16
    3a50:	f3000408 	vshl.u8	d0, d8, d0
    3a54:	009f5101 	addseq	r5, pc, r1, lsl #2
    3a58:	00000000 	andeq	r0, r0, r0
    3a5c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    3a60:	e6080023 	str	r0, [r8], -r3, lsr #32
    3a64:	01080023 	tsteq	r8, r3, lsr #32
    3a68:	23e65200 	mvncs	r5, #0, 4
    3a6c:	24e80800 	strbtcs	r0, [r8], #2048	; 0x800
    3a70:	00020800 	andeq	r0, r2, r0, lsl #16
    3a74:	24e85091 	strbtcs	r5, [r8], #145	; 0x91
    3a78:	24eb0800 	strbtcs	r0, [fp], #2048	; 0x800
    3a7c:	00010800 	andeq	r0, r1, r0, lsl #16
    3a80:	0024eb52 	eoreq	lr, r4, r2, asr fp
    3a84:	00276808 	eoreq	r6, r7, r8, lsl #16
    3a88:	91000208 	tstls	r0, r8, lsl #4
    3a8c:	00000050 	andeq	r0, r0, r0, asr r0
    3a90:	00000000 	andeq	r0, r0, r0
    3a94:	0023c800 	eoreq	ip, r3, r0, lsl #16
    3a98:	0023f808 	eoreq	pc, r3, r8, lsl #16
    3a9c:	30000208 	andcc	r0, r0, r8, lsl #4
    3aa0:	0023f89f 	mlaeq	r3, pc, r8, pc	; <UNPREDICTABLE>
    3aa4:	00244008 	eoreq	r4, r4, r8
    3aa8:	59000108 	stmdbpl	r0, {r3, r8}
    3aac:	08002440 	stmdaeq	r0, {r6, sl, sp}
    3ab0:	08002448 	stmdaeq	r0, {r3, r6, sl, sp}
    3ab4:	485a0001 	ldmdami	sl, {r0}^
    3ab8:	5a080024 	bpl	203b50 <_Min_Stack_Size+0x203750>
    3abc:	01080024 	tsteq	r8, r4, lsr #32
    3ac0:	245a5600 	ldrbcs	r5, [sl], #-1536	; 0x600
    3ac4:	24e80800 	strbtcs	r0, [r8], #2048	; 0x800
    3ac8:	00010800 	andeq	r0, r1, r0, lsl #16
    3acc:	0024e859 	eoreq	lr, r4, r9, asr r8
    3ad0:	0024ee08 	eoreq	lr, r4, r8, lsl #28
    3ad4:	30000208 	andcc	r0, r0, r8, lsl #4
    3ad8:	0024ee9f 	mlaeq	r4, pc, lr, lr	; <UNPREDICTABLE>
    3adc:	0024f608 	eoreq	pc, r4, r8, lsl #12
    3ae0:	56000108 	strpl	r0, [r0], -r8, lsl #2
    3ae4:	080024f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, sp}
    3ae8:	080025b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp}
    3aec:	b45a0001 	ldrblt	r0, [sl], #-1
    3af0:	68080025 	stmdavs	r8, {r0, r2, r5}
    3af4:	01080027 	tsteq	r8, r7, lsr #32
    3af8:	00005900 	andeq	r5, r0, r0, lsl #18
    3afc:	00000000 	andeq	r0, r0, r0
    3b00:	23c80000 	biccs	r0, r8, #0
    3b04:	23f80800 	mvnscs	r0, #0, 16
    3b08:	00020800 	andeq	r0, r2, r0, lsl #16
    3b0c:	24e89f35 	strbtcs	r9, [r8], #3893	; 0xf35
    3b10:	24f60800 	ldrbtcs	r0, [r6], #2048	; 0x800
    3b14:	00020800 	andeq	r0, r2, r0, lsl #16
    3b18:	00009f35 	andeq	r9, r0, r5, lsr pc
    3b1c:	00000000 	andeq	r0, r0, r0
    3b20:	23f80000 	mvnscs	r0, #0
    3b24:	24e80800 	strbtcs	r0, [r8], #2048	; 0x800
    3b28:	00020800 	andeq	r0, r2, r0, lsl #16
    3b2c:	24f69f31 	ldrbtcs	r9, [r6], #3889	; 0xf31
    3b30:	27680800 	strbcs	r0, [r8, -r0, lsl #16]!
    3b34:	00020800 	andeq	r0, r2, r0, lsl #16
    3b38:	00009f31 	andeq	r9, r0, r1, lsr pc
    3b3c:	00000000 	andeq	r0, r0, r0
    3b40:	23f80000 	mvnscs	r0, #0
    3b44:	24000800 	strcs	r0, [r0], #-2048	; 0x800
    3b48:	00030800 	andeq	r0, r3, r0, lsl #16
    3b4c:	009f7876 	addseq	r7, pc, r6, ror r8	; <UNPREDICTABLE>
    3b50:	0a080024 	beq	203be8 <_Min_Stack_Size+0x2037e8>
    3b54:	03080024 	movweq	r0, #32804	; 0x8024
    3b58:	9f0c7600 	svcls	0x000c7600
    3b5c:	0800245a 	stmdaeq	r0, {r1, r3, r4, r6, sl, sp}
    3b60:	080024e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, sp}
    3b64:	78760003 	ldmdavc	r6!, {r0, r1}^
    3b68:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b6c:	00000000 	andeq	r0, r0, r0
    3b70:	0023f800 	eoreq	pc, r3, r0, lsl #16
    3b74:	0023fe08 	eoreq	pc, r3, r8, lsl #28
    3b78:	30000208 	andcc	r0, r0, r8, lsl #4
    3b7c:	0023fe9f 	mlaeq	r3, pc, lr, pc	; <UNPREDICTABLE>
    3b80:	00242408 	eoreq	r2, r4, r8, lsl #8
    3b84:	50000108 	andpl	r0, r0, r8, lsl #2
    3b88:	0800245a 	stmdaeq	r0, {r1, r3, r4, r6, sl, sp}
    3b8c:	080024e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, sp}
    3b90:	9f300002 	svcls	0x00300002
    3b94:	080025b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp}
    3b98:	080025d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, sl, sp}
    3b9c:	00500001 	subseq	r0, r0, r1
    3ba0:	00000000 	andeq	r0, r0, r0
    3ba4:	5a000000 	bpl	3bac <_Min_Stack_Size+0x37ac>
    3ba8:	e8080024 	stmda	r8, {r2, r5}
    3bac:	02080024 	andeq	r0, r8, #36	; 0x24
    3bb0:	009f3100 	addseq	r3, pc, r0, lsl #2
    3bb4:	00000000 	andeq	r0, r0, r0
    3bb8:	5a000000 	bpl	3bc0 <_Min_Stack_Size+0x37c0>
    3bbc:	e8080024 	stmda	r8, {r2, r5}
    3bc0:	03080024 	movweq	r0, #32804	; 0x8024
    3bc4:	9f787600 	svcls	0x00787600
	...
    3bd0:	08002496 	stmdaeq	r0, {r1, r2, r4, r7, sl, sp}
    3bd4:	080024e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, sp}
    3bd8:	00520001 	subseq	r0, r2, r1
    3bdc:	00000000 	andeq	r0, r0, r0
    3be0:	7c000000 	stcvc	0, cr0, [r0], {-0}
    3be4:	e8080024 	stmda	r8, {r2, r5}
    3be8:	01080024 	tsteq	r8, r4, lsr #32
    3bec:	00005500 	andeq	r5, r0, r0, lsl #10
    3bf0:	00000000 	andeq	r0, r0, r0
    3bf4:	24820000 	strcs	r0, [r2], #0
    3bf8:	24e80800 	strbtcs	r0, [r8], #2048	; 0x800
    3bfc:	00010800 	andeq	r0, r1, r0, lsl #16
    3c00:	00000050 	andeq	r0, r0, r0, asr r0
    3c04:	00000000 	andeq	r0, r0, r0
    3c08:	00248200 	eoreq	r8, r4, r0, lsl #4
    3c0c:	0024e808 	eoreq	lr, r4, r8, lsl #16
    3c10:	76000308 	strvc	r0, [r0], -r8, lsl #6
    3c14:	00009f78 	andeq	r9, r0, r8, ror pc
    3c18:	00000000 	andeq	r0, r0, r0
    3c1c:	24b40000 	ldrtcs	r0, [r4], #0
    3c20:	24c20800 	strbcs	r0, [r2], #2048	; 0x800
    3c24:	00020800 	andeq	r0, r2, r0, lsl #16
    3c28:	24c29f30 	strbcs	r9, [r2], #3888	; 0xf30
    3c2c:	24d40800 	ldrbcs	r0, [r4], #2048	; 0x800
    3c30:	00010800 	andeq	r0, r1, r0, lsl #16
    3c34:	0024e454 	eoreq	lr, r4, r4, asr r4
    3c38:	0024e808 	eoreq	lr, r4, r8, lsl #16
    3c3c:	30000208 	andcc	r0, r0, r8, lsl #4
    3c40:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c44:	00000000 	andeq	r0, r0, r0
    3c48:	00240a00 	eoreq	r0, r4, r0, lsl #20
    3c4c:	00245a08 	eoreq	r5, r4, r8, lsl #20
    3c50:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    3c54:	0024f69f 	mlaeq	r4, pc, r6, pc	; <UNPREDICTABLE>
    3c58:	00276808 	eoreq	r6, r7, r8, lsl #16
    3c5c:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    3c60:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c64:	00000000 	andeq	r0, r0, r0
    3c68:	00240a00 	eoreq	r0, r4, r0, lsl #20
    3c6c:	00241c08 	eoreq	r1, r4, r8, lsl #24
    3c70:	56000108 	strpl	r0, [r0], -r8, lsl #2
    3c74:	080025b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp}
    3c78:	08002634 	stmdaeq	r0, {r2, r4, r5, r9, sl, sp}
    3c7c:	00560001 	subseq	r0, r6, r1
    3c80:	00000000 	andeq	r0, r0, r0
    3c84:	0a000000 	beq	3c8c <_Min_Stack_Size+0x388c>
    3c88:	1e080024 	cdpne	0, 0, cr0, cr8, cr4, {1}
    3c8c:	09080024 	stmdbeq	r8, {r2, r5}
    3c90:	35007900 	strcc	r7, [r0, #-2304]	; 0x900
    3c94:	064c9124 	strbeq	r9, [ip], -r4, lsr #2
    3c98:	25b49f22 	ldrcs	r9, [r4, #3874]!	; 0xf22
    3c9c:	26360800 	ldrtcs	r0, [r6], -r0, lsl #16
    3ca0:	00090800 	andeq	r0, r9, r0, lsl #16
    3ca4:	24350079 	ldrtcs	r0, [r5], #-121	; 0x79
    3ca8:	22064c91 	andcs	r4, r6, #37120	; 0x9100
    3cac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3cb0:	00000000 	andeq	r0, r0, r0
    3cb4:	00240a00 	eoreq	r0, r4, r0, lsl #20
    3cb8:	00241208 	eoreq	r1, r4, r8, lsl #4
    3cbc:	30000208 	andcc	r0, r0, r8, lsl #4
    3cc0:	0024129f 	mlaeq	r4, pc, r2, r1	; <UNPREDICTABLE>
    3cc4:	00242c08 	eoreq	r2, r4, r8, lsl #24
    3cc8:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    3ccc:	080025b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp}
    3cd0:	0800262a 	stmdaeq	r0, {r1, r3, r5, r9, sl, sp}
    3cd4:	9f300002 	svcls	0x00300002
    3cd8:	0800262a 	stmdaeq	r0, {r1, r3, r5, r9, sl, sp}
    3cdc:	0800265a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, sp}
    3ce0:	00570001 	subseq	r0, r7, r1
    3ce4:	00000000 	andeq	r0, r0, r0
    3ce8:	b4000000 	strlt	r0, [r0], #-0
    3cec:	3c080025 	stccc	0, cr0, [r8], {37}	; 0x25
    3cf0:	02080026 	andeq	r0, r8, #38	; 0x26
    3cf4:	009f3200 	addseq	r3, pc, r0, lsl #4
    3cf8:	00000000 	andeq	r0, r0, r0
    3cfc:	b4000000 	strlt	r0, [r0], #-0
    3d00:	34080025 	strcc	r0, [r8], #-37	; 0x25
    3d04:	01080026 	tsteq	r8, r6, lsr #32
    3d08:	00005600 	andeq	r5, r0, r0, lsl #12
    3d0c:	00000000 	andeq	r0, r0, r0
    3d10:	25b40000 	ldrcs	r0, [r4, #0]!
    3d14:	26360800 	ldrtcs	r0, [r6], -r0, lsl #16
    3d18:	00090800 	andeq	r0, r9, r0, lsl #16
    3d1c:	24350079 	ldrtcs	r0, [r5], #-121	; 0x79
    3d20:	22064c91 	andcs	r4, r6, #37120	; 0x9100
    3d24:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3d28:	00000000 	andeq	r0, r0, r0
    3d2c:	0025e400 	eoreq	lr, r5, r0, lsl #8
    3d30:	00263c08 	eoreq	r3, r6, r8, lsl #24
    3d34:	52000108 	andpl	r0, r0, #8, 2
	...
    3d40:	080025ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sl, sp}
    3d44:	0800263c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, sp}
    3d48:	005a0001 	subseq	r0, sl, r1
    3d4c:	00000000 	andeq	r0, r0, r0
    3d50:	d6000000 	strle	r0, [r0], -r0
    3d54:	3c080025 	stccc	0, cr0, [r8], {37}	; 0x25
    3d58:	01080026 	tsteq	r8, r6, lsr #32
    3d5c:	00005700 	andeq	r5, r0, r0, lsl #14
    3d60:	00000000 	andeq	r0, r0, r0
    3d64:	25d60000 	ldrbcs	r0, [r6]
    3d68:	26340800 	ldrtcs	r0, [r4], -r0, lsl #16
    3d6c:	00010800 	andeq	r0, r1, r0, lsl #16
    3d70:	00000056 	andeq	r0, r0, r6, asr r0
    3d74:	00000000 	andeq	r0, r0, r0
    3d78:	00260200 	eoreq	r0, r6, r0, lsl #4
    3d7c:	00260c08 	eoreq	r0, r6, r8, lsl #24
    3d80:	30000208 	andcc	r0, r0, r8, lsl #4
    3d84:	00260c9f 	mlaeq	r6, pc, ip, r0	; <UNPREDICTABLE>
    3d88:	00261c08 	eoreq	r1, r6, r8, lsl #24
    3d8c:	53000108 	movwpl	r0, #264	; 0x108
	...
    3d98:	0800241e 	stmdaeq	r0, {r1, r2, r3, r4, sl, sp}
    3d9c:	0800245a 	stmdaeq	r0, {r1, r3, r4, r6, sl, sp}
    3da0:	9f320002 	svcls	0x00320002
    3da4:	080024f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, sp}
    3da8:	080025b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp}
    3dac:	9f320002 	svcls	0x00320002
    3db0:	08002636 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, sp}
    3db4:	08002768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, sp}
    3db8:	9f320002 	svcls	0x00320002
	...
    3dc4:	0800241e 	stmdaeq	r0, {r1, r2, r3, r4, sl, sp}
    3dc8:	08002428 	stmdaeq	r0, {r3, r5, sl, sp}
    3dcc:	365e0001 	ldrbcc	r0, [lr], -r1
    3dd0:	be080026 	cdplt	0, 0, cr0, cr8, cr6, {1}
    3dd4:	01080026 	tsteq	r8, r6, lsr #32
    3dd8:	26be5e00 	ldrtcs	r5, [lr], r0, lsl #28
    3ddc:	26ca0800 	strbcs	r0, [sl], r0, lsl #16
    3de0:	00030800 	andeq	r0, r3, r0, lsl #16
    3de4:	009f787c 	addseq	r7, pc, ip, ror r8	; <UNPREDICTABLE>
    3de8:	00000000 	andeq	r0, r0, r0
    3dec:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    3df0:	24080024 	strcs	r0, [r8], #-36	; 0x24
    3df4:	09080024 	stmdbeq	r8, {r2, r5}
    3df8:	35007900 	strcc	r7, [r0, #-2304]	; 0x900
    3dfc:	064c9124 	strbeq	r9, [ip], -r4, lsr #2
    3e00:	26369f22 	ldrtcs	r9, [r6], -r2, lsr #30
    3e04:	263c0800 	ldrtcs	r0, [ip], -r0, lsl #16
    3e08:	00090800 	andeq	r0, r9, r0, lsl #16
    3e0c:	24350079 	ldrtcs	r0, [r5], #-121	; 0x79
    3e10:	22064c91 	andcs	r4, r6, #37120	; 0x9100
    3e14:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3e18:	00000000 	andeq	r0, r0, r0
    3e1c:	00241e00 	eoreq	r1, r4, r0, lsl #28
    3e20:	00242408 	eoreq	r2, r4, r8, lsl #8
    3e24:	30000208 	andcc	r0, r0, r8, lsl #4
    3e28:	0024249f 	mlaeq	r4, pc, r4, r2	; <UNPREDICTABLE>
    3e2c:	00243408 	eoreq	r3, r4, r8, lsl #8
    3e30:	56000108 	strpl	r0, [r0], -r8, lsl #2
    3e34:	08002636 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, sp}
    3e38:	080026ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, sp}
    3e3c:	9f300002 	svcls	0x00300002
    3e40:	080026ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, sp}
    3e44:	080026f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl, sp}
    3e48:	00560001 	subseq	r0, r6, r1
    3e4c:	00000000 	andeq	r0, r0, r0
    3e50:	3c000000 	stccc	0, cr0, [r0], {-0}
    3e54:	ca080026 	bgt	203ef4 <_Min_Stack_Size+0x203af4>
    3e58:	02080026 	andeq	r0, r8, #38	; 0x26
    3e5c:	009f3200 	addseq	r3, pc, r0, lsl #4
    3e60:	00000000 	andeq	r0, r0, r0
    3e64:	3c000000 	stccc	0, cr0, [r0], {-0}
    3e68:	be080026 	cdplt	0, 0, cr0, cr8, cr6, {1}
    3e6c:	01080026 	tsteq	r8, r6, lsr #32
    3e70:	26be5e00 	ldrtcs	r5, [lr], r0, lsl #28
    3e74:	26ca0800 	strbcs	r0, [sl], r0, lsl #16
    3e78:	00030800 	andeq	r0, r3, r0, lsl #16
    3e7c:	009f787c 	addseq	r7, pc, ip, ror r8	; <UNPREDICTABLE>
    3e80:	00000000 	andeq	r0, r0, r0
    3e84:	76000000 	strvc	r0, [r0], -r0
    3e88:	ca080026 	bgt	203f28 <_Min_Stack_Size+0x203b28>
    3e8c:	01080026 	tsteq	r8, r6, lsr #32
    3e90:	00005200 	andeq	r5, r0, r0, lsl #4
    3e94:	00000000 	andeq	r0, r0, r0
    3e98:	26560000 	ldrbcs	r0, [r6], -r0
    3e9c:	26ca0800 	strbcs	r0, [sl], r0, lsl #16
    3ea0:	00010800 	andeq	r0, r1, r0, lsl #16
    3ea4:	0000005a 	andeq	r0, r0, sl, asr r0
    3ea8:	00000000 	andeq	r0, r0, r0
    3eac:	00266200 	eoreq	r6, r6, r0, lsl #4
    3eb0:	0026ca08 	eoreq	ip, r6, r8, lsl #20
    3eb4:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    3ec0:	08002662 	stmdaeq	r0, {r1, r5, r6, r9, sl, sp}
    3ec4:	080026be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, sp}
    3ec8:	be5e0001 	cdplt	0, 5, cr0, cr14, cr1, {0}
    3ecc:	ca080026 	bgt	203f6c <_Min_Stack_Size+0x203b6c>
    3ed0:	03080026 	movweq	r0, #32806	; 0x8026
    3ed4:	9f787c00 	svcls	0x00787c00
	...
    3ee0:	08002692 	stmdaeq	r0, {r1, r4, r7, r9, sl, sp}
    3ee4:	0800269c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, sp}
    3ee8:	9f300002 	svcls	0x00300002
    3eec:	0800269c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, sp}
    3ef0:	080026ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, sp}
    3ef4:	00530001 	subseq	r0, r3, r1
    3ef8:	00000000 	andeq	r0, r0, r0
    3efc:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    3f00:	5a080024 	bpl	203f98 <_Min_Stack_Size+0x203b98>
    3f04:	02080024 	andeq	r0, r8, #36	; 0x24
    3f08:	f69f3400 			; <UNDEFINED> instruction: 0xf69f3400
    3f0c:	b4080024 	strlt	r0, [r8], #-36	; 0x24
    3f10:	02080025 	andeq	r0, r8, #37	; 0x25
    3f14:	c49f3400 	ldrgt	r3, [pc], #1024	; 3f1c <_Min_Stack_Size+0x3b1c>
    3f18:	68080026 	stmdavs	r8, {r1, r2, r5}
    3f1c:	02080027 	andeq	r0, r8, #39	; 0x27
    3f20:	009f3400 	addseq	r3, pc, r0, lsl #8
    3f24:	00000000 	andeq	r0, r0, r0
    3f28:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    3f2c:	5a080024 	bpl	203fc4 <_Min_Stack_Size+0x203bc4>
    3f30:	06080024 	streq	r0, [r8], -r4, lsr #32
    3f34:	01040300 	mrseq	r0, LR_abt
    3f38:	f69f2000 			; <UNDEFINED> instruction: 0xf69f2000
    3f3c:	b4080024 	strlt	r0, [r8], #-36	; 0x24
    3f40:	06080025 	streq	r0, [r8], -r5, lsr #32
    3f44:	01040300 	mrseq	r0, LR_abt
    3f48:	c49f2000 	ldrgt	r2, [pc], #0	; 3f50 <_Min_Stack_Size+0x3b50>
    3f4c:	68080026 	stmdavs	r8, {r1, r2, r5}
    3f50:	06080027 	streq	r0, [r8], -r7, lsr #32
    3f54:	01040300 	mrseq	r0, LR_abt
    3f58:	009f2000 	addseq	r2, pc, r0
    3f5c:	00000000 	andeq	r0, r0, r0
    3f60:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    3f64:	34080024 	strcc	r0, [r8], #-36	; 0x24
    3f68:	09080024 	stmdbeq	r8, {r2, r5}
    3f6c:	35007900 	strcc	r7, [r0, #-2304]	; 0x900
    3f70:	064c9124 	strbeq	r9, [ip], -r4, lsr #2
    3f74:	26c49f22 	strbcs	r9, [r4], r2, lsr #30
    3f78:	26ca0800 	strbcs	r0, [sl], r0, lsl #16
    3f7c:	00090800 	andeq	r0, r9, r0, lsl #16
    3f80:	24350079 	ldrtcs	r0, [r5], #-121	; 0x79
    3f84:	22064c91 	andcs	r4, r6, #37120	; 0x9100
    3f88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f8c:	00000000 	andeq	r0, r0, r0
    3f90:	00242e00 	eoreq	r2, r4, r0, lsl #28
    3f94:	00243408 	eoreq	r3, r4, r8, lsl #8
    3f98:	30000208 	andcc	r0, r0, r8, lsl #4
    3f9c:	0024349f 	mlaeq	r4, pc, r4, r3	; <UNPREDICTABLE>
    3fa0:	00244408 	eoreq	r4, r4, r8, lsl #8
    3fa4:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    3fa8:	080024f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, sp}
    3fac:	08002528 	stmdaeq	r0, {r3, r5, r8, sl, sp}
    3fb0:	c4570001 	ldrbgt	r0, [r7], #-1
    3fb4:	68080026 	stmdavs	r8, {r1, r2, r5}
    3fb8:	02080027 	andeq	r0, r8, #39	; 0x27
    3fbc:	009f3000 	addseq	r3, pc, r0
    3fc0:	00000000 	andeq	r0, r0, r0
    3fc4:	04000000 	streq	r0, [r0], #-0
    3fc8:	56080027 	strpl	r0, [r8], -r7, lsr #32
    3fcc:	01080027 	tsteq	r8, r7, lsr #32
    3fd0:	00005300 	andeq	r5, r0, r0, lsl #6
    3fd4:	00000000 	andeq	r0, r0, r0
    3fd8:	27000000 	strcs	r0, [r0, -r0]
    3fdc:	27020800 	strcs	r0, [r2, -r0, lsl #16]
    3fe0:	00010800 	andeq	r0, r1, r0, lsl #16
    3fe4:	00270256 	eoreq	r0, r7, r6, asr r2
    3fe8:	00276808 	eoreq	r6, r7, r8, lsl #16
    3fec:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    3ff8:	08002720 	stmdaeq	r0, {r5, r8, r9, sl, sp}
    3ffc:	0800272a 	stmdaeq	r0, {r1, r3, r5, r8, r9, sl, sp}
    4000:	9f300002 	svcls	0x00300002
    4004:	0800272a 	stmdaeq	r0, {r1, r3, r5, r8, r9, sl, sp}
    4008:	0800273c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, sp}
    400c:	00520001 	subseq	r0, r2, r1
    4010:	00000000 	andeq	r0, r0, r0
    4014:	40000000 	andmi	r0, r0, r0
    4018:	5a080024 	bpl	2040b0 <_Min_Stack_Size+0x203cb0>
    401c:	02080024 	andeq	r0, r8, #36	; 0x24
    4020:	f69f3300 			; <UNDEFINED> instruction: 0xf69f3300
    4024:	b4080024 	strlt	r0, [r8], #-36	; 0x24
    4028:	02080025 	andeq	r0, r8, #37	; 0x25
    402c:	009f3300 	addseq	r3, pc, r0, lsl #6
    4030:	00000000 	andeq	r0, r0, r0
    4034:	40000000 	andmi	r0, r0, r0
    4038:	5a080024 	bpl	2040d0 <_Min_Stack_Size+0x203cd0>
    403c:	06080024 	streq	r0, [r8], -r4, lsr #32
    4040:	01d80300 	bicseq	r0, r8, r0, lsl #6
    4044:	f69f2000 			; <UNDEFINED> instruction: 0xf69f2000
    4048:	b4080024 	strlt	r0, [r8], #-36	; 0x24
    404c:	06080025 	streq	r0, [r8], -r5, lsr #32
    4050:	01d80300 	bicseq	r0, r8, r0, lsl #6
    4054:	009f2000 	addseq	r2, pc, r0
    4058:	00000000 	andeq	r0, r0, r0
    405c:	40000000 	andmi	r0, r0, r0
    4060:	5a080024 	bpl	2040f8 <_Min_Stack_Size+0x203cf8>
    4064:	09080024 	stmdbeq	r8, {r2, r5}
    4068:	35007a00 	strcc	r7, [r0, #-2560]	; 0xa00
    406c:	064c9124 	strbeq	r9, [ip], -r4, lsr #2
    4070:	24f69f22 	ldrbtcs	r9, [r6], #3874	; 0xf22
    4074:	25b40800 	ldrcs	r0, [r4, #2048]!	; 0x800
    4078:	00090800 	andeq	r0, r9, r0, lsl #16
    407c:	2435007a 	ldrtcs	r0, [r5], #-122	; 0x7a
    4080:	22064c91 	andcs	r4, r6, #37120	; 0x9100
    4084:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4088:	00000000 	andeq	r0, r0, r0
    408c:	00244000 	eoreq	r4, r4, r0
    4090:	00244408 	eoreq	r4, r4, r8, lsl #8
    4094:	30000208 	andcc	r0, r0, r8, lsl #4
    4098:	0024449f 	mlaeq	r4, pc, r4, r4	; <UNPREDICTABLE>
    409c:	00244808 	eoreq	r4, r4, r8, lsl #16
    40a0:	56000108 	strpl	r0, [r0], -r8, lsl #2
    40a4:	080024f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, sp}
    40a8:	080025b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp}
    40ac:	9f300002 	svcls	0x00300002
	...
    40b8:	080024f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, sp}
    40bc:	080025b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp}
    40c0:	9f330002 	svcls	0x00330002
	...
    40cc:	080024f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, sp}
    40d0:	080025b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp}
    40d4:	d8030006 	stmdale	r3, {r1, r2}
    40d8:	9f200001 	svcls	0x00200001
	...
    40e4:	080024f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, sp}
    40e8:	080025b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp}
    40ec:	007a0009 	rsbseq	r0, sl, r9
    40f0:	4c912435 	cfldrsmi	mvf2, [r1], {53}	; 0x35
    40f4:	009f2206 	addseq	r2, pc, r6, lsl #4
    40f8:	00000000 	andeq	r0, r0, r0
    40fc:	34000000 	strcc	r0, [r0], #-0
    4100:	8c080025 	stchi	0, cr0, [r8], {37}	; 0x25
    4104:	01080025 	tsteq	r8, r5, lsr #32
    4108:	00005400 	andeq	r5, r0, r0, lsl #8
    410c:	00000000 	andeq	r0, r0, r0
    4110:	25140000 	ldrcs	r0, [r4, #-0]
    4114:	25b40800 	ldrcs	r0, [r4, #2048]!	; 0x800
    4118:	00010800 	andeq	r0, r1, r0, lsl #16
    411c:	00000059 	andeq	r0, r0, r9, asr r0
    4120:	00000000 	andeq	r0, r0, r0
    4124:	00253000 	eoreq	r3, r5, r0
    4128:	0025b408 	eoreq	fp, r5, r8, lsl #8
    412c:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    4138:	08002530 	stmdaeq	r0, {r4, r5, r8, sl, sp}
    413c:	080025b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp}
    4140:	d8030006 	stmdale	r3, {r1, r2}
    4144:	9f200001 	svcls	0x00200001
	...
    4150:	08002558 	stmdaeq	r0, {r3, r4, r6, r8, sl, sp}
    4154:	08002562 	stmdaeq	r0, {r1, r5, r6, r8, sl, sp}
    4158:	9f300002 	svcls	0x00300002
    415c:	08002562 	stmdaeq	r0, {r1, r5, r6, r8, sl, sp}
    4160:	08002572 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, sp}
    4164:	00530001 	subseq	r0, r3, r1
    4168:	00000000 	andeq	r0, r0, r0
    416c:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    4170:	be080027 	cdplt	0, 0, cr0, cr8, cr7, {1}
    4174:	01080027 	tsteq	r8, r7, lsr #32
    4178:	27be5200 	ldrcs	r5, [lr, r0, lsl #4]!
    417c:	27c40800 	strbcs	r0, [r4, r0, lsl #16]
    4180:	00030800 	andeq	r0, r3, r0, lsl #16
    4184:	d29f7871 	addsle	r7, pc, #7405568	; 0x710000
    4188:	d8080027 	stmdale	r8, {r0, r1, r2, r5}
    418c:	01080027 	tsteq	r8, r7, lsr #32
    4190:	27d85200 	ldrbcs	r5, [r8, r0, lsl #4]
    4194:	27f40800 	ldrbcs	r0, [r4, r0, lsl #16]!
    4198:	00030800 	andeq	r0, r3, r0, lsl #16
    419c:	009f7871 	addseq	r7, pc, r1, ror r8	; <UNPREDICTABLE>
    41a0:	00000000 	andeq	r0, r0, r0
    41a4:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    41a8:	05080027 	streq	r0, [r8, #-39]	; 0x27
    41ac:	01080028 	tsteq	r8, r8, lsr #32
    41b0:	28055000 	stmdacs	r5, {ip, lr}
    41b4:	28580800 	ldmdacs	r8, {fp}^
    41b8:	00040800 	andeq	r0, r4, r0, lsl #16
    41bc:	9f5001f3 	svcls	0x005001f3
    41c0:	08002858 	stmdaeq	r0, {r3, r4, r6, fp, sp}
    41c4:	0800285b 	stmdaeq	r0, {r0, r1, r3, r4, r6, fp, sp}
    41c8:	5b500001 	blpl	14041d4 <_Min_Stack_Size+0x1403dd4>
    41cc:	78080028 	stmdavc	r8, {r3, r5}
    41d0:	04080028 	streq	r0, [r8], #-40	; 0x28
    41d4:	5001f300 	andpl	pc, r1, r0, lsl #6
    41d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    41dc:	00000000 	andeq	r0, r0, r0
    41e0:	0027f400 	eoreq	pc, r7, r0, lsl #8
    41e4:	00280008 	eoreq	r0, r8, r8
    41e8:	51000108 	tstpl	r0, r8, lsl #2
    41ec:	08002800 	stmdaeq	r0, {fp, sp}
    41f0:	0800281c 	stmdaeq	r0, {r2, r3, r4, fp, sp}
    41f4:	1c550001 	mrrcne	0, 0, r0, r5, cr1
    41f8:	4a080028 	bmi	2042a0 <_Min_Stack_Size+0x203ea0>
    41fc:	04080028 	streq	r0, [r8], #-40	; 0x28
    4200:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4204:	00284a9f 	mlaeq	r8, pc, sl, r4	; <UNPREDICTABLE>
    4208:	00285408 	eoreq	r5, r8, r8, lsl #8
    420c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    4210:	08002854 	stmdaeq	r0, {r2, r4, r6, fp, sp}
    4214:	08002858 	stmdaeq	r0, {r3, r4, r6, fp, sp}
    4218:	01f30004 	mvnseq	r0, r4
    421c:	28589f51 	ldmdacs	r8, {r0, r4, r6, r8, r9, sl, fp, ip, pc}^
    4220:	285b0800 	ldmdacs	fp, {fp}^
    4224:	00010800 	andeq	r0, r1, r0, lsl #16
    4228:	00285b51 	eoreq	r5, r8, r1, asr fp
    422c:	00287808 	eoreq	r7, r8, r8, lsl #16
    4230:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    423c:	0800281c 	stmdaeq	r0, {r2, r3, r4, fp, sp}
    4240:	08002844 	stmdaeq	r0, {r2, r6, fp, sp}
    4244:	44550001 	ldrbmi	r0, [r5], #-1
    4248:	49080028 	stmdbmi	r8, {r3, r5}
    424c:	02080028 	andeq	r0, r8, #40	; 0x28
    4250:	00047200 	andeq	r7, r4, r0, lsl #4
    4254:	00000000 	andeq	r0, r0, r0
    4258:	3a000000 	bcc	4260 <_Min_Stack_Size+0x3e60>
    425c:	44080028 	strmi	r0, [r8], #-40	; 0x28
    4260:	01080028 	tsteq	r8, r8, lsr #32
    4264:	28445500 	stmdacs	r4, {r8, sl, ip, lr}^
    4268:	28490800 	stmdacs	r9, {fp}^
    426c:	00020800 	andeq	r0, r2, r0, lsl #16
    4270:	00000472 	andeq	r0, r0, r2, ror r4
    4274:	00000000 	andeq	r0, r0, r0
    4278:	28780000 	ldmdacs	r8!, {}^	; <UNPREDICTABLE>
    427c:	28870800 	stmcs	r7, {fp}
    4280:	00010800 	andeq	r0, r1, r0, lsl #16
    4284:	00288750 	eoreq	r8, r8, r0, asr r7
    4288:	00288a08 	eoreq	r8, r8, r8, lsl #20
    428c:	f3000408 	vshl.u8	d0, d8, d0
    4290:	8a9f5001 	bhi	fe7d829c <_estack+0xde7a829c>
    4294:	9d080028 	stcls	0, cr0, [r8, #-160]	; 0xffffff60
    4298:	01080028 	tsteq	r8, r8, lsr #32
    429c:	289d5000 	ldmcs	sp, {ip, lr}
    42a0:	28d20800 	ldmcs	r2, {fp}^
    42a4:	00040800 	andeq	r0, r4, r0, lsl #16
    42a8:	9f5001f3 	svcls	0x005001f3
    42ac:	080028d2 	stmdaeq	r0, {r1, r4, r6, r7, fp, sp}
    42b0:	080028d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, sp}
    42b4:	d5500001 	ldrble	r0, [r0, #-1]
    42b8:	14080028 	strne	r0, [r8], #-40	; 0x28
    42bc:	04080029 	streq	r0, [r8], #-41	; 0x29
    42c0:	5001f300 	andpl	pc, r1, r0, lsl #6
    42c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    42c8:	00000000 	andeq	r0, r0, r0
    42cc:	00287800 	eoreq	r7, r8, r0, lsl #16
    42d0:	00288708 	eoreq	r8, r8, r8, lsl #14
    42d4:	51000108 	tstpl	r0, r8, lsl #2
    42d8:	08002887 	stmdaeq	r0, {r0, r1, r2, r7, fp, sp}
    42dc:	0800288a 	stmdaeq	r0, {r1, r3, r7, fp, sp}
    42e0:	01f30004 	mvnseq	r0, r4
    42e4:	288a9f51 	stmcs	sl, {r0, r4, r6, r8, r9, sl, fp, ip, pc}
    42e8:	28940800 	ldmcs	r4, {fp}
    42ec:	00010800 	andeq	r0, r1, r0, lsl #16
    42f0:	00289451 	eoreq	r9, r8, r1, asr r4
    42f4:	0028d208 	eoreq	sp, r8, r8, lsl #4
    42f8:	f3000408 	vshl.u8	d0, d8, d0
    42fc:	d29f5101 	addsle	r5, pc, #1073741824	; 0x40000000
    4300:	d5080028 	strle	r0, [r8, #-40]	; 0x28
    4304:	01080028 	tsteq	r8, r8, lsr #32
    4308:	28d55100 	ldmcs	r5, {r8, ip, lr}^
    430c:	29140800 	ldmdbcs	r4, {fp}
    4310:	00040800 	andeq	r0, r4, r0, lsl #16
    4314:	9f5101f3 	svcls	0x005101f3
	...
    4320:	08002878 	stmdaeq	r0, {r3, r4, r5, r6, fp, sp}
    4324:	08002887 	stmdaeq	r0, {r0, r1, r2, r7, fp, sp}
    4328:	87520001 	ldrbhi	r0, [r2, -r1]
    432c:	8a080028 	bhi	2043d4 <_Min_Stack_Size+0x203fd4>
    4330:	01080028 	tsteq	r8, r8, lsr #32
    4334:	288a5500 	stmcs	sl, {r8, sl, ip, lr}
    4338:	288e0800 	stmcs	lr, {fp}
    433c:	00010800 	andeq	r0, r1, r0, lsl #16
    4340:	00288e52 	eoreq	r8, r8, r2, asr lr
    4344:	0028b408 	eoreq	fp, r8, r8, lsl #8
    4348:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    434c:	080028b4 	stmdaeq	r0, {r2, r4, r5, r7, fp, sp}
    4350:	080028d2 	stmdaeq	r0, {r1, r4, r6, r7, fp, sp}
    4354:	01f30004 	mvnseq	r0, r4
    4358:	28d29f52 	ldmcs	r2, {r1, r4, r6, r8, r9, sl, fp, ip, pc}^
    435c:	28d50800 	ldmcs	r5, {fp}^
    4360:	00010800 	andeq	r0, r1, r0, lsl #16
    4364:	0028d552 	eoreq	sp, r8, r2, asr r5
    4368:	0028d808 	eoreq	sp, r8, r8, lsl #16
    436c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    4370:	080028d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, sp}
    4374:	080028e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, sp}
    4378:	01f30004 	mvnseq	r0, r4
    437c:	28e89f52 	stmiacs	r8!, {r1, r4, r6, r8, r9, sl, fp, ip, pc}^
    4380:	28f20800 	ldmcs	r2!, {fp}^
    4384:	00010800 	andeq	r0, r1, r0, lsl #16
    4388:	0028f255 	eoreq	pc, r8, r5, asr r2	; <UNPREDICTABLE>
    438c:	00291408 	eoreq	r1, r9, r8, lsl #8
    4390:	f3000408 	vshl.u8	d0, d8, d0
    4394:	009f5201 	addseq	r5, pc, r1, lsl #4
    4398:	00000000 	andeq	r0, r0, r0
    439c:	b4000000 	strlt	r0, [r0], #-0
    43a0:	d2080028 	andle	r0, r8, #40	; 0x28
    43a4:	01080028 	tsteq	r8, r8, lsr #32
    43a8:	28d85500 	ldmcs	r8, {r8, sl, ip, lr}^
    43ac:	28e20800 	stmiacs	r2!, {fp}^
    43b0:	00010800 	andeq	r0, r1, r0, lsl #16
    43b4:	0028e255 	eoreq	lr, r8, r5, asr r2
    43b8:	0028e708 	eoreq	lr, r8, r8, lsl #14
    43bc:	72000208 	andvc	r0, r0, #8, 4	; 0x80000000
    43c0:	00000004 	andeq	r0, r0, r4
    43c4:	00000000 	andeq	r0, r0, r0
    43c8:	0028d800 	eoreq	sp, r8, r0, lsl #16
    43cc:	0028e208 	eoreq	lr, r8, r8, lsl #4
    43d0:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    43d4:	080028e2 	stmdaeq	r0, {r1, r5, r6, r7, fp, sp}
    43d8:	080028e7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, fp, sp}
    43dc:	04720002 	ldrbteq	r0, [r2], #-2
	...
    43e8:	08002914 	stmdaeq	r0, {r2, r4, r8, fp, sp}
    43ec:	08002923 	stmdaeq	r0, {r0, r1, r5, r8, fp, sp}
    43f0:	23500001 	cmpcs	r0, #1
    43f4:	54080029 	strpl	r0, [r8], #-41	; 0x29
    43f8:	04080029 	streq	r0, [r8], #-41	; 0x29
    43fc:	5001f300 	andpl	pc, r1, r0, lsl #6
    4400:	0029549f 	mlaeq	r9, pc, r4, r5	; <UNPREDICTABLE>
    4404:	00295708 	eoreq	r5, r9, r8, lsl #14
    4408:	50000108 	andpl	r0, r0, r8, lsl #2
    440c:	08002957 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, fp, sp}
    4410:	08002980 	stmdaeq	r0, {r7, r8, fp, sp}
    4414:	01f30004 	mvnseq	r0, r4
    4418:	00009f50 	andeq	r9, r0, r0, asr pc
    441c:	00000000 	andeq	r0, r0, r0
    4420:	29140000 	ldmdbcs	r4, {}	; <UNPREDICTABLE>
    4424:	291e0800 	ldmdbcs	lr, {fp}
    4428:	00010800 	andeq	r0, r1, r0, lsl #16
    442c:	00291e51 	eoreq	r1, r9, r1, asr lr
    4430:	00293608 	eoreq	r3, r9, r8, lsl #12
    4434:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    4438:	08002936 	stmdaeq	r0, {r1, r2, r4, r5, r8, fp, sp}
    443c:	08002954 	stmdaeq	r0, {r2, r4, r6, r8, fp, sp}
    4440:	01f30004 	mvnseq	r0, r4
    4444:	29549f51 	ldmdbcs	r4, {r0, r4, r6, r8, r9, sl, fp, ip, pc}^
    4448:	29570800 	ldmdbcs	r7, {fp}^
    444c:	00010800 	andeq	r0, r1, r0, lsl #16
    4450:	00295751 	eoreq	r5, r9, r1, asr r7
    4454:	00295a08 	eoreq	r5, r9, r8, lsl #20
    4458:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    445c:	0800295a 	stmdaeq	r0, {r1, r3, r4, r6, r8, fp, sp}
    4460:	08002980 	stmdaeq	r0, {r7, r8, fp, sp}
    4464:	01f30004 	mvnseq	r0, r4
    4468:	00009f51 	andeq	r9, r0, r1, asr pc
    446c:	00000000 	andeq	r0, r0, r0
    4470:	29360000 	ldmdbcs	r6!, {}	; <UNPREDICTABLE>
    4474:	29540800 	ldmdbcs	r4, {fp}^
    4478:	00010800 	andeq	r0, r1, r0, lsl #16
    447c:	00295a55 	eoreq	r5, r9, r5, asr sl
    4480:	00296408 	eoreq	r6, r9, r8, lsl #8
    4484:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    4488:	08002964 	stmdaeq	r0, {r2, r5, r6, r8, fp, sp}
    448c:	08002969 	stmdaeq	r0, {r0, r3, r5, r6, r8, fp, sp}
    4490:	04720002 	ldrbteq	r0, [r2], #-2
	...
    449c:	0800295a 	stmdaeq	r0, {r1, r3, r4, r6, r8, fp, sp}
    44a0:	08002964 	stmdaeq	r0, {r2, r5, r6, r8, fp, sp}
    44a4:	64550001 	ldrbvs	r0, [r5], #-1
    44a8:	69080029 	stmdbvs	r8, {r0, r3, r5}
    44ac:	02080029 	andeq	r0, r8, #41	; 0x29
    44b0:	00047200 	andeq	r7, r4, r0, lsl #4
    44b4:	00000000 	andeq	r0, r0, r0
    44b8:	80000000 	andhi	r0, r0, r0
    44bc:	90080029 	andls	r0, r8, r9, lsr #32
    44c0:	01080029 	tsteq	r8, r9, lsr #32
    44c4:	29905000 	ldmibcs	r0, {ip, lr}
    44c8:	29de0800 	ldmibcs	lr, {fp}^
    44cc:	00040800 	andeq	r0, r4, r0, lsl #16
    44d0:	9f5001f3 	svcls	0x005001f3
    44d4:	080029de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, fp, sp}
    44d8:	080029e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, fp, sp}
    44dc:	e1500001 	cmp	r0, r1
    44e0:	fc080029 	stc2	0, cr0, [r8], {41}	; 0x29
    44e4:	04080029 	streq	r0, [r8], #-41	; 0x29
    44e8:	5001f300 	andpl	pc, r1, r0, lsl #6
    44ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    44f0:	00000000 	andeq	r0, r0, r0
    44f4:	0029c800 	eoreq	ip, r9, r0, lsl #16
    44f8:	0029d208 	eoreq	sp, r9, r8, lsl #4
    44fc:	31000208 	tstcc	r0, r8, lsl #4
    4500:	0029d29f 	mlaeq	r9, pc, r2, sp	; <UNPREDICTABLE>
    4504:	0029d408 	eoreq	sp, r9, r8, lsl #8
    4508:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    4514:	080029fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, sp}
    4518:	08002a13 	stmdaeq	r0, {r0, r1, r4, r9, fp, sp}
    451c:	13500001 	cmpne	r0, #1
    4520:	4c08002a 	stcmi	0, cr0, [r8], {42}	; 0x2a
    4524:	0408002a 	streq	r0, [r8], #-42	; 0x2a
    4528:	5001f300 	andpl	pc, r1, r0, lsl #6
    452c:	002a4c9f 	mlaeq	sl, pc, ip, r4	; <UNPREDICTABLE>
    4530:	002a4f08 	eoreq	r4, sl, r8, lsl #30
    4534:	50000108 	andpl	r0, r0, r8, lsl #2
    4538:	08002a4f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r9, fp, sp}
    453c:	08002a52 	stmdaeq	r0, {r1, r4, r6, r9, fp, sp}
    4540:	01f30004 	mvnseq	r0, r4
    4544:	2a529f50 	bcs	14ac28c <_Min_Stack_Size+0x14abe8c>
    4548:	2a550800 	bcs	1546550 <_Min_Stack_Size+0x1546150>
    454c:	00010800 	andeq	r0, r1, r0, lsl #16
    4550:	002a5550 	eoreq	r5, sl, r0, asr r5
    4554:	002a6c08 	eoreq	r6, sl, r8, lsl #24
    4558:	f3000408 	vshl.u8	d0, d8, d0
    455c:	009f5001 	addseq	r5, pc, r1
    4560:	00000000 	andeq	r0, r0, r0
    4564:	fc000000 	stc2	0, cr0, [r0], {-0}
    4568:	13080029 	movwne	r0, #32809	; 0x8029
    456c:	0108002a 	tsteq	r8, sl, lsr #32
    4570:	2a135100 	bcs	4d8978 <_Min_Stack_Size+0x4d8578>
    4574:	2a4c0800 	bcs	130657c <_Min_Stack_Size+0x130617c>
    4578:	00040800 	andeq	r0, r4, r0, lsl #16
    457c:	9f5101f3 	svcls	0x005101f3
    4580:	08002a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp, sp}
    4584:	08002a4f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r9, fp, sp}
    4588:	4f510001 	svcmi	0x00510001
    458c:	5208002a 	andpl	r0, r8, #42	; 0x2a
    4590:	0408002a 	streq	r0, [r8], #-42	; 0x2a
    4594:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4598:	002a529f 	mlaeq	sl, pc, r2, r5	; <UNPREDICTABLE>
    459c:	002a5508 	eoreq	r5, sl, r8, lsl #10
    45a0:	51000108 	tstpl	r0, r8, lsl #2
    45a4:	08002a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp, sp}
    45a8:	08002a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, sp}
    45ac:	01f30004 	mvnseq	r0, r4
    45b0:	00009f51 	andeq	r9, r0, r1, asr pc
    45b4:	00000000 	andeq	r0, r0, r0
    45b8:	2a060000 	bcs	1845c0 <_Min_Stack_Size+0x1841c0>
    45bc:	2a4c0800 	bcs	13065c4 <_Min_Stack_Size+0x13061c4>
    45c0:	00010800 	andeq	r0, r1, r0, lsl #16
    45c4:	002a5254 	eoreq	r5, sl, r4, asr r2
    45c8:	002a6c08 	eoreq	r6, sl, r8, lsl #24
    45cc:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    45d8:	08002a40 	stmdaeq	r0, {r6, r9, fp, sp}
    45dc:	08002a4a 	stmdaeq	r0, {r1, r3, r6, r9, fp, sp}
    45e0:	9f310002 	svcls	0x00310002
    45e4:	08002a4a 	stmdaeq	r0, {r1, r3, r6, r9, fp, sp}
    45e8:	08002a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp, sp}
    45ec:	00500001 	subseq	r0, r0, r1
    45f0:	00000000 	andeq	r0, r0, r0
    45f4:	6c000000 	stcvs	0, cr0, [r0], {-0}
    45f8:	8108002a 	tsthi	r8, sl, lsr #32
    45fc:	0108002a 	tsteq	r8, sl, lsr #32
    4600:	2a815000 	bcs	fe058608 <_estack+0xde028608>
    4604:	2a8c0800 	bcs	fe30660c <_estack+0xde2d660c>
    4608:	00040800 	andeq	r0, r4, r0, lsl #16
    460c:	9f5001f3 	svcls	0x005001f3
	...
    4618:	08002a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, sp}
    461c:	08002a99 	stmdaeq	r0, {r0, r3, r4, r7, r9, fp, sp}
    4620:	99500001 	ldmdbls	r0, {r0}^
    4624:	e608002a 	str	r0, [r8], -sl, lsr #32
    4628:	0108002a 	tsteq	r8, sl, lsr #32
    462c:	2ae65400 	bcs	ff999634 <_estack+0xdf969634>
    4630:	2ae90800 	bcs	ffa46638 <_estack+0xdfa16638>
    4634:	00010800 	andeq	r0, r1, r0, lsl #16
    4638:	002ae950 	eoreq	lr, sl, r0, asr r9
    463c:	002aec08 	eoreq	lr, sl, r8, lsl #24
    4640:	54000108 	strpl	r0, [r0], #-264	; 0x108
    4644:	08002aec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, fp, sp}
    4648:	08002aef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r9, fp, sp}
    464c:	ef500001 	svc	0x00500001
    4650:	fc08002a 	stc2	0, cr0, [r8], {42}	; 0x2a
    4654:	0108002a 	tsteq	r8, sl, lsr #32
    4658:	00005400 	andeq	r5, r0, r0, lsl #8
    465c:	00000000 	andeq	r0, r0, r0
    4660:	2a8c0000 	bcs	fe304668 <_estack+0xde2d4668>
    4664:	2a990800 	bcs	fe64666c <_estack+0xde61666c>
    4668:	00010800 	andeq	r0, r1, r0, lsl #16
    466c:	002a9951 	eoreq	r9, sl, r1, asr r9
    4670:	002ac608 	eoreq	ip, sl, r8, lsl #12
    4674:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    4678:	08002ac6 	stmdaeq	r0, {r1, r2, r6, r7, r9, fp, sp}
    467c:	08002ad2 	stmdaeq	r0, {r1, r4, r6, r7, r9, fp, sp}
    4680:	01f30004 	mvnseq	r0, r4
    4684:	2ad29f51 	bcs	ff4ac3d0 <_estack+0xdf47c3d0>
    4688:	2ad40800 	bcs	ff506690 <_estack+0xdf4d6690>
    468c:	00010800 	andeq	r0, r1, r0, lsl #16
    4690:	002ad455 	eoreq	sp, sl, r5, asr r4
    4694:	002adc08 	eoreq	sp, sl, r8, lsl #24
    4698:	f3000408 	vshl.u8	d0, d8, d0
    469c:	dc9f5101 	ldfles	f5, [pc], {1}
    46a0:	de08002a 	cdple	0, 0, cr0, cr8, cr10, {1}
    46a4:	0108002a 	tsteq	r8, sl, lsr #32
    46a8:	2ade5500 	bcs	ff799ab0 <_estack+0xdf769ab0>
    46ac:	2ae60800 	bcs	ff9866b4 <_estack+0xdf9566b4>
    46b0:	00040800 	andeq	r0, r4, r0, lsl #16
    46b4:	9f5101f3 	svcls	0x005101f3
    46b8:	08002ae6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, fp, sp}
    46bc:	08002ae9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, fp, sp}
    46c0:	e9510001 	ldmdb	r1, {r0}^
    46c4:	ec08002a 	stc	0, cr0, [r8], {42}	; 0x2a
    46c8:	0108002a 	tsteq	r8, sl, lsr #32
    46cc:	2aec5500 	bcs	ffb19ad4 <_estack+0xdfae9ad4>
    46d0:	2aef0800 	bcs	ffbc66d8 <_estack+0xdfb966d8>
    46d4:	00010800 	andeq	r0, r1, r0, lsl #16
    46d8:	002aef51 	eoreq	lr, sl, r1, asr pc
    46dc:	002afc08 	eoreq	pc, sl, r8, lsl #24
    46e0:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    46ec:	08002aca 	stmdaeq	r0, {r1, r3, r6, r7, r9, fp, sp}
    46f0:	08002ad2 	stmdaeq	r0, {r1, r4, r6, r7, r9, fp, sp}
    46f4:	d4550001 	ldrble	r0, [r5], #-1
    46f8:	dc08002a 	stcle	0, cr0, [r8], {42}	; 0x2a
    46fc:	0108002a 	tsteq	r8, sl, lsr #32
    4700:	2ade5500 	bcs	ff799b08 <_estack+0xdf769b08>
    4704:	2ae60800 	bcs	ff98670c <_estack+0xdf95670c>
    4708:	00010800 	andeq	r0, r1, r0, lsl #16
    470c:	00000055 	andeq	r0, r0, r5, asr r0
    4710:	00000000 	andeq	r0, r0, r0
    4714:	002aa200 	eoreq	sl, sl, r0, lsl #4
    4718:	002abc08 	eoreq	fp, sl, r8, lsl #24
    471c:	52000108 	andpl	r0, r0, #8, 2
    4720:	08002ad2 	stmdaeq	r0, {r1, r4, r6, r7, r9, fp, sp}
    4724:	08002ad7 	stmdaeq	r0, {r0, r1, r2, r4, r6, r7, r9, fp, sp}
    4728:	dc520001 	mrrcle	0, 0, r0, r2, cr1
    472c:	e108002a 	tst	r8, sl, lsr #32
    4730:	0108002a 	tsteq	r8, sl, lsr #32
    4734:	00005200 	andeq	r5, r0, r0, lsl #4
    4738:	00000000 	andeq	r0, r0, r0
    473c:	2ac40000 	bcs	ff104744 <_estack+0xdf0d4744>
    4740:	2ad20800 	bcs	ff486748 <_estack+0xdf456748>
    4744:	00010800 	andeq	r0, r1, r0, lsl #16
    4748:	00000054 	andeq	r0, r0, r4, asr r0
    474c:	00000000 	andeq	r0, r0, r0
    4750:	002b0800 	eoreq	r0, fp, r0, lsl #16
    4754:	002b0c08 	eoreq	r0, fp, r8, lsl #24
    4758:	50000108 	andpl	r0, r0, r8, lsl #2
    475c:	08002b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, sp}
    4760:	08002b0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, fp, sp}
    4764:	01f30004 	mvnseq	r0, r4
    4768:	00009f50 	andeq	r9, r0, r0, asr pc
    476c:	00000000 	andeq	r0, r0, r0
    4770:	2b0a0000 	blcs	284778 <_Min_Stack_Size+0x284378>
    4774:	2b0c0800 	blcs	30677c <_Min_Stack_Size+0x30637c>
    4778:	00010800 	andeq	r0, r1, r0, lsl #16
    477c:	00000050 	andeq	r0, r0, r0, asr r0
    4780:	00000000 	andeq	r0, r0, r0
    4784:	002b1200 	eoreq	r1, fp, r0, lsl #4
    4788:	002b1408 	eoreq	r1, fp, r8, lsl #8
    478c:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    4798:	08002b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, sp}
    479c:	08002b82 	stmdaeq	r0, {r1, r7, r8, r9, fp, sp}
    47a0:	82500001 	subshi	r0, r0, #1
    47a4:	a408002b 	strge	r0, [r8], #-43	; 0x2b
    47a8:	0108002b 	tsteq	r8, fp, lsr #32
    47ac:	2ba45400 	blcs	fe9197b4 <_estack+0xde8e97b4>
    47b0:	2ba70800 	blcs	fe9c67b8 <_estack+0xde9967b8>
    47b4:	00030800 	andeq	r0, r3, r0, lsl #16
    47b8:	a79f7c71 			; <UNDEFINED> instruction: 0xa79f7c71
    47bc:	b408002b 	strlt	r0, [r8], #-43	; 0x2b
    47c0:	0408002b 	streq	r0, [r8], #-43	; 0x2b
    47c4:	5001f300 	andpl	pc, r1, r0, lsl #6
    47c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    47cc:	00000000 	andeq	r0, r0, r0
    47d0:	002bb400 	eoreq	fp, fp, r0, lsl #8
    47d4:	002bc608 	eoreq	ip, fp, r8, lsl #12
    47d8:	50000108 	andpl	r0, r0, r8, lsl #2
    47dc:	08002bc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, fp, sp}
    47e0:	08002bf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, fp, sp}
    47e4:	f4540001 			; <UNDEFINED> instruction: 0xf4540001
    47e8:	f708002b 			; <UNDEFINED> instruction: 0xf708002b
    47ec:	0308002b 	movweq	r0, #32811	; 0x802b
    47f0:	9f7c7100 	svcls	0x007c7100
    47f4:	08002bf7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, r9, fp, sp}
    47f8:	08002bf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, fp, sp}
    47fc:	01f30004 	mvnseq	r0, r4
    4800:	2bf89f50 	blcs	ffe2c548 <_estack+0xdfdfc548>
    4804:	2c040800 	stccs	8, cr0, [r4], {-0}
    4808:	00010800 	andeq	r0, r1, r0, lsl #16
    480c:	00000050 	andeq	r0, r0, r0, asr r0
    4810:	00000000 	andeq	r0, r0, r0
    4814:	002c1c00 	eoreq	r1, ip, r0, lsl #24
    4818:	002c4a08 	eoreq	r4, ip, r8, lsl #20
    481c:	30000208 	andcc	r0, r0, r8, lsl #4
    4820:	002c4a9f 	mlaeq	ip, pc, sl, r4	; <UNPREDICTABLE>
    4824:	002c5008 	eoreq	r5, ip, r8
    4828:	50000108 	andpl	r0, r0, r8, lsl #2
    482c:	08002c50 	stmdaeq	r0, {r4, r6, sl, fp, sp}
    4830:	08002c86 	stmdaeq	r0, {r1, r2, r7, sl, fp, sp}
    4834:	9f300002 	svcls	0x00300002
    4838:	08002c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, sp}
    483c:	08002cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, sp}
    4840:	9f300002 	svcls	0x00300002
	...
    484c:	08002cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, sp}
    4850:	08002cc6 	stmdaeq	r0, {r1, r2, r6, r7, sl, fp, sp}
    4854:	c6500001 	ldrbgt	r0, [r0], -r1
    4858:	0008002c 	andeq	r0, r8, ip, lsr #32
    485c:	0108002d 	tsteq	r8, sp, lsr #32
    4860:	2d005b00 	vstrcs	d5, [r0, #-0]
    4864:	2d030800 	stccs	8, cr0, [r3, #-0]
    4868:	00010800 	andeq	r0, r1, r0, lsl #16
    486c:	002d0350 	eoreq	r0, sp, r0, asr r3
    4870:	002d5c08 	eoreq	r5, sp, r8, lsl #24
    4874:	5b000108 	blpl	4c9c <_Min_Stack_Size+0x489c>
	...
    4880:	08002cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, sp}
    4884:	08002cc9 	stmdaeq	r0, {r0, r3, r6, r7, sl, fp, sp}
    4888:	c9510001 	ldmdbgt	r1, {r0}^
    488c:	0008002c 	andeq	r0, r8, ip, lsr #32
    4890:	0108002d 	tsteq	r8, sp, lsr #32
    4894:	2d005500 	cfstr32cs	mvfx5, [r0, #-0]
    4898:	2d030800 	stccs	8, cr0, [r3, #-0]
    489c:	00010800 	andeq	r0, r1, r0, lsl #16
    48a0:	002d0351 	eoreq	r0, sp, r1, asr r3
    48a4:	002d5c08 	eoreq	r5, sp, r8, lsl #24
    48a8:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    48b4:	08002cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, sp}
    48b8:	08002cc9 	stmdaeq	r0, {r0, r3, r6, r7, sl, fp, sp}
    48bc:	c9520001 	ldmdbgt	r2, {r0}^
    48c0:	0008002c 	andeq	r0, r8, ip, lsr #32
    48c4:	0108002d 	tsteq	r8, sp, lsr #32
    48c8:	2d005a00 	vstrcs	s10, [r0, #-0]
    48cc:	2d030800 	stccs	8, cr0, [r3, #-0]
    48d0:	00010800 	andeq	r0, r1, r0, lsl #16
    48d4:	002d0352 	eoreq	r0, sp, r2, asr r3
    48d8:	002d5c08 	eoreq	r5, sp, r8, lsl #24
    48dc:	5a000108 	bpl	4d04 <_Min_Stack_Size+0x4904>
	...
    48e8:	08002cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, sp}
    48ec:	08002cc9 	stmdaeq	r0, {r0, r3, r6, r7, sl, fp, sp}
    48f0:	c9530001 	ldmdbgt	r3, {r0}^
    48f4:	0008002c 	andeq	r0, r8, ip, lsr #32
    48f8:	0108002d 	tsteq	r8, sp, lsr #32
    48fc:	2d005700 	stccs	7, cr5, [r0, #-0]
    4900:	2d030800 	stccs	8, cr0, [r3, #-0]
    4904:	00010800 	andeq	r0, r1, r0, lsl #16
    4908:	002d0353 	eoreq	r0, sp, r3, asr r3
    490c:	002d5c08 	eoreq	r5, sp, r8, lsl #24
    4910:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    491c:	08002cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, sp}
    4920:	08002d00 	stmdaeq	r0, {r8, sl, fp, sp}
    4924:	00910002 	addseq	r0, r1, r2
    4928:	08002d00 	stmdaeq	r0, {r8, sl, fp, sp}
    492c:	08002d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, sp}
    4930:	00910002 	addseq	r0, r1, r2
	...
    493c:	08002cca 	stmdaeq	r0, {r1, r3, r6, r7, sl, fp, sp}
    4940:	08002cd3 	stmdaeq	r0, {r0, r1, r4, r6, r7, sl, fp, sp}
    4944:	d3500001 	cmple	r0, #1
    4948:	0008002c 	andeq	r0, r8, ip, lsr #32
    494c:	0108002d 	tsteq	r8, sp, lsr #32
    4950:	2d005400 	cfstrscs	mvf5, [r0, #-0]
    4954:	2d060800 	stccs	8, cr0, [r6, #-0]
    4958:	00020800 	andeq	r0, r2, r0, lsl #16
    495c:	2d069f30 	stccs	15, cr9, [r6, #-192]	; 0xffffff40
    4960:	2d5c0800 	ldclcs	8, cr0, [ip, #-0]
    4964:	00010800 	andeq	r0, r1, r0, lsl #16
    4968:	00000054 	andeq	r0, r0, r4, asr r0
    496c:	00000000 	andeq	r0, r0, r0
    4970:	002d5c00 	eoreq	r5, sp, r0, lsl #24
    4974:	002d7308 	eoreq	r7, sp, r8, lsl #6
    4978:	50000108 	andpl	r0, r0, r8, lsl #2
    497c:	08002d73 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, sl, fp, sp}
    4980:	08002d88 	stmdaeq	r0, {r3, r7, r8, sl, fp, sp}
    4984:	01f30004 	mvnseq	r0, r4
    4988:	2d889f50 	stccs	15, cr9, [r8, #320]	; 0x140
    498c:	2d8c0800 	stccs	8, cr0, [ip]
    4990:	00010800 	andeq	r0, r1, r0, lsl #16
    4994:	002d8c50 	eoreq	r8, sp, r0, asr ip
    4998:	002d9308 	eoreq	r9, sp, r8, lsl #6
    499c:	91000208 	tstls	r0, r8, lsl #4
    49a0:	002d936c 	eoreq	r9, sp, ip, ror #6
    49a4:	002da808 	eoreq	sl, sp, r8, lsl #16
    49a8:	f3000408 	vshl.u8	d0, d8, d0
    49ac:	a89f5001 	ldmge	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    49b0:	aa08002d 	bge	204a6c <_Min_Stack_Size+0x20466c>
    49b4:	0108002d 	tsteq	r8, sp, lsr #32
    49b8:	2daa5000 	stccs	0, cr5, [sl]
    49bc:	2db40800 	ldccs	8, cr0, [r4]
    49c0:	00040800 	andeq	r0, r4, r0, lsl #16
    49c4:	9f5001f3 	svcls	0x005001f3
	...
    49d0:	08002d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, sp}
    49d4:	08002d73 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, sl, fp, sp}
    49d8:	73510001 	cmpvc	r1, #1
    49dc:	8808002d 	stmdahi	r8, {r0, r2, r3, r5}
    49e0:	0408002d 	streq	r0, [r8], #-45	; 0x2d
    49e4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    49e8:	002d889f 	mlaeq	sp, pc, r8, r8	; <UNPREDICTABLE>
    49ec:	002d8e08 	eoreq	r8, sp, r8, lsl #28
    49f0:	51000108 	tstpl	r0, r8, lsl #2
    49f4:	08002d8e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sl, fp, sp}
    49f8:	08002d93 	stmdaeq	r0, {r0, r1, r4, r7, r8, sl, fp, sp}
    49fc:	00710002 	rsbseq	r0, r1, r2
    4a00:	08002d93 	stmdaeq	r0, {r0, r1, r4, r7, r8, sl, fp, sp}
    4a04:	08002da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, sp}
    4a08:	01f30004 	mvnseq	r0, r4
    4a0c:	2da89f51 	stccs	15, cr9, [r8, #324]!	; 0x144
    4a10:	2db40800 	ldccs	8, cr0, [r4]
    4a14:	00010800 	andeq	r0, r1, r0, lsl #16
    4a18:	00000051 	andeq	r0, r0, r1, asr r0
    4a1c:	00000000 	andeq	r0, r0, r0
    4a20:	002d5c00 	eoreq	r5, sp, r0, lsl #24
    4a24:	002d7308 	eoreq	r7, sp, r8, lsl #6
    4a28:	52000108 	andpl	r0, r0, #8, 2
    4a2c:	08002d73 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, sl, fp, sp}
    4a30:	08002d88 	stmdaeq	r0, {r3, r7, r8, sl, fp, sp}
    4a34:	01f30004 	mvnseq	r0, r4
    4a38:	2d889f52 	stccs	15, cr9, [r8, #328]	; 0x148
    4a3c:	2d8a0800 	stccs	8, cr0, [sl]
    4a40:	00010800 	andeq	r0, r1, r0, lsl #16
    4a44:	002d8a52 	eoreq	r8, sp, r2, asr sl
    4a48:	002d9308 	eoreq	r9, sp, r8, lsl #6
    4a4c:	91000208 	tstls	r0, r8, lsl #4
    4a50:	002d9368 	eoreq	r9, sp, r8, ror #6
    4a54:	002da808 	eoreq	sl, sp, r8, lsl #16
    4a58:	f3000408 	vshl.u8	d0, d8, d0
    4a5c:	a89f5201 	ldmge	pc, {r0, r9, ip, lr}	; <UNPREDICTABLE>
    4a60:	b408002d 	strlt	r0, [r8], #-45	; 0x2d
    4a64:	0108002d 	tsteq	r8, sp, lsr #32
    4a68:	00005200 	andeq	r5, r0, r0, lsl #4
    4a6c:	00000000 	andeq	r0, r0, r0
    4a70:	2d5c0000 	ldclcs	0, cr0, [ip, #-0]
    4a74:	2d730800 	ldclcs	8, cr0, [r3, #-0]
    4a78:	00010800 	andeq	r0, r1, r0, lsl #16
    4a7c:	002d7353 	eoreq	r7, sp, r3, asr r3
    4a80:	002d8808 	eoreq	r8, sp, r8, lsl #16
    4a84:	f3000408 	vshl.u8	d0, d8, d0
    4a88:	889f5301 	ldmhi	pc, {r0, r8, r9, ip, lr}	; <UNPREDICTABLE>
    4a8c:	9008002d 	andls	r0, r8, sp, lsr #32
    4a90:	0108002d 	tsteq	r8, sp, lsr #32
    4a94:	2d905300 	ldccs	3, cr5, [r0]
    4a98:	2d930800 	ldccs	8, cr0, [r3]
    4a9c:	00010800 	andeq	r0, r1, r0, lsl #16
    4aa0:	002d9352 	eoreq	r9, sp, r2, asr r3
    4aa4:	002da808 	eoreq	sl, sp, r8, lsl #16
    4aa8:	f3000408 	vshl.u8	d0, d8, d0
    4aac:	a89f5301 	ldmge	pc, {r0, r8, r9, ip, lr}	; <UNPREDICTABLE>
    4ab0:	b408002d 	strlt	r0, [r8], #-45	; 0x2d
    4ab4:	0108002d 	tsteq	r8, sp, lsr #32
    4ab8:	00005300 	andeq	r5, r0, r0, lsl #6
    4abc:	00000000 	andeq	r0, r0, r0
    4ac0:	2d5c0000 	ldclcs	0, cr0, [ip, #-0]
    4ac4:	2d880800 	stccs	8, cr0, [r8]
    4ac8:	00020800 	andeq	r0, r2, r0, lsl #16
    4acc:	2d880091 	stccs	0, cr0, [r8, #580]	; 0x244
    4ad0:	2dae0800 	stccs	8, cr0, [lr]
    4ad4:	00020800 	andeq	r0, r2, r0, lsl #16
    4ad8:	2dae0091 	stccs	0, cr0, [lr, #580]!	; 0x244
    4adc:	2db40800 	ldccs	8, cr0, [r4]
    4ae0:	00020800 	andeq	r0, r2, r0, lsl #16
    4ae4:	0000007d 	andeq	r0, r0, sp, ror r0
    4ae8:	00000000 	andeq	r0, r0, r0
    4aec:	2d5c0000 	ldclcs	0, cr0, [ip, #-0]
    4af0:	2d840800 	stccs	8, cr0, [r4]
    4af4:	00020800 	andeq	r0, r2, r0, lsl #16
    4af8:	2d849f30 	stccs	15, cr9, [r4, #192]	; 0xc0
    4afc:	2d880800 	stccs	8, cr0, [r8]
    4b00:	00010800 	andeq	r0, r1, r0, lsl #16
    4b04:	002d8850 	eoreq	r8, sp, r0, asr r8
    4b08:	002d9408 	eoreq	r9, sp, r8, lsl #8
    4b0c:	30000208 	andcc	r0, r0, r8, lsl #4
    4b10:	002d949f 	mlaeq	sp, pc, r4, r9	; <UNPREDICTABLE>
    4b14:	002d9808 	eoreq	r9, sp, r8, lsl #16
    4b18:	50000108 	andpl	r0, r0, r8, lsl #2
    4b1c:	08002d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, sp}
    4b20:	08002da4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp, sp}
    4b24:	9f300002 	svcls	0x00300002
    4b28:	08002da4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp, sp}
    4b2c:	08002da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, sp}
    4b30:	a8500001 	ldmdage	r0, {r0}^
    4b34:	aa08002d 	bge	204bf0 <_Min_Stack_Size+0x2047f0>
    4b38:	0208002d 	andeq	r0, r8, #45	; 0x2d
    4b3c:	aa9f3000 	bge	fe7d0b44 <_estack+0xde7a0b44>
    4b40:	b408002d 	strlt	r0, [r8], #-45	; 0x2d
    4b44:	0108002d 	tsteq	r8, sp, lsr #32
    4b48:	00005000 	andeq	r5, r0, r0
    4b4c:	00000000 	andeq	r0, r0, r0
    4b50:	2db40000 	ldccs	0, cr0, [r4]
    4b54:	2dc20800 	stclcs	8, cr0, [r2]
    4b58:	00010800 	andeq	r0, r1, r0, lsl #16
    4b5c:	002dc250 	eoreq	ip, sp, r0, asr r2
    4b60:	00309008 	eorseq	r9, r0, r8
    4b64:	f3000408 	vshl.u8	d0, d8, d0
    4b68:	009f5001 	addseq	r5, pc, r1
    4b6c:	00000000 	andeq	r0, r0, r0
    4b70:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    4b74:	0a08002d 	beq	204c30 <_Min_Stack_Size+0x204830>
    4b78:	0108002e 	tsteq	r8, lr, lsr #32
    4b7c:	2e9a5600 	cdpcs	6, 9, cr5, cr10, cr0, {0}
    4b80:	2ea60800 	cdpcs	8, 10, cr0, cr6, cr0, {0}
    4b84:	00010800 	andeq	r0, r1, r0, lsl #16
    4b88:	002f1256 	eoreq	r1, pc, r6, asr r2	; <UNPREDICTABLE>
    4b8c:	002f4008 	eoreq	r4, pc, r8
    4b90:	56000108 	strpl	r0, [r0], -r8, lsl #2
    4b94:	08002f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp, sp}
    4b98:	08002fe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp, sp}
    4b9c:	5c560001 	mrrcpl	0, 0, r0, r6, cr1
    4ba0:	68080030 	stmdavs	r8, {r4, r5}
    4ba4:	01080030 	tsteq	r8, r0, lsr r0
    4ba8:	00005600 	andeq	r5, r0, r0, lsl #12
    4bac:	00000000 	andeq	r0, r0, r0
    4bb0:	2dd80000 	ldclcs	0, cr0, [r8]
    4bb4:	2e0a0800 	cdpcs	8, 0, cr0, cr10, cr0, {0}
    4bb8:	00010800 	andeq	r0, r1, r0, lsl #16
    4bbc:	002ea056 	eoreq	sl, lr, r6, asr r0
    4bc0:	002ea608 	eoreq	sl, lr, r8, lsl #12
    4bc4:	56000108 	strpl	r0, [r0], -r8, lsl #2
    4bc8:	08002f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp, sp}
    4bcc:	08002f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, sp}
    4bd0:	96560001 	ldrbls	r0, [r6], -r1
    4bd4:	e808002f 	stmda	r8, {r0, r1, r2, r3, r5}
    4bd8:	0108002f 	tsteq	r8, pc, lsr #32
    4bdc:	305c5600 	subscc	r5, ip, r0, lsl #12
    4be0:	30680800 	rsbcc	r0, r8, r0, lsl #16
    4be4:	00010800 	andeq	r0, r1, r0, lsl #16
    4be8:	00000056 	andeq	r0, r0, r6, asr r0
    4bec:	00000000 	andeq	r0, r0, r0
    4bf0:	002dec00 	eoreq	lr, sp, r0, lsl #24
    4bf4:	002e0a08 	eoreq	r0, lr, r8, lsl #20
    4bf8:	30000208 	andcc	r0, r0, r8, lsl #4
    4bfc:	002edc9f 	mlaeq	lr, pc, ip, sp	; <UNPREDICTABLE>
    4c00:	002ee208 	eoreq	lr, lr, r8, lsl #4
    4c04:	31000208 	tstcc	r0, r8, lsl #4
    4c08:	002f129f 	mlaeq	pc, pc, r2, r1	; <UNPREDICTABLE>
    4c0c:	002f4008 	eoreq	r4, pc, r8
    4c10:	30000208 	andcc	r0, r0, r8, lsl #4
    4c14:	002f969f 	mlaeq	pc, pc, r6, r9	; <UNPREDICTABLE>
    4c18:	002fe808 	eoreq	lr, pc, r8, lsl #16
    4c1c:	30000208 	andcc	r0, r0, r8, lsl #4
    4c20:	00305c9f 	mlaseq	r0, pc, ip, r5	; <UNPREDICTABLE>
    4c24:	00306808 	eorseq	r6, r0, r8, lsl #16
    4c28:	30000208 	andcc	r0, r0, r8, lsl #4
    4c2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4c30:	00000000 	andeq	r0, r0, r0
    4c34:	002ddc00 	eoreq	sp, sp, r0, lsl #24
    4c38:	002e9a08 	eoreq	r9, lr, r8, lsl #20
    4c3c:	f2000608 	vmax.s8	d0, d0, d8
    4c40:	00006931 	andeq	r6, r0, r1, lsr r9
    4c44:	002ea000 	eoreq	sl, lr, r0
    4c48:	00309008 	eorseq	r9, r0, r8
    4c4c:	f2000608 	vmax.s8	d0, d0, d8
    4c50:	00006931 	andeq	r6, r0, r1, lsr r9
	...
    4c5c:	002dea00 	eoreq	lr, sp, r0, lsl #20
    4c60:	002dfc08 	eoreq	pc, sp, r8, lsl #24
    4c64:	50000108 	andpl	r0, r0, r8, lsl #2
    4c68:	08002dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp, sp}
    4c6c:	08002e0a 	stmdaeq	r0, {r1, r3, r9, sl, fp, sp}
    4c70:	a0570001 	subsge	r0, r7, r1
    4c74:	a608002e 	strge	r0, [r8], -lr, lsr #32
    4c78:	0108002e 	tsteq	r8, lr, lsr #32
    4c7c:	2ea65000 	cdpcs	0, 10, cr5, cr6, cr0, {0}
    4c80:	2efa0800 	cdpcs	8, 15, cr0, cr10, cr0, {0}
    4c84:	00010800 	andeq	r0, r1, r0, lsl #16
    4c88:	002f1257 	eoreq	r1, pc, r7, asr r2	; <UNPREDICTABLE>
    4c8c:	002f1808 	eoreq	r1, pc, r8, lsl #16
    4c90:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    4c94:	08002f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, sp}
    4c98:	08002f1b 	stmdaeq	r0, {r0, r1, r3, r4, r8, r9, sl, fp, sp}
    4c9c:	1b500001 	blne	1404ca8 <_Min_Stack_Size+0x14048a8>
    4ca0:	3608002f 	strcc	r0, [r8], -pc, lsr #32
    4ca4:	0108002f 	tsteq	r8, pc, lsr #32
    4ca8:	2f405700 	svccs	0x00405700
    4cac:	2f6a0800 	svccs	0x006a0800
    4cb0:	00010800 	andeq	r0, r1, r0, lsl #16
    4cb4:	002f9657 	eoreq	r9, pc, r7, asr r6	; <UNPREDICTABLE>
    4cb8:	002fba08 	eoreq	fp, pc, r8, lsl #20
    4cbc:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    4cc8:	08002eae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, fp, sp}
    4ccc:	08002ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, sp}
    4cd0:	e25b0001 	subs	r0, fp, #1
    4cd4:	fa08002e 	blx	204d94 <_Min_Stack_Size+0x204994>
    4cd8:	0108002e 	tsteq	r8, lr, lsr #32
    4cdc:	2f405b00 	svccs	0x00405b00
    4ce0:	2f6a0800 	svccs	0x006a0800
    4ce4:	00010800 	andeq	r0, r1, r0, lsl #16
    4ce8:	0000005b 	andeq	r0, r0, fp, asr r0
    4cec:	00000000 	andeq	r0, r0, r0
    4cf0:	002ee600 	eoreq	lr, lr, r0, lsl #12
    4cf4:	002ef708 	eoreq	pc, lr, r8, lsl #14
    4cf8:	53000108 	movwpl	r0, #264	; 0x108
    4cfc:	08002f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, sp}
    4d00:	08002f42 	stmdaeq	r0, {r1, r6, r8, r9, sl, fp, sp}
    4d04:	42530001 	subsmi	r0, r3, #1
    4d08:	4808002f 	stmdami	r8, {r0, r1, r2, r3, r5}
    4d0c:	0708002f 	streq	r0, [r8, -pc, lsr #32]
    4d10:	06187600 	ldreq	r7, [r8], -r0, lsl #12
    4d14:	9f22007b 	svcls	0x0022007b
	...
    4d20:	08002ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, sp}
    4d24:	08002edf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r9, sl, fp, sp}
    4d28:	00530001 	subseq	r0, r3, r1
    4d2c:	00000000 	andeq	r0, r0, r0
    4d30:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    4d34:	c408002e 	strgt	r0, [r8], #-46	; 0x2e
    4d38:	0108002e 	tsteq	r8, lr, lsr #32
    4d3c:	2ee25600 	cdpcs	6, 14, cr5, cr2, cr0, {0}
    4d40:	2efa0800 	cdpcs	8, 15, cr0, cr10, cr0, {0}
    4d44:	00010800 	andeq	r0, r1, r0, lsl #16
    4d48:	002f4056 	eoreq	r4, pc, r6, asr r0	; <UNPREDICTABLE>
    4d4c:	002f6a08 	eoreq	r6, pc, r8, lsl #20
    4d50:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    4d5c:	08002ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, sp}
    4d60:	08002efa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, fp, sp}
    4d64:	9f300002 	svcls	0x00300002
    4d68:	08002f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, sp}
    4d6c:	08002f6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, fp, sp}
    4d70:	9f300002 	svcls	0x00300002
	...
    4d7c:	08002ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, sp}
    4d80:	08002efa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, fp, sp}
    4d84:	405b0001 	subsmi	r0, fp, r1
    4d88:	6a08002f 	bvs	204e4c <_Min_Stack_Size+0x204a4c>
    4d8c:	0108002f 	tsteq	r8, pc, lsr #32
    4d90:	00005b00 	andeq	r5, r0, r0, lsl #22
    4d94:	00000000 	andeq	r0, r0, r0
    4d98:	2ee20000 	cdpcs	0, 14, cr0, cr2, cr0, {0}
    4d9c:	2efa0800 	cdpcs	8, 15, cr0, cr10, cr0, {0}
    4da0:	00010800 	andeq	r0, r1, r0, lsl #16
    4da4:	002f4056 	eoreq	r4, pc, r6, asr r0	; <UNPREDICTABLE>
    4da8:	002f6a08 	eoreq	r6, pc, r8, lsl #20
    4dac:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    4db8:	08002ee2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, fp, sp}
    4dbc:	08002efa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, fp, sp}
    4dc0:	9f300002 	svcls	0x00300002
    4dc4:	08002f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, sp}
    4dc8:	08002f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, sp}
    4dcc:	9f300002 	svcls	0x00300002
    4dd0:	08002f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, sp}
    4dd4:	08002f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, sp}
    4dd8:	00500001 	subseq	r0, r0, r1
    4ddc:	00000000 	andeq	r0, r0, r0
    4de0:	1c000000 	stcne	0, cr0, [r0], {-0}
    4de4:	3608002f 	strcc	r0, [r8], -pc, lsr #32
    4de8:	0108002f 	tsteq	r8, pc, lsr #32
    4dec:	2f965700 	svccs	0x00965700
    4df0:	2fba0800 	svccs	0x00ba0800
    4df4:	00010800 	andeq	r0, r1, r0, lsl #16
    4df8:	00000057 	andeq	r0, r0, r7, asr r0
    4dfc:	00000000 	andeq	r0, r0, r0
    4e00:	002f2400 	eoreq	r2, pc, r0, lsl #8
    4e04:	002f4008 	eoreq	r4, pc, r8
    4e08:	5a000108 	bpl	5230 <_Min_Stack_Size+0x4e30>
    4e0c:	08002f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp, sp}
    4e10:	08002fe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp, sp}
    4e14:	5c5a0001 	mrrcpl	0, 0, r0, sl, cr1
    4e18:	68080030 	stmdavs	r8, {r4, r5}
    4e1c:	01080030 	tsteq	r8, r0, lsr r0
    4e20:	00005a00 	andeq	r5, r0, r0, lsl #20
    4e24:	00000000 	andeq	r0, r0, r0
    4e28:	2fa20000 	svccs	0x00a20000
    4e2c:	2fba0800 	svccs	0x00ba0800
    4e30:	00010800 	andeq	r0, r1, r0, lsl #16
    4e34:	00000057 	andeq	r0, r0, r7, asr r0
    4e38:	00000000 	andeq	r0, r0, r0
    4e3c:	002fa200 	eoreq	sl, pc, r0, lsl #4
    4e40:	002fe808 	eoreq	lr, pc, r8, lsl #16
    4e44:	5a000108 	bpl	526c <_Min_Stack_Size+0x4e6c>
    4e48:	0800305c 	stmdaeq	r0, {r2, r3, r4, r6, ip, sp}
    4e4c:	08003068 	stmdaeq	r0, {r3, r5, r6, ip, sp}
    4e50:	005a0001 	subseq	r0, sl, r1
    4e54:	00000000 	andeq	r0, r0, r0
    4e58:	a2000000 	andge	r0, r0, #0
    4e5c:	be08002f 	cdplt	0, 0, cr0, cr8, cr15, {1}
    4e60:	0208002f 	andeq	r0, r8, #47	; 0x2f
    4e64:	be9f3000 	cdplt	0, 9, cr3, cr15, cr0, {0}
    4e68:	e808002f 	stmda	r8, {r0, r1, r2, r3, r5}
    4e6c:	0208002f 	andeq	r0, r8, #47	; 0x2f
    4e70:	5c9f3100 	ldfpls	f3, [pc], {0}
    4e74:	68080030 	stmdavs	r8, {r4, r5}
    4e78:	02080030 	andeq	r0, r8, #48	; 0x30
    4e7c:	009f3000 	addseq	r3, pc, r0
    4e80:	00000000 	andeq	r0, r0, r0
    4e84:	5c000000 	stcpl	0, cr0, [r0], {-0}
    4e88:	68080030 	stmdavs	r8, {r4, r5}
    4e8c:	01080030 	tsteq	r8, r0, lsr r0
    4e90:	00005a00 	andeq	r5, r0, r0, lsl #20
    4e94:	00000000 	andeq	r0, r0, r0
    4e98:	30660000 	rsbcc	r0, r6, r0
    4e9c:	30680800 	rsbcc	r0, r8, r0, lsl #16
    4ea0:	00020800 	andeq	r0, r2, r0, lsl #16
    4ea4:	00009f30 	andeq	r9, r0, r0, lsr pc
    4ea8:	00000000 	andeq	r0, r0, r0
    4eac:	2fbe0000 	svccs	0x00be0000
    4eb0:	2fe80800 	svccs	0x00e80800
    4eb4:	00020800 	andeq	r0, r2, r0, lsl #16
    4eb8:	00009f30 	andeq	r9, r0, r0, lsr pc
    4ebc:	00000000 	andeq	r0, r0, r0
    4ec0:	2fbe0000 	svccs	0x00be0000
    4ec4:	2fe80800 	svccs	0x00e80800
    4ec8:	00010800 	andeq	r0, r1, r0, lsl #16
    4ecc:	0000005a 	andeq	r0, r0, sl, asr r0
    4ed0:	00000000 	andeq	r0, r0, r0
    4ed4:	002fbe00 	eoreq	fp, pc, r0, lsl #28
    4ed8:	002fde08 	eoreq	sp, pc, r8, lsl #28
    4edc:	30000208 	andcc	r0, r0, r8, lsl #4
    4ee0:	002fde9f 	mlaeq	pc, pc, lr, sp	; <UNPREDICTABLE>
    4ee4:	002fe208 	eoreq	lr, pc, r8, lsl #4
    4ee8:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    4ef4:	08002e22 	stmdaeq	r0, {r1, r5, r9, sl, fp, sp}
    4ef8:	08002e9a 	stmdaeq	r0, {r1, r3, r4, r7, r9, sl, fp, sp}
    4efc:	fa570001 	blx	15c4f08 <_Min_Stack_Size+0x15c4b08>
    4f00:	1208002e 	andne	r0, r8, #46	; 0x2e
    4f04:	0108002f 	tsteq	r8, pc, lsr #32
    4f08:	2f6a5700 	svccs	0x006a5700
    4f0c:	2f960800 	svccs	0x00960800
    4f10:	00010800 	andeq	r0, r1, r0, lsl #16
    4f14:	002fe857 	eoreq	lr, pc, r7, asr r8	; <UNPREDICTABLE>
    4f18:	00305c08 	eorseq	r5, r0, r8, lsl #24
    4f1c:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    4f20:	08003068 	stmdaeq	r0, {r3, r5, r6, ip, sp}
    4f24:	08003090 	stmdaeq	r0, {r4, r7, ip, sp}
    4f28:	00570001 	subseq	r0, r7, r1
    4f2c:	00000000 	andeq	r0, r0, r0
    4f30:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    4f34:	9a08002e 	bls	204ff4 <_Min_Stack_Size+0x204bf4>
    4f38:	0208002e 	andeq	r0, r8, #46	; 0x2e
    4f3c:	009f3100 	addseq	r3, pc, r0, lsl #2
    4f40:	00000000 	andeq	r0, r0, r0
    4f44:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    4f48:	27080030 	smladxcs	r8, r0, r0, r0
    4f4c:	01080030 	tsteq	r8, r0, lsr r0
    4f50:	00005000 	andeq	r5, r0, r0
    4f54:	00000000 	andeq	r0, r0, r0
    4f58:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
    4f5c:	2e9a0800 	cdpcs	8, 9, cr0, cr10, cr0, {0}
    4f60:	00060800 	andeq	r0, r6, r0, lsl #16
    4f64:	006c65f2 	strdeq	r6, [ip], #-82	; 0xffffffae	; <UNPREDICTABLE>
    4f68:	2efa0000 	cdpcs	0, 15, cr0, cr10, cr0, {0}
    4f6c:	2f120800 	svccs	0x00120800
    4f70:	00060800 	andeq	r0, r6, r0, lsl #16
    4f74:	006c65f2 	strdeq	r6, [ip], #-82	; 0xffffffae	; <UNPREDICTABLE>
    4f78:	2f6a0000 	svccs	0x006a0000
    4f7c:	2f960800 	svccs	0x00960800
    4f80:	00060800 	andeq	r0, r6, r0, lsl #16
    4f84:	006c65f2 	strdeq	r6, [ip], #-82	; 0xffffffae	; <UNPREDICTABLE>
    4f88:	2fe80000 	svccs	0x00e80000
    4f8c:	305c0800 	subscc	r0, ip, r0, lsl #16
    4f90:	00060800 	andeq	r0, r6, r0, lsl #16
    4f94:	006c65f2 	strdeq	r6, [ip], #-82	; 0xffffffae	; <UNPREDICTABLE>
    4f98:	30680000 	rsbcc	r0, r8, r0
    4f9c:	30900800 	addscc	r0, r0, r0, lsl #16
    4fa0:	00060800 	andeq	r0, r6, r0, lsl #16
    4fa4:	006c65f2 	strdeq	r6, [ip], #-82	; 0xffffffae	; <UNPREDICTABLE>
	...
    4fb0:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
    4fb4:	2e3a0800 	cdpcs	8, 3, cr0, cr10, cr0, {0}
    4fb8:	00010800 	andeq	r0, r1, r0, lsl #16
    4fbc:	002e3a50 	eoreq	r3, lr, r0, asr sl
    4fc0:	002e9a08 	eoreq	r9, lr, r8, lsl #20
    4fc4:	59000108 	stmdbpl	r0, {r3, r8}
    4fc8:	08002efa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, fp, sp}
    4fcc:	08002f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp, sp}
    4fd0:	6a590001 	bvs	1644fdc <_Min_Stack_Size+0x1644bdc>
    4fd4:	9608002f 	strls	r0, [r8], -pc, lsr #32
    4fd8:	0108002f 	tsteq	r8, pc, lsr #32
    4fdc:	2fe85900 	svccs	0x00e85900
    4fe0:	305c0800 	subscc	r0, ip, r0, lsl #16
    4fe4:	00010800 	andeq	r0, r1, r0, lsl #16
    4fe8:	00306859 	eorseq	r6, r0, r9, asr r8
    4fec:	00309008 	eorseq	r9, r0, r8
    4ff0:	59000108 	stmdbpl	r0, {r3, r8}
	...
    4ffc:	08002e6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl, fp, sp}
    5000:	08002e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, sp}
    5004:	fa5b0001 	blx	16c5010 <_Min_Stack_Size+0x16c4c10>
    5008:	1208002e 	andne	r0, r8, #46	; 0x2e
    500c:	0108002f 	tsteq	r8, pc, lsr #32
    5010:	2f6a5b00 	svccs	0x006a5b00
    5014:	2f960800 	svccs	0x00960800
    5018:	00010800 	andeq	r0, r1, r0, lsl #16
    501c:	0000005b 	andeq	r0, r0, fp, asr r0
    5020:	00000000 	andeq	r0, r0, r0
    5024:	002efe00 	eoreq	pc, lr, r0, lsl #28
    5028:	002f0f08 	eoreq	r0, pc, r8, lsl #30
    502c:	53000108 	movwpl	r0, #264	; 0x108
    5030:	08002f6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, fp, sp}
    5034:	08002f6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, fp, sp}
    5038:	6c530001 	mrrcvs	0, 0, r0, r3, cr1
    503c:	7208002f 	andvc	r0, r8, #47	; 0x2f
    5040:	0708002f 	streq	r0, [r8, -pc, lsr #32]
    5044:	06187600 	ldreq	r7, [r8], -r0, lsl #12
    5048:	9f22007b 	svcls	0x0022007b
	...
    5054:	08002e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, sp}
    5058:	08002e9a 	stmdaeq	r0, {r1, r3, r4, r7, r9, sl, fp, sp}
    505c:	00530001 	subseq	r0, r3, r1
    5060:	00000000 	andeq	r0, r0, r0
    5064:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    5068:	8408002e 	strhi	r0, [r8], #-46	; 0x2e
    506c:	0108002e 	tsteq	r8, lr, lsr #32
    5070:	2efa5600 	cdpcs	6, 15, cr5, cr10, cr0, {0}
    5074:	2f120800 	svccs	0x00120800
    5078:	00010800 	andeq	r0, r1, r0, lsl #16
    507c:	002f6a56 	eoreq	r6, pc, r6, asr sl	; <UNPREDICTABLE>
    5080:	002f9608 	eoreq	r9, pc, r8, lsl #12
    5084:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    5090:	08002efa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, fp, sp}
    5094:	08002f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp, sp}
    5098:	9f300002 	svcls	0x00300002
    509c:	08002f6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, fp, sp}
    50a0:	08002f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp, sp}
    50a4:	9f300002 	svcls	0x00300002
	...
    50b0:	08002efa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, fp, sp}
    50b4:	08002f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp, sp}
    50b8:	6a5b0001 	bvs	16c50c4 <_Min_Stack_Size+0x16c4cc4>
    50bc:	9608002f 	strls	r0, [r8], -pc, lsr #32
    50c0:	0108002f 	tsteq	r8, pc, lsr #32
    50c4:	00005b00 	andeq	r5, r0, r0, lsl #22
    50c8:	00000000 	andeq	r0, r0, r0
    50cc:	2efa0000 	cdpcs	0, 15, cr0, cr10, cr0, {0}
    50d0:	2f120800 	svccs	0x00120800
    50d4:	00010800 	andeq	r0, r1, r0, lsl #16
    50d8:	002f6a56 	eoreq	r6, pc, r6, asr sl	; <UNPREDICTABLE>
    50dc:	002f9608 	eoreq	r9, pc, r8, lsl #12
    50e0:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    50ec:	08002efa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, fp, sp}
    50f0:	08002f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp, sp}
    50f4:	9f300002 	svcls	0x00300002
    50f8:	08002f6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, fp, sp}
    50fc:	08002f8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, fp, sp}
    5100:	9f300002 	svcls	0x00300002
    5104:	08002f8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, fp, sp}
    5108:	08002f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, sp}
    510c:	00500001 	subseq	r0, r0, r1
    5110:	00000000 	andeq	r0, r0, r0
    5114:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    5118:	fa08002f 	blx	2051dc <_Min_Stack_Size+0x204ddc>
    511c:	0108002f 	tsteq	r8, pc, lsr #32
    5120:	30685300 	rsbcc	r5, r8, r0, lsl #6
    5124:	30770800 	rsbscc	r0, r7, r0, lsl #16
    5128:	00010800 	andeq	r0, r1, r0, lsl #16
    512c:	00000053 	andeq	r0, r0, r3, asr r0
    5130:	00000000 	andeq	r0, r0, r0
    5134:	002ff000 	eoreq	pc, pc, r0
    5138:	00302a08 	eorseq	r2, r0, r8, lsl #20
    513c:	59000108 	stmdbpl	r0, {r3, r8}
    5140:	08003068 	stmdaeq	r0, {r3, r5, r6, ip, sp}
    5144:	08003086 	stmdaeq	r0, {r1, r2, r7, ip, sp}
    5148:	00590001 	subseq	r0, r9, r1
    514c:	00000000 	andeq	r0, r0, r0
    5150:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    5154:	fa08002f 	blx	205218 <_Min_Stack_Size+0x204e18>
    5158:	0608002f 	streq	r0, [r8], -pc, lsr #32
    515c:	73007100 	movwvc	r7, #256	; 0x100
    5160:	689f2200 	ldmvs	pc, {r9, sp}	; <UNPREDICTABLE>
    5164:	72080030 	andvc	r0, r8, #48	; 0x30
    5168:	06080030 			; <UNDEFINED> instruction: 0x06080030
    516c:	73007100 	movwvc	r7, #256	; 0x100
    5170:	729f2200 	addsvc	r2, pc, #0, 4
    5174:	77080030 	smladxvc	r8, r0, r0, r0
    5178:	07080030 	smladxeq	r8, r0, r0, r0
    517c:	06187700 	ldreq	r7, [r8], -r0, lsl #14
    5180:	9f220073 	svcls	0x00220073
	...
    518c:	08002ff0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, fp, sp}
    5190:	0800302a 	stmdaeq	r0, {r1, r3, r5, ip, sp}
    5194:	68570001 	ldmdavs	r7, {r0}^
    5198:	86080030 			; <UNDEFINED> instruction: 0x86080030
    519c:	01080030 	tsteq	r8, r0, lsr r0
    51a0:	00005700 	andeq	r5, r0, r0, lsl #14
    51a4:	00000000 	andeq	r0, r0, r0
    51a8:	2ff00000 	svccs	0x00f00000	; IMB
    51ac:	2ffe0800 	svccs	0x00fe0800
    51b0:	00020800 	andeq	r0, r2, r0, lsl #16
    51b4:	2ffe9f30 	svccs	0x00fe9f30
    51b8:	302a0800 	eorcc	r0, sl, r0, lsl #16
    51bc:	00020800 	andeq	r0, r2, r0, lsl #16
    51c0:	30689f31 	rsbcc	r9, r8, r1, lsr pc
    51c4:	30860800 	addcc	r0, r6, r0, lsl #16
    51c8:	00020800 	andeq	r0, r2, r0, lsl #16
    51cc:	00009f30 	andeq	r9, r0, r0, lsr pc
    51d0:	00000000 	andeq	r0, r0, r0
    51d4:	307a0000 	rsbscc	r0, sl, r0
    51d8:	30860800 	addcc	r0, r6, r0, lsl #16
    51dc:	00010800 	andeq	r0, r1, r0, lsl #16
    51e0:	00000059 	andeq	r0, r0, r9, asr r0
    51e4:	00000000 	andeq	r0, r0, r0
    51e8:	00307a00 	eorseq	r7, r0, r0, lsl #20
    51ec:	00308608 	eorseq	r8, r0, r8, lsl #12
    51f0:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    51fc:	08003084 	stmdaeq	r0, {r2, r7, ip, sp}
    5200:	08003086 	stmdaeq	r0, {r1, r2, r7, ip, sp}
    5204:	9f300002 	svcls	0x00300002
	...
    5210:	08003032 	stmdaeq	r0, {r1, r4, r5, ip, sp}
    5214:	0800305c 	stmdaeq	r0, {r2, r3, r4, r6, ip, sp}
    5218:	00590001 	subseq	r0, r9, r1
    521c:	00000000 	andeq	r0, r0, r0
    5220:	32000000 	andcc	r0, r0, #0
    5224:	49080030 	stmdbmi	r8, {r4, r5}
    5228:	01080030 	tsteq	r8, r0, lsr r0
    522c:	00005300 	andeq	r5, r0, r0, lsl #6
    5230:	00000000 	andeq	r0, r0, r0
    5234:	30320000 	eorscc	r0, r2, r0
    5238:	305c0800 	subscc	r0, ip, r0, lsl #16
    523c:	00010800 	andeq	r0, r1, r0, lsl #16
    5240:	00000057 	andeq	r0, r0, r7, asr r0
    5244:	00000000 	andeq	r0, r0, r0
    5248:	00303200 	eorseq	r3, r0, r0, lsl #4
    524c:	00305c08 	eorseq	r5, r0, r8, lsl #24
    5250:	30000208 	andcc	r0, r0, r8, lsl #4
    5254:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5258:	00000000 	andeq	r0, r0, r0
    525c:	00309000 	eorseq	r9, r0, r0
    5260:	00309708 	eorseq	r9, r0, r8, lsl #14
    5264:	50000108 	andpl	r0, r0, r8, lsl #2
    5268:	08003097 	stmdaeq	r0, {r0, r1, r2, r4, r7, ip, sp}
    526c:	0800309a 	stmdaeq	r0, {r1, r3, r4, r7, ip, sp}
    5270:	9a540001 	bls	150527c <_Min_Stack_Size+0x1504e7c>
    5274:	a8080030 	stmdage	r8, {r4, r5}
    5278:	04080030 	streq	r0, [r8], #-48	; 0x30
    527c:	5001f300 	andpl	pc, r1, r0, lsl #6
    5280:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5284:	00000000 	andeq	r0, r0, r0
    5288:	00309400 	eorseq	r9, r0, r0, lsl #8
    528c:	00309708 	eorseq	r9, r0, r8, lsl #14
    5290:	50000108 	andpl	r0, r0, r8, lsl #2
    5294:	08003097 	stmdaeq	r0, {r0, r1, r2, r4, r7, ip, sp}
    5298:	0800309a 	stmdaeq	r0, {r1, r3, r4, r7, ip, sp}
    529c:	9a540001 	bls	15052a8 <_Min_Stack_Size+0x1504ea8>
    52a0:	a8080030 	stmdage	r8, {r4, r5}
    52a4:	04080030 	streq	r0, [r8], #-48	; 0x30
    52a8:	5001f300 	andpl	pc, r1, r0, lsl #6
    52ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    52b0:	00000000 	andeq	r0, r0, r0
    52b4:	0030a800 	eorseq	sl, r0, r0, lsl #16
    52b8:	0030aa08 	eorseq	sl, r0, r8, lsl #20
    52bc:	50000108 	andpl	r0, r0, r8, lsl #2
    52c0:	080030aa 	stmdaeq	r0, {r1, r3, r5, r7, ip, sp}
    52c4:	080030ac 	stmdaeq	r0, {r2, r3, r5, r7, ip, sp}
    52c8:	01f30004 	mvnseq	r0, r4
    52cc:	00009f50 	andeq	r9, r0, r0, asr pc
    52d0:	00000000 	andeq	r0, r0, r0
    52d4:	30dc0000 	sbcscc	r0, ip, r0
    52d8:	30dc0800 	sbcscc	r0, ip, r0, lsl #16
    52dc:	00010800 	andeq	r0, r1, r0, lsl #16
    52e0:	0030dc50 	eorseq	sp, r0, r0, asr ip
    52e4:	0030f008 	eorseq	pc, r0, r8
    52e8:	70000308 	andvc	r0, r0, r8, lsl #6
    52ec:	30f09f7c 	rscscc	r9, r0, ip, ror pc
    52f0:	30f80800 	rscscc	r0, r8, r0, lsl #16
    52f4:	00030800 	andeq	r0, r3, r0, lsl #16
    52f8:	f89f7470 			; <UNDEFINED> instruction: 0xf89f7470
    52fc:	fc080030 	stc2	0, cr0, [r8], {48}	; 0x30
    5300:	03080030 	movweq	r0, #32816	; 0x8030
    5304:	9f5c7000 	svcls	0x005c7000
    5308:	080030fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, ip, sp}
    530c:	08003102 	stmdaeq	r0, {r1, r8, ip, sp}
    5310:	bc700004 	ldcllt	0, cr0, [r0], #-16
    5314:	31029f7f 	tstcc	r2, pc, ror pc
    5318:	31080800 	tstcc	r8, r0, lsl #16
    531c:	00010800 	andeq	r0, r1, r0, lsl #16
    5320:	00000050 	andeq	r0, r0, r0, asr r0
    5324:	00000000 	andeq	r0, r0, r0
    5328:	0030dc00 	eorseq	sp, r0, r0, lsl #24
    532c:	0030ec08 	eorseq	lr, r0, r8, lsl #24
    5330:	51000108 	tstpl	r0, r8, lsl #2
    5334:	080030ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, ip, sp}
    5338:	08003102 	stmdaeq	r0, {r1, r8, ip, sp}
    533c:	78700002 	ldmdavc	r0!, {r1}^
    5340:	08003102 	stmdaeq	r0, {r1, r8, ip, sp}
    5344:	08003108 	stmdaeq	r0, {r3, r8, ip, sp}
    5348:	3c700002 	ldclcc	0, cr0, [r0], #-8
	...
    5354:	080031a0 	stmdaeq	r0, {r5, r7, r8, ip, sp}
    5358:	080031a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, ip, sp}
    535c:	a6500001 	ldrbge	r0, [r0], -r1
    5360:	a6080031 			; <UNDEFINED> instruction: 0xa6080031
    5364:	04080031 	streq	r0, [r8], #-49	; 0x31
    5368:	5001f300 	andpl	pc, r1, r0, lsl #6
    536c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5370:	00000000 	andeq	r0, r0, r0
    5374:	00332a00 	eorseq	r2, r3, r0, lsl #20
    5378:	00333408 	eorseq	r3, r3, r8, lsl #8
    537c:	53000108 	movwpl	r0, #264	; 0x108
	...
    5388:	08003334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip, sp}
    538c:	0800333a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, ip, sp}
    5390:	52530001 	subspl	r0, r3, #1
    5394:	55080033 	strpl	r0, [r8, #-51]	; 0x33
    5398:	01080033 	tsteq	r8, r3, lsr r0
    539c:	00005300 	andeq	r5, r0, r0, lsl #6
    53a0:	00000000 	andeq	r0, r0, r0
    53a4:	33680000 	cmncc	r8, #0
    53a8:	33760800 	cmncc	r6, #0, 16
    53ac:	00010800 	andeq	r0, r1, r0, lsl #16
    53b0:	00337650 	eorseq	r7, r3, r0, asr r6
    53b4:	00338a08 	eorseq	r8, r3, r8, lsl #20
    53b8:	54000108 	strpl	r0, [r0], #-264	; 0x108
    53bc:	0800338a 	stmdaeq	r0, {r1, r3, r7, r8, r9, ip, sp}
    53c0:	080033a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, ip, sp}
    53c4:	01f30039 	mvnseq	r0, r9, lsr r0
    53c8:	1af80950 	bne	ffe07910 <_estack+0xdfdd7910>
    53cc:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    53d0:	244d5001 	strbcs	r5, [sp], #-1
    53d4:	01282e30 	teqeq	r8, r0, lsr lr
    53d8:	23131600 	tstcs	r3, #0, 12
    53dc:	5001f308 	andpl	pc, r1, r8, lsl #6
    53e0:	f31af809 	vsub.i16	d15, d10, d9
    53e4:	01f35001 	mvnseq	r5, r1
    53e8:	30244d50 	eorcc	r4, r4, r0, asr sp
    53ec:	0001282e 	andeq	r2, r1, lr, lsr #16
    53f0:	01f31316 	mvnseq	r1, r6, lsl r3
    53f4:	30244d50 	eorcc	r4, r4, r0, asr sp
    53f8:	0001282e 	andeq	r2, r1, lr, lsr #16
    53fc:	a89f1316 	ldmge	pc, {r1, r2, r4, r8, r9, ip}	; <UNPREDICTABLE>
    5400:	c4080033 	strgt	r0, [r8], #-51	; 0x33
    5404:	01080033 	tsteq	r8, r3, lsr r0
    5408:	00005400 	andeq	r5, r0, r0, lsl #8
    540c:	00000000 	andeq	r0, r0, r0
    5410:	33680000 	cmncc	r8, #0
    5414:	33940800 	orrscc	r0, r4, #0, 16
    5418:	00020800 	andeq	r0, r2, r0, lsl #16
    541c:	33949f30 	orrscc	r9, r4, #48, 30	; 0xc0
    5420:	339e0800 	orrscc	r0, lr, #0, 16
    5424:	00010800 	andeq	r0, r1, r0, lsl #16
    5428:	00339e55 	eorseq	r9, r3, r5, asr lr
    542c:	0033a008 	eorseq	sl, r3, r8
    5430:	30000208 	andcc	r0, r0, r8, lsl #4
    5434:	0033a09f 	mlaseq	r3, pc, r0, sl	; <UNPREDICTABLE>
    5438:	0033a808 	eorseq	sl, r3, r8, lsl #16
    543c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    5440:	080033a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, ip, sp}
    5444:	080033c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, ip, sp}
    5448:	9f300002 	svcls	0x00300002
	...
    5454:	080033c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, ip, sp}
    5458:	080033cb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r8, r9, ip, sp}
    545c:	cb500001 	blgt	1405468 <_Min_Stack_Size+0x1405068>
    5460:	ce080033 	mcrgt	0, 0, r0, cr8, cr3, {1}
    5464:	04080033 	streq	r0, [r8], #-51	; 0x33
    5468:	5001f300 	andpl	pc, r1, r0, lsl #6
    546c:	0033ce9f 	mlaseq	r3, pc, lr, ip	; <UNPREDICTABLE>
    5470:	0033d008 	eorseq	sp, r3, r8
    5474:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    5480:	080033f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip, sp}
    5484:	080033f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, ip, sp}
    5488:	f4500001 			; <UNDEFINED> instruction: 0xf4500001
    548c:	04080033 	streq	r0, [r8], #-51	; 0x33
    5490:	04080034 	streq	r0, [r8], #-52	; 0x34
    5494:	5001f300 	andpl	pc, r1, r0, lsl #6
    5498:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    549c:	00000000 	andeq	r0, r0, r0
    54a0:	00340400 	eorseq	r0, r4, r0, lsl #8
    54a4:	00341808 	eorseq	r1, r4, r8, lsl #16
    54a8:	50000108 	andpl	r0, r0, r8, lsl #2
    54ac:	08003418 	stmdaeq	r0, {r3, r4, sl, ip, sp}
    54b0:	08003424 	stmdaeq	r0, {r2, r5, sl, ip, sp}
    54b4:	01f30004 	mvnseq	r0, r4
    54b8:	34249f50 	strtcc	r9, [r4], #-3920	; 0xf50
    54bc:	34600800 	strbtcc	r0, [r0], #-2048	; 0x800
    54c0:	00010800 	andeq	r0, r1, r0, lsl #16
    54c4:	00346050 	eorseq	r6, r4, r0, asr r0
    54c8:	00347c08 	eorseq	r7, r4, r8, lsl #24
    54cc:	f3000408 	vshl.u8	d0, d8, d0
    54d0:	009f5001 	addseq	r5, pc, r1
    54d4:	00000000 	andeq	r0, r0, r0
    54d8:	04000000 	streq	r0, [r0], #-0
    54dc:	36080034 			; <UNDEFINED> instruction: 0x36080034
    54e0:	02080034 	andeq	r0, r8, #52	; 0x34
    54e4:	369f3000 	ldrcc	r3, [pc], r0
    54e8:	46080034 			; <UNDEFINED> instruction: 0x46080034
    54ec:	01080034 	tsteq	r8, r4, lsr r0
    54f0:	34485200 	strbcc	r5, [r8], #-512	; 0x200
    54f4:	344c0800 	strbcc	r0, [ip], #-2048	; 0x800
    54f8:	00010800 	andeq	r0, r1, r0, lsl #16
    54fc:	00344c54 	eorseq	r4, r4, r4, asr ip
    5500:	00345608 	eorseq	r5, r4, r8, lsl #12
    5504:	52000108 	andpl	r0, r0, #8, 2
    5508:	08003458 	stmdaeq	r0, {r3, r4, r6, sl, ip, sp}
    550c:	08003464 	stmdaeq	r0, {r2, r5, r6, sl, ip, sp}
    5510:	00520001 	subseq	r0, r2, r1
    5514:	00000000 	andeq	r0, r0, r0
    5518:	04000000 	streq	r0, [r0], #-0
    551c:	36080034 			; <UNDEFINED> instruction: 0x36080034
    5520:	02080034 	andeq	r0, r8, #52	; 0x34
    5524:	369f3000 	ldrcc	r3, [pc], r0
    5528:	46080034 			; <UNDEFINED> instruction: 0x46080034
    552c:	05080034 	streq	r0, [r8, #-52]	; 0x34
    5530:	00723400 	rsbseq	r3, r2, r0, lsl #8
    5534:	00009f1c 	andeq	r9, r0, ip, lsl pc
    5538:	00000000 	andeq	r0, r0, r0
    553c:	34040000 	strcc	r0, [r4], #-0
    5540:	34360800 	ldrtcc	r0, [r6], #-2048	; 0x800
    5544:	00020800 	andeq	r0, r2, r0, lsl #16
    5548:	34369f3f 	ldrtcc	r9, [r6], #-3903	; 0xf3f
    554c:	34460800 	strbcc	r0, [r6], #-2048	; 0x800
    5550:	00050800 	andeq	r0, r5, r0, lsl #16
    5554:	2600723f 			; <UNDEFINED> instruction: 0x2600723f
    5558:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    555c:	00000000 	andeq	r0, r0, r0
    5560:	00347c00 	eorseq	r7, r4, r0, lsl #24
    5564:	00348808 	eorseq	r8, r4, r8, lsl #16
    5568:	50000108 	andpl	r0, r0, r8, lsl #2
    556c:	08003488 	stmdaeq	r0, {r3, r7, sl, ip, sp}
    5570:	08003490 	stmdaeq	r0, {r4, r7, sl, ip, sp}
    5574:	01f30004 	mvnseq	r0, r4
    5578:	00009f50 	andeq	r9, r0, r0, asr pc
    557c:	00000000 	andeq	r0, r0, r0
    5580:	347c0000 	ldrbtcc	r0, [ip], #-0
    5584:	34800800 	strcc	r0, [r0], #2048	; 0x800
    5588:	00010800 	andeq	r0, r1, r0, lsl #16
    558c:	00348051 	eorseq	r8, r4, r1, asr r0
    5590:	00349008 	eorseq	r9, r4, r8
    5594:	f3000408 	vshl.u8	d0, d8, d0
    5598:	009f5101 	addseq	r5, pc, r1, lsl #2
    559c:	00000000 	andeq	r0, r0, r0
    55a0:	90000000 	andls	r0, r0, r0
    55a4:	9a080034 	bls	20567c <_Min_Stack_Size+0x20527c>
    55a8:	01080034 	tsteq	r8, r4, lsr r0
    55ac:	349a5000 	ldrcc	r5, [sl], #0
    55b0:	349e0800 	ldrcc	r0, [lr], #2048	; 0x800
    55b4:	00040800 	andeq	r0, r4, r0, lsl #16
    55b8:	9f5001f3 	svcls	0x005001f3
    55bc:	0800349e 	stmdaeq	r0, {r1, r2, r3, r4, r7, sl, ip, sp}
    55c0:	080034a0 	stmdaeq	r0, {r5, r7, sl, ip, sp}
    55c4:	a0500001 	subsge	r0, r0, r1
    55c8:	a8080034 	stmdage	r8, {r2, r4, r5}
    55cc:	04080034 	streq	r0, [r8], #-52	; 0x34
    55d0:	5001f300 	andpl	pc, r1, r0, lsl #6
    55d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    55d8:	00000000 	andeq	r0, r0, r0
    55dc:	0034c000 	eorseq	ip, r4, r0
    55e0:	00350a08 	eorseq	r0, r5, r8, lsl #20
    55e4:	50000108 	andpl	r0, r0, r8, lsl #2
    55e8:	0800350a 	stmdaeq	r0, {r1, r3, r8, sl, ip, sp}
    55ec:	0800351e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, ip, sp}
    55f0:	01f30004 	mvnseq	r0, r4
    55f4:	351e9f50 	ldrcc	r9, [lr, #-3920]	; 0xf50
    55f8:	35200800 	strcc	r0, [r0, #-2048]!	; 0x800
    55fc:	00010800 	andeq	r0, r1, r0, lsl #16
    5600:	00352050 	eorseq	r2, r5, r0, asr r0
    5604:	00353208 	eorseq	r3, r5, r8, lsl #4
    5608:	f3000408 	vshl.u8	d0, d8, d0
    560c:	329f5001 	addscc	r5, pc, #1
    5610:	34080035 	strcc	r0, [r8], #-53	; 0x35
    5614:	01080035 	tsteq	r8, r5, lsr r0
    5618:	35345000 	ldrcc	r5, [r4, #-0]!
    561c:	35460800 	strbcc	r0, [r6, #-2048]	; 0x800
    5620:	00040800 	andeq	r0, r4, r0, lsl #16
    5624:	9f5001f3 	svcls	0x005001f3
    5628:	08003546 	stmdaeq	r0, {r1, r2, r6, r8, sl, ip, sp}
    562c:	08003548 	stmdaeq	r0, {r3, r6, r8, sl, ip, sp}
    5630:	48500001 	ldmdami	r0, {r0}^
    5634:	5a080035 	bpl	205710 <_Min_Stack_Size+0x205310>
    5638:	04080035 	streq	r0, [r8], #-53	; 0x35
    563c:	5001f300 	andpl	pc, r1, r0, lsl #6
    5640:	00355a9f 	mlaseq	r5, pc, sl, r5	; <UNPREDICTABLE>
    5644:	00355c08 	eorseq	r5, r5, r8, lsl #24
    5648:	50000108 	andpl	r0, r0, r8, lsl #2
    564c:	0800355c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, ip, sp}
    5650:	0800356e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sl, ip, sp}
    5654:	01f30004 	mvnseq	r0, r4
    5658:	356e9f50 	strbcc	r9, [lr, #-3920]!	; 0xf50
    565c:	35700800 	ldrbcc	r0, [r0, #-2048]!	; 0x800
    5660:	00010800 	andeq	r0, r1, r0, lsl #16
    5664:	00357050 	eorseq	r7, r5, r0, asr r0
    5668:	00358208 	eorseq	r8, r5, r8, lsl #4
    566c:	f3000408 	vshl.u8	d0, d8, d0
    5670:	829f5001 	addshi	r5, pc, #1
    5674:	84080035 	strhi	r0, [r8], #-53	; 0x35
    5678:	01080035 	tsteq	r8, r5, lsr r0
    567c:	35845000 	strcc	r5, [r4]
    5680:	35960800 	ldrcc	r0, [r6, #2048]	; 0x800
    5684:	00040800 	andeq	r0, r4, r0, lsl #16
    5688:	9f5001f3 	svcls	0x005001f3
    568c:	08003596 	stmdaeq	r0, {r1, r2, r4, r7, r8, sl, ip, sp}
    5690:	08003598 	stmdaeq	r0, {r3, r4, r7, r8, sl, ip, sp}
    5694:	98500001 	ldmdals	r0, {r0}^
    5698:	aa080035 	bge	205774 <_Min_Stack_Size+0x205374>
    569c:	04080035 	streq	r0, [r8], #-53	; 0x35
    56a0:	5001f300 	andpl	pc, r1, r0, lsl #6
    56a4:	0035aa9f 	mlaseq	r5, pc, sl, sl	; <UNPREDICTABLE>
    56a8:	0035ac08 	eorseq	sl, r5, r8, lsl #24
    56ac:	50000108 	andpl	r0, r0, r8, lsl #2
    56b0:	080035ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, ip, sp}
    56b4:	080035be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, sl, ip, sp}
    56b8:	01f30004 	mvnseq	r0, r4
    56bc:	35be9f50 	ldrcc	r9, [lr, #3920]!	; 0xf50
    56c0:	35c20800 	strbcc	r0, [r2, #2048]	; 0x800
    56c4:	00010800 	andeq	r0, r1, r0, lsl #16
    56c8:	0035c250 	eorseq	ip, r5, r0, asr r2
    56cc:	0035d608 	eorseq	sp, r5, r8, lsl #12
    56d0:	f3000408 	vshl.u8	d0, d8, d0
    56d4:	d69f5001 	ldrle	r5, [pc], r1
    56d8:	da080035 	ble	2057b4 <_Min_Stack_Size+0x2053b4>
    56dc:	01080035 	tsteq	r8, r5, lsr r0
    56e0:	35da5000 	ldrbcc	r5, [sl]
    56e4:	361c0800 	ldrcc	r0, [ip], -r0, lsl #16
    56e8:	00040800 	andeq	r0, r4, r0, lsl #16
    56ec:	9f5001f3 	svcls	0x005001f3
	...
    56f8:	0800361c 	stmdaeq	r0, {r2, r3, r4, r9, sl, ip, sp}
    56fc:	0800362e 	stmdaeq	r0, {r1, r2, r3, r5, r9, sl, ip, sp}
    5700:	9f300002 	svcls	0x00300002
    5704:	0800362e 	stmdaeq	r0, {r1, r2, r3, r5, r9, sl, ip, sp}
    5708:	080036d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip, sp}
    570c:	00530001 	subseq	r0, r3, r1
    5710:	00000000 	andeq	r0, r0, r0
    5714:	1c000000 	stcne	0, cr0, [r0], {-0}
    5718:	2e080036 	mcrcs	0, 0, r0, cr8, cr6, {1}
    571c:	02080036 	andeq	r0, r8, #54	; 0x36
    5720:	2e9f3000 	cdpcs	0, 9, cr3, cr15, cr0, {0}
    5724:	38080036 	stmdacc	r8, {r1, r2, r4, r5}
    5728:	01080036 	tsteq	r8, r6, lsr r0
    572c:	363c5400 	ldrtcc	r5, [ip], -r0, lsl #8
    5730:	36500800 	ldrbcc	r0, [r0], -r0, lsl #16
    5734:	00010800 	andeq	r0, r1, r0, lsl #16
    5738:	00365054 	eorseq	r5, r6, r4, asr r0
    573c:	00368608 	eorseq	r8, r6, r8, lsl #12
    5740:	77000608 	strvc	r0, [r0, -r8, lsl #12]
    5744:	24007300 	strcs	r7, [r0], #-768	; 0x300
    5748:	0036869f 	mlaseq	r6, pc, r6, r8	; <UNPREDICTABLE>
    574c:	00369208 	eorseq	r9, r6, r8, lsl #4
    5750:	77000608 	strvc	r0, [r0, -r8, lsl #12]
    5754:	247f7300 	ldrbtcs	r7, [pc], #-768	; 575c <_Min_Stack_Size+0x535c>
    5758:	0036989f 	mlaseq	r6, pc, r8, r9	; <UNPREDICTABLE>
    575c:	0036d808 	eorseq	sp, r6, r8, lsl #16
    5760:	77000608 	strvc	r0, [r0, -r8, lsl #12]
    5764:	24007300 	strcs	r7, [r0], #-768	; 0x300
    5768:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    576c:	00000000 	andeq	r0, r0, r0
    5770:	00361c00 	eorseq	r1, r6, r0, lsl #24
    5774:	00362e08 	eorseq	r2, r6, r8, lsl #28
    5778:	30000208 	andcc	r0, r0, r8, lsl #4
    577c:	00362e9f 	mlaseq	r6, pc, lr, r2	; <UNPREDICTABLE>
    5780:	00363808 	eorseq	r3, r6, r8, lsl #16
    5784:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    5788:	08003640 	stmdaeq	r0, {r6, r9, sl, ip, sp}
    578c:	08003674 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, ip, sp}
    5790:	74550001 	ldrbvc	r0, [r5], #-1
    5794:	86080036 			; <UNDEFINED> instruction: 0x86080036
    5798:	09080036 	stmdbeq	r8, {r1, r2, r4, r5}
    579c:	73007700 	movwvc	r7, #1792	; 0x700
    57a0:	00762400 	rsbseq	r2, r6, r0, lsl #8
    57a4:	36869f1a 	pkhbtcc	r9, r6, sl, lsl #30
    57a8:	36920800 	ldrcc	r0, [r2], r0, lsl #16
    57ac:	00090800 	andeq	r0, r9, r0, lsl #16
    57b0:	7f730077 	svcvc	0x00730077
    57b4:	1a007624 	bne	2304c <_Min_Stack_Size+0x22c4c>
    57b8:	0036989f 	mlaseq	r6, pc, r8, r9	; <UNPREDICTABLE>
    57bc:	0036c408 	eorseq	ip, r6, r8, lsl #8
    57c0:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    57c4:	080036c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip, sp}
    57c8:	080036d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip, sp}
    57cc:	00770009 	rsbseq	r0, r7, r9
    57d0:	76240073 			; <UNDEFINED> instruction: 0x76240073
    57d4:	009f1a00 	addseq	r1, pc, r0, lsl #20
    57d8:	00000000 	andeq	r0, r0, r0
    57dc:	10000000 	andne	r0, r0, r0
    57e0:	1a080037 	bne	2058c4 <_Min_Stack_Size+0x2054c4>
    57e4:	01080037 	tsteq	r8, r7, lsr r0
    57e8:	371a5000 	ldrcc	r5, [sl, -r0]
    57ec:	371c0800 	ldrcc	r0, [ip, -r0, lsl #16]
    57f0:	00040800 	andeq	r0, r4, r0, lsl #16
    57f4:	9f5001f3 	svcls	0x005001f3
	...
    5800:	08003710 	stmdaeq	r0, {r4, r8, r9, sl, ip, sp}
    5804:	08003712 	stmdaeq	r0, {r1, r4, r8, r9, sl, ip, sp}
    5808:	9f300002 	svcls	0x00300002
    580c:	08003712 	stmdaeq	r0, {r1, r4, r8, r9, sl, ip, sp}
    5810:	0800371c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, ip, sp}
    5814:	0071000c 	rsbseq	r0, r1, ip
    5818:	1affff0a 	bne	5448 <_Min_Stack_Size+0x5048>
    581c:	301a0073 	andscc	r0, sl, r3, ror r0
    5820:	00009f2e 	andeq	r9, r0, lr, lsr #30
    5824:	00000000 	andeq	r0, r0, r0
    5828:	371c0000 	ldrcc	r0, [ip, -r0]
    582c:	371e0800 	ldrcc	r0, [lr, -r0, lsl #16]
    5830:	00010800 	andeq	r0, r1, r0, lsl #16
    5834:	00371e50 	eorseq	r1, r7, r0, asr lr
    5838:	00372208 	eorseq	r2, r7, r8, lsl #4
    583c:	f3000408 	vshl.u8	d0, d8, d0
    5840:	009f5001 	addseq	r5, pc, r1
    5844:	00000000 	andeq	r0, r0, r0
    5848:	24000000 	strcs	r0, [r0], #-0
    584c:	2e080037 	mcrcs	0, 0, r0, cr8, cr7, {1}
    5850:	01080037 	tsteq	r8, r7, lsr r0
    5854:	372e5000 	strcc	r5, [lr, -r0]!
    5858:	37300800 	ldrcc	r0, [r0, -r0, lsl #16]!
    585c:	00040800 	andeq	r0, r4, r0, lsl #16
    5860:	9f5001f3 	svcls	0x005001f3
	...
    586c:	08003724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, sp}
    5870:	08003726 	stmdaeq	r0, {r1, r2, r5, r8, r9, sl, ip, sp}
    5874:	9f300002 	svcls	0x00300002
    5878:	08003726 	stmdaeq	r0, {r1, r2, r5, r8, r9, sl, ip, sp}
    587c:	08003730 	stmdaeq	r0, {r4, r5, r8, r9, sl, ip, sp}
    5880:	0071000c 	rsbseq	r0, r1, ip
    5884:	1affff0a 	bne	54b4 <_Min_Stack_Size+0x50b4>
    5888:	301a0073 	andscc	r0, sl, r3, ror r0
    588c:	00009f2e 	andeq	r9, r0, lr, lsr #30
    5890:	00000000 	andeq	r0, r0, r0
    5894:	37300000 	ldrcc	r0, [r0, -r0]!
    5898:	37320800 	ldrcc	r0, [r2, -r0, lsl #16]!
    589c:	00010800 	andeq	r0, r1, r0, lsl #16
    58a0:	00373250 	eorseq	r3, r7, r0, asr r2
    58a4:	00373608 	eorseq	r3, r7, r8, lsl #12
    58a8:	f3000408 	vshl.u8	d0, d8, d0
    58ac:	009f5001 	addseq	r5, pc, r1
    58b0:	00000000 	andeq	r0, r0, r0
    58b4:	50000000 	andpl	r0, r0, r0
    58b8:	54080037 	strpl	r0, [r8], #-55	; 0x37
    58bc:	01080037 	tsteq	r8, r7, lsr r0
    58c0:	37545100 	ldrbcc	r5, [r4, -r0, lsl #2]
    58c4:	37580800 	ldrbcc	r0, [r8, -r0, lsl #16]
    58c8:	00040800 	andeq	r0, r4, r0, lsl #16
    58cc:	9f5101f3 	svcls	0x005101f3
	...
    58d8:	08003758 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, ip, sp}
    58dc:	0800375e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, sl, ip, sp}
    58e0:	5e500001 	cdppl	0, 5, cr0, cr0, cr1, {0}
    58e4:	80080037 	andhi	r0, r8, r7, lsr r0
    58e8:	04080037 	streq	r0, [r8], #-55	; 0x37
    58ec:	5001f300 	andpl	pc, r1, r0, lsl #6
    58f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    58f4:	00000000 	andeq	r0, r0, r0
    58f8:	00375800 	eorseq	r5, r7, r0, lsl #16
    58fc:	00376208 	eorseq	r6, r7, r8, lsl #4
    5900:	51000108 	tstpl	r0, r8, lsl #2
    5904:	08003762 	stmdaeq	r0, {r1, r5, r6, r8, r9, sl, ip, sp}
    5908:	08003780 	stmdaeq	r0, {r7, r8, r9, sl, ip, sp}
    590c:	01f30004 	mvnseq	r0, r4
    5910:	00009f51 	andeq	r9, r0, r1, asr pc
    5914:	00000000 	andeq	r0, r0, r0
    5918:	37580000 	ldrbcc	r0, [r8, -r0]
    591c:	377a0800 	ldrbcc	r0, [sl, -r0, lsl #16]!
    5920:	00010800 	andeq	r0, r1, r0, lsl #16
    5924:	00377a52 	eorseq	r7, r7, r2, asr sl
    5928:	00378008 	eorseq	r8, r7, r8
    592c:	f3000408 	vshl.u8	d0, d8, d0
    5930:	009f5201 	addseq	r5, pc, r1, lsl #4
    5934:	00000000 	andeq	r0, r0, r0
    5938:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    593c:	66080037 			; <UNDEFINED> instruction: 0x66080037
    5940:	02080037 	andeq	r0, r8, #55	; 0x37
    5944:	669f3000 	ldrvs	r3, [pc], r0
    5948:	7a080037 	bvc	205a2c <_Min_Stack_Size+0x20562c>
    594c:	09080037 	stmdbeq	r8, {r0, r1, r2, r4, r5}
    5950:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    5954:	00711aff 	ldrshteq	r1, [r1], #-175	; 0xffffff51
    5958:	377a9f24 	ldrbcc	r9, [sl, -r4, lsr #30]!
    595c:	37800800 	strcc	r0, [r0, r0, lsl #16]
    5960:	000a0800 	andeq	r0, sl, r0, lsl #16
    5964:	085201f3 	ldmdaeq	r2, {r0, r1, r4, r5, r6, r7, r8}^
    5968:	00711aff 	ldrshteq	r1, [r1], #-175	; 0xffffff51
    596c:	00009f24 	andeq	r9, r0, r4, lsr #30
    5970:	00000000 	andeq	r0, r0, r0
    5974:	37580000 	ldrbcc	r0, [r8, -r0]
    5978:	377c0800 	ldrbcc	r0, [ip, -r0, lsl #16]!
    597c:	00020800 	andeq	r0, r2, r0, lsl #16
    5980:	377c9f30 			; <UNDEFINED> instruction: 0x377c9f30
    5984:	37800800 	strcc	r0, [r0, r0, lsl #16]
    5988:	00010800 	andeq	r0, r1, r0, lsl #16
    598c:	00000053 	andeq	r0, r0, r3, asr r0
    5990:	00000000 	andeq	r0, r0, r0
    5994:	0037e800 	eorseq	lr, r7, r0, lsl #16
    5998:	00380008 	eorseq	r0, r8, r8
    599c:	30000208 	andcc	r0, r0, r8, lsl #4
    59a0:	0038009f 	mlaseq	r8, pc, r0, r0	; <UNPREDICTABLE>
    59a4:	00380408 	eorseq	r0, r8, r8, lsl #8
    59a8:	70000708 	andvc	r0, r0, r8, lsl #14
    59ac:	31254100 	teqcc	r5, r0, lsl #2
    59b0:	38089f1a 	stmdacc	r8, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
    59b4:	38180800 	ldmdacc	r8, {fp}
    59b8:	00020800 	andeq	r0, r2, r0, lsl #16
    59bc:	00009f30 	andeq	r9, r0, r0, lsr pc
    59c0:	00000000 	andeq	r0, r0, r0
    59c4:	37e80000 	strbcc	r0, [r8, r0]!
    59c8:	37ea0800 	strbcc	r0, [sl, r0, lsl #16]!
    59cc:	00020800 	andeq	r0, r2, r0, lsl #16
    59d0:	37ea9f31 			; <UNDEFINED> instruction: 0x37ea9f31
    59d4:	38180800 	ldmdacc	r8, {fp}
    59d8:	00020800 	andeq	r0, r2, r0, lsl #16
    59dc:	00009f41 	andeq	r9, r0, r1, asr #30
    59e0:	00000000 	andeq	r0, r0, r0
    59e4:	37e80000 	strbcc	r0, [r8, r0]!
    59e8:	37ea0800 	strbcc	r0, [sl, r0, lsl #16]!
    59ec:	00020800 	andeq	r0, r2, r0, lsl #16
    59f0:	37ea9f30 			; <UNDEFINED> instruction: 0x37ea9f30
    59f4:	37ec0800 	strbcc	r0, [ip, r0, lsl #16]!
    59f8:	00010800 	andeq	r0, r1, r0, lsl #16
    59fc:	00000053 	andeq	r0, r0, r3, asr r0
    5a00:	00000000 	andeq	r0, r0, r0
    5a04:	0037e800 	eorseq	lr, r7, r0, lsl #16
    5a08:	0037fc08 	eorseq	pc, r7, r8, lsl #24
    5a0c:	30000208 	andcc	r0, r0, r8, lsl #4
    5a10:	0038089f 	mlaseq	r8, pc, r8, r0	; <UNPREDICTABLE>
    5a14:	00381808 	eorseq	r1, r8, r8, lsl #16
    5a18:	31000208 	tstcc	r0, r8, lsl #4
    5a1c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5a20:	00000000 	andeq	r0, r0, r0
    5a24:	0037fc00 	eorseq	pc, r7, r0, lsl #24
    5a28:	00380808 	eorseq	r0, r8, r8, lsl #16
    5a2c:	08000308 	stmdaeq	r0, {r3, r8, r9}
    5a30:	00009f31 	andeq	r9, r0, r1, lsr pc
    5a34:	00000000 	andeq	r0, r0, r0
    5a38:	37fc0000 	ldrbcc	r0, [ip, r0]!
    5a3c:	38000800 	stmdacc	r0, {fp}
    5a40:	00020800 	andeq	r0, r2, r0, lsl #16
    5a44:	38009f31 	stmdacc	r0, {r0, r4, r5, r8, r9, sl, fp, ip, pc}
    5a48:	38080800 	stmdacc	r8, {fp}
    5a4c:	00020800 	andeq	r0, r2, r0, lsl #16
    5a50:	00009f41 	andeq	r9, r0, r1, asr #30
    5a54:	00000000 	andeq	r0, r0, r0
    5a58:	37fc0000 	ldrbcc	r0, [ip, r0]!
    5a5c:	38000800 	stmdacc	r0, {fp}
    5a60:	00020800 	andeq	r0, r2, r0, lsl #16
    5a64:	38009f30 	stmdacc	r0, {r4, r5, r8, r9, sl, fp, ip, pc}
    5a68:	38040800 	stmdacc	r4, {fp}
    5a6c:	00010800 	andeq	r0, r1, r0, lsl #16
    5a70:	00000050 	andeq	r0, r0, r0, asr r0
    5a74:	00000000 	andeq	r0, r0, r0
    5a78:	0037fc00 	eorseq	pc, r7, r0, lsl #24
    5a7c:	00380808 	eorseq	r0, r8, r8, lsl #16
    5a80:	30000208 	andcc	r0, r0, r8, lsl #4
    5a84:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5a88:	00000000 	andeq	r0, r0, r0
    5a8c:	00381800 	eorseq	r1, r8, r0, lsl #16
    5a90:	00382408 	eorseq	r2, r8, r8, lsl #8
    5a94:	50000108 	andpl	r0, r0, r8, lsl #2
    5a98:	08003824 	stmdaeq	r0, {r2, r5, fp, ip, sp}
    5a9c:	0800382c 	stmdaeq	r0, {r2, r3, r5, fp, ip, sp}
    5aa0:	01f30004 	mvnseq	r0, r4
    5aa4:	00009f50 	andeq	r9, r0, r0, asr pc
    5aa8:	00000000 	andeq	r0, r0, r0
    5aac:	38180000 	ldmdacc	r8, {}	; <UNPREDICTABLE>
    5ab0:	381c0800 	ldmdacc	ip, {fp}
    5ab4:	00020800 	andeq	r0, r2, r0, lsl #16
    5ab8:	381c9f30 	ldmdacc	ip, {r4, r5, r8, r9, sl, fp, ip, pc}
    5abc:	38240800 	stmdacc	r4!, {fp}
    5ac0:	00010800 	andeq	r0, r1, r0, lsl #16
    5ac4:	00382452 	eorseq	r2, r8, r2, asr r4
    5ac8:	00382c08 	eorseq	r2, r8, r8, lsl #24
    5acc:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    5ad8:	08003864 	stmdaeq	r0, {r2, r5, r6, fp, ip, sp}
    5adc:	0800386e 	stmdaeq	r0, {r1, r2, r3, r5, r6, fp, ip, sp}
    5ae0:	6e500001 	cdpvs	0, 5, cr0, cr0, cr1, {0}
    5ae4:	88080038 	stmdahi	r8, {r3, r4, r5}
    5ae8:	04080038 	streq	r0, [r8], #-56	; 0x38
    5aec:	5001f300 	andpl	pc, r1, r0, lsl #6
    5af0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5af4:	00000000 	andeq	r0, r0, r0
    5af8:	00386400 	eorseq	r6, r8, r0, lsl #8
    5afc:	00387208 	eorseq	r7, r8, r8, lsl #4
    5b00:	51000108 	tstpl	r0, r8, lsl #2
    5b04:	08003872 	stmdaeq	r0, {r1, r4, r5, r6, fp, ip, sp}
    5b08:	08003888 	stmdaeq	r0, {r3, r7, fp, ip, sp}
    5b0c:	01f30004 	mvnseq	r0, r4
    5b10:	00009f51 	andeq	r9, r0, r1, asr pc
    5b14:	00000000 	andeq	r0, r0, r0
    5b18:	38640000 	stmdacc	r4!, {}^	; <UNPREDICTABLE>
    5b1c:	38780800 	ldmdacc	r8!, {fp}^
    5b20:	00010800 	andeq	r0, r1, r0, lsl #16
    5b24:	00387852 	eorseq	r7, r8, r2, asr r8
    5b28:	00388808 	eorseq	r8, r8, r8, lsl #16
    5b2c:	f3000408 	vshl.u8	d0, d8, d0
    5b30:	009f5201 	addseq	r5, pc, r1, lsl #4
    5b34:	00000000 	andeq	r0, r0, r0
    5b38:	64000000 	strvs	r0, [r0], #-0
    5b3c:	70080038 	andvc	r0, r8, r8, lsr r0
    5b40:	01080038 	tsteq	r8, r8, lsr r0
    5b44:	38705300 	ldmdacc	r0!, {r8, r9, ip, lr}^
    5b48:	38880800 	stmcc	r8, {fp}
    5b4c:	00040800 	andeq	r0, r4, r0, lsl #16
    5b50:	9f5301f3 	svcls	0x005301f3
	...
    5b5c:	08003864 	stmdaeq	r0, {r2, r5, r6, fp, ip, sp}
    5b60:	0800387e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, fp, ip, sp}
    5b64:	00910002 	addseq	r0, r1, r2
	...
    5b70:	08003894 	stmdaeq	r0, {r2, r4, r7, fp, ip, sp}
    5b74:	080038a0 	stmdaeq	r0, {r5, r7, fp, ip, sp}
    5b78:	a0500001 	subsge	r0, r0, r1
    5b7c:	ac080038 	stcge	0, cr0, [r8], {56}	; 0x38
    5b80:	04080038 	streq	r0, [r8], #-56	; 0x38
    5b84:	5001f300 	andpl	pc, r1, r0, lsl #6
    5b88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5b8c:	00000000 	andeq	r0, r0, r0
    5b90:	00389400 	eorseq	r9, r8, r0, lsl #8
    5b94:	00389a08 	eorseq	r9, r8, r8, lsl #20
    5b98:	51000108 	tstpl	r0, r8, lsl #2
    5b9c:	0800389a 	stmdaeq	r0, {r1, r3, r4, r7, fp, ip, sp}
    5ba0:	080038ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip, sp}
    5ba4:	01f30004 	mvnseq	r0, r4
    5ba8:	00009f51 	andeq	r9, r0, r1, asr pc
    5bac:	00000000 	andeq	r0, r0, r0
    5bb0:	38940000 	ldmcc	r4, {}	; <UNPREDICTABLE>
    5bb4:	38960800 	ldmcc	r6, {fp}
    5bb8:	00010800 	andeq	r0, r1, r0, lsl #16
    5bbc:	00389652 	eorseq	r9, r8, r2, asr r6
    5bc0:	0038ac08 	eorseq	sl, r8, r8, lsl #24
    5bc4:	f3000408 	vshl.u8	d0, d8, d0
    5bc8:	009f5201 	addseq	r5, pc, r1, lsl #4
    5bcc:	00000000 	andeq	r0, r0, r0
    5bd0:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    5bd4:	c4080038 	strgt	r0, [r8], #-56	; 0x38
    5bd8:	01080038 	tsteq	r8, r8, lsr r0
    5bdc:	38c45000 	stmiacc	r4, {ip, lr}^
    5be0:	38d00800 	ldmcc	r0, {fp}^
    5be4:	00040800 	andeq	r0, r4, r0, lsl #16
    5be8:	9f5001f3 	svcls	0x005001f3
	...
    5bf4:	080038b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, ip, sp}
    5bf8:	080038be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, fp, ip, sp}
    5bfc:	be510001 	cdplt	0, 5, cr0, cr1, cr1, {0}
    5c00:	d0080038 	andle	r0, r8, r8, lsr r0
    5c04:	04080038 	streq	r0, [r8], #-56	; 0x38
    5c08:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5c0c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5c10:	00000000 	andeq	r0, r0, r0
    5c14:	0038b800 	eorseq	fp, r8, r0, lsl #16
    5c18:	0038ba08 	eorseq	fp, r8, r8, lsl #20
    5c1c:	52000108 	andpl	r0, r0, #8, 2
    5c20:	080038ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, fp, ip, sp}
    5c24:	080038d0 	stmdaeq	r0, {r4, r6, r7, fp, ip, sp}
    5c28:	01f30004 	mvnseq	r0, r4
    5c2c:	00009f52 	andeq	r9, r0, r2, asr pc
    5c30:	00000000 	andeq	r0, r0, r0
    5c34:	38e80000 	stmiacc	r8!, {}^	; <UNPREDICTABLE>
    5c38:	38f40800 	ldmcc	r4!, {fp}^
    5c3c:	00010800 	andeq	r0, r1, r0, lsl #16
    5c40:	0038f450 	eorseq	pc, r8, r0, asr r4	; <UNPREDICTABLE>
    5c44:	0038fc08 	eorseq	pc, r8, r8, lsl #24
    5c48:	f3000408 	vshl.u8	d0, d8, d0
    5c4c:	009f5001 	addseq	r5, pc, r1
    5c50:	00000000 	andeq	r0, r0, r0
    5c54:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    5c58:	f2080038 	vqadd.s8	d0, d8, d24
    5c5c:	01080038 	tsteq	r8, r8, lsr r0
    5c60:	38f25100 	ldmcc	r2!, {r8, ip, lr}^
    5c64:	38fc0800 	ldmcc	ip!, {fp}^
    5c68:	00040800 	andeq	r0, r4, r0, lsl #16
    5c6c:	9f5101f3 	svcls	0x005101f3
	...
    5c78:	080038e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, ip, sp}
    5c7c:	080038ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, ip, sp}
    5c80:	9f300002 	svcls	0x00300002
    5c84:	080038ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, ip, sp}
    5c88:	080038f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, ip, sp}
    5c8c:	00720009 	rsbseq	r0, r2, r9
    5c90:	ffffff11 			; <UNDEFINED> instruction: 0xffffff11
    5c94:	f09f1a44 			; <UNDEFINED> instruction: 0xf09f1a44
    5c98:	f4080038 	vst4.8	{d0-d3}, [r8 :256], r8
    5c9c:	01080038 	tsteq	r8, r8, lsr r0
    5ca0:	38f45200 	ldmcc	r4!, {r9, ip, lr}^
    5ca4:	38fc0800 	ldmcc	ip!, {fp}^
    5ca8:	00010800 	andeq	r0, r1, r0, lsl #16
    5cac:	00000050 	andeq	r0, r0, r0, asr r0
    5cb0:	00000000 	andeq	r0, r0, r0
    5cb4:	0038fc00 	eorseq	pc, r8, r0, lsl #24
    5cb8:	00390808 	eorseq	r0, r9, r8, lsl #16
    5cbc:	50000108 	andpl	r0, r0, r8, lsl #2
    5cc0:	08003908 	stmdaeq	r0, {r3, r8, fp, ip, sp}
    5cc4:	08003910 	stmdaeq	r0, {r4, r8, fp, ip, sp}
    5cc8:	01f30004 	mvnseq	r0, r4
    5ccc:	00009f50 	andeq	r9, r0, r0, asr pc
    5cd0:	00000000 	andeq	r0, r0, r0
    5cd4:	38fc0000 	ldmcc	ip!, {}^	; <UNPREDICTABLE>
    5cd8:	39060800 	stmdbcc	r6, {fp}
    5cdc:	00010800 	andeq	r0, r1, r0, lsl #16
    5ce0:	00390651 	eorseq	r0, r9, r1, asr r6
    5ce4:	00391008 	eorseq	r1, r9, r8
    5ce8:	f3000408 	vshl.u8	d0, d8, d0
    5cec:	009f5101 	addseq	r5, pc, r1, lsl #2
    5cf0:	00000000 	andeq	r0, r0, r0
    5cf4:	fc000000 	stc2	0, cr0, [r0], {-0}
    5cf8:	00080038 	andeq	r0, r8, r8, lsr r0
    5cfc:	02080039 	andeq	r0, r8, #57	; 0x39
    5d00:	009f3000 	addseq	r3, pc, r0
    5d04:	04080039 	streq	r0, [r8], #-57	; 0x39
    5d08:	09080039 	stmdbeq	r8, {r0, r3, r4, r5}
    5d0c:	0c007200 	sfmeq	f7, 4, [r0], {-0}
    5d10:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
    5d14:	39049f1a 	stmdbcc	r4, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
    5d18:	39080800 	stmdbcc	r8, {fp}
    5d1c:	00010800 	andeq	r0, r1, r0, lsl #16
    5d20:	00390852 	eorseq	r0, r9, r2, asr r8
    5d24:	00391008 	eorseq	r1, r9, r8
    5d28:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    5d34:	08003910 	stmdaeq	r0, {r4, r8, fp, ip, sp}
    5d38:	0800391a 	stmdaeq	r0, {r1, r3, r4, r8, fp, ip, sp}
    5d3c:	1a500001 	bne	1405d48 <_Min_Stack_Size+0x1405948>
    5d40:	24080039 	strcs	r0, [r8], #-57	; 0x39
    5d44:	04080039 	streq	r0, [r8], #-57	; 0x39
    5d48:	5001f300 	andpl	pc, r1, r0, lsl #6
    5d4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5d50:	00000000 	andeq	r0, r0, r0
    5d54:	00391000 	eorseq	r1, r9, r0
    5d58:	00391408 	eorseq	r1, r9, r8, lsl #8
    5d5c:	30000208 	andcc	r0, r0, r8, lsl #4
    5d60:	0039149f 	mlaseq	r9, pc, r4, r1	; <UNPREDICTABLE>
    5d64:	00391a08 	eorseq	r1, r9, r8, lsl #20
    5d68:	52000108 	andpl	r0, r0, #8, 2
    5d6c:	0800391a 	stmdaeq	r0, {r1, r3, r4, r8, fp, ip, sp}
    5d70:	08003924 	stmdaeq	r0, {r2, r5, r8, fp, ip, sp}
    5d74:	00500001 	subseq	r0, r0, r1
    5d78:	00000000 	andeq	r0, r0, r0
    5d7c:	34000000 	strcc	r0, [r0], #-0
    5d80:	3e080039 	mcrcc	0, 0, r0, cr8, cr9, {1}
    5d84:	01080039 	tsteq	r8, r9, lsr r0
    5d88:	393e5000 	ldmdbcc	lr!, {ip, lr}
    5d8c:	39480800 	stmdbcc	r8, {fp}^
    5d90:	00040800 	andeq	r0, r4, r0, lsl #16
    5d94:	9f5001f3 	svcls	0x005001f3
	...
    5da0:	08003934 	stmdaeq	r0, {r2, r4, r5, r8, fp, ip, sp}
    5da4:	08003938 	stmdaeq	r0, {r3, r4, r5, r8, fp, ip, sp}
    5da8:	9f300002 	svcls	0x00300002
    5dac:	08003938 	stmdaeq	r0, {r3, r4, r5, r8, fp, ip, sp}
    5db0:	0800393e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, fp, ip, sp}
    5db4:	3e520001 	cdpcc	0, 5, cr0, cr2, cr1, {0}
    5db8:	48080039 	stmdami	r8, {r0, r3, r4, r5}
    5dbc:	01080039 	tsteq	r8, r9, lsr r0
    5dc0:	00005000 	andeq	r5, r0, r0
    5dc4:	00000000 	andeq	r0, r0, r0
    5dc8:	39480000 	stmdbcc	r8, {}^	; <UNPREDICTABLE>
    5dcc:	39520800 	ldmdbcc	r2, {fp}^
    5dd0:	00010800 	andeq	r0, r1, r0, lsl #16
    5dd4:	00395250 	eorseq	r5, r9, r0, asr r2
    5dd8:	00395c08 	eorseq	r5, r9, r8, lsl #24
    5ddc:	f3000408 	vshl.u8	d0, d8, d0
    5de0:	009f5001 	addseq	r5, pc, r1
    5de4:	00000000 	andeq	r0, r0, r0
    5de8:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    5dec:	4c080039 	stcmi	0, cr0, [r8], {57}	; 0x39
    5df0:	02080039 	andeq	r0, r8, #57	; 0x39
    5df4:	4c9f3000 	ldcmi	0, cr3, [pc], {0}
    5df8:	52080039 	andpl	r0, r8, #57	; 0x39
    5dfc:	01080039 	tsteq	r8, r9, lsr r0
    5e00:	39525200 	ldmdbcc	r2, {r9, ip, lr}^
    5e04:	395c0800 	ldmdbcc	ip, {fp}^
    5e08:	00010800 	andeq	r0, r1, r0, lsl #16
    5e0c:	00000050 	andeq	r0, r0, r0, asr r0
    5e10:	00000000 	andeq	r0, r0, r0
    5e14:	00395c00 	eorseq	r5, r9, r0, lsl #24
    5e18:	00396808 	eorseq	r6, r9, r8, lsl #16
    5e1c:	50000108 	andpl	r0, r0, r8, lsl #2
    5e20:	08003968 	stmdaeq	r0, {r3, r5, r6, r8, fp, ip, sp}
    5e24:	08003970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, sp}
    5e28:	01f30004 	mvnseq	r0, r4
    5e2c:	00009f50 	andeq	r9, r0, r0, asr pc
    5e30:	00000000 	andeq	r0, r0, r0
    5e34:	395c0000 	ldmdbcc	ip, {}^	; <UNPREDICTABLE>
    5e38:	39600800 	stmdbcc	r0!, {fp}^
    5e3c:	00020800 	andeq	r0, r2, r0, lsl #16
    5e40:	39609f30 	stmdbcc	r0!, {r4, r5, r8, r9, sl, fp, ip, pc}^
    5e44:	39680800 	stmdbcc	r8!, {fp}^
    5e48:	00010800 	andeq	r0, r1, r0, lsl #16
    5e4c:	00396852 	eorseq	r6, r9, r2, asr r8
    5e50:	00397008 	eorseq	r7, r9, r8
    5e54:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    5e60:	08003970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, sp}
    5e64:	08003974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp, ip, sp}
    5e68:	9f300002 	svcls	0x00300002
    5e6c:	08003974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp, ip, sp}
    5e70:	08003978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, ip, sp}
    5e74:	00730005 	rsbseq	r0, r3, r5
    5e78:	789f1a3c 	ldmvc	pc, {r2, r3, r4, r5, r9, fp, ip}	; <UNPREDICTABLE>
    5e7c:	84080039 	strhi	r0, [r8], #-57	; 0x39
    5e80:	01080039 	tsteq	r8, r9, lsr r0
    5e84:	398c5300 	stmibcc	ip, {r8, r9, ip, lr}
    5e88:	39900800 	ldmibcc	r0, {fp}
    5e8c:	00060800 	andeq	r0, r6, r0, lsl #16
    5e90:	f0080074 			; <UNDEFINED> instruction: 0xf0080074
    5e94:	39909f1a 	ldmibcc	r0, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
    5e98:	39920800 	ldmibcc	r2, {fp}
    5e9c:	00010800 	andeq	r0, r1, r0, lsl #16
    5ea0:	00399854 	eorseq	r9, r9, r4, asr r8
    5ea4:	00399c08 	eorseq	r9, r9, r8, lsl #24
    5ea8:	74000708 	strvc	r0, [r0], #-1800	; 0x708
    5eac:	1c000a00 	stcne	10, cr0, [r0], {-0}
    5eb0:	399c9f1a 	ldmibcc	ip, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
    5eb4:	399e0800 	ldmibcc	lr, {fp}
    5eb8:	00010800 	andeq	r0, r1, r0, lsl #16
    5ebc:	0039a654 	eorseq	sl, r9, r4, asr r6
    5ec0:	0039ae08 	eorseq	sl, r9, r8, lsl #28
    5ec4:	71000708 	tstvc	r0, r8, lsl #14
    5ec8:	e0000a00 	and	r0, r0, r0, lsl #20
    5ecc:	39ae9f1a 	stmibcc	lr!, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
    5ed0:	39b60800 	ldmibcc	r6!, {fp}
    5ed4:	00010800 	andeq	r0, r1, r0, lsl #16
    5ed8:	0039b651 	eorseq	fp, r9, r1, asr r6
    5edc:	0039b808 	eorseq	fp, r9, r8, lsl #16
    5ee0:	53000108 	movwpl	r0, #264	; 0x108
    5ee4:	080039bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, fp, ip, sp}
    5ee8:	080039c4 	stmdaeq	r0, {r2, r6, r7, r8, fp, ip, sp}
    5eec:	00530001 	subseq	r0, r3, r1
    5ef0:	00000000 	andeq	r0, r0, r0
    5ef4:	70000000 	andvc	r0, r0, r0
    5ef8:	92080039 	andls	r0, r8, #57	; 0x39
    5efc:	02080039 	andeq	r0, r8, #57	; 0x39
    5f00:	929f3000 	addsls	r3, pc, #0
    5f04:	98080039 	stmdals	r8, {r0, r3, r4, r5}
    5f08:	06080039 			; <UNDEFINED> instruction: 0x06080039
    5f0c:	08007400 	stmdaeq	r0, {sl, ip, sp, lr}
    5f10:	9e9f1aff 	mrcls	10, 4, r1, cr15, cr15, {7}
    5f14:	a2080039 	andge	r0, r8, #57	; 0x39
    5f18:	06080039 			; <UNDEFINED> instruction: 0x06080039
    5f1c:	08007400 	stmdaeq	r0, {sl, ip, sp, lr}
    5f20:	b09f1aff 			; <UNDEFINED> instruction: 0xb09f1aff
    5f24:	b6080039 			; <UNDEFINED> instruction: 0xb6080039
    5f28:	06080039 			; <UNDEFINED> instruction: 0x06080039
    5f2c:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    5f30:	b69f1aff 			; <UNDEFINED> instruction: 0xb69f1aff
    5f34:	00080039 	andeq	r0, r8, r9, lsr r0
    5f38:	0208003a 	andeq	r0, r8, #58	; 0x3a
    5f3c:	009f3000 	addseq	r3, pc, r0
    5f40:	00000000 	andeq	r0, r0, r0
    5f44:	70000000 	andvc	r0, r0, r0
    5f48:	86080039 			; <UNDEFINED> instruction: 0x86080039
    5f4c:	02080039 	andeq	r0, r8, #57	; 0x39
    5f50:	b69f3000 	ldrlt	r3, [pc], r0
    5f54:	da080039 	ble	206040 <_Min_Stack_Size+0x205c40>
    5f58:	02080039 	andeq	r0, r8, #57	; 0x39
    5f5c:	da9f3000 	ble	fe7d1f64 <_estack+0xde7a1f64>
    5f60:	ea080039 	b	20604c <_Min_Stack_Size+0x205c4c>
    5f64:	01080039 	tsteq	r8, r9, lsr r0
    5f68:	00005300 	andeq	r5, r0, r0, lsl #6
    5f6c:	00000000 	andeq	r0, r0, r0
    5f70:	39700000 	ldmdbcc	r0!, {}^	; <UNPREDICTABLE>
    5f74:	39860800 	stmibcc	r6, {fp}
    5f78:	00020800 	andeq	r0, r2, r0, lsl #16
    5f7c:	39b69f32 	ldmibcc	r6!, {r1, r4, r5, r8, r9, sl, fp, ip, pc}
    5f80:	39de0800 	ldmibcc	lr, {fp}^
    5f84:	00020800 	andeq	r0, r2, r0, lsl #16
    5f88:	39de9f32 	ldmibcc	lr, {r1, r4, r5, r8, r9, sl, fp, ip, pc}^
    5f8c:	39e20800 	stmibcc	r2!, {fp}^
    5f90:	000d0800 	andeq	r0, sp, r0, lsl #16
    5f94:	3d480072 	stclcc	0, cr0, [r8, #-456]	; 0xfffffe38
    5f98:	25401a24 	strbcs	r1, [r0, #-2596]	; 0xa24
    5f9c:	24310123 	ldrtcs	r0, [r1], #-291	; 0x123
    5fa0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5fa4:	00000000 	andeq	r0, r0, r0
    5fa8:	00397000 	eorseq	r7, r9, r0
    5fac:	00398608 	eorseq	r8, r9, r8, lsl #12
    5fb0:	30000208 	andcc	r0, r0, r8, lsl #4
    5fb4:	0039b69f 	mlaseq	r9, pc, r6, fp	; <UNPREDICTABLE>
    5fb8:	0039be08 	eorseq	fp, r9, r8, lsl #28
    5fbc:	30000208 	andcc	r0, r0, r8, lsl #4
    5fc0:	0039be9f 	mlaseq	r9, pc, lr, fp	; <UNPREDICTABLE>
    5fc4:	003a0008 	eorseq	r0, sl, r8
    5fc8:	74000908 	strvc	r0, [r0], #-2312	; 0x908
    5fcc:	24424000 	strbcs	r4, [r2], #-0
    5fd0:	9f25461a 	svcls	0x0025461a
	...
    5fdc:	08003970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, sp}
    5fe0:	08003986 	stmdaeq	r0, {r1, r2, r7, r8, fp, ip, sp}
    5fe4:	9f320002 	svcls	0x00320002
    5fe8:	080039b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, fp, ip, sp}
    5fec:	080039ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, fp, ip, sp}
    5ff0:	9f320002 	svcls	0x00320002
    5ff4:	080039ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, fp, ip, sp}
    5ff8:	08003a00 	stmdaeq	r0, {r9, fp, ip, sp}
    5ffc:	00510001 	subseq	r0, r1, r1
	...
    6008:	2608003a 			; <UNDEFINED> instruction: 0x2608003a
    600c:	0108003a 	tsteq	r8, sl, lsr r0
    6010:	3a265000 	bcc	99a018 <_Min_Stack_Size+0x999c18>
    6014:	3a300800 	bcc	c0801c <_Min_Stack_Size+0xc07c1c>
    6018:	00040800 	andeq	r0, r4, r0, lsl #16
    601c:	9f5001f3 	svcls	0x005001f3
	...
    6028:	08003a00 	stmdaeq	r0, {r9, fp, ip, sp}
    602c:	08003a0e 	stmdaeq	r0, {r1, r2, r3, r9, fp, ip, sp}
    6030:	9f300002 	svcls	0x00300002
    6034:	08003a0e 	stmdaeq	r0, {r1, r2, r3, r9, fp, ip, sp}
    6038:	08003a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp, ip, sp}
    603c:	1c510001 	mrrcne	0, 0, r0, r1, cr1
    6040:	1e08003a 	mcrne	0, 0, r0, cr8, cr10, {1}
    6044:	0108003a 	tsteq	r8, sl, lsr r0
    6048:	00005300 	andeq	r5, r0, r0, lsl #6
    604c:	00000000 	andeq	r0, r0, r0
    6050:	3a540000 	bcc	1506058 <_Min_Stack_Size+0x1505c58>
    6054:	3a5c0800 	bcc	170805c <_Min_Stack_Size+0x1707c5c>
    6058:	00010800 	andeq	r0, r1, r0, lsl #16
    605c:	003a5c50 	eorseq	r5, sl, r0, asr ip
    6060:	003a6c08 	eorseq	r6, sl, r8, lsl #24
    6064:	70000308 	andvc	r0, r0, r8, lsl #6
    6068:	00009f01 	andeq	r9, r0, r1, lsl #30
    606c:	00000000 	andeq	r0, r0, r0
    6070:	3a540000 	bcc	1506078 <_Min_Stack_Size+0x1505c78>
    6074:	3a5a0800 	bcc	168807c <_Min_Stack_Size+0x1687c7c>
    6078:	00020800 	andeq	r0, r2, r0, lsl #16
    607c:	3a5a9f30 	bcc	16add44 <_Min_Stack_Size+0x16ad944>
    6080:	3a6c0800 	bcc	1b08088 <_Min_Stack_Size+0x1b07c88>
    6084:	00010800 	andeq	r0, r1, r0, lsl #16
    6088:	00000052 	andeq	r0, r0, r2, asr r0
    608c:	00000000 	andeq	r0, r0, r0
    6090:	003a6c00 	eorseq	r6, sl, r0, lsl #24
    6094:	003a7408 	eorseq	r7, sl, r8, lsl #8
    6098:	50000108 	andpl	r0, r0, r8, lsl #2
    609c:	08003a74 	stmdaeq	r0, {r2, r4, r5, r6, r9, fp, ip, sp}
    60a0:	08003a88 	stmdaeq	r0, {r3, r7, r9, fp, ip, sp}
    60a4:	01700003 	cmneq	r0, r3
    60a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    60ac:	00000000 	andeq	r0, r0, r0
    60b0:	003a6c00 	eorseq	r6, sl, r0, lsl #24
    60b4:	003a7208 	eorseq	r7, sl, r8, lsl #4
    60b8:	30000208 	andcc	r0, r0, r8, lsl #4
    60bc:	003a729f 	mlaseq	sl, pc, r2, r7	; <UNPREDICTABLE>
    60c0:	003a8808 	eorseq	r8, sl, r8, lsl #16
    60c4:	52000108 	andpl	r0, r0, #8, 2
	...
    60d0:	08003a88 	stmdaeq	r0, {r3, r7, r9, fp, ip, sp}
    60d4:	08003a94 	stmdaeq	r0, {r2, r4, r7, r9, fp, ip, sp}
    60d8:	94500001 	ldrbls	r0, [r0], #-1
    60dc:	a008003a 	andge	r0, r8, sl, lsr r0
    60e0:	0408003a 	streq	r0, [r8], #-58	; 0x3a
    60e4:	5001f300 	andpl	pc, r1, r0, lsl #6
    60e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    60ec:	00000000 	andeq	r0, r0, r0
    60f0:	003a8800 	eorseq	r8, sl, r0, lsl #16
    60f4:	003a8e08 	eorseq	r8, sl, r8, lsl #28
    60f8:	30000208 	andcc	r0, r0, r8, lsl #4
    60fc:	003a8e9f 	mlaseq	sl, pc, lr, r8	; <UNPREDICTABLE>
    6100:	003a9408 	eorseq	r9, sl, r8, lsl #8
    6104:	52000108 	andpl	r0, r0, #8, 2
    6108:	08003a94 	stmdaeq	r0, {r2, r4, r7, r9, fp, ip, sp}
    610c:	08003aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip, sp}
    6110:	00500001 	subseq	r0, r0, r1
    6114:	00000000 	andeq	r0, r0, r0
    6118:	a0000000 	andge	r0, r0, r0
    611c:	ac08003a 	stcge	0, cr0, [r8], {58}	; 0x3a
    6120:	0108003a 	tsteq	r8, sl, lsr r0
    6124:	3aac5000 	bcc	feb1a12c <_estack+0xdeaea12c>
    6128:	3ab80800 	bcc	fee08130 <_estack+0xdedd8130>
    612c:	00040800 	andeq	r0, r4, r0, lsl #16
    6130:	9f5001f3 	svcls	0x005001f3
	...
    613c:	08003aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip, sp}
    6140:	08003aa6 	stmdaeq	r0, {r1, r2, r5, r7, r9, fp, ip, sp}
    6144:	9f300002 	svcls	0x00300002
    6148:	08003aa6 	stmdaeq	r0, {r1, r2, r5, r7, r9, fp, ip, sp}
    614c:	08003aac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp, ip, sp}
    6150:	ac520001 	mrrcge	0, 0, r0, r2, cr1
    6154:	b808003a 	stmdalt	r8, {r1, r3, r4, r5}
    6158:	0108003a 	tsteq	r8, sl, lsr r0
    615c:	00005000 	andeq	r5, r0, r0
    6160:	00000000 	andeq	r0, r0, r0
    6164:	3ab80000 	bcc	fee0616c <_estack+0xdedd616c>
    6168:	3ac40800 	bcc	ff108170 <_estack+0xdf0d8170>
    616c:	00010800 	andeq	r0, r1, r0, lsl #16
    6170:	003ac450 	eorseq	ip, sl, r0, asr r4
    6174:	003ad008 	eorseq	sp, sl, r8
    6178:	f3000408 	vshl.u8	d0, d8, d0
    617c:	009f5001 	addseq	r5, pc, r1
    6180:	00000000 	andeq	r0, r0, r0
    6184:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    6188:	be08003a 	mcrlt	0, 0, r0, cr8, cr10, {1}
    618c:	0208003a 	andeq	r0, r8, #58	; 0x3a
    6190:	be9f3000 	cdplt	0, 9, cr3, cr15, cr0, {0}
    6194:	c408003a 	strgt	r0, [r8], #-58	; 0x3a
    6198:	0108003a 	tsteq	r8, sl, lsr r0
    619c:	3ac45200 	bcc	ff11a9a4 <_estack+0xdf0ea9a4>
    61a0:	3ad00800 	bcc	ff4081a8 <_estack+0xdf3d81a8>
    61a4:	00010800 	andeq	r0, r1, r0, lsl #16
    61a8:	00000050 	andeq	r0, r0, r0, asr r0
    61ac:	00000000 	andeq	r0, r0, r0
    61b0:	003adc00 	eorseq	sp, sl, r0, lsl #24
    61b4:	003ae608 	eorseq	lr, sl, r8, lsl #12
    61b8:	50000108 	andpl	r0, r0, r8, lsl #2
    61bc:	08003ae6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, fp, ip, sp}
    61c0:	08003aea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, fp, ip, sp}
    61c4:	01f30004 	mvnseq	r0, r4
    61c8:	3aea9f50 	bcc	ffaadf10 <_estack+0xdfa7df10>
    61cc:	3aec0800 	bcc	ffb081d4 <_estack+0xdfad81d4>
    61d0:	00010800 	andeq	r0, r1, r0, lsl #16
    61d4:	003aec50 	eorseq	lr, sl, r0, asr ip
    61d8:	003af408 	eorseq	pc, sl, r8, lsl #8
    61dc:	f3000408 	vshl.u8	d0, d8, d0
    61e0:	009f5001 	addseq	r5, pc, r1
    61e4:	00000000 	andeq	r0, r0, r0
    61e8:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    61ec:	fe08003a 	mcr2	0, 0, r0, cr8, cr10, {1}
    61f0:	0108003a 	tsteq	r8, sl, lsr r0
    61f4:	3afe5000 	bcc	fff9a1fc <_estack+0xdff6a1fc>
    61f8:	3b020800 	blcc	88200 <_Min_Stack_Size+0x87e00>
    61fc:	00040800 	andeq	r0, r4, r0, lsl #16
    6200:	9f5001f3 	svcls	0x005001f3
    6204:	08003b02 	stmdaeq	r0, {r1, r8, r9, fp, ip, sp}
    6208:	08003b04 	stmdaeq	r0, {r2, r8, r9, fp, ip, sp}
    620c:	04500001 	ldrbeq	r0, [r0], #-1
    6210:	0c08003b 	stceq	0, cr0, [r8], {59}	; 0x3b
    6214:	0408003b 	streq	r0, [r8], #-59	; 0x3b
    6218:	5001f300 	andpl	pc, r1, r0, lsl #6
    621c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6220:	00000000 	andeq	r0, r0, r0
    6224:	003b0c00 	eorseq	r0, fp, r0, lsl #24
    6228:	003b1608 	eorseq	r1, fp, r8, lsl #12
    622c:	50000108 	andpl	r0, r0, r8, lsl #2
    6230:	08003b16 	stmdaeq	r0, {r1, r2, r4, r8, r9, fp, ip, sp}
    6234:	08003b1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, fp, ip, sp}
    6238:	01f30004 	mvnseq	r0, r4
    623c:	3b1a9f50 	blcc	6adf84 <_Min_Stack_Size+0x6adb84>
    6240:	3b1c0800 	blcc	708248 <_Min_Stack_Size+0x707e48>
    6244:	00010800 	andeq	r0, r1, r0, lsl #16
    6248:	003b1c50 	eorseq	r1, fp, r0, asr ip
    624c:	003b2408 	eorseq	r2, fp, r8, lsl #8
    6250:	f3000408 	vshl.u8	d0, d8, d0
    6254:	009f5001 	addseq	r5, pc, r1
    6258:	00000000 	andeq	r0, r0, r0
    625c:	24000000 	strcs	r0, [r0], #-0
    6260:	2e08003b 	mcrcs	0, 0, r0, cr8, cr11, {1}
    6264:	0108003b 	tsteq	r8, fp, lsr r0
    6268:	3b2e5000 	blcc	b9a270 <_Min_Stack_Size+0xb99e70>
    626c:	3b320800 	blcc	c88274 <_Min_Stack_Size+0xc87e74>
    6270:	00040800 	andeq	r0, r4, r0, lsl #16
    6274:	9f5001f3 	svcls	0x005001f3
    6278:	08003b32 	stmdaeq	r0, {r1, r4, r5, r8, r9, fp, ip, sp}
    627c:	08003b34 	stmdaeq	r0, {r2, r4, r5, r8, r9, fp, ip, sp}
    6280:	34500001 	ldrbcc	r0, [r0], #-1
    6284:	3c08003b 	stccc	0, cr0, [r8], {59}	; 0x3b
    6288:	0408003b 	streq	r0, [r8], #-59	; 0x3b
    628c:	5001f300 	andpl	pc, r1, r0, lsl #6
    6290:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6294:	00000000 	andeq	r0, r0, r0
    6298:	003b3c00 	eorseq	r3, fp, r0, lsl #24
    629c:	003b4608 	eorseq	r4, fp, r8, lsl #12
    62a0:	50000108 	andpl	r0, r0, r8, lsl #2
    62a4:	08003b46 	stmdaeq	r0, {r1, r2, r6, r8, r9, fp, ip, sp}
    62a8:	08003b4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, fp, ip, sp}
    62ac:	01f30004 	mvnseq	r0, r4
    62b0:	3b4a9f50 	blcc	12adff8 <_Min_Stack_Size+0x12adbf8>
    62b4:	3b4c0800 	blcc	13082bc <_Min_Stack_Size+0x1307ebc>
    62b8:	00010800 	andeq	r0, r1, r0, lsl #16
    62bc:	003b4c50 	eorseq	r4, fp, r0, asr ip
    62c0:	003b5408 	eorseq	r5, fp, r8, lsl #8
    62c4:	f3000408 	vshl.u8	d0, d8, d0
    62c8:	009f5001 	addseq	r5, pc, r1
    62cc:	00000000 	andeq	r0, r0, r0
    62d0:	54000000 	strpl	r0, [r0], #-0
    62d4:	5e08003b 	mcrpl	0, 0, r0, cr8, cr11, {1}
    62d8:	0108003b 	tsteq	r8, fp, lsr r0
    62dc:	3b5e5000 	blcc	179a2e4 <_Min_Stack_Size+0x1799ee4>
    62e0:	3b620800 	blcc	18882e8 <_Min_Stack_Size+0x1887ee8>
    62e4:	00040800 	andeq	r0, r4, r0, lsl #16
    62e8:	9f5001f3 	svcls	0x005001f3
    62ec:	08003b62 	stmdaeq	r0, {r1, r5, r6, r8, r9, fp, ip, sp}
    62f0:	08003b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, ip, sp}
    62f4:	64500001 	ldrbvs	r0, [r0], #-1
    62f8:	6c08003b 	stcvs	0, cr0, [r8], {59}	; 0x3b
    62fc:	0408003b 	streq	r0, [r8], #-59	; 0x3b
    6300:	5001f300 	andpl	pc, r1, r0, lsl #6
    6304:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6308:	00000000 	andeq	r0, r0, r0
    630c:	003b6c00 	eorseq	r6, fp, r0, lsl #24
    6310:	003b7608 	eorseq	r7, fp, r8, lsl #12
    6314:	50000108 	andpl	r0, r0, r8, lsl #2
    6318:	08003b76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, fp, ip, sp}
    631c:	08003b7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, fp, ip, sp}
    6320:	01f30004 	mvnseq	r0, r4
    6324:	3b7a9f50 	blcc	1eae06c <_Min_Stack_Size+0x1eadc6c>
    6328:	3b7c0800 	blcc	1f08330 <_Min_Stack_Size+0x1f07f30>
    632c:	00010800 	andeq	r0, r1, r0, lsl #16
    6330:	003b7c50 	eorseq	r7, fp, r0, asr ip
    6334:	003b8408 	eorseq	r8, fp, r8, lsl #8
    6338:	f3000408 	vshl.u8	d0, d8, d0
    633c:	009f5001 	addseq	r5, pc, r1
    6340:	00000000 	andeq	r0, r0, r0
    6344:	84000000 	strhi	r0, [r0], #-0
    6348:	8e08003b 	mcrhi	0, 0, r0, cr8, cr11, {1}
    634c:	0108003b 	tsteq	r8, fp, lsr r0
    6350:	3b8e5000 	blcc	fe39a358 <_estack+0xde36a358>
    6354:	3b920800 	blcc	fe48835c <_estack+0xde45835c>
    6358:	00040800 	andeq	r0, r4, r0, lsl #16
    635c:	9f5001f3 	svcls	0x005001f3
    6360:	08003b92 	stmdaeq	r0, {r1, r4, r7, r8, r9, fp, ip, sp}
    6364:	08003b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, ip, sp}
    6368:	94500001 	ldrbls	r0, [r0], #-1
    636c:	9c08003b 	stcls	0, cr0, [r8], {59}	; 0x3b
    6370:	0408003b 	streq	r0, [r8], #-59	; 0x3b
    6374:	5001f300 	andpl	pc, r1, r0, lsl #6
    6378:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    637c:	00000000 	andeq	r0, r0, r0
    6380:	003b9c00 	eorseq	r9, fp, r0, lsl #24
    6384:	003ba608 	eorseq	sl, fp, r8, lsl #12
    6388:	50000108 	andpl	r0, r0, r8, lsl #2
    638c:	08003ba6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, fp, ip, sp}
    6390:	08003baa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, fp, ip, sp}
    6394:	01f30004 	mvnseq	r0, r4
    6398:	3baa9f50 	blcc	feaae0e0 <_estack+0xdea7e0e0>
    639c:	3bac0800 	blcc	feb083a4 <_estack+0xdead83a4>
    63a0:	00010800 	andeq	r0, r1, r0, lsl #16
    63a4:	003bac50 	eorseq	sl, fp, r0, asr ip
    63a8:	003bb408 	eorseq	fp, fp, r8, lsl #8
    63ac:	f3000408 	vshl.u8	d0, d8, d0
    63b0:	009f5001 	addseq	r5, pc, r1
    63b4:	00000000 	andeq	r0, r0, r0
    63b8:	b4000000 	strlt	r0, [r0], #-0
    63bc:	be08003b 	mcrlt	0, 0, r0, cr8, cr11, {1}
    63c0:	0108003b 	tsteq	r8, fp, lsr r0
    63c4:	3bbe5000 	blcc	fef9a3cc <_estack+0xdef6a3cc>
    63c8:	3bc20800 	blcc	ff0883d0 <_estack+0xdf0583d0>
    63cc:	00040800 	andeq	r0, r4, r0, lsl #16
    63d0:	9f5001f3 	svcls	0x005001f3
    63d4:	08003bc2 	stmdaeq	r0, {r1, r6, r7, r8, r9, fp, ip, sp}
    63d8:	08003bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp, ip, sp}
    63dc:	c4500001 	ldrbgt	r0, [r0], #-1
    63e0:	cc08003b 	stcgt	0, cr0, [r8], {59}	; 0x3b
    63e4:	0408003b 	streq	r0, [r8], #-59	; 0x3b
    63e8:	5001f300 	andpl	pc, r1, r0, lsl #6
    63ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    63f0:	00000000 	andeq	r0, r0, r0
    63f4:	003bcc00 	eorseq	ip, fp, r0, lsl #24
    63f8:	003bd608 	eorseq	sp, fp, r8, lsl #12
    63fc:	50000108 	andpl	r0, r0, r8, lsl #2
    6400:	08003bd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, fp, ip, sp}
    6404:	08003bda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, fp, ip, sp}
    6408:	01f30004 	mvnseq	r0, r4
    640c:	3bda9f50 	blcc	ff6ae154 <_estack+0xdf67e154>
    6410:	3bdc0800 	blcc	ff708418 <_estack+0xdf6d8418>
    6414:	00010800 	andeq	r0, r1, r0, lsl #16
    6418:	003bdc50 	eorseq	sp, fp, r0, asr ip
    641c:	003be408 	eorseq	lr, fp, r8, lsl #8
    6420:	f3000408 	vshl.u8	d0, d8, d0
    6424:	009f5001 	addseq	r5, pc, r1
    6428:	00000000 	andeq	r0, r0, r0
    642c:	e4000000 	str	r0, [r0], #-0
    6430:	ee08003b 	mcr	0, 0, r0, cr8, cr11, {1}
    6434:	0108003b 	tsteq	r8, fp, lsr r0
    6438:	3bee5000 	blcc	ffb9a440 <_estack+0xdfb6a440>
    643c:	3bf20800 	blcc	ffc88444 <_estack+0xdfc58444>
    6440:	00040800 	andeq	r0, r4, r0, lsl #16
    6444:	9f5001f3 	svcls	0x005001f3
    6448:	08003bf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, fp, ip, sp}
    644c:	08003bf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, fp, ip, sp}
    6450:	f4500001 			; <UNDEFINED> instruction: 0xf4500001
    6454:	fc08003b 	stc2	0, cr0, [r8], {59}	; 0x3b
    6458:	0408003b 	streq	r0, [r8], #-59	; 0x3b
    645c:	5001f300 	andpl	pc, r1, r0, lsl #6
    6460:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6464:	00000000 	andeq	r0, r0, r0
    6468:	003bfc00 	eorseq	pc, fp, r0, lsl #24
    646c:	003c0608 	eorseq	r0, ip, r8, lsl #12
    6470:	50000108 	andpl	r0, r0, r8, lsl #2
    6474:	08003c06 	stmdaeq	r0, {r1, r2, sl, fp, ip, sp}
    6478:	08003c0a 	stmdaeq	r0, {r1, r3, sl, fp, ip, sp}
    647c:	01f30004 	mvnseq	r0, r4
    6480:	3c0a9f50 	stccc	15, cr9, [sl], {80}	; 0x50
    6484:	3c0c0800 	stccc	8, cr0, [ip], {-0}
    6488:	00010800 	andeq	r0, r1, r0, lsl #16
    648c:	003c0c50 	eorseq	r0, ip, r0, asr ip
    6490:	003c1408 	eorseq	r1, ip, r8, lsl #8
    6494:	f3000408 	vshl.u8	d0, d8, d0
    6498:	009f5001 	addseq	r5, pc, r1
    649c:	00000000 	andeq	r0, r0, r0
    64a0:	14000000 	strne	r0, [r0], #-0
    64a4:	1e08003c 	mcrne	0, 0, r0, cr8, cr12, {1}
    64a8:	0108003c 	tsteq	r8, ip, lsr r0
    64ac:	3c1e5000 	ldccc	0, cr5, [lr], {-0}
    64b0:	3c220800 	stccc	8, cr0, [r2], #-0
    64b4:	00040800 	andeq	r0, r4, r0, lsl #16
    64b8:	9f5001f3 	svcls	0x005001f3
    64bc:	08003c22 	stmdaeq	r0, {r1, r5, sl, fp, ip, sp}
    64c0:	08003c24 	stmdaeq	r0, {r2, r5, sl, fp, ip, sp}
    64c4:	24500001 	ldrbcs	r0, [r0], #-1
    64c8:	2c08003c 	stccs	0, cr0, [r8], {60}	; 0x3c
    64cc:	0408003c 	streq	r0, [r8], #-60	; 0x3c
    64d0:	5001f300 	andpl	pc, r1, r0, lsl #6
    64d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    64d8:	00000000 	andeq	r0, r0, r0
    64dc:	003c2c00 	eorseq	r2, ip, r0, lsl #24
    64e0:	003c3608 	eorseq	r3, ip, r8, lsl #12
    64e4:	50000108 	andpl	r0, r0, r8, lsl #2
    64e8:	08003c36 	stmdaeq	r0, {r1, r2, r4, r5, sl, fp, ip, sp}
    64ec:	08003c3a 	stmdaeq	r0, {r1, r3, r4, r5, sl, fp, ip, sp}
    64f0:	01f30004 	mvnseq	r0, r4
    64f4:	3c3a9f50 	ldccc	15, cr9, [sl], #-320	; 0xfffffec0
    64f8:	3c3c0800 	ldccc	8, cr0, [ip], #-0
    64fc:	00010800 	andeq	r0, r1, r0, lsl #16
    6500:	003c3c50 	eorseq	r3, ip, r0, asr ip
    6504:	003c4408 	eorseq	r4, ip, r8, lsl #8
    6508:	f3000408 	vshl.u8	d0, d8, d0
    650c:	009f5001 	addseq	r5, pc, r1
    6510:	00000000 	andeq	r0, r0, r0
    6514:	44000000 	strmi	r0, [r0], #-0
    6518:	4e08003c 	mcrmi	0, 0, r0, cr8, cr12, {1}
    651c:	0108003c 	tsteq	r8, ip, lsr r0
    6520:	3c4e5000 	marcc	acc0, r5, lr
    6524:	3c520800 	mrrccc	8, 0, r0, r2, cr0
    6528:	00040800 	andeq	r0, r4, r0, lsl #16
    652c:	9f5001f3 	svcls	0x005001f3
    6530:	08003c52 	stmdaeq	r0, {r1, r4, r6, sl, fp, ip, sp}
    6534:	08003c54 	stmdaeq	r0, {r2, r4, r6, sl, fp, ip, sp}
    6538:	54500001 	ldrbpl	r0, [r0], #-1
    653c:	5c08003c 	stcpl	0, cr0, [r8], {60}	; 0x3c
    6540:	0408003c 	streq	r0, [r8], #-60	; 0x3c
    6544:	5001f300 	andpl	pc, r1, r0, lsl #6
    6548:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    654c:	00000000 	andeq	r0, r0, r0
    6550:	003c5c00 	eorseq	r5, ip, r0, lsl #24
    6554:	003c7008 	eorseq	r7, ip, r8
    6558:	50000108 	andpl	r0, r0, r8, lsl #2
    655c:	08003c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, ip, sp}
    6560:	08003c7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, fp, ip, sp}
    6564:	01f30004 	mvnseq	r0, r4
    6568:	3c7a9f50 	ldclcc	15, cr9, [sl], #-320	; 0xfffffec0
    656c:	3c820800 	stccc	8, cr0, [r2], {0}
    6570:	00010800 	andeq	r0, r1, r0, lsl #16
    6574:	003c8250 	eorseq	r8, ip, r0, asr r2
    6578:	003c9008 	eorseq	r9, ip, r8
    657c:	f3000408 	vshl.u8	d0, d8, d0
    6580:	009f5001 	addseq	r5, pc, r1
    6584:	00000000 	andeq	r0, r0, r0
    6588:	5c000000 	stcpl	0, cr0, [r0], {-0}
    658c:	5e08003c 	mcrpl	0, 0, r0, cr8, cr12, {1}
    6590:	0208003c 	andeq	r0, r8, #60	; 0x3c
    6594:	5e9f3000 	cdppl	0, 9, cr3, cr15, cr0, {0}
    6598:	6608003c 			; <UNDEFINED> instruction: 0x6608003c
    659c:	0108003c 	tsteq	r8, ip, lsr r0
    65a0:	3c665300 	stclcc	3, cr5, [r6], #-0
    65a4:	3c6c0800 	stclcc	8, cr0, [ip], #-0
    65a8:	00050800 	andeq	r0, r5, r0, lsl #16
    65ac:	25350070 	ldrcs	r0, [r5, #-112]!	; 0x70
    65b0:	003c6c9f 	mlaseq	ip, pc, ip, r6	; <UNPREDICTABLE>
    65b4:	003c7008 	eorseq	r7, ip, r8
    65b8:	70000808 	andvc	r0, r0, r8, lsl #16
    65bc:	081a4f00 	ldmdaeq	sl, {r8, r9, sl, fp, lr}
    65c0:	7a9f1aff 	bvc	fe7cd1c4 <_estack+0xde79d1c4>
    65c4:	7c08003c 	stcvc	0, cr0, [r8], {60}	; 0x3c
    65c8:	0108003c 	tsteq	r8, ip, lsr r0
    65cc:	3c7c5300 	ldclcc	3, cr5, [ip], #-0
    65d0:	3c7e0800 	ldclcc	8, cr0, [lr], #-0
    65d4:	00050800 	andeq	r0, r5, r0, lsl #16
    65d8:	25350070 	ldrcs	r0, [r5, #-112]!	; 0x70
    65dc:	003c7e9f 	mlaseq	ip, pc, lr, r7	; <UNPREDICTABLE>
    65e0:	003c8208 	eorseq	r8, ip, r8, lsl #4
    65e4:	70000808 	andvc	r0, r0, r8, lsl #16
    65e8:	081a4f00 	ldmdaeq	sl, {r8, r9, sl, fp, lr}
    65ec:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    65f0:	00000000 	andeq	r0, r0, r0
    65f4:	5c000000 	stcpl	0, cr0, [r0], {-0}
    65f8:	6a08003c 	bvs	2066f0 <_Min_Stack_Size+0x2062f0>
    65fc:	0208003c 	andeq	r0, r8, #60	; 0x3c
    6600:	6a9f3000 	bvs	fe7d2608 <_estack+0xde7a2608>
    6604:	7a08003c 	bvc	2066fc <_Min_Stack_Size+0x2062fc>
    6608:	0108003c 	tsteq	r8, ip, lsr r0
    660c:	3c7a5300 	ldclcc	3, cr5, [sl], #-0
    6610:	3c7e0800 	ldclcc	8, cr0, [lr], #-0
    6614:	00020800 	andeq	r0, r2, r0, lsl #16
    6618:	3c7e9f30 	ldclcc	15, cr9, [lr], #-192	; 0xffffff40
    661c:	3c900800 	ldccc	8, cr0, [r0], {0}
    6620:	00010800 	andeq	r0, r1, r0, lsl #16
    6624:	00000053 	andeq	r0, r0, r3, asr r0
    6628:	00000000 	andeq	r0, r0, r0
    662c:	003c5c00 	eorseq	r5, ip, r0, lsl #24
    6630:	003c6c08 	eorseq	r6, ip, r8, lsl #24
    6634:	30000208 	andcc	r0, r0, r8, lsl #4
    6638:	003c6c9f 	mlaseq	ip, pc, ip, r6	; <UNPREDICTABLE>
    663c:	003c7008 	eorseq	r7, ip, r8
    6640:	73000d08 	movwvc	r0, #3336	; 0xd08
    6644:	4f007000 	svcmi	0x00007000
    6648:	1aff081a 	bne	fffc86b8 <_estack+0xdff986b8>
    664c:	9f1a3125 	svcls	0x001a3125
    6650:	08003c7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, fp, ip, sp}
    6654:	08003c7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, fp, ip, sp}
    6658:	9f300002 	svcls	0x00300002
    665c:	08003c7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, fp, ip, sp}
    6660:	08003c82 	stmdaeq	r0, {r1, r7, sl, fp, ip, sp}
    6664:	0073000d 	rsbseq	r0, r3, sp
    6668:	1a4f0070 	bne	13c6830 <_Min_Stack_Size+0x13c6430>
    666c:	251aff08 	ldrcs	pc, [sl, #-3848]	; 0xf08
    6670:	009f1a31 	addseq	r1, pc, r1, lsr sl	; <UNPREDICTABLE>
    6674:	00000000 	andeq	r0, r0, r0
    6678:	a0000000 	andge	r0, r0, r0
    667c:	ac08003c 	stcge	0, cr0, [r8], {60}	; 0x3c
    6680:	0108003c 	tsteq	r8, ip, lsr r0
    6684:	3cac5000 	stccc	0, cr5, [ip]
    6688:	3cb40800 	ldccc	8, cr0, [r4]
    668c:	00040800 	andeq	r0, r4, r0, lsl #16
    6690:	9f5001f3 	svcls	0x005001f3
	...
    669c:	08003ca0 	stmdaeq	r0, {r5, r7, sl, fp, ip, sp}
    66a0:	08003ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, ip, sp}
    66a4:	9f300002 	svcls	0x00300002
    66a8:	08003ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, ip, sp}
    66ac:	08003cac 	stmdaeq	r0, {r2, r3, r5, r7, sl, fp, ip, sp}
    66b0:	0070000b 	rsbseq	r0, r0, fp
    66b4:	731aff08 	tstvc	sl, #8, 30
    66b8:	2e301a00 	vaddcs.f32	s2, s0, s0
    66bc:	003cac9f 	mlaseq	ip, pc, ip, sl	; <UNPREDICTABLE>
    66c0:	003cb408 	eorseq	fp, ip, r8, lsl #8
    66c4:	f3000c08 			; <UNDEFINED> instruction: 0xf3000c08
    66c8:	ff085001 			; <UNDEFINED> instruction: 0xff085001
    66cc:	1a00731a 	bne	2333c <_Min_Stack_Size+0x22f3c>
    66d0:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    66d4:	00000000 	andeq	r0, r0, r0
    66d8:	c0000000 	andgt	r0, r0, r0
    66dc:	f808003c 			; <UNDEFINED> instruction: 0xf808003c
    66e0:	0108003c 	tsteq	r8, ip, lsr r0
    66e4:	3cf85000 	ldclcc	0, cr5, [r8]
    66e8:	3d0c0800 	stccc	8, cr0, [ip, #-0]
    66ec:	00040800 	andeq	r0, r4, r0, lsl #16
    66f0:	9f5001f3 	svcls	0x005001f3
    66f4:	08003d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, ip, sp}
    66f8:	08003d0e 	stmdaeq	r0, {r1, r2, r3, r8, sl, fp, ip, sp}
    66fc:	0e500001 	cdpeq	0, 5, cr0, cr0, cr1, {0}
    6700:	2008003d 	andcs	r0, r8, sp, lsr r0
    6704:	0408003d 	streq	r0, [r8], #-61	; 0x3d
    6708:	5001f300 	andpl	pc, r1, r0, lsl #6
    670c:	003d209f 	mlaseq	sp, pc, r0, r2	; <UNPREDICTABLE>
    6710:	003d2408 	eorseq	r2, sp, r8, lsl #8
    6714:	50000108 	andpl	r0, r0, r8, lsl #2
    6718:	08003d24 	stmdaeq	r0, {r2, r5, r8, sl, fp, ip, sp}
    671c:	08003d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, ip, sp}
    6720:	01f30004 	mvnseq	r0, r4
    6724:	3d389f50 	ldccc	15, cr9, [r8, #-320]!	; 0xfffffec0
    6728:	3d3c0800 	ldccc	8, cr0, [ip, #-0]
    672c:	00010800 	andeq	r0, r1, r0, lsl #16
    6730:	003d3c50 	eorseq	r3, sp, r0, asr ip
    6734:	003d5008 	eorseq	r5, sp, r8
    6738:	f3000408 	vshl.u8	d0, d8, d0
    673c:	509f5001 	addspl	r5, pc, r1
    6740:	5408003d 	strpl	r0, [r8], #-61	; 0x3d
    6744:	0108003d 	tsteq	r8, sp, lsr r0
    6748:	3d545000 	ldclcc	0, cr5, [r4, #-0]
    674c:	3d680800 	stclcc	8, cr0, [r8, #-0]
    6750:	00040800 	andeq	r0, r4, r0, lsl #16
    6754:	9f5001f3 	svcls	0x005001f3
    6758:	08003d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip, sp}
    675c:	08003d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp, ip, sp}
    6760:	6c500001 	mrrcvs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    6764:	8008003d 	andhi	r0, r8, sp, lsr r0
    6768:	0408003d 	streq	r0, [r8], #-61	; 0x3d
    676c:	5001f300 	andpl	pc, r1, r0, lsl #6
    6770:	003d809f 	mlaseq	sp, pc, r0, r8	; <UNPREDICTABLE>
    6774:	003d8208 	eorseq	r8, sp, r8, lsl #4
    6778:	50000108 	andpl	r0, r0, r8, lsl #2
    677c:	08003d82 	stmdaeq	r0, {r1, r7, r8, sl, fp, ip, sp}
    6780:	08003d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp, ip, sp}
    6784:	01f30004 	mvnseq	r0, r4
    6788:	3d949f50 	ldccc	15, cr9, [r4, #320]	; 0x140
    678c:	3d980800 	ldccc	8, cr0, [r8]
    6790:	00010800 	andeq	r0, r1, r0, lsl #16
    6794:	003d9850 	eorseq	r9, sp, r0, asr r8
    6798:	003dcc08 	eorseq	ip, sp, r8, lsl #24
    679c:	f3000408 	vshl.u8	d0, d8, d0
    67a0:	009f5001 	addseq	r5, pc, r1
    67a4:	00000000 	andeq	r0, r0, r0
    67a8:	cc000000 	stcgt	0, cr0, [r0], {-0}
    67ac:	e608003d 			; <UNDEFINED> instruction: 0xe608003d
    67b0:	0108003d 	tsteq	r8, sp, lsr r0
    67b4:	3de65000 	stclcc	0, cr5, [r6]
    67b8:	3e860800 	cdpcc	8, 8, cr0, cr6, cr0, {0}
    67bc:	00010800 	andeq	r0, r1, r0, lsl #16
    67c0:	003e8654 	eorseq	r8, lr, r4, asr r6
    67c4:	003e9008 	eorseq	r9, lr, r8
    67c8:	f3000408 	vshl.u8	d0, d8, d0
    67cc:	009f5001 	addseq	r5, pc, r1
    67d0:	00000000 	andeq	r0, r0, r0
    67d4:	cc000000 	stcgt	0, cr0, [r0], {-0}
    67d8:	d208003d 	andle	r0, r8, #61	; 0x3d
    67dc:	0108003d 	tsteq	r8, sp, lsr r0
    67e0:	3dd25100 	ldfcce	f5, [r2]
    67e4:	3e460800 	cdpcc	8, 4, cr0, cr6, cr0, {0}
    67e8:	00010800 	andeq	r0, r1, r0, lsl #16
    67ec:	003e4655 	eorseq	r4, lr, r5, asr r6
    67f0:	003e6c08 	eorseq	r6, lr, r8, lsl #24
    67f4:	f3000408 	vshl.u8	d0, d8, d0
    67f8:	6c9f5101 	ldfvss	f5, [pc], {1}
    67fc:	7008003e 	andvc	r0, r8, lr, lsr r0
    6800:	0108003e 	tsteq	r8, lr, lsr r0
    6804:	3e705500 	cdpcc	5, 7, cr5, cr0, cr0, {0}
    6808:	3e900800 	cdpcc	8, 9, cr0, cr0, cr0, {0}
    680c:	00040800 	andeq	r0, r4, r0, lsl #16
    6810:	9f5101f3 	svcls	0x005101f3
	...
    681c:	08003dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, ip, sp}
    6820:	08003ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, ip, sp}
    6824:	9f300002 	svcls	0x00300002
    6828:	08003ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, ip, sp}
    682c:	08003de2 	stmdaeq	r0, {r1, r5, r6, r7, r8, sl, fp, ip, sp}
    6830:	e2510001 	subs	r0, r1, #1
    6834:	e408003d 	str	r0, [r8], #-61	; 0x3d
    6838:	0c08003d 	stceq	0, cr0, [r8], {61}	; 0x3d
    683c:	94067500 	strls	r7, [r6], #-1280	; 0x500
    6840:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    6844:	2100711a 	tstcs	r0, sl, lsl r1
    6848:	003de49f 	mlaseq	sp, pc, r4, lr	; <UNPREDICTABLE>
    684c:	003dea08 	eorseq	lr, sp, r8, lsl #20
    6850:	51000108 	tstpl	r0, r8, lsl #2
    6854:	08003dee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, sl, fp, ip, sp}
    6858:	08003df4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, fp, ip, sp}
    685c:	f8510001 			; <UNDEFINED> instruction: 0xf8510001
    6860:	fe08003d 	mcr2	0, 0, r0, cr8, cr13, {1}
    6864:	1608003d 			; <UNDEFINED> instruction: 0x1608003d
    6868:	94087500 	strls	r7, [r8], #-1280	; 0x500
    686c:	94047502 	strls	r7, [r4], #-1282	; 0x502
    6870:	0a752102 	beq	1d4ec80 <_Min_Stack_Size+0x1d4e880>
    6874:	0a210294 	beq	8472cc <_Min_Stack_Size+0x846ecc>
    6878:	711affff 			; <UNDEFINED> instruction: 0x711affff
    687c:	029f2100 	addseq	r2, pc, #0, 2
    6880:	0608003e 			; <UNDEFINED> instruction: 0x0608003e
    6884:	0108003e 	tsteq	r8, lr, lsr r0
    6888:	3e065300 	cdpcc	3, 0, cr5, cr6, cr0, {0}
    688c:	3e080800 	cdpcc	8, 0, cr0, cr8, cr0, {0}
    6890:	000c0800 	andeq	r0, ip, r0, lsl #16
    6894:	02940c75 	addseq	r0, r4, #29952	; 0x7500
    6898:	1affff0a 	bne	64c8 <_Min_Stack_Size+0x60c8>
    689c:	9f210073 	svcls	0x00210073
    68a0:	08003e48 	stmdaeq	r0, {r3, r6, r9, sl, fp, ip, sp}
    68a4:	08003e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, ip, sp}
    68a8:	00730005 	rsbseq	r0, r3, r5
    68ac:	549f2434 	ldrpl	r2, [pc], #1076	; 68b4 <_Min_Stack_Size+0x64b4>
    68b0:	6608003e 			; <UNDEFINED> instruction: 0x6608003e
    68b4:	0108003e 	tsteq	r8, lr, lsr r0
    68b8:	3e705300 	cdpcc	3, 7, cr5, cr0, cr0, {0}
    68bc:	3e800800 	cdpcc	8, 8, cr0, cr0, cr0, {0}
    68c0:	00010800 	andeq	r0, r1, r0, lsl #16
    68c4:	00000053 	andeq	r0, r0, r3, asr r0
    68c8:	00000000 	andeq	r0, r0, r0
    68cc:	003dcc00 	eorseq	ip, sp, r0, lsl #24
    68d0:	003e2208 	eorseq	r2, lr, r8, lsl #4
    68d4:	30000208 	andcc	r0, r0, r8, lsl #4
    68d8:	003e229f 	mlaseq	lr, pc, r2, r2	; <UNPREDICTABLE>
    68dc:	003e3008 	eorseq	r3, lr, r8
    68e0:	53000108 	movwpl	r0, #264	; 0x108
    68e4:	08003e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip, sp}
    68e8:	08003e6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl, fp, ip, sp}
    68ec:	9f300002 	svcls	0x00300002
    68f0:	08003e6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl, fp, ip, sp}
    68f4:	08003e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, ip, sp}
    68f8:	00530001 	subseq	r0, r3, r1
    68fc:	00000000 	andeq	r0, r0, r0
    6900:	cc000000 	stcgt	0, cr0, [r0], {-0}
    6904:	3e08003d 	mcrcc	0, 0, r0, cr8, cr13, {1}
    6908:	0208003e 	andeq	r0, r8, #62	; 0x3e
    690c:	3e9f3000 	cdpcc	0, 9, cr3, cr15, cr0, {0}
    6910:	5008003e 	andpl	r0, r8, lr, lsr r0
    6914:	0108003e 	tsteq	r8, lr, lsr r0
    6918:	3e6c5200 	cdpcc	2, 6, cr5, cr12, cr0, {0}
    691c:	3e700800 	cdpcc	8, 7, cr0, cr0, cr0, {0}
    6920:	00020800 	andeq	r0, r2, r0, lsl #16
    6924:	00009f30 	andeq	r9, r0, r0, lsr pc
    6928:	00000000 	andeq	r0, r0, r0
    692c:	3dcc0000 	stclcc	0, cr0, [ip]
    6930:	3e500800 	cdpcc	8, 5, cr0, cr0, cr0, {0}
    6934:	00020800 	andeq	r0, r2, r0, lsl #16
    6938:	3e509f30 	mrccc	15, 2, r9, cr0, cr0, {1}
    693c:	3e580800 	cdpcc	8, 5, cr0, cr8, cr0, {0}
    6940:	00010800 	andeq	r0, r1, r0, lsl #16
    6944:	003e6c52 	eorseq	r6, lr, r2, asr ip
    6948:	003e7008 	eorseq	r7, lr, r8
    694c:	30000208 	andcc	r0, r0, r8, lsl #4
    6950:	003e709f 	mlaseq	lr, pc, r0, r7	; <UNPREDICTABLE>
    6954:	003e7208 	eorseq	r7, lr, r8, lsl #4
    6958:	52000108 	andpl	r0, r0, #8, 2
	...
    6964:	08003ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, ip, sp}
    6968:	08003eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, ip, sp}
    696c:	b4510001 	ldrblt	r0, [r1], #-1
    6970:	ca08003e 	bgt	206a70 <_Min_Stack_Size+0x206670>
    6974:	0408003e 	streq	r0, [r8], #-62	; 0x3e
    6978:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    697c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6980:	00000000 	andeq	r0, r0, r0
    6984:	003ea800 	eorseq	sl, lr, r0, lsl #16
    6988:	003ebc08 	eorseq	fp, lr, r8, lsl #24
    698c:	30000208 	andcc	r0, r0, r8, lsl #4
    6990:	003ebc9f 	mlaseq	lr, pc, ip, fp	; <UNPREDICTABLE>
    6994:	003ec208 	eorseq	ip, lr, r8, lsl #4
    6998:	53000108 	movwpl	r0, #264	; 0x108
    699c:	08003ec2 	stmdaeq	r0, {r1, r6, r7, r9, sl, fp, ip, sp}
    69a0:	08003ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, ip, sp}
    69a4:	01f30025 	mvnseq	r0, r5, lsr #32
    69a8:	94022351 	strls	r2, [r2], #-849	; 0x351
    69ac:	5101f302 	tstpl	r1, r2, lsl #6
    69b0:	f3210294 	vqsub.u32	d0, d17, d4
    69b4:	04235101 	strteq	r5, [r3], #-257	; 0x101
    69b8:	f3210294 	vqsub.u32	d0, d17, d4
    69bc:	06235101 	strteq	r5, [r3], -r1, lsl #2
    69c0:	0a210294 	beq	847418 <_Min_Stack_Size+0x847018>
    69c4:	731affff 	tstvc	sl, #1020	; 0x3fc
    69c8:	009f2100 	addseq	r2, pc, r0, lsl #2
    69cc:	00000000 	andeq	r0, r0, r0
    69d0:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    69d4:	0208003e 	andeq	r0, r8, #62	; 0x3e
    69d8:	0108003f 	tsteq	r8, pc, lsr r0
    69dc:	3f025100 	svccc	0x00025100
    69e0:	3f060800 	svccc	0x00060800
    69e4:	00040800 	andeq	r0, r4, r0, lsl #16
    69e8:	9f5101f3 	svcls	0x005101f3
	...
    69f4:	08003f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, ip, sp}
    69f8:	08003f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, ip, sp}
    69fc:	44510001 	ldrbmi	r0, [r1], #-1
    6a00:	4808003f 	stmdami	r8, {r0, r1, r2, r3, r4, r5}
    6a04:	0408003f 	streq	r0, [r8], #-63	; 0x3f
    6a08:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    6a0c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6a10:	00000000 	andeq	r0, r0, r0
    6a14:	003f4800 	eorseq	r4, pc, r0, lsl #16
    6a18:	003f4a08 	eorseq	r4, pc, r8, lsl #20
    6a1c:	50000108 	andpl	r0, r0, r8, lsl #2
    6a20:	08003f4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, fp, ip, sp}
    6a24:	08003f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, ip, sp}
    6a28:	01f30004 	mvnseq	r0, r4
    6a2c:	00009f50 	andeq	r9, r0, r0, asr pc
    6a30:	00000000 	andeq	r0, r0, r0
    6a34:	3f500000 	svccc	0x00500000
    6a38:	3f620800 	svccc	0x00620800
    6a3c:	00010800 	andeq	r0, r1, r0, lsl #16
    6a40:	003f6251 	eorseq	r6, pc, r1, asr r2	; <UNPREDICTABLE>
    6a44:	003f6608 	eorseq	r6, pc, r8, lsl #12
    6a48:	f3000408 	vshl.u8	d0, d8, d0
    6a4c:	009f5101 	addseq	r5, pc, r1, lsl #2
    6a50:	00000000 	andeq	r0, r0, r0
    6a54:	84000000 	strhi	r0, [r0], #-0
    6a58:	9608003f 			; <UNDEFINED> instruction: 0x9608003f
    6a5c:	0108003f 	tsteq	r8, pc, lsr r0
    6a60:	3f965100 	svccc	0x00965100
    6a64:	3f9a0800 	svccc	0x009a0800
    6a68:	00040800 	andeq	r0, r4, r0, lsl #16
    6a6c:	9f5101f3 	svcls	0x005101f3
	...
    6a78:	08003f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip, sp}
    6a7c:	08003fae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl, fp, ip, sp}
    6a80:	ae510001 	cdpge	0, 5, cr0, cr1, cr1, {0}
    6a84:	b208003f 	andlt	r0, r8, #63	; 0x3f
    6a88:	0408003f 	streq	r0, [r8], #-63	; 0x3f
    6a8c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    6a90:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6a94:	00000000 	andeq	r0, r0, r0
    6a98:	003ff800 	eorseq	pc, pc, r0, lsl #16
    6a9c:	00400608 	subeq	r0, r0, r8, lsl #12
    6aa0:	51000108 	tstpl	r0, r8, lsl #2
    6aa4:	08004006 	stmdaeq	r0, {r1, r2, lr}
    6aa8:	0800400a 	stmdaeq	r0, {r1, r3, lr}
    6aac:	01f30004 	mvnseq	r0, r4
    6ab0:	00009f51 	andeq	r9, r0, r1, asr pc
    6ab4:	00000000 	andeq	r0, r0, r0
    6ab8:	40440000 	submi	r0, r4, r0
    6abc:	40560800 	subsmi	r0, r6, r0, lsl #16
    6ac0:	00010800 	andeq	r0, r1, r0, lsl #16
    6ac4:	00405651 	subeq	r5, r0, r1, asr r6
    6ac8:	00405a08 	subeq	r5, r0, r8, lsl #20
    6acc:	f3000408 	vshl.u8	d0, d8, d0
    6ad0:	009f5101 	addseq	r5, pc, r1, lsl #2
    6ad4:	00000000 	andeq	r0, r0, r0
    6ad8:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    6adc:	82080040 	andhi	r0, r8, #64	; 0x40
    6ae0:	01080040 	tsteq	r8, r0, asr #32
    6ae4:	40825100 	addmi	r5, r2, r0, lsl #2
    6ae8:	40860800 	addmi	r0, r6, r0, lsl #16
    6aec:	00040800 	andeq	r0, r4, r0, lsl #16
    6af0:	9f5101f3 	svcls	0x005101f3
    6af4:	08004086 	stmdaeq	r0, {r1, r2, r7, lr}
    6af8:	08004088 	stmdaeq	r0, {r3, r7, lr}
    6afc:	88510001 	ldmdahi	r1, {r0}^
    6b00:	8c080040 	stchi	0, cr0, [r8], {64}	; 0x40
    6b04:	04080040 	streq	r0, [r8], #-64	; 0x40
    6b08:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    6b0c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6b10:	00000000 	andeq	r0, r0, r0
    6b14:	00408c00 	subeq	r8, r0, r0, lsl #24
    6b18:	0040a608 	subeq	sl, r0, r8, lsl #12
    6b1c:	50000108 	andpl	r0, r0, r8, lsl #2
    6b20:	080040a6 	stmdaeq	r0, {r1, r2, r5, r7, lr}
    6b24:	080040c2 	stmdaeq	r0, {r1, r6, r7, lr}
    6b28:	01f30004 	mvnseq	r0, r4
    6b2c:	40c29f50 	sbcmi	r9, r2, r0, asr pc
    6b30:	40c40800 	sbcmi	r0, r4, r0, lsl #16
    6b34:	00010800 	andeq	r0, r1, r0, lsl #16
    6b38:	0040c450 	subeq	ip, r0, r0, asr r4
    6b3c:	0040c608 	subeq	ip, r0, r8, lsl #12
    6b40:	70000308 	andvc	r0, r0, r8, lsl #6
    6b44:	00009f74 	andeq	r9, r0, r4, ror pc
    6b48:	00000000 	andeq	r0, r0, r0
    6b4c:	408c0000 	addmi	r0, ip, r0
    6b50:	40960800 	addsmi	r0, r6, r0, lsl #16
    6b54:	00010800 	andeq	r0, r1, r0, lsl #16
    6b58:	00409651 	subeq	r9, r0, r1, asr r6
    6b5c:	0040c608 	subeq	ip, r0, r8, lsl #12
    6b60:	f3000408 	vshl.u8	d0, d8, d0
    6b64:	009f5101 	addseq	r5, pc, r1, lsl #2
    6b68:	00000000 	andeq	r0, r0, r0
    6b6c:	8c000000 	stchi	0, cr0, [r0], {-0}
    6b70:	98080040 	stmdals	r8, {r6}
    6b74:	02080040 	andeq	r0, r8, #64	; 0x40
    6b78:	989f3000 	ldmls	pc, {ip, sp}	; <UNPREDICTABLE>
    6b7c:	c6080040 	strgt	r0, [r8], -r0, asr #32
    6b80:	01080040 	tsteq	r8, r0, asr #32
    6b84:	00005100 	andeq	r5, r0, r0, lsl #2
    6b88:	00000000 	andeq	r0, r0, r0
    6b8c:	408c0000 	addmi	r0, ip, r0
    6b90:	40980800 	addsmi	r0, r8, r0, lsl #16
    6b94:	00020800 	andeq	r0, r2, r0, lsl #16
    6b98:	00009f30 	andeq	r9, r0, r0, lsr pc
    6b9c:	00000000 	andeq	r0, r0, r0
    6ba0:	408c0000 	addmi	r0, ip, r0
    6ba4:	409e0800 	addsmi	r0, lr, r0, lsl #16
    6ba8:	00020800 	andeq	r0, r2, r0, lsl #16
    6bac:	409e9f30 	addsmi	r9, lr, r0, lsr pc
    6bb0:	40b00800 	adcsmi	r0, r0, r0, lsl #16
    6bb4:	00010800 	andeq	r0, r1, r0, lsl #16
    6bb8:	0040b853 	subeq	fp, r0, r3, asr r8
    6bbc:	0040ba08 	subeq	fp, r0, r8, lsl #20
    6bc0:	53000108 	movwpl	r0, #264	; 0x108
    6bc4:	080040c2 	stmdaeq	r0, {r1, r6, r7, lr}
    6bc8:	080040c6 	stmdaeq	r0, {r1, r2, r6, r7, lr}
    6bcc:	00530001 	subseq	r0, r3, r1
    6bd0:	00000000 	andeq	r0, r0, r0
    6bd4:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    6bd8:	d2080040 	andle	r0, r8, #64	; 0x40
    6bdc:	01080040 	tsteq	r8, r0, asr #32
    6be0:	40d25000 	sbcsmi	r5, r2, r0
    6be4:	40d40800 	sbcsmi	r0, r4, r0, lsl #16
    6be8:	00040800 	andeq	r0, r4, r0, lsl #16
    6bec:	9f5001f3 	svcls	0x005001f3
	...
    6bf8:	080040c8 	stmdaeq	r0, {r3, r6, r7, lr}
    6bfc:	080040ca 	stmdaeq	r0, {r1, r3, r6, r7, lr}
    6c00:	9f300002 	svcls	0x00300002
    6c04:	080040ca 	stmdaeq	r0, {r1, r3, r6, r7, lr}
    6c08:	080040d4 	stmdaeq	r0, {r2, r4, r6, r7, lr}
    6c0c:	0071000a 	rsbseq	r0, r1, sl
    6c10:	401a0073 	andsmi	r0, sl, r3, ror r0
    6c14:	9f2e3024 	svcls	0x002e3024
	...
    6c20:	080040d4 	stmdaeq	r0, {r2, r4, r6, r7, lr}
    6c24:	080040d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, lr}
    6c28:	d6510001 	ldrble	r0, [r1], -r1
    6c2c:	dc080040 	stcle	0, cr0, [r8], {64}	; 0x40
    6c30:	04080040 	streq	r0, [r8], #-64	; 0x40
    6c34:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    6c38:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6c3c:	00000000 	andeq	r0, r0, r0
    6c40:	0040dc00 	subeq	sp, r0, r0, lsl #24
    6c44:	00411208 	subeq	r1, r1, r8, lsl #4
    6c48:	50000108 	andpl	r0, r0, r8, lsl #2
    6c4c:	08004112 	stmdaeq	r0, {r1, r4, r8, lr}
    6c50:	08004118 	stmdaeq	r0, {r3, r4, r8, lr}
    6c54:	01f30004 	mvnseq	r0, r4
    6c58:	41189f50 	tstmi	r8, r0, asr pc
    6c5c:	411a0800 	tstmi	sl, r0, lsl #16
    6c60:	00010800 	andeq	r0, r1, r0, lsl #16
    6c64:	00411a50 	subeq	r1, r1, r0, asr sl
    6c68:	00412008 	subeq	r2, r1, r8
    6c6c:	f3000408 	vshl.u8	d0, d8, d0
    6c70:	209f5001 	addscs	r5, pc, r1
    6c74:	28080041 	stmdacs	r8, {r0, r6}
    6c78:	01080041 	tsteq	r8, r1, asr #32
    6c7c:	00005000 	andeq	r5, r0, r0
    6c80:	00000000 	andeq	r0, r0, r0
    6c84:	40dc0000 	sbcsmi	r0, ip, r0
    6c88:	41040800 	tstmi	r4, r0, lsl #16
    6c8c:	00010800 	andeq	r0, r1, r0, lsl #16
    6c90:	00410451 	subeq	r0, r1, r1, asr r4
    6c94:	00411808 	subeq	r1, r1, r8, lsl #16
    6c98:	f3000408 	vshl.u8	d0, d8, d0
    6c9c:	189f5101 	ldmne	pc, {r0, r8, ip, lr}	; <UNPREDICTABLE>
    6ca0:	28080041 	stmdacs	r8, {r0, r6}
    6ca4:	01080041 	tsteq	r8, r1, asr #32
    6ca8:	00005100 	andeq	r5, r0, r0, lsl #2
    6cac:	00000000 	andeq	r0, r0, r0
    6cb0:	40dc0000 	sbcsmi	r0, ip, r0
    6cb4:	40fc0800 	rscsmi	r0, ip, r0, lsl #16
    6cb8:	00020800 	andeq	r0, r2, r0, lsl #16
    6cbc:	40fc9f30 	rscsmi	r9, ip, r0, lsr pc
    6cc0:	41000800 	tstmi	r0, r0, lsl #16
    6cc4:	000b0800 	andeq	r0, fp, r0, lsl #16
    6cc8:	38007131 	stmdacc	r0, {r0, r4, r5, r8, ip, sp, lr}
    6ccc:	ffff0a25 			; <UNDEFINED> instruction: 0xffff0a25
    6cd0:	009f241a 	addseq	r2, pc, sl, lsl r4	; <UNPREDICTABLE>
    6cd4:	04080041 	streq	r0, [r8], #-65	; 0x41
    6cd8:	12080041 	andne	r0, r8, #65	; 0x41
    6cdc:	00713100 	rsbseq	r3, r1, r0, lsl #2
    6ce0:	ff0a2538 			; <UNDEFINED> instruction: 0xff0a2538
    6ce4:	72241aff 	eorvc	r1, r4, #1044480	; 0xff000
    6ce8:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    6cec:	189f1a1a 	ldmne	pc, {r1, r3, r4, r9, fp, ip}	; <UNPREDICTABLE>
    6cf0:	20080041 	andcs	r0, r8, r1, asr #32
    6cf4:	12080041 	andne	r0, r8, #65	; 0x41
    6cf8:	00713100 	rsbseq	r3, r1, r0, lsl #2
    6cfc:	ff0a2538 			; <UNDEFINED> instruction: 0xff0a2538
    6d00:	72241aff 	eorvc	r1, r4, #1044480	; 0xff000
    6d04:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    6d08:	209f1a1a 	addscs	r1, pc, sl, lsl sl	; <UNPREDICTABLE>
    6d0c:	28080041 	stmdacs	r8, {r0, r6}
    6d10:	02080041 	andeq	r0, r8, #65	; 0x41
    6d14:	009f3000 	addseq	r3, pc, r0
    6d18:	00000000 	andeq	r0, r0, r0
    6d1c:	dc000000 	stcle	0, cr0, [r0], {-0}
    6d20:	e2080040 	and	r0, r8, #64	; 0x40
    6d24:	02080040 	andeq	r0, r8, #64	; 0x40
    6d28:	e29f3000 	adds	r3, pc, #0
    6d2c:	ee080040 	cdp	0, 0, cr0, cr8, cr0, {2}
    6d30:	09080040 	stmdbeq	r8, {r6}
    6d34:	4f007100 	svcmi	0x00007100
    6d38:	ffff0a1a 			; <UNDEFINED> instruction: 0xffff0a1a
    6d3c:	40ee9f1a 	rscmi	r9, lr, sl, lsl pc
    6d40:	40fc0800 	rscsmi	r0, ip, r0, lsl #16
    6d44:	00010800 	andeq	r0, r1, r0, lsl #16
    6d48:	0040fc52 	subeq	pc, r0, r2, asr ip	; <UNPREDICTABLE>
    6d4c:	00410608 	subeq	r0, r1, r8, lsl #12
    6d50:	53000108 	movwpl	r0, #264	; 0x108
    6d54:	08004118 	stmdaeq	r0, {r3, r4, r8, lr}
    6d58:	08004120 	stmdaeq	r0, {r5, r8, lr}
    6d5c:	20530001 	subscs	r0, r3, r1
    6d60:	26080041 	strcs	r0, [r8], -r1, asr #32
    6d64:	01080041 	tsteq	r8, r1, asr #32
    6d68:	41265200 	teqmi	r6, r0, lsl #4
    6d6c:	41280800 	teqmi	r8, r0, lsl #16
    6d70:	00010800 	andeq	r0, r1, r0, lsl #16
    6d74:	00000053 	andeq	r0, r0, r3, asr r0
    6d78:	00000000 	andeq	r0, r0, r0
    6d7c:	0040dc00 	subeq	sp, r0, r0, lsl #24
    6d80:	0040e208 	subeq	lr, r0, r8, lsl #4
    6d84:	30000208 	andcc	r0, r0, r8, lsl #4
    6d88:	0040e29f 	umaaleq	lr, r0, pc, r2	; <UNPREDICTABLE>
    6d8c:	0040f608 	subeq	pc, r0, r8, lsl #12
    6d90:	53000108 	movwpl	r0, #264	; 0x108
    6d94:	080040f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, lr}
    6d98:	08004104 	stmdaeq	r0, {r2, r8, lr}
    6d9c:	00710008 	rsbseq	r0, r1, r8
    6da0:	3124fc09 	msrcc	CPSR_s, r9, lsl #24
    6da4:	41189f25 	tstmi	r8, r5, lsr #30
    6da8:	41200800 	teqmi	r0, r0, lsl #16
    6dac:	00080800 	andeq	r0, r8, r0, lsl #16
    6db0:	fc090071 	stc2	0, cr0, [r9], {113}	; 0x71
    6db4:	9f253124 	svcls	0x00253124
    6db8:	08004120 	stmdaeq	r0, {r5, r8, lr}
    6dbc:	08004122 	stmdaeq	r0, {r1, r5, r8, lr}
    6dc0:	22530001 	subscs	r0, r3, #1
    6dc4:	28080041 	stmdacs	r8, {r0, r6}
    6dc8:	08080041 	stmdaeq	r8, {r0, r6}
    6dcc:	09007100 	stmdbeq	r0, {r8, ip, sp, lr}
    6dd0:	253124fc 	ldrcs	r2, [r1, #-1276]!	; 0x4fc
    6dd4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6dd8:	00000000 	andeq	r0, r0, r0
    6ddc:	0040dc00 	subeq	sp, r0, r0, lsl #24
    6de0:	00411208 	subeq	r1, r1, r8, lsl #4
    6de4:	30000208 	andcc	r0, r0, r8, lsl #4
    6de8:	0041129f 	umaaleq	r1, r1, pc, r2	; <UNPREDICTABLE>
    6dec:	00411808 	subeq	r1, r1, r8, lsl #16
    6df0:	50000108 	andpl	r0, r0, r8, lsl #2
    6df4:	08004118 	stmdaeq	r0, {r3, r4, r8, lr}
    6df8:	0800411a 	stmdaeq	r0, {r1, r3, r4, r8, lr}
    6dfc:	9f300002 	svcls	0x00300002
    6e00:	0800411a 	stmdaeq	r0, {r1, r3, r4, r8, lr}
    6e04:	08004120 	stmdaeq	r0, {r5, r8, lr}
    6e08:	20500001 	subscs	r0, r0, r1
    6e0c:	28080041 	stmdacs	r8, {r0, r6}
    6e10:	02080041 	andeq	r0, r8, #65	; 0x41
    6e14:	009f3000 	addseq	r3, pc, r0
    6e18:	00000000 	andeq	r0, r0, r0
    6e1c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    6e20:	2a080041 	bcs	206f2c <_Min_Stack_Size+0x206b2c>
    6e24:	01080041 	tsteq	r8, r1, asr #32
    6e28:	412a5100 	teqmi	sl, r0, lsl #2
    6e2c:	41380800 	teqmi	r8, r0, lsl #16
    6e30:	00040800 	andeq	r0, r4, r0, lsl #16
    6e34:	9f5101f3 	svcls	0x005101f3
	...
    6e40:	08004128 	stmdaeq	r0, {r3, r5, r8, lr}
    6e44:	0800412a 	stmdaeq	r0, {r1, r3, r5, r8, lr}
    6e48:	00710005 	rsbseq	r0, r1, r5
    6e4c:	2a9f2538 	bcs	fe7d0334 <_estack+0xde7a0334>
    6e50:	38080041 	stmdacc	r8, {r0, r6}
    6e54:	06080041 	streq	r0, [r8], -r1, asr #32
    6e58:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    6e5c:	009f2538 	addseq	r2, pc, r8, lsr r5	; <UNPREDICTABLE>
    6e60:	00000000 	andeq	r0, r0, r0
    6e64:	6c000000 	stcvs	0, cr0, [r0], {-0}
    6e68:	94080041 	strls	r0, [r8], #-65	; 0x41
    6e6c:	01080041 	tsteq	r8, r1, asr #32
    6e70:	41945000 	orrsmi	r5, r4, r0
    6e74:	419a0800 	orrsmi	r0, sl, r0, lsl #16
    6e78:	00040800 	andeq	r0, r4, r0, lsl #16
    6e7c:	9f5001f3 	svcls	0x005001f3
	...
    6e88:	0800416c 	stmdaeq	r0, {r2, r3, r5, r6, r8, lr}
    6e8c:	0800417c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, lr}
    6e90:	7c510001 	mrrcvc	0, 0, r0, r1, cr1
    6e94:	9a080041 	bls	206fa0 <_Min_Stack_Size+0x206ba0>
    6e98:	04080041 	streq	r0, [r8], #-65	; 0x41
    6e9c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    6ea0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6ea4:	00000000 	andeq	r0, r0, r0
    6ea8:	00416c00 	subeq	r6, r1, r0, lsl #24
    6eac:	00418008 	subeq	r8, r1, r8
    6eb0:	30000208 	andcc	r0, r0, r8, lsl #4
    6eb4:	0041809f 	umaaleq	r8, r1, pc, r0	; <UNPREDICTABLE>
    6eb8:	00418608 	subeq	r8, r1, r8, lsl #12
    6ebc:	3f000508 	svccc	0x00000508
    6ec0:	9f240071 	svcls	0x00240071
    6ec4:	08004186 	stmdaeq	r0, {r1, r2, r7, r8, lr}
    6ec8:	0800418a 	stmdaeq	r0, {r1, r3, r7, r8, lr}
    6ecc:	8a520001 	bhi	1486ed8 <_Min_Stack_Size+0x1486ad8>
    6ed0:	9a080041 	bls	206fdc <_Min_Stack_Size+0x206bdc>
    6ed4:	05080041 	streq	r0, [r8, #-65]	; 0x41
    6ed8:	00713f00 	rsbseq	r3, r1, r0, lsl #30
    6edc:	00009f24 	andeq	r9, r0, r4, lsr #30
    6ee0:	00000000 	andeq	r0, r0, r0
    6ee4:	41b40000 			; <UNDEFINED> instruction: 0x41b40000
    6ee8:	41b80800 			; <UNDEFINED> instruction: 0x41b80800
    6eec:	00020800 	andeq	r0, r2, r0, lsl #16
    6ef0:	41b89f30 			; <UNDEFINED> instruction: 0x41b89f30
    6ef4:	41bc0800 			; <UNDEFINED> instruction: 0x41bc0800
    6ef8:	00090800 	andeq	r0, r9, r0, lsl #16
    6efc:	000a0070 	andeq	r0, sl, r0, ror r0
    6f00:	2e301a01 	vaddcs.f32	s2, s0, s2
    6f04:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6f08:	00000000 	andeq	r0, r0, r0
    6f0c:	0041c400 	subeq	ip, r1, r0, lsl #8
    6f10:	0041de08 	subeq	sp, r1, r8, lsl #28
    6f14:	50000108 	andpl	r0, r0, r8, lsl #2
    6f18:	080041de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, lr}
    6f1c:	080041f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, lr}
    6f20:	01f30004 	mvnseq	r0, r4
    6f24:	41f29f50 	mvnsmi	r9, r0, asr pc
    6f28:	41f60800 	mvnsmi	r0, r0, lsl #16
    6f2c:	00010800 	andeq	r0, r1, r0, lsl #16
    6f30:	0041f650 	subeq	pc, r1, r0, asr r6	; <UNPREDICTABLE>
    6f34:	00420a08 	subeq	r0, r2, r8, lsl #20
    6f38:	f3000408 	vshl.u8	d0, d8, d0
    6f3c:	0a9f5001 	beq	fe7daf48 <_estack+0xde7aaf48>
    6f40:	0e080042 	cdpeq	0, 0, cr0, cr8, cr2, {2}
    6f44:	01080042 	tsteq	r8, r2, asr #32
    6f48:	420e5000 	andmi	r5, lr, #0
    6f4c:	42300800 	eorsmi	r0, r0, #0, 16
    6f50:	00040800 	andeq	r0, r4, r0, lsl #16
    6f54:	9f5001f3 	svcls	0x005001f3
	...
    6f60:	08004230 	stmdaeq	r0, {r4, r5, r9, lr}
    6f64:	08004238 	stmdaeq	r0, {r3, r4, r5, r9, lr}
    6f68:	38500001 	ldmdacc	r0, {r0}^
    6f6c:	10080042 	andne	r0, r8, r2, asr #32
    6f70:	01080043 	tsteq	r8, r3, asr #32
    6f74:	00005400 	andeq	r5, r0, r0, lsl #8
    6f78:	00000000 	andeq	r0, r0, r0
    6f7c:	42300000 	eorsmi	r0, r0, #0
    6f80:	423f0800 	eorsmi	r0, pc, #0, 16
    6f84:	00010800 	andeq	r0, r1, r0, lsl #16
    6f88:	00423f51 	subeq	r3, r2, r1, asr pc
    6f8c:	00431008 	subeq	r1, r3, r8
    6f90:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    6f9c:	08004230 	stmdaeq	r0, {r4, r5, r9, lr}
    6fa0:	0800423c 	stmdaeq	r0, {r2, r3, r4, r5, r9, lr}
    6fa4:	9f300002 	svcls	0x00300002
    6fa8:	0800423c 	stmdaeq	r0, {r2, r3, r4, r5, r9, lr}
    6fac:	08004252 	stmdaeq	r0, {r1, r4, r6, r9, lr}
    6fb0:	58560001 	ldmdapl	r6, {r0}^
    6fb4:	6c080042 	stcvs	0, cr0, [r8], {66}	; 0x42
    6fb8:	01080042 	tsteq	r8, r2, asr #32
    6fbc:	426c5600 	rsbmi	r5, ip, #0, 12
    6fc0:	42800800 	addmi	r0, r0, #0, 16
    6fc4:	00020800 	andeq	r0, r2, r0, lsl #16
    6fc8:	42809f30 	addmi	r9, r0, #48, 30	; 0xc0
    6fcc:	42860800 	addmi	r0, r6, #0, 16
    6fd0:	00010800 	andeq	r0, r1, r0, lsl #16
    6fd4:	00429853 	subeq	r9, r2, r3, asr r8
    6fd8:	00429c08 	subeq	r9, r2, r8, lsl #24
    6fdc:	53000108 	movwpl	r0, #264	; 0x108
    6fe0:	080042a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, lr}
    6fe4:	080042a8 	stmdaeq	r0, {r3, r5, r7, r9, lr}
    6fe8:	ac530001 	mrrcge	0, 0, r0, r3, cr1
    6fec:	b6080042 	strlt	r0, [r8], -r2, asr #32
    6ff0:	01080042 	tsteq	r8, r2, asr #32
    6ff4:	42b65300 	adcsmi	r5, r6, #0, 6
    6ff8:	42f20800 	rscsmi	r0, r2, #0, 16
    6ffc:	00020800 	andeq	r0, r2, r0, lsl #16
    7000:	42f29f30 	rscsmi	r9, r2, #48, 30	; 0xc0
    7004:	42f60800 	rscsmi	r0, r6, #0, 16
    7008:	00010800 	andeq	r0, r1, r0, lsl #16
    700c:	0042f653 	subeq	pc, r2, r3, asr r6	; <UNPREDICTABLE>
    7010:	00431008 	subeq	r1, r3, r8
    7014:	30000208 	andcc	r0, r0, r8, lsl #4
    7018:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    701c:	00000000 	andeq	r0, r0, r0
    7020:	00423000 	subeq	r3, r2, r0
    7024:	00425a08 	subeq	r5, r2, r8, lsl #20
    7028:	30000208 	andcc	r0, r0, r8, lsl #4
    702c:	00425a9f 	umaaleq	r5, r2, pc, sl	; <UNPREDICTABLE>
    7030:	00428208 	subeq	r8, r2, r8, lsl #4
    7034:	50000108 	andpl	r0, r0, r8, lsl #2
    7038:	08004282 	stmdaeq	r0, {r1, r7, r9, lr}
    703c:	080042b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, lr}
    7040:	60910019 	addsvs	r0, r1, r9, lsl r0
    7044:	f728f706 			; <UNDEFINED> instruction: 0xf728f706
    7048:	de830c21 	cdple	12, 8, cr0, cr3, cr1, {1}
    704c:	21f7431b 	mvnscs	r4, fp, lsl r3
    7050:	f720081e 			; <UNDEFINED> instruction: 0xf720081e
    7054:	28f72521 	ldmcs	r7!, {r0, r5, r8, sl, sp}^
    7058:	b69f2542 	ldrlt	r2, [pc], r2, asr #10
    705c:	e6080042 	str	r0, [r8], -r2, asr #32
    7060:	01080042 	tsteq	r8, r2, asr #32
    7064:	42e65000 	rscmi	r5, r6, #0
    7068:	42f60800 	rscsmi	r0, r6, #0, 16
    706c:	00010800 	andeq	r0, r1, r0, lsl #16
    7070:	0042f657 	subeq	pc, r2, r7, asr r6	; <UNPREDICTABLE>
    7074:	00431008 	subeq	r1, r3, r8
    7078:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    7084:	08004230 	stmdaeq	r0, {r4, r5, r9, lr}
    7088:	08004276 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, lr}
    708c:	9f340002 	svcls	0x00340002
    7090:	08004276 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, lr}
    7094:	08004282 	stmdaeq	r0, {r1, r7, r9, lr}
    7098:	b6530001 	ldrblt	r0, [r3], -r1
    709c:	ce080042 	cdpgt	0, 0, cr0, cr8, cr2, {2}
    70a0:	02080042 	andeq	r0, r8, #66	; 0x42
    70a4:	ce9f3400 	cdpgt	4, 9, cr3, cr15, cr0, {0}
    70a8:	f2080042 	vhadd.s8	q0, q4, q1
    70ac:	01080042 	tsteq	r8, r2, asr #32
    70b0:	42f65300 	rscsmi	r5, r6, #0, 6
    70b4:	43000800 	movwmi	r0, #2048	; 0x800
    70b8:	00020800 	andeq	r0, r2, r0, lsl #16
    70bc:	43009f34 	movwmi	r9, #3892	; 0xf34
    70c0:	43100800 	tstmi	r0, #0, 16
    70c4:	00010800 	andeq	r0, r1, r0, lsl #16
    70c8:	00000053 	andeq	r0, r0, r3, asr r0
    70cc:	00000000 	andeq	r0, r0, r0
    70d0:	00423000 	subeq	r3, r2, r0
    70d4:	00425808 	subeq	r5, r2, r8, lsl #16
    70d8:	0c000608 	stceq	6, cr0, [r0], {8}
    70dc:	007a1200 	rsbseq	r1, sl, r0, lsl #4
    70e0:	0042589f 	umaaleq	r5, r2, pc, r8	; <UNPREDICTABLE>
    70e4:	00428208 	subeq	r8, r2, r8, lsl #4
    70e8:	51000108 	tstpl	r0, r8, lsl #2
    70ec:	08004282 	stmdaeq	r0, {r1, r7, r9, lr}
    70f0:	080042b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, lr}
    70f4:	60910002 	addsvs	r0, r1, r2
    70f8:	080042b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, lr}
    70fc:	080042e0 	stmdaeq	r0, {r5, r6, r7, r9, lr}
    7100:	e0510001 	subs	r0, r1, r1
    7104:	f6080042 			; <UNDEFINED> instruction: 0xf6080042
    7108:	02080042 	andeq	r0, r8, #66	; 0x42
    710c:	f6609100 			; <UNDEFINED> instruction: 0xf6609100
    7110:	10080042 	andne	r0, r8, r2, asr #32
    7114:	01080043 	tsteq	r8, r3, asr #32
    7118:	00005100 	andeq	r5, r0, r0, lsl #2
    711c:	00000000 	andeq	r0, r0, r0
    7120:	436c0000 	cmnmi	ip, #0
    7124:	43740800 	cmnmi	r4, #0, 16
    7128:	00010800 	andeq	r0, r1, r0, lsl #16
    712c:	00437451 	subeq	r7, r3, r1, asr r4
    7130:	00437e08 	subeq	r7, r3, r8, lsl #28
    7134:	f3000408 	vshl.u8	d0, d8, d0
    7138:	009f5101 	addseq	r5, pc, r1, lsl #2
    713c:	00000000 	andeq	r0, r0, r0
    7140:	6c000000 	stcvs	0, cr0, [r0], {-0}
    7144:	70080043 	andvc	r0, r8, r3, asr #32
    7148:	02080043 	andeq	r0, r8, #67	; 0x43
    714c:	709f3000 	addsvc	r3, pc, r0
    7150:	78080043 	stmdavc	r8, {r0, r1, r6}
    7154:	06080043 	streq	r0, [r8], -r3, asr #32
    7158:	09007300 	stmdbeq	r0, {r8, r9, ip, sp, lr}
    715c:	7a9f1af0 	bvc	fe7cdd24 <_estack+0xde79dd24>
    7160:	7e080043 	cdpvc	0, 0, cr0, cr8, cr3, {2}
    7164:	01080043 	tsteq	r8, r3, asr #32
    7168:	00005100 	andeq	r5, r0, r0, lsl #2
    716c:	00000000 	andeq	r0, r0, r0
    7170:	43b80000 			; <UNDEFINED> instruction: 0x43b80000
    7174:	43be0800 			; <UNDEFINED> instruction: 0x43be0800
    7178:	00010800 	andeq	r0, r1, r0, lsl #16
    717c:	0043be51 	subeq	fp, r3, r1, asr lr
    7180:	0043ca08 	subeq	ip, r3, r8, lsl #20
    7184:	51000108 	tstpl	r0, r8, lsl #2
	...
    7190:	080043e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, lr}
    7194:	080043f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, lr}
    7198:	f0510001 			; <UNDEFINED> instruction: 0xf0510001
    719c:	fa080043 	blx	2072b0 <_Min_Stack_Size+0x206eb0>
    71a0:	04080043 	streq	r0, [r8], #-67	; 0x43
    71a4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    71a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    71ac:	00000000 	andeq	r0, r0, r0
    71b0:	0043e800 	subeq	lr, r3, r0, lsl #16
    71b4:	0043ec08 	subeq	lr, r3, r8, lsl #24
    71b8:	30000208 	andcc	r0, r0, r8, lsl #4
    71bc:	0043ec9f 	umaaleq	lr, r3, pc, ip	; <UNPREDICTABLE>
    71c0:	0043f408 	subeq	pc, r3, r8, lsl #8
    71c4:	73000708 	movwvc	r0, #1800	; 0x708
    71c8:	ff010b00 			; <UNDEFINED> instruction: 0xff010b00
    71cc:	43f69f1a 	mvnsmi	r9, #26, 30	; 0x68
    71d0:	43fa0800 	mvnsmi	r0, #0, 16
    71d4:	00010800 	andeq	r0, r1, r0, lsl #16
    71d8:	00000051 	andeq	r0, r0, r1, asr r0
    71dc:	00000000 	andeq	r0, r0, r0
    71e0:	0044ec00 	subeq	lr, r4, r0, lsl #24
    71e4:	0044ee08 	subeq	lr, r4, r8, lsl #28
    71e8:	50000108 	andpl	r0, r0, r8, lsl #2
    71ec:	080044ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, lr}
    71f0:	080044f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl, lr}
    71f4:	01f30004 	mvnseq	r0, r4
    71f8:	00009f50 	andeq	r9, r0, r0, asr pc
    71fc:	00000000 	andeq	r0, r0, r0
    7200:	454c0000 	strbmi	r0, [ip, #-0]
    7204:	454e0800 	strbmi	r0, [lr, #-2048]	; 0x800
    7208:	00010800 	andeq	r0, r1, r0, lsl #16
    720c:	00454e50 	subeq	r4, r5, r0, asr lr
    7210:	00455408 	subeq	r5, r5, r8, lsl #8
    7214:	f3000408 	vshl.u8	d0, d8, d0
    7218:	009f5001 	addseq	r5, pc, r1
    721c:	00000000 	andeq	r0, r0, r0
    7220:	8c000000 	stchi	0, cr0, [r0], {-0}
    7224:	9e080045 	cdpls	0, 0, cr0, cr8, cr5, {2}
    7228:	01080045 	tsteq	r8, r5, asr #32
    722c:	459e5000 	ldrmi	r5, [lr]
    7230:	45a40800 	strmi	r0, [r4, #2048]!	; 0x800
    7234:	00040800 	andeq	r0, r4, r0, lsl #16
    7238:	9f5001f3 	svcls	0x005001f3
	...
    7244:	0800458c 	stmdaeq	r0, {r2, r3, r7, r8, sl, lr}
    7248:	08004598 	stmdaeq	r0, {r3, r4, r7, r8, sl, lr}
    724c:	98510001 	ldmdals	r1, {r0}^
    7250:	a4080045 	strge	r0, [r8], #-69	; 0x45
    7254:	04080045 	streq	r0, [r8], #-69	; 0x45
    7258:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    725c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7260:	00000000 	andeq	r0, r0, r0
    7264:	0045a400 	subeq	sl, r5, r0, lsl #8
    7268:	0045ae08 	subeq	sl, r5, r8, lsl #28
    726c:	51000108 	tstpl	r0, r8, lsl #2
    7270:	080045ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, sl, lr}
    7274:	080045b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, sl, lr}
    7278:	01f30004 	mvnseq	r0, r4
    727c:	45b29f51 	ldrmi	r9, [r2, #3921]!	; 0xf51
    7280:	45b40800 	ldrmi	r0, [r4, #2048]!	; 0x800
    7284:	00010800 	andeq	r0, r1, r0, lsl #16
    7288:	0045b451 	subeq	fp, r5, r1, asr r4
    728c:	0045b808 	subeq	fp, r5, r8, lsl #16
    7290:	f3000408 	vshl.u8	d0, d8, d0
    7294:	009f5101 	addseq	r5, pc, r1, lsl #2
    7298:	00000000 	andeq	r0, r0, r0
    729c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    72a0:	be080045 	cdplt	0, 0, cr0, cr8, cr5, {2}
    72a4:	01080045 	tsteq	r8, r5, asr #32
    72a8:	45be5000 	ldrmi	r5, [lr, #0]!
    72ac:	45d00800 	ldrbmi	r0, [r0, #2048]	; 0x800
    72b0:	00040800 	andeq	r0, r4, r0, lsl #16
    72b4:	9f5001f3 	svcls	0x005001f3
	...
    72c0:	080045b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, lr}
    72c4:	080045be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, sl, lr}
    72c8:	9f300002 	svcls	0x00300002
    72cc:	080045be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, sl, lr}
    72d0:	080045c2 	stmdaeq	r0, {r1, r6, r7, r8, sl, lr}
    72d4:	00730016 	rsbseq	r0, r3, r6, lsl r0
    72d8:	1affff0a 	bne	6f08 <_Min_Stack_Size+0x6b08>
    72dc:	00702440 	rsbseq	r2, r0, r0, asr #8
    72e0:	1affff0a 	bne	6f10 <_Min_Stack_Size+0x6b10>
    72e4:	ffff0c21 			; <UNDEFINED> instruction: 0xffff0c21
    72e8:	9f1a00ff 	svcls	0x001a00ff
    72ec:	080045c2 	stmdaeq	r0, {r1, r6, r7, r8, sl, lr}
    72f0:	080045c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sl, lr}
    72f4:	00730016 	rsbseq	r0, r3, r6, lsl r0
    72f8:	1affff0a 	bne	6f28 <_Min_Stack_Size+0x6b28>
    72fc:	00722440 	rsbseq	r2, r2, r0, asr #8
    7300:	1affff0a 	bne	6f30 <_Min_Stack_Size+0x6b30>
    7304:	ffff0c21 			; <UNDEFINED> instruction: 0xffff0c21
    7308:	9f1a00ff 	svcls	0x001a00ff
	...
    7314:	080045b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, lr}
    7318:	080045be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, sl, lr}
    731c:	9f300002 	svcls	0x00300002
    7320:	080045be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, sl, lr}
    7324:	080045c2 	stmdaeq	r0, {r1, r6, r7, r8, sl, lr}
    7328:	00700007 	rsbseq	r0, r0, r7
    732c:	1affff0a 	bne	6f5c <_Min_Stack_Size+0x6b5c>
    7330:	0045c29f 	umaaleq	ip, r5, pc, r2	; <UNPREDICTABLE>
    7334:	0045d008 	subeq	sp, r5, r8
    7338:	72000708 	andvc	r0, r0, #8, 14	; 0x200000
    733c:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    7340:	00009f1a 	andeq	r9, r0, sl, lsl pc
    7344:	00000000 	andeq	r0, r0, r0
    7348:	45b80000 	ldrmi	r0, [r8, #0]!
    734c:	45be0800 	ldrmi	r0, [lr, #2048]!	; 0x800
    7350:	00020800 	andeq	r0, r2, r0, lsl #16
    7354:	45be9f30 	ldrmi	r9, [lr, #3888]!	; 0xf30
    7358:	45c60800 	strbmi	r0, [r6, #2048]	; 0x800
    735c:	00090800 	andeq	r0, r9, r0, lsl #16
    7360:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    7364:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    7368:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    736c:	00000000 	andeq	r0, r0, r0
    7370:	0045b800 	subeq	fp, r5, r0, lsl #16
    7374:	0045be08 	subeq	fp, r5, r8, lsl #28
    7378:	30000208 	andcc	r0, r0, r8, lsl #4
    737c:	0045be9f 	umaaleq	fp, r5, pc, lr	; <UNPREDICTABLE>
    7380:	0045c208 	subeq	ip, r5, r8, lsl #4
    7384:	71001c08 	tstvc	r0, r8, lsl #24
    7388:	0a007300 	beq	23f90 <_Min_Stack_Size+0x23b90>
    738c:	401affff 			; <UNDEFINED> instruction: 0x401affff
    7390:	0a007024 	beq	23428 <_Min_Stack_Size+0x23028>
    7394:	211affff 			; <UNDEFINED> instruction: 0x211affff
    7398:	0c1a0071 	ldceq	0, cr0, [sl], {113}	; 0x71
    739c:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
    73a0:	c29f291a 	addsgt	r2, pc, #425984	; 0x68000
    73a4:	c6080045 	strgt	r0, [r8], -r5, asr #32
    73a8:	1c080045 	stcne	0, cr0, [r8], {69}	; 0x45
    73ac:	73007100 	movwvc	r7, #256	; 0x100
    73b0:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    73b4:	7224401a 	eorvc	r4, r4, #26
    73b8:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    73bc:	0071211a 	rsbseq	r2, r1, sl, lsl r1
    73c0:	ffff0c1a 			; <UNDEFINED> instruction: 0xffff0c1a
    73c4:	291a00ff 	ldmdbcs	sl, {r0, r1, r2, r3, r4, r5, r6, r7}
    73c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    73cc:	00000000 	andeq	r0, r0, r0
    73d0:	0045d000 	subeq	sp, r5, r0
    73d4:	0045d608 	subeq	sp, r5, r8, lsl #12
    73d8:	50000108 	andpl	r0, r0, r8, lsl #2
    73dc:	080045d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, lr}
    73e0:	080045e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, lr}
    73e4:	01f30004 	mvnseq	r0, r4
    73e8:	00009f50 	andeq	r9, r0, r0, asr pc
    73ec:	00000000 	andeq	r0, r0, r0
    73f0:	45d00000 	ldrbmi	r0, [r0]
    73f4:	45d60800 	ldrbmi	r0, [r6, #2048]	; 0x800
    73f8:	00020800 	andeq	r0, r2, r0, lsl #16
    73fc:	45d69f30 	ldrbmi	r9, [r6, #3888]	; 0xf30
    7400:	45da0800 	ldrbmi	r0, [sl, #2048]	; 0x800
    7404:	00160800 	andseq	r0, r6, r0, lsl #16
    7408:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    740c:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    7410:	ff0a0070 			; <UNDEFINED> instruction: 0xff0a0070
    7414:	0c211aff 	stceq	10, cr1, [r1], #-1020	; 0xfffffc04
    7418:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
    741c:	45da9f1a 	ldrbmi	r9, [sl, #3866]	; 0xf1a
    7420:	45e00800 	strbmi	r0, [r0, #2048]!	; 0x800
    7424:	00160800 	andseq	r0, r6, r0, lsl #16
    7428:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    742c:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    7430:	ff0a0072 			; <UNDEFINED> instruction: 0xff0a0072
    7434:	0c211aff 	stceq	10, cr1, [r1], #-1020	; 0xfffffc04
    7438:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
    743c:	00009f1a 	andeq	r9, r0, sl, lsl pc
    7440:	00000000 	andeq	r0, r0, r0
    7444:	45d00000 	ldrbmi	r0, [r0]
    7448:	45d60800 	ldrbmi	r0, [r6, #2048]	; 0x800
    744c:	00020800 	andeq	r0, r2, r0, lsl #16
    7450:	45d69f30 	ldrbmi	r9, [r6, #3888]	; 0xf30
    7454:	45da0800 	ldrbmi	r0, [sl, #2048]	; 0x800
    7458:	00070800 	andeq	r0, r7, r0, lsl #16
    745c:	ff0a0070 			; <UNDEFINED> instruction: 0xff0a0070
    7460:	da9f1aff 	ble	fe7ce064 <_estack+0xde79e064>
    7464:	e0080045 	and	r0, r8, r5, asr #32
    7468:	07080045 	streq	r0, [r8, -r5, asr #32]
    746c:	0a007200 	beq	23c74 <_Min_Stack_Size+0x23874>
    7470:	9f1affff 	svcls	0x001affff
	...
    747c:	080045d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, lr}
    7480:	080045d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, lr}
    7484:	9f300002 	svcls	0x00300002
    7488:	080045d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, lr}
    748c:	080045e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, lr}
    7490:	00730009 	rsbseq	r0, r3, r9
    7494:	1affff0a 	bne	70c4 <_Min_Stack_Size+0x6cc4>
    7498:	009f2440 	addseq	r2, pc, r0, asr #8
    749c:	00000000 	andeq	r0, r0, r0
    74a0:	e0000000 	and	r0, r0, r0
    74a4:	08080045 	stmdaeq	r8, {r0, r2, r6}
    74a8:	01080046 	tsteq	r8, r6, asr #32
    74ac:	46085000 	strmi	r5, [r8], -r0
    74b0:	460c0800 	strmi	r0, [ip], -r0, lsl #16
    74b4:	00040800 	andeq	r0, r4, r0, lsl #16
    74b8:	9f5001f3 	svcls	0x005001f3
    74bc:	0800460c 	stmdaeq	r0, {r2, r3, r9, sl, lr}
    74c0:	08004616 	stmdaeq	r0, {r1, r2, r4, r9, sl, lr}
    74c4:	00500001 	subseq	r0, r0, r1
    74c8:	00000000 	andeq	r0, r0, r0
    74cc:	e0000000 	and	r0, r0, r0
    74d0:	f4080045 	vst4.16	{d0-d3}, [r8], r5
    74d4:	01080045 	tsteq	r8, r5, asr #32
    74d8:	45f45100 	ldrbmi	r5, [r4, #256]!	; 0x100
    74dc:	46160800 	ldrmi	r0, [r6], -r0, lsl #16
    74e0:	00010800 	andeq	r0, r1, r0, lsl #16
    74e4:	00000051 	andeq	r0, r0, r1, asr r0
    74e8:	00000000 	andeq	r0, r0, r0
    74ec:	0045e000 	subeq	lr, r5, r0
    74f0:	00460008 	subeq	r0, r6, r8
    74f4:	30000208 	andcc	r0, r0, r8, lsl #4
    74f8:	0046009f 	umaaleq	r0, r6, pc, r0	; <UNPREDICTABLE>
    74fc:	00460c08 	subeq	r0, r6, r8, lsl #24
    7500:	71000808 	tstvc	r0, r8, lsl #16
    7504:	1a007300 	bne	2410c <_Min_Stack_Size+0x23d0c>
    7508:	0c9f2e30 	ldceq	14, cr2, [pc], {48}	; 0x30
    750c:	16080046 	strne	r0, [r8], -r6, asr #32
    7510:	02080046 	andeq	r0, r8, #70	; 0x46
    7514:	009f3000 	addseq	r3, pc, r0
    7518:	00000000 	andeq	r0, r0, r0
    751c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    7520:	1a080046 	bne	207640 <_Min_Stack_Size+0x207240>
    7524:	01080046 	tsteq	r8, r6, asr #32
    7528:	461a5100 	ldrmi	r5, [sl], -r0, lsl #2
    752c:	461c0800 	ldrmi	r0, [ip], -r0, lsl #16
    7530:	00040800 	andeq	r0, r4, r0, lsl #16
    7534:	9f200071 	svcls	0x00200071
    7538:	0800461c 	stmdaeq	r0, {r2, r3, r4, r9, sl, lr}
    753c:	08004620 	stmdaeq	r0, {r5, r9, sl, lr}
    7540:	01f30004 	mvnseq	r0, r4
    7544:	00009f51 	andeq	r9, r0, r1, asr pc
    7548:	00000000 	andeq	r0, r0, r0
    754c:	46180000 	ldrmi	r0, [r8], -r0
    7550:	461a0800 	ldrmi	r0, [sl], -r0, lsl #16
    7554:	00090800 	andeq	r0, r9, r0, lsl #16
    7558:	ff0c0071 			; <UNDEFINED> instruction: 0xff0c0071
    755c:	1a00ffff 	bne	47560 <_Min_Stack_Size+0x47160>
    7560:	00461a9f 	umaaleq	r1, r6, pc, sl	; <UNPREDICTABLE>
    7564:	00461c08 	subeq	r1, r6, r8, lsl #24
    7568:	71000a08 	tstvc	r0, r8, lsl #20
    756c:	ff0c2000 			; <UNDEFINED> instruction: 0xff0c2000
    7570:	1a00ffff 	bne	47574 <_Min_Stack_Size+0x47174>
    7574:	00461c9f 	umaaleq	r1, r6, pc, ip	; <UNPREDICTABLE>
    7578:	00462008 	subeq	r2, r6, r8
    757c:	f3000a08 	vpmax.u8	d0, d0, d8
    7580:	ff0c5101 			; <UNDEFINED> instruction: 0xff0c5101
    7584:	1a00ffff 	bne	47588 <_Min_Stack_Size+0x47188>
    7588:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    758c:	00000000 	andeq	r0, r0, r0
    7590:	00462000 	subeq	r2, r6, r0
    7594:	00462408 	subeq	r2, r6, r8, lsl #8
    7598:	50000108 	andpl	r0, r0, r8, lsl #2
    759c:	08004624 	stmdaeq	r0, {r2, r5, r9, sl, lr}
    75a0:	0800463c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, lr}
    75a4:	01f30004 	mvnseq	r0, r4
    75a8:	00009f50 	andeq	r9, r0, r0, asr pc
    75ac:	00000000 	andeq	r0, r0, r0
    75b0:	46200000 	strtmi	r0, [r0], -r0
    75b4:	462a0800 	strtmi	r0, [sl], -r0, lsl #16
    75b8:	00010800 	andeq	r0, r1, r0, lsl #16
    75bc:	00462a51 	subeq	r2, r6, r1, asr sl
    75c0:	00463008 	subeq	r3, r6, r8
    75c4:	71000908 	tstvc	r0, r8, lsl #18
    75c8:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
    75cc:	9f1a00ff 	svcls	0x001a00ff
    75d0:	08004630 	stmdaeq	r0, {r4, r5, r9, sl, lr}
    75d4:	0800463c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, lr}
    75d8:	01f3000a 	mvnseq	r0, sl
    75dc:	ffff0c51 			; <UNDEFINED> instruction: 0xffff0c51
    75e0:	9f1a00ff 	svcls	0x001a00ff
	...
    75ec:	08004620 	stmdaeq	r0, {r5, r9, sl, lr}
    75f0:	0800463a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl, lr}
    75f4:	9f300002 	svcls	0x00300002
    75f8:	0800463a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl, lr}
    75fc:	0800463c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, lr}
    7600:	00500001 	subseq	r0, r0, r1
    7604:	00000000 	andeq	r0, r0, r0
    7608:	20000000 	andcs	r0, r0, r0
    760c:	2a080046 	bcs	20772c <_Min_Stack_Size+0x20732c>
    7610:	02080046 	andeq	r0, r8, #70	; 0x46
    7614:	2a9f3000 	bcs	fe7d361c <_estack+0xde7a361c>
    7618:	30080046 	andcc	r0, r8, r6, asr #32
    761c:	10080046 	andne	r0, r8, r6, asr #32
    7620:	4c007100 	stfmis	f7, [r0], {-0}
    7624:	401a2446 	andsmi	r2, sl, r6, asr #8
    7628:	0a007325 	beq	242c4 <_Min_Stack_Size+0x23ec4>
    762c:	1a1affff 	bne	6c7630 <_Min_Stack_Size+0x6c7230>
    7630:	0046309f 	umaaleq	r3, r6, pc, r0	; <UNPREDICTABLE>
    7634:	00463408 	subeq	r3, r6, r8, lsl #8
    7638:	71000c08 	tstvc	r0, r8, lsl #24
    763c:	73254000 	teqvc	r5, #0
    7640:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    7644:	349f1a1a 	ldrcc	r1, [pc], #2586	; 764c <_Min_Stack_Size+0x724c>
    7648:	3c080046 	stccc	0, cr0, [r8], {70}	; 0x46
    764c:	11080046 	tstne	r8, r6, asr #32
    7650:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    7654:	1a24464c 	bne	918f8c <_Min_Stack_Size+0x918b8c>
    7658:	00732540 	rsbseq	r2, r3, r0, asr #10
    765c:	1affff0a 	bne	728c <_Min_Stack_Size+0x6e8c>
    7660:	00009f1a 	andeq	r9, r0, sl, lsl pc
    7664:	00000000 	andeq	r0, r0, r0
    7668:	463c0000 	ldrtmi	r0, [ip], -r0
    766c:	463e0800 	ldrtmi	r0, [lr], -r0, lsl #16
    7670:	00010800 	andeq	r0, r1, r0, lsl #16
    7674:	00463e51 	subeq	r3, r6, r1, asr lr
    7678:	00464008 	subeq	r4, r6, r8
    767c:	71000408 	tstvc	r0, r8, lsl #8
    7680:	409f2000 	addsmi	r2, pc, r0
    7684:	44080046 	strmi	r0, [r8], #-70	; 0x46
    7688:	04080046 	streq	r0, [r8], #-70	; 0x46
    768c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    7690:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7694:	00000000 	andeq	r0, r0, r0
    7698:	00463c00 	subeq	r3, r6, r0, lsl #24
    769c:	00463e08 	subeq	r3, r6, r8, lsl #28
    76a0:	71000908 	tstvc	r0, r8, lsl #18
    76a4:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
    76a8:	9f1a00ff 	svcls	0x001a00ff
    76ac:	0800463e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sl, lr}
    76b0:	08004640 	stmdaeq	r0, {r6, r9, sl, lr}
    76b4:	0071000a 	rsbseq	r0, r1, sl
    76b8:	ffff0c20 			; <UNDEFINED> instruction: 0xffff0c20
    76bc:	9f1a00ff 	svcls	0x001a00ff
    76c0:	08004640 	stmdaeq	r0, {r6, r9, sl, lr}
    76c4:	08004644 	stmdaeq	r0, {r2, r6, r9, sl, lr}
    76c8:	01f3000a 	mvnseq	r0, sl
    76cc:	ffff0c51 			; <UNDEFINED> instruction: 0xffff0c51
    76d0:	9f1a00ff 	svcls	0x001a00ff
	...
    76dc:	08004774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, lr}
    76e0:	080047c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, lr}
    76e4:	c4510001 	ldrbgt	r0, [r1], #-1
    76e8:	e4080047 	str	r0, [r8], #-71	; 0x47
    76ec:	04080047 	streq	r0, [r8], #-71	; 0x47
    76f0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    76f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    76f8:	00000000 	andeq	r0, r0, r0
    76fc:	00477400 	subeq	r7, r7, r0, lsl #8
    7700:	00477c08 	subeq	r7, r7, r8, lsl #24
    7704:	30000208 	andcc	r0, r0, r8, lsl #4
    7708:	00477c9f 	umaaleq	r7, r7, pc, ip	; <UNPREDICTABLE>
    770c:	0047bc08 	subeq	fp, r7, r8, lsl #24
    7710:	5c000108 	stfpls	f0, [r0], {8}
    7714:	080047bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, lr}
    7718:	080047c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, lr}
    771c:	c8560001 	ldmdagt	r6, {r0}^
    7720:	d0080047 	andle	r0, r8, r7, asr #32
    7724:	01080047 	tsteq	r8, r7, asr #32
    7728:	47d05200 	ldrbmi	r5, [r0, r0, lsl #4]
    772c:	47e40800 	strbmi	r0, [r4, r0, lsl #16]!
    7730:	00010800 	andeq	r0, r1, r0, lsl #16
    7734:	00000053 	andeq	r0, r0, r3, asr r0
    7738:	00000000 	andeq	r0, r0, r0
    773c:	00484800 	subeq	r4, r8, r0, lsl #16
    7740:	00484a08 	subeq	r4, r8, r8, lsl #20
    7744:	50000108 	andpl	r0, r0, r8, lsl #2
    7748:	0800484a 	stmdaeq	r0, {r1, r3, r6, fp, lr}
    774c:	0800484e 	stmdaeq	r0, {r1, r2, r3, r6, fp, lr}
    7750:	01f30004 	mvnseq	r0, r4
    7754:	00009f50 	andeq	r9, r0, r0, asr pc
    7758:	00000000 	andeq	r0, r0, r0
    775c:	48880000 	stmmi	r8, {}	; <UNPREDICTABLE>
    7760:	488a0800 	stmmi	sl, {fp}
    7764:	00010800 	andeq	r0, r1, r0, lsl #16
    7768:	00488a50 	subeq	r8, r8, r0, asr sl
    776c:	00489008 	subeq	r9, r8, r8
    7770:	f3000408 	vshl.u8	d0, d8, d0
    7774:	009f5001 	addseq	r5, pc, r1
    7778:	00000000 	andeq	r0, r0, r0
    777c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    7780:	8a080048 	bhi	2078a8 <_Min_Stack_Size+0x2074a8>
    7784:	02080048 	andeq	r0, r8, #72	; 0x48
    7788:	8a9f3000 	bhi	fe7d3790 <_estack+0xde7a3790>
    778c:	8e080048 	cdphi	0, 0, cr0, cr8, cr8, {2}
    7790:	0c080048 	stceq	0, cr0, [r8], {72}	; 0x48
    7794:	40007000 	andmi	r7, r0, r0
    7798:	301a243f 	andscc	r2, sl, pc, lsr r4
    779c:	1aff082e 	bne	fffc985c <_estack+0xdff9985c>
    77a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    77a4:	00000000 	andeq	r0, r0, r0
    77a8:	00489000 	subeq	r9, r8, r0
    77ac:	00489208 	subeq	r9, r8, r8, lsl #4
    77b0:	50000108 	andpl	r0, r0, r8, lsl #2
    77b4:	08004892 	stmdaeq	r0, {r1, r4, r7, fp, lr}
    77b8:	08004898 	stmdaeq	r0, {r3, r4, r7, fp, lr}
    77bc:	01f30004 	mvnseq	r0, r4
    77c0:	00009f50 	andeq	r9, r0, r0, asr pc
    77c4:	00000000 	andeq	r0, r0, r0
    77c8:	48900000 	ldmmi	r0, {}	; <UNPREDICTABLE>
    77cc:	48920800 	ldmmi	r2, {fp}
    77d0:	00020800 	andeq	r0, r2, r0, lsl #16
    77d4:	48929f30 	ldmmi	r2, {r4, r5, r8, r9, sl, fp, ip, pc}
    77d8:	48960800 	ldmmi	r6, {fp}
    77dc:	00050800 	andeq	r0, r5, r0, lsl #16
    77e0:	1a310070 	bne	c479a8 <_Min_Stack_Size+0xc475a8>
    77e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    77e8:	00000000 	andeq	r0, r0, r0
    77ec:	00489800 	subeq	r9, r8, r0, lsl #16
    77f0:	00489a08 	subeq	r9, r8, r8, lsl #20
    77f4:	50000108 	andpl	r0, r0, r8, lsl #2
    77f8:	0800489a 	stmdaeq	r0, {r1, r3, r4, r7, fp, lr}
    77fc:	080048a0 	stmdaeq	r0, {r5, r7, fp, lr}
    7800:	01f30004 	mvnseq	r0, r4
    7804:	00009f50 	andeq	r9, r0, r0, asr pc
    7808:	00000000 	andeq	r0, r0, r0
    780c:	48980000 	ldmmi	r8, {}	; <UNPREDICTABLE>
    7810:	489a0800 	ldmmi	sl, {fp}
    7814:	00020800 	andeq	r0, r2, r0, lsl #16
    7818:	489a9f30 	ldmmi	sl, {r4, r5, r8, r9, sl, fp, ip, pc}
    781c:	489e0800 	ldmmi	lr, {fp}
    7820:	00060800 	andeq	r0, r6, r0, lsl #16
    7824:	38080070 	stmdacc	r8, {r4, r5, r6}
    7828:	489e9f1a 	ldmmi	lr, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
    782c:	48a00800 	stmiami	r0!, {fp}
    7830:	00010800 	andeq	r0, r1, r0, lsl #16
    7834:	00000050 	andeq	r0, r0, r0, asr r0
    7838:	00000000 	andeq	r0, r0, r0
    783c:	0048a000 	subeq	sl, r8, r0
    7840:	0048b008 	subeq	fp, r8, r8
    7844:	50000108 	andpl	r0, r0, r8, lsl #2
    7848:	080048b0 	stmdaeq	r0, {r4, r5, r7, fp, lr}
    784c:	080048dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, lr}
    7850:	01f30004 	mvnseq	r0, r4
    7854:	00009f50 	andeq	r9, r0, r0, asr pc
    7858:	00000000 	andeq	r0, r0, r0
    785c:	48a00000 	stmiami	r0!, {}	; <UNPREDICTABLE>
    7860:	48c00800 	stmiami	r0, {fp}^
    7864:	00010800 	andeq	r0, r1, r0, lsl #16
    7868:	0048c051 	subeq	ip, r8, r1, asr r0
    786c:	0048dc08 	subeq	sp, r8, r8, lsl #24
    7870:	f3000408 	vshl.u8	d0, d8, d0
    7874:	009f5101 	addseq	r5, pc, r1, lsl #2
    7878:	00000000 	andeq	r0, r0, r0
    787c:	a0000000 	andge	r0, r0, r0
    7880:	b8080048 	stmdalt	r8, {r3, r6}
    7884:	02080048 	andeq	r0, r8, #72	; 0x48
    7888:	b89f3000 	ldmlt	pc, {ip, sp}	; <UNPREDICTABLE>
    788c:	c0080048 	andgt	r0, r8, r8, asr #32
    7890:	0e080048 	cdpeq	0, 0, cr0, cr8, cr8, {2}
    7894:	73007100 	movwvc	r7, #256	; 0x100
    7898:	7d0c1a00 	vstrvc	s2, [ip, #-0]
    789c:	1a0f7d0f 	bne	3e6ce0 <_Min_Stack_Size+0x3e68e0>
    78a0:	c09f2e30 	addsgt	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    78a4:	dc080048 	stcle	0, cr0, [r8], {72}	; 0x48
    78a8:	0f080048 	svceq	0x00080048
    78ac:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    78b0:	0c1a0073 	ldceq	0, cr0, [sl], {115}	; 0x73
    78b4:	0f7d0f7d 	svceq	0x007d0f7d
    78b8:	9f2e301a 	svcls	0x002e301a
	...
    78c4:	080048b0 	stmdaeq	r0, {r4, r5, r7, fp, lr}
    78c8:	080048cc 	stmdaeq	r0, {r2, r3, r6, r7, fp, lr}
    78cc:	cc500001 	mrrcgt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    78d0:	dc080048 	stcle	0, cr0, [r8], {72}	; 0x48
    78d4:	1a080048 	bne	2079fc <_Min_Stack_Size+0x2075fc>
    78d8:	0c007200 	sfmeq	f7, 4, [r0], {-0}
    78dc:	40026000 	andmi	r6, r2, r0
    78e0:	405001f3 	ldrshmi	r0, [r0], #-19	; 0xffffffed
    78e4:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    78e8:	c002640f 	andgt	r6, r2, pc, lsl #8
    78ec:	0001282b 	andeq	r2, r1, fp, lsr #16
    78f0:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    78f4:	00000000 	andeq	r0, r0, r0
    78f8:	a0000000 	andge	r0, r0, r0
    78fc:	b6080048 	strlt	r0, [r8], -r8, asr #32
    7900:	02080048 	andeq	r0, r8, #72	; 0x48
    7904:	b69f3000 	ldrlt	r3, [pc], r0
    7908:	b8080048 	stmdalt	r8, {r3, r6}
    790c:	01080048 	tsteq	r8, r8, asr #32
    7910:	48b85300 	ldmmi	r8!, {r8, r9, ip, lr}
    7914:	48dc0800 	ldmmi	ip, {fp}^
    7918:	00090800 	andeq	r0, r9, r0, lsl #16
    791c:	7d0c0073 	stcvc	0, cr0, [ip, #-460]	; 0xfffffe34
    7920:	1a0f7d0f 	bne	3e6d64 <_Min_Stack_Size+0x3e6964>
    7924:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7928:	00000000 	andeq	r0, r0, r0
    792c:	0048dc00 	subeq	sp, r8, r0, lsl #24
    7930:	0048ec08 	subeq	lr, r8, r8, lsl #24
    7934:	50000108 	andpl	r0, r0, r8, lsl #2
    7938:	080048ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, lr}
    793c:	08004910 	stmdaeq	r0, {r4, r8, fp, lr}
    7940:	01f30004 	mvnseq	r0, r4
    7944:	00009f50 	andeq	r9, r0, r0, asr pc
    7948:	00000000 	andeq	r0, r0, r0
    794c:	48dc0000 	ldmmi	ip, {}^	; <UNPREDICTABLE>
    7950:	48f40800 	ldmmi	r4!, {fp}^
    7954:	00010800 	andeq	r0, r1, r0, lsl #16
    7958:	0048f451 	subeq	pc, r8, r1, asr r4	; <UNPREDICTABLE>
    795c:	00491008 	subeq	r1, r9, r8
    7960:	f3000408 	vshl.u8	d0, d8, d0
    7964:	009f5101 	addseq	r5, pc, r1, lsl #2
    7968:	00000000 	andeq	r0, r0, r0
    796c:	10000000 	andne	r0, r0, r0
    7970:	28080049 	stmdacs	r8, {r0, r3, r6}
    7974:	01080049 	tsteq	r8, r9, asr #32
    7978:	49285100 	stmdbmi	r8!, {r8, ip, lr}
    797c:	492e0800 	stmdbmi	lr!, {fp}
    7980:	00040800 	andeq	r0, r4, r0, lsl #16
    7984:	9f5101f3 	svcls	0x005101f3
    7988:	0800492e 	stmdaeq	r0, {r1, r2, r3, r5, r8, fp, lr}
    798c:	0800493c 	stmdaeq	r0, {r2, r3, r4, r5, r8, fp, lr}
    7990:	3c510001 	mrrccc	0, 0, r0, r1, cr1
    7994:	44080049 	strmi	r0, [r8], #-73	; 0x49
    7998:	04080049 	streq	r0, [r8], #-73	; 0x49
    799c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    79a0:	0049449f 	umaaleq	r4, r9, pc, r4	; <UNPREDICTABLE>
    79a4:	00495008 	subeq	r5, r9, r8
    79a8:	51000108 	tstpl	r0, r8, lsl #2
	...
    79b4:	08004950 	stmdaeq	r0, {r4, r6, r8, fp, lr}
    79b8:	08004982 	stmdaeq	r0, {r1, r7, r8, fp, lr}
    79bc:	82500001 	subshi	r0, r0, #1
    79c0:	8e080049 	cdphi	0, 0, cr0, cr8, cr9, {2}
    79c4:	04080049 	streq	r0, [r8], #-73	; 0x49
    79c8:	5001f300 	andpl	pc, r1, r0, lsl #6
    79cc:	00498e9f 	umaaleq	r8, r9, pc, lr	; <UNPREDICTABLE>
    79d0:	0049a408 	subeq	sl, r9, r8, lsl #8
    79d4:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    79e0:	08004950 	stmdaeq	r0, {r4, r6, r8, fp, lr}
    79e4:	08004974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp, lr}
    79e8:	74510001 	ldrbvc	r0, [r1], #-1
    79ec:	8e080049 	cdphi	0, 0, cr0, cr8, cr9, {2}
    79f0:	04080049 	streq	r0, [r8], #-73	; 0x49
    79f4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    79f8:	00498e9f 	umaaleq	r8, r9, pc, lr	; <UNPREDICTABLE>
    79fc:	0049a408 	subeq	sl, r9, r8, lsl #8
    7a00:	51000108 	tstpl	r0, r8, lsl #2
	...
    7a0c:	08004950 	stmdaeq	r0, {r4, r6, r8, fp, lr}
    7a10:	0800498a 	stmdaeq	r0, {r1, r3, r7, r8, fp, lr}
    7a14:	9f300002 	svcls	0x00300002
    7a18:	0800498a 	stmdaeq	r0, {r1, r3, r7, r8, fp, lr}
    7a1c:	0800498e 	stmdaeq	r0, {r1, r2, r3, r7, r8, fp, lr}
    7a20:	8e500001 	cdphi	0, 5, cr0, cr0, cr1, {0}
    7a24:	a4080049 	strge	r0, [r8], #-73	; 0x49
    7a28:	02080049 	andeq	r0, r8, #73	; 0x49
    7a2c:	009f3000 	addseq	r3, pc, r0
    7a30:	00000000 	andeq	r0, r0, r0
    7a34:	66000000 	strvs	r0, [r0], -r0
    7a38:	78080049 	stmdavc	r8, {r0, r3, r6}
    7a3c:	01080049 	tsteq	r8, r9, asr #32
    7a40:	49785200 	ldmdbmi	r8!, {r9, ip, lr}^
    7a44:	49820800 	stmibmi	r2, {fp}
    7a48:	001d0800 	andseq	r0, sp, r0, lsl #16
    7a4c:	0264000c 	rsbeq	r0, r4, #12
    7a50:	60000c40 	andvs	r0, r0, r0, asr #24
    7a54:	00704002 	rsbseq	r4, r0, r2
    7a58:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    7a5c:	4b400075 	blmi	1007c38 <_Min_Stack_Size+0x1007838>
    7a60:	282b2224 	stmdacs	fp!, {r2, r5, r9, sp}
    7a64:	13160001 	tstne	r6, #1
    7a68:	0049829f 	umaaleq	r8, r9, pc, r2	; <UNPREDICTABLE>
    7a6c:	00498c08 	subeq	r8, r9, r8, lsl #24
    7a70:	0c001e08 	stceq	14, cr1, [r0], {8}
    7a74:	40026400 	andmi	r6, r2, r0, lsl #8
    7a78:	0260000c 	rsbeq	r0, r0, #12
    7a7c:	5001f340 	andpl	pc, r1, r0, asr #6
    7a80:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    7a84:	4b400075 	blmi	1007c60 <_Min_Stack_Size+0x1007860>
    7a88:	282b2224 	stmdacs	fp!, {r2, r5, r9, sp}
    7a8c:	13160001 	tstne	r6, #1
    7a90:	00498c9f 	umaaleq	r8, r9, pc, ip	; <UNPREDICTABLE>
    7a94:	00498e08 	subeq	r8, r9, r8, lsl #28
    7a98:	0c001d08 	stceq	13, cr1, [r0], {8}
    7a9c:	40026400 	andmi	r6, r2, r0, lsl #8
    7aa0:	0260000c 	rsbeq	r0, r0, #12
    7aa4:	5001f340 	andpl	pc, r1, r0, asr #6
    7aa8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    7aac:	02640f0c 	rsbeq	r0, r4, #12, 30	; 0x30
    7ab0:	01282bc0 	smlawteq	r8, r0, fp, r2
    7ab4:	9f131600 	svcls	0x00131600
    7ab8:	0800498e 	stmdaeq	r0, {r1, r2, r3, r7, r8, fp, lr}
    7abc:	080049a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, lr}
    7ac0:	00520001 	subseq	r0, r2, r1
    7ac4:	00000000 	andeq	r0, r0, r0
    7ac8:	50000000 	andpl	r0, r0, r0
    7acc:	68080049 	stmdavs	r8, {r0, r3, r6}
    7ad0:	02080049 	andeq	r0, r8, #73	; 0x49
    7ad4:	689f3000 	ldmvs	pc, {ip, sp}	; <UNPREDICTABLE>
    7ad8:	72080049 	andvc	r0, r8, #73	; 0x49
    7adc:	07080049 	streq	r0, [r8, -r9, asr #32]
    7ae0:	3b007100 	blcc	23ee8 <_Min_Stack_Size+0x23ae8>
    7ae4:	9f1a4e25 	svcls	0x001a4e25
    7ae8:	08004978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, lr}
    7aec:	0800497a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, fp, lr}
    7af0:	7a520001 	bvc	1487afc <_Min_Stack_Size+0x14876fc>
    7af4:	8e080049 	cdphi	0, 0, cr0, cr8, cr9, {2}
    7af8:	09080049 	stmdbeq	r8, {r0, r3, r6}
    7afc:	0c007200 	sfmeq	f7, 4, [r0], {-0}
    7b00:	0f7d0f7d 	svceq	0x007d0f7d
    7b04:	498e9f1a 	stmibmi	lr, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
    7b08:	49a40800 	stmibmi	r4!, {fp}
    7b0c:	00020800 	andeq	r0, r2, r0, lsl #16
    7b10:	00009f30 	andeq	r9, r0, r0, lsr pc
    7b14:	00000000 	andeq	r0, r0, r0
    7b18:	49500000 	ldmdbmi	r0, {}^	; <UNPREDICTABLE>
    7b1c:	49720800 	ldmdbmi	r2!, {fp}^
    7b20:	00020800 	andeq	r0, r2, r0, lsl #16
    7b24:	49729f30 	ldmdbmi	r2!, {r4, r5, r8, r9, sl, fp, ip, pc}^
    7b28:	498c0800 	stmibmi	ip, {fp}
    7b2c:	00010800 	andeq	r0, r1, r0, lsl #16
    7b30:	00498e54 	subeq	r8, r9, r4, asr lr
    7b34:	00499408 	subeq	r9, r9, r8, lsl #8
    7b38:	30000208 	andcc	r0, r0, r8, lsl #4
    7b3c:	0049949f 	umaaleq	r9, r9, pc, r4	; <UNPREDICTABLE>
    7b40:	0049a408 	subeq	sl, r9, r8, lsl #8
    7b44:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    7b50:	080049a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, lr}
    7b54:	080049b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, fp, lr}
    7b58:	b4500001 	ldrblt	r0, [r0], #-1
    7b5c:	d8080049 	stmdale	r8, {r0, r3, r6}
    7b60:	04080049 	streq	r0, [r8], #-73	; 0x49
    7b64:	5001f300 	andpl	pc, r1, r0, lsl #6
    7b68:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7b6c:	00000000 	andeq	r0, r0, r0
    7b70:	0049a400 	subeq	sl, r9, r0, lsl #8
    7b74:	0049bc08 	subeq	fp, r9, r8, lsl #24
    7b78:	51000108 	tstpl	r0, r8, lsl #2
    7b7c:	080049bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, fp, lr}
    7b80:	080049d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp, lr}
    7b84:	01f30004 	mvnseq	r0, r4
    7b88:	00009f51 	andeq	r9, r0, r1, asr pc
    7b8c:	00000000 	andeq	r0, r0, r0
    7b90:	49d80000 	ldmibmi	r8, {}^	; <UNPREDICTABLE>
    7b94:	4a040800 	bmi	109b9c <_Min_Stack_Size+0x10979c>
    7b98:	00010800 	andeq	r0, r1, r0, lsl #16
    7b9c:	004a0450 	subeq	r0, sl, r0, asr r4
    7ba0:	004a1808 	subeq	r1, sl, r8, lsl #16
    7ba4:	f3000408 	vshl.u8	d0, d8, d0
    7ba8:	189f5001 	ldmne	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    7bac:	1c08004a 	stcne	0, cr0, [r8], {74}	; 0x4a
    7bb0:	0108004a 	tsteq	r8, sl, asr #32
    7bb4:	4a1c5000 	bmi	71bbbc <_Min_Stack_Size+0x71b7bc>
    7bb8:	4a300800 	bmi	c09bc0 <_Min_Stack_Size+0xc097c0>
    7bbc:	00040800 	andeq	r0, r4, r0, lsl #16
    7bc0:	9f5001f3 	svcls	0x005001f3
    7bc4:	08004a30 	stmdaeq	r0, {r4, r5, r9, fp, lr}
    7bc8:	08004a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, lr}
    7bcc:	34500001 	ldrbcc	r0, [r0], #-1
    7bd0:	4808004a 	stmdami	r8, {r1, r3, r6}
    7bd4:	0408004a 	streq	r0, [r8], #-74	; 0x4a
    7bd8:	5001f300 	andpl	pc, r1, r0, lsl #6
    7bdc:	004a489f 	umaaleq	r4, sl, pc, r8	; <UNPREDICTABLE>
    7be0:	004a4c08 	subeq	r4, sl, r8, lsl #24
    7be4:	50000108 	andpl	r0, r0, r8, lsl #2
    7be8:	08004a4c 	stmdaeq	r0, {r2, r3, r6, r9, fp, lr}
    7bec:	08004a60 	stmdaeq	r0, {r5, r6, r9, fp, lr}
    7bf0:	01f30004 	mvnseq	r0, r4
    7bf4:	4a609f50 	bmi	182f93c <_Min_Stack_Size+0x182f53c>
    7bf8:	4a640800 	bmi	1909c00 <_Min_Stack_Size+0x1909800>
    7bfc:	00010800 	andeq	r0, r1, r0, lsl #16
    7c00:	004a6450 	subeq	r6, sl, r0, asr r4
    7c04:	004a7808 	subeq	r7, sl, r8, lsl #16
    7c08:	f3000408 	vshl.u8	d0, d8, d0
    7c0c:	789f5001 	ldmvc	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    7c10:	7c08004a 	stcvc	0, cr0, [r8], {74}	; 0x4a
    7c14:	0108004a 	tsteq	r8, sl, asr #32
    7c18:	4a7c5000 	bmi	1f1bc20 <_Min_Stack_Size+0x1f1b820>
    7c1c:	4aa80800 	bmi	fea09c24 <_estack+0xde9d9c24>
    7c20:	00040800 	andeq	r0, r4, r0, lsl #16
    7c24:	9f5001f3 	svcls	0x005001f3
	...
    7c30:	08004aa8 	stmdaeq	r0, {r3, r5, r7, r9, fp, lr}
    7c34:	08004acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, lr}
    7c38:	cc510001 	mrrcgt	0, 0, r0, r1, cr1
    7c3c:	fa08004a 	blx	207d6c <_Min_Stack_Size+0x20796c>
    7c40:	0408004a 	streq	r0, [r8], #-74	; 0x4a
    7c44:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    7c48:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7c4c:	00000000 	andeq	r0, r0, r0
    7c50:	004aa800 	subeq	sl, sl, r0, lsl #16
    7c54:	004ac808 	subeq	ip, sl, r8, lsl #16
    7c58:	30000208 	andcc	r0, r0, r8, lsl #4
    7c5c:	004ac89f 	umaaleq	ip, sl, pc, r8	; <UNPREDICTABLE>
    7c60:	004ae208 	subeq	lr, sl, r8, lsl #4
    7c64:	53000108 	movwpl	r0, #264	; 0x108
    7c68:	08004ae4 	stmdaeq	r0, {r2, r5, r6, r7, r9, fp, lr}
    7c6c:	08004ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp, lr}
    7c70:	00530001 	subseq	r0, r3, r1
    7c74:	00000000 	andeq	r0, r0, r0
    7c78:	fc000000 	stc2	0, cr0, [r0], {-0}
    7c7c:	9e08004a 	cdpls	0, 0, cr0, cr8, cr10, {2}
    7c80:	0108004b 	tsteq	r8, fp, asr #32
    7c84:	4b9e5100 	blmi	fe79c08c <_estack+0xde76c08c>
    7c88:	4bb80800 	blmi	fee09c90 <_estack+0xdedd9c90>
    7c8c:	00040800 	andeq	r0, r4, r0, lsl #16
    7c90:	9f5101f3 	svcls	0x005101f3
    7c94:	08004bb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, fp, lr}
    7c98:	08004be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, lr}
    7c9c:	00510001 	subseq	r0, r1, r1
    7ca0:	00000000 	andeq	r0, r0, r0
    7ca4:	fc000000 	stc2	0, cr0, [r0], {-0}
    7ca8:	2008004a 	andcs	r0, r8, sl, asr #32
    7cac:	0208004b 	andeq	r0, r8, #75	; 0x4b
    7cb0:	209f3000 	addscs	r3, pc, r0
    7cb4:	ac08004b 	stcge	0, cr0, [r8], {75}	; 0x4b
    7cb8:	0108004b 	tsteq	r8, fp, asr #32
    7cbc:	4bac5c00 	blmi	feb1ecc4 <_estack+0xdeaeecc4>
    7cc0:	4bb60800 	blmi	fed89cc8 <_estack+0xded59cc8>
    7cc4:	00010800 	andeq	r0, r1, r0, lsl #16
    7cc8:	004bb854 	subeq	fp, fp, r4, asr r8
    7ccc:	004be808 	subeq	lr, fp, r8, lsl #16
    7cd0:	5c000108 	stfpls	f0, [r0], {8}
	...
    7cdc:	08004afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, lr}
    7ce0:	08004b8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, fp, lr}
    7ce4:	9f320002 	svcls	0x00320002
    7ce8:	08004b8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, fp, lr}
    7cec:	08004b92 	stmdaeq	r0, {r1, r4, r7, r8, r9, fp, lr}
    7cf0:	b8550001 	ldmdalt	r5, {r0}^
    7cf4:	e808004b 	stmda	r8, {r0, r1, r3, r6}
    7cf8:	0208004b 	andeq	r0, r8, #75	; 0x4b
    7cfc:	009f3200 	addseq	r3, pc, r0, lsl #4
    7d00:	00000000 	andeq	r0, r0, r0
    7d04:	fc000000 	stc2	0, cr0, [r0], {-0}
    7d08:	8208004a 	andhi	r0, r8, #74	; 0x4a
    7d0c:	0208004b 	andeq	r0, r8, #75	; 0x4b
    7d10:	829f3000 	addshi	r3, pc, #0
    7d14:	8a08004b 	bhi	207e48 <_Min_Stack_Size+0x207a48>
    7d18:	0508004b 	streq	r0, [r8, #-75]	; 0x4b
    7d1c:	31007200 	mrscc	r7, R8_usr
    7d20:	4b8a9f1a 	blmi	fe2af990 <_estack+0xde27f990>
    7d24:	4b920800 	blmi	fe489d2c <_estack+0xde459d2c>
    7d28:	00050800 	andeq	r0, r5, r0, lsl #16
    7d2c:	24380072 	ldrtcs	r0, [r8], #-114	; 0x72
    7d30:	004bb89f 	umaaleq	fp, fp, pc, r8	; <UNPREDICTABLE>
    7d34:	004be808 	subeq	lr, fp, r8, lsl #16
    7d38:	30000208 	andcc	r0, r0, r8, lsl #4
    7d3c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7d40:	00000000 	andeq	r0, r0, r0
    7d44:	004afc00 	subeq	pc, sl, r0, lsl #24
    7d48:	004b3408 	subeq	r3, fp, r8, lsl #8
    7d4c:	31000208 	tstcc	r0, r8, lsl #4
    7d50:	004bc29f 	umaaleq	ip, fp, pc, r2	; <UNPREDICTABLE>
    7d54:	004bc808 	subeq	ip, fp, r8, lsl #16
    7d58:	31000208 	tstcc	r0, r8, lsl #4
    7d5c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7d60:	00000000 	andeq	r0, r0, r0
    7d64:	004afc00 	subeq	pc, sl, r0, lsl #24
    7d68:	004b7a08 	subeq	r7, fp, r8, lsl #20
    7d6c:	30000208 	andcc	r0, r0, r8, lsl #4
    7d70:	004b7a9f 	umaaleq	r7, fp, pc, sl	; <UNPREDICTABLE>
    7d74:	004b8008 	subeq	r8, fp, r8
    7d78:	52000108 	andpl	r0, r0, #8, 2
    7d7c:	08004b82 	stmdaeq	r0, {r1, r7, r8, r9, fp, lr}
    7d80:	08004b8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, fp, lr}
    7d84:	b8520001 	ldmdalt	r2, {r0}^
    7d88:	d808004b 	stmdale	r8, {r0, r1, r3, r6}
    7d8c:	0208004b 	andeq	r0, r8, #75	; 0x4b
    7d90:	d89f3000 	ldmle	pc, {ip, sp}	; <UNPREDICTABLE>
    7d94:	e808004b 	stmda	r8, {r0, r1, r3, r6}
    7d98:	0108004b 	tsteq	r8, fp, asr #32
    7d9c:	00005200 	andeq	r5, r0, r0, lsl #4
    7da0:	00000000 	andeq	r0, r0, r0
    7da4:	4afc0000 	bmi	fff07dac <_estack+0xdfed7dac>
    7da8:	4b660800 	blmi	1989db0 <_Min_Stack_Size+0x19899b0>
    7dac:	00020800 	andeq	r0, r2, r0, lsl #16
    7db0:	4b669f30 	blmi	19afa78 <_Min_Stack_Size+0x19af678>
    7db4:	4b7a0800 	blmi	1e89dbc <_Min_Stack_Size+0x1e899bc>
    7db8:	00010800 	andeq	r0, r1, r0, lsl #16
    7dbc:	004bb856 	subeq	fp, fp, r6, asr r8
    7dc0:	004bc808 	subeq	ip, fp, r8, lsl #16
    7dc4:	30000208 	andcc	r0, r0, r8, lsl #4
    7dc8:	004bc89f 	umaaleq	ip, fp, pc, r8	; <UNPREDICTABLE>
    7dcc:	004bca08 	subeq	ip, fp, r8, lsl #20
    7dd0:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    7ddc:	08004afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, lr}
    7de0:	08004b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, lr}
    7de4:	9f300002 	svcls	0x00300002
    7de8:	08004b48 	stmdaeq	r0, {r3, r6, r8, r9, fp, lr}
    7dec:	08004b4e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, fp, lr}
    7df0:	007a0006 	rsbseq	r0, sl, r6
    7df4:	9f1a3f08 	svcls	0x001a3f08
    7df8:	08004b4e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, fp, lr}
    7dfc:	08004b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, lr}
    7e00:	b85a0001 	ldmdalt	sl, {r0}^
    7e04:	c808004b 	stmdagt	r8, {r0, r1, r3, r6}
    7e08:	0208004b 	andeq	r0, r8, #75	; 0x4b
    7e0c:	c89f3000 	ldmgt	pc, {ip, sp}	; <UNPREDICTABLE>
    7e10:	e808004b 	stmda	r8, {r0, r1, r3, r6}
    7e14:	0108004b 	tsteq	r8, fp, asr #32
    7e18:	00005a00 	andeq	r5, r0, r0, lsl #20
    7e1c:	00000000 	andeq	r0, r0, r0
    7e20:	4afc0000 	bmi	fff07e28 <_estack+0xdfed7e28>
    7e24:	4b400800 	blmi	1009e2c <_Min_Stack_Size+0x1009a2c>
    7e28:	00020800 	andeq	r0, r2, r0, lsl #16
    7e2c:	4b409f30 	blmi	102faf4 <_Min_Stack_Size+0x102f6f4>
    7e30:	4b6c0800 	blmi	1b09e38 <_Min_Stack_Size+0x1b09a38>
    7e34:	00090800 	andeq	r0, r9, r0, lsl #16
    7e38:	c00a0075 	andgt	r0, sl, r5, ror r0
    7e3c:	25361a7f 	ldrcs	r1, [r6, #-2687]!	; 0xa7f
    7e40:	004bb89f 	umaaleq	fp, fp, pc, r8	; <UNPREDICTABLE>
    7e44:	004bc808 	subeq	ip, fp, r8, lsl #16
    7e48:	30000208 	andcc	r0, r0, r8, lsl #4
    7e4c:	004bc89f 	umaaleq	ip, fp, pc, r8	; <UNPREDICTABLE>
    7e50:	004be808 	subeq	lr, fp, r8, lsl #16
    7e54:	75000908 	strvc	r0, [r0, #-2312]	; 0x908
    7e58:	7fc00a00 	svcvc	0x00c00a00
    7e5c:	9f25361a 	svcls	0x0025361a
	...
    7e68:	08004afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, lr}
    7e6c:	08004b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, lr}
    7e70:	9f300002 	svcls	0x00300002
    7e74:	08004b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, lr}
    7e78:	08004b5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, fp, lr}
    7e7c:	00760009 	rsbseq	r0, r6, r9
    7e80:	1a244a4c 	bne	91a7b8 <_Min_Stack_Size+0x91a3b8>
    7e84:	b89f254c 	ldmlt	pc, {r2, r3, r6, r8, sl, sp}	; <UNPREDICTABLE>
    7e88:	c808004b 	stmdagt	r8, {r0, r1, r3, r6}
    7e8c:	0208004b 	andeq	r0, r8, #75	; 0x4b
    7e90:	009f3000 	addseq	r3, pc, r0
    7e94:	00000000 	andeq	r0, r0, r0
    7e98:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    7e9c:	5a08004c 	bpl	207fd4 <_Min_Stack_Size+0x207bd4>
    7ea0:	0108004c 	tsteq	r8, ip, asr #32
    7ea4:	4c5a5100 	ldfmie	f5, [sl], {-0}
    7ea8:	4c5e0800 	mrrcmi	8, 0, r0, lr, cr0
    7eac:	00040800 	andeq	r0, r4, r0, lsl #16
    7eb0:	9f5101f3 	svcls	0x005101f3
	...
    7ebc:	08004cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, lr}
    7ec0:	08004cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, lr}
    7ec4:	f8510001 			; <UNDEFINED> instruction: 0xf8510001
    7ec8:	1e08004c 	cdpne	0, 0, cr0, cr8, cr12, {2}
    7ecc:	0408004d 	streq	r0, [r8], #-77	; 0x4d
    7ed0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    7ed4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7ed8:	00000000 	andeq	r0, r0, r0
    7edc:	004cd800 	subeq	sp, ip, r0, lsl #16
    7ee0:	004cfa08 	subeq	pc, ip, r8, lsl #20
    7ee4:	30000208 	andcc	r0, r0, r8, lsl #4
    7ee8:	004cfa9f 	umaaleq	pc, ip, pc, sl	; <UNPREDICTABLE>
    7eec:	004cfc08 	subeq	pc, ip, r8, lsl #24
    7ef0:	53000108 	movwpl	r0, #264	; 0x108
    7ef4:	08004d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, lr}
    7ef8:	08004d1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, fp, lr}
    7efc:	00530001 	subseq	r0, r3, r1
    7f00:	00000000 	andeq	r0, r0, r0
    7f04:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    7f08:	1608004c 	strne	r0, [r8], -ip, asr #32
    7f0c:	0208004d 	andeq	r0, r8, #77	; 0x4d
    7f10:	169f3000 	ldrne	r3, [pc], r0
    7f14:	1e08004d 	cdpne	0, 0, cr0, cr8, cr13, {2}
    7f18:	0108004d 	tsteq	r8, sp, asr #32
    7f1c:	00005200 	andeq	r5, r0, r0, lsl #4
    7f20:	00000000 	andeq	r0, r0, r0
    7f24:	4d200000 	stcmi	0, cr0, [r0, #-0]
    7f28:	4d220800 	stcmi	8, cr0, [r2, #-0]
    7f2c:	00010800 	andeq	r0, r1, r0, lsl #16
    7f30:	004d2250 	subeq	r2, sp, r0, asr r2
    7f34:	004d2608 	subeq	r2, sp, r8, lsl #12
    7f38:	f3000408 	vshl.u8	d0, d8, d0
    7f3c:	009f5001 	addseq	r5, pc, r1
    7f40:	00000000 	andeq	r0, r0, r0
    7f44:	54000000 	strpl	r0, [r0], #-0
    7f48:	5a08004d 	bpl	208084 <_Min_Stack_Size+0x207c84>
    7f4c:	0108004d 	tsteq	r8, sp, asr #32
    7f50:	4d5a5000 	ldclmi	0, cr5, [sl, #-0]
    7f54:	4d600800 	stclmi	8, cr0, [r0, #-0]
    7f58:	00040800 	andeq	r0, r4, r0, lsl #16
    7f5c:	9f5001f3 	svcls	0x005001f3
	...
    7f68:	08004d54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, lr}
    7f6c:	08004d5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, sl, fp, lr}
    7f70:	9f300002 	svcls	0x00300002
    7f74:	08004d5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, sl, fp, lr}
    7f78:	08004d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, lr}
    7f7c:	00500001 	subseq	r0, r0, r1
    7f80:	00000000 	andeq	r0, r0, r0
    7f84:	60000000 	andvs	r0, r0, r0
    7f88:	6208004d 	andvs	r0, r8, #77	; 0x4d
    7f8c:	0108004d 	tsteq	r8, sp, asr #32
    7f90:	4d625000 	stclmi	0, cr5, [r2, #-0]
    7f94:	4d660800 	stclmi	8, cr0, [r6, #-0]
    7f98:	00040800 	andeq	r0, r4, r0, lsl #16
    7f9c:	9f5001f3 	svcls	0x005001f3
	...
    7fa8:	08004d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, lr}
    7fac:	08004d72 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, fp, lr}
    7fb0:	72510001 	subsvc	r0, r1, #1
    7fb4:	7608004d 	strvc	r0, [r8], -sp, asr #32
    7fb8:	0408004d 	streq	r0, [r8], #-77	; 0x4d
    7fbc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    7fc0:	004d769f 	umaaleq	r7, sp, pc, r6	; <UNPREDICTABLE>
    7fc4:	004d7808 	subeq	r7, sp, r8, lsl #16
    7fc8:	51000108 	tstpl	r0, r8, lsl #2
    7fcc:	08004d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, lr}
    7fd0:	08004d7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, fp, lr}
    7fd4:	01f30004 	mvnseq	r0, r4
    7fd8:	00009f51 	andeq	r9, r0, r1, asr pc
    7fdc:	00000000 	andeq	r0, r0, r0
    7fe0:	4d7c0000 	ldclmi	0, cr0, [ip, #-0]
    7fe4:	4d800800 	stcmi	8, cr0, [r0]
    7fe8:	00010800 	andeq	r0, r1, r0, lsl #16
    7fec:	004d8051 	subeq	r8, sp, r1, asr r0
    7ff0:	004d9a08 	subeq	r9, sp, r8, lsl #20
    7ff4:	f3000408 	vshl.u8	d0, d8, d0
    7ff8:	009f5101 	addseq	r5, pc, r1, lsl #2
    7ffc:	00000000 	andeq	r0, r0, r0
    8000:	7c000000 	stcvc	0, cr0, [r0], {-0}
    8004:	8008004d 	andhi	r0, r8, sp, asr #32
    8008:	0808004d 	stmdaeq	r8, {r0, r2, r3, r6}
    800c:	34007100 	strcc	r7, [r0], #-256	; 0x100
    8010:	1aff0825 	bne	fffca0ac <_estack+0xdff9a0ac>
    8014:	004d809f 	umaaleq	r8, sp, pc, r0	; <UNPREDICTABLE>
    8018:	004d9a08 	subeq	r9, sp, r8, lsl #20
    801c:	f3000908 	vmls.i8	d0, d0, d8
    8020:	25345101 	ldrcs	r5, [r4, #-257]!	; 0x101
    8024:	9f1aff08 	svcls	0x001aff08
	...
    8030:	08004d7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, fp, lr}
    8034:	08004d88 	stmdaeq	r0, {r3, r7, r8, sl, fp, lr}
    8038:	9f300002 	svcls	0x00300002
    803c:	08004d88 	stmdaeq	r0, {r3, r7, r8, sl, fp, lr}
    8040:	08004d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, lr}
    8044:	94510001 	ldrbls	r0, [r1], #-1
    8048:	9608004d 	strls	r0, [r8], -sp, asr #32
    804c:	0108004d 	tsteq	r8, sp, asr #32
    8050:	00005100 	andeq	r5, r0, r0, lsl #2
    8054:	00000000 	andeq	r0, r0, r0
    8058:	4d9c0000 	ldcmi	0, cr0, [ip]
    805c:	4da60800 	stcmi	8, cr0, [r6]
    8060:	00010800 	andeq	r0, r1, r0, lsl #16
    8064:	004da650 	subeq	sl, sp, r0, asr r6
    8068:	004da808 	subeq	sl, sp, r8, lsl #16
    806c:	f3000408 	vshl.u8	d0, d8, d0
    8070:	009f5001 	addseq	r5, pc, r1
    8074:	00000000 	andeq	r0, r0, r0
    8078:	9c000000 	stcls	0, cr0, [r0], {-0}
    807c:	9e08004d 	cdpls	0, 0, cr0, cr8, cr13, {2}
    8080:	0208004d 	andeq	r0, r8, #77	; 0x4d
    8084:	9e9f3000 	cdpls	0, 9, cr3, cr15, cr0, {0}
    8088:	a808004d 	stmdage	r8, {r0, r2, r3, r6}
    808c:	0a08004d 	beq	2081c8 <_Min_Stack_Size+0x207dc8>
    8090:	73007100 	movwvc	r7, #256	; 0x100
    8094:	24401a00 	strbcs	r1, [r0], #-2560	; 0xa00
    8098:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    809c:	00000000 	andeq	r0, r0, r0
    80a0:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    80a4:	aa08004d 	bge	2081e0 <_Min_Stack_Size+0x207de0>
    80a8:	0108004d 	tsteq	r8, sp, asr #32
    80ac:	4daa5100 	stfmis	f5, [sl]
    80b0:	4db00800 	ldcmi	8, cr0, [r0]
    80b4:	00040800 	andeq	r0, r4, r0, lsl #16
    80b8:	9f5101f3 	svcls	0x005101f3
	...
    80c4:	08004db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp, lr}
    80c8:	08004db6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, fp, lr}
    80cc:	b6500001 	ldrblt	r0, [r0], -r1
    80d0:	da08004d 	ble	20820c <_Min_Stack_Size+0x207e0c>
    80d4:	0408004d 	streq	r0, [r8], #-77	; 0x4d
    80d8:	5001f300 	andpl	pc, r1, r0, lsl #6
    80dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    80e0:	00000000 	andeq	r0, r0, r0
    80e4:	004db000 	subeq	fp, sp, r0
    80e8:	004dca08 	subeq	ip, sp, r8, lsl #20
    80ec:	51000108 	tstpl	r0, r8, lsl #2
    80f0:	08004dca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sl, fp, lr}
    80f4:	08004dda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, fp, lr}
    80f8:	01f30004 	mvnseq	r0, r4
    80fc:	00009f51 	andeq	r9, r0, r1, asr pc
    8100:	00000000 	andeq	r0, r0, r0
    8104:	4db00000 	ldcmi	0, cr0, [r0]
    8108:	4dd40800 	ldclmi	8, cr0, [r4]
    810c:	00020800 	andeq	r0, r2, r0, lsl #16
    8110:	4dd49f30 	ldclmi	15, cr9, [r4, #192]	; 0xc0
    8114:	4dda0800 	ldclmi	8, cr0, [sl]
    8118:	00010800 	andeq	r0, r1, r0, lsl #16
    811c:	00000050 	andeq	r0, r0, r0, asr r0
    8120:	00000000 	andeq	r0, r0, r0
    8124:	004db000 	subeq	fp, sp, r0
    8128:	004dca08 	subeq	ip, sp, r8, lsl #20
    812c:	31000a08 	tstcc	r0, r8, lsl #20
    8130:	25340071 	ldrcs	r0, [r4, #-113]!	; 0x71
    8134:	241aff08 	ldrcs	pc, [sl], #-3848	; 0xf08
    8138:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    813c:	00000000 	andeq	r0, r0, r0
    8140:	004db000 	subeq	fp, sp, r0
    8144:	004dc608 	subeq	ip, sp, r8, lsl #12
    8148:	30000208 	andcc	r0, r0, r8, lsl #4
    814c:	004dc69f 	umaaleq	ip, sp, pc, r6	; <UNPREDICTABLE>
    8150:	004dca08 	subeq	ip, sp, r8, lsl #20
    8154:	31000d08 	tstcc	r0, r8, lsl #26
    8158:	25340071 	ldrcs	r0, [r4, #-113]!	; 0x71
    815c:	241aff08 	ldrcs	pc, [sl], #-3848	; 0xf08
    8160:	9f1a0074 	svcls	0x001a0074
	...
    816c:	08004ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, lr}
    8170:	08004de0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, lr}
    8174:	e0510001 	subs	r0, r1, r1
    8178:	ee08004d 	cdp	0, 0, cr0, cr8, cr13, {2}
    817c:	0408004d 	streq	r0, [r8], #-77	; 0x4d
    8180:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    8184:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8188:	00000000 	andeq	r0, r0, r0
    818c:	004e0c00 	subeq	r0, lr, r0, lsl #24
    8190:	004e3a08 	subeq	r3, lr, r8, lsl #20
    8194:	50000108 	andpl	r0, r0, r8, lsl #2
    8198:	08004e3a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl, fp, lr}
    819c:	08004e5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sl, fp, lr}
    81a0:	01f30004 	mvnseq	r0, r4
    81a4:	4e5e9f50 	mrcmi	15, 2, r9, cr14, cr0, {2}
    81a8:	4e760800 	cdpmi	8, 7, cr0, cr6, cr0, {0}
    81ac:	00010800 	andeq	r0, r1, r0, lsl #16
    81b0:	004e7650 	subeq	r7, lr, r0, asr r6
    81b4:	004e8c08 	subeq	r8, lr, r8, lsl #24
    81b8:	f3000408 	vshl.u8	d0, d8, d0
    81bc:	009f5001 	addseq	r5, pc, r1
    81c0:	00000000 	andeq	r0, r0, r0
    81c4:	0c000000 	stceq	0, cr0, [r0], {-0}
    81c8:	3008004e 	andcc	r0, r8, lr, asr #32
    81cc:	0608004e 	streq	r0, [r8], -lr, asr #32
    81d0:	3c000c00 	stccc	12, cr0, [r0], {-0}
    81d4:	309f4001 	addscc	r4, pc, r1
    81d8:	3608004e 	strcc	r0, [r8], -lr, asr #32
    81dc:	0e08004e 	cdpeq	0, 0, cr0, cr8, cr14, {2}
    81e0:	94047000 	strls	r7, [r4], #-0
    81e4:	1aff0801 	bne	fffca1f0 <_estack+0xdff9a1f0>
    81e8:	84f88023 	ldrbthi	r8, [r8], #35	; 0x23
    81ec:	4c9f0480 	cfldrsmi	mvf0, [pc], {128}	; 0x80
    81f0:	5608004e 	strpl	r0, [r8], -lr, asr #32
    81f4:	0c08004e 	stceq	0, cr0, [r8], {78}	; 0x4e
    81f8:	08007500 	stmdaeq	r0, {r8, sl, ip, sp, lr}
    81fc:	80231aff 	strdhi	r1, [r3], -pc	; <UNPREDICTABLE>
    8200:	048084f8 	streq	r8, [r0], #1272	; 0x4f8
    8204:	004e569f 	umaaleq	r5, lr, pc, r6	; <UNPREDICTABLE>
    8208:	004e5e08 	subeq	r5, lr, r8, lsl #28
    820c:	73001008 	movwvc	r1, #8
    8210:	fffb8880 			; <UNDEFINED> instruction: 0xfffb8880
    8214:	1aff087b 	bne	fffca408 <_estack+0xdff9a408>
    8218:	84f88023 	ldrbthi	r8, [r8], #35	; 0x23
    821c:	5e9f0480 	cdppl	4, 9, cr0, cr15, cr0, {4}
    8220:	7408004e 	strvc	r0, [r8], #-78	; 0x4e
    8224:	0e08004e 	cdpeq	0, 0, cr0, cr8, cr14, {2}
    8228:	94047000 	strls	r7, [r4], #-0
    822c:	1aff0801 	bne	fffca238 <_estack+0xdff9a238>
    8230:	84f88023 	ldrbthi	r8, [r8], #35	; 0x23
    8234:	749f0480 	ldrvc	r0, [pc], #1152	; 823c <_Min_Stack_Size+0x7e3c>
    8238:	7608004e 	strvc	r0, [r8], -lr, asr #32
    823c:	1008004e 	andne	r0, r8, lr, asr #32
    8240:	88807300 	stmhi	r0, {r8, r9, ip, sp, lr}
    8244:	087bfffb 	ldmdaeq	fp!, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
    8248:	80231aff 	strdhi	r1, [r3], -pc	; <UNPREDICTABLE>
    824c:	048084f8 	streq	r8, [r0], #1272	; 0x4f8
    8250:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8254:	00000000 	andeq	r0, r0, r0
    8258:	004e9c00 	subeq	r9, lr, r0, lsl #24
    825c:	004ea208 	subeq	sl, lr, r8, lsl #4
    8260:	50000108 	andpl	r0, r0, r8, lsl #2
    8264:	08004ea2 	stmdaeq	r0, {r1, r5, r7, r9, sl, fp, lr}
    8268:	08004eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, lr}
    826c:	01f30004 	mvnseq	r0, r4
    8270:	00009f50 	andeq	r9, r0, r0, asr pc
    8274:	00000000 	andeq	r0, r0, r0
    8278:	4eac0000 	cdpmi	0, 10, cr0, cr12, cr0, {0}
    827c:	4eb80800 	cdpmi	8, 11, cr0, cr8, cr0, {0}
    8280:	00010800 	andeq	r0, r1, r0, lsl #16
    8284:	004eb850 	subeq	fp, lr, r0, asr r8
    8288:	004ec008 	subeq	ip, lr, r8
    828c:	f3000408 	vshl.u8	d0, d8, d0
    8290:	009f5001 	addseq	r5, pc, r1
    8294:	00000000 	andeq	r0, r0, r0
    8298:	ac000000 	stcge	0, cr0, [r0], {-0}
    829c:	b008004e 	andlt	r0, r8, lr, asr #32
    82a0:	0208004e 	andeq	r0, r8, #78	; 0x4e
    82a4:	b09f3000 	addslt	r3, pc, r0
    82a8:	b808004e 	stmdalt	r8, {r1, r2, r3, r6}
    82ac:	0808004e 	stmdaeq	r8, {r1, r2, r3, r6}
    82b0:	73007000 	movwvc	r7, #0
    82b4:	2e301a00 	vaddcs.f32	s2, s0, s0
    82b8:	004eb89f 	umaaleq	fp, lr, pc, r8	; <UNPREDICTABLE>
    82bc:	004ec008 	subeq	ip, lr, r8
    82c0:	f3000908 	vmls.i8	d0, d0, d8
    82c4:	00735001 	rsbseq	r5, r3, r1
    82c8:	9f2e301a 	svcls	0x002e301a
	...
    82d4:	08004ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, lr}
    82d8:	08004ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, lr}
    82dc:	d8500001 	ldmdale	r0, {r0}^
    82e0:	e008004e 	and	r0, r8, lr, asr #32
    82e4:	0408004e 	streq	r0, [r8], #-78	; 0x4e
    82e8:	5001f300 	andpl	pc, r1, r0, lsl #6
    82ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    82f0:	00000000 	andeq	r0, r0, r0
    82f4:	004ecc00 	subeq	ip, lr, r0, lsl #24
    82f8:	004ed008 	subeq	sp, lr, r8
    82fc:	30000208 	andcc	r0, r0, r8, lsl #4
    8300:	004ed09f 	umaaleq	sp, lr, pc, r0	; <UNPREDICTABLE>
    8304:	004ed808 	subeq	sp, lr, r8, lsl #16
    8308:	70000808 	andvc	r0, r0, r8, lsl #16
    830c:	1a007300 	bne	24f14 <_Min_Stack_Size+0x24b14>
    8310:	d89f2e30 	ldmle	pc, {r4, r5, r9, sl, fp, sp}	; <UNPREDICTABLE>
    8314:	e008004e 	and	r0, r8, lr, asr #32
    8318:	0908004e 	stmdbeq	r8, {r1, r2, r3, r6}
    831c:	5001f300 	andpl	pc, r1, r0, lsl #6
    8320:	301a0073 	andscc	r0, sl, r3, ror r0
    8324:	00009f2e 	andeq	r9, r0, lr, lsr #30
    8328:	00000000 	andeq	r0, r0, r0
    832c:	4eec0000 	cdpmi	0, 14, cr0, cr12, cr0, {0}
    8330:	4efa0800 	cdpmi	8, 15, cr0, cr10, cr0, {0}
    8334:	00010800 	andeq	r0, r1, r0, lsl #16
    8338:	004efa50 	subeq	pc, lr, r0, asr sl	; <UNPREDICTABLE>
    833c:	004f3808 	subeq	r3, pc, r8, lsl #16
    8340:	f3000408 	vshl.u8	d0, d8, d0
    8344:	009f5001 	addseq	r5, pc, r1
    8348:	00000000 	andeq	r0, r0, r0
    834c:	84000000 	strhi	r0, [r0], #-0
    8350:	8a08004f 	bhi	208494 <_Min_Stack_Size+0x208094>
    8354:	0108004f 	tsteq	r8, pc, asr #32
    8358:	4f8a5000 	svcmi	0x008a5000
    835c:	50080800 	andpl	r0, r8, r0, lsl #16
    8360:	00040800 	andeq	r0, r4, r0, lsl #16
    8364:	9f5001f3 	svcls	0x005001f3
	...
    8370:	08004f84 	stmdaeq	r0, {r2, r7, r8, r9, sl, fp, lr}
    8374:	08004f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, lr}
    8378:	90510001 	subsls	r0, r1, r1
    837c:	0808004f 	stmdaeq	r8, {r0, r1, r2, r3, r6}
    8380:	04080050 	streq	r0, [r8], #-80	; 0x50
    8384:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    8388:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    838c:	00000000 	andeq	r0, r0, r0
    8390:	00500800 	subseq	r0, r0, r0, lsl #16
    8394:	00501208 	subseq	r1, r0, r8, lsl #4
    8398:	50000108 	andpl	r0, r0, r8, lsl #2
    839c:	08005012 	stmdaeq	r0, {r1, r4, ip, lr}
    83a0:	0800501c 	stmdaeq	r0, {r2, r3, r4, ip, lr}
    83a4:	01f30004 	mvnseq	r0, r4
    83a8:	00009f50 	andeq	r9, r0, r0, asr pc
    83ac:	00000000 	andeq	r0, r0, r0
    83b0:	52300000 	eorspl	r0, r0, #0
    83b4:	523c0800 	eorspl	r0, ip, #0, 16
    83b8:	00010800 	andeq	r0, r1, r0, lsl #16
    83bc:	00523c50 	subseq	r3, r2, r0, asr ip
    83c0:	00524608 	subseq	r4, r2, r8, lsl #12
    83c4:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    83c8:	08005246 	stmdaeq	r0, {r1, r2, r6, r9, ip, lr}
    83cc:	0800524c 	stmdaeq	r0, {r2, r3, r6, r9, ip, lr}
    83d0:	01f30004 	mvnseq	r0, r4
    83d4:	524c9f50 	subpl	r9, ip, #80, 30	; 0x140
    83d8:	524e0800 	subpl	r0, lr, #0, 16
    83dc:	00010800 	andeq	r0, r1, r0, lsl #16
    83e0:	00524e50 	subseq	r4, r2, r0, asr lr
    83e4:	00526008 	subseq	r6, r2, r8
    83e8:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    83f4:	08005230 	stmdaeq	r0, {r4, r5, r9, ip, lr}
    83f8:	08005244 	stmdaeq	r0, {r2, r6, r9, ip, lr}
    83fc:	44510001 	ldrbmi	r0, [r1], #-1
    8400:	46080052 			; <UNDEFINED> instruction: 0x46080052
    8404:	01080052 	qaddeq	r0, r2, r8
    8408:	52465400 	subpl	r5, r6, #0, 8
    840c:	524b0800 	subpl	r0, fp, #0, 16
    8410:	00050800 	andeq	r0, r5, r0, lsl #16
    8414:	012e5003 	teqeq	lr, r3
    8418:	00524b20 	subseq	r4, r2, r0, lsr #22
    841c:	00524c08 	subseq	r4, r2, r8, lsl #24
    8420:	f3000408 	vshl.u8	d0, d8, d0
    8424:	4c9f5101 	ldfmis	f5, [pc], {1}
    8428:	60080052 	andvs	r0, r8, r2, asr r0
    842c:	01080052 	qaddeq	r0, r2, r8
    8430:	00005100 	andeq	r5, r0, r0, lsl #2
    8434:	00000000 	andeq	r0, r0, r0
    8438:	52300000 	eorspl	r0, r0, #0
    843c:	52400800 	subpl	r0, r0, #0, 16
    8440:	00010800 	andeq	r0, r1, r0, lsl #16
    8444:	00524052 	subseq	r4, r2, r2, asr r0
    8448:	00524c08 	subseq	r4, r2, r8, lsl #24
    844c:	f3000408 	vshl.u8	d0, d8, d0
    8450:	4c9f5201 	lfmmi	f5, 4, [pc], {1}
    8454:	52080052 	andpl	r0, r8, #82	; 0x52
    8458:	01080052 	qaddeq	r0, r2, r8
    845c:	52525200 	subspl	r5, r2, #0, 4
    8460:	52600800 	rsbpl	r0, r0, #0, 16
    8464:	00040800 	andeq	r0, r4, r0, lsl #16
    8468:	9f5201f3 	svcls	0x005201f3
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4f495047 	svcmi	0x00495047
       4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
       8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
       c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      10:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
      14:	5478006e 	ldrbtpl	r0, [r8], #-110	; 0x6e
      18:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
      1c:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
      20:	72436369 	subvc	r6, r3, #-1543503871	; 0xa4000001
      24:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0x165
      28:	73615400 	cmnvc	r1, #0, 8
      2c:	6e75466b 	cdpvs	6, 7, cr4, cr5, cr11, {3}
      30:	6f697463 	svcvs	0x00697463
      34:	00745f6e 	rsbseq	r5, r4, lr, ror #30
      38:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
      3c:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
      40:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
      44:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
      48:	54006570 	strpl	r6, [r0], #-1392	; 0x570
      4c:	486b7361 	stmdami	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
      50:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
      54:	00745f65 	rsbseq	r5, r4, r5, ror #30
      58:	61427670 	hvcvs	10080	; 0x2760
      5c:	64416573 	strbvs	r6, [r1], #-1395	; 0x573
      60:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
      64:	50470073 	subpl	r0, r7, r3, ror r0
      68:	4f5f4f49 	svcmi	0x005f4f49
      6c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
      70:	00444f5f 	subeq	r4, r4, pc, asr pc
      74:	654c6c75 	strbvs	r6, [ip, #-3189]	; 0xc75
      78:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
      7c:	79426e49 	stmdbvc	r2, {r0, r3, r6, r9, sl, fp, sp, lr}^
      80:	00736574 	rsbseq	r6, r3, r4, ror r5
      84:	6e69616d 	powvsez	f6, f1, #5.0
      88:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff190 <_estack+0xdffcf190>
      8c:	33746e69 	cmncc	r4, #1680	; 0x690
      90:	00745f32 	rsbseq	r5, r4, r2, lsr pc
      94:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
      98:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
      9c:	4700745f 	smlsdmi	r0, pc, r4, r7	; <UNPREDICTABLE>
      a0:	5f4f4950 	svcpl	0x004f4950
      a4:	7079544f 	rsbsvc	r5, r9, pc, asr #8
      a8:	50470065 	subpl	r0, r7, r5, rrx
      ac:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; ffffff90 <_estack+0xdffcff90>
      b0:	5f65646f 	svcpl	0x0065646f
      b4:	45004641 	strmi	r4, [r0, #-1601]	; 0x641
      b8:	4c42414e 	stfmie	f4, [r2], {78}	; 0x4e
      bc:	50470045 	subpl	r0, r7, r5, asr #32
      c0:	535f4f49 	cmppl	pc, #292	; 0x124
      c4:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
      c8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      cc:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
      d0:	47007469 	strmi	r7, [r0, -r9, ror #8]
      d4:	5f4f4950 	svcpl	0x004f4950
      d8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
      dc:	004e415f 	subeq	r4, lr, pc, asr r1
      e0:	5059544f 	subspl	r5, r9, pc, asr #8
      e4:	2f005245 	svccs	0x00005245
      e8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
      ec:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
      f0:	442f616c 	strtmi	r6, [pc], #-364	; f8 <_Min_Heap_Size+0xf8>
      f4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
      f8:	662f706f 	strtvs	r7, [pc], -pc, rrx
      fc:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
     100:	6f72705f 	svcvs	0x0072705f
     104:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
     108:	3130325f 	teqcc	r0, pc, asr r2
     10c:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
     110:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     114:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
     118:	6f426f74 	svcvs	0x00426f74
     11c:	432f7461 	teqmi	pc, #1627389952	; 0x61000000
     120:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
     124:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
     128:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
     12c:	5f32334d 	svcpl	0x0032334d
     130:	43534944 	cmpmi	r3, #68, 18	; 0x110000
     134:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
     138:	616d2f59 	cmnvs	sp, r9, asr pc
     13c:	632e6e69 	teqvs	lr, #1680	; 0x690
     140:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     144:	79544f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, lr}^
     148:	545f6570 	ldrbpl	r6, [pc], #-1392	; 150 <_Min_Heap_Size+0x150>
     14c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     150:	42006665 	andmi	r6, r0, #105906176	; 0x6500000
     154:	0074616f 	rsbseq	r6, r4, pc, ror #2
     158:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     15c:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     160:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
     164:	69540074 	ldmdbvs	r4, {r2, r4, r5, r6}^
     168:	79546b63 	ldmdbvc	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
     16c:	745f6570 	ldrbvc	r6, [pc], #-1392	; 174 <_Min_Heap_Size+0x174>
     170:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     174:	6f4d5f4f 	svcvs	0x004d5f4f
     178:	4f5f6564 	svcmi	0x005f6564
     17c:	50005455 	andpl	r5, r0, r5, asr r4
     180:	52445055 	subpl	r5, r4, #85	; 0x55
     184:	61547600 	cmpvs	r4, r0, lsl #12
     188:	74536b73 	ldrbvc	r6, [r3], #-2931	; 0xb73
     18c:	53747261 	cmnpl	r4, #268435462	; 0x10000006
     190:	64656863 	strbtvs	r6, [r5], #-2147	; 0x863
     194:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
     198:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     19c:	6f4d5f4f 	svcvs	0x004d5f4f
     1a0:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     1a4:	5342004e 	movtpl	r0, #8270	; 0x204e
     1a8:	00485252 	subeq	r5, r8, r2, asr r2
     1ac:	5f434352 	svcpl	0x00434352
     1b0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     1b4:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     1b8:	6f697461 	svcvs	0x00697461
     1bc:	4f4d006e 	svcmi	0x004d006e
     1c0:	00524544 	subseq	r4, r2, r4, asr #10
     1c4:	4d454d78 	stclmi	13, cr4, [r5, #-480]	; 0xfffffe20
     1c8:	5f59524f 	svcpl	0x0059524f
     1cc:	49474552 	stmdbmi	r7, {r1, r4, r6, r8, sl, lr}^
     1d0:	4d004e4f 	stcmi	14, cr4, [r0, #-316]	; 0xfffffec4
     1d4:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
     1d8:	67655279 			; <UNDEFINED> instruction: 0x67655279
     1dc:	5f6e6f69 	svcpl	0x006e6f69
     1e0:	50470074 	subpl	r0, r7, r4, ror r0
     1e4:	485f4f49 	ldmdami	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     1e8:	5f686769 	svcpl	0x00686769
     1ec:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     1f0:	50470064 	subpl	r0, r7, r4, rrx
     1f4:	4f5f4f49 	svcmi	0x005f4f49
     1f8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     1fc:	0050505f 	subseq	r5, r0, pc, asr r0
     200:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     204:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
     208:	61686320 	cmnvs	r8, r0, lsr #6
     20c:	50470072 	subpl	r0, r7, r2, ror r0
     210:	505f4f49 	subspl	r4, pc, r9, asr #30
     214:	00645075 	rsbeq	r5, r4, r5, ror r0
     218:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     21c:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     220:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
     224:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     228:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     22c:	4700746e 	strmi	r7, [r0, -lr, ror #8]
     230:	5f4f4950 	svcpl	0x004f4950
     234:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     238:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     23c:	6f697461 	svcvs	0x00697461
     240:	5476006e 	ldrbtpl	r0, [r6], #-110	; 0x6e
     244:	446b7361 	strbtmi	r7, [fp], #-865	; 0x361
     248:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     24c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     250:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     254:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     258:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     25c:	76700066 	ldrbtvc	r0, [r0], -r6, rrx
     260:	61726150 	cmnvs	r2, r0, asr r1
     264:	6574656d 	ldrbvs	r6, [r4, #-1389]!	; 0x56d
     268:	47007372 	smlsdxmi	r0, r2, r3, r7
     26c:	5f4f4950 	svcpl	0x004f4950
     270:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
     274:	6942656c 	stmdbvs	r2, {r2, r3, r5, r6, r8, sl, sp, lr}^
     278:	52007374 	andpl	r7, r0, #116, 6	; 0xd0000001
     27c:	415f4343 	cmpmi	pc, r3, asr #6
     280:	50314248 	eorspl	r4, r1, r8, asr #4
     284:	70697265 	rsbvc	r7, r9, r5, ror #4
     288:	6f6c4368 	svcvs	0x006c4368
     28c:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     290:	50470064 	subpl	r0, r7, r4, rrx
     294:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
     298:	5f747361 	svcpl	0x00747361
     29c:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     2a0:	49440064 	stmdbmi	r4, {r2, r5, r6}^
     2a4:	4c424153 	stfmie	f4, [r2], {83}	; 0x53
     2a8:	68730045 	ldmdavs	r3!, {r0, r2, r6}^
     2ac:	2074726f 	rsbscs	r7, r4, pc, ror #4
     2b0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     2b4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
     2b8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
     2bc:	506c7500 	rsbpl	r7, ip, r0, lsl #10
     2c0:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
     2c4:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
     2c8:	50470073 	subpl	r0, r7, r3, ror r0
     2cc:	4c5f4f49 	mrrcmi	15, 4, r4, pc, cr9	; <UNPREDICTABLE>
     2d0:	535f776f 	cmppl	pc, #29097984	; 0x1bc0000
     2d4:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
     2d8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     2dc:	654d5f4f 	strbvs	r5, [sp, #-3919]	; 0xf4f
     2e0:	6d756964 	ldclvs	9, cr6, [r5, #-400]!	; 0xfffffe70
     2e4:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     2e8:	4f006465 	svcmi	0x00006465
     2ec:	45455053 	strbmi	r5, [r5, #-83]	; 0x53
     2f0:	47005244 	strmi	r5, [r0, -r4, asr #4]
     2f4:	4320554e 	teqmi	r0, #327155712	; 0x13800000
     2f8:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
     2fc:	2d20332e 	stccs	3, cr3, [r0, #-184]!	; 0xffffff48
     300:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0x36d
     304:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
     308:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
     30c:	2d20346d 	cfstrscs	mvf3, [r0, #-436]!	; 0xfffffe4c
     310:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
     314:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
     318:	6537766d 	ldrvs	r7, [r7, #-1645]!	; 0x66d
     31c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     320:	6e75746d 	cdpvs	4, 7, cr7, cr5, cr13, {3}
     324:	6f633d65 	svcvs	0x00633d65
     328:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
     32c:	20346d2d 	eorscs	r6, r4, sp, lsr #26
     330:	696c6d2d 	stmdbvs	ip!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     334:	656c7474 	strbvs	r7, [ip, #-1140]!	; 0x474
     338:	646e652d 	strbtvs	r6, [lr], #-1325	; 0x52d
     33c:	206e6169 	rsbcs	r6, lr, r9, ror #2
     340:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     344:	20626d75 	rsbcs	r6, r2, r5, ror sp
     348:	70666d2d 	rsbvc	r6, r6, sp, lsr #26
     34c:	70663d75 	rsbvc	r3, r6, r5, ror sp
     350:	732d3476 	teqvc	sp, #1979711488	; 0x76000000
     354:	31642d70 	smccc	17104	; 0x42d0
     358:	6d2d2036 	stcvs	0, cr2, [sp, #-216]!	; 0xffffff28
     35c:	616f6c66 	cmnvs	pc, r6, ror #24
     360:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
     364:	6f733d69 	svcvs	0x00733d69
     368:	70667466 	rsbvc	r7, r6, r6, ror #8
     36c:	20672d20 	rsbcs	r2, r7, r0, lsr #26
     370:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     374:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
     378:	2d20334f 	stccs	3, cr3, [r0, #-316]!	; 0xfffffec4
     37c:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
     380:	20393963 	eorscs	r3, r9, r3, ror #18
     384:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0x32d
     388:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
     38c:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
     390:	2d747361 	ldclcs	3, cr7, [r4, #-388]!	; 0xfffffe7c
     394:	6874616d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     398:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
     39c:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
     3a0:	2d6e6f69 	stclcs	15, cr6, [lr, #-420]!	; 0xfffffe5c
     3a4:	74636573 	strbtvc	r6, [r3], #-1395	; 0x573
     3a8:	736e6f69 	cmnvc	lr, #420	; 0x1a4
     3ac:	64662d20 	strbtvs	r2, [r6], #-3360	; 0xd20
     3b0:	2d617461 	cfstrdcs	mvd7, [r1, #-388]!	; 0xfffffe7c
     3b4:	74636573 	strbtvc	r6, [r3], #-1395	; 0x573
     3b8:	736e6f69 	cmnvc	lr, #420	; 0x1a4
     3bc:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
     3c0:	6f632d6f 	svcvs	0x00632d6f
     3c4:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
     3c8:	702d2d20 	eorvc	r2, sp, r0, lsr #26
     3cc:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
     3d0:	78616d20 	stmdavc	r1!, {r5, r8, sl, fp, sp, lr}^
     3d4:	6c6e692d 	stclvs	9, cr6, [lr], #-180	; 0xffffff4c
     3d8:	2d656e69 	stclcs	14, cr6, [r5, #-420]!	; 0xfffffe5c
     3dc:	6e736e69 	cdpvs	14, 7, cr6, cr3, cr9, {3}
     3e0:	69732d73 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
     3e4:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0x76e
     3e8:	3030313d 	eorscc	r3, r0, sp, lsr r1
     3ec:	42550030 	subsmi	r0, r5, #48	; 0x30
     3f0:	54657361 	strbtpl	r7, [r5], #-865	; 0x361
     3f4:	5f657079 	svcpl	0x00657079
     3f8:	50470074 	subpl	r0, r7, r4, ror r0
     3fc:	70534f49 	subsvc	r4, r3, r9, asr #30
     400:	5f646565 	svcpl	0x00646565
     404:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     408:	00666544 	rsbeq	r6, r6, r4, asr #10
     40c:	4f495047 	svcmi	0x00495047
     410:	5075505f 	rsbspl	r5, r5, pc, asr r0
     414:	4f445f64 	svcmi	0x00445f64
     418:	49004e57 	stmdbmi	r0, {r0, r1, r2, r4, r6, r9, sl, fp, lr}
     41c:	525f4d54 	subspl	r4, pc, #84, 26	; 0x1500
     420:	66754278 			; <UNDEFINED> instruction: 0x66754278
     424:	00726566 	rsbseq	r6, r2, r6, ror #10
     428:	4f495047 	svcmi	0x00495047
     42c:	5075505f 	rsbspl	r5, r5, pc, asr r0
     430:	4f4e5f64 	svcmi	0x004e5f64
     434:	4c4c5550 	cfstr64mi	mvdx5, [ip], {80}	; 0x50
     438:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     43c:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     440:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     444:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     448:	00657275 	rsbeq	r7, r5, r5, ror r2
     44c:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
     450:	5f323374 	svcpl	0x00323374
     454:	74530074 	ldrbvc	r0, [r3], #-116	; 0x74
     458:	546b6361 	strbtpl	r6, [fp], #-865	; 0x361
     45c:	5f657079 	svcpl	0x00657079
     460:	50470074 	subpl	r0, r7, r4, ror r0
     464:	75504f49 	ldrbvc	r4, [r0, #-3913]	; 0xf49
     468:	545f6450 	ldrbpl	r6, [pc], #-1104	; 470 <_Min_Stack_Size+0x70>
     46c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     470:	47006665 	strmi	r6, [r0, -r5, ror #12]
     474:	4d4f4950 	stclmi	9, cr4, [pc, #-320]	; 33c <_Min_Heap_Size+0x33c>
     478:	5f65646f 	svcpl	0x0065646f
     47c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     480:	00666544 	rsbeq	r6, r6, r4, asr #10
     484:	4f495047 	svcmi	0x00495047
     488:	5075505f 	rsbspl	r5, r5, pc, asr r0
     48c:	50555f64 	subspl	r5, r5, r4, ror #30
     490:	6e754600 	cdpvs	6, 7, cr4, cr5, cr0, {0}
     494:	6f697463 	svcvs	0x00697463
     498:	536c616e 	cmnpl	ip, #-2147483621	; 0x8000001b
     49c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     4a0:	52534200 	subspl	r4, r3, #0, 4
     4a4:	4c004c52 	stcmi	12, cr4, [r0], {82}	; 0x52
     4a8:	00524b43 	subseq	r4, r2, r3, asr #22
     4ac:	4f495047 	svcmi	0x00495047
     4b0:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 4b8 <_Min_Stack_Size+0xb8>
     4b4:	48410065 	stmdami	r1, {r0, r2, r5, r6}^
     4b8:	504c3142 	subpl	r3, ip, r2, asr #2
     4bc:	00524e45 	subseq	r4, r2, r5, asr #28
     4c0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 40c <_Min_Stack_Size+0xc>
     4c4:	656c2f65 	strbvs	r2, [ip, #-3941]!	; 0xf65
     4c8:	2f616c69 	svccs	0x00616c69
     4cc:	6b736544 	blvs	1cd99e4 <_Min_Stack_Size+0x1cd95e4>
     4d0:	2f706f74 	svccs	0x00706f74
     4d4:	616e6966 	cmnvs	lr, r6, ror #18
     4d8:	72705f6c 	rsbsvc	r5, r0, #108, 30	; 0x1b0
     4dc:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
     4e0:	30325f74 	eorscc	r5, r2, r4, ror pc
     4e4:	6d653531 	cfstr64vs	mvdx3, [r5, #-196]!	; 0xffffff3c
     4e8:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
     4ec:	612f6465 	teqvs	pc, r5, ror #8
     4f0:	426f7475 	rsbmi	r7, pc, #1962934272	; 0x75000000
     4f4:	2f74616f 	svccs	0x0074616f
     4f8:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
     4fc:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 3f0 <_Min_Heap_Size+0x3f0>
     500:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
     504:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     508:	5349445f 	movtpl	r4, #37983	; 0x945f
     50c:	45564f43 	ldrbmi	r4, [r6, #-3907]	; 0xf43
     510:	732f5952 	teqvc	pc, #1343488	; 0x148000
     514:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     518:	732f7075 	teqvc	pc, #117	; 0x75
     51c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     520:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xf6d
     524:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     528:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     52c:	4c500063 	mrrcmi	0, 6, r0, r0, cr3	; <UNPREDICTABLE>
     530:	4746434c 	strbmi	r4, [r6, -ip, asr #6]
     534:	50410052 	subpl	r0, r1, r2, asr r0
     538:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
     53c:	41005254 	tstmi	r0, r4, asr r2
     540:	45324248 	ldrmi	r4, [r2, #-584]!	; 0x248
     544:	4100524e 	tstmi	r0, lr, asr #4
     548:	52324248 	eorspl	r4, r2, #72, 4	; 0x80000004
     54c:	00525453 	subseq	r5, r2, r3, asr r4
     550:	52434442 	subpl	r4, r3, #1107296256	; 0x42000000
     554:	4c4c5000 	marmi	acc0, r5, ip
     558:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     55c:	00524746 	subseq	r4, r2, r6, asr #14
     560:	5f525750 	svcpl	0x00525750
     564:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     568:	00666544 	rsbeq	r6, r6, r4, asr #10
     56c:	47435353 	smlsldmi	r5, r3, r3, r3
     570:	53480052 	movtpl	r0, #32850	; 0x8052
     574:	61745345 	cmnvs	r4, r5, asr #6
     578:	00737574 	rsbseq	r7, r3, r4, ror r5
     57c:	49555043 	ldmdbmi	r5, {r0, r1, r6, ip, lr}^
     580:	48410044 	stmdami	r1, {r2, r6}^
     584:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
     588:	41005254 	tstmi	r0, r4, asr r2
     58c:	4c334248 	lfmmi	f4, 4, [r3], #-288	; 0xfffffee0
     590:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     594:	53455200 	movtpl	r5, #20992	; 0x5200
     598:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     59c:	53003344 	movwpl	r3, #836	; 0x344
     5a0:	545f4243 	ldrbpl	r4, [pc], #-579	; 5a8 <_Min_Stack_Size+0x1a8>
     5a4:	00657079 	rsbeq	r7, r5, r9, ror r0
     5a8:	31425041 	cmpcc	r2, r1, asr #32
     5ac:	00524e45 	subseq	r4, r2, r5, asr #28
     5b0:	434b4344 	movtmi	r4, #45892	; 0xb344
     5b4:	00524746 	subseq	r4, r2, r6, asr #14
     5b8:	52534349 	subspl	r4, r3, #603979777	; 0x24000001
     5bc:	54504f00 	ldrbpl	r4, [r0], #-3840	; 0xf00
     5c0:	5259454b 	subspl	r4, r9, #314572800	; 0x12c00000
     5c4:	41464200 	mrsmi	r4, (UNDEF: 102)
     5c8:	43520052 	cmpmi	r2, #82	; 0x52
     5cc:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     5d0:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     5d4:	50410066 	subpl	r0, r1, r6, rrx
     5d8:	53523242 	cmppl	r2, #536870916	; 0x20000004
     5dc:	5f005254 	svcpl	0x00005254
     5e0:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     5e4:	745f3874 	ldrbvc	r3, [pc], #-2164	; 5ec <_Min_Stack_Size+0x1ec>
     5e8:	53464300 	movtpl	r4, #25344	; 0x6300
     5ec:	504f0052 	subpl	r0, pc, r2, asr r0	; <UNPREDICTABLE>
     5f0:	31524354 	cmpcc	r2, r4, asr r3
     5f4:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     5f8:	72756f73 	rsbsvc	r6, r5, #460	; 0x1cc
     5fc:	41006563 	tstmi	r0, r3, ror #10
     600:	45334248 	ldrmi	r4, [r3, #-584]!	; 0x248
     604:	7000524e 	andvc	r5, r0, lr, asr #4
     608:	006d6c6c 	rsbeq	r6, sp, ip, ror #24
     60c:	706c6c70 	rsbvc	r6, ip, r0, ror ip
     610:	52494100 	subpl	r4, r9, #0, 2
     614:	41005243 	tstmi	r0, r3, asr #4
     618:	45324250 	ldrmi	r4, [r2, #-592]!	; 0x250
     61c:	5300524e 	movwpl	r5, #590	; 0x24e
     620:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     624:	6f437055 	svcvs	0x00437055
     628:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
     62c:	48530072 	ldmdami	r3, {r1, r4, r5, r6}^
     630:	00525343 	subseq	r5, r2, r3, asr #6
     634:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
     638:	6f436d65 	svcvs	0x00436d65
     63c:	6c436572 	cfstr64vs	mvdx6, [r3], {114}	; 0x72
     640:	556b636f 	strbpl	r6, [fp, #-879]!	; 0x36f
     644:	74616470 	strbtvc	r6, [r1], #-1136	; 0x470
     648:	4d4d0065 	stclmi	0, cr0, [sp, #-404]	; 0xfffffe6c
     64c:	00524146 	subseq	r4, r2, r6, asr #2
     650:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
     654:	6e496d65 	cdpvs	13, 4, cr6, cr9, cr5, {3}
     658:	41007469 	tstmi	r0, r9, ror #8
     65c:	4c314250 	lfmmi	f4, 4, [r1], #-320	; 0xfffffec0
     660:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     664:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     668:	006f6376 	rsbeq	r6, pc, r6, ror r3	; <UNPREDICTABLE>
     66c:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
     670:	41534900 	cmpmi	r3, r0, lsl #18
     674:	46440052 			; <UNDEFINED> instruction: 0x46440052
     678:	53005253 	movwpl	r5, #595	; 0x253
     67c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     680:	726f436d 	rsbvc	r4, pc, #-1275068415	; 0xb4000001
     684:	6f6c4365 	svcvs	0x006c4365
     688:	48006b63 	stmdami	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     68c:	00525346 	subseq	r5, r2, r6, asr #6
     690:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     694:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     698:	4d4d0052 	stclmi	0, cr0, [sp, #-328]	; 0xfffffeb8
     69c:	52005246 	andpl	r5, r0, #1610612740	; 0x60000004
     6a0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     6a4:	30444556 	subcc	r4, r4, r6, asr r5
     6a8:	53455200 	movtpl	r5, #20992	; 0x5200
     6ac:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     6b0:	52003144 	andpl	r3, r0, #68, 2
     6b4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     6b8:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
     6bc:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
     6c0:	43737953 	cmnmi	r3, #1359872	; 0x14c000
     6c4:	6b636f6c 	blvs	18dc47c <_Min_Stack_Size+0x18dc07c>
     6c8:	53455200 	movtpl	r5, #20992	; 0x5200
     6cc:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     6d0:	52003444 	andpl	r3, r0, #68, 8	; 0x44000000
     6d4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     6d8:	35444556 	strbcc	r4, [r4, #-1366]	; 0x556
     6dc:	53455200 	movtpl	r5, #20992	; 0x5200
     6e0:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     6e4:	41003644 	tstmi	r0, r4, asr #12
     6e8:	45314248 	ldrmi	r4, [r1, #-584]!	; 0x248
     6ec:	4100524e 	tstmi	r0, lr, asr #4
     6f0:	00525346 	subseq	r5, r2, r6, asr #6
     6f4:	33424841 	movtcc	r4, #10305	; 0x2841
     6f8:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     6fc:	414c4600 	cmpmi	ip, r0, lsl #12
     700:	545f4853 	ldrbpl	r4, [pc], #-2131	; 708 <_Min_Stack_Size+0x308>
     704:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     708:	50006665 	andpl	r6, r0, r5, ror #12
     70c:	41534c4c 	cmpmi	r3, ip, asr #24
     710:	47464349 	strbmi	r4, [r6, -r9, asr #6]
     714:	50430052 	subpl	r0, r3, r2, asr r0
     718:	00524341 	subseq	r4, r2, r1, asr #6
     71c:	32425041 	subcc	r5, r2, #65	; 0x41
     720:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     724:	504f0052 	subpl	r0, pc, r2, asr r0	; <UNPREDICTABLE>
     728:	00524354 	subseq	r4, r2, r4, asr r3
     72c:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!	; 0xfffffecc
     730:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
     734:	61485f65 	cmpvs	r8, r5, ror #30
     738:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     73c:	73550072 	cmpvc	r5, #114	; 0x72
     740:	46656761 	strbtmi	r6, [r5], -r1, ror #14
     744:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     748:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
     74c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     750:	73754200 	cmnvc	r5, #0, 4
     754:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
     758:	61485f74 	hvcvs	34292	; 0x85f4
     75c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     760:	682f0072 	stmdavs	pc!, {r1, r4, r5, r6}	; <UNPREDICTABLE>
     764:	2f656d6f 	svccs	0x00656d6f
     768:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
     76c:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
     770:	6f746b73 	svcvs	0x00746b73
     774:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
     778:	5f6c616e 	svcpl	0x006c616e
     77c:	6a6f7270 	bvs	1bdd144 <_Min_Stack_Size+0x1bdcd44>
     780:	5f746365 	svcpl	0x00746365
     784:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
     788:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     78c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     790:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
     794:	616f426f 	cmnvs	pc, pc, ror #4
     798:	4f432f74 	svcmi	0x00432f74
     79c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
     7a0:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
     7a4:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
     7a8:	445f3233 	ldrbmi	r3, [pc], #-563	; 7b0 <_Min_Stack_Size+0x3b0>
     7ac:	4f435349 	svcmi	0x00435349
     7b0:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
     7b4:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     7b8:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     7bc:	695f7878 	ldmdbvs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
     7c0:	00632e74 	rsbeq	r2, r3, r4, ror lr
     7c4:	64726148 	ldrbtvs	r6, [r2], #-328	; 0x148
     7c8:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
     7cc:	61485f74 	hvcvs	34292	; 0x85f4
     7d0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     7d4:	4d4e0072 	stclmi	0, cr0, [lr, #-456]	; 0xfffffe38
     7d8:	61485f49 	cmpvs	r8, r9, asr #30
     7dc:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     7e0:	65440072 	strbvs	r0, [r4, #-114]	; 0x72
     7e4:	4d677562 	cfstr64mi	mvdx7, [r7, #-392]!	; 0xfffffe78
     7e8:	485f6e6f 	ldmdami	pc, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     7ec:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     7f0:	50007265 	andpl	r7, r0, r5, ror #4
     7f4:	495f5050 	ldmdbmi	pc, {r4, r6, ip, lr}^	; <UNPREDICTABLE>
     7f8:	61485152 	cmpvs	r8, r2, asr r1
     7fc:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     800:	78700072 	ldmdavc	r0!, {r1, r4, r5, r6}^
     804:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     808:	73694c74 	cmnvc	r9, #116, 24	; 0x7400
     80c:	43780074 	cmnmi	r8, #116	; 0x74
     810:	756f526f 	strbvc	r5, [pc, #-623]!	; 5a9 <_Min_Stack_Size+0x1a9>
     814:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     818:	61657243 	cmnvs	r5, r3, asr #4
     81c:	70006574 	andvc	r6, r0, r4, ror r5
     820:	68437672 	stmdavs	r3, {r1, r4, r5, r6, r9, sl, ip, sp, lr}^
     824:	446b6365 	strbtmi	r6, [fp], #-869	; 0x365
     828:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     82c:	694c6465 	stmdbvs	ip, {r0, r2, r5, r6, sl, sp, lr}^
     830:	70007473 	andvc	r7, r0, r3, ror r4
     834:	526f4378 	rsbpl	r4, pc, #120, 6	; 0xe0000001
     838:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     83c:	7000656e 	andvc	r6, r0, lr, ror #10
     840:	526f4378 	rsbpl	r4, pc, #120, 6	; 0xe0000001
     844:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     848:	6f43656e 	svcvs	0x0043656e
     84c:	70006564 	andvc	r6, r0, r4, ror #10
     850:	6c654478 	cfstrdvs	mvd4, [r5], #-480	; 0xfffffe20
     854:	64657961 	strbtvs	r7, [r5], #-2401	; 0x961
     858:	6f526f43 	svcvs	0x00526f43
     85c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     860:	73694c65 	cmnvc	r9, #25856	; 0x6500
     864:	6c750074 	ldclvs	0, cr0, [r5], #-464	; 0xfffffe30
     868:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
     86c:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
     870:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     874:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
     878:	6b73614d 	blvs	1cd8db4 <_Min_Stack_Size+0x1cd89b4>
     87c:	694c7600 	stmdbvs	ip, {r9, sl, ip, sp, lr}^
     880:	6e497473 	mcrvs	4, 2, r7, cr9, cr3, {3}
     884:	61697469 	cmnvs	r9, r9, ror #8
     888:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0x96c
     88c:	694c7600 	stmdbvs	ip, {r9, sl, ip, sp, lr}^
     890:	6e497473 	mcrvs	4, 2, r7, cr9, cr3, {3}
     894:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0x573
     898:	7a697300 	bvc	1a5d4a0 <_Min_Stack_Size+0x1a5d0a0>
     89c:	00745f65 	rsbseq	r5, r4, r5, ror #30
     8a0:	72507870 	subsvc	r7, r0, #112, 16	; 0x700000
     8a4:	6f697665 	svcvs	0x00697665
     8a8:	78007375 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
     8ac:	6f526f43 	svcvs	0x00526f43
     8b0:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     8b4:	6d655265 	sfmvs	f5, 2, [r5, #-404]!	; 0xfffffe6c
     8b8:	4665766f 	strbtmi	r7, [r5], -pc, ror #12
     8bc:	456d6f72 	strbmi	r6, [sp, #-3954]!	; 0xf72
     8c0:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     8c4:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     8c8:	6f682f00 	svcvs	0x00682f00
     8cc:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 720 <_Min_Stack_Size+0x320>
     8d0:	616c6965 	cmnvs	ip, r5, ror #18
     8d4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     8d8:	706f746b 	rsbvc	r7, pc, fp, ror #8
     8dc:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
     8e0:	705f6c61 	subsvc	r6, pc, r1, ror #24
     8e4:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
     8e8:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
     8ec:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
     8f0:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
     8f4:	2f646564 	svccs	0x00646564
     8f8:	6f747561 	svcvs	0x00747561
     8fc:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
     900:	6f72632f 	svcvs	0x0072632f
     904:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     908:	00632e65 	rsbeq	r2, r3, r5, ror #28
     90c:	6e497875 	mcrvs	8, 2, r7, cr9, cr5, {3}
     910:	00786564 	rsbseq	r6, r8, r4, ror #10
     914:	6f437870 	svcvs	0x00437870
     918:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xf52
     91c:	46656e69 	strbtmi	r6, [r5], -r9, ror #28
     920:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
     924:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     928:	6e557870 	mrcvs	8, 2, r7, cr5, cr0, {3}
     92c:	636f6c62 	cmnvs	pc, #25088	; 0x6200
     930:	4364656b 	cmnmi	r4, #448790528	; 0x1ac00000
     934:	00424352 	subeq	r4, r2, r2, asr r3
     938:	6e654778 	mcrvs	7, 3, r4, cr5, cr8, {3}
     93c:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
     940:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     944:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     948:	4f767000 	svcmi	0x00767000
     94c:	72656e77 	rsbvc	r6, r5, #1904	; 0x770
     950:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
     954:	54736b63 	ldrbtpl	r6, [r3], #-2915	; 0xb63
     958:	6c65446f 	cfstrdvs	mvd4, [r5], #-444	; 0xfffffe44
     95c:	70007961 	andvc	r7, r0, r1, ror #18
     960:	6d655478 	cfstrdvs	mvd5, [r5, #-480]!	; 0xfffffe20
     964:	50760070 	rsbspl	r0, r6, r0, ror r0
     968:	4374726f 	cmnmi	r4, #-268435450	; 0xf0000006
     96c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     970:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
     974:	70757272 	rsbsvc	r7, r5, r2, ror r2
     978:	73614d74 	cmnvc	r1, #116, 26	; 0x1d00
     97c:	694c006b 	stmdbvs	ip, {r0, r1, r3, r5, r6}^
     980:	745f7473 	ldrbvc	r7, [pc], #-1139	; 988 <_Min_Stack_Size+0x588>
     984:	6e694d00 	cdpvs	13, 6, cr4, cr9, cr0, {0}
     988:	73694c69 	cmnvc	r9, #26880	; 0x6900
     98c:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0x974
     990:	00745f6d 	rsbseq	r5, r4, sp, ror #30
     994:	6f437870 	svcvs	0x00437870
     998:	4c74736e 	ldclmi	3, cr7, [r4], #-440	; 0xfffffe48
     99c:	00747369 	rsbseq	r7, r4, r9, ror #6
     9a0:	53494c78 	movtpl	r4, #40056	; 0x9c78
     9a4:	49780054 	ldmdbmi	r8!, {r2, r4, r6}^
     9a8:	566d6574 			; <UNDEFINED> instruction: 0x566d6574
     9ac:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
     9b0:	43787000 	cmnmi	r8, #0
     9b4:	00424352 	subeq	r4, r2, r2, asr r3
     9b8:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     9bc:	7465476b 	strbtvc	r4, [r5], #-1899	; 0x76b
     9c0:	6b636954 	blvs	18daf18 <_Min_Stack_Size+0x18dab18>
     9c4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     9c8:	4c780074 	ldclmi	0, cr0, [r8], #-464	; 0xfffffe30
     9cc:	5f545349 	svcpl	0x00545349
     9d0:	4d455449 	cfstrdmi	mvd5, [r5, #-292]	; 0xfffffedc
     9d4:	76727000 	ldrbtvc	r7, [r2], -r0
     9d8:	63656843 	cmnvs	r5, #4390912	; 0x430000
     9dc:	6e65506b 	cdpvs	0, 6, cr5, cr5, cr11, {3}
     9e0:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     9e4:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
     9e8:	73694c79 	cmnvc	r9, #30976	; 0x7900
     9ec:	6f430074 	svcvs	0x00430074
     9f0:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xf52
     9f4:	48656e69 	stmdami	r5!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     9f8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     9fc:	00745f65 	rsbseq	r5, r4, r5, ror #30
     a00:	526f4376 	rsbpl	r4, pc, #-671088639	; 0xd8000001
     a04:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     a08:	6353656e 	cmpvs	r3, #461373440	; 0x1b800000
     a0c:	75646568 	strbvc	r6, [r4, #-1384]!	; 0x568
     a10:	7500656c 	strvc	r6, [r0, #-1388]	; 0x56c
     a14:	61745378 	cmnvs	r4, r8, ror r3
     a18:	78006574 	stmdavc	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
     a1c:	73736150 	cmnvc	r3, #80, 2
     a20:	69546465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, sp, lr}^
     a24:	00736b63 	rsbseq	r6, r3, r3, ror #22
     a28:	75437870 	strbvc	r7, [r3, #-2160]	; 0x870
     a2c:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     a30:	526f4374 	rsbpl	r4, pc, #116, 6	; 0xd0000001
     a34:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     a38:	7000656e 	andvc	r6, r0, lr, ror #10
     a3c:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     a40:	6e696174 	mcrvs	1, 3, r6, cr9, cr4, {3}
     a44:	78007265 	stmdavc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     a48:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
     a4c:	52676e69 	rsbpl	r6, r7, #1680	; 0x690
     a50:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     a54:	6f526f43 	svcvs	0x00526f43
     a58:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     a5c:	73694c65 	cmnvc	r9, #25856	; 0x6500
     a60:	43760074 	cmnmi	r6, #116	; 0x74
     a64:	756f526f 	strbvc	r5, [pc, #-623]!	; 7fd <_Min_Stack_Size+0x3fd>
     a68:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     a6c:	54646441 	strbtpl	r6, [r4], #-1089	; 0x441
     a70:	6c65446f 	cfstrdvs	mvd4, [r5], #-444	; 0xfffffe44
     a74:	64657961 	strbtvs	r7, [r5], #-2401	; 0x961
     a78:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     a7c:	43726300 	cmnmi	r2, #0, 6
     a80:	554f524f 	strbpl	r5, [pc, #-591]	; 839 <_Min_Stack_Size+0x439>
     a84:	454e4954 	strbmi	r4, [lr, #-2388]	; 0x954
     a88:	444f435f 	strbmi	r4, [pc], #-863	; a90 <_Min_Stack_Size+0x690>
     a8c:	78750045 	ldmdavc	r5!, {r0, r2, r6}^
     a90:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     a94:	6f6d6552 	svcvs	0x006d6552
     a98:	70006576 	andvc	r6, r0, r6, ror r5
     a9c:	78654e78 	stmdavc	r5!, {r3, r4, r5, r6, r9, sl, fp, lr}^
     aa0:	52430074 	subpl	r0, r3, #116	; 0x74
     aa4:	745f4243 	ldrbvc	r4, [pc], #-579	; aac <_Min_Stack_Size+0x6ac>
     aa8:	4f787000 	svcmi	0x00787000
     aac:	66726576 			; <UNDEFINED> instruction: 0x66726576
     ab0:	44776f6c 	ldrbtmi	r6, [r7], #-3948	; 0xf6c
     ab4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     ab8:	6f436465 	svcvs	0x00436465
     abc:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xf52
     ac0:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
     ac4:	00747369 	rsbseq	r7, r4, r9, ror #6
     ac8:	73694c76 	cmnvc	r9, #30208	; 0x7600
     acc:	736e4974 	cmnvc	lr, #116, 18	; 0x1d0000
     ad0:	45747265 	ldrbmi	r7, [r4, #-613]!	; 0x265
     ad4:	6300646e 	movwvs	r6, #1134	; 0x46e
     ad8:	6f43726f 	svcvs	0x0043726f
     adc:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xf52
     ae0:	43656e69 	cmnmi	r5, #1680	; 0x690
     ae4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     ae8:	6c426c6f 	mcrrvs	12, 6, r6, r2, cr15
     aec:	006b636f 	rsbeq	r6, fp, pc, ror #6
     af0:	6c654478 	cfstrdvs	mvd4, [r5], #-480	; 0xfffffe20
     af4:	64657961 	strbtvs	r7, [r5], #-2401	; 0x961
     af8:	6f526f43 	svcvs	0x00526f43
     afc:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     b00:	73694c65 	cmnvc	r9, #25856	; 0x6500
     b04:	78003174 	stmdavc	r0, {r2, r4, r5, r6, r8, ip, sp}
     b08:	616c6544 	cmnvs	ip, r4, asr #10
     b0c:	43646579 	cmnmi	r4, #507510784	; 0x1e400000
     b10:	756f526f 	strbvc	r5, [pc, #-623]!	; 8a9 <_Min_Stack_Size+0x4a9>
     b14:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     b18:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     b1c:	78750032 	ldmdavc	r5!, {r1, r4, r5}^
     b20:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
     b24:	664f7265 	strbvs	r7, [pc], -r5, ror #4
     b28:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     b2c:	72700073 	rsbsvc	r0, r0, #115	; 0x73
     b30:	696e4976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, lr}^
     b34:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
     b38:	43657369 	cmnmi	r5, #-1543503871	; 0xa4000001
     b3c:	756f526f 	strbvc	r5, [pc, #-623]!	; 8d5 <_Min_Stack_Size+0x4d5>
     b40:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     b44:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     b48:	78700073 	ldmdavc	r0!, {r0, r1, r4, r5, r6}^
     b4c:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
     b50:	526f4379 	rsbpl	r4, pc, #-469762047	; 0xe4000001
     b54:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     b58:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     b5c:	00737473 	rsbseq	r7, r3, r3, ror r4
     b60:	73614c78 	cmnvc	r1, #120, 24	; 0x7800
     b64:	63695474 	cmnvs	r9, #116, 8	; 0x74000000
     b68:	756f436b 	strbvc	r4, [pc, #-875]!	; 805 <_Min_Stack_Size+0x405>
     b6c:	7800746e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     b70:	6f526f43 	svcvs	0x00526f43
     b74:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     b78:	63695465 	cmnvs	r9, #1694498816	; 0x65000000
     b7c:	756f436b 	strbvc	r4, [pc, #-875]!	; 819 <_Min_Stack_Size+0x419>
     b80:	7500746e 	strvc	r7, [r0, #-1134]	; 0x46e
     b84:	706f5478 	rsbvc	r5, pc, r8, ror r4	; <UNPREDICTABLE>
     b88:	6f526f43 	svcvs	0x00526f43
     b8c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     b90:	61655265 	cmnvs	r5, r5, ror #4
     b94:	72507964 	subsvc	r7, r0, #100, 18	; 0x190000
     b98:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     b9c:	75007974 	strvc	r7, [r0, #-2420]	; 0x974
     ba0:	69725078 	ldmdbvs	r2!, {r3, r4, r5, r6, ip, lr}^
     ba4:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     ba8:	78700079 	ldmdavc	r0!, {r0, r3, r4, r5, r6}^
     bac:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xe49
     bb0:	4d780078 	ldclmi	0, cr0, [r8, #-480]!	; 0xfffffe20
     bb4:	5f494e49 	svcpl	0x00494e49
     bb8:	5453494c 	ldrbpl	r4, [r3], #-2380	; 0x94c
     bbc:	4554495f 	ldrbmi	r4, [r4, #-2399]	; 0x95f
     bc0:	7670004d 	ldrbtvc	r0, [r0], -sp, asr #32
     bc4:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
     bc8:	6c6c614d 	stfvse	f6, [ip], #-308	; 0xfffffecc
     bcc:	7800636f 	stmdavc	r0, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}
     bd0:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
     bd4:	61576f54 	cmpvs	r7, r4, asr pc
     bd8:	7600656b 	strvc	r6, [r0], -fp, ror #10
     bdc:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     be0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     be4:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     be8:	74496573 	strbvc	r6, [r9], #-1395	; 0x573
     bec:	70006d65 	andvc	r6, r0, r5, ror #26
     bf0:	73694c78 	cmnvc	r9, #120, 24	; 0x7800
     bf4:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0x974
     bf8:	7875006d 	ldmdavc	r5!, {r0, r2, r3, r5, r6}^
     bfc:	6b736154 	blvs	1cd9154 <_Min_Stack_Size+0x1cd8d54>
     c00:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     c04:	65764574 	ldrbvs	r4, [r6, #-1396]!	; 0x574
     c08:	7449746e 	strbvc	r7, [r9], #-1134	; 0x46e
     c0c:	61566d65 	cmpvs	r6, r5, ror #26
     c10:	0065756c 	rsbeq	r7, r5, ip, ror #10
     c14:	65764578 	ldrbvs	r4, [r6, #-1400]!	; 0x578
     c18:	7247746e 	subvc	r7, r7, #1845493760	; 0x6e000000
     c1c:	0070756f 	rsbseq	r7, r0, pc, ror #10
     c20:	76457875 			; <UNDEFINED> instruction: 0x76457875
     c24:	47746e65 	ldrbmi	r6, [r4, -r5, ror #28]!
     c28:	70756f72 	rsbsvc	r6, r5, r2, ror pc
     c2c:	4e746547 	cdpmi	5, 7, cr6, cr4, cr7, {2}
     c30:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
     c34:	76450072 			; <UNDEFINED> instruction: 0x76450072
     c38:	42746e65 	rsbsmi	r6, r4, #1616	; 0x650
     c3c:	5f737469 	svcpl	0x00737469
     c40:	41780074 	cmnmi	r8, r4, ror r0
     c44:	6165726c 	cmnvs	r5, ip, ror #4
     c48:	69597964 	ldmdbvs	r9, {r2, r5, r6, r8, fp, ip, sp, lr}^
     c4c:	65646c65 	strbvs	r6, [r4, #-3173]!	; 0xc65
     c50:	6c750064 	ldclvs	0, cr0, [r5], #-400	; 0xfffffe70
     c54:	73746942 	cmnvc	r4, #1081344	; 0x108000
     c58:	65536f54 	ldrbvs	r6, [r3, #-3924]	; 0xf54
     c5c:	76450074 			; <UNDEFINED> instruction: 0x76450074
     c60:	47746e65 	ldrbmi	r6, [r4, -r5, ror #28]!
     c64:	70756f72 	rsbsvc	r6, r5, r2, ror pc
     c68:	7000745f 	andvc	r7, r0, pc, asr r4
     c6c:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     c70:	6157736b 	cmpvs	r7, fp, ror #6
     c74:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
     c78:	726f4667 	rsbvc	r4, pc, #108003328	; 0x6700000
     c7c:	73746942 	cmnvc	r4, #1081344	; 0x108000
     c80:	43787500 	cmnmi	r8, #0, 10
     c84:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     c88:	69426c6f 	stmdbvs	r2, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
     c8c:	78007374 	stmdavc	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
     c90:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
     c94:	4f74756f 	svcmi	0x0074756f
     c98:	72756363 	rsbsvc	r6, r5, #-1946157055	; 0x8c000001
     c9c:	00646572 	rsbeq	r6, r4, r2, ror r5
     ca0:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     ca4:	6f724774 	svcvs	0x00724774
     ca8:	61487075 	hvcvs	34565	; 0x8705
     cac:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     cb0:	7800745f 	stmdavc	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
     cb4:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     cb8:	6f724774 	svcvs	0x00724774
     cbc:	65537075 	ldrbvs	r7, [r3, #-117]	; 0x75
     cc0:	74694274 	strbtvc	r4, [r9], #-628	; 0x274
     cc4:	78700073 	ldmdavc	r0!, {r0, r1, r4, r5, r6}^
     cc8:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     ccc:	74694274 	strbtvc	r4, [r9], #-628	; 0x274
     cd0:	45780073 	ldrbmi	r0, [r8, #-115]!	; 0x73
     cd4:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     cd8:	756f7247 	strbvc	r7, [pc, #-583]!	; a99 <_Min_Stack_Size+0x699>
     cdc:	6e795370 	mrcvs	3, 3, r5, cr9, cr0, {3}
     ce0:	45780063 	ldrbmi	r0, [r8, #-99]!	; 0x63
     ce4:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     ce8:	756f7247 	strbvc	r7, [pc, #-583]!	; aa9 <_Min_Stack_Size+0x6a9>
     cec:	66654470 			; <UNDEFINED> instruction: 0x66654470
     cf0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     cf4:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     cf8:	75437875 	strbvc	r7, [r3, #-2165]	; 0x875
     cfc:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     d00:	65764574 	ldrbvs	r4, [r6, #-1396]!	; 0x574
     d04:	6942746e 	stmdbvs	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     d08:	2f007374 	svccs	0x00007374
     d0c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
     d10:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
     d14:	442f616c 	strtmi	r6, [pc], #-364	; d1c <_Min_Stack_Size+0x91c>
     d18:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
     d1c:	662f706f 	strtvs	r7, [pc], -pc, rrx
     d20:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
     d24:	6f72705f 	svcvs	0x0072705f
     d28:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
     d2c:	3130325f 	teqcc	r0, pc, asr r2
     d30:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
     d34:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     d38:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
     d3c:	6f426f74 	svcvs	0x00426f74
     d40:	652f7461 	strvs	r7, [pc, #-1121]!	; 8e7 <_Min_Stack_Size+0x4e7>
     d44:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     d48:	6f72675f 	svcvs	0x0072675f
     d4c:	2e737075 	mrccs	0, 3, r7, cr3, cr5, {3}
     d50:	54760063 	ldrbtpl	r0, [r6], #-99	; 0x63
     d54:	506b7361 	rsbpl	r7, fp, r1, ror #6
     d58:	6563616c 	strbvs	r6, [r3, #-364]!	; 0x16c
     d5c:	6e556e4f 	cdpvs	14, 5, cr6, cr5, cr15, {2}
     d60:	6564726f 	strbvs	r7, [r4, #-623]!	; 0x26f
     d64:	45646572 	strbmi	r6, [r4, #-1394]!	; 0x572
     d68:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     d6c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     d70:	52787500 	rsbspl	r7, r8, #0, 10
     d74:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
     d78:	5076006e 	rsbspl	r0, r6, lr, rrx
     d7c:	4674726f 	ldrbtmi	r7, [r4], -pc, ror #4
     d80:	00656572 	rsbeq	r6, r5, r2, ror r5
     d84:	69427875 	stmdbvs	r2, {r0, r2, r4, r5, r6, fp, ip, sp, lr}^
     d88:	6f547374 	svcvs	0x00547374
     d8c:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
     d90:	00726f46 	rsbseq	r6, r2, r6, asr #30
     d94:	65764576 	ldrbvs	r4, [r6, #-1398]!	; 0x576
     d98:	7247746e 	subvc	r7, r7, #1845493760	; 0x6e000000
     d9c:	5370756f 	cmnpl	r0, #465567744	; 0x1bc00000
     da0:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
     da4:	61437374 	hvcvs	14132	; 0x3734
     da8:	61626c6c 	cmnvs	r2, ip, ror #24
     dac:	75006b63 	strvc	r6, [r0, #-2915]	; 0xb63
     db0:	74694278 	strbtvc	r4, [r9], #-632	; 0x278
     db4:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     db8:	46646574 			; <UNDEFINED> instruction: 0x46646574
     dbc:	7000726f 	andvc	r7, r0, pc, ror #4
     dc0:	65764576 	ldrbvs	r4, [r6, #-1398]!	; 0x576
     dc4:	7247746e 	subvc	r7, r7, #1845493760	; 0x6e000000
     dc8:	0070756f 	rsbseq	r7, r0, pc, ror #10
     dcc:	54767270 	ldrbtpl	r7, [r6], #-624	; 0x270
     dd0:	57747365 	ldrbpl	r7, [r4, -r5, ror #6]!
     dd4:	43746961 	cmnmi	r4, #1589248	; 0x184000
     dd8:	69646e6f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     ddc:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     de0:	6c437800 	mcrrvs	8, 0, r7, r3, cr0
     de4:	4f726165 	svcmi	0x00726165
     de8:	6978456e 	ldmdbvs	r8!, {r1, r2, r3, r5, r6, r8, sl, lr}^
     dec:	45780074 	ldrbmi	r0, [r8, #-116]!	; 0x74
     df0:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     df4:	756f7247 	strbvc	r7, [pc, #-583]!	; bb5 <_Min_Stack_Size+0x7b5>
     df8:	69615770 	stmdbvs	r1!, {r4, r5, r6, r8, r9, sl, ip, lr}^
     dfc:	74694274 	strbtvc	r4, [r9], #-628	; 0x274
     e00:	78750073 	ldmdavc	r5!, {r0, r1, r4, r5, r6}^
     e04:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     e08:	6f724774 	svcvs	0x00724774
     e0c:	754e7075 	strbvc	r7, [lr, #-117]	; 0x75
     e10:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     e14:	76457800 	strbvc	r7, [r5], -r0, lsl #16
     e18:	47746e65 	ldrbmi	r6, [r4, -r5, ror #28]!
     e1c:	70756f72 	rsbsvc	r6, r5, r2, ror pc
     e20:	61656c43 	cmnvs	r5, r3, asr #24
     e24:	74694272 	strbtvc	r4, [r9], #-626	; 0x272
     e28:	45780073 	ldrbmi	r0, [r8, #-115]!	; 0x73
     e2c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     e30:	756f7247 	strbvc	r7, [pc, #-583]!	; bf1 <_Min_Stack_Size+0x7f1>
     e34:	656c4370 	strbvs	r4, [ip, #-880]!	; 0x370
     e38:	69427261 	stmdbvs	r2, {r0, r5, r6, r9, ip, sp, lr}^
     e3c:	72467374 	subvc	r7, r6, #116, 6	; 0xd0000001
     e40:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     e44:	54780052 	ldrbtpl	r0, [r8], #-82	; 0x52
     e48:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
     e4c:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
     e50:	6c6c4165 	stfvse	f4, [ip], #-404	; 0xfffffe6c
     e54:	42787500 	rsbsmi	r7, r8, #0, 10
     e58:	54737469 	ldrbtpl	r7, [r3], #-1129	; 0x469
     e5c:	656c436f 	strbvs	r4, [ip, #-879]!	; 0x36f
     e60:	78007261 	stmdavc	r0, {r0, r5, r6, r9, ip, sp, lr}
     e64:	6b736154 	blvs	1cd93bc <_Min_Stack_Size+0x1cd8fbc>
     e68:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     e6c:	64656863 	strbtvs	r6, [r5], #-2147	; 0x863
     e70:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
     e74:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     e78:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
     e7c:	65766153 	ldrbvs	r6, [r6, #-339]!	; 0x153
     e80:	746e4964 	strbtvc	r4, [lr], #-2404	; 0x964
     e84:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
     e88:	74537470 	ldrbvc	r7, [r3], #-1136	; 0x470
     e8c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     e90:	614d7800 	cmpvs	sp, r0, lsl #16
     e94:	46686374 			; <UNDEFINED> instruction: 0x46686374
     e98:	646e756f 	strbtvs	r7, [lr], #-1391	; 0x56f
     e9c:	4c787000 	ldclmi	0, cr7, [r8], #-0
     ea0:	00747369 	rsbseq	r7, r4, r9, ror #6
     ea4:	726f5076 	rsbvc	r5, pc, #118	; 0x76
     ea8:	69784574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, lr}^
     eac:	69724374 	ldmdbvs	r2!, {r2, r4, r5, r6, r8, r9, lr}^
     eb0:	61636974 	smcvs	13972	; 0x3694
     eb4:	7875006c 	ldmdavc	r5!, {r2, r3, r5, r6}^
     eb8:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     ebc:	74694274 	strbtvc	r4, [r9], #-628	; 0x274
     ec0:	45760073 	ldrbmi	r0, [r6, #-115]!	; 0x73
     ec4:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     ec8:	756f7247 	strbvc	r7, [pc, #-583]!	; c89 <_Min_Stack_Size+0x889>
     ecc:	6c654470 	cfstrdvs	mvd4, [r5], #-448	; 0xfffffe40
     ed0:	00657465 	rsbeq	r7, r5, r5, ror #8
     ed4:	726f5076 	rsbvc	r5, pc, #118	; 0x76
     ed8:	746e4574 	strbtvc	r4, [lr], #-1396	; 0x574
     edc:	72437265 	subvc	r7, r3, #1342177286	; 0x50000006
     ee0:	63697469 	cmnvs	r9, #1761607680	; 0x69000000
     ee4:	75006c61 	strvc	r6, [r0, #-3169]	; 0xc61
     ee8:	74694278 	strbtvc	r4, [r9], #-632	; 0x278
     eec:	536f5473 	cmnpl	pc, #1929379840	; 0x73000000
     ef0:	76007465 	strvc	r7, [r0], -r5, ror #8
     ef4:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
     ef8:	6c656959 	stclvs	9, cr6, [r5], #-356	; 0xfffffe9c
     efc:	54760064 	ldrbtpl	r0, [r6], #-100	; 0x64
     f00:	536b7361 	cmnpl	fp, #-2080374783	; 0x84000001
     f04:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0x375
     f08:	6c41646e 	cfstrdvs	mvd6, [r1], {110}	; 0x6e
     f0c:	7875006c 	ldmdavc	r5!, {r2, r3, r5, r6}^
     f10:	6769724f 	strbvs	r7, [r9, -pc, asr #4]!
     f14:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
     f18:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
     f1c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
     f20:	61577800 	cmpvs	r7, r0, lsl #16
     f24:	6f467469 	svcvs	0x00467469
     f28:	6c6c4172 	stfvse	f4, [ip], #-456	; 0xfffffe38
     f2c:	73746942 	cmnvc	r4, #1081344	; 0x108000
     f30:	61577800 	cmpvs	r7, r0, lsl #16
     f34:	6f437469 	svcvs	0x00437469
     f38:	7469646e 	strbtvc	r6, [r9], #-1134	; 0x46e
     f3c:	4d6e6f69 	stclmi	15, cr6, [lr, #-420]!	; 0xfffffe5c
     f40:	70007465 	andvc	r7, r0, r5, ror #8
     f44:	73694c78 	cmnvc	r9, #120, 24	; 0x7800
     f48:	646e4574 	strbtvs	r4, [lr], #-1396	; 0x574
     f4c:	76457800 	strbvc	r7, [r5], -r0, lsl #16
     f50:	47746e65 	ldrbmi	r6, [r4, -r5, ror #28]!
     f54:	70756f72 	rsbsvc	r6, r5, r2, ror pc
     f58:	61657243 	cmnvs	r5, r3, asr #4
     f5c:	78006574 	stmdavc	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
     f60:	6b736154 	blvs	1cd94b8 <_Min_Stack_Size+0x1cd90b8>
     f64:	6f6d6552 	svcvs	0x006d6552
     f68:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
     f6c:	6e556d6f 	cdpvs	13, 5, cr6, cr5, cr15, {3}
     f70:	6564726f 	strbvs	r7, [r4, #-623]!	; 0x26f
     f74:	45646572 	strbmi	r6, [r4, #-1394]!	; 0x572
     f78:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
     f7c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
     f80:	49787000 	ldmdbmi	r8!, {ip, sp, lr}^
     f84:	546d6574 	strbtpl	r6, [sp], #-1396	; 0x574
     f88:	6d65526f 	sfmvs	f5, 2, [r5, #-444]!	; 0xfffffe44
     f8c:	0065766f 	rsbeq	r7, r5, pc, ror #12
     f90:	6c615678 	stclvs	6, cr5, [r1], #-480	; 0xfffffe20
     f94:	664f6575 			; <UNDEFINED> instruction: 0x664f6575
     f98:	65736e49 	ldrbvs	r6, [r3, #-3657]!	; 0xe49
     f9c:	6f697472 	svcvs	0x00697472
     fa0:	7870006e 	ldmdavc	r0!, {r1, r2, r3, r5, r6}^
     fa4:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     fa8:	49787000 	ldmdbmi	r8!, {ip, sp, lr}^
     fac:	61726574 	cmnvs	r2, r4, ror r5
     fb0:	00726f74 	rsbseq	r6, r2, r4, ror pc
     fb4:	654e7870 	strbvs	r7, [lr, #-2160]	; 0x870
     fb8:	73694c77 	cmnvc	r9, #30464	; 0x7700
     fbc:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0x974
     fc0:	682f006d 	stmdavs	pc!, {r0, r2, r3, r5, r6}	; <UNPREDICTABLE>
     fc4:	2f656d6f 	svccs	0x00656d6f
     fc8:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
     fcc:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
     fd0:	6f746b73 	svcvs	0x00746b73
     fd4:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
     fd8:	5f6c616e 	svcpl	0x006c616e
     fdc:	6a6f7270 	bvs	1bdd9a4 <_Min_Stack_Size+0x1bdd5a4>
     fe0:	5f746365 	svcpl	0x00746365
     fe4:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
     fe8:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     fec:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     ff0:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
     ff4:	616f426f 	cmnvs	pc, pc, ror #4
     ff8:	696c2f74 	stmdbvs	ip!, {r2, r4, r5, r6, r8, r9, sl, fp, sp}^
     ffc:	632e7473 	teqvs	lr, #1929379840	; 0x73000000
    1000:	51637500 	cmnpl	r3, r0, lsl #10
    1004:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1008:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    100c:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0x800
    1010:	47657565 	strbmi	r7, [r5, -r5, ror #10]!
    1014:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    1018:	65536369 	ldrbvs	r6, [r3, #-873]	; 0x369
    101c:	7246646e 	subvc	r6, r6, #1845493760	; 0x6e000000
    1020:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
    1024:	63750052 	cmnvs	r5, #82	; 0x52
    1028:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    102c:	74654765 	strbtvc	r4, [r5], #-1893	; 0x765
    1030:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    1034:	70795465 	rsbsvc	r5, r9, r5, ror #8
    1038:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
    103c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    1040:	73654d65 	cmnvc	r5, #6464	; 0x1940
    1044:	65676173 	strbvs	r6, [r7, #-371]!	; 0x173
    1048:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
    104c:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    1050:	6d695400 	cfstrdvs	mvd5, [r9, #-0]
    1054:	74754f65 	ldrbtvc	r4, [r5], #-3941	; 0xf65
    1058:	7800745f 	stmdavc	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
    105c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    1060:	65724365 	ldrbvs	r4, [r2, #-869]!	; 0x365
    1064:	43657461 	cmnmi	r5, #1627389952	; 0x61000000
    1068:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    106c:	53676e69 	cmnpl	r7, #1680	; 0x690
    1070:	70616d65 	rsbvc	r6, r1, r5, ror #26
    1074:	65726f68 	ldrbvs	r6, [r2, #-3944]!	; 0xf68
    1078:	48787000 	ldmdami	r8!, {ip, sp, lr}^
    107c:	65686769 	strbvs	r6, [r8, #-1897]!	; 0x769
    1080:	69725072 	ldmdbvs	r2!, {r1, r4, r5, r6, ip, lr}^
    1084:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1088:	73615479 	cmnvc	r1, #2030043136	; 0x79000000
    108c:	6b6f576b 	blvs	1bd6e40 <_Min_Stack_Size+0x1bd6a40>
    1090:	78006e65 	stmdavc	r0, {r0, r2, r5, r6, r9, sl, fp, sp, lr}
    1094:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    1098:	51734965 	cmnpl	r3, r5, ror #18
    109c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    10a0:	74706d45 	ldrbtvc	r6, [r0], #-3397	; 0xd45
    10a4:	6f724679 	svcvs	0x00724679
    10a8:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
    10ac:	75517600 	ldrbvc	r7, [r1, #-1536]	; 0x600
    10b0:	53657565 	cmnpl	r5, #423624704	; 0x19400000
    10b4:	75517465 	ldrbvc	r7, [r1, #-1125]	; 0x465
    10b8:	4e657565 	cdpmi	5, 6, cr7, cr5, cr5, {3}
    10bc:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
    10c0:	51780072 	cmnpl	r8, r2, ror r0
    10c4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    10c8:	6b656550 	blvs	195a610 <_Min_Stack_Size+0x195a210>
    10cc:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; fbc <_Min_Stack_Size+0xbbc>
    10d0:	00525349 	subseq	r5, r2, r9, asr #6
    10d4:	43767270 	cmnmi	r6, #112, 4
    10d8:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0x6f
    10dc:	46617461 	strbtmi	r7, [r1], -r1, ror #8
    10e0:	516d6f72 	smcpl	55026	; 0xd6f2
    10e4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    10e8:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
    10ec:	75517765 	ldrbvc	r7, [r1, #-1893]	; 0x765
    10f0:	00657565 	rsbeq	r7, r5, r5, ror #10
    10f4:	43767270 	cmnmi	r6, #112, 4
    10f8:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0x6f
    10fc:	54617461 	strbtpl	r7, [r1], #-1121	; 0x461
    1100:	6575516f 	ldrbvs	r5, [r5, #-367]!	; 0x16f
    1104:	5f006575 	svcpl	0x00006575
    1108:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
    110c:	00745f38 	rsbseq	r5, r4, r8, lsr pc
    1110:	4d495478 	cfstrdmi	mvd5, [r9, #-480]	; 0xfffffe20
    1114:	554f5f45 	strbpl	r5, [pc, #-3909]	; 1d7 <_Min_Heap_Size+0x1d7>
    1118:	51780054 	cmnpl	r8, r4, asr r0
    111c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1120:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0x547
    1124:	52636972 	rsbpl	r6, r3, #1867776	; 0x1c8000
    1128:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    112c:	76006576 			; <UNDEFINED> instruction: 0x76006576
    1130:	6b736154 	blvs	1cd9688 <_Min_Stack_Size+0x1cd9288>
    1134:	6f697250 	svcvs	0x00697250
    1138:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    113c:	65686e49 	strbvs	r6, [r8, #-3657]!	; 0xe49
    1140:	00746972 	rsbseq	r6, r4, r2, ror r9
    1144:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0x178
    1148:	65526575 	ldrbvs	r6, [r2, #-1397]	; 0x575
    114c:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0x967
    1150:	74497972 	strbvc	r7, [r9], #-2418	; 0x972
    1154:	70006d65 	andvc	r6, r0, r5, ror #26
    1158:	69724f63 	ldmdbvs	r2!, {r0, r1, r5, r6, r8, r9, sl, fp, lr}^
    115c:	616e6967 	cmnvs	lr, r7, ror #18
    1160:	6165526c 	cmnvs	r5, ip, ror #4
    1164:	736f5064 	cmnvc	pc, #100	; 0x64
    1168:	6f697469 	svcvs	0x00697469
    116c:	656d006e 	strbvs	r0, [sp, #-110]!	; 0x6e
    1170:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    1174:	51787500 	cmnpl	r8, r0, lsl #10
    1178:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    117c:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    1180:	70007265 	andvc	r7, r0, r5, ror #4
    1184:	61655263 	cmnvs	r5, r3, ror #4
    1188:	6f724664 	svcvs	0x00724664
    118c:	4f78006d 	svcmi	0x0078006d
    1190:	66726576 			; <UNDEFINED> instruction: 0x66726576
    1194:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
    1198:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    119c:	75517600 	ldrbvc	r7, [r1, #-1536]	; 0x600
    11a0:	44657565 	strbtmi	r7, [r5], #-1381	; 0x565
    11a4:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xc65
    11a8:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
    11ac:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    11b0:	76006874 			; <UNDEFINED> instruction: 0x76006874
    11b4:	6b736154 	blvs	1cd970c <_Min_Stack_Size+0x1cd930c>
    11b8:	63616c50 	cmnvs	r1, #80, 24	; 0x5000
    11bc:	456e4f65 	strbmi	r4, [lr, #-3941]!	; 0xf65
    11c0:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    11c4:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
    11c8:	48637000 	stmdami	r3!, {ip, sp, lr}^
    11cc:	00646165 	rsbeq	r6, r4, r5, ror #2
    11d0:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0x178
    11d4:	61546575 	cmpvs	r4, r5, ror r5
    11d8:	754d656b 	strbvc	r6, [sp, #-1387]	; 0x56b
    11dc:	52786574 	rsbspl	r6, r8, #116, 10	; 0x1d000000
    11e0:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
    11e4:	65766973 	ldrbvs	r6, [r6, #-2419]!	; 0x973
    11e8:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
    11ec:	6e4f656d 	cdpvs	5, 4, cr6, cr15, cr13, {3}
    11f0:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xe45
    11f4:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    11f8:	754a7800 	strbvc	r7, [sl, #-2048]	; 0x800
    11fc:	65507473 	ldrbvs	r7, [r0, #-1139]	; 0x473
    1200:	6e696b65 	vnmulvs.f64	d22, d9, d21
    1204:	72700067 	rsbsvc	r0, r0, #103	; 0x67
    1208:	51734976 	cmnpl	r3, r6, ror r9
    120c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1210:	74706d45 	ldrbtvc	r6, [r0], #-3397	; 0xd45
    1214:	51760079 	cmnpl	r6, r9, ror r0
    1218:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    121c:	54646441 	strbtpl	r6, [r4], #-1089	; 0x441
    1220:	6765526f 	strbvs	r5, [r5, -pc, ror #4]!
    1224:	72747369 	rsbsvc	r7, r4, #-1543503871	; 0xa4000001
    1228:	51780079 	cmnpl	r8, r9, ror r0
    122c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1230:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0x547
    1234:	53636972 	cmnpl	r3, #1867776	; 0x1c8000
    1238:	00646e65 	rsbeq	r6, r4, r5, ror #28
    123c:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0x178
    1240:	72436575 	subvc	r6, r3, #490733568	; 0x1d400000
    1244:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0x165
    1248:	6574754d 	ldrbvs	r7, [r4, #-1357]!	; 0x54d
    124c:	51780078 	cmnpl	r8, r8, ror r0
    1250:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1254:	65636552 	strbvs	r6, [r3, #-1362]!	; 0x552
    1258:	46657669 	strbtmi	r7, [r5], -r9, ror #12
    125c:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1260:	70005253 	andvc	r5, r0, r3, asr r2
    1264:	74754d78 	ldrbtvc	r4, [r5], #-3448	; 0xd78
    1268:	2f007865 	svccs	0x00007865
    126c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
    1270:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
    1274:	442f616c 	strtmi	r6, [pc], #-364	; 127c <_Min_Stack_Size+0xe7c>
    1278:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    127c:	662f706f 	strtvs	r7, [pc], -pc, rrx
    1280:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
    1284:	6f72705f 	svcvs	0x0072705f
    1288:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    128c:	3130325f 	teqcc	r0, pc, asr r2
    1290:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
    1294:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    1298:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
    129c:	6f426f74 	svcvs	0x00426f74
    12a0:	712f7461 	teqvc	pc, r1, ror #8
    12a4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    12a8:	7600632e 	strvc	r6, [r0], -lr, lsr #6
    12ac:	6b736154 	blvs	1cd9804 <_Min_Stack_Size+0x1cd9404>
    12b0:	6f697250 	svcvs	0x00697250
    12b4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    12b8:	69736944 	ldmdbvs	r3!, {r2, r6, r8, fp, sp, lr}^
    12bc:	7265686e 	rsbvc	r6, r5, #7208960	; 0x6e0000
    12c0:	78007469 	stmdavc	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    12c4:	6b736154 	blvs	1cd981c <_Min_Stack_Size+0x1cd941c>
    12c8:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    12cc:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    12d0:	6154746e 	cmpvs	r4, lr, ror #8
    12d4:	61486b73 	hvcvs	34483	; 0x86b3
    12d8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    12dc:	65755100 	ldrbvs	r5, [r5, #-256]!	; 0x100
    12e0:	745f6575 	ldrbvc	r6, [pc], #-1397	; 12e8 <_Min_Stack_Size+0xee8>
    12e4:	4d787500 	cfldr64mi	mvdx7, [r8, #-0]
    12e8:	6f437861 	svcvs	0x00437861
    12ec:	00746e75 	rsbseq	r6, r4, r5, ror lr
    12f0:	75517875 	ldrbvc	r7, [r1, #-2165]	; 0x875
    12f4:	4c657565 	cfstr64mi	mvdx7, [r5], #-404	; 0xfffffe6c
    12f8:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    12fc:	54780068 	ldrbtpl	r0, [r8], #-104	; 0x68
    1300:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
    1304:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
    1308:	54676e69 	strbtpl	r6, [r7], #-3689	; 0xe69
    130c:	6365526f 	cmnvs	r5, #-268435450	; 0xf0000006
    1310:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0x965
    1314:	51787500 	cmnpl	r8, r0, lsl #10
    1318:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    131c:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
    1320:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    1324:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
    1328:	46676e69 	strbtmi	r6, [r7], -r9, ror #28
    132c:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    1330:	70005253 	andvc	r5, r0, r3, asr r2
    1334:	65744976 	ldrbvs	r4, [r4, #-2422]!	; 0x976
    1338:	516f546d 	cmnpl	pc, sp, ror #8
    133c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1340:	55517800 	ldrbpl	r7, [r1, #-2048]	; 0x800
    1344:	00455545 	subeq	r5, r5, r5, asr #10
    1348:	746e4578 	strbtvc	r4, [lr], #-1400	; 0x578
    134c:	69547972 	ldmdbvs	r4, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1350:	6553656d 	ldrbvs	r6, [r3, #-1389]	; 0x56d
    1354:	75510074 	ldrbvc	r0, [r1, #-116]	; 0x74
    1358:	44657565 	strbtmi	r7, [r5], #-1381	; 0x565
    135c:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
    1360:	6f697469 	svcvs	0x00697469
    1364:	7875006e 	ldmdavc	r5!, {r1, r2, r3, r5, r6}^
    1368:	75636552 	strbvc	r6, [r3, #-1362]!	; 0x552
    136c:	76697372 			; <UNDEFINED> instruction: 0x76697372
    1370:	6c614365 	stclvs	3, cr4, [r1], #-404	; 0xfffffe6c
    1374:	756f436c 	strbvc	r4, [pc, #-876]!	; 1010 <_Min_Stack_Size+0xc10>
    1378:	7800746e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    137c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    1380:	51734965 	cmnpl	r3, r5, ror #18
    1384:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1388:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
    138c:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 127c <_Min_Stack_Size+0xe7c>
    1390:	00525349 	subseq	r5, r2, r9, asr #6
    1394:	55455551 	strbpl	r5, [r5, #-1361]	; 0x551
    1398:	45525f45 	ldrbmi	r5, [r2, #-3909]	; 0xf45
    139c:	54534947 	ldrbpl	r4, [r3], #-2375	; 0x947
    13a0:	495f5952 	ldmdbmi	pc, {r1, r4, r6, r8, fp, ip, lr}^	; <UNPREDICTABLE>
    13a4:	004d4554 	subeq	r4, sp, r4, asr r5
    13a8:	4c785478 	cfldrdmi	mvd5, [r8], #-480	; 0xfffffe20
    13ac:	006b636f 	rsbeq	r6, fp, pc, ror #6
    13b0:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0x178
    13b4:	65476575 	strbvs	r6, [r7, #-1397]	; 0x575
    13b8:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
    13bc:	65724363 	ldrbvs	r4, [r2, #-867]!	; 0x363
    13c0:	00657461 	rsbeq	r7, r5, r1, ror #8
    13c4:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0x178
    13c8:	69476575 	stmdbvs	r7, {r0, r2, r4, r5, r6, r8, sl, sp, lr}^
    13cc:	754d6576 	strbvc	r6, [sp, #-1398]	; 0x576
    13d0:	52786574 	rsbspl	r6, r8, #116, 10	; 0x1d000000
    13d4:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
    13d8:	65766973 	ldrbvs	r6, [r6, #-2419]!	; 0x973
    13dc:	61547600 	cmpvs	r4, r0, lsl #12
    13e0:	694d6b73 	stmdbvs	sp, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    13e4:	64657373 	strbtvs	r7, [r5], #-883	; 0x373
    13e8:	6c656959 	stclvs	9, cr6, [r5], #-356	; 0xfffffe9c
    13ec:	54780064 	ldrbtpl	r0, [r8], #-100	; 0x64
    13f0:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
    13f4:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
    13f8:	6f724665 	svcvs	0x00724665
    13fc:	6576456d 	ldrbvs	r4, [r6, #-1389]!	; 0x56d
    1400:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1404:	70007473 	andvc	r7, r0, r3, ror r4
    1408:	73497672 	movtvc	r7, #38514	; 0x9672
    140c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    1410:	6c754665 	ldclvs	6, cr4, [r5], #-404	; 0xfffffe6c
    1414:	7551006c 	ldrbvc	r0, [r1, #-108]	; 0x6c
    1418:	48657565 	stmdami	r5!, {r0, r2, r5, r6, r8, sl, ip, sp, lr}^
    141c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1420:	00745f65 	rsbseq	r5, r4, r5, ror #30
    1424:	654d7875 	strbvs	r7, [sp, #-2165]	; 0x875
    1428:	67617373 			; <UNDEFINED> instruction: 0x67617373
    142c:	61577365 	cmpvs	r7, r5, ror #6
    1430:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
    1434:	76700067 	ldrbtvc	r0, [r0], -r7, rrx
    1438:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    143c:	78007265 	stmdavc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    1440:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    1444:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
    1448:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
    144c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
    1450:	43780074 	cmnmi	r8, #116	; 0x74
    1454:	5079706f 	rsbspl	r7, r9, pc, rrx
    1458:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
    145c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1460:	75516370 	ldrbvc	r6, [r1, #-880]	; 0x370
    1464:	4e657565 	cdpmi	5, 6, cr7, cr5, cr5, {3}
    1468:	00656d61 	rsbeq	r6, r5, r1, ror #26
    146c:	55767270 	ldrbpl	r7, [r6, #-624]!	; 0x270
    1470:	636f6c6e 	cmnvs	pc, #28160	; 0x6e00
    1474:	6575516b 	ldrbvs	r5, [r5, #-363]!	; 0x16b
    1478:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    147c:	6f4c7852 	svcvs	0x004c7852
    1480:	78006b63 	stmdavc	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    1484:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    1488:	67655265 	strbvs	r5, [r5, -r5, ror #4]!
    148c:	72747369 	rsbsvc	r7, r4, #-1543503871	; 0xa4000001
    1490:	63700079 	cmnvs	r0, #121	; 0x79
    1494:	6c696154 	stfvse	f6, [r9], #-336	; 0xfffffeb0
    1498:	61547800 	cmpvs	r4, r0, lsl #16
    149c:	68436b73 	stmdavs	r3, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    14a0:	466b6365 	strbtmi	r6, [fp], -r5, ror #6
    14a4:	6954726f 	ldmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    14a8:	754f656d 	strbvc	r6, [pc, #-1389]	; f43 <_Min_Stack_Size+0xb43>
    14ac:	51760074 	cmnpl	r6, r4, ror r0
    14b0:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    14b4:	65726e55 	ldrbvs	r6, [r2, #-3669]!	; 0xe55
    14b8:	74736967 	ldrbtvc	r6, [r3], #-2407	; 0x967
    14bc:	75517265 	ldrbvc	r7, [r1, #-613]	; 0x265
    14c0:	00657565 	rsbeq	r7, r5, r5, ror #10
    14c4:	75517875 	ldrbvc	r7, [r1, #-2165]	; 0x875
    14c8:	47657565 	strbmi	r7, [r5, -r5, ror #10]!
    14cc:	75517465 	ldrbvc	r7, [r1, #-1125]	; 0x465
    14d0:	4e657565 	cdpmi	5, 6, cr7, cr5, cr5, {3}
    14d4:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
    14d8:	50780072 	rsbspl	r0, r8, r2, ror r0
    14dc:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
    14e0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    14e4:	6e497875 	mcrvs	8, 2, r7, cr9, cr5, {3}
    14e8:	61697469 	cmnvs	r9, r9, ror #8
    14ec:	756f436c 	strbvc	r4, [pc, #-876]!	; 1188 <_Min_Stack_Size+0xd88>
    14f0:	5100746e 	tstpl	r0, lr, ror #8
    14f4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    14f8:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    14fc:	79727473 	ldmdbvc	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1500:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
    1504:	7800745f 	stmdavc	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
    1508:	6b736154 	blvs	1cd9a60 <_Min_Stack_Size+0x1cd9660>
    150c:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
    1510:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    1514:	65536f54 	ldrbvs	r6, [r3, #-3924]	; 0xf54
    1518:	7800646e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, sp, lr}
    151c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0x551
    1520:	7a695365 	bvc	1a562bc <_Min_Stack_Size+0x1a55ebc>
    1524:	426e4965 	rsbmi	r4, lr, #1654784	; 0x194000
    1528:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    152c:	51787000 	cmnpl	r8, r0
    1530:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1534:	57637000 	strbpl	r7, [r3, -r0]!
    1538:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
    153c:	75006f54 	strvc	r6, [r0, #-3924]	; 0xf54
    1540:	65744978 	ldrbvs	r4, [r4, #-2424]!	; 0x978
    1544:	7a69536d 	bvc	1a56300 <_Min_Stack_Size+0x1a55f00>
    1548:	54760065 	ldrbtpl	r0, [r6], #-101	; 0x65
    154c:	506b7361 	rsbpl	r7, fp, r1, ror #6
    1550:	6563616c 	strbvs	r6, [r3, #-364]!	; 0x16c
    1554:	76456e4f 	strbvc	r6, [r5], -pc, asr #28
    1558:	4c746e65 	ldclmi	14, cr6, [r4], #-404	; 0xfffffe6c
    155c:	52747369 	rsbspl	r7, r4, #-1543503871	; 0xa4000001
    1560:	72747365 	rsbsvc	r7, r4, #-1811939327	; 0x94000001
    1564:	65746369 	ldrbvs	r6, [r4, #-873]!	; 0x369
    1568:	51760064 	cmnpl	r6, r4, rrx
    156c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1570:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
    1574:	4d726f46 	ldclmi	15, cr6, [r2, #-280]!	; 0xfffffee8
    1578:	61737365 	cmnvs	r3, r5, ror #6
    157c:	65526567 	ldrbvs	r6, [r2, #-1383]	; 0x567
    1580:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1584:	64657463 	strbtvs	r7, [r5], #-1123	; 0x463
    1588:	51787500 	cmnpl	r8, r0, lsl #10
    158c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1590:	63617053 	cmnvs	r1, #83	; 0x53
    1594:	76417365 	strbvc	r7, [r1], -r5, ror #6
    1598:	616c6961 	cmnvs	ip, r1, ror #18
    159c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    15a0:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    15a4:	7465536b 	strbtvc	r5, [r5], #-875	; 0x36b
    15a8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    15ac:	5374754f 	cmnpl	r4, #331350016	; 0x13c00000
    15b0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    15b4:	6f507600 	svcvs	0x00507600
    15b8:	61567472 	cmpvs	r6, r2, ror r4
    15bc:	6164696c 	cmnvs	r4, ip, ror #18
    15c0:	6e496574 	mcrvs	5, 2, r6, cr9, cr4, {3}
    15c4:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    15c8:	50747075 	rsbspl	r7, r4, r5, ror r0
    15cc:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    15d0:	00797469 	rsbseq	r7, r9, r9, ror #8
    15d4:	61546370 	cmpvs	r4, r0, ror r3
    15d8:	614e6b73 	hvcvs	59059	; 0xe6b3
    15dc:	7800656d 	stmdavc	r0, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    15e0:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
    15e4:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    15e8:	68635374 	stmdavs	r3!, {r2, r4, r5, r6, r8, r9, ip, lr}^
    15ec:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    15f0:	65007265 	strvs	r7, [r0, #-613]	; 0x265
    15f4:	70737553 	rsbsvc	r7, r3, r3, asr r5
    15f8:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xe65
    15fc:	73740064 	cmnvc	r4, #100	; 0x64
    1600:	7361546b 	cmnvc	r1, #1795162112	; 0x6b000000
    1604:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    1608:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1440 <_Min_Stack_Size+0x1040>
    160c:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1610:	7875006b 	ldmdavc	r5!, {r0, r1, r3, r5, r6}^
    1614:	6b736154 	blvs	1cd9b6c <_Min_Stack_Size+0x1cd976c>
    1618:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0x500
    161c:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
    1620:	754e7465 	strbvc	r7, [lr, #-1125]	; 0x465
    1624:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    1628:	6154664f 	cmpvs	r4, pc, asr #12
    162c:	00736b73 	rsbseq	r6, r3, r3, ror fp
    1630:	6f547875 	svcvs	0x00547875
    1634:	61655270 	smcvs	21792	; 0x5520
    1638:	72507964 	subsvc	r7, r0, #100, 18	; 0x190000
    163c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1640:	78007974 	stmdavc	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
    1644:	65686353 	strbvs	r6, [r8, #-851]!	; 0x353
    1648:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0x564
    164c:	6e755272 	mrcvs	2, 3, r5, cr5, cr2, {3}
    1650:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    1654:	52787000 	rsbspl	r7, r8, #0
    1658:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    165c:	6b736154 	blvs	1cd9bb4 <_Min_Stack_Size+0x1cd97b4>
    1660:	73694c73 	cmnvc	r9, #29440	; 0x7300
    1664:	70007374 	andvc	r7, r0, r4, ror r3
    1668:	6f546c75 	svcvs	0x00546c75
    166c:	526c6174 	rsbpl	r6, ip, #116, 2
    1670:	69546e75 	ldmdbvs	r4, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
    1674:	7000656d 	andvc	r6, r0, sp, ror #10
    1678:	74536375 	ldrbvc	r6, [r3], #-885	; 0x375
    167c:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
    1680:	00657479 	rsbeq	r7, r5, r9, ror r4
    1684:	6c654478 	cfstrdvs	mvd4, [r5], #-480	; 0xfffffe20
    1688:	64657961 	strbtvs	r7, [r5], #-2401	; 0x961
    168c:	6b736154 	blvs	1cd9be4 <_Min_Stack_Size+0x1cd97e4>
    1690:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
    1694:	44780031 	ldrbtmi	r0, [r8], #-49	; 0x31
    1698:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    169c:	61546465 	cmpvs	r4, r5, ror #8
    16a0:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    16a4:	00327473 	eorseq	r7, r2, r3, ror r4
    16a8:	43547875 	cmpmi	r4, #7667712	; 0x750000
    16ac:	6d754e42 	ldclvs	14, cr4, [r5, #-264]!	; 0xfffffef8
    16b0:	00726562 	rsbseq	r6, r2, r2, ror #10
    16b4:	41767270 	cmnmi	r6, r0, ror r2
    16b8:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    16bc:	54657461 	strbtpl	r7, [r5], #-1121	; 0x461
    16c0:	6e414243 	cdpvs	2, 4, cr4, cr1, cr3, {2}
    16c4:	61745364 	cmnvs	r4, r4, ror #6
    16c8:	78006b63 	stmdavc	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    16cc:	6b736154 	blvs	1cd9c24 <_Min_Stack_Size+0x1cd9824>
    16d0:	65526f54 	ldrbvs	r6, [r2, #-3924]	; 0xf54
    16d4:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0x573
    16d8:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
    16dc:	4372656d 	cmnmi	r2, #457179136	; 0x1b400000
    16e0:	74616572 	strbtvc	r6, [r1], #-1394	; 0x572
    16e4:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!	; 0xfffffe6c
    16e8:	61547265 	cmpvs	r4, r5, ror #4
    16ec:	74006b73 	strvc	r6, [r0], #-2931	; 0xb73
    16f0:	43546b73 	cmpmi	r4, #117760	; 0x1cc00
    16f4:	59780042 	ldmdbpl	r8!, {r1, r6}^
    16f8:	646c6569 	strbtvs	r6, [ip], #-1385	; 0x569
    16fc:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0x552
    1700:	64657269 	strbtvs	r7, [r5], #-617	; 0x269
    1704:	55787000 	ldrbpl	r7, [r8, #-0]!
    1708:	6f6c626e 	svcvs	0x006c626e
    170c:	64656b63 	strbtvs	r6, [r5], #-2915	; 0xb63
    1710:	00424354 	subeq	r4, r2, r4, asr r3
    1714:	74537375 	ldrbvc	r7, [r3], #-885	; 0x375
    1718:	446b6361 	strbtmi	r6, [fp], #-865	; 0x361
    171c:	68747065 	ldmdavs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
    1720:	75537800 	ldrbvc	r7, [r3, #-2048]	; 0x800
    1724:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
    1728:	54646564 	strbtpl	r6, [r4], #-1380	; 0x564
    172c:	4c6b7361 	stclmi	3, cr7, [fp], #-388	; 0xfffffe7c
    1730:	00747369 	rsbseq	r7, r4, r9, ror #6
    1734:	4c767270 	lfmmi	f7, 2, [r6], #-448	; 0xfffffe40
    1738:	54747369 	ldrbtpl	r7, [r4], #-873	; 0x369
    173c:	576b7361 	strbpl	r7, [fp, -r1, ror #6]!
    1740:	69687469 	stmdbvs	r8!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1744:	6e69536e 	cdpvs	3, 6, cr5, cr9, cr14, {3}
    1748:	4c656c67 	stclmi	12, cr6, [r5], #-412	; 0xfffffe64
    174c:	00747369 	rsbseq	r7, r4, r9, ror #6
    1750:	6e655078 	mcrvs	0, 3, r5, cr5, cr8, {3}
    1754:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1758:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    175c:	73694c79 	cmnvc	r9, #30976	; 0x7900
    1760:	54780074 	ldrbtpl	r0, [r8], #-116	; 0x74
    1764:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
    1768:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
    176c:	6f724665 	svcvs	0x00724665
    1770:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
    1774:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
    1778:	54747865 	ldrbtpl	r7, [r4], #-2149	; 0x865
    177c:	78004243 	stmdavc	r0, {r0, r1, r6, r9, lr}
    1780:	6b736154 	blvs	1cd9cd8 <_Min_Stack_Size+0x1cd98d8>
    1784:	72636e49 	rsbvc	r6, r3, #1168	; 0x490
    1788:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
    178c:	63695474 	cmnvs	r9, #116, 8	; 0x74000000
    1790:	6154006b 	cmpvs	r4, fp, rrx
    1794:	74536b73 	ldrbvc	r6, [r3], #-2931	; 0xb73
    1798:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    179c:	7000745f 	andvc	r7, r0, pc, asr r4
    17a0:	63695478 	cmnvs	r9, #120, 8	; 0x78000000
    17a4:	6f54736b 	svcvs	0x0054736b
    17a8:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
    17ac:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0x500
    17b0:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
    17b4:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0x544
    17b8:	00646574 	rsbeq	r6, r4, r4, ror r5
    17bc:	63695478 	cmnvs	r9, #120, 8	; 0x78000000
    17c0:	756f436b 	strbvc	r4, [pc, #-875]!	; 145d <_Min_Stack_Size+0x105d>
    17c4:	7600746e 	strvc	r7, [r0], -lr, ror #8
    17c8:	6b736154 	blvs	1cd9d20 <_Min_Stack_Size+0x1cd9920>
    17cc:	53646e45 	cmnpl	r4, #1104	; 0x450
    17d0:	64656863 	strbtvs	r6, [r5], #-2147	; 0x863
    17d4:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    17d8:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0x500
    17dc:	506b7361 	rsbpl	r7, fp, r1, ror #6
    17e0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    17e4:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
    17e8:	78007465 	stmdavc	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
    17ec:	736e6f43 	cmnvc	lr, #268	; 0x10c
    17f0:	63695474 	cmnvs	r9, #116, 8	; 0x74000000
    17f4:	756f436b 	strbvc	r4, [pc, #-875]!	; 1491 <_Min_Stack_Size+0x1091>
    17f8:	7000746e 	andvc	r7, r0, lr, ror #8
    17fc:	6d614e63 	stclvs	14, cr4, [r1, #-396]!	; 0xfffffe74
    1800:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
    1804:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
    1808:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
    180c:	616c6544 	cmnvs	ip, r4, asr #10
    1810:	54646579 	strbtpl	r6, [r4], #-1401	; 0x579
    1814:	4c6b7361 	stclmi	3, cr7, [fp], #-388	; 0xfffffe7c
    1818:	00747369 	rsbseq	r7, r4, r9, ror #6
    181c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1768 <_Min_Stack_Size+0x1368>
    1820:	656c2f65 	strbvs	r2, [ip, #-3941]!	; 0xf65
    1824:	2f616c69 	svccs	0x00616c69
    1828:	6b736544 	blvs	1cdad40 <_Min_Stack_Size+0x1cda940>
    182c:	2f706f74 	svccs	0x00706f74
    1830:	616e6966 	cmnvs	lr, r6, ror #18
    1834:	72705f6c 	rsbsvc	r5, r0, #108, 30	; 0x1b0
    1838:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
    183c:	30325f74 	eorscc	r5, r2, r4, ror pc
    1840:	6d653531 	cfstr64vs	mvdx3, [r5, #-196]!	; 0xffffff3c
    1844:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    1848:	612f6465 	teqvs	pc, r5, ror #8
    184c:	426f7475 	rsbmi	r7, pc, #1962934272	; 0x75000000
    1850:	2f74616f 	svccs	0x0074616f
    1854:	6b736174 	blvs	1cd9e2c <_Min_Stack_Size+0x1cd9a2c>
    1858:	00632e73 	rsbeq	r2, r3, r3, ror lr
    185c:	75437875 	strbvc	r7, [r3, #-2165]	; 0x875
    1860:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1864:	69725074 	ldmdbvs	r2!, {r2, r4, r5, r6, ip, lr}^
    1868:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    186c:	54780079 	ldrbtpl	r0, [r8], #-121	; 0x79
    1870:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
    1874:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
    1878:	54676e69 	strbtpl	r6, [r7], #-3689	; 0xe69
    187c:	696d7265 	stmdbvs	sp!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1880:	6974616e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, sp, lr}^
    1884:	70006e6f 	andvc	r6, r0, pc, ror #28
    1888:	64497672 	strbvs	r7, [r9], #-1650	; 0x672
    188c:	6154656c 	cmpvs	r4, ip, ror #10
    1890:	78006b73 	stmdavc	r0, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    1894:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
    1898:	6d457349 	stclvs	3, cr7, [r5, #-292]	; 0xfffffedc
    189c:	00797470 	rsbseq	r7, r9, r0, ror r4
    18a0:	61655265 	cmnvs	r5, r5, ror #4
    18a4:	70007964 	andvc	r7, r0, r4, ror #18
    18a8:	77654e78 			; <UNDEFINED> instruction: 0x77654e78
    18ac:	00424354 	subeq	r4, r2, r4, asr r3
    18b0:	75517875 	ldrbvc	r7, [r1, #-2165]	; 0x875
    18b4:	00657565 	rsbeq	r7, r5, r5, ror #10
    18b8:	61547870 	cmpvs	r4, r0, ror r8
    18bc:	6f436b73 	svcvs	0x00436b73
    18c0:	78006564 	stmdavc	r0, {r2, r5, r6, r8, sl, sp, lr}
    18c4:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0x54e
    18c8:	6b736154 	blvs	1cd9e20 <_Min_Stack_Size+0x1cd9a20>
    18cc:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
    18d0:	546b636f 	strbtpl	r6, [fp], #-879	; 0x36f
    18d4:	00656d69 	rsbeq	r6, r5, r9, ror #26
    18d8:	6f507870 	svcvs	0x00507870
    18dc:	6e497472 	mcrvs	4, 2, r7, cr9, cr2, {3}
    18e0:	61697469 	cmnvs	r9, r9, ror #8
    18e4:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0x96c
    18e8:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
    18ec:	4465006b 	strbtmi	r0, [r5], #-107	; 0x6b
    18f0:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xc65
    18f4:	75006465 	strvc	r6, [r0, #-1125]	; 0x465
    18f8:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    18fc:	7465476b 	strbtvc	r4, [r5], #-1899	; 0x76b
    1900:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
    1904:	74536d65 	ldrbvc	r6, [r3], #-3429	; 0xd65
    1908:	00657461 	rsbeq	r7, r5, r1, ror #8
    190c:	52767270 	rsbspl	r7, r6, #112, 4
    1910:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
    1914:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0x54e
    1918:	6b736154 	blvs	1cd9e70 <_Min_Stack_Size+0x1cd9a70>
    191c:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
    1920:	546b636f 	strbtpl	r6, [fp], #-879	; 0x36f
    1924:	00656d69 	rsbeq	r6, r5, r9, ror #26
    1928:	654e7875 	strbvs	r7, [lr, #-2165]	; 0x875
    192c:	69725077 	ldmdbvs	r2!, {r0, r1, r2, r4, r5, r6, ip, lr}^
    1930:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1934:	656d0079 	strbvs	r0, [sp, #-121]!	; 0x79
    1938:	7465736d 	strbtvc	r7, [r5], #-877	; 0x36d
    193c:	54787000 	ldrbtpl	r7, [r8], #-0
    1940:	4f656d69 	svcmi	0x00656d69
    1944:	75007475 	strvc	r7, [r0, #-1141]	; 0x475
    1948:	756f436c 	strbvc	r4, [pc, #-876]!	; 15e4 <_Min_Stack_Size+0x11e4>
    194c:	7500746e 	strvc	r7, [r0, #-1134]	; 0x46e
    1950:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    1954:	6d754e6b 	ldclvs	14, cr4, [r5, #-428]!	; 0xfffffe54
    1958:	00726562 	rsbseq	r6, r2, r2, ror #10
    195c:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    1960:	6972506b 	ldmdbvs	r2!, {r0, r1, r3, r5, r6, ip, lr}^
    1964:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    1968:	74655379 	strbtvc	r5, [r5], #-889	; 0x379
    196c:	61546500 	cmpvs	r4, r0, lsl #10
    1970:	74536b73 	ldrbvc	r6, [r3], #-2931	; 0xb73
    1974:	00657461 	rsbeq	r7, r5, r1, ror #8
    1978:	6f685378 	svcvs	0x00685378
    197c:	44646c75 	strbtmi	r6, [r4], #-3189	; 0xc75
    1980:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1984:	76727000 	ldrbtvc	r7, [r2], -r0
    1988:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    198c:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    1990:	43546573 	cmpmi	r4, #482344960	; 0x1cc00000
    1994:	72615642 	rsbvc	r5, r1, #69206016	; 0x4200000
    1998:	6c626169 	stfvse	f6, [r2], #-420	; 0xfffffe5c
    199c:	76007365 	strvc	r7, [r0], -r5, ror #6
    19a0:	6b736154 	blvs	1cd9ef8 <_Min_Stack_Size+0x1cd9af8>
    19a4:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0x544
    19a8:	76006574 			; <UNDEFINED> instruction: 0x76006574
    19ac:	6b736154 	blvs	1cd9f04 <_Min_Stack_Size+0x1cd9b04>
    19b0:	74697753 	strbtvc	r7, [r9], #-1875	; 0x753
    19b4:	6f436863 	svcvs	0x00436863
    19b8:	7865746e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    19bc:	4e780074 	mrcmi	0, 3, r0, cr8, cr4, {3}
    19c0:	664f6d75 			; <UNDEFINED> instruction: 0x664f6d75
    19c4:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
    19c8:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
    19cc:	78700073 	ldmdavc	r0!, {r0, r1, r4, r5, r6}^
    19d0:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    19d4:	54746e65 	ldrbtpl	r6, [r4], #-3685	; 0xe65
    19d8:	65004243 	strvs	r4, [r0, #-579]	; 0x243
    19dc:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    19e0:	53746e65 	cmnpl	r4, #1616	; 0x650
    19e4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    19e8:	41547800 	cmpmi	r4, r0, lsl #16
    19ec:	535f4b53 	cmppl	pc, #84992	; 0x14c00
    19f0:	55544154 	ldrbpl	r4, [r4, #-340]	; 0x154
    19f4:	78700053 	ldmdavc	r0!, {r0, r1, r4, r6}^
    19f8:	616c6544 	cmnvs	ip, r4, asr #10
    19fc:	54646579 	strbtpl	r6, [r4], #-1401	; 0x579
    1a00:	4c6b7361 	stclmi	3, cr7, [fp], #-388	; 0xfffffe7c
    1a04:	00747369 	rsbseq	r7, r4, r9, ror #6
    1a08:	54767270 	ldrbtpl	r7, [r6], #-624	; 0x270
    1a0c:	496b7361 	stmdbmi	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1a10:	73615473 	cmnvc	r1, #1929379840	; 0x73000000
    1a14:	7375536b 	cmnvc	r5, #-1409286143	; 0xac000001
    1a18:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
    1a1c:	76006465 	strvc	r6, [r0], -r5, ror #8
    1a20:	6b736154 	blvs	1cd9f78 <_Min_Stack_Size+0x1cd9b78>
    1a24:	54746553 	ldrbtpl	r6, [r4], #-1363	; 0x553
    1a28:	4e6b7361 	cdpmi	3, 6, cr7, cr11, cr1, {3}
    1a2c:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
    1a30:	53780072 	cmnpl	r8, #114	; 0x72
    1a34:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    1a38:	71655268 	cmnvc	r5, r8, ror #4
    1a3c:	65726975 	ldrbvs	r6, [r2, #-2421]!	; 0x975
    1a40:	78700064 	ldmdavc	r0!, {r2, r5, r6}^
    1a44:	6574754d 	ldrbvs	r7, [r4, #-1357]!	; 0x54d
    1a48:	6c6f4878 	stclvs	8, cr4, [pc], #-480	; 1870 <_Min_Stack_Size+0x1470>
    1a4c:	00726564 	rsbseq	r6, r2, r4, ror #10
    1a50:	74537870 	ldrbvc	r7, [r3], #-2160	; 0x870
    1a54:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1a58:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    1a5c:	446f546b 	strbtmi	r5, [pc], #-1131	; 1a64 <_Min_Stack_Size+0x1664>
    1a60:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xc65
    1a64:	54780065 	ldrbtpl	r0, [r8], #-101	; 0x65
    1a68:	546b7361 	strbtpl	r7, [fp], #-865	; 0x361
    1a6c:	7375536f 	cmnvc	r5, #-1140850687	; 0xbc000001
    1a70:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
    1a74:	6f507600 	svcvs	0x00507600
    1a78:	6e457472 	mcrvs	4, 2, r7, cr5, cr2, {3}
    1a7c:	68635364 	stmdavs	r3!, {r2, r5, r6, r8, r9, ip, lr}^
    1a80:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    1a84:	70007265 	andvc	r7, r0, r5, ror #4
    1a88:	65725078 	ldrbvs	r5, [r2, #-120]!	; 0x78
    1a8c:	756f6976 	strbvc	r6, [pc, #-2422]!	; 111e <_Min_Stack_Size+0xd1e>
    1a90:	6b615773 	blvs	1857864 <_Min_Stack_Size+0x1857464>
    1a94:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!	; 0xfffffe6c
    1a98:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
    1a9c:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1aa0:	69546465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, sp, lr}^
    1aa4:	00736b63 	rsbseq	r6, r3, r3, ror #22
    1aa8:	61745365 	cmnvs	r4, r5, ror #6
    1aac:	70006574 	andvc	r6, r0, r4, ror r5
    1ab0:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
    1ab4:	6174536b 	cmnvs	r4, fp, ror #6
    1ab8:	41737574 	cmnmi	r3, r4, ror r5
    1abc:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    1ac0:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
    1ac4:	00736b63 	rsbseq	r6, r3, r3, ror #22
    1ac8:	72417875 	subvc	r7, r1, #7667712	; 0x750000
    1acc:	53796172 	cmnpl	r9, #-2147483620	; 0x8000001c
    1ad0:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1ad4:	6e755265 	cdpvs	2, 7, cr5, cr5, cr5, {3}
    1ad8:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    1adc:	526c7500 	rsbpl	r7, ip, #0, 10
    1ae0:	69546e75 	ldmdbvs	r4, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
    1ae4:	6f43656d 	svcvs	0x0043656d
    1ae8:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
    1aec:	78750072 	ldmdavc	r5!, {r1, r4, r5, r6}^
    1af0:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
    1af4:	6f697250 	svcvs	0x00697250
    1af8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1afc:	61547600 	cmpvs	r4, r0, lsl #12
    1b00:	65446b73 	strbvs	r6, [r4, #-2931]	; 0xb73
    1b04:	5579616c 	ldrbpl	r6, [r9, #-364]!	; 0x16c
    1b08:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
    1b0c:	50787500 	rsbspl	r7, r8, r0, lsl #10
    1b10:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1b14:	55797469 	ldrbpl	r7, [r9, #-1129]!	; 0x469
    1b18:	4f646573 	svcmi	0x00646573
    1b1c:	746e456e 	strbtvc	r4, [lr], #-1390	; 0x56e
    1b20:	54007972 	strpl	r7, [r0], #-2418	; 0x972
    1b24:	745f4243 	ldrbvc	r4, [pc], #-579	; 1b2c <_Min_Stack_Size+0x172c>
    1b28:	76727000 	ldrbtvc	r7, [r2], -r0
    1b2c:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0x544
    1b30:	43546574 	cmpmi	r4, #116, 10	; 0x1d000000
    1b34:	42650042 	rsbmi	r0, r5, #66	; 0x42
    1b38:	6b636f6c 	blvs	18dd8f0 <_Min_Stack_Size+0x18dd4f0>
    1b3c:	76006465 	strvc	r6, [r0], -r5, ror #8
    1b40:	6b736154 	blvs	1cda098 <_Min_Stack_Size+0x1cd9c98>
    1b44:	70737553 	rsbsvc	r7, r3, r3, asr r5
    1b48:	00646e65 	rsbeq	r6, r4, r5, ror #28
    1b4c:	69467870 	stmdbvs	r6, {r4, r5, r6, fp, ip, sp, lr}^
    1b50:	54747372 	ldrbtpl	r7, [r4], #-882	; 0x372
    1b54:	70004243 	andvc	r4, r0, r3, asr #4
    1b58:	61547672 	cmpvs	r4, r2, ror r6
    1b5c:	68436b73 	stmdavs	r3, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    1b60:	466b6365 	strbtmi	r6, [fp], -r5, ror #6
    1b64:	53656572 	cmnpl	r5, #478150656	; 0x1c800000
    1b68:	6b636174 	blvs	18da140 <_Min_Stack_Size+0x18d9d40>
    1b6c:	63617053 	cmnvs	r1, #83	; 0x53
    1b70:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
    1b74:	6b736154 	blvs	1cda0cc <_Min_Stack_Size+0x1cd9ccc>
    1b78:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0x547
    1b7c:	4e6b7361 	cdpmi	3, 6, cr7, cr11, cr1, {3}
    1b80:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xd75
    1b84:	52780072 	rsbspl	r0, r8, #114	; 0x72
    1b88:	6f696765 	svcvs	0x00696765
    1b8c:	7000736e 	andvc	r7, r0, lr, ror #6
    1b90:	64417672 	strbvs	r7, [r1], #-1650	; 0x672
    1b94:	72754364 	rsbsvc	r4, r5, #100, 6	; 0x90000001
    1b98:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
    1b9c:	6b736154 	blvs	1cda0f4 <_Min_Stack_Size+0x1cd9cf4>
    1ba0:	65446f54 	strbvs	r6, [r4, #-3924]	; 0xf54
    1ba4:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0x16c
    1ba8:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
    1bac:	73750074 	cmnvc	r5, #116	; 0x74
    1bb0:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
    1bb4:	6769486b 	strbvs	r4, [r9, -fp, ror #16]!
    1bb8:	74615768 	strbtvc	r5, [r1], #-1896	; 0x768
    1bbc:	614d7265 	cmpvs	sp, r5, ror #4
    1bc0:	75006b72 	strvc	r6, [r0, #-2930]	; 0xb72
    1bc4:	72754378 	rsbsvc	r4, r5, #120, 6	; 0xe0000001
    1bc8:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
    1bcc:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    1bd0:	664f7265 	strbvs	r7, [pc], -r5, ror #4
    1bd4:	6b736154 	blvs	1cda12c <_Min_Stack_Size+0x1cd9d2c>
    1bd8:	54780073 	ldrbtpl	r0, [r8], #-115	; 0x73
    1bdc:	49656d69 	stmdbmi	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    1be0:	6572636e 	ldrbvs	r6, [r2, #-878]!	; 0x36e
    1be4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
    1be8:	54787000 	ldrbtpl	r7, [r8], #-0
    1bec:	75004243 	strvc	r4, [r0, #-579]	; 0x243
    1bf0:	68635378 	stmdavs	r3!, {r3, r4, r5, r6, r8, r9, ip, lr}^
    1bf4:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    1bf8:	75537265 	ldrbvc	r7, [r3, #-613]	; 0x265
    1bfc:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
    1c00:	00646564 	rsbeq	r6, r4, r4, ror #10
    1c04:	53787570 	cmnpl	r8, #112, 10	; 0x1c000000
    1c08:	6b636174 	blvs	18da1e0 <_Min_Stack_Size+0x18d9de0>
    1c0c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1c10:	78007265 	stmdavc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    1c14:	6b736154 	blvs	1cda16c <_Min_Stack_Size+0x1cd9d6c>
    1c18:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0x547
    1c1c:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
    1c20:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1c24:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 1b14 <_Min_Stack_Size+0x1714>
    1c28:	00525349 	subseq	r5, r2, r9, asr #6
    1c2c:	6f547870 	svcvs	0x00547870
    1c30:	53664f70 	cmnpl	r6, #112, 30	; 0x1c0
    1c34:	6b636174 	blvs	18da20c <_Min_Stack_Size+0x18d9e0c>
    1c38:	61547600 	cmpvs	r4, r0, lsl #12
    1c3c:	65526b73 	ldrbvs	r6, [r2, #-2931]	; 0xb73
    1c40:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0x573
    1c44:	76727000 	ldrbtvc	r7, [r2], -r0
    1c48:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1c4c:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    1c50:	61546573 	cmpvs	r4, r3, ror r5
    1c54:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    1c58:	00737473 	rsbseq	r7, r3, r3, ror r4
    1c5c:	76457870 			; <UNDEFINED> instruction: 0x76457870
    1c60:	4c746e65 	ldclmi	14, cr6, [r4], #-404	; 0xfffffe6c
    1c64:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
    1c68:	006d6574 	rsbeq	r6, sp, r4, ror r5
    1c6c:	72437870 	subvc	r7, r3, #112, 16	; 0x700000
    1c70:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0x165
    1c74:	73615464 	cmnvc	r1, #100, 8	; 0x64000000
    1c78:	7270006b 	rsbsvc	r0, r0, #107	; 0x6b
    1c7c:	65684376 	strbvs	r4, [r8, #-886]!	; 0x376
    1c80:	61546b63 	cmpvs	r4, r3, ror #22
    1c84:	57736b73 			; <UNDEFINED> instruction: 0x57736b73
    1c88:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
    1c8c:	6554676e 	ldrbvs	r6, [r4, #-1902]	; 0x76e
    1c90:	6e696d72 	mcrvs	13, 3, r6, cr9, cr2, {3}
    1c94:	6f697461 	svcvs	0x00697461
    1c98:	7875006e 	ldmdavc	r5!, {r1, r2, r3, r5, r6}^
    1c9c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    1ca0:	7500656c 	strvc	r6, [r0, #-1388]	; 0x56c
    1ca4:	72754378 	rsbsvc	r4, r5, #120, 6	; 0xe0000001
    1ca8:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
    1cac:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0x142
    1cb0:	6f697250 	svcvs	0x00697250
    1cb4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1cb8:	69597800 	ldmdbvs	r9, {fp, ip, sp, lr}^
    1cbc:	50646c65 	rsbpl	r6, r4, r5, ror #24
    1cc0:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1cc4:	7800676e 	stmdavc	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    1cc8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1ccc:	65755172 	ldrbvs	r5, [r5, #-370]!	; 0x172
    1cd0:	75006575 	strvc	r6, [r0, #-1397]	; 0x575
    1cd4:	74754178 	ldrbtvc	r4, [r5], #-376	; 0x178
    1cd8:	6c65526f 	sfmvs	f5, 2, [r5], #-444	; 0xfffffe44
    1cdc:	0064616f 	rsbeq	r6, r4, pc, ror #2
    1ce0:	43767270 	cmnmi	r6, #112, 4
    1ce4:	6b636568 	blvs	18db28c <_Min_Stack_Size+0x18dae8c>
    1ce8:	56726f46 	ldrbtpl	r6, [r2], -r6, asr #30
    1cec:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xc61
    1cf0:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
    1cf4:	51646e41 	cmnpl	r4, r1, asr #28
    1cf8:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    1cfc:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
    1d00:	69547765 	ldmdbvs	r4, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1d04:	0072656d 	rsbseq	r6, r2, sp, ror #10
    1d08:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1d0c:	72615072 	rsbvc	r5, r1, #114	; 0x72
    1d10:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xd61
    1d14:	745f7265 	ldrbvc	r7, [pc], #-613	; 1d1c <_Min_Stack_Size+0x191c>
    1d18:	54787000 	ldrbtpl	r7, [r8], #-0
    1d1c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    1d20:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
    1d24:	72655773 	rsbvc	r5, r5, #30146560	; 0x1cc0000
    1d28:	69775365 	ldmdbvs	r7!, {r0, r2, r5, r6, r8, r9, ip, lr}^
    1d2c:	65686374 	strbvs	r6, [r8, #-884]!	; 0x374
    1d30:	6d740064 	ldclvs	0, cr0, [r4, #-400]!	; 0xfffffe70
    1d34:	6d695472 	cfstrdvs	mvd5, [r9, #-456]!	; 0xfffffe38
    1d38:	6f437265 	svcvs	0x00437265
    1d3c:	6f72746e 	svcvs	0x0072746e
    1d40:	4178006c 	cmnmi	r8, ip, rrx
    1d44:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    1d48:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!	; 0xfffffe6c
    1d4c:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1d50:	00327473 	eorseq	r7, r2, r3, ror r4
    1d54:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
    1d58:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
    1d5c:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
    1d60:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
    1d64:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    1d68:	694c6576 	stmdbvs	ip, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    1d6c:	70007473 	andvc	r7, r0, r3, ror r4
    1d70:	72754378 	rsbsvc	r4, r5, #120, 6	; 0xe0000001
    1d74:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
    1d78:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1d7c:	73694c72 	cmnvc	r9, #29184	; 0x7200
    1d80:	72700074 	rsbsvc	r0, r0, #116	; 0x74
    1d84:	69775376 	ldmdbvs	r7!, {r1, r2, r4, r5, r6, r8, r9, ip, lr}^
    1d88:	54686374 	strbtpl	r6, [r8], #-884	; 0x374
    1d8c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    1d90:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
    1d94:	50780073 	rsbspl	r0, r8, r3, ror r0
    1d98:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    1d9c:	69547373 	ldmdbvs	r4, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^
    1da0:	4e72656d 	cdpmi	5, 7, cr6, cr2, cr13, {3}
    1da4:	7000776f 	andvc	r7, r0, pc, ror #14
    1da8:	61537672 	cmpvs	r3, r2, ror r6
    1dac:	656c706d 	strbvs	r7, [ip, #-109]!	; 0x6d
    1db0:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1db4:	00776f4e 	rsbseq	r6, r7, lr, asr #30
    1db8:	74634178 	strbtvc	r4, [r3], #-376	; 0x178
    1dbc:	54657669 	strbtpl	r7, [r5], #-1641	; 0x669
    1dc0:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    1dc4:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
    1dc8:	6d740031 	ldclvs	0, cr0, [r4, #-196]!	; 0xffffff3c
    1dcc:	6d695472 	cfstrdvs	mvd5, [r9, #-456]!	; 0xfffffe38
    1dd0:	75517265 	ldrbvc	r7, [r1, #-613]	; 0x265
    1dd4:	4d657565 	cfstr64mi	mvdx7, [r5, #-404]!	; 0xfffffe6c
    1dd8:	61737365 	cmnvs	r3, r5, ror #6
    1ddc:	78006567 	stmdavc	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    1de0:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1de4:	72615072 	rsbvc	r5, r1, #114	; 0x72
    1de8:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xd61
    1dec:	00737265 	rsbseq	r7, r3, r5, ror #4
    1df0:	6d656144 	stfvse	f6, [r5, #-272]!	; 0xfffffef0
    1df4:	61546e6f 	cmpvs	r4, pc, ror #28
    1df8:	654d6b73 	strbvs	r6, [sp, #-2931]	; 0xb73
    1dfc:	67617373 			; <UNDEFINED> instruction: 0x67617373
    1e00:	00745f65 	rsbseq	r5, r4, r5, ror #30
    1e04:	4d495478 	cfstrdmi	mvd5, [r9, #-480]	; 0xfffffe20
    1e08:	74005245 	strvc	r5, [r0], #-581	; 0x245
    1e0c:	6954726d 	ldmdbvs	r4, {r0, r2, r3, r5, r6, r9, ip, sp, lr}^
    1e10:	5072656d 	rsbspl	r6, r2, sp, ror #10
    1e14:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    1e18:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
    1e1c:	54780073 	ldrbtpl	r0, [r8], #-115	; 0x73
    1e20:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    1e24:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1e28:	6e49646f 	cdpvs	4, 4, cr6, cr9, cr15, {3}
    1e2c:	6b636954 	blvs	18dc384 <_Min_Stack_Size+0x18dbf84>
    1e30:	4d780073 	ldclmi	0, cr0, [r8, #-460]!	; 0xfffffe34
    1e34:	61737365 	cmnvs	r3, r5, ror #6
    1e38:	61566567 	cmpvs	r6, r7, ror #10
    1e3c:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1e40:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1e44:	6e614872 	mcrvs	8, 3, r4, cr1, cr2, {3}
    1e48:	5f656c64 	svcpl	0x00656c64
    1e4c:	52780074 	rsbspl	r0, r8, #116	; 0x74
    1e50:	616f6c65 	cmnvs	pc, r5, ror #24
    1e54:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
    1e58:	63700065 	cmnvs	r0, #101	; 0x65
    1e5c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1e60:	6d614e72 	stclvs	14, cr4, [r1, #-456]!	; 0xfffffe38
    1e64:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
    1e68:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
    1e6c:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
    1e70:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1e74:	73694c72 	cmnvc	r9, #29184	; 0x7200
    1e78:	43780074 	cmnmi	r8, #116	; 0x74
    1e7c:	616d6d6f 	cmnvs	sp, pc, ror #26
    1e80:	6954646e 	ldmdbvs	r4, {r1, r2, r3, r5, r6, sl, sp, lr}^
    1e84:	7000656d 	andvc	r6, r0, sp, ror #10
    1e88:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
    1e8c:	78007265 	stmdavc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    1e90:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0x54e
    1e94:	69707845 	ldmdbvs	r0!, {r0, r2, r6, fp, ip, sp, lr}^
    1e98:	69547972 	ldmdbvs	r4, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1e9c:	7000656d 	andvc	r6, r0, sp, ror #10
    1ea0:	6d695476 	cfstrdvs	mvd5, [r9, #-472]!	; 0xfffffe28
    1ea4:	44497265 	strbmi	r7, [r9], #-613	; 0x265
    1ea8:	76727000 	ldrbtvc	r7, [r2], -r0
    1eac:	4e746547 	cdpmi	5, 7, cr6, cr4, cr7, {2}
    1eb0:	45747865 	ldrbmi	r7, [r4, #-2149]!	; 0x865
    1eb4:	72697078 	rsbvc	r7, r9, #120	; 0x78
    1eb8:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!	; 0xfffffe6c
    1ebc:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
    1ec0:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1ec4:	6d754e72 	ldclvs	14, cr4, [r5, #-456]!	; 0xfffffe38
    1ec8:	00726562 	rsbseq	r6, r2, r2, ror #10
    1ecc:	50767270 	rsbspl	r7, r6, r0, ror r2
    1ed0:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    1ed4:	65527373 	ldrbvs	r7, [r2, #-883]	; 0x373
    1ed8:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    1edc:	6f436465 	svcvs	0x00436465
    1ee0:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
    1ee4:	78007364 	stmdavc	r0, {r2, r5, r6, r8, r9, ip, sp, lr}
    1ee8:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!	; 0xfffffef4
    1eec:	49646e61 	stmdbmi	r4!, {r0, r5, r6, r9, sl, fp, sp, lr}^
    1ef0:	54780044 	ldrbtpl	r0, [r8], #-68	; 0x44
    1ef4:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    1ef8:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0x94c
    1efc:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
    1f00:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
    1f04:	6f4e656d 	svcvs	0x004e656d
    1f08:	76700077 			; <UNDEFINED> instruction: 0x76700077
    1f0c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1f10:	74654772 	strbtvc	r4, [r5], #-1906	; 0x772
    1f14:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1f18:	00444972 	subeq	r4, r4, r2, ror r9
    1f1c:	73655278 	cmnvc	r5, #120, 4	; 0x80000007
    1f20:	00746c75 	rsbseq	r6, r4, r5, ror ip
    1f24:	694c7870 	stmdbvs	ip, {r4, r5, r6, fp, ip, sp, lr}^
    1f28:	61577473 	cmpvs	r7, r3, ror r4
    1f2c:	706d4573 	rsbvc	r4, sp, r3, ror r5
    1f30:	70007974 	andvc	r7, r0, r4, ror r9
    1f34:	72507672 	subsvc	r7, r0, #119537664	; 0x7200000
    1f38:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    1f3c:	6d695473 	cfstrdvs	mvd5, [r9, #-460]!	; 0xfffffe34
    1f40:	724f7265 	subvc	r7, pc, #1342177286	; 0x50000006
    1f44:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1f48:	7361546b 	cmnvc	r1, #1795162112	; 0x6b000000
    1f4c:	7270006b 	rsbsvc	r0, r0, #107	; 0x6b
    1f50:	6f725076 	svcvs	0x00725076
    1f54:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    1f58:	69707845 	ldmdbvs	r0!, {r0, r2, r6, fp, ip, sp, lr}^
    1f5c:	54646572 	strbtpl	r6, [r4], #-1394	; 0x572
    1f60:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    1f64:	654d7800 	strbvs	r7, [sp, #-2048]	; 0x800
    1f68:	67617373 			; <UNDEFINED> instruction: 0x67617373
    1f6c:	69540065 	ldmdbvs	r4, {r0, r2, r5, r6}^
    1f70:	4372656d 	cmnmi	r2, #457179136	; 0x1b400000
    1f74:	626c6c61 	rsbvs	r6, ip, #24832	; 0x6100
    1f78:	466b6361 	strbtmi	r6, [fp], -r1, ror #6
    1f7c:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
    1f80:	5f6e6f69 	svcpl	0x006e6f69
    1f84:	54780074 	ldrbtpl	r0, [r8], #-116	; 0x74
    1f88:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    1f8c:	6e497349 	cdpvs	3, 4, cr7, cr9, cr9, {2}
    1f90:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    1f94:	694c6576 	stmdbvs	ip, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    1f98:	78007473 	stmdavc	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    1f9c:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
    1fa0:	49656761 	stmdbmi	r5!, {r0, r5, r6, r8, r9, sl, sp, lr}^
    1fa4:	54780044 	ldrbtpl	r0, [r8], #-68	; 0x44
    1fa8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    1fac:	61657243 	cmnvs	r5, r3, asr #4
    1fb0:	78006574 	stmdavc	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
    1fb4:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1fb8:	6e654772 	mcrvs	7, 3, r4, cr5, cr2, {3}
    1fbc:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
    1fc0:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!	; 0xfffffef4
    1fc4:	00646e61 	rsbeq	r6, r4, r1, ror #28
    1fc8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1fcc:	00745f72 	rsbseq	r5, r4, r2, ror pc
    1fd0:	54767270 	ldrbtpl	r7, [r6], #-624	; 0x270
    1fd4:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    1fd8:	6b736154 	blvs	1cda530 <_Min_Stack_Size+0x1cda130>
    1fdc:	43787000 	cmnmi	r8, #0
    1fe0:	626c6c61 	rsbvs	r6, ip, #24832	; 0x6100
    1fe4:	466b6361 	strbtmi	r6, [fp], -r1, ror #6
    1fe8:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
    1fec:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1ff0:	74704f78 	ldrbtvc	r4, [r0], #-3960	; 0xf78
    1ff4:	616e6f69 	cmnvs	lr, r9, ror #30
    1ff8:	6c61566c 	stclvs	6, cr5, [r1], #-432	; 0xfffffe50
    1ffc:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    2000:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0x14c
    2004:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    2008:	6f682f00 	svcvs	0x00682f00
    200c:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 1e60 <_Min_Stack_Size+0x1a60>
    2010:	616c6965 	cmnvs	ip, r5, ror #18
    2014:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2018:	706f746b 	rsbvc	r7, pc, fp, ror #8
    201c:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
    2020:	705f6c61 	subsvc	r6, pc, r1, ror #24
    2024:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    2028:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
    202c:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
    2030:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    2034:	2f646564 	svccs	0x00646564
    2038:	6f747561 	svcvs	0x00747561
    203c:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
    2040:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	; 0xffffff44
    2044:	2e737265 	cdpcs	2, 7, cr7, cr3, cr5, {3}
    2048:	4e780063 	cdpmi	0, 7, cr0, cr8, cr3, {3}
    204c:	45747865 	ldrbmi	r7, [r4, #-2149]!	; 0x865
    2050:	72697078 	rsbvc	r7, r9, #120	; 0x78
    2054:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!	; 0xfffffe6c
    2058:	54780065 	ldrbtpl	r0, [r8], #-101	; 0x65
    205c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    2060:	69547349 	ldmdbvs	r4, {r0, r3, r6, r8, r9, ip, sp, lr}^
    2064:	4172656d 	cmnmi	r2, sp, ror #10
    2068:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    206c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    2070:	2f656d6f 	svccs	0x00656d6f
    2074:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
    2078:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
    207c:	6f746b73 	svcvs	0x00746b73
    2080:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    2084:	5f6c616e 	svcpl	0x006c616e
    2088:	6a6f7270 	bvs	1bdea50 <_Min_Stack_Size+0x1bde650>
    208c:	5f746365 	svcpl	0x00746365
    2090:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
    2094:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    2098:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    209c:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
    20a0:	616f426f 	cmnvs	pc, pc, ror #4
    20a4:	6f702f74 	svcvs	0x00702f74
    20a8:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
    20ac:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
    20b0:	412f4343 	teqmi	pc, r3, asr #6
    20b4:	435f4d52 	cmpmi	pc, #5248	; 0x1480
    20b8:	2f46344d 	svccs	0x0046344d
    20bc:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xf70
    20c0:	7000632e 	andvc	r6, r0, lr, lsr #6
    20c4:	61547672 	cmpvs	r4, r2, ror r6
    20c8:	78456b73 	stmdavc	r5, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    20cc:	72457469 	subvc	r7, r5, #1761607680	; 0x69000000
    20d0:	00726f72 	rsbseq	r6, r2, r2, ror pc
    20d4:	724f6c75 	subvc	r6, pc, #29952	; 0x7500
    20d8:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
    20dc:	72506c61 	subsvc	r6, r0, #24832	; 0x6100
    20e0:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    20e4:	70007974 	andvc	r7, r0, r4, ror r9
    20e8:	646f4378 	strbtvs	r4, [pc], #-888	; 20f0 <_Min_Stack_Size+0x1cf0>
    20ec:	72700065 	rsbsvc	r0, r0, #101	; 0x65
    20f0:	726f5076 	rsbvc	r5, pc, #118	; 0x76
    20f4:	61745374 	cmnvs	r4, r4, ror r3
    20f8:	69467472 	stmdbvs	r6, {r1, r4, r5, r6, sl, ip, sp, lr}^
    20fc:	54747372 	ldrbtpl	r7, [r4], #-882	; 0x372
    2100:	006b7361 	rsbeq	r7, fp, r1, ror #6
    2104:	46637570 			; <UNDEFINED> instruction: 0x46637570
    2108:	74737269 	ldrbtvc	r7, [r3], #-617	; 0x269
    210c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    2110:	6f697250 	svcvs	0x00697250
    2114:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2118:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    211c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    2120:	43787500 	cmnmi	r8, #0, 10
    2124:	69746972 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2128:	4e6c6163 	powmiez	f6, f4, f3
    212c:	69747365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
    2130:	7500676e 	strvc	r6, [r0, #-1902]	; 0x76e
    2134:	78614d63 	stmdavc	r1!, {r0, r1, r5, r6, r8, sl, fp, lr}^
    2138:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    213c:	506c6c61 	rsbpl	r6, ip, r1, ror #24
    2140:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    2144:	00797469 	rsbseq	r7, r9, r9, ror #8
    2148:	75436c75 	strbvc	r6, [r3, #-3189]	; 0xc75
    214c:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    2150:	746e4974 	strbtvc	r4, [lr], #-2420	; 0x974
    2154:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    2158:	75007470 	strvc	r7, [r0, #-1136]	; 0x470
    215c:	72754363 	rsbsvc	r4, r5, #-1946157055	; 0x8c000001
    2160:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
    2164:	6f697250 	svcvs	0x00697250
    2168:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    216c:	43565300 	cmpmi	r6, #0, 6
    2170:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
    2174:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    2178:	6f507600 	svcvs	0x00507600
    217c:	65537472 	ldrbvs	r7, [r3, #-1138]	; 0x472
    2180:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0x574
    2184:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    2188:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    218c:	70757272 	rsbsvc	r7, r5, r2, ror r2
    2190:	6c750074 	ldclvs	0, cr0, [r5], #-464	; 0xfffffe30
    2194:	5078614d 	rsbspl	r6, r8, sp, asr #2
    2198:	52474952 	subpl	r4, r7, #1343488	; 0x148000
    219c:	5650554f 	ldrbpl	r5, [r0], -pc, asr #10
    21a0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    21a4:	4e6c7500 	cdpmi	5, 6, cr7, cr12, cr0, {0}
    21a8:	614d7765 	cmpvs	sp, r5, ror #14
    21ac:	61566b73 	cmpvs	r6, r3, ror fp
    21b0:	0065756c 	rsbeq	r7, r5, ip, ror #10
    21b4:	6e496370 	mcrvs	3, 2, r6, cr9, cr0, {3}
    21b8:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    21bc:	50747075 	rsbspl	r7, r4, r5, ror r0
    21c0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    21c4:	52797469 	rsbspl	r7, r9, #1761607680	; 0x69000000
    21c8:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    21cc:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
    21d0:	73795300 	cmnvc	r9, #0, 6
    21d4:	6b636954 	blvs	18dc72c <_Min_Stack_Size+0x18dc32c>
    21d8:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
    21dc:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    21e0:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
    21e4:	5f565364 	svcpl	0x00565364
    21e8:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    21ec:	0072656c 	rsbseq	r6, r2, ip, ror #10
    21f0:	614d6375 	hvcvs	54837	; 0xd635
    21f4:	69725078 	ldmdbvs	r2!, {r3, r4, r5, r6, ip, lr}^
    21f8:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    21fc:	6c615679 	stclvs	6, cr5, [r1], #-484	; 0xfffffe1c
    2200:	76006575 			; <UNDEFINED> instruction: 0x76006575
    2204:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
    2208:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    220c:	4656656c 	ldrbmi	r6, [r6], -ip, ror #10
    2210:	50780050 	rsbspl	r0, r8, r0, asr r0
    2214:	4774726f 	ldrbmi	r7, [r4, -pc, ror #4]!
    2218:	72467465 	subvc	r7, r6, #1694498816	; 0x65000000
    221c:	65486565 	strbvs	r6, [r8, #-1381]	; 0x565
    2220:	69537061 	ldmdbvs	r3, {r0, r5, r6, ip, sp, lr}^
    2224:	2f00657a 	svccs	0x0000657a
    2228:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
    222c:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
    2230:	442f616c 	strtmi	r6, [pc], #-364	; 2238 <_Min_Stack_Size+0x1e38>
    2234:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    2238:	662f706f 	strtvs	r7, [pc], -pc, rrx
    223c:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
    2240:	6f72705f 	svcvs	0x0072705f
    2244:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    2248:	3130325f 	teqcc	r0, pc, asr r2
    224c:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
    2250:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    2254:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
    2258:	6f426f74 	svcvs	0x00426f74
    225c:	702f7461 	eorvc	r7, pc, r1, ror #8
    2260:	6174726f 	cmnvs	r4, pc, ror #4
    2264:	2f656c62 	svccs	0x00656c62
    2268:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!	; 0xfffffecc
    226c:	2f676e61 	svccs	0x00676e61
    2270:	70616568 	rsbvc	r6, r1, r8, ror #10
    2274:	632e315f 	teqvs	lr, #-1073741801	; 0xc0000017
    2278:	52767000 	rsbspl	r7, r6, #0
    227c:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
    2280:	6375006e 	cmnvs	r5, #110	; 0x6e
    2284:	70616548 	rsbvc	r6, r1, r8, asr #10
    2288:	6f507600 	svcvs	0x00507600
    228c:	6e497472 	mcrvs	4, 2, r7, cr9, cr2, {3}
    2290:	61697469 	cmnvs	r9, r9, ror #8
    2294:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0x96c
    2298:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    229c:	7800736b 	stmdavc	r0, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}
    22a0:	746e6157 	strbtvc	r6, [lr], #-343	; 0x157
    22a4:	69536465 	ldmdbvs	r3, {r0, r2, r5, r6, sl, sp, lr}^
    22a8:	7000657a 	andvc	r6, r0, sl, ror r5
    22ac:	6c416375 	mcrrvs	3, 7, r6, r1, cr5
    22b0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
    22b4:	61654864 	cmnvs	r5, r4, ror #16
    22b8:	4e780070 	mrcmi	0, 3, r0, cr8, cr0, {3}
    22bc:	46747865 	ldrbtmi	r7, [r4], -r5, ror #16
    22c0:	42656572 	rsbmi	r6, r5, #478150656	; 0x1c800000
    22c4:	00657479 	rsbeq	r7, r5, r9, ror r4
    22c8:	4349564e 	movtmi	r5, #38478	; 0x964e
    22cc:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    22d0:	41490065 	cmpmi	r9, r5, rrx
    22d4:	4e005242 	cdpmi	2, 0, cr5, cr0, cr2, {2}
    22d8:	5f434956 	svcpl	0x00434956
    22dc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    22e0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    22e4:	00666544 	rsbeq	r6, r6, r4, asr #10
    22e8:	4349564e 	movtmi	r5, #38478	; 0x964e
    22ec:	5152495f 	cmppl	r2, pc, asr r9
    22f0:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    22f4:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
    22f8:	5300646d 	movwpl	r6, #1133	; 0x46d
    22fc:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    2300:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    2304:	6f534b4c 	svcvs	0x00534b4c
    2308:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    230c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    2310:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    2314:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    2318:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    231c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    2320:	72505f43 	subsvc	r5, r0, #268	; 0x10c
    2324:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    2328:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
    232c:	0070756f 	rsbseq	r7, r0, pc, ror #10
    2330:	4349564e 	movtmi	r5, #38478	; 0x964e
    2334:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2338:	6d740074 	ldclvs	0, cr0, [r4, #-464]!	; 0xfffffe30
    233c:	65727070 	ldrbvs	r7, [r2, #-112]!	; 0x70
    2340:	45534900 	ldrbmi	r4, [r3, #-2304]	; 0x900
    2344:	654e0052 	strbvs	r0, [lr, #-82]	; 0x52
    2348:	61745377 	cmnvs	r4, r7, ror r3
    234c:	53006574 	movwpl	r6, #1396	; 0x574
    2350:	00524954 	subseq	r4, r2, r4, asr r9
    2354:	52455352 	subpl	r5, r5, #1207959553	; 0x48000001
    2358:	31444556 	cmpcc	r4, r6, asr r5
    235c:	66664f00 	strbtvs	r4, [r6], -r0, lsl #30
    2360:	00746573 	rsbseq	r6, r4, r3, ror r5
    2364:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
    2368:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    236c:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xf43
    2370:	63655674 	cmnvs	r5, #116, 12	; 0x7400000
    2374:	54726f74 	ldrbtpl	r6, [r2], #-3956	; 0xf74
    2378:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    237c:	50434900 	subpl	r4, r3, r0, lsl #18
    2380:	41430052 	qdaddmi	r0, r2, r3
    2384:	0042494c 	subeq	r4, r2, ip, asr #18
    2388:	52454349 	subpl	r4, r5, #603979777	; 0x24000001
    238c:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    2390:	00627573 	rsbeq	r7, r2, r3, ror r5
    2394:	4349564e 	movtmi	r5, #38478	; 0x964e
    2398:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    239c:	4c6d6574 	cfstr64mi	mvdx6, [sp], #-464	; 0xfffffe30
    23a0:	6e6f4350 	mcrvs	3, 3, r4, cr15, cr0, {2}
    23a4:	00676966 	rsbeq	r6, r7, r6, ror #18
    23a8:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    23ac:	5f6b6369 	svcpl	0x006b6369
    23b0:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    23b4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    23b8:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    23bc:	00676966 	rsbeq	r6, r7, r6, ror #18
    23c0:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    23c4:	5f6b6369 	svcpl	0x006b6369
    23c8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    23cc:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    23d0:	6f697270 	svcvs	0x00697270
    23d4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    23d8:	50534900 	subspl	r4, r3, r0, lsl #18
    23dc:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
    23e0:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    23e4:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    23e8:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
    23ec:	564e006c 	strbpl	r0, [lr], -ip, rrx
    23f0:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    23f4:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    23f8:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
    23fc:	6275536c 	rsbsvs	r5, r5, #108, 6	; 0xb0000001
    2400:	6f697250 	svcvs	0x00697250
    2404:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2408:	6f682f00 	svcvs	0x00682f00
    240c:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 2260 <_Min_Stack_Size+0x1e60>
    2410:	616c6965 	cmnvs	ip, r5, ror #18
    2414:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2418:	706f746b 	rsbvc	r7, pc, fp, ror #8
    241c:	6e69662f 	cdpvs	6, 6, cr6, cr9, cr15, {1}
    2420:	705f6c61 	subsvc	r6, pc, r1, ror #24
    2424:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    2428:	325f7463 	subscc	r7, pc, #1660944384	; 0x63000000
    242c:	65353130 	ldrvs	r3, [r5, #-304]!	; 0x130
    2430:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    2434:	2f646564 	svccs	0x00646564
    2438:	6f747561 	svcvs	0x00747561
    243c:	74616f42 	strbtvc	r6, [r1], #-3906	; 0xf42
    2440:	524f432f 	subpl	r4, pc, #-1140850688	; 0xbc000000
    2444:	5f584554 	svcpl	0x00584554
    2448:	5f46344d 	svcpl	0x0046344d
    244c:	334d5453 	movtcc	r5, #54355	; 0xd453
    2450:	49445f32 	stmdbmi	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    2454:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
    2458:	2f595245 	svccs	0x00595245
    245c:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    2460:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    2464:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    2468:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    246c:	5f787834 	svcpl	0x00787834
    2470:	50647453 	rsbpl	r7, r4, r3, asr r4
    2474:	70697265 	rsbvc	r7, r9, r5, ror #4
    2478:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    247c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2480:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    2484:	73696d2f 	cmnvc	r9, #3008	; 0xbc0
    2488:	00632e63 	rsbeq	r2, r3, r3, ror #28
    248c:	4349564e 	movtmi	r5, #38478	; 0x964e
    2490:	5152495f 	cmppl	r2, pc, asr r9
    2494:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    2498:	506c656e 	rsbpl	r6, ip, lr, ror #10
    249c:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
    24a0:	6f697470 	svcvs	0x00697470
    24a4:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
    24a8:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    24ac:	564e0079 			; <UNDEFINED> instruction: 0x564e0079
    24b0:	565f4349 	ldrbpl	r4, [pc], -r9, asr #6
    24b4:	54746365 	ldrbtpl	r6, [r4], #-869	; 0x365
    24b8:	4c006261 	sfmmi	f6, 4, [r0], {97}	; 0x61
    24bc:	0044414f 	subeq	r4, r4, pc, asr #2
    24c0:	50776f4c 	rsbspl	r6, r7, ip, asr #30
    24c4:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    24c8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    24cc:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    24d0:	72505f43 	subsvc	r5, r0, #268	; 0x10c
    24d4:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    24d8:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
    24dc:	4370756f 	cmnmi	r0, #465567744	; 0x1bc00000
    24e0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    24e4:	69700067 	ldmdbvs	r0!, {r0, r1, r2, r5, r6}^
    24e8:	736f706e 	cmnvc	pc, #110	; 0x6e
    24ec:	74694200 	strbtvc	r4, [r9], #-512	; 0x200
    24f0:	5445535f 	strbpl	r5, [r5], #-863	; 0x35f
    24f4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    24f8:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xf4f
    24fc:	754f6461 	strbvc	r6, [pc, #-1121]	; 20a3 <_Min_Stack_Size+0x1ca3>
    2500:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
    2504:	61746144 	cmnvs	r4, r4, asr #2
    2508:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    250c:	46415f4f 	strbmi	r5, [r1], -pc, asr #30
    2510:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    2514:	50470070 	subpl	r0, r7, r0, ror r0
    2518:	535f4f49 	cmppl	pc, #292	; 0x124
    251c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2520:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    2524:	69420074 	stmdbvs	r2, {r2, r4, r5, r6}^
    2528:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    252c:	74694200 	strbtvc	r4, [r9], #-512	; 0x200
    2530:	5345525f 	movtpl	r5, #21087	; 0x525f
    2534:	47005445 	strmi	r5, [r0, -r5, asr #8]
    2538:	5f4f4950 	svcpl	0x004f4950
    253c:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    2540:	74694265 	strbtvc	r4, [r9], #-613	; 0x265
    2544:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    2548:	65535f4f 	ldrbvs	r5, [r3, #-3919]	; 0xf4f
    254c:	74694274 	strbtvc	r4, [r9], #-628	; 0x274
    2550:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    2554:	2f656d6f 	svccs	0x00656d6f
    2558:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
    255c:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
    2560:	6f746b73 	svcvs	0x00746b73
    2564:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    2568:	5f6c616e 	svcpl	0x006c616e
    256c:	6a6f7270 	bvs	1bdef34 <_Min_Stack_Size+0x1bdeb34>
    2570:	5f746365 	svcpl	0x00746365
    2574:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
    2578:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    257c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    2580:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
    2584:	616f426f 	cmnvs	pc, pc, ror #4
    2588:	4f432f74 	svcmi	0x00432f74
    258c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    2590:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2594:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2598:	445f3233 	ldrbmi	r3, [pc], #-563	; 25a0 <_Min_Stack_Size+0x21a0>
    259c:	4f435349 	svcmi	0x00435349
    25a0:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
    25a4:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    25a8:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    25ac:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    25b0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    25b4:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    25b8:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    25bc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    25c0:	445f6870 	ldrbmi	r6, [pc], #-2160	; 25c8 <_Min_Stack_Size+0x21c8>
    25c4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    25c8:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    25cc:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    25d0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    25d4:	5f787834 	svcpl	0x00787834
    25d8:	6f697067 	svcvs	0x00697067
    25dc:	4700632e 	strmi	r6, [r0, -lr, lsr #6]
    25e0:	5f4f4950 	svcpl	0x004f4950
    25e4:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
    25e8:	74694274 	strbtvc	r4, [r9], #-628	; 0x274
    25ec:	50470073 	subpl	r0, r7, r3, ror r0
    25f0:	445f4f49 	ldrbmi	r4, [pc], #-3913	; 25f8 <_Min_Stack_Size+0x21f8>
    25f4:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    25f8:	50470074 	subpl	r0, r7, r4, ror r0
    25fc:	525f4f49 	subspl	r4, pc, #292	; 0x124
    2600:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    2604:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0x6e
    2608:	61746144 	cmnvs	r4, r4, asr #2
    260c:	00746942 	rsbseq	r6, r4, r2, asr #18
    2610:	73746962 	cmnvc	r4, #1605632	; 0x188000
    2614:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2618:	43520073 	cmpmi	r2, #115	; 0x73
    261c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    2620:	65503142 	ldrbvs	r3, [r0, #-322]	; 0x142
    2624:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2628:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
    262c:	646d4374 	strbtvs	r4, [sp], #-884	; 0x374
    2630:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    2634:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
    2638:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    263c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2640:	726f5000 	rsbvc	r5, pc, #0
    2644:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    2648:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    264c:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    2650:	756f536e 	strbvc	r5, [pc, #-878]!	; 22ea <_Min_Stack_Size+0x1eea>
    2654:	00656372 	rsbeq	r6, r5, r2, ror r3
    2658:	4f495047 	svcmi	0x00495047
    265c:	6165525f 	cmnvs	r5, pc, asr r2
    2660:	706e4964 	rsbvc	r4, lr, r4, ror #18
    2664:	61447475 	hvcvs	18245	; 0x4745
    2668:	47006174 	smlsdxmi	r0, r4, r1, r6
    266c:	5f4f4950 	svcpl	0x004f4950
    2670:	4c6e6950 	stclmi	9, cr6, [lr], #-320	; 0xfffffec0
    2674:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    2678:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    267c:	69420067 	stmdbvs	r2, {r0, r1, r2, r5, r6}^
    2680:	74634174 	strbtvc	r4, [r3], #-372	; 0x174
    2684:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2688:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    268c:	70746e65 	rsbsvc	r6, r4, r5, ror #28
    2690:	47006e69 	strmi	r6, [r0, -r9, ror #28]
    2694:	5f4f4950 	svcpl	0x004f4950
    2698:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    269c:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0x65
    26a0:	325f706d 	subscc	r7, pc, #109	; 0x6d
    26a4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    26a8:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    26ac:	4346416e 	movtmi	r4, #24942	; 0x616e
    26b0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    26b4:	50470067 	subpl	r0, r7, r7, rrx
    26b8:	525f4f49 	subspl	r4, pc, #292	; 0x124
    26bc:	4f646165 	svcmi	0x00646165
    26c0:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
    26c4:	74614474 	strbtvc	r4, [r1], #-1140	; 0x474
    26c8:	74694261 	strbtvc	r4, [r9], #-609	; 0x261
    26cc:	43435200 	movtmi	r5, #12800	; 0x3200
    26d0:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
    26d4:	4352004b 	cmpmi	r2, #75	; 0x4b
    26d8:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    26dc:	43520045 	cmpmi	r2, #69	; 0x45
    26e0:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    26e4:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    26e8:	00646d43 	rsbeq	r6, r4, r3, asr #26
    26ec:	5f434352 	svcpl	0x00434352
    26f0:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    26f4:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
    26f8:	52005176 	andpl	r5, r0, #-2147483619	; 0x8000001d
    26fc:	505f4343 	subspl	r4, pc, r3, asr #6
    2700:	41534c4c 	cmpmi	r3, ip, asr #24
    2704:	76694449 	strbtvc	r4, [r9], -r9, asr #8
    2708:	74730052 	ldrbtvc	r0, [r3], #-82	; 0x52
    270c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2710:	00676572 	rsbeq	r6, r7, r2, ror r5
    2714:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    2718:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
    271c:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0x572
    2720:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2724:	43435200 	movtmi	r5, #12800	; 0x3200
    2728:	4f434d5f 	svcmi	0x00434d5f
    272c:	756f5331 	strbvc	r5, [pc, #-817]!	; 2403 <_Min_Stack_Size+0x2003>
    2730:	00656372 	rsbeq	r6, r5, r2, ror r3
    2734:	5f434352 	svcpl	0x00434352
    2738:	31425041 	cmpcc	r2, r1, asr #32
    273c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2740:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0x870
    2744:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    2748:	5000646d 	andpl	r6, r0, sp, ror #8
    274c:	004e4c4c 	subeq	r4, lr, ip, asr #24
    2750:	5f434352 	svcpl	0x00434352
    2754:	50494153 	subpl	r4, r9, r3, asr r1
    2758:	41534c4c 	cmpmi	r3, ip, asr #24
    275c:	6b6c4349 	blvs	1b13488 <_Min_Stack_Size+0x1b13088>
    2760:	43766944 	cmnmi	r6, #68, 18	; 0x110000
    2764:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2768:	4c500067 	mrrcmi	0, 6, r0, r0, cr7	; <UNPREDICTABLE>
    276c:	5000504c 	andpl	r5, r0, ip, asr #32
    2770:	00514c4c 	subseq	r4, r1, ip, asr #24
    2774:	5f434352 	svcpl	0x00434352
    2778:	61656c43 	cmnvs	r5, r3, asr #24
    277c:	50544972 	subspl	r4, r4, r2, ror r9
    2780:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2784:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2788:	4c500074 	mrrcmi	0, 7, r0, r0, cr4	; <UNPREDICTABLE>
    278c:	52004d4c 	andpl	r4, r0, #76, 26	; 0x1300
    2790:	415f4343 	cmpmi	pc, r3, asr #6
    2794:	50314248 	eorspl	r4, r1, r8, asr #4
    2798:	70697265 	rsbvc	r7, r9, r5, ror #4
    279c:	43520068 	cmpmi	r2, #104	; 0x68
    27a0:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    27a4:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    27a8:	43435200 	movtmi	r5, #12800	; 0x3200
    27ac:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    27b0:	72655032 	rsbvc	r5, r5, #50	; 0x32
    27b4:	43687069 	cmnmi	r8, #105	; 0x69
    27b8:	6b636f6c 	blvs	18de570 <_Min_Stack_Size+0x18de170>
    27bc:	6f4d504c 	svcvs	0x004d504c
    27c0:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    27c4:	43520064 	cmpmi	r2, #100	; 0x64
    27c8:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    27cc:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    27d0:	0067616c 	rsbeq	r6, r7, ip, ror #2
    27d4:	5f434352 	svcpl	0x00434352
    27d8:	74005449 	strvc	r5, [r0], #-1097	; 0x449
    27dc:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0x6d
    27e0:	43500067 	cmpmi	r0, #103	; 0x67
    27e4:	5f324b4c 	svcpl	0x00324b4c
    27e8:	71657246 	cmnvc	r5, r6, asr #4
    27ec:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    27f0:	43520079 	cmpmi	r2, #121	; 0x79
    27f4:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    27f8:	65503242 	ldrbvs	r3, [r0, #-578]	; 0x242
    27fc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2800:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2804:	646d436b 	strbtvs	r4, [sp], #-875	; 0x36b
    2808:	43435200 	movtmi	r5, #12800	; 0x3200
    280c:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
    2810:	6f43314b 	svcvs	0x0043314b
    2814:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2818:	43435200 	movtmi	r5, #12800	; 0x3200
    281c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    2820:	72655033 	rsbvc	r5, r5, #51	; 0x33
    2824:	52687069 	rsbpl	r7, r8, #105	; 0x69
    2828:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
    282c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2830:	5f434352 	svcpl	0x00434352
    2834:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
    2838:	6b636f6c 	blvs	18de5f0 <_Min_Stack_Size+0x18de1f0>
    283c:	4b4c4341 	blmi	1313548 <_Min_Stack_Size+0x1313148>
    2840:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2844:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    2848:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    284c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    2850:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2854:	43520067 	cmpmi	r2, #103	; 0x67
    2858:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    285c:	4b4c4353 	blmi	13135b0 <_Min_Stack_Size+0x13131b0>
    2860:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2864:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    2868:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    286c:	6f434553 	svcvs	0x00434553
    2870:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2874:	43435200 	movtmi	r5, #12800	; 0x3200
    2878:	414c465f 	cmpmi	ip, pc, asr r6
    287c:	43520047 	cmpmi	r2, #71	; 0x47
    2880:	61425f43 	cmpvs	r2, r3, asr #30
    2884:	70756b63 	rsbsvc	r6, r5, r3, ror #22
    2888:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
    288c:	646d4374 	strbtvs	r4, [sp], #-884	; 0x374
    2890:	72724500 	rsbsvc	r4, r2, #0, 10
    2894:	7453726f 	ldrbvc	r7, [r3], #-623	; 0x26f
    2898:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    289c:	43435200 	movtmi	r5, #12800	; 0x3200
    28a0:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    28a4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    28a8:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    28ac:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    28b0:	59537465 	ldmdbpl	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    28b4:	4b4c4353 	blmi	1313608 <_Min_Stack_Size+0x1313208>
    28b8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    28bc:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    28c0:	575f4343 	ldrbpl	r4, [pc, -r3, asr #6]
    28c4:	46746961 	ldrbtmi	r6, [r4], -r1, ror #18
    28c8:	5348726f 	movtpl	r7, #33391	; 0x826f
    28cc:	61745345 	cmnvs	r4, r5, asr #6
    28d0:	70557472 	subsvc	r7, r5, r2, ror r4
    28d4:	4c434800 	mcrrmi	8, 0, r4, r3, cr0
    28d8:	72465f4b 	subvc	r5, r6, #300	; 0x12c
    28dc:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
    28e0:	0079636e 	rsbseq	r6, r9, lr, ror #6
    28e4:	5f434352 	svcpl	0x00434352
    28e8:	31425041 	cmpcc	r2, r1, asr #32
    28ec:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    28f0:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
    28f4:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    28f8:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    28fc:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    2900:	00676966 	rsbeq	r6, r7, r6, ror #18
    2904:	5f434352 	svcpl	0x00434352
    2908:	314f434d 	cmpcc	pc, sp, asr #6
    290c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2910:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    2914:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    2918:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    291c:	4352004b 	cmpmi	r2, #75	; 0x4b
    2920:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    2924:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    2928:	00646d43 	rsbeq	r6, r4, r3, asr #26
    292c:	73657270 	cmnvc	r5, #112, 4
    2930:	43520063 	cmpmi	r2, #99	; 0x63
    2934:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xf43
    2938:	4b4c4343 	blmi	131364c <_Min_Stack_Size+0x131324c>
    293c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2940:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    2944:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    2948:	6c424941 	mcrrvs	9, 4, r4, r2, cr1
    294c:	416b636f 	cmnmi	fp, pc, ror #6
    2950:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    2954:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2958:	43520065 	cmpmi	r2, #101	; 0x65
    295c:	41535f43 	cmpmi	r3, r3, asr #30
    2960:	6f6c4249 	svcvs	0x006c4249
    2964:	43426b63 	movtmi	r6, #11107	; 0x2b63
    2968:	6f534b4c 	svcvs	0x00534b4c
    296c:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    2970:	43435200 	movtmi	r5, #12800	; 0x3200
    2974:	44544c5f 	ldrbmi	r4, [r4], #-3167	; 0xc5f
    2978:	4b4c4343 	blmi	131368c <_Min_Stack_Size+0x131328c>
    297c:	43766944 	cmnmi	r6, #68, 18	; 0x110000
    2980:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2984:	43520067 	cmpmi	r2, #103	; 0x67
    2988:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    298c:	65503242 	ldrbvs	r3, [r0, #-578]	; 0x242
    2990:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2994:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2998:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    299c:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    29a0:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    29a4:	505f4343 	subspl	r4, pc, r3, asr #6
    29a8:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    29ac:	6e6f4353 	mcrvs	3, 3, r4, cr15, cr3, {2}
    29b0:	00676966 	rsbeq	r6, r7, r6, ror #18
    29b4:	5f434352 	svcpl	0x00434352
    29b8:	43495348 	movtmi	r5, #37704	; 0x9348
    29bc:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    29c0:	415f4343 	cmpmi	pc, r3, asr #6
    29c4:	50324248 	eorspl	r4, r2, r8, asr #4
    29c8:	70697265 	rsbvc	r7, r9, r5, ror #4
    29cc:	43520068 	cmpmi	r2, #104	; 0x68
    29d0:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    29d4:	616c4674 	smcvs	50276	; 0xc464
    29d8:	61745367 	cmnvs	r4, r7, ror #6
    29dc:	00737574 	rsbseq	r7, r3, r4, ror r5
    29e0:	5f434352 	svcpl	0x00434352
    29e4:	33424841 	movtcc	r4, #10305	; 0x2841
    29e8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    29ec:	52006870 	andpl	r6, r0, #112, 16	; 0x700000
    29f0:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 28ec <_Min_Stack_Size+0x24ec>
    29f4:	44324f43 	ldrtmi	r4, [r2], #-3907	; 0xf43
    29f8:	52007669 	andpl	r7, r0, #110100480	; 0x6900000
    29fc:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    2a00:	4c504941 	mrrcmi	9, 4, r4, r0, cr1
    2a04:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    2a08:	446b6c43 	strbtmi	r6, [fp], #-3139	; 0xc43
    2a0c:	6f437669 	svcvs	0x00437669
    2a10:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2a14:	43435200 	movtmi	r5, #12800	; 0x3200
    2a18:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    2a1c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    2a20:	4500646d 	strmi	r6, [r0, #-1133]	; 0x46d
    2a24:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
    2a28:	43435200 	movtmi	r5, #12800	; 0x3200
    2a2c:	6f6c435f 	svcvs	0x006c435f
    2a30:	65536b63 	ldrbvs	r6, [r3, #-2915]	; 0xb63
    2a34:	69727563 	ldmdbvs	r2!, {r0, r1, r5, r6, r8, sl, ip, sp, lr}^
    2a38:	79537974 	ldmdbvc	r3, {r2, r4, r5, r6, r8, fp, ip, sp, lr}^
    2a3c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    2a40:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2a44:	5f434352 	svcpl	0x00434352
    2a48:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    2a4c:	69445332 	stmdbvs	r4, {r1, r4, r5, r8, r9, ip, lr}^
    2a50:	52005176 	andpl	r5, r0, #-2147483619	; 0x8000001d
    2a54:	505f4343 	subspl	r4, pc, r3, asr #6
    2a58:	41534c4c 	cmpmi	r3, ip, asr #24
    2a5c:	6e6f4349 	cdpvs	3, 6, cr4, cr15, cr9, {2}
    2a60:	00676966 	rsbeq	r6, r7, r6, ror #18
    2a64:	5f434352 	svcpl	0x00434352
    2a68:	314f434d 	cmpcc	pc, sp, asr #6
    2a6c:	00766944 	rsbseq	r6, r6, r4, asr #18
    2a70:	5f434352 	svcpl	0x00434352
    2a74:	32425041 	subcc	r5, r2, #65	; 0x41
    2a78:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2a7c:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0x870
    2a80:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    2a84:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    2a88:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 2984 <_Min_Stack_Size+0x2584>
    2a8c:	53324f43 	teqpl	r2, #268	; 0x10c
    2a90:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2a94:	43520065 	cmpmi	r2, #101	; 0x65
    2a98:	32495f43 	subcc	r5, r9, #268	; 0x10c
    2a9c:	4b4c4353 	blmi	13137f0 <_Min_Stack_Size+0x13133f0>
    2aa0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2aa4:	2f006563 	svccs	0x00006563
    2aa8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
    2aac:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
    2ab0:	442f616c 	strtmi	r6, [pc], #-364	; 2ab8 <_Min_Stack_Size+0x26b8>
    2ab4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    2ab8:	662f706f 	strtvs	r7, [pc], -pc, rrx
    2abc:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
    2ac0:	6f72705f 	svcvs	0x0072705f
    2ac4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    2ac8:	3130325f 	teqcc	r0, pc, asr r2
    2acc:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
    2ad0:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    2ad4:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
    2ad8:	6f426f74 	svcvs	0x00426f74
    2adc:	432f7461 	teqmi	pc, #1627389952	; 0x61000000
    2ae0:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    2ae4:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    2ae8:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    2aec:	5f32334d 	svcpl	0x0032334d
    2af0:	43534944 	cmpmi	r3, #68, 18	; 0x110000
    2af4:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
    2af8:	694c2f59 	stmdbvs	ip, {r0, r3, r4, r6, r8, r9, sl, fp, sp}^
    2afc:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    2b00:	2f736569 	svccs	0x00736569
    2b04:	334d5453 	movtcc	r5, #54355	; 0xd453
    2b08:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    2b0c:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    2b10:	72655064 	rsbvc	r5, r5, #100	; 0x64
    2b14:	5f687069 	svcpl	0x00687069
    2b18:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    2b1c:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    2b20:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    2b24:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2b28:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    2b2c:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    2b30:	5200632e 	andpl	r6, r0, #-1207959552	; 0xb8000000
    2b34:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    2b38:	6f434553 	svcvs	0x00434553
    2b3c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2b40:	43435200 	movtmi	r5, #12800	; 0x3200
    2b44:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    2b48:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    2b4c:	4c43426b 	sfmmi	f4, 2, [r3], {107}	; 0x6b
    2b50:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    2b54:	00676966 	rsbeq	r6, r7, r6, ror #18
    2b58:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    2b5c:	004e4941 	subeq	r4, lr, r1, asr #18
    2b60:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    2b64:	00514941 	subseq	r4, r1, r1, asr #18
    2b68:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    2b6c:	00524941 	subseq	r4, r2, r1, asr #18
    2b70:	5f434352 	svcpl	0x00434352
    2b74:	434d4954 	movtmi	r4, #55636	; 0xd954
    2b78:	72504b4c 	subsvc	r4, r0, #76, 22	; 0x13000
    2b7c:	61637365 	cmnvs	r3, r5, ror #6
    2b80:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2b84:	5f434352 	svcpl	0x00434352
    2b88:	434c4c50 	movtmi	r4, #52304	; 0xcc50
    2b8c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    2b90:	415f4343 	cmpmi	pc, r3, asr #6
    2b94:	50324248 	eorspl	r4, r2, r8, asr #4
    2b98:	70697265 	rsbvc	r7, r9, r5, ror #4
    2b9c:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    2ba0:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    2ba4:	43520064 	cmpmi	r2, #100	; 0x64
    2ba8:	50415f43 	subpl	r5, r1, r3, asr #30
    2bac:	65503142 	ldrbvs	r3, [r0, #-322]	; 0x142
    2bb0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2bb4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2bb8:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    2bbc:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    2bc0:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    2bc4:	505f4343 	subspl	r4, pc, r3, asr #6
    2bc8:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
    2bcc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2bd0:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    2bd4:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    2bd8:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    2bdc:	756f534b 	strbvc	r5, [pc, #-843]!	; 2899 <_Min_Stack_Size+0x2499>
    2be0:	00656372 	rsbeq	r6, r5, r2, ror r3
    2be4:	5f434352 	svcpl	0x00434352
    2be8:	00455348 	subeq	r5, r5, r8, asr #6
    2bec:	4b4c4350 	blmi	1313934 <_Min_Stack_Size+0x1313534>
    2bf0:	72465f31 	subvc	r5, r6, #49, 30	; 0xc4
    2bf4:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
    2bf8:	0079636e 	rsbseq	r6, r9, lr, ror #6
    2bfc:	41425041 	cmpmi	r2, r1, asr #32
    2c00:	72504248 	subsvc	r4, r0, #72, 4	; 0x80000004
    2c04:	54637365 	strbtpl	r7, [r3], #-869	; 0x365
    2c08:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    2c0c:	43435200 	movtmi	r5, #12800	; 0x3200
    2c10:	6a64415f 	bvs	1913194 <_Min_Stack_Size+0x1912d94>
    2c14:	48747375 	ldmdami	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    2c18:	61434953 	cmpvs	r3, r3, asr r9
    2c1c:	7262696c 	rsbvc	r6, r2, #108, 18	; 0x1b0000
    2c20:	6f697461 	svcvs	0x00697461
    2c24:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    2c28:	68006575 	stmdavs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    2c2c:	74736573 	ldrbtvc	r6, [r3], #-1395	; 0x573
    2c30:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2c34:	4c4c5000 	marmi	acc0, r5, ip
    2c38:	4e533249 	cdpmi	2, 5, cr3, cr3, cr9, {2}
    2c3c:	43435200 	movtmi	r5, #12800	; 0x3200
    2c40:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    2c44:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2c48:	7246736b 	subvc	r7, r6, #-1409286143	; 0xac000001
    2c4c:	52007165 	andpl	r7, r0, #1073741849	; 0x40000019
    2c50:	415f4343 	cmpmi	pc, r3, asr #6
    2c54:	50324250 	eorspl	r4, r2, r0, asr r2
    2c58:	70697265 	rsbvc	r7, r9, r5, ror #4
    2c5c:	6f6c4368 	svcvs	0x006c4368
    2c60:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    2c64:	43520064 	cmpmi	r2, #100	; 0x64
    2c68:	65445f43 	strbvs	r5, [r4, #-3907]	; 0xf43
    2c6c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2c70:	4c4c5000 	marmi	acc0, r5, ip
    2c74:	51533249 	cmppl	r3, r9, asr #4
    2c78:	4c4c5000 	marmi	acc0, r5, ip
    2c7c:	52533249 	subspl	r3, r3, #-1879048188	; 0x90000004
    2c80:	43435200 	movtmi	r5, #12800	; 0x3200
    2c84:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    2c88:	74535449 	ldrbvc	r5, [r3], #-1097	; 0x449
    2c8c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2c90:	43435200 	movtmi	r5, #12800	; 0x3200
    2c94:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    2c98:	72655033 	rsbvc	r5, r5, #51	; 0x33
    2c9c:	43687069 	cmnmi	r8, #105	; 0x69
    2ca0:	6b636f6c 	blvs	18dea58 <_Min_Stack_Size+0x18de658>
    2ca4:	6f4d504c 	svcvs	0x004d504c
    2ca8:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    2cac:	74730064 	ldrbtvc	r0, [r3], #-100	; 0x64
    2cb0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0x261
    2cb4:	756f6370 	strbvc	r6, [pc, #-880]!	; 294c <_Min_Stack_Size+0x254c>
    2cb8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2cbc:	43435200 	movtmi	r5, #12800	; 0x3200
    2cc0:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    2cc4:	72655032 	rsbvc	r5, r5, #50	; 0x32
    2cc8:	00687069 	rsbeq	r7, r8, r9, rrx
    2ccc:	5f434352 	svcpl	0x00434352
    2cd0:	434d4954 	movtmi	r4, #55636	; 0xd954
    2cd4:	72504b4c 	subsvc	r4, r0, #76, 22	; 0x13000
    2cd8:	6f437365 	svcvs	0x00437365
    2cdc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2ce0:	43435200 	movtmi	r5, #12800	; 0x3200
    2ce4:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    2ce8:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    2cec:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2cf0:	43520067 	cmpmi	r2, #103	; 0x67
    2cf4:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    2cf8:	6f43324f 	svcvs	0x0043324f
    2cfc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2d00:	43435200 	movtmi	r5, #12800	; 0x3200
    2d04:	49534c5f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
    2d08:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2d0c:	5f434352 	svcpl	0x00434352
    2d10:	31425041 	cmpcc	r2, r1, asr #32
    2d14:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2d18:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    2d1c:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    2d20:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    2d24:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    2d28:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    2d2c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2d30:	43435553 	movtmi	r5, #13651	; 0x3553
    2d34:	00535345 	subseq	r5, r3, r5, asr #6
    2d38:	5f434352 	svcpl	0x00434352
    2d3c:	434c4c50 	movtmi	r4, #52304	; 0xcc50
    2d40:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2d44:	43520067 	cmpmi	r2, #103	; 0x67
    2d48:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    2d4c:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    2d50:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    2d54:	00666544 	rsbeq	r6, r6, r4, asr #10
    2d58:	5f434352 	svcpl	0x00434352
    2d5c:	31424841 	cmpcc	r2, r1, asr #16
    2d60:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2d64:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    2d68:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    2d6c:	646f4d50 	strbtvs	r4, [pc], #-3408	; 2d74 <_Min_Stack_Size+0x2974>
    2d70:	646d4365 	strbtvs	r4, [sp], #-869	; 0x365
    2d74:	43435200 	movtmi	r5, #12800	; 0x3200
    2d78:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    2d7c:	72655033 	rsbvc	r5, r5, #51	; 0x33
    2d80:	43687069 	cmnmi	r8, #105	; 0x69
    2d84:	6b636f6c 	blvs	18deb3c <_Min_Stack_Size+0x18de73c>
    2d88:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2d8c:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    2d90:	64726567 	ldrbtvs	r6, [r2], #-1383	; 0x567
    2d94:	64697669 	strbtvs	r7, [r9], #-1641	; 0x669
    2d98:	55007265 	strpl	r7, [r0, #-613]	; 0x265
    2d9c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2da0:	4850435f 	ldmdami	r0, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2da4:	54470041 	strbpl	r0, [r7], #-65	; 0x41
    2da8:	55005250 	strpl	r5, [r0, #-592]	; 0x250
    2dac:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2db0:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    2db4:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0x965
    2db8:	6b615772 	blvs	1858b88 <_Min_Stack_Size+0x1858788>
    2dbc:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    2dc0:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    2dc4:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2dc8:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    2dcc:	73657250 	cmnvc	r5, #80, 4
    2dd0:	656c6163 	strbvs	r6, [ip, #-355]!	; 0x163
    2dd4:	53550072 	cmppl	r5, #114	; 0x72
    2dd8:	5f545241 	svcpl	0x00545241
    2ddc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2de0:	41535500 	cmpmi	r3, r0, lsl #10
    2de4:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    2de8:	72424e49 	subvc	r4, r2, #1168	; 0x490
    2dec:	446b6165 	strbtmi	r6, [fp], #-357	; 0x165
    2df0:	63657465 	cmnvs	r5, #1694498816	; 0x65000000
    2df4:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    2df8:	00687467 	rsbeq	r7, r8, r7, ror #8
    2dfc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e00:	79545f54 	ldmdbvc	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    2e04:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    2e08:	53550066 	cmppl	r5, #102	; 0x66
    2e0c:	5f545241 	svcpl	0x00545241
    2e10:	706f7453 	rsbvc	r7, pc, r3, asr r4	; <UNPREDICTABLE>
    2e14:	73746942 	cmnvc	r4, #1081344	; 0x108000
    2e18:	41535500 	cmpmi	r3, r0, lsl #10
    2e1c:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2e20:	6b636f6c 	blvs	18debd8 <_Min_Stack_Size+0x18de7d8>
    2e24:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2e28:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    2e2c:	00666544 	rsbeq	r6, r6, r4, asr #10
    2e30:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e34:	6d435f54 	stclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
    2e38:	53550064 	cmppl	r5, #100	; 0x64
    2e3c:	5f545241 	svcpl	0x00545241
    2e40:	646e6553 	strbtvs	r6, [lr], #-1363	; 0x553
    2e44:	61746144 	cmnvs	r4, r4, asr #2
    2e48:	41535500 	cmpmi	r3, r0, lsl #10
    2e4c:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2e50:	682f0054 	stmdavs	pc!, {r2, r4, r6}	; <UNPREDICTABLE>
    2e54:	2f656d6f 	svccs	0x00656d6f
    2e58:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
    2e5c:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
    2e60:	6f746b73 	svcvs	0x00746b73
    2e64:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    2e68:	5f6c616e 	svcpl	0x006c616e
    2e6c:	6a6f7270 	bvs	1bdf834 <_Min_Stack_Size+0x1bdf434>
    2e70:	5f746365 	svcpl	0x00746365
    2e74:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
    2e78:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    2e7c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    2e80:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
    2e84:	616f426f 	cmnvs	pc, pc, ror #4
    2e88:	4f432f74 	svcmi	0x00432f74
    2e8c:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    2e90:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    2e94:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    2e98:	445f3233 	ldrbmi	r3, [pc], #-563	; 2ea0 <_Min_Stack_Size+0x2aa0>
    2e9c:	4f435349 	svcmi	0x00435349
    2ea0:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
    2ea4:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    2ea8:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    2eac:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    2eb0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    2eb4:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    2eb8:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    2ebc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2ec0:	445f6870 	ldrbmi	r6, [pc], #-2160	; 2ec8 <_Min_Stack_Size+0x2ac8>
    2ec4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    2ec8:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    2ecc:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    2ed0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2ed4:	5f787834 	svcpl	0x00787834
    2ed8:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    2edc:	00632e74 	rsbeq	r2, r3, r4, ror lr
    2ee0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2ee4:	6f575f54 	svcvs	0x00575f54
    2ee8:	654c6472 	strbvs	r6, [ip, #-1138]	; 0x472
    2eec:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2ef0:	41535500 	cmpmi	r3, r0, lsl #10
    2ef4:	445f5452 	ldrbmi	r5, [pc], #-1106	; 2efc <_Min_Stack_Size+0x2afc>
    2ef8:	6d43414d 	stfvse	f4, [r3, #-308]	; 0xfffffecc
    2efc:	53550064 	cmppl	r5, #100	; 0x64
    2f00:	5f545241 	svcpl	0x00545241
    2f04:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0x14c
    2f08:	00746942 	rsbseq	r6, r4, r2, asr #18
    2f0c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2f10:	61425f54 	cmpvs	r2, r4, asr pc
    2f14:	61526475 	cmpvs	r2, r5, ror r4
    2f18:	55006574 	strpl	r6, [r0, #-1396]	; 0x574
    2f1c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2f20:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0x95f
    2f24:	646f4d41 	strbtvs	r4, [pc], #-3393	; 2f2c <_Min_Stack_Size+0x2b2c>
    2f28:	53550065 	cmppl	r5, #101	; 0x65
    2f2c:	5f545241 	svcpl	0x00545241
    2f30:	656b6157 	strbvs	r6, [fp, #-343]!	; 0x157
    2f34:	61007055 	qaddvs	r7, r5, r0
    2f38:	6c636270 	sfmvs	f6, 2, [r3], #-448	; 0xfffffe40
    2f3c:	006b636f 	rsbeq	r6, fp, pc, ror #6
    2f40:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2f44:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    2f48:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    2f4c:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    2f50:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    2f54:	00746942 	rsbseq	r6, r4, r2, asr #18
    2f58:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2f5c:	75475f54 	strbvc	r5, [r7, #-3924]	; 0xf54
    2f60:	54647261 	strbtpl	r7, [r4], #-609	; 0x261
    2f64:	00656d69 	rsbeq	r6, r5, r9, ror #26
    2f68:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2f6c:	494c5f54 	stmdbmi	ip, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    2f70:	6572424e 	ldrbvs	r4, [r2, #-590]!	; 0x24e
    2f74:	65446b61 	strbvs	r6, [r4, #-2913]	; 0xb61
    2f78:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    2f7c:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    2f80:	6f436874 	svcvs	0x00436874
    2f84:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2f88:	41535500 	cmpmi	r3, r0, lsl #10
    2f8c:	465f5452 			; <UNDEFINED> instruction: 0x465f5452
    2f90:	0047414c 	subeq	r4, r7, ip, asr #2
    2f94:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2f98:	65445f54 	strbvs	r5, [r4, #-3924]	; 0xf54
    2f9c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2fa0:	41535500 	cmpmi	r3, r0, lsl #10
    2fa4:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2fa8:	6b636f6c 	blvs	18ded60 <_Min_Stack_Size+0x18de960>
    2fac:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2fb0:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    2fb4:	55007463 	strpl	r7, [r0, #-1123]	; 0x463
    2fb8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2fbc:	7261505f 	rsbvc	r5, r1, #95	; 0x5f
    2fc0:	00797469 	rsbseq	r7, r9, r9, ror #8
    2fc4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2fc8:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    2fcc:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    2fd0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    2fd4:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    2fd8:	73750074 	cmnvc	r5, #116	; 0x74
    2fdc:	78747261 	ldmdavc	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    2fe0:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
    2fe4:	41535500 	cmpmi	r3, r0, lsl #10
    2fe8:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2fec:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2ff0:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    2ff4:	41535500 	cmpmi	r3, r0, lsl #10
    2ff8:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2ffc:	64417465 	strbvs	r7, [r1], #-1125	; 0x465
    3000:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    3004:	53550073 	cmppl	r5, #115	; 0x73
    3008:	5f545241 	svcpl	0x00545241
    300c:	47746553 			; <UNDEFINED> instruction: 0x47746553
    3010:	64726175 	ldrbtvs	r6, [r2], #-373	; 0x175
    3014:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    3018:	41535500 	cmpmi	r3, r0, lsl #10
    301c:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    3020:	42646e65 	rsbmi	r6, r4, #1616	; 0x650
    3024:	6b616572 	blvs	185c5f4 <_Min_Stack_Size+0x185c1f4>
    3028:	41535500 	cmpmi	r3, r0, lsl #10
    302c:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3030:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    3034:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    3038:	55006665 	strpl	r6, [r0, #-1637]	; 0x665
    303c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    3040:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    3044:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3048:	53550067 	cmppl	r5, #103	; 0x67
    304c:	5f545241 	svcpl	0x00545241
    3050:	52414d44 	subpl	r4, r1, #68, 26	; 0x1100
    3054:	55007165 	strpl	r7, [r0, #-357]	; 0x165
    3058:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    305c:	53550078 	cmppl	r5, #120	; 0x78
    3060:	5f545241 	svcpl	0x00545241
    3064:	42656e4f 	rsbmi	r6, r5, #1264	; 0x4f0
    3068:	654d7469 	strbvs	r7, [sp, #-1129]	; 0x469
    306c:	646f6874 	strbtvs	r6, [pc], #-2164	; 3074 <_Min_Stack_Size+0x2c74>
    3070:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3074:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3078:	61485f54 	cmpvs	r8, r4, asr pc
    307c:	61776472 	cmnvs	r7, r2, ror r4
    3080:	6c466572 	cfstr64vs	mvdx6, [r6], {114}	; 0x72
    3084:	6f43776f 	svcvs	0x0043776f
    3088:	6f72746e 	svcvs	0x0072746e
    308c:	5355006c 	cmppl	r5, #108	; 0x6c
    3090:	5f545241 	svcpl	0x00545241
    3094:	72616d53 	rsbvc	r6, r1, #5312	; 0x14c0
    3098:	72614374 	rsbvc	r4, r1, #116, 6	; 0xd0000001
    309c:	646d4364 	strbtvs	r4, [sp], #-868	; 0x364
    30a0:	41535500 	cmpmi	r3, r0, lsl #10
    30a4:	4d5f5452 	cfldrdmi	mvd5, [pc, #-328]	; 2f64 <_Min_Stack_Size+0x2b64>
    30a8:	0065646f 	rsbeq	r6, r5, pc, ror #8
    30ac:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    30b0:	64415f54 	strbvs	r5, [r1], #-3924	; 0xf54
    30b4:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    30b8:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
    30bc:	736f7074 	cmnvc	pc, #116	; 0x74
    30c0:	41535500 	cmpmi	r3, r0, lsl #10
    30c4:	4f5f5452 	svcmi	0x005f5452
    30c8:	53726576 	cmnpl	r2, #494927872	; 0x1d800000
    30cc:	6c706d61 	ldclvs	13, cr6, [r0], #-388	; 0xfffffe7c
    30d0:	38676e69 	stmdacc	r7!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    30d4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    30d8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    30dc:	65475f54 	strbvs	r5, [r7, #-3924]	; 0xf54
    30e0:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    30e4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    30e8:	53550073 	cmppl	r5, #115	; 0x73
    30ec:	5f545241 	svcpl	0x00545241
    30f0:	434e494c 	movtmi	r4, #59724	; 0xe94c
    30f4:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    30f8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    30fc:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0x95f
    3100:	6e6f4341 	cdpvs	3, 6, cr4, cr15, cr1, {2}
    3104:	00676966 	rsbeq	r6, r7, r6, ror #18
    3108:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    310c:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    3110:	006b636f 	rsbeq	r6, fp, pc, ror #6
    3114:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3118:	72495f54 	subvc	r5, r9, #84, 30	; 0x150
    311c:	6d434144 	stfvse	f4, [r3, #-272]	; 0xfffffef0
    3120:	72660064 	rsbvc	r0, r6, #100	; 0x64
    3124:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    3128:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
    312c:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    3130:	00726564 	rsbseq	r6, r2, r4, ror #10
    3134:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3138:	6d535f54 	ldclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
    313c:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    3140:	4e647261 	cdpmi	2, 6, cr7, cr4, cr1, {3}
    3144:	434b4341 	movtmi	r4, #45889	; 0xb341
    3148:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    314c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    3150:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    3154:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    3158:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    315c:	55007375 	strpl	r7, [r0, #-885]	; 0x375
    3160:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    3164:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    3168:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    316c:	00746375 	rsbseq	r6, r4, r5, ror r3
    3170:	5f434352 	svcpl	0x00434352
    3174:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    3178:	7453736b 	ldrbvc	r7, [r3], #-875	; 0x36b
    317c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    3180:	41535500 	cmpmi	r3, r0, lsl #10
    3184:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    3188:	6b636f6c 	blvs	18def40 <_Min_Stack_Size+0x18deb40>
    318c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3190:	41535500 	cmpmi	r3, r0, lsl #10
    3194:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
    3198:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xb61
    319c:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    31a0:	00676966 	rsbeq	r6, r7, r6, ror #18
    31a4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    31a8:	61485f54 	cmpvs	r8, r4, asr pc
    31ac:	7544666c 	strbvc	r6, [r4, #-1644]	; 0x66c
    31b0:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    31b4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    31b8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    31bc:	74535f54 	ldrbvc	r5, [r3], #-3924	; 0xf54
    31c0:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    31c4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    31c8:	41535500 	cmpmi	r3, r0, lsl #10
    31cc:	505f5452 	subspl	r5, pc, r2, asr r4	; <UNPREDICTABLE>
    31d0:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    31d4:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    31d8:	41535500 	cmpmi	r3, r0, lsl #10
    31dc:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    31e0:	004c4f50 	subeq	r4, ip, r0, asr pc
    31e4:	616d7469 	cmnvs	sp, r9, ror #8
    31e8:	55006b73 	strpl	r6, [r0, #-2931]	; 0xb73
    31ec:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    31f0:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    31f4:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0x965
    31f8:	61746144 	cmnvs	r4, r4, asr #2
    31fc:	61737500 	cmnvs	r3, r0, lsl #10
    3200:	65727472 	ldrbvs	r7, [r2, #-1138]!	; 0x472
    3204:	59530067 	ldmdbpl	r3, {r0, r1, r2, r5, r6}^
    3208:	47464353 	smlsldmi	r4, r6, r3, r3
    320c:	6d6f435f 	stclvs	3, cr4, [pc, #-380]!	; 3098 <_Min_Stack_Size+0x2c98>
    3210:	736e6570 	cmnvc	lr, #112, 10	; 0x1c000000
    3214:	6f697461 	svcvs	0x00697461
    3218:	6c65436e 	stclvs	3, cr4, [r5], #-440	; 0xfffffe48
    321c:	646d436c 	strbtvs	r4, [sp], #-876	; 0x36c
    3220:	53595300 	cmppl	r9, #0, 6
    3224:	5f474643 	svcpl	0x00474643
    3228:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    322c:	65706d6f 	ldrbvs	r6, [r0, #-3439]!	; 0xd6f
    3230:	7461736e 	strbtvc	r7, [r1], #-878	; 0x36e
    3234:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    3238:	536c6c65 	cmnpl	ip, #25856	; 0x6500
    323c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    3240:	59530073 	ldmdbpl	r3, {r0, r1, r4, r5, r6}^
    3244:	47464353 	smlsldmi	r4, r6, r3, r3
    3248:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    324c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3250:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    3254:	455f4746 	ldrbmi	r4, [pc, #-1862]	; 2b16 <_Min_Stack_Size+0x2716>
    3258:	4c495458 	cfstrdmi	mvd5, [r9], {88}	; 0x58
    325c:	43656e69 	cmnmi	r5, #1680	; 0x690
    3260:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3264:	4d430067 	stclmi	0, cr0, [r3, #-412]	; 0xfffffe64
    3268:	00524350 	subseq	r4, r2, r0, asr r3
    326c:	524d454d 	subpl	r4, sp, #322961408	; 0x13400000
    3270:	5300504d 	movwpl	r5, #77	; 0x4d
    3274:	46435359 			; <UNDEFINED> instruction: 0x46435359
    3278:	54455f47 	strbpl	r5, [r5], #-3911	; 0xf47
    327c:	654d5f48 	strbvs	r5, [sp, #-3912]	; 0xf48
    3280:	49616964 	stmdbmi	r1!, {r2, r5, r6, r8, fp, sp, lr}^
    3284:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    3288:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
    328c:	53455200 	movtpl	r5, #20992	; 0x5200
    3290:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    3294:	59530044 	ldmdbpl	r3, {r2, r6}^
    3298:	47464353 	smlsldmi	r4, r6, r3, r3
    329c:	6d654d5f 	stclvs	13, cr4, [r5, #-380]!	; 0xfffffe84
    32a0:	5379726f 	cmnpl	r9, #-268435450	; 0xf0000006
    32a4:	70706177 	rsbsvc	r6, r0, r7, ror r1
    32a8:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    32ac:	006b6e61 	rsbeq	r6, fp, r1, ror #28
    32b0:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    32b4:	45005243 	strmi	r5, [r0, #-579]	; 0x243
    32b8:	5f495458 	svcpl	0x00495458
    32bc:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
    32c0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    32c4:	53007865 	movwpl	r7, #2149	; 0x865
    32c8:	46435359 			; <UNDEFINED> instruction: 0x46435359
    32cc:	54455f47 	strbpl	r5, [r5], #-3911	; 0xf47
    32d0:	654d5f48 	strbvs	r5, [sp, #-3912]	; 0xf48
    32d4:	49616964 	stmdbmi	r1!, {r2, r5, r6, r8, fp, sp, lr}^
    32d8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    32dc:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
    32e0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    32e4:	53006769 	movwpl	r6, #1897	; 0x769
    32e8:	46435359 			; <UNDEFINED> instruction: 0x46435359
    32ec:	654d5f47 	strbvs	r5, [sp, #-3911]	; 0xf47
    32f0:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    32f4:	616d6552 	cmnvs	sp, r2, asr r5
    32f8:	59530070 	ldmdbpl	r3, {r4, r5, r6}^
    32fc:	47464353 	smlsldmi	r4, r6, r3, r3
    3300:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    3304:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    3308:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    330c:	6f505f49 	svcvs	0x00505f49
    3310:	6f537472 	svcvs	0x00537472
    3314:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    3318:	4f495047 	svcmi	0x00495047
    331c:	682f0078 	stmdavs	pc!, {r3, r4, r5, r6}	; <UNPREDICTABLE>
    3320:	2f656d6f 	svccs	0x00656d6f
    3324:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
    3328:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
    332c:	6f746b73 	svcvs	0x00746b73
    3330:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    3334:	5f6c616e 	svcpl	0x006c616e
    3338:	6a6f7270 	bvs	1bdfd00 <_Min_Stack_Size+0x1bdf900>
    333c:	5f746365 	svcpl	0x00746365
    3340:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
    3344:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    3348:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    334c:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
    3350:	616f426f 	cmnvs	pc, pc, ror #4
    3354:	4f432f74 	svcmi	0x00432f74
    3358:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    335c:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    3360:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    3364:	445f3233 	ldrbmi	r3, [pc], #-563	; 336c <_Min_Stack_Size+0x2f6c>
    3368:	4f435349 	svcmi	0x00435349
    336c:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
    3370:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    3374:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    3378:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    337c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3380:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    3384:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    3388:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    338c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 3394 <_Min_Stack_Size+0x2f94>
    3390:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    3394:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    3398:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    339c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    33a0:	5f787834 	svcpl	0x00787834
    33a4:	63737973 	cmnvs	r3, #1884160	; 0x1cc000
    33a8:	632e6766 	teqvs	lr, #26738688	; 0x1980000
    33ac:	53595300 	cmppl	r9, #0, 6
    33b0:	5f474643 	svcpl	0x00474643
    33b4:	6f6d654d 	svcvs	0x006d654d
    33b8:	65527972 	ldrbvs	r7, [r2, #-2418]	; 0x972
    33bc:	4370616d 	cmnmi	r0, #1073741851	; 0x4000001b
    33c0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    33c4:	32490067 	subcc	r0, r9, #103	; 0x67
    33c8:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    33cc:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    33d0:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    33d4:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    33d8:	00746942 	rsbseq	r6, r4, r2, asr #18
    33dc:	5f433249 	svcpl	0x00433249
    33e0:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0x547
    33e4:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0x172
    33e8:	52415453 	subpl	r5, r1, #1392508928	; 0x53000000
    33ec:	32490054 	subcc	r0, r9, #84	; 0x54
    33f0:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    33f4:	43455074 	movtmi	r5, #20596	; 0x5074
    33f8:	43324900 	teqmi	r2, #0, 18
    33fc:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    3400:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    3404:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    3408:	646d436b 	strbtvs	r4, [sp], #-875	; 0x36b
    340c:	43324900 	teqmi	r2, #0, 18
    3410:	6765525f 			; <UNDEFINED> instruction: 0x6765525f
    3414:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0x369
    3418:	52540072 	subspl	r0, r4, #114	; 0x72
    341c:	00455349 	subeq	r5, r5, r9, asr #6
    3420:	5f433249 	svcpl	0x00433249
    3424:	6f435449 	svcvs	0x00435449
    3428:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    342c:	43324900 	teqmi	r2, #0, 18
    3430:	43414e5f 	movtmi	r4, #7775	; 0x1e5f
    3434:	736f504b 	cmnvc	pc, #75	; 0x4b
    3438:	6f697469 	svcvs	0x00697469
    343c:	6e6f436e 	cdpvs	3, 6, cr4, cr15, cr14, {3}
    3440:	00676966 	rsbeq	r6, r7, r6, ror #18
    3444:	5f433249 	svcpl	0x00433249
    3448:	416e774f 	cmnmi	lr, pc, asr #14
    344c:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
    3450:	43327373 	teqmi	r2, #-872415231	; 0xcc000001
    3454:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3458:	32490067 	subcc	r0, r9, #103	; 0x67
    345c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    3460:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    3464:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    3468:	65726600 	ldrbvs	r6, [r2, #-1536]!	; 0x600
    346c:	6e617271 	mcrvs	2, 3, r7, cr1, cr1, {3}
    3470:	49006567 	stmdbmi	r0, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    3474:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    3478:	44646e65 	strbtmi	r6, [r4], #-3685	; 0xe65
    347c:	00617461 	rsbeq	r7, r1, r1, ror #8
    3480:	5f433249 	svcpl	0x00433249
    3484:	636c6143 	cmnvs	ip, #-1073741808	; 0xc0000010
    3488:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xc75
    348c:	43455065 	movtmi	r5, #20581	; 0x5065
    3490:	43324900 	teqmi	r2, #0, 18
    3494:	6f6c435f 	svcvs	0x006c435f
    3498:	70536b63 	subsvc	r6, r3, r3, ror #22
    349c:	00646565 	rsbeq	r6, r4, r5, ror #10
    34a0:	5f433249 	svcpl	0x00433249
    34a4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    34a8:	43324900 	teqmi	r2, #0, 18
    34ac:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    34b0:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    34b4:	0074696e 	rsbseq	r6, r4, lr, ror #18
    34b8:	3152414f 	cmpcc	r2, pc, asr #2
    34bc:	544c4600 	strbpl	r4, [ip], #-1536	; 0x600
    34c0:	32490052 	subcc	r0, r9, #82	; 0x52
    34c4:	4d445f43 	stclmi	15, cr5, [r4, #-268]	; 0xfffffef4
    34c8:	73614c41 	cmnvc	r1, #16640	; 0x4100
    34cc:	61725474 	cmnvs	r2, r4, ror r4
    34d0:	6566736e 	strbvs	r7, [r6, #-878]!	; 0x36e
    34d4:	646d4372 	strbtvs	r4, [sp], #-882	; 0x372
    34d8:	43324900 	teqmi	r2, #0, 18
    34dc:	424d535f 	submi	r5, sp, #2080374785	; 0x7c000001
    34e0:	6c417375 	mcrrvs	3, 7, r7, r1, cr5
    34e4:	43747265 	cmnmi	r4, #1342177286	; 0x50000006
    34e8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    34ec:	32490067 	subcc	r0, r9, #103	; 0x67
    34f0:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    34f4:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    34f8:	32490066 	subcc	r0, r9, #102	; 0x66
    34fc:	69445f43 	stmdbvs	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    3500:	61746967 	cmnvs	r4, r7, ror #18
    3504:	6c69466c 	stclvs	6, cr4, [r9], #-432	; 0xfffffe50
    3508:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    350c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3510:	32490067 	subcc	r0, r9, #103	; 0x67
    3514:	45505f43 	ldrbmi	r5, [r0, #-3907]	; 0xf43
    3518:	736f5043 	cmnvc	pc, #67	; 0x43
    351c:	6f697469 	svcvs	0x00697469
    3520:	6e6f436e 	cdpvs	3, 6, cr4, cr15, cr14, {3}
    3524:	00676966 	rsbeq	r6, r7, r6, ror #18
    3528:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    352c:	00736f70 	rsbseq	r6, r3, r0, ror pc
    3530:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 347c <_Min_Stack_Size+0x307c>
    3534:	656c2f65 	strbvs	r2, [ip, #-3941]!	; 0xf65
    3538:	2f616c69 	svccs	0x00616c69
    353c:	6b736544 	blvs	1cdca54 <_Min_Stack_Size+0x1cdc654>
    3540:	2f706f74 	svccs	0x00706f74
    3544:	616e6966 	cmnvs	lr, r6, ror #18
    3548:	72705f6c 	rsbsvc	r5, r0, #108, 30	; 0x1b0
    354c:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
    3550:	30325f74 	eorscc	r5, r2, r4, ror pc
    3554:	6d653531 	cfstr64vs	mvdx3, [r5, #-196]!	; 0xffffff3c
    3558:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    355c:	612f6465 	teqvs	pc, r5, ror #8
    3560:	426f7475 	rsbmi	r7, pc, #1962934272	; 0x75000000
    3564:	2f74616f 	svccs	0x0074616f
    3568:	54524f43 	ldrbpl	r4, [r2], #-3907	; 0xf43
    356c:	4d5f5845 	ldclmi	8, cr5, [pc, #-276]	; 3460 <_Min_Stack_Size+0x3060>
    3570:	535f4634 	cmppl	pc, #52, 12	; 0x3400000
    3574:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    3578:	5349445f 	movtpl	r4, #37983	; 0x945f
    357c:	45564f43 	ldrbmi	r4, [r6, #-3907]	; 0xf43
    3580:	4c2f5952 	stcmi	9, cr5, [pc], #-328	; 3440 <_Min_Stack_Size+0x3040>
    3584:	61726269 	cmnvs	r2, r9, ror #4
    3588:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    358c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    3590:	34463233 	strbcc	r3, [r6], #-563	; 0x233
    3594:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    3598:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
    359c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    35a0:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    35a4:	2f726576 	svccs	0x00726576
    35a8:	2f637273 	svccs	0x00637273
    35ac:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    35b0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    35b4:	32695f78 	rsbcc	r5, r9, #120, 30	; 0x1e0
    35b8:	00632e63 	rsbeq	r2, r3, r3, ror #28
    35bc:	5f433249 	svcpl	0x00433249
    35c0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    35c4:	43324900 	teqmi	r2, #0, 18
    35c8:	5052415f 	subspl	r4, r2, pc, asr r1
    35cc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    35d0:	5f433249 	svcpl	0x00433249
    35d4:	79747544 	ldmdbvc	r4!, {r2, r6, r8, sl, ip, sp, lr}^
    35d8:	6c637943 	stclvs	9, cr7, [r3], #-268	; 0xfffffef4
    35dc:	32690065 	rsbcc	r0, r9, #101	; 0x65
    35e0:	67657263 	strbvs	r7, [r5, -r3, ror #4]!
    35e4:	43324900 	teqmi	r2, #0, 18
    35e8:	6172545f 	cmnvs	r2, pc, asr r4
    35ec:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    35f0:	43455074 	movtmi	r5, #20596	; 0x5074
    35f4:	43324900 	teqmi	r2, #0, 18
    35f8:	424d535f 	submi	r5, sp, #2080374785	; 0x7c000001
    35fc:	6c417375 	mcrrvs	3, 7, r7, r1, cr5
    3600:	00747265 	rsbseq	r7, r4, r5, ror #4
    3604:	78433249 	stmdavc	r3, {r0, r3, r6, r9, ip, sp}^
    3608:	43324900 	teqmi	r2, #0, 18
    360c:	7269445f 	rsbvc	r4, r9, #1593835520	; 0x5f000000
    3610:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    3614:	49006e6f 	stmdbmi	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    3618:	4e5f4332 	mrcmi	3, 2, r4, cr15, cr2, {1}
    361c:	504b4341 	subpl	r4, fp, r1, asr #6
    3620:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
    3624:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    3628:	5f433249 	svcpl	0x00433249
    362c:	4c746547 	cfldr64mi	mvdx6, [r4], #-284	; 0xfffffee4
    3630:	45747361 	ldrbmi	r7, [r4, #-865]!	; 0x361
    3634:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    3638:	43324900 	teqmi	r2, #0, 18
    363c:	414c465f 	cmpmi	ip, pc, asr r6
    3640:	32490047 	subcc	r0, r9, #71	; 0x47
    3644:	65445f43 	strbvs	r5, [r4, #-3907]	; 0xf43
    3648:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    364c:	43324900 	teqmi	r2, #0, 18
    3650:	6e65475f 	mcrvs	7, 3, r4, cr5, cr15, {2}
    3654:	6c617265 	sfmvs	f7, 2, [r1], #-404	; 0xfffffe6c
    3658:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
    365c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3660:	5f433249 	svcpl	0x00433249
    3664:	63656843 	cmnvs	r5, #4390912	; 0x430000
    3668:	6576456b 	ldrbvs	r4, [r6, #-1387]!	; 0x56b
    366c:	4900746e 	stmdbmi	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3670:	445f4332 	ldrbmi	r4, [pc], #-818	; 3678 <_Min_Stack_Size+0x3278>
    3674:	6d43414d 	stfvse	f4, [r3, #-308]	; 0xfffffecc
    3678:	32490064 	subcc	r0, r9, #100	; 0x64
    367c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    3680:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    3684:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    3688:	32490066 	subcc	r0, r9, #102	; 0x66
    368c:	54495f43 	strbpl	r5, [r9], #-3907	; 0xf43
    3690:	6c637000 	stclvs	0, cr7, [r3], #-0
    3694:	4900316b 	stmdbmi	r0, {r0, r1, r3, r5, r6, r8, ip, sp}
    3698:	435f4332 	cmpmi	pc, #-939524096	; 0xc8000000
    369c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    36a0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    36a4:	37444556 	smlsldcc	r4, r4, r6, r5	; <UNPREDICTABLE>
    36a8:	53455200 	movtpl	r5, #20992	; 0x5200
    36ac:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    36b0:	52003844 	andpl	r3, r0, #68, 16	; 0x440000
    36b4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    36b8:	39444556 	stmdbcc	r4, {r1, r2, r4, r6, r8, sl, lr}^
    36bc:	43324900 	teqmi	r2, #0, 18
    36c0:	6e774f5f 	mrcvs	15, 3, r4, cr7, cr15, {2}
    36c4:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    36c8:	31737365 	cmncc	r3, r5, ror #6
    36cc:	63637200 	cmnvs	r3, #0, 4
    36d0:	6f6c635f 	svcvs	0x006c635f
    36d4:	00736b63 	rsbseq	r6, r3, r3, ror #22
    36d8:	5f433249 	svcpl	0x00433249
    36dc:	006b6341 	rsbeq	r6, fp, r1, asr #6
    36e0:	5f433249 	svcpl	0x00433249
    36e4:	4e455645 	cdpmi	6, 4, cr5, cr5, cr5, {2}
    36e8:	32490054 	subcc	r0, r9, #84	; 0x54
    36ec:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xf43
    36f0:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    36f4:	74614465 	strbtvc	r4, [r1], #-1125	; 0x465
    36f8:	32490061 	subcc	r0, r9, #97	; 0x61
    36fc:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    3700:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    3704:	0067616c 	rsbeq	r6, r7, ip, ror #2
    3708:	5f433249 	svcpl	0x00433249
    370c:	6e6b6341 	cdpvs	3, 6, cr6, cr11, cr1, {2}
    3710:	656c776f 	strbvs	r7, [ip, #-1903]!	; 0x76f
    3714:	64656764 	strbtvs	r6, [r5], #-1892	; 0x764
    3718:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    371c:	00737365 	rsbseq	r7, r3, r5, ror #6
    3720:	5f433249 	svcpl	0x00433249
    3724:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    3728:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
    372c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    3730:	43324900 	teqmi	r2, #0, 18
    3734:	7361465f 	cmnvc	r1, #99614720	; 0x5f00000
    3738:	646f4d74 	strbtvs	r4, [pc], #-3444	; 3740 <_Min_Stack_Size+0x3340>
    373c:	74754465 	ldrbtvc	r4, [r5], #-1125	; 0x465
    3740:	63794379 	cmnvs	r9, #-469762047	; 0xe4000001
    3744:	6f43656c 	svcvs	0x0043656c
    3748:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    374c:	43324900 	teqmi	r2, #0, 18
    3750:	6175445f 	cmnvs	r5, pc, asr r4
    3754:	6464416c 	strbtvs	r4, [r4], #-364	; 0x16c
    3758:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    375c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3760:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    3764:	6c660031 	stclvs	0, cr0, [r6], #-196	; 0xffffff3c
    3768:	00326761 	eorseq	r6, r2, r1, ror #14
    376c:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    3770:	7473656c 	ldrbtvc	r6, [r3], #-1388	; 0x56c
    3774:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    3778:	43324900 	teqmi	r2, #0, 18
    377c:	6b63415f 	blvs	18d3d00 <_Min_Stack_Size+0x18d3900>
    3780:	6c776f6e 	ldclvs	15, cr6, [r7], #-440	; 0xfffffe48
    3784:	65676465 	strbvs	r6, [r7, #-1125]!	; 0x465
    3788:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    378c:	49006769 	stmdbmi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    3790:	505f4332 	subspl	r4, pc, r2, lsr r3	; <UNPREDICTABLE>
    3794:	6f504345 	svcvs	0x00504345
    3798:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    379c:	49006e6f 	stmdbmi	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    37a0:	475f4332 	smmlarmi	pc, r2, r3, r4	; <UNPREDICTABLE>
    37a4:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    37a8:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
    37ac:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    37b0:	73616c00 	cmnvc	r1, #0, 24
    37b4:	65766574 	ldrbvs	r6, [r6, #-1396]!	; 0x574
    37b8:	4900746e 	stmdbmi	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    37bc:	535f4332 	cmppl	pc, #-939524096	; 0xc8000000
    37c0:	7774666f 	ldrbvc	r6, [r4, -pc, ror #12]!
    37c4:	52657261 	rsbpl	r7, r5, #268435462	; 0x10000006
    37c8:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
    37cc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    37d0:	5f433249 	svcpl	0x00433249
    37d4:	646e6553 	strbtvs	r6, [lr], #-1363	; 0x553
    37d8:	74696237 	strbtvc	r6, [r9], #-567	; 0x237
    37dc:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    37e0:	00737365 	rsbseq	r7, r3, r5, ror #6
    37e4:	78633269 	stmdavc	r3!, {r0, r3, r5, r6, r9, ip, sp}^
    37e8:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
    37ec:	52414f00 	subpl	r4, r1, #0, 30
    37f0:	32490032 	subcc	r0, r9, #50	; 0x32
    37f4:	69445f43 	stmdbvs	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    37f8:	61746967 	cmnvs	r4, r7, ror #18
    37fc:	6c69466c 	stclvs	6, cr4, [r9], #-432	; 0xfffffe50
    3800:	00726574 	rsbseq	r6, r2, r4, ror r5
    3804:	5f433249 	svcpl	0x00433249
    3808:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0x547
    380c:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0x172
    3810:	504f5453 	subpl	r5, pc, r3, asr r4	; <UNPREDICTABLE>
    3814:	43324900 	teqmi	r2, #0, 18
    3818:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    381c:	74535449 	ldrbvc	r5, [r3], #-1097	; 0x449
    3820:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    3824:	43324900 	teqmi	r2, #0, 18
    3828:	616e415f 	cmnvs	lr, pc, asr r1
    382c:	46676f6c 	strbtmi	r6, [r7], -ip, ror #30
    3830:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xc69
    3834:	646d4372 	strbtvs	r4, [sp], #-882	; 0x372
    3838:	73657200 	cmnvc	r5, #0, 4
    383c:	00746c75 	rsbseq	r6, r4, r5, ror ip
    3840:	5f414d44 	svcpl	0x00414d44
    3844:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    3848:	4d746e65 	ldclmi	14, cr6, [r4, #-404]!	; 0xfffffe6c
    384c:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    3850:	4d440079 	stclmi	0, cr0, [r4, #-484]	; 0xfffffe1c
    3854:	6d435f41 	stclvs	15, cr5, [r3, #-260]	; 0xfffffefc
    3858:	4d440064 	stclmi	0, cr0, [r4, #-400]	; 0xfffffe70
    385c:	74535f41 	ldrbvc	r5, [r3], #-3905	; 0xf41
    3860:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    3864:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    3868:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    386c:	61747300 	cmnvs	r4, r0, lsl #6
    3870:	44006574 	strmi	r6, [r0], #-1396	; 0x574
    3874:	505f414d 	subspl	r4, pc, sp, asr #2
    3878:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    387c:	00797469 	rsbseq	r7, r9, r9, ror #8
    3880:	5f414d44 	svcpl	0x00414d44
    3884:	6f6d654d 	svcvs	0x006d654d
    3888:	75427972 	strbvc	r7, [r2, #-2418]	; 0x972
    388c:	00747372 	rsbseq	r7, r4, r2, ror r3
    3890:	5f414d44 	svcpl	0x00414d44
    3894:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    3898:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    389c:	44007469 	strmi	r7, [r0], #-1129	; 0x469
    38a0:	505f414d 	subspl	r4, pc, sp, asr #2
    38a4:	70697265 	rsbvc	r7, r9, r5, ror #4
    38a8:	61726568 	cmnvs	r2, r8, ror #10
    38ac:	7275426c 	rsbsvc	r4, r5, #108, 4	; 0xc0000006
    38b0:	44007473 	strmi	r7, [r0], #-1139	; 0x473
    38b4:	475f414d 	ldrbmi	r4, [pc, -sp, asr #2]
    38b8:	49467465 	stmdbmi	r6, {r0, r2, r5, r6, sl, ip, sp, lr}^
    38bc:	74534f46 	ldrbvc	r4, [r3], #-3910	; 0xf46
    38c0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    38c4:	414d4400 	cmpmi	sp, r0, lsl #8
    38c8:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    38cc:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    38d0:	414d4400 	cmpmi	sp, r0, lsl #8
    38d4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    38d8:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    38dc:	4d746e65 	ldclmi	14, cr6, [r4, #-404]!	; 0xfffffe6c
    38e0:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    38e4:	72615479 	rsbvc	r5, r1, #2030043136	; 0x79000000
    38e8:	00746567 	rsbseq	r6, r4, r7, ror #10
    38ec:	5f414d44 	svcpl	0x00414d44
    38f0:	6f6d654d 	svcvs	0x006d654d
    38f4:	61547972 	cmpvs	r4, r2, ror r9
    38f8:	74656772 	strbtvc	r6, [r5], #-1906	; 0x772
    38fc:	414d4400 	cmpmi	sp, r0, lsl #8
    3900:	4d440079 	stclmi	0, cr0, [r4, #-484]	; 0xfffffe1c
    3904:	535f7941 	cmppl	pc, #1064960	; 0x104000
    3908:	61657274 	smcvs	22308	; 0x5724
    390c:	4400786d 	strmi	r7, [r0], #-2157	; 0x86d
    3910:	445f414d 	ldrbmi	r4, [pc], #-333	; 3918 <_Min_Stack_Size+0x3518>
    3914:	2f005249 	svccs	0x00005249
    3918:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
    391c:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
    3920:	442f616c 	strtmi	r6, [pc], #-364	; 3928 <_Min_Stack_Size+0x3528>
    3924:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    3928:	662f706f 	strtvs	r7, [pc], -pc, rrx
    392c:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
    3930:	6f72705f 	svcvs	0x0072705f
    3934:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    3938:	3130325f 	teqcc	r0, pc, asr r2
    393c:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
    3940:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    3944:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
    3948:	6f426f74 	svcvs	0x00426f74
    394c:	432f7461 	teqmi	pc, #1627389952	; 0x61000000
    3950:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    3954:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    3958:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    395c:	5f32334d 	svcpl	0x0032334d
    3960:	43534944 	cmpmi	r3, #68, 18	; 0x110000
    3964:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
    3968:	694c2f59 	stmdbvs	ip, {r0, r3, r4, r6, r8, r9, sl, fp, sp}^
    396c:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    3970:	2f736569 	svccs	0x00736569
    3974:	334d5453 	movtcc	r5, #54355	; 0xd453
    3978:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    397c:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    3980:	72655064 	rsbvc	r5, r5, #100	; 0x64
    3984:	5f687069 	svcpl	0x00687069
    3988:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    398c:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    3990:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    3994:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3998:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    399c:	616d645f 	cmnvs	sp, pc, asr r4
    39a0:	4400632e 	strmi	r6, [r0], #-814	; 0x32e
    39a4:	505f414d 	subspl	r4, pc, sp, asr #2
    39a8:	70697265 	rsbvc	r7, r9, r5, ror #4
    39ac:	61726568 	cmnvs	r2, r8, ror #10
    39b0:	7361426c 	cmnvc	r1, #108, 4	; 0xc0000006
    39b4:	64644165 	strbtvs	r4, [r4], #-357	; 0x165
    39b8:	4d440072 	stclmi	0, cr0, [r4, #-456]	; 0xfffffe38
    39bc:	654d5f41 	strbvs	r5, [sp, #-3905]	; 0xf41
    39c0:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    39c4:	00636e49 	rsbeq	r6, r3, r9, asr #28
    39c8:	43464948 	movtmi	r4, #26952	; 0x6948
    39cc:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    39d0:	6c465f41 	mcrrvs	15, 4, r5, r6, cr1
    39d4:	6f43776f 	svcvs	0x0043776f
    39d8:	6f72746e 	svcvs	0x0072746e
    39dc:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
    39e0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    39e4:	44006769 	strmi	r6, [r0], #-1897	; 0x769
    39e8:	4d5f414d 	ldfmie	f4, [pc, #-308]	; 38bc <_Min_Stack_Size+0x34bc>
    39ec:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    39f0:	72615479 	rsbvc	r5, r1, #2030043136	; 0x79000000
    39f4:	43746567 	cmnmi	r4, #432013312	; 0x19c00000
    39f8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    39fc:	4d440067 	stclmi	0, cr0, [r4, #-412]	; 0xfffffe64
    3a00:	65505f41 	ldrbvs	r5, [r0, #-3905]	; 0xf41
    3a04:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    3a08:	6c617265 	sfmvs	f7, 2, [r1], #-404	; 0xfffffe6c
    3a0c:	00636e49 	rsbeq	r6, r3, r9, asr #28
    3a10:	5f414d44 	svcpl	0x00414d44
    3a14:	62756f44 	rsbsvs	r6, r5, #68, 30	; 0x110
    3a18:	7542656c 	strbvc	r6, [r2, #-1388]	; 0x56c
    3a1c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    3a20:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    3a24:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3a28:	5f414d44 	svcpl	0x00414d44
    3a2c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3a30:	53494c00 	movtpl	r4, #39936	; 0x9c00
    3a34:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    3a38:	6c435f41 	mcrrvs	15, 4, r5, r3, cr1
    3a3c:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    3a40:	0067616c 	rsbeq	r6, r7, ip, ror #2
    3a44:	5f414d44 	svcpl	0x00414d44
    3a48:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    3a4c:	44727275 	ldrbtmi	r7, [r2], #-629	; 0x275
    3a50:	43617461 	cmnmi	r1, #1627389952	; 0x61000000
    3a54:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    3a58:	44007265 	strmi	r7, [r0], #-613	; 0x265
    3a5c:	505f414d 	subspl	r4, pc, sp, asr #2
    3a60:	70697265 	rsbvc	r7, r9, r5, ror #4
    3a64:	61726568 	cmnvs	r2, r8, ror #10
    3a68:	7461446c 	strbtvc	r4, [r1], #-1132	; 0x46c
    3a6c:	7a695361 	bvc	1a587f8 <_Min_Stack_Size+0x1a583f8>
    3a70:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
    3a74:	6e495f41 	cdpvs	15, 4, cr5, cr9, cr1, {2}
    3a78:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    3a7c:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    3a80:	4d440066 	stclmi	0, cr0, [r4, #-408]	; 0xfffffe68
    3a84:	6f445f41 	svcvs	0x00445f41
    3a88:	656c6275 	strbvs	r6, [ip, #-629]!	; 0x275
    3a8c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    3a90:	6f4d7265 	svcvs	0x004d7265
    3a94:	6f436564 	svcvs	0x00436564
    3a98:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3a9c:	414d4400 	cmpmi	sp, r0, lsl #8
    3aa0:	4649465f 			; <UNDEFINED> instruction: 0x4649465f
    3aa4:	7268544f 	rsbvc	r5, r8, #1325400064	; 0x4f000000
    3aa8:	6f687365 	svcvs	0x00687365
    3aac:	4400646c 	strmi	r6, [r0], #-1132	; 0x46c
    3ab0:	475f414d 	ldrbmi	r4, [pc, -sp, asr #2]
    3ab4:	54497465 	strbpl	r7, [r9], #-1125	; 0x465
    3ab8:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    3abc:	48007375 	stmdami	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    3ac0:	00525349 	subseq	r5, r2, r9, asr #6
    3ac4:	5f414d44 	svcpl	0x00414d44
    3ac8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3acc:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    3ad0:	44007463 	strmi	r7, [r0], #-1123	; 0x463
    3ad4:	505f414d 	subspl	r4, pc, sp, asr #2
    3ad8:	6f636e69 	svcvs	0x00636e69
    3adc:	314d0073 	hvccc	53251	; 0xd003
    3ae0:	44005241 	strmi	r5, [r0], #-577	; 0x241
    3ae4:	465f414d 	ldrbmi	r4, [pc], -sp, asr #2
    3ae8:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
    3aec:	006c7274 	rsbeq	r7, ip, r4, ror r2
    3af0:	5f414d44 	svcpl	0x00414d44
    3af4:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    3af8:	414d4400 	cmpmi	sp, r0, lsl #8
    3afc:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    3b00:	54497261 	strbpl	r7, [r9], #-609	; 0x261
    3b04:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    3b08:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    3b0c:	44007469 	strmi	r7, [r0], #-1129	; 0x469
    3b10:	505f414d 	subspl	r4, pc, sp, asr #2
    3b14:	70697265 	rsbvc	r7, r9, r5, ror #4
    3b18:	636e4968 	cmnvs	lr, #104, 18	; 0x1a0000
    3b1c:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    3b20:	69537465 	ldmdbvs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    3b24:	6f43657a 	svcvs	0x0043657a
    3b28:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3b2c:	414d4400 	cmpmi	sp, r0, lsl #8
    3b30:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3b34:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3b38:	5f414d44 	svcpl	0x00414d44
    3b3c:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    3b40:	5367616c 	cmnpl	r7, #108, 2
    3b44:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    3b48:	494c0073 	stmdbmi	ip, {r0, r1, r4, r5, r6}^
    3b4c:	00524346 	subseq	r4, r2, r6, asr #6
    3b50:	5241304d 	subpl	r3, r1, #77	; 0x4d
    3b54:	54444e00 	strbpl	r4, [r4], #-3584	; 0xe00
    3b58:	654d0052 	strbvs	r0, [sp, #-82]	; 0x52
    3b5c:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3b60:	73614231 	cmnvc	r1, #268435459	; 0x10000003
    3b64:	64644165 	strbtvs	r4, [r4], #-357	; 0x165
    3b68:	4d440072 	stclmi	0, cr0, [r4, #-456]	; 0xfffffe38
    3b6c:	49465f41 	stmdbmi	r6, {r0, r6, r8, r9, sl, fp, ip, lr}^
    3b70:	6f4d4f46 	svcvs	0x004d4f46
    3b74:	44006564 	strmi	r6, [r0], #-1380	; 0x564
    3b78:	475f414d 	ldrbmi	r4, [pc, -sp, asr #2]
    3b7c:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    3b80:	61745364 	cmnvs	r4, r4, ror #6
    3b84:	00737574 	rsbseq	r7, r3, r4, ror r5
    3b88:	5f414d44 	svcpl	0x00414d44
    3b8c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    3b90:	006c656e 	rsbeq	r6, ip, lr, ror #10
    3b94:	6f6d654d 	svcvs	0x006d654d
    3b98:	61427972 	hvcvs	10130	; 0x2792
    3b9c:	64416573 	strbvs	r6, [r1], #-1395	; 0x573
    3ba0:	44007264 	strmi	r7, [r0], #-612	; 0x264
    3ba4:	4d5f414d 	ldfmie	f4, [pc, #-308]	; 3a78 <_Min_Stack_Size+0x3678>
    3ba8:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    3bac:	61423079 	hvcvs	8969	; 0x2309
    3bb0:	64416573 	strbvs	r6, [r1], #-1395	; 0x573
    3bb4:	44007264 	strmi	r7, [r0], #-612	; 0x264
    3bb8:	425f414d 	subsmi	r4, pc, #1073741843	; 0x40000013
    3bbc:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    3bc0:	7a695372 	bvc	1a58990 <_Min_Stack_Size+0x1a58590>
    3bc4:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
    3bc8:	6f4d5f41 	svcvs	0x004d5f41
    3bcc:	44006564 	strmi	r6, [r0], #-1380	; 0x564
    3bd0:	475f414d 	ldrbmi	r4, [pc, -sp, asr #2]
    3bd4:	75437465 	strbvc	r7, [r3, #-1125]	; 0x465
    3bd8:	61447272 	hvcvs	18210	; 0x4722
    3bdc:	6f436174 	svcvs	0x00436174
    3be0:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
    3be4:	4d440072 	stclmi	0, cr0, [r4, #-456]	; 0xfffffe38
    3be8:	54495f41 	strbpl	r5, [r9], #-3905	; 0xf41
    3bec:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3bf0:	44006769 	strmi	r6, [r0], #-1897	; 0x769
    3bf4:	495f414d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, lr}^	; <UNPREDICTABLE>
    3bf8:	4d440054 	stclmi	0, cr0, [r4, #-336]	; 0xfffffeb0
    3bfc:	654d5f41 	strbvs	r5, [sp, #-3905]	; 0xf41
    3c00:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3c04:	61746144 	cmnvs	r4, r4, asr #2
    3c08:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
    3c0c:	43585200 	cmpmi	r8, #0, 4
    3c10:	00524352 	subseq	r4, r2, r2, asr r3
    3c14:	6e6c6c70 	mcrvs	12, 3, r6, cr12, cr0, {3}
    3c18:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    3c1c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    3c20:	6c700074 	ldclvs	0, cr0, [r0], #-464	; 0xfffffe30
    3c24:	4900726c 	stmdbmi	r0, {r2, r3, r5, r6, r9, ip, sp, lr}
    3c28:	495f5332 	ldmdbmi	pc, {r1, r4, r5, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    3c2c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    3c30:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    3c34:	52430074 	subpl	r0, r3, #116	; 0x74
    3c38:	00525043 	subseq	r5, r2, r3, asr #32
    3c3c:	5f495053 	svcpl	0x00495053
    3c40:	5f533249 	svcpl	0x00533249
    3c44:	6f435449 	svcvs	0x00435449
    3c48:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3c4c:	53324900 	teqpl	r2, #0, 18
    3c50:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    3c54:	70795474 	rsbsvc	r5, r9, r4, ror r4
    3c58:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    3c5c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    3c60:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    3c64:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3c68:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3c6c:	5f533249 	svcpl	0x00533249
    3c70:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    3c74:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    3c78:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    3c7c:	4469425f 	strbtmi	r4, [r9], #-607	; 0x25f
    3c80:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
    3c84:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    3c88:	694c6c61 	stmdbvs	ip, {r0, r5, r6, sl, fp, sp, lr}^
    3c8c:	6f43656e 	svcvs	0x0043656e
    3c90:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    3c94:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    3c98:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    3c9c:	50435243 	subpl	r5, r3, r3, asr #4
    3ca0:	6e796c6f 	cdpvs	12, 7, cr6, cr9, cr15, {3}
    3ca4:	61696d6f 	cmnvs	r9, pc, ror #26
    3ca8:	7263006c 	rsbvc	r0, r3, #108	; 0x6c
    3cac:	67657263 	strbvs	r7, [r5, -r3, ror #4]!
    3cb0:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    3cb4:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    3cb8:	414d445f 	cmpmi	sp, pc, asr r4
    3cbc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3cc0:	5f495053 	svcpl	0x00495053
    3cc4:	5f533249 	svcpl	0x00533249
    3cc8:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    3ccc:	61745354 	cmnvs	r4, r4, asr r3
    3cd0:	00737574 	rsbseq	r7, r3, r4, ror r5
    3cd4:	5f495053 	svcpl	0x00495053
    3cd8:	4953534e 	ldmdbmi	r3, {r1, r2, r3, r6, r8, r9, ip, lr}^
    3cdc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    3ce0:	536c616e 	cmnpl	ip, #-2147483621	; 0x8000001b
    3ce4:	7774666f 	ldrbvc	r6, [r4, -pc, ror #12]!
    3ce8:	43657261 	cmnmi	r5, #268435462	; 0x10000006
    3cec:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3cf0:	50530067 	subspl	r0, r3, r7, rrx
    3cf4:	74535f49 	ldrbvc	r5, [r3], #-3913	; 0xf49
    3cf8:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    3cfc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3d00:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    3d04:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    3d08:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    3d0c:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    3d10:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    3d14:	53007375 	movwpl	r7, #885	; 0x375
    3d18:	535f4950 	cmppl	pc, #80, 18	; 0x140000
    3d1c:	74754f53 	ldrbtvc	r4, [r5], #-3923	; 0xf53
    3d20:	43747570 	cmnmi	r4, #112, 10	; 0x1c000000
    3d24:	4900646d 	stmdbmi	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    3d28:	65785332 	ldrbvs	r5, [r8, #-818]!	; 0x332
    3d2c:	54007478 	strpl	r7, [r0], #-1144	; 0x478
    3d30:	43524358 	cmpmi	r2, #88, 6	; 0x60000001
    3d34:	50530052 	subspl	r0, r3, r2, asr r0
    3d38:	69445f49 	stmdbvs	r4, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    3d3c:	74636572 	strbtvc	r6, [r3], #-1394	; 0x572
    3d40:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    3d44:	5f495053 	svcpl	0x00495053
    3d48:	00435243 	subeq	r5, r3, r3, asr #4
    3d4c:	5f495053 	svcpl	0x00495053
    3d50:	4953534e 	ldmdbmi	r3, {r1, r2, r3, r6, r8, r9, ip, lr}^
    3d54:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    3d58:	536c616e 	cmnpl	ip, #-2147483621	; 0x8000001b
    3d5c:	0074666f 	rsbseq	r6, r4, pc, ror #12
    3d60:	5f495053 	svcpl	0x00495053
    3d64:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
    3d68:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xd73
    3d6c:	00435243 	subeq	r5, r3, r3, asr #4
    3d70:	5f533249 	svcpl	0x00533249
    3d74:	4b4c434d 	blmi	1314ab0 <_Min_Stack_Size+0x13146b0>
    3d78:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    3d7c:	53007475 	movwpl	r7, #1141	; 0x475
    3d80:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    3d84:	465f5332 			; <UNDEFINED> instruction: 0x465f5332
    3d88:	0047414c 	subeq	r4, r7, ip, asr #2
    3d8c:	5f495053 	svcpl	0x00495053
    3d90:	5f533249 	svcpl	0x00533249
    3d94:	53005449 	movwpl	r5, #1097	; 0x449
    3d98:	445f4950 	ldrbmi	r4, [pc], #-2384	; 3da0 <_Min_Stack_Size+0x39a0>
    3d9c:	53617461 	cmnpl	r1, #1627389952	; 0x61000000
    3da0:	43657a69 	cmnmi	r5, #430080	; 0x69000
    3da4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3da8:	50530067 	subspl	r0, r3, r7, rrx
    3dac:	52435f49 	subpl	r5, r3, #292	; 0x124
    3db0:	6c6f5043 	stclvs	0, cr5, [pc], #-268	; 3cac <_Min_Stack_Size+0x38ac>
    3db4:	6d6f6e79 	stclvs	14, cr6, [pc, #-484]!	; 3bd8 <_Min_Stack_Size+0x37d8>
    3db8:	006c6169 	rsbeq	r6, ip, r9, ror #2
    3dbc:	5f533249 	svcpl	0x00533249
    3dc0:	4c4f5043 	mcrrmi	0, 4, r5, pc, cr3
    3dc4:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    3dc8:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    3dcc:	70795474 	rsbsvc	r5, r9, r4, ror r4
    3dd0:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    3dd4:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    3dd8:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    3ddc:	414d445f 	cmpmi	sp, pc, asr r4
    3de0:	00716552 	rsbseq	r6, r1, r2, asr r5
    3de4:	5f495053 	svcpl	0x00495053
    3de8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    3dec:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    3df0:	53007463 	movwpl	r7, #1123	; 0x463
    3df4:	545f4950 	ldrbpl	r4, [pc], #-2384	; 3dfc <_Min_Stack_Size+0x39fc>
    3df8:	646f4d49 	strbtvs	r4, [pc], #-3401	; 3e00 <_Min_Stack_Size+0x3a00>
    3dfc:	646d4365 	strbtvs	r4, [sp], #-869	; 0x365
    3e00:	53324900 	teqpl	r2, #0, 18
    3e04:	7461445f 	strbtvc	r4, [r1], #-1119	; 0x45f
    3e08:	726f4661 	rsbvc	r4, pc, #101711872	; 0x6100000
    3e0c:	0074616d 	rsbseq	r6, r4, sp, ror #2
    3e10:	50533249 	subspl	r3, r3, r9, asr #4
    3e14:	50530052 	subspl	r0, r3, r2, asr r0
    3e18:	6d435f49 	stclvs	15, cr5, [r3, #-292]	; 0xfffffedc
    3e1c:	32490064 	subcc	r0, r9, #100	; 0x64
    3e20:	6f4d5f53 	svcvs	0x004d5f53
    3e24:	53006564 	movwpl	r6, #1380	; 0x564
    3e28:	495f4950 	ldmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    3e2c:	435f5332 	cmpmi	pc, #-939524096	; 0xc8000000
    3e30:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    3e34:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0x449
    3e38:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    3e3c:	74694267 	strbtvc	r4, [r9], #-615	; 0x267
    3e40:	73326900 	teqvc	r2, #0, 18
    3e44:	00766964 	rsbseq	r6, r6, r4, ror #18
    3e48:	5f533249 	svcpl	0x00533249
    3e4c:	69647541 	stmdbvs	r4!, {r0, r6, r8, sl, ip, sp, lr}^
    3e50:	6572466f 	ldrbvs	r4, [r2, #-1647]!	; 0x66f
    3e54:	50530071 	subspl	r0, r3, r1, ror r0
    3e58:	50435f49 	subpl	r5, r3, r9, asr #30
    3e5c:	49004c4f 	stmdbmi	r0, {r0, r1, r2, r3, r6, sl, fp, lr}
    3e60:	435f5332 	cmpmi	pc, #-939524096	; 0xc8000000
    3e64:	5300646d 	movwpl	r6, #1133	; 0x46d
    3e68:	465f4950 			; <UNDEFINED> instruction: 0x465f4950
    3e6c:	74737269 	ldrbtvc	r7, [r3], #-617	; 0x269
    3e70:	00746942 	rsbseq	r6, r4, r2, asr #18
    3e74:	5f495053 	svcpl	0x00495053
    3e78:	41485043 	cmpmi	r8, r3, asr #32
    3e7c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    3e80:	50530078 	subspl	r0, r3, r8, ror r0
    3e84:	61425f49 	cmpvs	r2, r9, asr #30
    3e88:	61526475 	cmpvs	r2, r5, ror r4
    3e8c:	72506574 	subsvc	r6, r0, #116, 10	; 0x1d000000
    3e90:	61637365 	cmnvs	r3, r5, ror #6
    3e94:	0072656c 	rsbseq	r6, r2, ip, ror #10
    3e98:	5f495053 	svcpl	0x00495053
    3e9c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    3ea0:	00666544 	rsbeq	r6, r6, r4, asr #10
    3ea4:	5f495053 	svcpl	0x00495053
    3ea8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    3eac:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    3eb0:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    3eb4:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    3eb8:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    3ebc:	2f006761 	svccs	0x00006761
    3ec0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
    3ec4:	69656c2f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, sl, fp, sp, lr}^
    3ec8:	442f616c 	strtmi	r6, [pc], #-364	; 3ed0 <_Min_Stack_Size+0x3ad0>
    3ecc:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
    3ed0:	662f706f 	strtvs	r7, [pc], -pc, rrx
    3ed4:	6c616e69 	stclvs	14, cr6, [r1], #-420	; 0xfffffe5c
    3ed8:	6f72705f 	svcvs	0x0072705f
    3edc:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    3ee0:	3130325f 	teqcc	r0, pc, asr r2
    3ee4:	626d6535 	rsbvs	r6, sp, #222298112	; 0xd400000
    3ee8:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    3eec:	75612f64 	strbvc	r2, [r1, #-3940]!	; 0xf64
    3ef0:	6f426f74 	svcvs	0x00426f74
    3ef4:	432f7461 	teqmi	pc, #1627389952	; 0x61000000
    3ef8:	4554524f 	ldrbmi	r5, [r4, #-591]	; 0x24f
    3efc:	344d5f58 	strbcc	r5, [sp], #-3928	; 0xf58
    3f00:	54535f46 	ldrbpl	r5, [r3], #-3910	; 0xf46
    3f04:	5f32334d 	svcpl	0x0032334d
    3f08:	43534944 	cmpmi	r3, #68, 18	; 0x110000
    3f0c:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
    3f10:	694c2f59 	stmdbvs	ip, {r0, r3, r4, r6, r8, r9, sl, fp, sp}^
    3f14:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    3f18:	2f736569 	svccs	0x00736569
    3f1c:	334d5453 	movtcc	r5, #54355	; 0xd453
    3f20:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    3f24:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    3f28:	72655064 	rsbvc	r5, r5, #100	; 0x64
    3f2c:	5f687069 	svcpl	0x00687069
    3f30:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    3f34:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    3f38:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    3f3c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    3f40:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    3f44:	6970735f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
    3f48:	5300632e 	movwpl	r6, #814	; 0x32e
    3f4c:	4e5f4950 	mrcmi	9, 2, r4, cr15, cr0, {2}
    3f50:	53005353 	movwpl	r5, #851	; 0x353
    3f54:	435f4950 	cmpmi	pc, #80, 18	; 0x140000
    3f58:	75636c61 	strbvc	r6, [r3, #-3169]!	; 0xc61
    3f5c:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0x16c
    3f60:	00435243 	subeq	r5, r3, r3, asr #4
    3f64:	5f495053 	svcpl	0x00495053
    3f68:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    3f6c:	49004352 	stmdbmi	r0, {r1, r4, r6, r8, r9, lr}
    3f70:	535f5332 	cmppl	pc, #-939524096	; 0xc8000000
    3f74:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    3f78:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    3f7c:	32490074 	subcc	r0, r9, #116	; 0x74
    3f80:	6e495f53 	mcrvs	15, 2, r5, cr9, cr3, {2}
    3f84:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    3f88:	465f5332 			; <UNDEFINED> instruction: 0x465f5332
    3f8c:	446c6c75 	strbtmi	r6, [ip], #-3189	; 0xc75
    3f90:	656c7075 	strbvs	r7, [ip, #-117]!	; 0x75
    3f94:	6e6f4378 	mcrvs	3, 3, r4, cr15, cr8, {3}
    3f98:	00676966 	rsbeq	r6, r7, r6, ror #18
    3f9c:	5f495053 	svcpl	0x00495053
    3fa0:	61746144 	cmnvs	r4, r4, asr #2
    3fa4:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
    3fa8:	73326900 	teqvc	r2, #0, 18
    3fac:	0064646f 	rsbeq	r6, r4, pc, ror #8
    3fb0:	6b636170 	blvs	18dc578 <_Min_Stack_Size+0x18dc178>
    3fb4:	656c7465 	strbvs	r7, [ip, #-1125]!	; 0x465
    3fb8:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    3fbc:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    3fc0:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    3fc4:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    3fc8:	74614464 	strbtvc	r4, [r1], #-1124	; 0x464
    3fcc:	50530061 	subspl	r0, r3, r1, rrx
    3fd0:	32495f49 	subcc	r5, r9, #292	; 0x124
    3fd4:	65525f53 	ldrbvs	r5, [r2, #-3923]	; 0xf53
    3fd8:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    3fdc:	74614465 	strbtvc	r4, [r1], #-1125	; 0x465
    3fe0:	32690061 	rsbcc	r0, r9, #97	; 0x61
    3fe4:	6b6c6373 	blvs	1b1cdb8 <_Min_Stack_Size+0x1b1c9b8>
    3fe8:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    3fec:	694c5f49 	stmdbvs	ip, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    3ff0:	4500656e 	strmi	r6, [r0, #-1390]	; 0x56e
    3ff4:	5f495458 	svcpl	0x00495458
    3ff8:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
    3ffc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    4000:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    4004:	6972545f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    4008:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    400c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    4010:	6f4d5f49 	svcvs	0x004d5f49
    4014:	455f6564 	ldrbmi	r6, [pc, #-1380]	; 3ab8 <_Min_Stack_Size+0x36b8>
    4018:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    401c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    4020:	65475f49 	strbvs	r5, [r7, #-3913]	; 0xf49
    4024:	6172656e 	cmnvs	r2, lr, ror #10
    4028:	57536574 			; <UNDEFINED> instruction: 0x57536574
    402c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    4030:	70757272 	rsbsvc	r7, r5, r2, ror r2
    4034:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
    4038:	495f4954 	ldmdbmi	pc, {r2, r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    403c:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0x96e
    4040:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    4044:	45006665 	strmi	r6, [r0, #-1637]	; 0x665
    4048:	5f495458 	svcpl	0x00495458
    404c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    4050:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    4054:	45007463 	strmi	r7, [r0, #-1123]	; 0x463
    4058:	5f495458 	svcpl	0x00495458
    405c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    4060:	746e495f 	strbtvc	r4, [lr], #-2399	; 0x95f
    4064:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
    4068:	45007470 	strmi	r7, [r0, #-1136]	; 0x470
    406c:	5f495458 	svcpl	0x00495458
    4070:	61656c43 	cmnvs	r5, r3, asr #24
    4074:	616c4672 	smcvs	50274	; 0xc462
    4078:	58450067 	stmdapl	r5, {r0, r1, r2, r5, r6}^
    407c:	6f4d4954 	svcvs	0x004d4954
    4080:	545f6564 	ldrbpl	r6, [pc], #-1380	; 4088 <_Min_Stack_Size+0x3c88>
    4084:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    4088:	45006665 	strmi	r6, [r0, #-1637]	; 0x665
    408c:	5f495458 	svcpl	0x00495458
    4090:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    4094:	00666544 	rsbeq	r6, r6, r4, asr #10
    4098:	52535452 	subspl	r5, r3, #1375731712	; 0x52000000
    409c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    40a0:	72545f49 	subsvc	r5, r4, #292	; 0x124
    40a4:	65676769 	strbvs	r6, [r7, #-1897]!	; 0x769
    40a8:	69525f72 	ldmdbvs	r2, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    40ac:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
    40b0:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    40b4:	72545f49 	subsvc	r5, r4, #292	; 0x124
    40b8:	65676769 	strbvs	r6, [r7, #-1897]!	; 0x769
    40bc:	69525f72 	ldmdbvs	r2, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    40c0:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
    40c4:	6c61465f 	stclvs	6, cr4, [r1], #-380	; 0xfffffe84
    40c8:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    40cc:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    40d0:	6e495f49 	cdpvs	15, 4, cr5, cr9, cr9, {2}
    40d4:	45007469 	strmi	r7, [r0, #-1129]	; 0x469
    40d8:	5f495458 	svcpl	0x00495458
    40dc:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    40e0:	5367616c 	cmnpl	r7, #108, 2
    40e4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    40e8:	58450073 	stmdapl	r5, {r0, r1, r4, r5, r6}^
    40ec:	535f4954 	cmppl	pc, #84, 18	; 0x150000
    40f0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    40f4:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    40f8:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	; <UNPREDICTABLE>
    40fc:	2f656d6f 	svccs	0x00656d6f
    4100:	6c69656c 	cfstr64vs	mvdx6, [r9], #-432	; 0xfffffe50
    4104:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xf61
    4108:	6f746b73 	svcvs	0x00746b73
    410c:	69662f70 	stmdbvs	r6!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    4110:	5f6c616e 	svcpl	0x006c616e
    4114:	6a6f7270 	bvs	1be0adc <_Min_Stack_Size+0x1be06dc>
    4118:	5f746365 	svcpl	0x00746365
    411c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0x32
    4120:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    4124:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    4128:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0x12f
    412c:	616f426f 	cmnvs	pc, pc, ror #4
    4130:	4f432f74 	svcmi	0x00432f74
    4134:	58455452 	stmdapl	r5, {r1, r4, r6, sl, ip, lr}^
    4138:	46344d5f 			; <UNDEFINED> instruction: 0x46344d5f
    413c:	4d54535f 	ldclmi	3, cr5, [r4, #-380]	; 0xfffffe84
    4140:	445f3233 	ldrbmi	r3, [pc], #-563	; 4148 <_Min_Stack_Size+0x3d48>
    4144:	4f435349 	svcmi	0x00435349
    4148:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
    414c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    4150:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    4154:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    4158:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    415c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    4160:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    4164:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    4168:	445f6870 	ldrbmi	r6, [pc], #-2160	; 4170 <_Min_Stack_Size+0x3d70>
    416c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    4170:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    4174:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    4178:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    417c:	5f787834 	svcpl	0x00787834
    4180:	69747865 	ldmdbvs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    4184:	4500632e 	strmi	r6, [r0, #-814]	; 0x32e
    4188:	5f495458 	svcpl	0x00495458
    418c:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    4190:	61745354 	cmnvs	r4, r4, asr r3
    4194:	00737574 	rsbseq	r7, r3, r4, ror r5
    4198:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    419c:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    41a0:	54497261 	strbpl	r7, [r9], #-609	; 0x261
    41a4:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    41a8:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    41ac:	45007469 	strmi	r7, [r0, #-1129]	; 0x469
    41b0:	5f495458 	svcpl	0x00495458
    41b4:	67697254 			; <UNDEFINED> instruction: 0x67697254
    41b8:	5f726567 	svcpl	0x00726567
    41bc:	6c6c6146 	stfvse	f6, [ip], #-280	; 0xfffffee8
    41c0:	00676e69 	rsbeq	r6, r7, r9, ror #28
    41c4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    41c8:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 41d0 <_Min_Stack_Size+0x3dd0>
    41cc:	54460065 	strbpl	r0, [r6], #-101	; 0x65
    41d0:	45005253 	strmi	r5, [r0, #-595]	; 0x253
    41d4:	54495458 	strbpl	r5, [r9], #-1112	; 0x458
    41d8:	67676972 			; <UNDEFINED> instruction: 0x67676972
    41dc:	545f7265 	ldrbpl	r7, [pc], #-613	; 41e4 <_Min_Stack_Size+0x3de4>
    41e0:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    41e4:	53006665 	movwpl	r6, #1637	; 0x665
    41e8:	52454957 	subpl	r4, r5, #1425408	; 0x15c000
    41ec:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    41f0:	65445f49 	strbvs	r5, [r4, #-3913]	; 0xf49
    41f4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    41f8:	4d545300 	ldclmi	3, cr5, [r4, #-0]
    41fc:	4156455f 	cmpmi	r6, pc, asr r5
    4200:	42505f4c 	subsmi	r5, r0, #76, 30	; 0x130
    4204:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    4208:	43545200 	cmpmi	r4, #0, 4
    420c:	554b575f 	strbpl	r5, [fp, #-1887]	; 0x75f
    4210:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
    4214:	45006e51 	strmi	r6, [r0, #-3665]	; 0xe51
    4218:	32495458 	subcc	r5, r9, #88, 8	; 0x58000000
    421c:	5152495f 	cmppl	r2, pc, asr r9
    4220:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    4224:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
    4228:	61657274 	smcvs	22308	; 0x5724
    422c:	495f366d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
    4230:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4234:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
    4238:	5f50555f 	svcpl	0x0050555f
    423c:	314d4954 	cmpcc	sp, r4, asr r9
    4240:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
    4244:	73006e51 	movwvc	r6, #3665	; 0xe51
    4248:	4c5f4545 	cfldr64mi	mvdx4, [pc], {69}	; 0x45
    424c:	654c776f 	strbvs	r7, [ip, #-1903]	; 0x76f
    4250:	5f6c6576 	svcpl	0x006c6576
    4254:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    4258:	54554200 	ldrbpl	r4, [r5], #-512	; 0x200
    425c:	5f4e4f54 	svcpl	0x004e4f54
    4260:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    4264:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    4268:	55420045 	strbpl	r0, [r2, #-69]	; 0x45
    426c:	4e4f5454 	mcrmi	4, 2, r5, cr15, cr4, {2}
    4270:	4e49505f 	mcrmi	0, 2, r5, cr9, cr15, {2}
    4274:	554f535f 	strbpl	r5, [pc, #-863]	; 3f1d <_Min_Stack_Size+0x3b1d>
    4278:	00454352 	subeq	r4, r5, r2, asr r3
    427c:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    4280:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    4284:	316d6165 	cmncc	sp, r5, ror #2
    4288:	5152495f 	cmppl	r2, pc, asr r9
    428c:	5053006e 	subspl	r0, r3, lr, rrx
    4290:	495f3349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    4294:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4298:	53414c46 	movtpl	r4, #7238	; 0x1c46
    429c:	52495f48 	subpl	r5, r9, #72, 30	; 0x120
    42a0:	42006e51 	andmi	r6, r0, #1296	; 0x510
    42a4:	4f545455 	svcmi	0x00545455
    42a8:	4c435f4e 	mcrrmi	15, 4, r5, r3, cr14
    42ac:	4344004b 	movtmi	r0, #16459	; 0x404b
    42b0:	495f494d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    42b4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    42b8:	324d4954 	subcc	r4, sp, #84, 18	; 0x150000
    42bc:	5152495f 	cmppl	r2, pc, asr r9
    42c0:	564e006e 	strbpl	r0, [lr], -lr, rrx
    42c4:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    42c8:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    42cc:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    42d0:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    42d4:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    42d8:	58525f32 	ldmdapl	r2, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    42dc:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
    42e0:	55006e51 	strpl	r6, [r0, #-3665]	; 0xe51
    42e4:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    42e8:	52495f36 	subpl	r5, r9, #54, 30	; 0xd8
    42ec:	53006e51 	movwpl	r6, #3665	; 0xe51
    42f0:	5f324950 	svcpl	0x00324950
    42f4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    42f8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    42fc:	52425f38 	subpl	r5, r2, #56, 30	; 0xe0
    4300:	49545f4b 	ldmdbmi	r4, {r0, r1, r3, r6, r8, r9, sl, fp, ip, lr}^
    4304:	5f32314d 	svcpl	0x0032314d
    4308:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    430c:	4d545300 	ldclmi	3, cr5, [r4, #-0]
    4310:	4156455f 	cmpmi	r6, pc, asr r5
    4314:	454c5f4c 	strbmi	r5, [ip, #-3916]	; 0xf4c
    4318:	006e4f44 	rsbeq	r4, lr, r4, asr #30
    431c:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    4320:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    4324:	356d6165 	strbcc	r6, [sp, #-357]!	; 0x165
    4328:	5152495f 	cmppl	r2, pc, asr r9
    432c:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    4330:	545f314d 	ldrbpl	r3, [pc], #-333	; 4338 <_Min_Stack_Size+0x3f38>
    4334:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
    4338:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 4340 <_Min_Stack_Size+0x3f40>
    433c:	31314d49 	teqcc	r1, r9, asr #26
    4340:	5152495f 	cmppl	r2, pc, asr r9
    4344:	5047006e 	subpl	r0, r7, lr, rrx
    4348:	505f4f49 	subspl	r4, pc, r9, asr #30
    434c:	0054524f 	subseq	r5, r4, pc, asr #4
    4350:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    4354:	5f6b6369 	svcpl	0x006b6369
    4358:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    435c:	41535500 	cmpmi	r3, r0, lsl #10
    4360:	5f335452 	svcpl	0x00335452
    4364:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4368:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    436c:	4c435f4f 	mcrrmi	15, 4, r5, r3, cr15
    4370:	7542004b 	strbvc	r0, [r2, #-75]	; 0x4b
    4374:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    4378:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    437c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    4380:	414d4400 	cmpmi	sp, r0, lsl #8
    4384:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xf31
    4388:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    438c:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
    4390:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
    4394:	5f32414d 	svcpl	0x0032414d
    4398:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    439c:	5f346d61 	svcpl	0x00346d61
    43a0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    43a4:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
    43a8:	52495f36 	subpl	r5, r9, #54, 30	; 0xd8
    43ac:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
    43b0:	5f314332 	svcpl	0x00314332
    43b4:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    43b8:	006e5152 	rsbeq	r5, lr, r2, asr r1
    43bc:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
    43c0:	4543535f 	strbmi	r5, [r3, #-863]	; 0x35f
    43c4:	5152495f 	cmppl	r2, pc, asr r9
    43c8:	5542006e 	strbpl	r0, [r2, #-110]	; 0x6e
    43cc:	4e4f5454 	mcrmi	4, 2, r5, cr15, cr4, {2}
    43d0:	524f505f 	subpl	r5, pc, #95	; 0x5f
    43d4:	4f535f54 	svcmi	0x00535f54
    43d8:	45435255 	strbmi	r5, [r3, #-597]	; 0x255
    43dc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    43e0:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    43e4:	55006e51 	strpl	r6, [r0, #-3665]	; 0xe51
    43e8:	65676173 	strbvs	r6, [r7, #-371]!	; 0x173
    43ec:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
    43f0:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
    43f4:	4c006e51 	stcmi	14, cr6, [r0], {81}	; 0x51
    43f8:	5f434454 	svcpl	0x00434454
    43fc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4400:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    4404:	58525f31 	ldmdapl	r2, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
    4408:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
    440c:	53006e51 	movwpl	r6, #3665	; 0xe51
    4410:	5f354950 	svcpl	0x00354950
    4414:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4418:	49415300 	stmdbmi	r1, {r8, r9, ip, lr}^
    441c:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    4420:	54006e51 	strpl	r6, [r0], #-3665	; 0xe51
    4424:	5f344d49 	svcpl	0x00344d49
    4428:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    442c:	41535500 	cmpmi	r3, r0, lsl #10
    4430:	5f325452 	svcpl	0x00325452
    4434:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4438:	52415500 	subpl	r5, r1, #0, 10
    443c:	495f3854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, sp}^	; <UNPREDICTABLE>
    4440:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4444:	5f4d5453 	svcpl	0x004d5453
    4448:	4c415645 	mcrrmi	6, 4, r5, r1, cr5
    444c:	44454c5f 	strbmi	r4, [r5], #-3167	; 0xc5f
    4450:	0066664f 	rsbeq	r6, r6, pc, asr #12
    4454:	31433249 	cmpcc	r3, r9, asr #4
    4458:	5f56455f 	svcpl	0x0056455f
    445c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4460:	75427000 	strbvc	r7, [r2, #-0]
    4464:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    4468:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    446c:	43435f31 	movtmi	r5, #16177	; 0x3f31
    4470:	5152495f 	cmppl	r2, pc, asr r9
    4474:	4148006e 	cmpmi	r8, lr, rrx
    4478:	525f4853 	subspl	r4, pc, #5439488	; 0x530000
    447c:	495f474e 	ldmdbmi	pc, {r1, r2, r3, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    4480:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4484:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    4488:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    448c:	43006e51 	movwmi	r6, #3665	; 0xe51
    4490:	5f314e41 	svcpl	0x00314e41
    4494:	495f5854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
    4498:	006e5152 	rsbeq	r5, lr, r2, asr r1
    449c:	31414d44 	cmpcc	r1, r4, asr #26
    44a0:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    44a4:	356d6165 	strbcc	r6, [sp, #-357]!	; 0x165
    44a8:	5152495f 	cmppl	r2, pc, asr r9
    44ac:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    44b0:	545f384d 	ldrbpl	r3, [pc], #-2125	; 44b8 <_Min_Stack_Size+0x40b8>
    44b4:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
    44b8:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 44c0 <_Min_Stack_Size+0x40c0>
    44bc:	34314d49 	ldrtcc	r4, [r1], #-3401	; 0xd49
    44c0:	5152495f 	cmppl	r2, pc, asr r9
    44c4:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    44c8:	535f3241 	cmppl	pc, #268435460	; 0x10000004
    44cc:	61657274 	smcvs	22308	; 0x5724
    44d0:	495f376d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
    44d4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    44d8:	5f47544f 	svcpl	0x0047544f
    44dc:	495f5346 	ldmdbmi	pc, {r1, r2, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    44e0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    44e4:	4d6e6f4e 	stclmi	15, cr6, [lr, #-312]!	; 0xfffffec8
    44e8:	616b7361 	cmnvs	fp, r1, ror #6
    44ec:	49656c62 	stmdbmi	r5!, {r1, r5, r6, sl, fp, sp, lr}^
    44f0:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    44f4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    44f8:	47445757 	smlsldmi	r5, r4, r7, r7
    44fc:	5152495f 	cmppl	r2, pc, asr r9
    4500:	544f006e 	strbpl	r0, [pc], #-110	; 4508 <_Min_Stack_Size+0x4108>
    4504:	53485f47 	movtpl	r5, #36679	; 0x8f47
    4508:	554b575f 	strbpl	r5, [fp, #-1887]	; 0x75f
    450c:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
    4510:	4d006e51 	stcmi	14, cr6, [r0, #-324]	; 0xfffffebc
    4514:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    4518:	6e614d79 	mcrvs	13, 3, r4, cr1, cr9, {3}
    451c:	6d656761 	stclvs	7, cr6, [r5, #-388]!	; 0xfffffe7c
    4520:	5f746e65 	svcpl	0x00746e65
    4524:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4528:	4d415400 	cfstrdmi	mvd5, [r1, #-0]
    452c:	54535f50 	ldrbpl	r5, [r3], #-3920	; 0xf50
    4530:	5f504d41 	svcpl	0x00504d41
    4534:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4538:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    453c:	43535f31 	cmpmi	r3, #49, 30	; 0xc4
    4540:	52495f45 	subpl	r5, r9, #276	; 0x114
    4544:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
    4548:	5f32414d 	svcpl	0x0032414d
    454c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    4550:	5f306d61 	svcpl	0x00306d61
    4554:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4558:	4d545300 	ldclmi	3, cr5, [r4, #-0]
    455c:	4156455f 	cmpmi	r6, pc, asr r5
    4560:	454c5f4c 	strbmi	r5, [ip, #-3916]	; 0xf4c
    4564:	696e4944 	stmdbvs	lr!, {r2, r6, r8, fp, lr}^
    4568:	32490074 	subcc	r0, r9, #116	; 0x74
    456c:	455f3243 	ldrbmi	r3, [pc, #-579]	; 4331 <_Min_Stack_Size+0x3f31>
    4570:	52495f52 	subpl	r5, r9, #328	; 0x148
    4574:	42006e51 	andmi	r6, r0, #1296	; 0x510
    4578:	61467375 	hvcvs	26421	; 0x6735
    457c:	5f746c75 	svcpl	0x00746c75
    4580:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4584:	52415500 	subpl	r5, r1, #0, 10
    4588:	495f3554 	ldmdbmi	pc, {r2, r4, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
    458c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4590:	314d4954 	cmpcc	sp, r4, asr r9
    4594:	4b52425f 	blmi	1494f18 <_Min_Stack_Size+0x1494b18>
    4598:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    459c:	52495f39 	subpl	r5, r9, #57, 30	; 0xe4
    45a0:	54006e51 	strpl	r6, [r0], #-3665	; 0xe51
    45a4:	5f374d49 	svcpl	0x00374d49
    45a8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    45ac:	48544500 	ldmdami	r4, {r8, sl, lr}^
    45b0:	554b575f 	strbpl	r5, [fp, #-1887]	; 0x75f
    45b4:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
    45b8:	4f006e51 	svcmi	0x00006e51
    45bc:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    45c0:	52495f53 	subpl	r5, r9, #332	; 0x14c
    45c4:	53006e51 	movwpl	r6, #3665	; 0xe51
    45c8:	5f314950 	svcpl	0x00314950
    45cc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    45d0:	43565300 	cmpmi	r6, #0, 6
    45d4:	5f6c6c61 	svcpl	0x006c6c61
    45d8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    45dc:	54554200 	ldrbpl	r4, [r5], #-512	; 0x200
    45e0:	5f4e4f54 	svcpl	0x004e4f54
    45e4:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xf4d
    45e8:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0x55f
    45ec:	45730049 	ldrbmi	r0, [r3, #-73]!	; 0x49
    45f0:	6f4c5f45 	svcvs	0x004c5f45
    45f4:	76654c77 			; <UNDEFINED> instruction: 0x76654c77
    45f8:	445f6c65 	ldrbmi	r6, [pc], #-3173	; 4600 <_Min_Stack_Size+0x4200>
    45fc:	6f43414d 	svcvs	0x0043414d
    4600:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    4604:	55504600 	ldrbpl	r4, [r0, #-1536]	; 0x600
    4608:	5152495f 	cmppl	r2, pc, asr r9
    460c:	4155006e 	cmpmi	r5, lr, rrx
    4610:	5f345452 	svcpl	0x00345452
    4614:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4618:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
    461c:	5f53465f 	svcpl	0x0053465f
    4620:	50554b57 	subspl	r4, r5, r7, asr fp
    4624:	5152495f 	cmppl	r2, pc, asr r9
    4628:	5542006e 	strbpl	r0, [r2, #-110]	; 0x6e
    462c:	4e4f5454 	mcrmi	4, 2, r5, cr15, cr4, {2}
    4630:	444f4d5f 	strbmi	r4, [pc], #-3423	; 4638 <_Min_Stack_Size+0x4238>
    4634:	50475f45 	subpl	r5, r7, r5, asr #30
    4638:	45004f49 	strmi	r4, [r0, #-3913]	; 0xf49
    463c:	34495458 	strbcc	r5, [r9], #-1112	; 0x458
    4640:	5152495f 	cmppl	r2, pc, asr r9
    4644:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    4648:	445f364d 	ldrbmi	r3, [pc], #-1613	; 4650 <_Min_Stack_Size+0x4250>
    464c:	495f4341 	ldmdbmi	pc, {r0, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    4650:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4654:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    4658:	52495f44 	subpl	r5, r9, #68, 30	; 0x110
    465c:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
    4660:	5f324332 	svcpl	0x00324332
    4664:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    4668:	006e5152 	rsbeq	r5, lr, r2, asr r1
    466c:	5f4d5453 	svcpl	0x004d5453
    4670:	4c415645 	mcrrmi	6, 4, r5, r1, cr5
    4674:	44454c5f 	strbmi	r4, [r5], #-3167	; 0xc5f
    4678:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
    467c:	4200656c 	andmi	r6, r0, #108, 10	; 0x1b000000
    4680:	4f545455 	svcmi	0x00545455
    4684:	49505f4e 	ldmdbmi	r0, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    4688:	4d44004e 	stclmi	0, cr0, [r4, #-312]	; 0xfffffec8
    468c:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
    4690:	61657274 	smcvs	22308	; 0x5724
    4694:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    4698:	006e5152 	rsbeq	r5, lr, r2, asr r1
    469c:	3344454c 	movtcc	r4, #17740	; 0x454c
    46a0:	44454c00 	strbmi	r4, [r5], #-3072	; 0xc00
    46a4:	4d440034 	stclmi	0, cr0, [r4, #-208]	; 0xffffff30
    46a8:	535f3241 	cmppl	pc, #268435460	; 0x10000004
    46ac:	61657274 	smcvs	22308	; 0x5724
    46b0:	495f336d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    46b4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    46b8:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
    46bc:	5f58545f 	svcpl	0x0058545f
    46c0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    46c4:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    46c8:	6e495f49 	cdpvs	15, 4, cr5, cr9, cr9, {2}
    46cc:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    46d0:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    46d4:	00657275 	rsbeq	r7, r5, r5, ror r2
    46d8:	74747542 	ldrbtvc	r7, [r4], #-1346	; 0x542
    46dc:	42006e6f 	andmi	r6, r0, #1776	; 0x6f0
    46e0:	4f545455 	svcmi	0x00545455
    46e4:	53555f4e 	cmppl	r5, #312	; 0x138
    46e8:	44005245 	strmi	r5, [r0], #-581	; 0x245
    46ec:	5f31414d 	svcpl	0x0031414d
    46f0:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    46f4:	5f306d61 	svcpl	0x00306d61
    46f8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    46fc:	74754200 	ldrbtvc	r4, [r5], #-512	; 0x200
    4700:	4d6e6f74 	stclmi	15, cr6, [lr, #-464]!	; 0xfffffe30
    4704:	5f65646f 	svcpl	0x0065646f
    4708:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    470c:	00666544 	rsbeq	r6, r6, r4, asr #10
    4710:	5f435452 	svcpl	0x00435452
    4714:	72616c41 	rsbvc	r6, r1, #16640	; 0x4100
    4718:	52495f6d 	subpl	r5, r9, #436	; 0x1b4
    471c:	53006e51 	movwpl	r6, #3665	; 0xe51
    4720:	5f344950 	svcpl	0x00344950
    4724:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4728:	434d4600 	movtmi	r4, #54784	; 0xd600
    472c:	5152495f 	cmppl	r2, pc, asr r9
    4730:	3249006e 	subcc	r0, r9, #110	; 0x6e
    4734:	455f3343 	ldrbmi	r3, [pc, #-835]	; 43f9 <_Min_Stack_Size+0x3ff9>
    4738:	52495f52 	subpl	r5, r9, #328	; 0x148
    473c:	43006e51 	movwmi	r6, #3665	; 0xe51
    4740:	5f505952 	svcpl	0x00505952
    4744:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4748:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    474c:	5f353149 	svcpl	0x00353149
    4750:	495f3031 	ldmdbmi	pc, {r0, r4, r5, ip, sp}^	; <UNPREDICTABLE>
    4754:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4758:	334d4954 	movtcc	r4, #55636	; 0xd954
    475c:	5152495f 	cmppl	r2, pc, asr r9
    4760:	5355006e 	cmppl	r5, #110	; 0x6e
    4764:	31545241 	cmpcc	r4, r1, asr #4
    4768:	5152495f 	cmppl	r2, pc, asr r9
    476c:	4155006e 	cmpmi	r5, lr, rrx
    4770:	5f375452 	svcpl	0x00375452
    4774:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4778:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    477c:	49505f4f 	ldmdbmi	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    4780:	4143004e 	cmpmi	r3, lr, asr #32
    4784:	525f324e 	subspl	r3, pc, #-536870908	; 0xe0000004
    4788:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    478c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4790:	5f434441 	svcpl	0x00434441
    4794:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4798:	54554200 	ldrbpl	r4, [r5], #-512	; 0x200
    479c:	5f4e4f54 	svcpl	0x004e4f54
    47a0:	54524f50 	ldrbpl	r4, [r2], #-3920	; 0xf50
    47a4:	44565000 	ldrbmi	r5, [r6], #-0
    47a8:	5152495f 	cmppl	r2, pc, asr r9
    47ac:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
    47b0:	5f304954 	svcpl	0x00304954
    47b4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    47b8:	414d4400 	cmpmi	sp, r0, lsl #8
    47bc:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xf31
    47c0:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    47c4:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    47c8:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
    47cc:	5f32414d 	svcpl	0x0032414d
    47d0:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    47d4:	5f366d61 	svcpl	0x00366d61
    47d8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    47dc:	62654400 	rsbvs	r4, r5, #0, 8
    47e0:	6f4d6775 	svcvs	0x004d6775
    47e4:	6f74696e 	svcvs	0x0074696e
    47e8:	52495f72 	subpl	r5, r9, #456	; 0x1c8
    47ec:	42006e51 	andmi	r6, r0, #1296	; 0x510
    47f0:	4f545455 	svcmi	0x00545455
    47f4:	52495f4e 	subpl	r5, r9, #312	; 0x138
    47f8:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
    47fc:	5f334332 	svcpl	0x00334332
    4800:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    4804:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4808:	5f485445 	svcpl	0x00485445
    480c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4810:	64654c00 	strbtvs	r4, [r5], #-3072	; 0xc00
    4814:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    4818:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    481c:	43435200 	movtmi	r5, #12800	; 0x3200
    4820:	5152495f 	cmppl	r2, pc, asr r9
    4824:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
    4828:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
    482c:	61657274 	smcvs	22308	; 0x5724
    4830:	495f336d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    4834:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4838:	314d4954 	cmpcc	sp, r4, asr r9
    483c:	5f50555f 	svcpl	0x0050555f
    4840:	314d4954 	cmpcc	sp, r4, asr r9
    4844:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
    4848:	73006e51 	movwvc	r6, #3665	; 0xe51
    484c:	4c5f4545 	cfldr64mi	mvdx4, [pc], {69}	; 0x45
    4850:	654c776f 	strbvs	r7, [ip, #-1903]	; 0x76f
    4854:	5f6c6576 	svcpl	0x006c6576
    4858:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    485c:	53007469 	movwpl	r7, #1129	; 0x469
    4860:	455f4d54 	ldrbmi	r4, [pc, #-3412]	; 3b14 <_Min_Stack_Size+0x3714>
    4864:	5f4c4156 	svcpl	0x004c4156
    4868:	65474250 	strbvs	r4, [r7, #-592]	; 0x250
    486c:	61745374 	cmnvs	r4, r4, ror r3
    4870:	4c006574 	cfstr32mi	mvfx6, [r0], {116}	; 0x74
    4874:	5f434454 	svcpl	0x00434454
    4878:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    487c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4880:	5f47544f 	svcpl	0x0047544f
    4884:	455f5348 	ldrbmi	r5, [pc, #-840]	; 4544 <_Min_Stack_Size+0x4144>
    4888:	4f5f3150 	svcmi	0x005f3150
    488c:	495f5455 	ldmdbmi	pc, {r0, r2, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    4890:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4894:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 47e0 <_Min_Stack_Size+0x43e0>
    4898:	656c2f65 	strbvs	r2, [ip, #-3941]!	; 0xf65
    489c:	2f616c69 	svccs	0x00616c69
    48a0:	6b736544 	blvs	1cdddb8 <_Min_Stack_Size+0x1cdd9b8>
    48a4:	2f706f74 	svccs	0x00706f74
    48a8:	616e6966 	cmnvs	lr, r6, ror #18
    48ac:	72705f6c 	rsbsvc	r5, r0, #108, 30	; 0x1b0
    48b0:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
    48b4:	30325f74 	eorscc	r5, r2, r4, ror pc
    48b8:	6d653531 	cfstr64vs	mvdx3, [r5, #-196]!	; 0xffffff3c
    48bc:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    48c0:	612f6465 	teqvs	pc, r5, ror #8
    48c4:	426f7475 	rsbmi	r7, pc, #1962934272	; 0x75000000
    48c8:	2f74616f 	svccs	0x0074616f
    48cc:	6c697455 	cfstrdvs	mvd7, [r9], #-340	; 0xfffffeac
    48d0:	65697469 	strbvs	r7, [r9, #-1129]!	; 0x469
    48d4:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    48d8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    48dc:	49393234 	ldmdbmi	r9!, {r2, r4, r5, r9, ip, sp}
    48e0:	7369442d 	cmnvc	r9, #754974720	; 0x2d000000
    48e4:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xf63
    48e8:	732f7972 	teqvc	pc, #1867776	; 0x1c8000
    48ec:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    48f0:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
    48f4:	69645f69 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    48f8:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
    48fc:	2e797265 	cdpcs	2, 7, cr7, cr9, cr5, {3}
    4900:	41430063 	cmpmi	r3, r3, rrx
    4904:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
    4908:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    490c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4910:	74747542 	ldrbtvc	r7, [r4], #-1346	; 0x542
    4914:	4d5f6e6f 	ldclmi	14, cr6, [pc, #-444]	; 4760 <_Min_Stack_Size+0x4360>
    4918:	0065646f 	rsbeq	r6, r5, pc, ror #8
    491c:	44454573 	strbmi	r4, [r5], #-1395	; 0x573
    4920:	495f414d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, lr}^	; <UNPREDICTABLE>
    4924:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    4928:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    492c:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    4930:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    4934:	355f3949 	ldrbcc	r3, [pc, #-2377]	; 3ff3 <_Min_Stack_Size+0x3bf3>
    4938:	5152495f 	cmppl	r2, pc, asr r9
    493c:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    4940:	435f384d 	cmpmi	pc, #5046272	; 0x4d0000
    4944:	52495f43 	subpl	r5, r9, #268	; 0x10c
    4948:	53006e51 	movwpl	r6, #3665	; 0xe51
    494c:	5f4f4944 	svcpl	0x004f4944
    4950:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4954:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    4958:	495f3349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    495c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    4960:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    4964:	495f5653 	ldmdbmi	pc, {r0, r1, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    4968:	006e5152 	rsbeq	r5, lr, r2, asr r1
    496c:	5f47544f 	svcpl	0x0047544f
    4970:	455f5348 	ldrbmi	r5, [pc, #-840]	; 4630 <_Min_Stack_Size+0x4230>
    4974:	495f3150 	ldmdbmi	pc, {r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    4978:	52495f4e 	subpl	r5, r9, #312	; 0x138
    497c:	44006e51 	strmi	r6, [r0], #-3665	; 0xe51
    4980:	5f31414d 	svcpl	0x0031414d
    4984:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0x453
    4988:	5f376d61 	svcpl	0x00376d61
    498c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    4990:	414d4400 	cmpmi	sp, r0, lsl #8
    4994:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xf32
    4998:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    499c:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
    49a0:	Address 0x00000000000049a0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <_Min_Stack_Size+0x10d0924>
   4:	2e342820 	cdpcs	8, 3, cr2, cr4, cr0, {1}
   8:	2d332e38 	ldccs	14, cr2, [r3, #-224]!	; 0xffffff20
   c:	62753831 	rsbsvs	r3, r5, #3211264	; 0x310000
  10:	75746e75 	ldrbvc	r6, [r4, #-3701]!	; 0xe75
  14:	32312b32 	eorscc	r2, r1, #51200	; 0xc800
  18:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  1c:	00332e38 	eorseq	r2, r3, r8, lsr lr

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000014 	andeq	r0, r0, r4, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
      1c:	00000030 	andeq	r0, r0, r0, lsr r0
      20:	83080e41 	movwhi	r0, #36417	; 0x8e41
      24:	00018e02 	andeq	r8, r1, r2, lsl #28
      28:	0000000c 	andeq	r0, r0, ip
      2c:	00000000 	andeq	r0, r0, r0
      30:	0800036c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9}
      34:	00000008 	andeq	r0, r0, r8
      38:	00000014 	andeq	r0, r0, r4, lsl r0
      3c:	00000000 	andeq	r0, r0, r0
      40:	08000374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9}
      44:	00000030 	andeq	r0, r0, r0, lsr r0
      48:	8e040e41 	cdphi	14, 0, cr0, cr4, cr1, {2}
      4c:	100e4101 	andne	r4, lr, r1, lsl #2
      50:	00000018 	andeq	r0, r0, r8, lsl r0
      54:	00000000 	andeq	r0, r0, r0
      58:	080003a4 	stmdaeq	r0, {r2, r5, r7, r8, r9}
      5c:	0000003c 	andeq	r0, r0, ip, lsr r0
      60:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
      64:	42018e02 	andmi	r8, r1, #2, 28
      68:	0000180e 	andeq	r1, r0, lr, lsl #16
      6c:	0000000c 	andeq	r0, r0, ip
      70:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      74:	7c020001 	stcvc	0, cr0, [r2], {1}
      78:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      7c:	00000010 	andeq	r0, r0, r0, lsl r0
      80:	0000006c 	andeq	r0, r0, ip, rrx
      84:	080003e0 	stmdaeq	r0, {r5, r6, r7, r8, r9}
      88:	00000100 	andeq	r0, r0, r0, lsl #2
      8c:	00080e58 	andeq	r0, r8, r8, asr lr
      90:	0000000c 	andeq	r0, r0, ip
      94:	0000006c 	andeq	r0, r0, ip, rrx
      98:	080004e0 	stmdaeq	r0, {r5, r6, r7, sl}
      9c:	00000070 	andeq	r0, r0, r0, ror r0
      a0:	0000000c 	andeq	r0, r0, ip
      a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      a8:	7c020001 	stcvc	0, cr0, [r2], {1}
      ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      b0:	0000000c 	andeq	r0, r0, ip
      b4:	000000a0 	andeq	r0, r0, r0, lsr #1
      b8:	08000550 	stmdaeq	r0, {r4, r6, r8, sl}
      bc:	00000002 	andeq	r0, r0, r2
      c0:	0000000c 	andeq	r0, r0, ip
      c4:	000000a0 	andeq	r0, r0, r0, lsr #1
      c8:	08000554 	stmdaeq	r0, {r2, r4, r6, r8, sl}
      cc:	00000002 	andeq	r0, r0, r2
      d0:	0000000c 	andeq	r0, r0, ip
      d4:	000000a0 	andeq	r0, r0, r0, lsr #1
      d8:	08000558 	stmdaeq	r0, {r3, r4, r6, r8, sl}
      dc:	00000002 	andeq	r0, r0, r2
      e0:	0000000c 	andeq	r0, r0, ip
      e4:	000000a0 	andeq	r0, r0, r0, lsr #1
      e8:	0800055c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl}
      ec:	00000002 	andeq	r0, r0, r2
      f0:	0000000c 	andeq	r0, r0, ip
      f4:	000000a0 	andeq	r0, r0, r0, lsr #1
      f8:	08000560 	stmdaeq	r0, {r5, r6, r8, sl}
      fc:	00000002 	andeq	r0, r0, r2
     100:	0000000c 	andeq	r0, r0, ip
     104:	000000a0 	andeq	r0, r0, r0, lsr #1
     108:	08000564 	stmdaeq	r0, {r2, r5, r6, r8, sl}
     10c:	00000002 	andeq	r0, r0, r2
     110:	0000000c 	andeq	r0, r0, ip
     114:	000000a0 	andeq	r0, r0, r0, lsr #1
     118:	08000568 	stmdaeq	r0, {r3, r5, r6, r8, sl}
     11c:	00000002 	andeq	r0, r0, r2
     120:	0000000c 	andeq	r0, r0, ip
     124:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     128:	7c020001 	stcvc	0, cr0, [r2], {1}
     12c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     130:	00000020 	andeq	r0, r0, r0, lsr #32
     134:	00000120 	andeq	r0, r0, r0, lsr #2
     138:	0800056c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl}
     13c:	000000cc 	andeq	r0, r0, ip, asr #1
     140:	83200e42 	teqhi	r0, #1056	; 0x420
     144:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
     148:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     14c:	89038804 	stmdbhi	r3, {r2, fp, pc}
     150:	00018e02 	andeq	r8, r1, r2, lsl #28
     154:	0000001c 	andeq	r0, r0, ip, lsl r0
     158:	00000120 	andeq	r0, r0, r0, lsr #2
     15c:	08000638 	stmdaeq	r0, {r3, r4, r5, r9, sl}
     160:	0000004c 	andeq	r0, r0, ip, asr #32
     164:	83180e41 	tsthi	r8, #1040	; 0x410
     168:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     16c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     170:	00018e02 	andeq	r8, r1, r2, lsl #28
     174:	00000024 	andeq	r0, r0, r4, lsr #32
     178:	00000120 	andeq	r0, r0, r0, lsr #2
     17c:	08000684 	stmdaeq	r0, {r2, r7, r9, sl}
     180:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     184:	83280e42 	teqhi	r8, #1056	; 0x420
     188:	8509840a 	strhi	r8, [r9, #-1034]	; 0x40a
     18c:	87078608 	strhi	r8, [r7, -r8, lsl #12]
     190:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
     194:	8b038a04 	blhi	e29ac <_Min_Stack_Size+0xe25ac>
     198:	00018e02 	andeq	r8, r1, r2, lsl #28
     19c:	00000018 	andeq	r0, r0, r8, lsl r0
     1a0:	00000120 	andeq	r0, r0, r0, lsr #2
     1a4:	0800083c 	stmdaeq	r0, {r2, r3, r4, r5, fp}
     1a8:	00000034 	andeq	r0, r0, r4, lsr r0
     1ac:	83100e41 	tsthi	r0, #1040	; 0x410
     1b0:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     1b4:	00018e02 	andeq	r8, r1, r2, lsl #28
     1b8:	0000000c 	andeq	r0, r0, ip
     1bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     1c0:	7c020001 	stcvc	0, cr0, [r2], {1}
     1c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     1c8:	00000014 	andeq	r0, r0, r4, lsl r0
     1cc:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     1d0:	08000870 	stmdaeq	r0, {r4, r5, r6, fp}
     1d4:	0000001a 	andeq	r0, r0, sl, lsl r0
     1d8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     1dc:	00018e02 	andeq	r8, r1, r2, lsl #28
     1e0:	00000020 	andeq	r0, r0, r0, lsr #32
     1e4:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     1e8:	0800088c 	stmdaeq	r0, {r2, r3, r7, fp}
     1ec:	000000ce 	andeq	r0, r0, lr, asr #1
     1f0:	83200e42 	teqhi	r0, #1056	; 0x420
     1f4:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
     1f8:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     1fc:	89038804 	stmdbhi	r3, {r2, fp, pc}
     200:	00018e02 	andeq	r8, r1, r2, lsl #28
     204:	00000018 	andeq	r0, r0, r8, lsl r0
     208:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     20c:	0800095c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp}
     210:	00000026 	andeq	r0, r0, r6, lsr #32
     214:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xe43
     218:	86038504 	strhi	r8, [r3], -r4, lsl #10
     21c:	00018e02 	andeq	r8, r1, r2, lsl #28
     220:	00000018 	andeq	r0, r0, r8, lsl r0
     224:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     228:	08000984 	stmdaeq	r0, {r2, r7, r8, fp}
     22c:	00000026 	andeq	r0, r0, r6, lsr #32
     230:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xe43
     234:	86038504 	strhi	r8, [r3], -r4, lsl #10
     238:	00018e02 	andeq	r8, r1, r2, lsl #28
     23c:	0000001c 	andeq	r0, r0, ip, lsl r0
     240:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     244:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
     248:	00000070 	andeq	r0, r0, r0, ror r0
     24c:	83180e41 	tsthi	r8, #1040	; 0x410
     250:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     254:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     258:	00018e02 	andeq	r8, r1, r2, lsl #28
     25c:	0000001c 	andeq	r0, r0, ip, lsl r0
     260:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     264:	08000a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp}
     268:	000000b2 	strheq	r0, [r0], -r2
     26c:	83180e43 	tsthi	r8, #1072	; 0x430
     270:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     274:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     278:	00018e02 	andeq	r8, r1, r2, lsl #28
     27c:	00000018 	andeq	r0, r0, r8, lsl r0
     280:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     284:	08000ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp}
     288:	00000040 	andeq	r0, r0, r0, asr #32
     28c:	83100e41 	tsthi	r0, #1040	; 0x410
     290:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     294:	00018e02 	andeq	r8, r1, r2, lsl #28
     298:	0000001c 	andeq	r0, r0, ip, lsl r0
     29c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     2a0:	08000b10 	stmdaeq	r0, {r4, r8, r9, fp}
     2a4:	0000007a 	andeq	r0, r0, sl, ror r0
     2a8:	83180e41 	tsthi	r8, #1040	; 0x410
     2ac:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     2b0:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     2b4:	00018e02 	andeq	r8, r1, r2, lsl #28
     2b8:	0000000c 	andeq	r0, r0, ip
     2bc:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     2c0:	08000b8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, fp}
     2c4:	00000006 	andeq	r0, r0, r6
     2c8:	0000000c 	andeq	r0, r0, ip
     2cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     2d0:	7c020001 	stcvc	0, cr0, [r2], {1}
     2d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     2d8:	0000000c 	andeq	r0, r0, ip
     2dc:	000002c8 	andeq	r0, r0, r8, asr #5
     2e0:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
     2e4:	00000016 	andeq	r0, r0, r6, lsl r0
     2e8:	0000000c 	andeq	r0, r0, ip
     2ec:	000002c8 	andeq	r0, r0, r8, asr #5
     2f0:	08000bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp}
     2f4:	00000006 	andeq	r0, r0, r6
     2f8:	00000014 	andeq	r0, r0, r4, lsl r0
     2fc:	000002c8 	andeq	r0, r0, r8, asr #5
     300:	08000bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp}
     304:	0000001c 	andeq	r0, r0, ip, lsl r0
     308:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
     30c:	00018502 	andeq	r8, r1, r2, lsl #10
     310:	00000014 	andeq	r0, r0, r4, lsl r0
     314:	000002c8 	andeq	r0, r0, r8, asr #5
     318:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
     31c:	00000032 	andeq	r0, r0, r2, lsr r0
     320:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     324:	00018502 	andeq	r8, r1, r2, lsl #10
     328:	00000014 	andeq	r0, r0, r4, lsl r0
     32c:	000002c8 	andeq	r0, r0, r8, asr #5
     330:	08000c04 	stmdaeq	r0, {r2, sl, fp}
     334:	00000028 	andeq	r0, r0, r8, lsr #32
     338:	84040e44 	strhi	r0, [r4], #-3652	; 0xe44
     33c:	00000001 	andeq	r0, r0, r1
     340:	0000000c 	andeq	r0, r0, ip
     344:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     348:	7c020001 	stcvc	0, cr0, [r2], {1}
     34c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     350:	00000014 	andeq	r0, r0, r4, lsl r0
     354:	00000340 	andeq	r0, r0, r0, asr #6
     358:	08000c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp}
     35c:	00000026 	andeq	r0, r0, r6, lsr #32
     360:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     364:	00018502 	andeq	r8, r1, r2, lsl #10
     368:	00000018 	andeq	r0, r0, r8, lsl r0
     36c:	00000340 	andeq	r0, r0, r0, asr #6
     370:	08000c54 	stmdaeq	r0, {r2, r4, r6, sl, fp}
     374:	00000084 	andeq	r0, r0, r4, lsl #1
     378:	83100e41 	tsthi	r0, #1040	; 0x410
     37c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     380:	00018e02 	andeq	r8, r1, r2, lsl #28
     384:	00000018 	andeq	r0, r0, r8, lsl r0
     388:	00000340 	andeq	r0, r0, r0, asr #6
     38c:	08000cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp}
     390:	00000072 	andeq	r0, r0, r2, ror r0
     394:	83100e41 	tsthi	r0, #1040	; 0x410
     398:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     39c:	00018e02 	andeq	r8, r1, r2, lsl #28
     3a0:	0000001c 	andeq	r0, r0, ip, lsl r0
     3a4:	00000340 	andeq	r0, r0, r0, asr #6
     3a8:	08000d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp}
     3ac:	00000076 	andeq	r0, r0, r6, ror r0
     3b0:	83180e41 	tsthi	r8, #1040	; 0x410
     3b4:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     3b8:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     3bc:	00018e02 	andeq	r8, r1, r2, lsl #28
     3c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     3c4:	00000340 	andeq	r0, r0, r0, asr #6
     3c8:	08000dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp}
     3cc:	00000084 	andeq	r0, r0, r4, lsl #1
     3d0:	83180e41 	tsthi	r8, #1040	; 0x410
     3d4:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     3d8:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     3dc:	00018e02 	andeq	r8, r1, r2, lsl #28
     3e0:	00000020 	andeq	r0, r0, r0, lsr #32
     3e4:	00000340 	andeq	r0, r0, r0, asr #6
     3e8:	08000e48 	stmdaeq	r0, {r3, r6, r9, sl, fp}
     3ec:	00000298 	muleq	r0, r8, r2
     3f0:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
     3f4:	86068507 	strhi	r8, [r6], -r7, lsl #10
     3f8:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
     3fc:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
     400:	300e4101 	andcc	r4, lr, r1, lsl #2
     404:	00000018 	andeq	r0, r0, r8, lsl r0
     408:	00000340 	andeq	r0, r0, r0, asr #6
     40c:	080010e0 	stmdaeq	r0, {r5, r6, r7, ip}
     410:	00000050 	andeq	r0, r0, r0, asr r0
     414:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     418:	86038504 	strhi	r8, [r3], -r4, lsl #10
     41c:	00018e02 	andeq	r8, r1, r2, lsl #28
     420:	00000018 	andeq	r0, r0, r8, lsl r0
     424:	00000340 	andeq	r0, r0, r0, asr #6
     428:	08001130 	stmdaeq	r0, {r4, r5, r8, ip}
     42c:	00000034 	andeq	r0, r0, r4, lsr r0
     430:	83100e41 	tsthi	r0, #1040	; 0x410
     434:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     438:	00018e02 	andeq	r8, r1, r2, lsl #28
     43c:	0000001c 	andeq	r0, r0, ip, lsl r0
     440:	00000340 	andeq	r0, r0, r0, asr #6
     444:	08001164 	stmdaeq	r0, {r2, r5, r6, r8, ip}
     448:	00000122 	andeq	r0, r0, r2, lsr #2
     44c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
     450:	86058506 	strhi	r8, [r5], -r6, lsl #10
     454:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     458:	00018e02 	andeq	r8, r1, r2, lsl #28
     45c:	00000020 	andeq	r0, r0, r0, lsr #32
     460:	00000340 	andeq	r0, r0, r0, asr #6
     464:	08001288 	stmdaeq	r0, {r3, r7, r9, ip}
     468:	0000025a 	andeq	r0, r0, sl, asr r2
     46c:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
     470:	86068507 	strhi	r8, [r6], -r7, lsl #10
     474:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
     478:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
     47c:	300e4101 	andcc	r4, lr, r1, lsl #2
     480:	00000018 	andeq	r0, r0, r8, lsl r0
     484:	00000340 	andeq	r0, r0, r0, asr #6
     488:	080014e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip}
     48c:	0000003c 	andeq	r0, r0, ip, lsr r0
     490:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     494:	86038504 	strhi	r8, [r3], -r4, lsl #10
     498:	00018e02 	andeq	r8, r1, r2, lsl #28
     49c:	0000001c 	andeq	r0, r0, ip, lsl r0
     4a0:	00000340 	andeq	r0, r0, r0, asr #6
     4a4:	08001520 	stmdaeq	r0, {r5, r8, sl, ip}
     4a8:	00000082 	andeq	r0, r0, r2, lsl #1
     4ac:	83180e41 	tsthi	r8, #1040	; 0x410
     4b0:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     4b4:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     4b8:	00018e02 	andeq	r8, r1, r2, lsl #28
     4bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     4c0:	00000340 	andeq	r0, r0, r0, asr #6
     4c4:	080015a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip}
     4c8:	0000004c 	andeq	r0, r0, ip, asr #32
     4cc:	83180e41 	tsthi	r8, #1040	; 0x410
     4d0:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     4d4:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     4d8:	00018e02 	andeq	r8, r1, r2, lsl #28
     4dc:	00000014 	andeq	r0, r0, r4, lsl r0
     4e0:	00000340 	andeq	r0, r0, r0, asr #6
     4e4:	080015f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, ip}
     4e8:	0000001a 	andeq	r0, r0, sl, lsl r0
     4ec:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     4f0:	00018e02 	andeq	r8, r1, r2, lsl #28
     4f4:	00000014 	andeq	r0, r0, r4, lsl r0
     4f8:	00000340 	andeq	r0, r0, r0, asr #6
     4fc:	0800160c 	stmdaeq	r0, {r2, r3, r9, sl, ip}
     500:	0000001e 	andeq	r0, r0, lr, lsl r0
     504:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     508:	00018e02 	andeq	r8, r1, r2, lsl #28
     50c:	00000014 	andeq	r0, r0, r4, lsl r0
     510:	00000340 	andeq	r0, r0, r0, asr #6
     514:	0800162c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip}
     518:	0000000e 	andeq	r0, r0, lr
     51c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     520:	00018e02 	andeq	r8, r1, r2, lsl #28
     524:	00000014 	andeq	r0, r0, r4, lsl r0
     528:	00000340 	andeq	r0, r0, r0, asr #6
     52c:	0800163c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip}
     530:	00000094 	muleq	r0, r4, r0
     534:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     538:	00018e02 	andeq	r8, r1, r2, lsl #28
     53c:	0000000c 	andeq	r0, r0, ip
     540:	00000340 	andeq	r0, r0, r0, asr #6
     544:	080016d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip}
     548:	00000004 	andeq	r0, r0, r4
     54c:	0000000c 	andeq	r0, r0, ip
     550:	00000340 	andeq	r0, r0, r0, asr #6
     554:	080016d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, ip}
     558:	00000004 	andeq	r0, r0, r4
     55c:	0000000c 	andeq	r0, r0, ip
     560:	00000340 	andeq	r0, r0, r0, asr #6
     564:	080016d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip}
     568:	00000006 	andeq	r0, r0, r6
     56c:	00000014 	andeq	r0, r0, r4, lsl r0
     570:	00000340 	andeq	r0, r0, r0, asr #6
     574:	080016e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, ip}
     578:	00000016 	andeq	r0, r0, r6, lsl r0
     57c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     580:	00018e02 	andeq	r8, r1, r2, lsl #28
     584:	00000014 	andeq	r0, r0, r4, lsl r0
     588:	00000340 	andeq	r0, r0, r0, asr #6
     58c:	080016f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, ip}
     590:	00000016 	andeq	r0, r0, r6, lsl r0
     594:	83080e41 	movwhi	r0, #36417	; 0x8e41
     598:	00018e02 	andeq	r8, r1, r2, lsl #28
     59c:	00000014 	andeq	r0, r0, r4, lsl r0
     5a0:	00000340 	andeq	r0, r0, r0, asr #6
     5a4:	08001710 	stmdaeq	r0, {r4, r8, r9, sl, ip}
     5a8:	00000058 	andeq	r0, r0, r8, asr r0
     5ac:	84040e43 	strhi	r0, [r4], #-3651	; 0xe43
     5b0:	00000001 	andeq	r0, r0, r1
     5b4:	0000000c 	andeq	r0, r0, ip
     5b8:	00000340 	andeq	r0, r0, r0, asr #6
     5bc:	08001768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip}
     5c0:	00000060 	andeq	r0, r0, r0, rrx
     5c4:	00000018 	andeq	r0, r0, r8, lsl r0
     5c8:	00000340 	andeq	r0, r0, r0, asr #6
     5cc:	080017c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip}
     5d0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     5d4:	83100e41 	tsthi	r0, #1040	; 0x410
     5d8:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     5dc:	00018e02 	andeq	r8, r1, r2, lsl #28
     5e0:	0000000c 	andeq	r0, r0, ip
     5e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     5e8:	7c020001 	stcvc	0, cr0, [r2], {1}
     5ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     5f0:	00000018 	andeq	r0, r0, r8, lsl r0
     5f4:	000005e0 	andeq	r0, r0, r0, ror #11
     5f8:	08001878 	stmdaeq	r0, {r3, r4, r5, r6, fp, ip}
     5fc:	00000060 	andeq	r0, r0, r0, rrx
     600:	83100e41 	tsthi	r0, #1040	; 0x410
     604:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     608:	00018e02 	andeq	r8, r1, r2, lsl #28
     60c:	00000024 	andeq	r0, r0, r4, lsr #32
     610:	000005e0 	andeq	r0, r0, r0, ror #11
     614:	080018d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, ip}
     618:	000001a8 	andeq	r0, r0, r8, lsr #3
     61c:	83280e42 	teqhi	r8, #1056	; 0x420
     620:	8509840a 	strhi	r8, [r9, #-1034]	; 0x40a
     624:	87078608 	strhi	r8, [r7, -r8, lsl #12]
     628:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
     62c:	8b038a04 	blhi	e2e44 <_Min_Stack_Size+0xe2a44>
     630:	00018e02 	andeq	r8, r1, r2, lsl #28
     634:	00000018 	andeq	r0, r0, r8, lsl r0
     638:	000005e0 	andeq	r0, r0, r0, ror #11
     63c:	08001a80 	stmdaeq	r0, {r7, r9, fp, ip}
     640:	000000a4 	andeq	r0, r0, r4, lsr #1
     644:	83100e41 	tsthi	r0, #1040	; 0x410
     648:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     64c:	00018e02 	andeq	r8, r1, r2, lsl #28
     650:	00000014 	andeq	r0, r0, r4, lsl r0
     654:	000005e0 	andeq	r0, r0, r0, ror #11
     658:	08001b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, ip}
     65c:	00000028 	andeq	r0, r0, r8, lsr #32
     660:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     664:	00018e02 	andeq	r8, r1, r2, lsl #28
     668:	0000001c 	andeq	r0, r0, ip, lsl r0
     66c:	000005e0 	andeq	r0, r0, r0, ror #11
     670:	08001b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip}
     674:	000000b8 	strheq	r0, [r0], -r8
     678:	83180e42 	tsthi	r8, #1056	; 0x420
     67c:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     680:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     684:	00018e02 	andeq	r8, r1, r2, lsl #28
     688:	0000001c 	andeq	r0, r0, ip, lsl r0
     68c:	000005e0 	andeq	r0, r0, r0, ror #11
     690:	08001c04 	stmdaeq	r0, {r2, sl, fp, ip}
     694:	0000011c 	andeq	r0, r0, ip, lsl r1
     698:	83180e41 	tsthi	r8, #1040	; 0x410
     69c:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     6a0:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     6a4:	00018e02 	andeq	r8, r1, r2, lsl #28
     6a8:	00000018 	andeq	r0, r0, r8, lsl r0
     6ac:	000005e0 	andeq	r0, r0, r0, ror #11
     6b0:	08001d20 	stmdaeq	r0, {r5, r8, sl, fp, ip}
     6b4:	00000080 	andeq	r0, r0, r0, lsl #1
     6b8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     6bc:	86038504 	strhi	r8, [r3], -r4, lsl #10
     6c0:	00018e02 	andeq	r8, r1, r2, lsl #28
     6c4:	0000001c 	andeq	r0, r0, ip, lsl r0
     6c8:	000005e0 	andeq	r0, r0, r0, ror #11
     6cc:	08001da0 	stmdaeq	r0, {r5, r7, r8, sl, fp, ip}
     6d0:	000000a4 	andeq	r0, r0, r4, lsr #1
     6d4:	83180e41 	tsthi	r8, #1040	; 0x410
     6d8:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     6dc:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     6e0:	00018e02 	andeq	r8, r1, r2, lsl #28
     6e4:	0000001c 	andeq	r0, r0, ip, lsl r0
     6e8:	000005e0 	andeq	r0, r0, r0, ror #11
     6ec:	08001e44 	stmdaeq	r0, {r2, r6, r9, sl, fp, ip}
     6f0:	00000138 	andeq	r0, r0, r8, lsr r1
     6f4:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xe42
     6f8:	86058506 	strhi	r8, [r5], -r6, lsl #10
     6fc:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     700:	00018e02 	andeq	r8, r1, r2, lsl #28
     704:	00000014 	andeq	r0, r0, r4, lsl r0
     708:	000005e0 	andeq	r0, r0, r0, ror #11
     70c:	08001f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip}
     710:	00000018 	andeq	r0, r0, r8, lsl r0
     714:	83080e41 	movwhi	r0, #36417	; 0x8e41
     718:	00018e02 	andeq	r8, r1, r2, lsl #28
     71c:	0000000c 	andeq	r0, r0, ip
     720:	000005e0 	andeq	r0, r0, r0, ror #11
     724:	08001f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip}
     728:	00000010 	andeq	r0, r0, r0, lsl r0
     72c:	00000014 	andeq	r0, r0, r4, lsl r0
     730:	000005e0 	andeq	r0, r0, r0, ror #11
     734:	08001fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip}
     738:	00000018 	andeq	r0, r0, r8, lsl r0
     73c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     740:	00018e02 	andeq	r8, r1, r2, lsl #28
     744:	00000014 	andeq	r0, r0, r4, lsl r0
     748:	000005e0 	andeq	r0, r0, r0, ror #11
     74c:	08001fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, ip}
     750:	0000001c 	andeq	r0, r0, ip, lsl r0
     754:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     758:	00018e02 	andeq	r8, r1, r2, lsl #28
     75c:	0000000c 	andeq	r0, r0, ip
     760:	000005e0 	andeq	r0, r0, r0, ror #11
     764:	08001fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp, ip}
     768:	0000000c 	andeq	r0, r0, ip
     76c:	00000024 	andeq	r0, r0, r4, lsr #32
     770:	000005e0 	andeq	r0, r0, r0, ror #11
     774:	08001fe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, ip}
     778:	00000144 	andeq	r0, r0, r4, asr #2
     77c:	83280e42 	teqhi	r8, #1056	; 0x420
     780:	8509840a 	strhi	r8, [r9, #-1034]	; 0x40a
     784:	87078608 	strhi	r8, [r7, -r8, lsl #12]
     788:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
     78c:	8b038a04 	blhi	e2fa4 <_Min_Stack_Size+0xe2ba4>
     790:	00018e02 	andeq	r8, r1, r2, lsl #28
     794:	00000024 	andeq	r0, r0, r4, lsr #32
     798:	000005e0 	andeq	r0, r0, r0, ror #11
     79c:	08002128 	stmdaeq	r0, {r3, r5, r8, sp}
     7a0:	000000e8 	andeq	r0, r0, r8, ror #1
     7a4:	83280e42 	teqhi	r8, #1056	; 0x420
     7a8:	8509840a 	strhi	r8, [r9, #-1034]	; 0x40a
     7ac:	87078608 	strhi	r8, [r7, -r8, lsl #12]
     7b0:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
     7b4:	8b038a04 	blhi	e2fcc <_Min_Stack_Size+0xe2bcc>
     7b8:	00018e02 	andeq	r8, r1, r2, lsl #28
     7bc:	00000018 	andeq	r0, r0, r8, lsl r0
     7c0:	000005e0 	andeq	r0, r0, r0, ror #11
     7c4:	08002210 	stmdaeq	r0, {r4, r9, sp}
     7c8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     7cc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     7d0:	86038504 	strhi	r8, [r3], -r4, lsl #10
     7d4:	00018e02 	andeq	r8, r1, r2, lsl #28
     7d8:	00000018 	andeq	r0, r0, r8, lsl r0
     7dc:	000005e0 	andeq	r0, r0, r0, ror #11
     7e0:	080022c0 	stmdaeq	r0, {r6, r7, r9, sp}
     7e4:	00000080 	andeq	r0, r0, r0, lsl #1
     7e8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     7ec:	86038504 	strhi	r8, [r3], -r4, lsl #10
     7f0:	00018e02 	andeq	r8, r1, r2, lsl #28
     7f4:	00000018 	andeq	r0, r0, r8, lsl r0
     7f8:	000005e0 	andeq	r0, r0, r0, ror #11
     7fc:	08002340 	stmdaeq	r0, {r6, r8, r9, sp}
     800:	00000088 	andeq	r0, r0, r8, lsl #1
     804:	83100e49 	tsthi	r0, #1168	; 0x490
     808:	8b038704 	blhi	e2420 <_Min_Stack_Size+0xe2020>
     80c:	00018e02 	andeq	r8, r1, r2, lsl #28
     810:	00000024 	andeq	r0, r0, r4, lsr #32
     814:	000005e0 	andeq	r0, r0, r0, ror #11
     818:	080023c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sp}
     81c:	000003a0 	andeq	r0, r0, r0, lsr #7
     820:	84240e43 	strthi	r0, [r4], #-3651	; 0xe43
     824:	86088509 	strhi	r8, [r8], -r9, lsl #10
     828:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     82c:	8a048905 	bhi	122c48 <_Min_Stack_Size+0x122848>
     830:	8e028b03 	vmlahi.f64	d8, d2, d3
     834:	380e4601 	stmdacc	lr, {r0, r9, sl, lr}
     838:	00000014 	andeq	r0, r0, r4, lsl r0
     83c:	000005e0 	andeq	r0, r0, r0, ror #11
     840:	08002768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, sp}
     844:	0000008c 	andeq	r0, r0, ip, lsl #1
     848:	83080e41 	movwhi	r0, #36417	; 0x8e41
     84c:	00018e02 	andeq	r8, r1, r2, lsl #28
     850:	00000018 	andeq	r0, r0, r8, lsl r0
     854:	000005e0 	andeq	r0, r0, r0, ror #11
     858:	080027f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, sp}
     85c:	00000084 	andeq	r0, r0, r4, lsl #1
     860:	83100e41 	tsthi	r0, #1040	; 0x410
     864:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     868:	00018e02 	andeq	r8, r1, r2, lsl #28
     86c:	00000018 	andeq	r0, r0, r8, lsl r0
     870:	000005e0 	andeq	r0, r0, r0, ror #11
     874:	08002878 	stmdaeq	r0, {r3, r4, r5, r6, fp, sp}
     878:	0000009c 	muleq	r0, ip, r0
     87c:	83100e41 	tsthi	r0, #1040	; 0x410
     880:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     884:	00018e02 	andeq	r8, r1, r2, lsl #28
     888:	00000018 	andeq	r0, r0, r8, lsl r0
     88c:	000005e0 	andeq	r0, r0, r0, ror #11
     890:	08002914 	stmdaeq	r0, {r2, r4, r8, fp, sp}
     894:	0000006c 	andeq	r0, r0, ip, rrx
     898:	83100e41 	tsthi	r0, #1040	; 0x410
     89c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     8a0:	00018e02 	andeq	r8, r1, r2, lsl #28
     8a4:	00000018 	andeq	r0, r0, r8, lsl r0
     8a8:	000005e0 	andeq	r0, r0, r0, ror #11
     8ac:	08002980 	stmdaeq	r0, {r7, r8, fp, sp}
     8b0:	0000007c 	andeq	r0, r0, ip, ror r0
     8b4:	83100e41 	tsthi	r0, #1040	; 0x410
     8b8:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     8bc:	00018e02 	andeq	r8, r1, r2, lsl #28
     8c0:	00000018 	andeq	r0, r0, r8, lsl r0
     8c4:	000005e0 	andeq	r0, r0, r0, ror #11
     8c8:	080029fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, sp}
     8cc:	00000070 	andeq	r0, r0, r0, ror r0
     8d0:	83100e41 	tsthi	r0, #1040	; 0x410
     8d4:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     8d8:	00018e02 	andeq	r8, r1, r2, lsl #28
     8dc:	00000014 	andeq	r0, r0, r4, lsl r0
     8e0:	000005e0 	andeq	r0, r0, r0, ror #11
     8e4:	08002a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, sp}
     8e8:	00000020 	andeq	r0, r0, r0, lsr #32
     8ec:	83080e41 	movwhi	r0, #36417	; 0x8e41
     8f0:	00018e02 	andeq	r8, r1, r2, lsl #28
     8f4:	0000001c 	andeq	r0, r0, ip, lsl r0
     8f8:	000005e0 	andeq	r0, r0, r0, ror #11
     8fc:	08002a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, sp}
     900:	00000070 	andeq	r0, r0, r0, ror r0
     904:	83180e41 	tsthi	r8, #1040	; 0x410
     908:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     90c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     910:	00018e02 	andeq	r8, r1, r2, lsl #28
     914:	0000000c 	andeq	r0, r0, ip
     918:	000005e0 	andeq	r0, r0, r0, ror #11
     91c:	08002afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, sp}
     920:	0000000c 	andeq	r0, r0, ip
     924:	0000000c 	andeq	r0, r0, ip
     928:	000005e0 	andeq	r0, r0, r0, ror #11
     92c:	08002b08 	stmdaeq	r0, {r3, r8, r9, fp, sp}
     930:	00000006 	andeq	r0, r0, r6
     934:	0000000c 	andeq	r0, r0, ip
     938:	000005e0 	andeq	r0, r0, r0, ror #11
     93c:	08002b10 	stmdaeq	r0, {r4, r8, r9, fp, sp}
     940:	00000006 	andeq	r0, r0, r6
     944:	0000000c 	andeq	r0, r0, ip
     948:	000005e0 	andeq	r0, r0, r0, ror #11
     94c:	08002b18 	stmdaeq	r0, {r3, r4, r8, r9, fp, sp}
     950:	0000000c 	andeq	r0, r0, ip
     954:	0000000c 	andeq	r0, r0, ip
     958:	000005e0 	andeq	r0, r0, r0, ror #11
     95c:	08002b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, sp}
     960:	00000020 	andeq	r0, r0, r0, lsr #32
     964:	0000001c 	andeq	r0, r0, ip, lsl r0
     968:	000005e0 	andeq	r0, r0, r0, ror #11
     96c:	08002b44 	stmdaeq	r0, {r2, r6, r8, r9, fp, sp}
     970:	00000070 	andeq	r0, r0, r0, ror r0
     974:	83180e41 	tsthi	r8, #1040	; 0x410
     978:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     97c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     980:	00018e02 	andeq	r8, r1, r2, lsl #28
     984:	00000018 	andeq	r0, r0, r8, lsl r0
     988:	000005e0 	andeq	r0, r0, r0, ror #11
     98c:	08002bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, sp}
     990:	00000050 	andeq	r0, r0, r0, asr r0
     994:	83100e41 	tsthi	r0, #1040	; 0x410
     998:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     99c:	00018e02 	andeq	r8, r1, r2, lsl #28
     9a0:	0000000c 	andeq	r0, r0, ip
     9a4:	000005e0 	andeq	r0, r0, r0, ror #11
     9a8:	08002c04 	stmdaeq	r0, {r2, sl, fp, sp}
     9ac:	00000018 	andeq	r0, r0, r8, lsl r0
     9b0:	0000000c 	andeq	r0, r0, ip
     9b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     9b8:	7c020001 	stcvc	0, cr0, [r2], {1}
     9bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     9c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     9c4:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
     9c8:	08002c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, sp}
     9cc:	00000098 	muleq	r0, r8, r0
     9d0:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xe41
     9d4:	86048505 	strhi	r8, [r4], -r5, lsl #10
     9d8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     9dc:	280e4201 	stmdacs	lr, {r0, r9, lr}
     9e0:	00000024 	andeq	r0, r0, r4, lsr #32
     9e4:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
     9e8:	08002cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, sp}
     9ec:	000000a8 	andeq	r0, r0, r8, lsr #1
     9f0:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
     9f4:	86088509 	strhi	r8, [r8], -r9, lsl #10
     9f8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     9fc:	8a048905 	bhi	122e18 <_Min_Stack_Size+0x122a18>
     a00:	8e028b03 	vmlahi.f64	d8, d2, d3
     a04:	300e4201 	andcc	r4, lr, r1, lsl #4
     a08:	00000018 	andeq	r0, r0, r8, lsl r0
     a0c:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
     a10:	08002d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, sp}
     a14:	00000058 	andeq	r0, r0, r8, asr r0
     a18:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
     a1c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     a20:	200e4301 	andcs	r4, lr, r1, lsl #6
     a24:	00000024 	andeq	r0, r0, r4, lsr #32
     a28:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
     a2c:	08002db4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, fp, sp}
     a30:	000002dc 	ldrdeq	r0, [r0], -ip
     a34:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
     a38:	86088509 	strhi	r8, [r8], -r9, lsl #10
     a3c:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     a40:	8a048905 	bhi	122e5c <_Min_Stack_Size+0x122a5c>
     a44:	8e028b03 	vmlahi.f64	d8, d2, d3
     a48:	480e4501 	stmdami	lr, {r0, r8, sl, lr}
     a4c:	00000014 	andeq	r0, r0, r4, lsl r0
     a50:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
     a54:	08003090 	stmdaeq	r0, {r4, r7, ip, sp}
     a58:	00000018 	andeq	r0, r0, r8, lsl r0
     a5c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     a60:	00018e02 	andeq	r8, r1, r2, lsl #28
     a64:	0000000c 	andeq	r0, r0, ip
     a68:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
     a6c:	080030a8 	stmdaeq	r0, {r3, r5, r7, ip, sp}
     a70:	00000004 	andeq	r0, r0, r4
     a74:	0000000c 	andeq	r0, r0, ip
     a78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     a7c:	7c020001 	stcvc	0, cr0, [r2], {1}
     a80:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     a84:	0000000c 	andeq	r0, r0, ip
     a88:	00000a74 	andeq	r0, r0, r4, ror sl
     a8c:	080030ac 	stmdaeq	r0, {r2, r3, r5, r7, ip, sp}
     a90:	00000018 	andeq	r0, r0, r8, lsl r0
     a94:	0000000c 	andeq	r0, r0, ip
     a98:	00000a74 	andeq	r0, r0, r4, ror sl
     a9c:	080030c8 	stmdaeq	r0, {r3, r6, r7, ip, sp}
     aa0:	0000000e 	andeq	r0, r0, lr
     aa4:	00000014 	andeq	r0, r0, r4, lsl r0
     aa8:	00000a74 	andeq	r0, r0, r4, ror sl
     aac:	080030dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip, sp}
     ab0:	0000002c 	andeq	r0, r0, ip, lsr #32
     ab4:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
     ab8:	00000001 	andeq	r0, r0, r1
     abc:	0000000c 	andeq	r0, r0, ip
     ac0:	00000a74 	andeq	r0, r0, r4, ror sl
     ac4:	08003108 	stmdaeq	r0, {r3, r8, ip, sp}
     ac8:	00000020 	andeq	r0, r0, r0, lsr #32
     acc:	0000000c 	andeq	r0, r0, ip
     ad0:	00000a74 	andeq	r0, r0, r4, ror sl
     ad4:	08003128 	stmdaeq	r0, {r3, r5, r8, ip, sp}
     ad8:	00000018 	andeq	r0, r0, r8, lsl r0
     adc:	0000000c 	andeq	r0, r0, ip
     ae0:	00000a74 	andeq	r0, r0, r4, ror sl
     ae4:	08003140 	stmdaeq	r0, {r6, r8, ip, sp}
     ae8:	00000010 	andeq	r0, r0, r0, lsl r0
     aec:	00000014 	andeq	r0, r0, r4, lsl r0
     af0:	00000a74 	andeq	r0, r0, r4, ror sl
     af4:	08003150 	stmdaeq	r0, {r4, r6, r8, ip, sp}
     af8:	0000001c 	andeq	r0, r0, ip, lsl r0
     afc:	83080e41 	movwhi	r0, #36417	; 0x8e41
     b00:	00018e02 	andeq	r8, r1, r2, lsl #28
     b04:	00000014 	andeq	r0, r0, r4, lsl r0
     b08:	00000a74 	andeq	r0, r0, r4, ror sl
     b0c:	0800316c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip, sp}
     b10:	00000018 	andeq	r0, r0, r8, lsl r0
     b14:	83080e41 	movwhi	r0, #36417	; 0x8e41
     b18:	00018e02 	andeq	r8, r1, r2, lsl #28
     b1c:	00000014 	andeq	r0, r0, r4, lsl r0
     b20:	00000a74 	andeq	r0, r0, r4, ror sl
     b24:	08003184 	stmdaeq	r0, {r2, r7, r8, ip, sp}
     b28:	0000001c 	andeq	r0, r0, ip, lsl r0
     b2c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     b30:	00018e02 	andeq	r8, r1, r2, lsl #28
     b34:	0000000c 	andeq	r0, r0, ip
     b38:	00000a74 	andeq	r0, r0, r4, ror sl
     b3c:	080031a0 	stmdaeq	r0, {r5, r7, r8, ip, sp}
     b40:	00000006 	andeq	r0, r0, r6
     b44:	00000014 	andeq	r0, r0, r4, lsl r0
     b48:	00000a74 	andeq	r0, r0, r4, ror sl
     b4c:	080031a8 	stmdaeq	r0, {r3, r5, r7, r8, ip, sp}
     b50:	00000024 	andeq	r0, r0, r4, lsr #32
     b54:	83080e41 	movwhi	r0, #36417	; 0x8e41
     b58:	00018e02 	andeq	r8, r1, r2, lsl #28
     b5c:	0000000c 	andeq	r0, r0, ip
     b60:	00000a74 	andeq	r0, r0, r4, ror sl
     b64:	080031cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, ip, sp}
     b68:	00000058 	andeq	r0, r0, r8, asr r0
     b6c:	00000014 	andeq	r0, r0, r4, lsl r0
     b70:	00000a74 	andeq	r0, r0, r4, ror sl
     b74:	08003224 	stmdaeq	r0, {r2, r5, r9, ip, sp}
     b78:	00000024 	andeq	r0, r0, r4, lsr #32
     b7c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     b80:	00018e02 	andeq	r8, r1, r2, lsl #28
     b84:	00000014 	andeq	r0, r0, r4, lsl r0
     b88:	00000a74 	andeq	r0, r0, r4, ror sl
     b8c:	08003248 	stmdaeq	r0, {r3, r6, r9, ip, sp}
     b90:	00000030 	andeq	r0, r0, r0, lsr r0
     b94:	84040e46 	strhi	r0, [r4], #-3654	; 0xe46
     b98:	00000001 	andeq	r0, r0, r1
     b9c:	00000018 	andeq	r0, r0, r8, lsl r0
     ba0:	00000a74 	andeq	r0, r0, r4, ror sl
     ba4:	08003278 	stmdaeq	r0, {r3, r4, r5, r6, r9, ip, sp}
     ba8:	000000ac 	andeq	r0, r0, ip, lsr #1
     bac:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     bb0:	45018e02 	strmi	r8, [r1, #-3586]	; 0xe02
     bb4:	0000100e 	andeq	r1, r0, lr
     bb8:	00000014 	andeq	r0, r0, r4, lsl r0
     bbc:	00000a74 	andeq	r0, r0, r4, ror sl
     bc0:	08003324 	stmdaeq	r0, {r2, r5, r8, r9, ip, sp}
     bc4:	00000044 	andeq	r0, r0, r4, asr #32
     bc8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     bcc:	00018e02 	andeq	r8, r1, r2, lsl #28
     bd0:	0000000c 	andeq	r0, r0, ip
     bd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     bd8:	7c020001 	stcvc	0, cr0, [r2], {1}
     bdc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     be0:	00000018 	andeq	r0, r0, r8, lsl r0
     be4:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     be8:	08003368 	stmdaeq	r0, {r3, r5, r6, r8, r9, ip, sp}
     bec:	0000005c 	andeq	r0, r0, ip, asr r0
     bf0:	83100e41 	tsthi	r0, #1040	; 0x410
     bf4:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     bf8:	00018e02 	andeq	r8, r1, r2, lsl #28
     bfc:	00000014 	andeq	r0, r0, r4, lsl r0
     c00:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     c04:	080033c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, ip, sp}
     c08:	0000000c 	andeq	r0, r0, ip
     c0c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     c10:	00018e02 	andeq	r8, r1, r2, lsl #28
     c14:	0000000c 	andeq	r0, r0, ip
     c18:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     c1c:	080033d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, ip, sp}
     c20:	0000000c 	andeq	r0, r0, ip
     c24:	0000000c 	andeq	r0, r0, ip
     c28:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     c2c:	080033dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, ip, sp}
     c30:	00000014 	andeq	r0, r0, r4, lsl r0
     c34:	0000000c 	andeq	r0, r0, ip
     c38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     c3c:	7c020001 	stcvc	0, cr0, [r2], {1}
     c40:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c44:	0000000c 	andeq	r0, r0, ip
     c48:	00000c34 	andeq	r0, r0, r4, lsr ip
     c4c:	080033f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip, sp}
     c50:	00000014 	andeq	r0, r0, r4, lsl r0
     c54:	00000018 	andeq	r0, r0, r8, lsl r0
     c58:	00000c34 	andeq	r0, r0, r4, lsr ip
     c5c:	08003404 	stmdaeq	r0, {r2, sl, ip, sp}
     c60:	00000078 	andeq	r0, r0, r8, ror r0
     c64:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
     c68:	86038504 	strhi	r8, [r3], -r4, lsl #10
     c6c:	00018702 	andeq	r8, r1, r2, lsl #14
     c70:	0000000c 	andeq	r0, r0, ip
     c74:	00000c34 	andeq	r0, r0, r4, lsr ip
     c78:	0800347c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, ip, sp}
     c7c:	00000014 	andeq	r0, r0, r4, lsl r0
     c80:	0000000c 	andeq	r0, r0, ip
     c84:	00000c34 	andeq	r0, r0, r4, lsr ip
     c88:	08003490 	stmdaeq	r0, {r4, r7, sl, ip, sp}
     c8c:	00000018 	andeq	r0, r0, r8, lsl r0
     c90:	0000000c 	andeq	r0, r0, ip
     c94:	00000c34 	andeq	r0, r0, r4, lsr ip
     c98:	080034a8 	stmdaeq	r0, {r3, r5, r7, sl, ip, sp}
     c9c:	00000018 	andeq	r0, r0, r8, lsl r0
     ca0:	0000000c 	andeq	r0, r0, ip
     ca4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ca8:	7c020001 	stcvc	0, cr0, [r2], {1}
     cac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     cb0:	00000014 	andeq	r0, r0, r4, lsl r0
     cb4:	00000ca0 	andeq	r0, r0, r0, lsr #25
     cb8:	080034c0 	stmdaeq	r0, {r6, r7, sl, ip, sp}
     cbc:	0000015c 	andeq	r0, r0, ip, asr r1
     cc0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     cc4:	00018e02 	andeq	r8, r1, r2, lsl #28
     cc8:	00000020 	andeq	r0, r0, r0, lsr #32
     ccc:	00000ca0 	andeq	r0, r0, r0, lsr #25
     cd0:	0800361c 	stmdaeq	r0, {r2, r3, r4, r9, sl, ip, sp}
     cd4:	000000bc 	strheq	r0, [r0], -ip
     cd8:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xe43
     cdc:	86068507 	strhi	r8, [r6], -r7, lsl #10
     ce0:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
     ce4:	8a028903 	bhi	a30f8 <_Min_Stack_Size+0xa2cf8>
     ce8:	00000001 	andeq	r0, r0, r1
     cec:	0000000c 	andeq	r0, r0, ip
     cf0:	00000ca0 	andeq	r0, r0, r0, lsr #25
     cf4:	080036d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip, sp}
     cf8:	00000012 	andeq	r0, r0, r2, lsl r0
     cfc:	00000010 	andeq	r0, r0, r0, lsl r0
     d00:	00000ca0 	andeq	r0, r0, r0, lsr #25
     d04:	080036ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, ip, sp}
     d08:	00000024 	andeq	r0, r0, r4, lsr #32
     d0c:	00080e41 	andeq	r0, r8, r1, asr #28
     d10:	0000000c 	andeq	r0, r0, ip
     d14:	00000ca0 	andeq	r0, r0, r0, lsr #25
     d18:	08003710 	stmdaeq	r0, {r4, r8, r9, sl, ip, sp}
     d1c:	0000000c 	andeq	r0, r0, ip
     d20:	0000000c 	andeq	r0, r0, ip
     d24:	00000ca0 	andeq	r0, r0, r0, lsr #25
     d28:	0800371c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, ip, sp}
     d2c:	00000006 	andeq	r0, r0, r6
     d30:	0000000c 	andeq	r0, r0, ip
     d34:	00000ca0 	andeq	r0, r0, r0, lsr #25
     d38:	08003724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, sp}
     d3c:	0000000c 	andeq	r0, r0, ip
     d40:	0000000c 	andeq	r0, r0, ip
     d44:	00000ca0 	andeq	r0, r0, r0, lsr #25
     d48:	08003730 	stmdaeq	r0, {r4, r5, r8, r9, sl, ip, sp}
     d4c:	00000006 	andeq	r0, r0, r6
     d50:	0000000c 	andeq	r0, r0, ip
     d54:	00000ca0 	andeq	r0, r0, r0, lsr #25
     d58:	08003738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, sp}
     d5c:	00000004 	andeq	r0, r0, r4
     d60:	0000000c 	andeq	r0, r0, ip
     d64:	00000ca0 	andeq	r0, r0, r0, lsr #25
     d68:	0800373c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip, sp}
     d6c:	00000004 	andeq	r0, r0, r4
     d70:	0000000c 	andeq	r0, r0, ip
     d74:	00000ca0 	andeq	r0, r0, r0, lsr #25
     d78:	08003740 	stmdaeq	r0, {r6, r8, r9, sl, ip, sp}
     d7c:	0000000a 	andeq	r0, r0, sl
     d80:	0000000c 	andeq	r0, r0, ip
     d84:	00000ca0 	andeq	r0, r0, r0, lsr #25
     d88:	0800374c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, ip, sp}
     d8c:	00000004 	andeq	r0, r0, r4
     d90:	0000000c 	andeq	r0, r0, ip
     d94:	00000ca0 	andeq	r0, r0, r0, lsr #25
     d98:	08003750 	stmdaeq	r0, {r4, r6, r8, r9, sl, ip, sp}
     d9c:	00000008 	andeq	r0, r0, r8
     da0:	00000014 	andeq	r0, r0, r4, lsl r0
     da4:	00000ca0 	andeq	r0, r0, r0, lsr #25
     da8:	08003758 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, ip, sp}
     dac:	00000028 	andeq	r0, r0, r8, lsr #32
     db0:	84040e46 	strhi	r0, [r4], #-3654	; 0xe46
     db4:	00000001 	andeq	r0, r0, r1
     db8:	0000000c 	andeq	r0, r0, ip
     dbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     dc0:	7c020001 	stcvc	0, cr0, [r2], {1}
     dc4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     dc8:	00000014 	andeq	r0, r0, r4, lsl r0
     dcc:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     dd0:	08003780 	stmdaeq	r0, {r7, r8, r9, sl, ip, sp}
     dd4:	00000050 	andeq	r0, r0, r0, asr r0
     dd8:	84080e47 	strhi	r0, [r8], #-3655	; 0xe47
     ddc:	00018502 	andeq	r8, r1, r2, lsl #10
     de0:	0000000c 	andeq	r0, r0, ip
     de4:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     de8:	080037d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, ip, sp}
     dec:	00000010 	andeq	r0, r0, r0, lsl r0
     df0:	00000010 	andeq	r0, r0, r0, lsl r0
     df4:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     df8:	080037e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, ip, sp}
     dfc:	00000038 	andeq	r0, r0, r8, lsr r0
     e00:	00080e41 	andeq	r0, r8, r1, asr #28
     e04:	0000000c 	andeq	r0, r0, ip
     e08:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     e0c:	08003818 	stmdaeq	r0, {r3, r4, fp, ip, sp}
     e10:	00000014 	andeq	r0, r0, r4, lsl r0
     e14:	0000000c 	andeq	r0, r0, ip
     e18:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     e1c:	0800382c 	stmdaeq	r0, {r2, r3, r5, fp, ip, sp}
     e20:	0000000c 	andeq	r0, r0, ip
     e24:	0000000c 	andeq	r0, r0, ip
     e28:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     e2c:	08003838 	stmdaeq	r0, {r3, r4, r5, fp, ip, sp}
     e30:	00000020 	andeq	r0, r0, r0, lsr #32
     e34:	0000000c 	andeq	r0, r0, ip
     e38:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     e3c:	08003858 	stmdaeq	r0, {r3, r4, r6, fp, ip, sp}
     e40:	0000000c 	andeq	r0, r0, ip
     e44:	00000014 	andeq	r0, r0, r4, lsl r0
     e48:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     e4c:	08003864 	stmdaeq	r0, {r2, r5, r6, fp, ip, sp}
     e50:	00000024 	andeq	r0, r0, r4, lsr #32
     e54:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     e58:	00018502 	andeq	r8, r1, r2, lsl #10
     e5c:	0000000c 	andeq	r0, r0, ip
     e60:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     e64:	08003888 	stmdaeq	r0, {r3, r7, fp, ip, sp}
     e68:	0000000c 	andeq	r0, r0, ip
     e6c:	0000000c 	andeq	r0, r0, ip
     e70:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     e74:	08003894 	stmdaeq	r0, {r2, r4, r7, fp, ip, sp}
     e78:	00000018 	andeq	r0, r0, r8, lsl r0
     e7c:	0000000c 	andeq	r0, r0, ip
     e80:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     e84:	080038ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip, sp}
     e88:	0000000c 	andeq	r0, r0, ip
     e8c:	0000000c 	andeq	r0, r0, ip
     e90:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     e94:	080038b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, ip, sp}
     e98:	00000018 	andeq	r0, r0, r8, lsl r0
     e9c:	0000000c 	andeq	r0, r0, ip
     ea0:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     ea4:	080038d0 	stmdaeq	r0, {r4, r6, r7, fp, ip, sp}
     ea8:	0000000c 	andeq	r0, r0, ip
     eac:	0000000c 	andeq	r0, r0, ip
     eb0:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     eb4:	080038dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip, sp}
     eb8:	0000000c 	andeq	r0, r0, ip
     ebc:	0000000c 	andeq	r0, r0, ip
     ec0:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     ec4:	080038e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, ip, sp}
     ec8:	00000014 	andeq	r0, r0, r4, lsl r0
     ecc:	0000000c 	andeq	r0, r0, ip
     ed0:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     ed4:	080038fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, sp}
     ed8:	00000014 	andeq	r0, r0, r4, lsl r0
     edc:	0000000c 	andeq	r0, r0, ip
     ee0:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     ee4:	08003910 	stmdaeq	r0, {r4, r8, fp, ip, sp}
     ee8:	00000014 	andeq	r0, r0, r4, lsl r0
     eec:	0000000c 	andeq	r0, r0, ip
     ef0:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     ef4:	08003924 	stmdaeq	r0, {r2, r5, r8, fp, ip, sp}
     ef8:	00000010 	andeq	r0, r0, r0, lsl r0
     efc:	0000000c 	andeq	r0, r0, ip
     f00:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     f04:	08003934 	stmdaeq	r0, {r2, r4, r5, r8, fp, ip, sp}
     f08:	00000014 	andeq	r0, r0, r4, lsl r0
     f0c:	0000000c 	andeq	r0, r0, ip
     f10:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     f14:	08003948 	stmdaeq	r0, {r3, r6, r8, fp, ip, sp}
     f18:	00000014 	andeq	r0, r0, r4, lsl r0
     f1c:	0000000c 	andeq	r0, r0, ip
     f20:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     f24:	0800395c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp, ip, sp}
     f28:	00000014 	andeq	r0, r0, r4, lsl r0
     f2c:	00000014 	andeq	r0, r0, r4, lsl r0
     f30:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     f34:	08003970 	stmdaeq	r0, {r4, r5, r6, r8, fp, ip, sp}
     f38:	00000090 	muleq	r0, r0, r0
     f3c:	84040e46 	strhi	r0, [r4], #-3654	; 0xe46
     f40:	00000001 	andeq	r0, r0, r1
     f44:	0000000c 	andeq	r0, r0, ip
     f48:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     f4c:	08003a00 	stmdaeq	r0, {r9, fp, ip, sp}
     f50:	00000030 	andeq	r0, r0, r0, lsr r0
     f54:	0000000c 	andeq	r0, r0, ip
     f58:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     f5c:	08003a30 	stmdaeq	r0, {r4, r5, r9, fp, ip, sp}
     f60:	0000000c 	andeq	r0, r0, ip
     f64:	0000000c 	andeq	r0, r0, ip
     f68:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     f6c:	08003a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, ip, sp}
     f70:	0000000c 	andeq	r0, r0, ip
     f74:	0000000c 	andeq	r0, r0, ip
     f78:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     f7c:	08003a48 	stmdaeq	r0, {r3, r6, r9, fp, ip, sp}
     f80:	0000000c 	andeq	r0, r0, ip
     f84:	0000000c 	andeq	r0, r0, ip
     f88:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     f8c:	08003a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, ip, sp}
     f90:	00000018 	andeq	r0, r0, r8, lsl r0
     f94:	0000000c 	andeq	r0, r0, ip
     f98:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     f9c:	08003a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp, ip, sp}
     fa0:	0000001c 	andeq	r0, r0, ip, lsl r0
     fa4:	0000000c 	andeq	r0, r0, ip
     fa8:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     fac:	08003a88 	stmdaeq	r0, {r3, r7, r9, fp, ip, sp}
     fb0:	00000018 	andeq	r0, r0, r8, lsl r0
     fb4:	0000000c 	andeq	r0, r0, ip
     fb8:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     fbc:	08003aa0 	stmdaeq	r0, {r5, r7, r9, fp, ip, sp}
     fc0:	00000018 	andeq	r0, r0, r8, lsl r0
     fc4:	0000000c 	andeq	r0, r0, ip
     fc8:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     fcc:	08003ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp, ip, sp}
     fd0:	00000018 	andeq	r0, r0, r8, lsl r0
     fd4:	0000000c 	andeq	r0, r0, ip
     fd8:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     fdc:	08003ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp, ip, sp}
     fe0:	0000000c 	andeq	r0, r0, ip
     fe4:	0000000c 	andeq	r0, r0, ip
     fe8:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     fec:	08003adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, sp}
     ff0:	00000018 	andeq	r0, r0, r8, lsl r0
     ff4:	0000000c 	andeq	r0, r0, ip
     ff8:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
     ffc:	08003af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip, sp}
    1000:	00000018 	andeq	r0, r0, r8, lsl r0
    1004:	0000000c 	andeq	r0, r0, ip
    1008:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    100c:	08003b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, ip, sp}
    1010:	00000018 	andeq	r0, r0, r8, lsl r0
    1014:	0000000c 	andeq	r0, r0, ip
    1018:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    101c:	08003b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, ip, sp}
    1020:	00000018 	andeq	r0, r0, r8, lsl r0
    1024:	0000000c 	andeq	r0, r0, ip
    1028:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    102c:	08003b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, ip, sp}
    1030:	00000018 	andeq	r0, r0, r8, lsl r0
    1034:	0000000c 	andeq	r0, r0, ip
    1038:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    103c:	08003b54 	stmdaeq	r0, {r2, r4, r6, r8, r9, fp, ip, sp}
    1040:	00000018 	andeq	r0, r0, r8, lsl r0
    1044:	0000000c 	andeq	r0, r0, ip
    1048:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    104c:	08003b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp, ip, sp}
    1050:	00000018 	andeq	r0, r0, r8, lsl r0
    1054:	0000000c 	andeq	r0, r0, ip
    1058:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    105c:	08003b84 	stmdaeq	r0, {r2, r7, r8, r9, fp, ip, sp}
    1060:	00000018 	andeq	r0, r0, r8, lsl r0
    1064:	0000000c 	andeq	r0, r0, ip
    1068:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    106c:	08003b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, ip, sp}
    1070:	00000018 	andeq	r0, r0, r8, lsl r0
    1074:	0000000c 	andeq	r0, r0, ip
    1078:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    107c:	08003bb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, fp, ip, sp}
    1080:	00000018 	andeq	r0, r0, r8, lsl r0
    1084:	0000000c 	andeq	r0, r0, ip
    1088:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    108c:	08003bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, ip, sp}
    1090:	00000018 	andeq	r0, r0, r8, lsl r0
    1094:	0000000c 	andeq	r0, r0, ip
    1098:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    109c:	08003be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp, ip, sp}
    10a0:	00000018 	andeq	r0, r0, r8, lsl r0
    10a4:	0000000c 	andeq	r0, r0, ip
    10a8:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    10ac:	08003bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
    10b0:	00000018 	andeq	r0, r0, r8, lsl r0
    10b4:	0000000c 	andeq	r0, r0, ip
    10b8:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    10bc:	08003c14 	stmdaeq	r0, {r2, r4, sl, fp, ip, sp}
    10c0:	00000018 	andeq	r0, r0, r8, lsl r0
    10c4:	0000000c 	andeq	r0, r0, ip
    10c8:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    10cc:	08003c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, ip, sp}
    10d0:	00000018 	andeq	r0, r0, r8, lsl r0
    10d4:	0000000c 	andeq	r0, r0, ip
    10d8:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    10dc:	08003c44 	stmdaeq	r0, {r2, r6, sl, fp, ip, sp}
    10e0:	00000018 	andeq	r0, r0, r8, lsl r0
    10e4:	0000000c 	andeq	r0, r0, ip
    10e8:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    10ec:	08003c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, ip, sp}
    10f0:	00000034 	andeq	r0, r0, r4, lsr r0
    10f4:	0000000c 	andeq	r0, r0, ip
    10f8:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    10fc:	08003c90 	stmdaeq	r0, {r4, r7, sl, fp, ip, sp}
    1100:	00000010 	andeq	r0, r0, r0, lsl r0
    1104:	0000000c 	andeq	r0, r0, ip
    1108:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    110c:	08003ca0 	stmdaeq	r0, {r5, r7, sl, fp, ip, sp}
    1110:	00000014 	andeq	r0, r0, r4, lsl r0
    1114:	0000000c 	andeq	r0, r0, ip
    1118:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    111c:	08003cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, ip, sp}
    1120:	0000000c 	andeq	r0, r0, ip
    1124:	0000000c 	andeq	r0, r0, ip
    1128:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    112c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1130:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1134:	00000014 	andeq	r0, r0, r4, lsl r0
    1138:	00001124 	andeq	r1, r0, r4, lsr #2
    113c:	08003cc0 	stmdaeq	r0, {r6, r7, sl, fp, ip, sp}
    1140:	0000010c 	andeq	r0, r0, ip, lsl #2
    1144:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1148:	00018e02 	andeq	r8, r1, r2, lsl #28
    114c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1150:	00001124 	andeq	r1, r0, r4, lsr #2
    1154:	08003dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, ip, sp}
    1158:	000000c4 	andeq	r0, r0, r4, asr #1
    115c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xe41
    1160:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1164:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1168:	280e5e01 	stmdacs	lr, {r0, r9, sl, fp, ip, lr}
    116c:	0000000c 	andeq	r0, r0, ip
    1170:	00001124 	andeq	r1, r0, r4, lsr #2
    1174:	08003e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip, sp}
    1178:	00000016 	andeq	r0, r0, r6, lsl r0
    117c:	00000014 	andeq	r0, r0, r4, lsl r0
    1180:	00001124 	andeq	r1, r0, r4, lsr #2
    1184:	08003ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, ip, sp}
    1188:	00000022 	andeq	r0, r0, r2, lsr #32
    118c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1190:	00018502 	andeq	r8, r1, r2, lsl #10
    1194:	0000000c 	andeq	r0, r0, ip
    1198:	00001124 	andeq	r1, r0, r4, lsr #2
    119c:	08003ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, ip, sp}
    11a0:	0000000c 	andeq	r0, r0, ip
    11a4:	0000000c 	andeq	r0, r0, ip
    11a8:	00001124 	andeq	r1, r0, r4, lsr #2
    11ac:	08003ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip, sp}
    11b0:	0000001a 	andeq	r0, r0, sl, lsl r0
    11b4:	0000000c 	andeq	r0, r0, ip
    11b8:	00001124 	andeq	r1, r0, r4, lsr #2
    11bc:	08003ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, ip, sp}
    11c0:	00000012 	andeq	r0, r0, r2, lsl r0
    11c4:	0000000c 	andeq	r0, r0, ip
    11c8:	00001124 	andeq	r1, r0, r4, lsr #2
    11cc:	08003f08 	stmdaeq	r0, {r3, r8, r9, sl, fp, ip, sp}
    11d0:	0000001a 	andeq	r0, r0, sl, lsl r0
    11d4:	0000000c 	andeq	r0, r0, ip
    11d8:	00001124 	andeq	r1, r0, r4, lsr #2
    11dc:	08003f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, ip, sp}
    11e0:	0000001a 	andeq	r0, r0, sl, lsl r0
    11e4:	0000000c 	andeq	r0, r0, ip
    11e8:	00001124 	andeq	r1, r0, r4, lsr #2
    11ec:	08003f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, ip, sp}
    11f0:	00000008 	andeq	r0, r0, r8
    11f4:	0000000c 	andeq	r0, r0, ip
    11f8:	00001124 	andeq	r1, r0, r4, lsr #2
    11fc:	08003f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, ip, sp}
    1200:	00000008 	andeq	r0, r0, r8
    1204:	0000000c 	andeq	r0, r0, ip
    1208:	00001124 	andeq	r1, r0, r4, lsr #2
    120c:	08003f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, ip, sp}
    1210:	00000016 	andeq	r0, r0, r6, lsl r0
    1214:	0000000c 	andeq	r0, r0, ip
    1218:	00001124 	andeq	r1, r0, r4, lsr #2
    121c:	08003f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, ip, sp}
    1220:	0000001a 	andeq	r0, r0, sl, lsl r0
    1224:	0000000c 	andeq	r0, r0, ip
    1228:	00001124 	andeq	r1, r0, r4, lsr #2
    122c:	08003f84 	stmdaeq	r0, {r2, r7, r8, r9, sl, fp, ip, sp}
    1230:	00000016 	andeq	r0, r0, r6, lsl r0
    1234:	0000000c 	andeq	r0, r0, ip
    1238:	00001124 	andeq	r1, r0, r4, lsr #2
    123c:	08003f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip, sp}
    1240:	00000016 	andeq	r0, r0, r6, lsl r0
    1244:	0000000c 	andeq	r0, r0, ip
    1248:	00001124 	andeq	r1, r0, r4, lsr #2
    124c:	08003fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, ip, sp}
    1250:	0000001a 	andeq	r0, r0, sl, lsl r0
    1254:	0000000c 	andeq	r0, r0, ip
    1258:	00001124 	andeq	r1, r0, r4, lsr #2
    125c:	08003fd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, fp, ip, sp}
    1260:	0000000c 	andeq	r0, r0, ip
    1264:	0000000c 	andeq	r0, r0, ip
    1268:	00001124 	andeq	r1, r0, r4, lsr #2
    126c:	08003fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, sp}
    1270:	0000001a 	andeq	r0, r0, sl, lsl r0
    1274:	0000000c 	andeq	r0, r0, ip
    1278:	00001124 	andeq	r1, r0, r4, lsr #2
    127c:	08003ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
    1280:	00000012 	andeq	r0, r0, r2, lsl r0
    1284:	0000000c 	andeq	r0, r0, ip
    1288:	00001124 	andeq	r1, r0, r4, lsr #2
    128c:	0800400c 	stmdaeq	r0, {r2, r3, lr}
    1290:	0000001a 	andeq	r0, r0, sl, lsl r0
    1294:	0000000c 	andeq	r0, r0, ip
    1298:	00001124 	andeq	r1, r0, r4, lsr #2
    129c:	08004028 	stmdaeq	r0, {r3, r5, lr}
    12a0:	0000001a 	andeq	r0, r0, sl, lsl r0
    12a4:	0000000c 	andeq	r0, r0, ip
    12a8:	00001124 	andeq	r1, r0, r4, lsr #2
    12ac:	08004044 	stmdaeq	r0, {r2, r6, lr}
    12b0:	00000016 	andeq	r0, r0, r6, lsl r0
    12b4:	0000000c 	andeq	r0, r0, ip
    12b8:	00001124 	andeq	r1, r0, r4, lsr #2
    12bc:	0800405c 	stmdaeq	r0, {r2, r3, r4, r6, lr}
    12c0:	0000001a 	andeq	r0, r0, sl, lsl r0
    12c4:	0000000c 	andeq	r0, r0, ip
    12c8:	00001124 	andeq	r1, r0, r4, lsr #2
    12cc:	08004078 	stmdaeq	r0, {r3, r4, r5, r6, lr}
    12d0:	00000014 	andeq	r0, r0, r4, lsl r0
    12d4:	00000014 	andeq	r0, r0, r4, lsl r0
    12d8:	00001124 	andeq	r1, r0, r4, lsr #2
    12dc:	0800408c 	stmdaeq	r0, {r2, r3, r7, lr}
    12e0:	0000003a 	andeq	r0, r0, sl, lsr r0
    12e4:	84040e43 	strhi	r0, [r4], #-3651	; 0xe43
    12e8:	00000001 	andeq	r0, r0, r1
    12ec:	0000000c 	andeq	r0, r0, ip
    12f0:	00001124 	andeq	r1, r0, r4, lsr #2
    12f4:	080040c8 	stmdaeq	r0, {r3, r6, r7, lr}
    12f8:	0000000c 	andeq	r0, r0, ip
    12fc:	0000000c 	andeq	r0, r0, ip
    1300:	00001124 	andeq	r1, r0, r4, lsr #2
    1304:	080040d4 	stmdaeq	r0, {r2, r4, r6, r7, lr}
    1308:	00000008 	andeq	r0, r0, r8
    130c:	00000014 	andeq	r0, r0, r4, lsl r0
    1310:	00001124 	andeq	r1, r0, r4, lsr #2
    1314:	080040dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, lr}
    1318:	0000004c 	andeq	r0, r0, ip, asr #32
    131c:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
    1320:	00000001 	andeq	r0, r0, r1
    1324:	0000000c 	andeq	r0, r0, ip
    1328:	00001124 	andeq	r1, r0, r4, lsr #2
    132c:	08004128 	stmdaeq	r0, {r3, r5, r8, lr}
    1330:	00000010 	andeq	r0, r0, r0, lsl r0
    1334:	0000000c 	andeq	r0, r0, ip
    1338:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    133c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1340:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1344:	00000014 	andeq	r0, r0, r4, lsl r0
    1348:	00001334 	andeq	r1, r0, r4, lsr r3
    134c:	08004138 	stmdaeq	r0, {r3, r4, r5, r8, lr}
    1350:	0000001a 	andeq	r0, r0, sl, lsl r0
    1354:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1358:	00018e02 	andeq	r8, r1, r2, lsl #28
    135c:	0000000c 	andeq	r0, r0, ip
    1360:	00001334 	andeq	r1, r0, r4, lsr r3
    1364:	08004154 	stmdaeq	r0, {r2, r4, r6, r8, lr}
    1368:	0000000c 	andeq	r0, r0, ip
    136c:	0000000c 	andeq	r0, r0, ip
    1370:	00001334 	andeq	r1, r0, r4, lsr r3
    1374:	08004160 	stmdaeq	r0, {r5, r6, r8, lr}
    1378:	0000000c 	andeq	r0, r0, ip
    137c:	00000014 	andeq	r0, r0, r4, lsl r0
    1380:	00001334 	andeq	r1, r0, r4, lsr r3
    1384:	0800416c 	stmdaeq	r0, {r2, r3, r5, r6, r8, lr}
    1388:	0000002e 	andeq	r0, r0, lr, lsr #32
    138c:	84040e49 	strhi	r0, [r4], #-3657	; 0xe49
    1390:	00000001 	andeq	r0, r0, r1
    1394:	0000000c 	andeq	r0, r0, ip
    1398:	00001334 	andeq	r1, r0, r4, lsr r3
    139c:	0800419c 	stmdaeq	r0, {r2, r3, r4, r7, r8, lr}
    13a0:	0000000c 	andeq	r0, r0, ip
    13a4:	0000000c 	andeq	r0, r0, ip
    13a8:	00001334 	andeq	r1, r0, r4, lsr r3
    13ac:	080041a8 	stmdaeq	r0, {r3, r5, r7, r8, lr}
    13b0:	0000000c 	andeq	r0, r0, ip
    13b4:	0000000c 	andeq	r0, r0, ip
    13b8:	00001334 	andeq	r1, r0, r4, lsr r3
    13bc:	080041b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, lr}
    13c0:	00000010 	andeq	r0, r0, r0, lsl r0
    13c4:	0000000c 	andeq	r0, r0, ip
    13c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    13cc:	7c020001 	stcvc	0, cr0, [r2], {1}
    13d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13d4:	00000014 	andeq	r0, r0, r4, lsl r0
    13d8:	000013c4 	andeq	r1, r0, r4, asr #7
    13dc:	080041c4 	stmdaeq	r0, {r2, r6, r7, r8, lr}
    13e0:	0000006c 	andeq	r0, r0, ip, rrx
    13e4:	83080e41 	movwhi	r0, #36417	; 0x8e41
    13e8:	00018e02 	andeq	r8, r1, r2, lsl #28
    13ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    13f0:	000013c4 	andeq	r1, r0, r4, asr #7
    13f4:	08004230 	stmdaeq	r0, {r4, r5, r9, lr}
    13f8:	000000e0 	andeq	r0, r0, r0, ror #1
    13fc:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xe41
    1400:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1404:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1408:	280e4201 	stmdacs	lr, {r0, r9, lr}
    140c:	00000014 	andeq	r0, r0, r4, lsl r0
    1410:	000013c4 	andeq	r1, r0, r4, asr #7
    1414:	08004310 	stmdaeq	r0, {r4, r8, r9, lr}
    1418:	00000022 	andeq	r0, r0, r2, lsr #32
    141c:	84040e42 	strhi	r0, [r4], #-3650	; 0xe42
    1420:	00000001 	andeq	r0, r0, r1
    1424:	0000000c 	andeq	r0, r0, ip
    1428:	000013c4 	andeq	r1, r0, r4, asr #7
    142c:	08004334 	stmdaeq	r0, {r2, r4, r5, r8, r9, lr}
    1430:	0000001a 	andeq	r0, r0, sl, lsl r0
    1434:	0000000c 	andeq	r0, r0, ip
    1438:	000013c4 	andeq	r1, r0, r4, asr #7
    143c:	08004350 	stmdaeq	r0, {r4, r6, r8, r9, lr}
    1440:	0000001a 	andeq	r0, r0, sl, lsl r0
    1444:	0000000c 	andeq	r0, r0, ip
    1448:	000013c4 	andeq	r1, r0, r4, asr #7
    144c:	0800436c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, lr}
    1450:	00000012 	andeq	r0, r0, r2, lsl r0
    1454:	0000000c 	andeq	r0, r0, ip
    1458:	000013c4 	andeq	r1, r0, r4, asr #7
    145c:	08004380 	stmdaeq	r0, {r7, r8, r9, lr}
    1460:	0000001a 	andeq	r0, r0, sl, lsl r0
    1464:	0000000c 	andeq	r0, r0, ip
    1468:	000013c4 	andeq	r1, r0, r4, asr #7
    146c:	0800439c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, lr}
    1470:	0000001a 	andeq	r0, r0, sl, lsl r0
    1474:	0000000c 	andeq	r0, r0, ip
    1478:	000013c4 	andeq	r1, r0, r4, asr #7
    147c:	080043b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, lr}
    1480:	00000012 	andeq	r0, r0, r2, lsl r0
    1484:	0000000c 	andeq	r0, r0, ip
    1488:	000013c4 	andeq	r1, r0, r4, asr #7
    148c:	080043cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, lr}
    1490:	0000001a 	andeq	r0, r0, sl, lsl r0
    1494:	0000000c 	andeq	r0, r0, ip
    1498:	000013c4 	andeq	r1, r0, r4, asr #7
    149c:	080043e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, lr}
    14a0:	00000012 	andeq	r0, r0, r2, lsl r0
    14a4:	0000000c 	andeq	r0, r0, ip
    14a8:	000013c4 	andeq	r1, r0, r4, asr #7
    14ac:	080043fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, lr}
    14b0:	0000001a 	andeq	r0, r0, sl, lsl r0
    14b4:	0000000c 	andeq	r0, r0, ip
    14b8:	000013c4 	andeq	r1, r0, r4, asr #7
    14bc:	08004418 	stmdaeq	r0, {r3, r4, sl, lr}
    14c0:	0000001a 	andeq	r0, r0, sl, lsl r0
    14c4:	0000000c 	andeq	r0, r0, ip
    14c8:	000013c4 	andeq	r1, r0, r4, asr #7
    14cc:	08004434 	stmdaeq	r0, {r2, r4, r5, sl, lr}
    14d0:	0000001a 	andeq	r0, r0, sl, lsl r0
    14d4:	0000000c 	andeq	r0, r0, ip
    14d8:	000013c4 	andeq	r1, r0, r4, asr #7
    14dc:	08004450 	stmdaeq	r0, {r4, r6, sl, lr}
    14e0:	0000001a 	andeq	r0, r0, sl, lsl r0
    14e4:	0000000c 	andeq	r0, r0, ip
    14e8:	000013c4 	andeq	r1, r0, r4, asr #7
    14ec:	0800446c 	stmdaeq	r0, {r2, r3, r5, r6, sl, lr}
    14f0:	0000001e 	andeq	r0, r0, lr, lsl r0
    14f4:	0000000c 	andeq	r0, r0, ip
    14f8:	000013c4 	andeq	r1, r0, r4, asr #7
    14fc:	0800448c 	stmdaeq	r0, {r2, r3, r7, sl, lr}
    1500:	0000001e 	andeq	r0, r0, lr, lsl r0
    1504:	0000000c 	andeq	r0, r0, ip
    1508:	000013c4 	andeq	r1, r0, r4, asr #7
    150c:	080044ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, lr}
    1510:	0000001e 	andeq	r0, r0, lr, lsl r0
    1514:	0000000c 	andeq	r0, r0, ip
    1518:	000013c4 	andeq	r1, r0, r4, asr #7
    151c:	080044cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, lr}
    1520:	0000001a 	andeq	r0, r0, sl, lsl r0
    1524:	0000000c 	andeq	r0, r0, ip
    1528:	000013c4 	andeq	r1, r0, r4, asr #7
    152c:	080044e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, lr}
    1530:	00000004 	andeq	r0, r0, r4
    1534:	0000000c 	andeq	r0, r0, ip
    1538:	000013c4 	andeq	r1, r0, r4, asr #7
    153c:	080044ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, lr}
    1540:	00000006 	andeq	r0, r0, r6
    1544:	0000000c 	andeq	r0, r0, ip
    1548:	000013c4 	andeq	r1, r0, r4, asr #7
    154c:	080044f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, lr}
    1550:	0000001a 	andeq	r0, r0, sl, lsl r0
    1554:	0000000c 	andeq	r0, r0, ip
    1558:	000013c4 	andeq	r1, r0, r4, asr #7
    155c:	08004510 	stmdaeq	r0, {r4, r8, sl, lr}
    1560:	0000001e 	andeq	r0, r0, lr, lsl r0
    1564:	0000000c 	andeq	r0, r0, ip
    1568:	000013c4 	andeq	r1, r0, r4, asr #7
    156c:	08004530 	stmdaeq	r0, {r4, r5, r8, sl, lr}
    1570:	0000001a 	andeq	r0, r0, sl, lsl r0
    1574:	0000000c 	andeq	r0, r0, ip
    1578:	000013c4 	andeq	r1, r0, r4, asr #7
    157c:	0800454c 	stmdaeq	r0, {r2, r3, r6, r8, sl, lr}
    1580:	00000008 	andeq	r0, r0, r8
    1584:	0000000c 	andeq	r0, r0, ip
    1588:	000013c4 	andeq	r1, r0, r4, asr #7
    158c:	08004554 	stmdaeq	r0, {r2, r4, r6, r8, sl, lr}
    1590:	0000001a 	andeq	r0, r0, sl, lsl r0
    1594:	0000000c 	andeq	r0, r0, ip
    1598:	000013c4 	andeq	r1, r0, r4, asr #7
    159c:	08004570 	stmdaeq	r0, {r4, r5, r6, r8, sl, lr}
    15a0:	0000001a 	andeq	r0, r0, sl, lsl r0
    15a4:	00000010 	andeq	r0, r0, r0, lsl r0
    15a8:	000013c4 	andeq	r1, r0, r4, asr #7
    15ac:	0800458c 	stmdaeq	r0, {r2, r3, r7, r8, sl, lr}
    15b0:	00000018 	andeq	r0, r0, r8, lsl r0
    15b4:	00080e41 	andeq	r0, r8, r1, asr #28
    15b8:	0000000c 	andeq	r0, r0, ip
    15bc:	000013c4 	andeq	r1, r0, r4, asr #7
    15c0:	080045a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, lr}
    15c4:	00000014 	andeq	r0, r0, r4, lsl r0
    15c8:	0000000c 	andeq	r0, r0, ip
    15cc:	000013c4 	andeq	r1, r0, r4, asr #7
    15d0:	080045b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, lr}
    15d4:	00000018 	andeq	r0, r0, r8, lsl r0
    15d8:	0000000c 	andeq	r0, r0, ip
    15dc:	000013c4 	andeq	r1, r0, r4, asr #7
    15e0:	080045d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, lr}
    15e4:	00000010 	andeq	r0, r0, r0, lsl r0
    15e8:	00000010 	andeq	r0, r0, r0, lsl r0
    15ec:	000013c4 	andeq	r1, r0, r4, asr #7
    15f0:	080045e0 	stmdaeq	r0, {r5, r6, r7, r8, sl, lr}
    15f4:	00000036 	andeq	r0, r0, r6, lsr r0
    15f8:	00080e41 	andeq	r0, r8, r1, asr #28
    15fc:	0000000c 	andeq	r0, r0, ip
    1600:	000013c4 	andeq	r1, r0, r4, asr #7
    1604:	08004618 	stmdaeq	r0, {r3, r4, r9, sl, lr}
    1608:	00000008 	andeq	r0, r0, r8
    160c:	0000000c 	andeq	r0, r0, ip
    1610:	000013c4 	andeq	r1, r0, r4, asr #7
    1614:	08004620 	stmdaeq	r0, {r5, r9, sl, lr}
    1618:	0000001c 	andeq	r0, r0, ip, lsl r0
    161c:	0000000c 	andeq	r0, r0, ip
    1620:	000013c4 	andeq	r1, r0, r4, asr #7
    1624:	0800463c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, lr}
    1628:	00000008 	andeq	r0, r0, r8
    162c:	0000000c 	andeq	r0, r0, ip
    1630:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1634:	7c020001 	stcvc	0, cr0, [r2], {1}
    1638:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    163c:	00000014 	andeq	r0, r0, r4, lsl r0
    1640:	0000162c 	andeq	r1, r0, ip, lsr #12
    1644:	08004644 	stmdaeq	r0, {r2, r6, r9, sl, lr}
    1648:	00000130 	andeq	r0, r0, r0, lsr r1
    164c:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
    1650:	00000001 	andeq	r0, r0, r1
    1654:	00000020 	andeq	r0, r0, r0, lsr #32
    1658:	0000162c 	andeq	r1, r0, ip, lsr #12
    165c:	08004774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, lr}
    1660:	00000070 	andeq	r0, r0, r0, ror r0
    1664:	841c0e46 	ldrhi	r0, [ip], #-3654	; 0xe46
    1668:	86068507 	strhi	r8, [r6], -r7, lsl #10
    166c:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    1670:	8a028903 	bhi	a3a84 <_Min_Stack_Size+0xa3684>
    1674:	00000001 	andeq	r0, r0, r1
    1678:	0000000c 	andeq	r0, r0, ip
    167c:	0000162c 	andeq	r1, r0, ip, lsr #12
    1680:	080047e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, lr}
    1684:	00000022 	andeq	r0, r0, r2, lsr #32
    1688:	0000000c 	andeq	r0, r0, ip
    168c:	0000162c 	andeq	r1, r0, ip, lsr #12
    1690:	08004808 	stmdaeq	r0, {r3, fp, lr}
    1694:	00000014 	andeq	r0, r0, r4, lsl r0
    1698:	0000000c 	andeq	r0, r0, ip
    169c:	0000162c 	andeq	r1, r0, ip, lsr #12
    16a0:	0800481c 	stmdaeq	r0, {r2, r3, r4, fp, lr}
    16a4:	00000014 	andeq	r0, r0, r4, lsl r0
    16a8:	0000000c 	andeq	r0, r0, ip
    16ac:	0000162c 	andeq	r1, r0, ip, lsr #12
    16b0:	08004830 	stmdaeq	r0, {r4, r5, fp, lr}
    16b4:	00000014 	andeq	r0, r0, r4, lsl r0
    16b8:	0000000c 	andeq	r0, r0, ip
    16bc:	0000162c 	andeq	r1, r0, ip, lsr #12
    16c0:	08004844 	stmdaeq	r0, {r2, r6, fp, lr}
    16c4:	00000004 	andeq	r0, r0, r4
    16c8:	0000000c 	andeq	r0, r0, ip
    16cc:	0000162c 	andeq	r1, r0, ip, lsr #12
    16d0:	08004848 	stmdaeq	r0, {r3, r6, fp, lr}
    16d4:	00000006 	andeq	r0, r0, r6
    16d8:	0000000c 	andeq	r0, r0, ip
    16dc:	0000162c 	andeq	r1, r0, ip, lsr #12
    16e0:	08004850 	stmdaeq	r0, {r4, r6, fp, lr}
    16e4:	00000018 	andeq	r0, r0, r8, lsl r0
    16e8:	0000000c 	andeq	r0, r0, ip
    16ec:	0000162c 	andeq	r1, r0, ip, lsr #12
    16f0:	08004868 	stmdaeq	r0, {r3, r5, r6, fp, lr}
    16f4:	00000014 	andeq	r0, r0, r4, lsl r0
    16f8:	0000000c 	andeq	r0, r0, ip
    16fc:	0000162c 	andeq	r1, r0, ip, lsr #12
    1700:	0800487c 	stmdaeq	r0, {r2, r3, r4, r5, r6, fp, lr}
    1704:	0000000a 	andeq	r0, r0, sl
    1708:	0000000c 	andeq	r0, r0, ip
    170c:	0000162c 	andeq	r1, r0, ip, lsr #12
    1710:	08004888 	stmdaeq	r0, {r3, r7, fp, lr}
    1714:	00000008 	andeq	r0, r0, r8
    1718:	0000000c 	andeq	r0, r0, ip
    171c:	0000162c 	andeq	r1, r0, ip, lsr #12
    1720:	08004890 	stmdaeq	r0, {r4, r7, fp, lr}
    1724:	00000008 	andeq	r0, r0, r8
    1728:	0000000c 	andeq	r0, r0, ip
    172c:	0000162c 	andeq	r1, r0, ip, lsr #12
    1730:	08004898 	stmdaeq	r0, {r3, r4, r7, fp, lr}
    1734:	00000008 	andeq	r0, r0, r8
    1738:	00000014 	andeq	r0, r0, r4, lsl r0
    173c:	0000162c 	andeq	r1, r0, ip, lsr #12
    1740:	080048a0 	stmdaeq	r0, {r5, r7, fp, lr}
    1744:	0000003c 	andeq	r0, r0, ip, lsr r0
    1748:	84040e43 	strhi	r0, [r4], #-3651	; 0xe43
    174c:	00000001 	andeq	r0, r0, r1
    1750:	00000014 	andeq	r0, r0, r4, lsl r0
    1754:	0000162c 	andeq	r1, r0, ip, lsr #12
    1758:	080048dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, lr}
    175c:	00000034 	andeq	r0, r0, r4, lsr r0
    1760:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
    1764:	00000001 	andeq	r0, r0, r1
    1768:	0000000c 	andeq	r0, r0, ip
    176c:	0000162c 	andeq	r1, r0, ip, lsr #12
    1770:	08004910 	stmdaeq	r0, {r4, r8, fp, lr}
    1774:	00000040 	andeq	r0, r0, r0, asr #32
    1778:	00000018 	andeq	r0, r0, r8, lsl r0
    177c:	0000162c 	andeq	r1, r0, ip, lsr #12
    1780:	08004950 	stmdaeq	r0, {r4, r6, r8, fp, lr}
    1784:	00000054 	andeq	r0, r0, r4, asr r0
    1788:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    178c:	86028503 	strhi	r8, [r2], -r3, lsl #10
    1790:	00000001 	andeq	r0, r0, r1
    1794:	00000014 	andeq	r0, r0, r4, lsl r0
    1798:	0000162c 	andeq	r1, r0, ip, lsr #12
    179c:	080049a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, lr}
    17a0:	00000034 	andeq	r0, r0, r4, lsr r0
    17a4:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
    17a8:	00000001 	andeq	r0, r0, r1
    17ac:	0000000c 	andeq	r0, r0, ip
    17b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    17b4:	7c020001 	stcvc	0, cr0, [r2], {1}
    17b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    17bc:	00000014 	andeq	r0, r0, r4, lsl r0
    17c0:	000017ac 	andeq	r1, r0, ip, lsr #15
    17c4:	080049d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp, lr}
    17c8:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    17cc:	83080e41 	movwhi	r0, #36417	; 0x8e41
    17d0:	00018e02 	andeq	r8, r1, r2, lsl #28
    17d4:	00000020 	andeq	r0, r0, r0, lsr #32
    17d8:	000017ac 	andeq	r1, r0, ip, lsr #15
    17dc:	08004aa8 	stmdaeq	r0, {r3, r5, r7, r9, fp, lr}
    17e0:	00000052 	andeq	r0, r0, r2, asr r0
    17e4:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
    17e8:	86068507 	strhi	r8, [r6], -r7, lsl #10
    17ec:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    17f0:	8a028903 	bhi	a3c04 <_Min_Stack_Size+0xa3804>
    17f4:	00000001 	andeq	r0, r0, r1
    17f8:	00000020 	andeq	r0, r0, r0, lsr #32
    17fc:	000017ac 	andeq	r1, r0, ip, lsr #15
    1800:	08004afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, lr}
    1804:	000000ec 	andeq	r0, r0, ip, ror #1
    1808:	841c0e49 	ldrhi	r0, [ip], #-3657	; 0xe49
    180c:	86068507 	strhi	r8, [r6], -r7, lsl #10
    1810:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    1814:	8a028903 	bhi	a3c28 <_Min_Stack_Size+0xa3828>
    1818:	00000001 	andeq	r0, r0, r1
    181c:	0000000c 	andeq	r0, r0, ip
    1820:	000017ac 	andeq	r1, r0, ip, lsr #15
    1824:	08004be8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, lr}
    1828:	00000018 	andeq	r0, r0, r8, lsl r0
    182c:	0000000c 	andeq	r0, r0, ip
    1830:	000017ac 	andeq	r1, r0, ip, lsr #15
    1834:	08004c00 	stmdaeq	r0, {sl, fp, lr}
    1838:	0000000e 	andeq	r0, r0, lr
    183c:	0000000c 	andeq	r0, r0, ip
    1840:	000017ac 	andeq	r1, r0, ip, lsr #15
    1844:	08004c10 	stmdaeq	r0, {r4, sl, fp, lr}
    1848:	0000001a 	andeq	r0, r0, sl, lsl r0
    184c:	0000000c 	andeq	r0, r0, ip
    1850:	000017ac 	andeq	r1, r0, ip, lsr #15
    1854:	08004c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, lr}
    1858:	0000001a 	andeq	r0, r0, sl, lsl r0
    185c:	0000000c 	andeq	r0, r0, ip
    1860:	000017ac 	andeq	r1, r0, ip, lsr #15
    1864:	08004c48 	stmdaeq	r0, {r3, r6, sl, fp, lr}
    1868:	00000016 	andeq	r0, r0, r6, lsl r0
    186c:	0000000c 	andeq	r0, r0, ip
    1870:	000017ac 	andeq	r1, r0, ip, lsr #15
    1874:	08004c60 	stmdaeq	r0, {r5, r6, sl, fp, lr}
    1878:	0000001e 	andeq	r0, r0, lr, lsl r0
    187c:	0000000c 	andeq	r0, r0, ip
    1880:	000017ac 	andeq	r1, r0, ip, lsr #15
    1884:	08004c80 	stmdaeq	r0, {r7, sl, fp, lr}
    1888:	00000020 	andeq	r0, r0, r0, lsr #32
    188c:	0000000c 	andeq	r0, r0, ip
    1890:	000017ac 	andeq	r1, r0, ip, lsr #15
    1894:	08004ca0 	stmdaeq	r0, {r5, r7, sl, fp, lr}
    1898:	0000001a 	andeq	r0, r0, sl, lsl r0
    189c:	0000000c 	andeq	r0, r0, ip
    18a0:	000017ac 	andeq	r1, r0, ip, lsr #15
    18a4:	08004cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, lr}
    18a8:	0000001a 	andeq	r0, r0, sl, lsl r0
    18ac:	00000014 	andeq	r0, r0, r4, lsl r0
    18b0:	000017ac 	andeq	r1, r0, ip, lsr #15
    18b4:	08004cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, lr}
    18b8:	00000046 	andeq	r0, r0, r6, asr #32
    18bc:	84080e4d 	strhi	r0, [r8], #-3661	; 0xe4d
    18c0:	00018502 	andeq	r8, r1, r2, lsl #10
    18c4:	0000000c 	andeq	r0, r0, ip
    18c8:	000017ac 	andeq	r1, r0, ip, lsr #15
    18cc:	08004d20 	stmdaeq	r0, {r5, r8, sl, fp, lr}
    18d0:	00000006 	andeq	r0, r0, r6
    18d4:	0000000c 	andeq	r0, r0, ip
    18d8:	000017ac 	andeq	r1, r0, ip, lsr #15
    18dc:	08004d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, lr}
    18e0:	00000004 	andeq	r0, r0, r4
    18e4:	0000000c 	andeq	r0, r0, ip
    18e8:	000017ac 	andeq	r1, r0, ip, lsr #15
    18ec:	08004d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp, lr}
    18f0:	0000001a 	andeq	r0, r0, sl, lsl r0
    18f4:	0000000c 	andeq	r0, r0, ip
    18f8:	000017ac 	andeq	r1, r0, ip, lsr #15
    18fc:	08004d48 	stmdaeq	r0, {r3, r6, r8, sl, fp, lr}
    1900:	0000000c 	andeq	r0, r0, ip
    1904:	0000000c 	andeq	r0, r0, ip
    1908:	000017ac 	andeq	r1, r0, ip, lsr #15
    190c:	08004d54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, lr}
    1910:	0000000c 	andeq	r0, r0, ip
    1914:	0000000c 	andeq	r0, r0, ip
    1918:	000017ac 	andeq	r1, r0, ip, lsr #15
    191c:	08004d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, lr}
    1920:	00000006 	andeq	r0, r0, r6
    1924:	0000000c 	andeq	r0, r0, ip
    1928:	000017ac 	andeq	r1, r0, ip, lsr #15
    192c:	08004d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, lr}
    1930:	00000014 	andeq	r0, r0, r4, lsl r0
    1934:	0000000c 	andeq	r0, r0, ip
    1938:	000017ac 	andeq	r1, r0, ip, lsr #15
    193c:	08004d7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, fp, lr}
    1940:	0000001e 	andeq	r0, r0, lr, lsl r0
    1944:	0000000c 	andeq	r0, r0, ip
    1948:	000017ac 	andeq	r1, r0, ip, lsr #15
    194c:	08004d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, lr}
    1950:	0000000c 	andeq	r0, r0, ip
    1954:	0000000c 	andeq	r0, r0, ip
    1958:	000017ac 	andeq	r1, r0, ip, lsr #15
    195c:	08004da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, lr}
    1960:	00000008 	andeq	r0, r0, r8
    1964:	00000014 	andeq	r0, r0, r4, lsl r0
    1968:	000017ac 	andeq	r1, r0, ip, lsr #15
    196c:	08004db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp, lr}
    1970:	0000002a 	andeq	r0, r0, sl, lsr #32
    1974:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
    1978:	00000001 	andeq	r0, r0, r1
    197c:	0000000c 	andeq	r0, r0, ip
    1980:	000017ac 	andeq	r1, r0, ip, lsr #15
    1984:	08004ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, lr}
    1988:	00000012 	andeq	r0, r0, r2, lsl r0
    198c:	0000000c 	andeq	r0, r0, ip
    1990:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1994:	7c020001 	stcvc	0, cr0, [r2], {1}
    1998:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    199c:	0000000c 	andeq	r0, r0, ip
    19a0:	0000198c 	andeq	r1, r0, ip, lsl #19
    19a4:	08004df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp, lr}
    19a8:	0000001c 	andeq	r0, r0, ip, lsl r0
    19ac:	00000018 	andeq	r0, r0, r8, lsl r0
    19b0:	0000198c 	andeq	r1, r0, ip, lsl #19
    19b4:	08004e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, lr}
    19b8:	00000080 	andeq	r0, r0, r0, lsl #1
    19bc:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
    19c0:	86028503 	strhi	r8, [r2], -r3, lsl #10
    19c4:	00000001 	andeq	r0, r0, r1
    19c8:	0000000c 	andeq	r0, r0, ip
    19cc:	0000198c 	andeq	r1, r0, ip, lsl #19
    19d0:	08004e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, lr}
    19d4:	0000000e 	andeq	r0, r0, lr
    19d8:	0000000c 	andeq	r0, r0, ip
    19dc:	0000198c 	andeq	r1, r0, ip, lsl #19
    19e0:	08004e9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, fp, lr}
    19e4:	00000010 	andeq	r0, r0, r0, lsl r0
    19e8:	0000000c 	andeq	r0, r0, ip
    19ec:	0000198c 	andeq	r1, r0, ip, lsl #19
    19f0:	08004eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, lr}
    19f4:	00000014 	andeq	r0, r0, r4, lsl r0
    19f8:	0000000c 	andeq	r0, r0, ip
    19fc:	0000198c 	andeq	r1, r0, ip, lsl #19
    1a00:	08004ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, lr}
    1a04:	0000000c 	andeq	r0, r0, ip
    1a08:	0000000c 	andeq	r0, r0, ip
    1a0c:	0000198c 	andeq	r1, r0, ip, lsl #19
    1a10:	08004ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, lr}
    1a14:	00000014 	andeq	r0, r0, r4, lsl r0
    1a18:	0000000c 	andeq	r0, r0, ip
    1a1c:	0000198c 	andeq	r1, r0, ip, lsl #19
    1a20:	08004ee0 	stmdaeq	r0, {r5, r6, r7, r9, sl, fp, lr}
    1a24:	0000000c 	andeq	r0, r0, ip
    1a28:	0000000c 	andeq	r0, r0, ip
    1a2c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1a30:	7c020001 	stcvc	0, cr0, [r2], {1}
    1a34:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1a38:	00000018 	andeq	r0, r0, r8, lsl r0
    1a3c:	00001a28 	andeq	r1, r0, r8, lsr #20
    1a40:	08004eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, lr}
    1a44:	0000004c 	andeq	r0, r0, ip, asr #32
    1a48:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1a4c:	42018e02 	andmi	r8, r1, #2, 28
    1a50:	0000100e 	andeq	r1, r0, lr
    1a54:	0000000c 	andeq	r0, r0, ip
    1a58:	00001a28 	andeq	r1, r0, r8, lsr #20
    1a5c:	08004f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, lr}
    1a60:	00000018 	andeq	r0, r0, r8, lsl r0
    1a64:	0000000c 	andeq	r0, r0, ip
    1a68:	00001a28 	andeq	r1, r0, r8, lsr #20
    1a6c:	08004f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, lr}
    1a70:	00000018 	andeq	r0, r0, r8, lsl r0
    1a74:	0000000c 	andeq	r0, r0, ip
    1a78:	00001a28 	andeq	r1, r0, r8, lsr #20
    1a7c:	08004f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, lr}
    1a80:	0000001c 	andeq	r0, r0, ip, lsl r0
    1a84:	00000018 	andeq	r0, r0, r8, lsl r0
    1a88:	00001a28 	andeq	r1, r0, r8, lsr #20
    1a8c:	08004f84 	stmdaeq	r0, {r2, r7, r8, r9, sl, fp, lr}
    1a90:	00000084 	andeq	r0, r0, r4, lsl #1
    1a94:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    1a98:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1a9c:	280e4301 	stmdacs	lr, {r0, r8, r9, lr}
    1aa0:	00000014 	andeq	r0, r0, r4, lsl r0
    1aa4:	00001a28 	andeq	r1, r0, r8, lsr #20
    1aa8:	08005008 	stmdaeq	r0, {r3, ip, lr}
    1aac:	00000014 	andeq	r0, r0, r4, lsl r0
    1ab0:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1ab4:	00018e02 	andeq	r8, r1, r2, lsl #28
    1ab8:	0000001c 	andeq	r0, r0, ip, lsl r0
    1abc:	00001a28 	andeq	r1, r0, r8, lsr #20
    1ac0:	0800501c 	stmdaeq	r0, {r2, r3, r4, ip, lr}
    1ac4:	000000a0 	andeq	r0, r0, r0, lsr #1
    1ac8:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xe41
    1acc:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1ad0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1ad4:	200e4501 	andcs	r4, lr, r1, lsl #10
    1ad8:	00000024 	andeq	r0, r0, r4, lsr #32
    1adc:	00001a28 	andeq	r1, r0, r8, lsr #20
    1ae0:	080050bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, lr}
    1ae4:	00000174 	andeq	r0, r0, r4, ror r1
    1ae8:	84240e42 	strthi	r0, [r4], #-3650	; 0xe42
    1aec:	86088509 	strhi	r8, [r8], -r9, lsl #10
    1af0:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    1af4:	8a048905 	bhi	123f10 <_Min_Stack_Size+0x123b10>
    1af8:	8e028b03 	vmlahi.f64	d8, d2, d3
    1afc:	300e4301 	andcc	r4, lr, r1, lsl #6
    1b00:	00000014 	andeq	r0, r0, r4, lsl r0
    1b04:	00001a28 	andeq	r1, r0, r8, lsr #20
    1b08:	08005230 	stmdaeq	r0, {r4, r5, r9, ip, lr}
    1b0c:	00000030 	andeq	r0, r0, r0, lsr r0
    1b10:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1b14:	00018502 	andeq	r8, r1, r2, lsl #10
